Search.setIndex({"docnames": ["CODE_OF_CONDUCT", "CONTRIBUTING", "FX", "NAS", "SECURITY", "Welcome", "adaptor", "api-documentation/adaptor", "api-documentation/adaptor/onnxrt", "api-documentation/adaptor/torch_utils", "api-documentation/adaptor/torch_utils/bf16_convert", "api-documentation/adaptor/torch_utils/hawq_metric", "api-documentation/adaptor/torch_utils/onnx", "api-documentation/adaptor/torch_utils/symbolic_trace", "api-documentation/adaptor/torch_utils/util", "api-documentation/algorithm", "api-documentation/apis", "api-documentation/common", "api-documentation/common/benchmark", "api-documentation/common/bleu", "api-documentation/common/criterion", "api-documentation/common/data", "api-documentation/common/data/dataloader", "api-documentation/common/data/datasets", "api-documentation/common/data/transforms", "api-documentation/common/metric", "api-documentation/common/model", "api-documentation/common/optimizer", "api-documentation/component", "api-documentation/component/Distillation", "api-documentation/component/MixedPrecision", "api-documentation/component/ModelConversion", "api-documentation/component/Nas", "api-documentation/component/Pruning", "api-documentation/component/Quantization", "api-documentation/component/Scheduler", "api-documentation/contrib", "api-documentation/model", "api-documentation/newAPI", "api-documentation/newAPI/benchmark", "api-documentation/newAPI/objective", "api-documentation/newAPI/quantization", "api-documentation/newAPI/training", "api-documentation/new_api", "api-documentation/new_api/config", "api-documentation/new_api/mix_precision", "api-documentation/pythonic", "api-documentation/strategy", "api-documentation/strategy/strategy", "api-documentation/utils", "autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruner/criteria/index", "autoapi/neural_compressor/pruner/index", "autoapi/neural_compressor/pruner/logger/index", "autoapi/neural_compressor/pruner/patterns/index", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/pruner/pruner_legacy/index", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index", "autoapi/neural_compressor/pruner/pruners/index", "autoapi/neural_compressor/pruner/pruning/index", "autoapi/neural_compressor/pruner/regs/index", "autoapi/neural_compressor/pruner/schedulers/index", "autoapi/neural_compressor/pruner/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "bench", "benchmark", "dataloader", "dataset", "design", "distillation", "distillation_quantization", "distributed", "examples_readme", "export", "faq", "framework_yaml", "incompatible_changes", "index", "infrastructure", "installation_guide", "legal_information", "metric", "mixed_precision", "model", "objective", "orchestration", "platform_configuration", "pruning", "pruning_details", "publication_list", "pythonic_style", "quantization", "quantization_mixed_precision", "releases_info", "sigopt_strategy", "tensorboard", "transform", "tuning_strategies", "user_yaml", "validated_model_list"], "filenames": ["CODE_OF_CONDUCT.md", "CONTRIBUTING.md", "FX.md", "NAS.md", "SECURITY.md", "Welcome.md", "adaptor.md", "api-documentation/adaptor.rst", "api-documentation/adaptor/onnxrt.rst", "api-documentation/adaptor/torch_utils.rst", "api-documentation/adaptor/torch_utils/bf16_convert.rst", "api-documentation/adaptor/torch_utils/hawq_metric.rst", "api-documentation/adaptor/torch_utils/onnx.rst", "api-documentation/adaptor/torch_utils/symbolic_trace.rst", "api-documentation/adaptor/torch_utils/util.rst", "api-documentation/algorithm.rst", "api-documentation/apis.rst", "api-documentation/common.rst", "api-documentation/common/benchmark.rst", "api-documentation/common/bleu.rst", "api-documentation/common/criterion.rst", "api-documentation/common/data.rst", "api-documentation/common/data/dataloader.rst", "api-documentation/common/data/datasets.rst", "api-documentation/common/data/transforms.rst", "api-documentation/common/metric.rst", "api-documentation/common/model.rst", "api-documentation/common/optimizer.rst", "api-documentation/component.rst", "api-documentation/component/Distillation.rst", "api-documentation/component/MixedPrecision.rst", "api-documentation/component/ModelConversion.rst", "api-documentation/component/Nas.rst", "api-documentation/component/Pruning.rst", "api-documentation/component/Quantization.rst", "api-documentation/component/Scheduler.rst", "api-documentation/contrib.rst", "api-documentation/model.rst", "api-documentation/newAPI.rst", "api-documentation/newAPI/benchmark.rst", "api-documentation/newAPI/objective.rst", "api-documentation/newAPI/quantization.rst", "api-documentation/newAPI/training.rst", "api-documentation/new_api.rst", "api-documentation/new_api/config.rst", "api-documentation/new_api/mix_precision.rst", "api-documentation/pythonic.rst", "api-documentation/strategy.rst", "api-documentation/strategy/strategy.rst", "api-documentation/utils.rst", "autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruner/criteria/index.rst", "autoapi/neural_compressor/pruner/index.rst", "autoapi/neural_compressor/pruner/logger/index.rst", "autoapi/neural_compressor/pruner/patterns/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/pruner/pruners/index.rst", "autoapi/neural_compressor/pruner/pruning/index.rst", "autoapi/neural_compressor/pruner/regs/index.rst", "autoapi/neural_compressor/pruner/schedulers/index.rst", "autoapi/neural_compressor/pruner/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "bench.md", "benchmark.md", "dataloader.md", "dataset.md", "design.md", "distillation.md", "distillation_quantization.md", "distributed.md", "examples_readme.md", "export.md", "faq.md", "framework_yaml.md", "incompatible_changes.md", "index.rst", "infrastructure.md", "installation_guide.md", "legal_information.md", "metric.md", "mixed_precision.md", "model.md", "objective.md", "orchestration.md", "platform_configuration.md", "pruning.md", "pruning_details.md", "publication_list.md", "pythonic_style.md", "quantization.md", "quantization_mixed_precision.md", "releases_info.md", "sigopt_strategy.md", "tensorboard.md", "transform.md", "tuning_strategies.md", "user_yaml.md", "validated_model_list.md"], "titles": ["Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNXRT", "Torch Utils", "Bf16 Convert", "Hawq Metric", "Onnx", "Symbolic Trace", "Util", "Algorithm", "APIs", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Contrib", "Model", "newAPI", "Benchmark", "Objective", "Quantization", "Training", "New API", "Config", "Mix Precision", "Pythonic", "Strategy", "Strategies", "Utils", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Bench", "Benchmark", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Incompatible changes between v1.2 and v1.1", "Intel\u00ae Neural Compressor Documentation", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Pruning details", "Full Publications/Events (52)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models"], "terms": {"In": [0, 2, 3, 6, 55, 100, 111, 112, 155, 215, 243, 253, 276, 280, 298, 311, 313, 322, 341, 348, 350, 362, 562, 564, 565, 567, 569, 579, 582, 583, 585, 586, 589, 590, 592, 593, 594, 595], "interest": [0, 5, 593], "foster": 0, "an": [0, 2, 3, 5, 6, 19, 55, 63, 87, 106, 111, 112, 114, 155, 179, 180, 187, 191, 195, 196, 209, 214, 218, 222, 227, 233, 237, 242, 243, 247, 252, 256, 260, 265, 269, 276, 277, 280, 281, 282, 289, 296, 299, 300, 301, 317, 318, 319, 322, 323, 324, 327, 334, 341, 348, 351, 356, 443, 448, 524, 561, 564, 565, 566, 571, 579, 580, 582, 586, 587, 592, 593, 594, 595], "open": [0, 5, 237, 276, 318, 527, 561, 562, 571, 572, 587], "welcom": [0, 1, 575], "environ": [0, 234, 318, 482, 514, 515, 523, 547, 562, 563, 577, 595], "we": [0, 2, 5, 6, 19, 55, 88, 111, 112, 114, 118, 131, 150, 179, 180, 195, 215, 234, 236, 237, 253, 277, 280, 287, 298, 299, 319, 322, 359, 375, 564, 569, 571, 573, 579, 582, 583, 585, 586, 588, 589, 592, 593, 595], "maintain": [0, 1, 5, 284, 326, 581, 585, 591], "make": [0, 1, 6, 88, 112, 179, 180, 195, 214, 252, 311, 313, 315, 341, 348, 351, 379, 398, 431, 463, 562, 563, 564, 573, 579, 589, 590, 592, 595], "particip": 0, "project": [0, 1, 233, 269, 298, 399, 402, 407, 409, 410, 413, 420, 421, 425, 426, 427, 428, 429, 430, 431, 455, 575, 587, 592, 595], "commun": [0, 318, 515, 549, 550, 551, 562], "harass": 0, "free": [0, 204, 205, 353, 579, 582, 592], "experi": [0, 204, 592, 595], "everyon": 0, "regardless": [0, 280, 322], "ag": [0, 291], "bodi": 0, "size": [0, 143, 150, 206, 208, 209, 215, 218, 222, 224, 227, 229, 233, 244, 246, 247, 253, 256, 260, 262, 265, 266, 269, 280, 289, 292, 298, 311, 322, 334, 337, 341, 379, 399, 409, 410, 532, 534, 535, 562, 564, 565, 569, 572, 582, 585, 586, 594, 596, 597], "disabl": [0, 185, 522, 551], "ethnic": 0, "sex": [0, 198], "characterist": 0, "gender": 0, "ident": [0, 118, 123, 124, 150, 179, 311, 341, 567], "express": [0, 91, 277, 319], "level": [0, 61, 64, 357, 364, 373, 376, 525, 547, 595], "educ": 0, "socio": 0, "econom": 0, "statu": [0, 150, 399, 410, 413, 418, 420, 426, 428, 429, 517, 530, 546, 559, 564, 582], "nation": [0, 218, 256], "person": [0, 198, 587], "appear": [0, 562], "race": 0, "religion": 0, "sexual": 0, "orient": 0, "exampl": [0, 1, 5, 63, 155, 187, 191, 216, 217, 218, 229, 232, 233, 254, 255, 256, 266, 268, 269, 280, 281, 282, 284, 290, 314, 322, 323, 324, 326, 336, 349, 369, 407, 425, 431, 455, 479, 480, 481, 482, 527, 534, 562, 574, 575, 576, 590, 591, 594, 595], "behavior": [0, 1, 6, 280, 322, 573, 581, 593, 596], "contribut": [0, 5], "creat": [0, 3, 6, 50, 51, 52, 53, 55, 63, 91, 150, 162, 179, 206, 216, 218, 236, 237, 244, 254, 256, 270, 276, 280, 288, 289, 299, 300, 301, 317, 322, 356, 364, 365, 368, 372, 398, 415, 425, 426, 430, 431, 512, 533, 546, 559, 565, 581, 589, 592, 593, 595], "posit": [0, 123, 150, 233, 269, 298, 341, 562, 579], "includ": [0, 1, 5, 6, 61, 92, 93, 216, 218, 222, 225, 226, 227, 230, 233, 235, 254, 256, 260, 263, 264, 265, 267, 269, 275, 276, 280, 285, 298, 311, 315, 316, 322, 338, 341, 350, 351, 364, 365, 368, 562, 565, 577, 578, 579, 585, 586, 589, 590, 593, 595], "us": [0, 1, 2, 3, 5, 6, 19, 56, 58, 61, 63, 64, 82, 88, 89, 91, 92, 93, 111, 112, 114, 153, 155, 156, 162, 187, 191, 196, 197, 198, 204, 205, 214, 215, 216, 217, 218, 219, 220, 223, 227, 230, 232, 233, 234, 235, 240, 252, 253, 254, 255, 256, 257, 258, 261, 265, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 280, 284, 285, 286, 287, 290, 292, 298, 299, 301, 303, 306, 308, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 326, 337, 338, 341, 347, 348, 351, 356, 358, 359, 361, 362, 363, 364, 370, 371, 372, 373, 374, 375, 379, 426, 431, 436, 437, 441, 443, 455, 462, 464, 489, 493, 517, 534, 536, 546, 547, 562, 563, 564, 565, 567, 568, 569, 571, 573, 574, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "inclus": 0, "languag": [0, 19, 277, 298, 319, 587], "Being": 0, "respect": [0, 568, 573, 585, 586, 596], "differ": [0, 2, 3, 5, 19, 180, 192, 194, 195, 209, 218, 233, 235, 247, 256, 269, 275, 276, 277, 283, 284, 291, 299, 300, 302, 305, 311, 316, 317, 319, 325, 326, 341, 374, 562, 564, 565, 567, 569, 570, 571, 574, 576, 579, 581, 582, 585, 589, 593, 594, 595], "viewpoint": 0, "gracefulli": 0, "accept": [0, 55, 337, 562, 563], "construct": [0, 216, 219, 220, 223, 227, 230, 231, 236, 237, 238, 239, 241, 254, 257, 258, 261, 325, 326, 329, 331, 335, 372, 565, 569, 586, 595], "critic": [0, 5], "focus": [0, 6], "what": [0, 191, 196, 214, 252, 318, 348, 369, 562], "i": [0, 1, 2, 3, 5, 6, 7, 9, 15, 16, 17, 19, 21, 28, 36, 37, 38, 43, 46, 47, 49, 55, 56, 58, 61, 63, 64, 65, 88, 89, 91, 92, 93, 97, 98, 101, 104, 106, 108, 111, 112, 114, 125, 126, 129, 130, 136, 137, 138, 147, 149, 150, 155, 162, 172, 179, 180, 181, 185, 187, 190, 191, 195, 196, 201, 204, 205, 206, 207, 210, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 227, 229, 233, 234, 236, 237, 240, 242, 243, 244, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 269, 276, 277, 280, 282, 283, 284, 286, 289, 292, 296, 298, 301, 303, 308, 312, 313, 314, 317, 319, 322, 324, 325, 326, 327, 334, 337, 338, 341, 342, 348, 349, 350, 352, 353, 356, 357, 362, 363, 364, 369, 378, 379, 398, 431, 443, 463, 466, 468, 469, 471, 473, 474, 475, 476, 482, 520, 522, 524, 526, 527, 532, 534, 536, 542, 547, 549, 562, 563, 564, 565, 567, 569, 571, 573, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596], "best": [0, 3, 5, 89, 205, 233, 269, 270, 275, 276, 287, 288, 299, 300, 316, 337, 361, 364, 577, 582, 589, 594, 595], "show": [0, 348, 562, 567, 569, 585, 595], "empathi": 0, "toward": [0, 567], "other": [0, 1, 2, 89, 111, 112, 114, 179, 215, 253, 282, 317, 324, 335, 375, 524, 528, 551, 562, 573, 576, 577, 578, 581, 582, 584, 585, 589, 594, 595, 597], "member": [0, 6, 276, 285], "unaccept": 0, "The": [0, 2, 3, 6, 7, 9, 15, 16, 17, 19, 21, 28, 36, 37, 38, 43, 46, 47, 49, 56, 58, 61, 64, 82, 89, 91, 97, 112, 114, 118, 123, 136, 137, 138, 150, 153, 155, 159, 161, 185, 187, 191, 192, 194, 196, 197, 198, 204, 205, 206, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 230, 233, 235, 237, 238, 240, 243, 244, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 267, 269, 270, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 298, 299, 300, 301, 302, 303, 306, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 335, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 368, 369, 370, 372, 373, 374, 375, 378, 379, 399, 400, 402, 405, 409, 410, 413, 414, 416, 418, 419, 426, 431, 434, 436, 437, 438, 439, 440, 441, 442, 455, 462, 463, 515, 562, 563, 564, 565, 567, 568, 569, 571, 573, 574, 576, 577, 579, 580, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596], "imageri": 0, "unwelcom": 0, "attent": [0, 57, 66, 78, 216, 254, 296, 298, 567], "advanc": [0, 5, 187, 543, 589, 596], "troll": 0, "insult": 0, "derogatori": 0, "comment": [0, 565, 579, 594], "polit": 0, "attack": 0, "public": [0, 150], "privat": [0, 276, 285], "publish": [0, 578, 580], "inform": [0, 1, 4, 5, 6, 7, 9, 15, 16, 17, 21, 28, 36, 37, 38, 43, 46, 47, 49, 63, 91, 153, 187, 204, 205, 236, 237, 238, 239, 280, 311, 313, 314, 315, 317, 322, 325, 326, 334, 338, 341, 348, 349, 350, 351, 364, 396, 434, 463, 521, 522, 527, 528, 567, 571, 573, 575, 581, 585, 586, 590, 591, 593, 596, 597], "physic": [0, 234, 563], "electron": 0, "address": [0, 218, 256, 551, 562, 580, 587], "without": [0, 92, 93, 135, 150, 185, 233, 269, 280, 313, 322, 348, 534, 562, 564, 567, 569, 579, 585, 587, 588, 589, 595], "explicit": [0, 179], "permiss": 0, "which": [0, 2, 3, 5, 6, 19, 58, 63, 64, 89, 91, 99, 111, 112, 124, 127, 149, 150, 155, 179, 187, 196, 204, 216, 217, 218, 229, 234, 254, 255, 256, 266, 276, 277, 280, 282, 290, 292, 300, 301, 303, 304, 305, 306, 311, 312, 313, 314, 315, 318, 319, 322, 324, 331, 334, 337, 338, 341, 342, 343, 345, 346, 347, 348, 351, 354, 356, 364, 375, 379, 532, 562, 564, 565, 567, 569, 573, 576, 579, 580, 581, 583, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596], "could": [0, 2, 91, 111, 112, 204, 205, 218, 256, 317, 327, 341, 349, 353, 364, 568, 583, 585, 586, 589], "reason": [0, 125, 236, 237, 564, 593, 595], "consid": [0, 185, 284, 326, 567, 595], "inappropri": 0, "profession": 0, "set": [0, 3, 5, 56, 58, 61, 63, 64, 65, 89, 90, 101, 111, 112, 141, 150, 155, 179, 185, 191, 192, 194, 196, 198, 204, 205, 206, 208, 216, 218, 221, 233, 234, 240, 244, 246, 254, 256, 259, 269, 270, 273, 275, 276, 280, 285, 286, 287, 289, 296, 298, 299, 303, 308, 312, 317, 318, 322, 327, 335, 337, 341, 348, 352, 353, 364, 379, 381, 421, 422, 423, 426, 443, 489, 493, 501, 522, 526, 532, 533, 535, 536, 537, 542, 546, 547, 551, 562, 563, 565, 569, 573, 574, 576, 579, 580, 585, 588, 589, 592, 595, 596], "ar": [0, 1, 2, 3, 5, 6, 19, 56, 58, 65, 89, 106, 111, 112, 118, 162, 172, 201, 216, 233, 243, 254, 269, 276, 277, 280, 284, 290, 292, 296, 298, 301, 303, 308, 311, 312, 313, 314, 317, 318, 319, 322, 326, 341, 348, 349, 354, 356, 372, 378, 379, 463, 466, 468, 475, 519, 528, 562, 564, 565, 567, 568, 569, 570, 571, 573, 574, 576, 578, 579, 580, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596], "clarifi": 0, "expect": [0, 1, 91, 162, 218, 256, 356, 382, 504, 527, 572, 589, 595], "take": [0, 2, 3, 56, 58, 91, 196, 204, 205, 209, 233, 237, 238, 247, 269, 311, 318, 325, 326, 327, 341, 353, 356, 564, 567, 573, 585, 589, 590, 594, 595, 596], "appropri": 0, "fair": 0, "correct": [0, 180, 195, 280, 281, 282, 284, 312, 322, 323, 324, 326, 352, 484, 562], "action": 0, "ani": [0, 1, 112, 114, 162, 179, 187, 270, 276, 280, 282, 298, 322, 324, 375, 381, 382, 384, 386, 388, 389, 390, 391, 392, 393, 394, 396, 397, 399, 400, 402, 409, 410, 411, 412, 413, 414, 416, 419, 421, 422, 432, 434, 439, 440, 443, 445, 451, 460, 463, 466, 470, 473, 474, 475, 477, 480, 482, 485, 489, 493, 495, 498, 501, 504, 507, 512, 513, 519, 520, 522, 524, 526, 527, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 550, 551, 558, 559, 562, 564, 569, 592], "instanc": [0, 2, 6, 112, 153, 155, 156, 162, 204, 205, 216, 234, 254, 276, 281, 282, 284, 287, 299, 300, 323, 324, 326, 327, 342, 343, 345, 346, 347, 353, 356, 364, 369, 399, 438, 442, 466, 475, 542, 562, 563, 596, 597], "have": [0, 1, 19, 118, 127, 150, 185, 196, 214, 232, 236, 237, 252, 268, 277, 280, 284, 291, 311, 313, 318, 319, 322, 326, 341, 348, 562, 564, 565, 569, 573, 578, 579, 580, 582, 585, 586, 589, 595], "right": [0, 2, 229, 266, 280, 322, 532, 562, 594], "remov": [0, 1, 67, 87, 88, 91, 100, 101, 104, 106, 118, 123, 124, 127, 128, 129, 141, 143, 150, 155, 172, 179, 187, 235, 273, 282, 324, 334, 336, 399, 402, 409, 410, 413, 415, 416, 418, 420, 466, 527, 528, 535, 585, 586, 593], "edit": [0, 420, 426, 428, 429, 432], "reject": 0, "commit": [0, 1, 375], "wiki": 0, "issu": [0, 1, 4, 562, 577, 589, 593], "align": [0, 233, 269, 314, 594], "thi": [0, 1, 2, 3, 5, 6, 19, 55, 58, 87, 89, 91, 100, 106, 111, 112, 125, 130, 131, 147, 150, 155, 162, 172, 179, 180, 184, 187, 191, 195, 196, 204, 205, 215, 216, 217, 218, 219, 220, 221, 223, 232, 233, 236, 237, 242, 243, 253, 254, 255, 256, 257, 258, 259, 261, 268, 269, 276, 277, 280, 281, 282, 284, 289, 294, 295, 302, 303, 308, 311, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 326, 327, 337, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 353, 356, 361, 378, 379, 562, 564, 565, 567, 569, 573, 576, 578, 579, 580, 581, 585, 586, 589, 590, 591, 592, 593, 594, 595], "ban": 0, "temporarili": 0, "perman": 0, "thei": [0, 162, 196, 234, 276, 298, 318, 341, 375, 567, 573, 579, 582, 585, 586], "deem": 0, "threaten": 0, "offens": 0, "harm": 0, "appli": [0, 111, 119, 134, 135, 139, 141, 143, 144, 145, 153, 163, 164, 165, 166, 167, 168, 171, 173, 174, 175, 176, 177, 180, 184, 243, 276, 278, 311, 313, 320, 336, 341, 345, 348, 562, 583, 585, 586, 589, 590, 592, 595, 596], "both": [0, 3, 6, 65, 185, 187, 298, 300, 302, 568, 577, 588, 589, 595], "within": [0, 2, 275, 276, 280, 316, 322, 335, 348, 356, 580, 587], "space": [0, 1, 3, 6, 196, 204, 205, 275, 276, 282, 287, 289, 291, 299, 300, 301, 302, 316, 318, 324, 327, 337, 348, 353, 354, 356, 357, 358, 359, 361, 363, 364, 367, 534, 585, 589, 596], "when": [0, 3, 19, 88, 97, 108, 111, 114, 162, 185, 196, 201, 216, 217, 225, 226, 227, 233, 254, 255, 263, 264, 265, 269, 277, 278, 290, 298, 311, 312, 313, 318, 319, 320, 341, 342, 348, 352, 353, 532, 534, 547, 551, 562, 564, 565, 585, 586, 589, 594, 595], "individu": [0, 111, 112, 114, 288, 289, 299, 311, 341], "repres": [0, 88, 218, 223, 256, 261, 280, 282, 284, 322, 324, 326, 341, 348, 349, 350, 351, 352, 401, 403, 404, 406, 408, 411, 412, 415, 417, 532, 565, 571, 589, 595], "its": [0, 88, 91, 104, 141, 150, 153, 162, 187, 212, 218, 232, 233, 250, 256, 268, 269, 271, 272, 278, 279, 283, 284, 313, 317, 320, 321, 325, 326, 341, 348, 356, 357, 361, 562, 565, 567, 578, 579, 580, 584, 585, 586, 592, 594, 595], "offici": [0, 185, 277, 281, 282, 319, 323, 324, 562, 579], "e": [0, 61, 64, 90, 114, 289, 291, 317, 341, 524, 526, 551, 567, 585, 595], "mail": 0, "post": [0, 6, 56, 61, 64, 142, 143, 201, 204, 205, 233, 243, 269, 273, 276, 317, 318, 353, 546, 568, 569, 571, 576, 577, 593, 595], "via": [0, 111, 112, 162, 275, 276, 303, 308, 316, 551, 569, 576], "social": 0, "media": 0, "account": [0, 289, 592, 595], "act": [0, 214, 252], "appoint": 0, "onlin": [0, 5, 55, 592], "offlin": [0, 55, 379, 589], "event": [0, 593], "represent": [0, 2, 88, 100, 289, 399, 400, 402, 405, 409, 410, 413, 414, 416, 418, 419, 545, 568, 586, 589], "mai": [0, 1, 150, 179, 185, 337, 342, 343, 345, 346, 347, 564, 572, 578, 580, 584, 587, 589, 595], "further": [0, 111, 112, 114, 580, 581], "defin": [0, 3, 6, 58, 61, 64, 89, 90, 91, 131, 137, 150, 179, 187, 196, 204, 205, 235, 276, 287, 288, 291, 299, 300, 301, 302, 303, 308, 311, 312, 313, 314, 315, 318, 327, 335, 341, 348, 349, 350, 351, 353, 356, 369, 378, 457, 458, 459, 546, 562, 564, 565, 567, 573, 576, 579, 583, 585, 586, 589, 592, 593, 595, 596], "abus": 0, "otherwis": [0, 205, 218, 233, 256, 269, 364, 565, 588, 594], "report": [0, 1, 562, 592], "contact": [0, 591, 592], "inc": [0, 5, 89, 233, 269, 375, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 542, 587, 588, 591], "intel": [0, 1, 3, 4, 6, 89, 237, 240, 271, 276, 283, 284, 311, 314, 318, 325, 326, 341, 349, 360, 365, 375, 514, 527, 561, 564, 565, 566, 567, 568, 570, 571, 573, 577, 578, 580, 581, 582, 583, 584, 585, 587, 589, 590, 591, 593, 595, 596], "com": [0, 5, 187, 216, 254, 277, 278, 281, 282, 311, 314, 319, 320, 323, 324, 341, 349, 527, 562, 565, 577, 578, 591, 592, 597], "all": [0, 5, 6, 56, 58, 63, 64, 65, 82, 89, 91, 104, 107, 129, 130, 142, 162, 171, 176, 192, 194, 206, 207, 210, 214, 218, 222, 225, 226, 227, 230, 233, 234, 235, 240, 243, 244, 252, 256, 260, 263, 264, 265, 267, 269, 273, 276, 277, 280, 282, 283, 284, 294, 295, 296, 298, 301, 303, 304, 305, 306, 307, 308, 311, 314, 317, 319, 322, 324, 325, 326, 328, 329, 334, 337, 341, 347, 348, 349, 354, 356, 357, 358, 364, 379, 383, 395, 398, 407, 424, 426, 431, 436, 437, 450, 452, 455, 456, 462, 463, 466, 468, 475, 481, 488, 490, 494, 495, 497, 500, 506, 511, 515, 524, 528, 551, 562, 564, 565, 569, 573, 577, 583, 584, 585, 586, 587, 589, 590, 594, 595], "complaint": 0, "review": [0, 1], "investig": 0, "result": [0, 3, 19, 56, 58, 61, 64, 88, 89, 91, 185, 187, 191, 204, 229, 233, 234, 235, 266, 269, 276, 277, 280, 281, 282, 283, 284, 289, 291, 300, 319, 322, 323, 324, 325, 326, 337, 359, 364, 380, 382, 399, 400, 413, 414, 416, 420, 426, 429, 432, 509, 550, 553, 562, 564, 567, 569, 576, 578, 579, 582, 585, 587, 589, 592, 593, 594, 595, 597], "necessari": [0, 3, 88, 270, 276, 581, 592, 595], "circumst": [0, 588], "team": [0, 282, 324, 590], "oblig": 0, "confidenti": [0, 562], "regard": [0, 590], "incid": 0, "detail": [0, 1, 5, 58, 91, 233, 269, 296, 399, 402, 409, 410, 413, 415, 416, 418, 420, 421, 423, 426, 427, 428, 429, 430, 434, 439, 502, 507, 521, 534, 573, 574, 579, 580, 585, 591, 592, 593, 595, 597], "specif": [0, 3, 6, 58, 61, 64, 89, 90, 155, 156, 196, 207, 210, 216, 217, 218, 219, 223, 225, 226, 227, 234, 240, 254, 255, 256, 257, 261, 263, 264, 265, 276, 277, 280, 286, 287, 298, 299, 300, 318, 319, 322, 336, 342, 343, 345, 346, 347, 352, 375, 410, 421, 422, 423, 426, 434, 449, 562, 567, 573, 574, 579, 580, 581, 582, 585, 588, 595, 596], "polici": [0, 5, 361, 584, 596], "separ": [0, 232, 268, 550, 562, 574, 578, 583, 588], "who": [0, 357, 595], "do": [0, 19, 56, 58, 61, 64, 67, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 89, 92, 93, 121, 123, 147, 215, 216, 253, 254, 270, 271, 273, 276, 277, 280, 314, 317, 319, 322, 337, 349, 357, 378, 562, 565, 569, 573, 576, 577, 579, 585, 590, 591, 595], "follow": [0, 1, 2, 3, 6, 16, 65, 112, 114, 123, 130, 133, 136, 137, 138, 139, 150, 218, 256, 276, 277, 280, 298, 303, 308, 319, 322, 354, 562, 564, 565, 567, 569, 571, 573, 577, 578, 579, 580, 581, 583, 585, 586, 588, 589, 593, 595], "good": [0, 589, 595], "faith": 0, "face": [0, 5, 375, 587, 591], "temporari": [0, 379], "repercuss": 0, "determin": [0, 2, 338, 341, 348, 374, 547, 586], "": [0, 3, 61, 88, 90, 91, 100, 106, 114, 123, 150, 162, 179, 180, 181, 185, 195, 197, 198, 201, 206, 215, 218, 232, 233, 234, 236, 237, 238, 244, 253, 256, 268, 269, 276, 282, 290, 292, 298, 311, 313, 314, 318, 324, 325, 326, 327, 331, 341, 348, 353, 357, 364, 379, 432, 463, 519, 520, 567, 569, 573, 576, 577, 580, 583, 584, 585, 586, 587, 588, 589, 591, 592, 596], "leadership": 0, "adapt": [0, 58, 61, 64, 89, 90, 565], "from": [0, 2, 3, 5, 6, 19, 56, 58, 61, 63, 65, 88, 89, 91, 105, 111, 112, 113, 114, 150, 153, 155, 162, 172, 179, 181, 185, 191, 204, 205, 206, 209, 213, 216, 217, 218, 219, 220, 221, 223, 228, 229, 235, 236, 237, 243, 244, 247, 251, 254, 255, 256, 257, 258, 259, 261, 266, 270, 272, 273, 274, 276, 277, 280, 281, 282, 286, 289, 290, 291, 292, 296, 298, 301, 303, 308, 311, 312, 313, 314, 315, 317, 319, 322, 323, 324, 333, 334, 335, 337, 338, 341, 348, 349, 350, 351, 352, 356, 363, 364, 365, 368, 372, 375, 378, 379, 397, 399, 402, 403, 404, 406, 409, 410, 411, 412, 413, 415, 416, 418, 420, 421, 423, 426, 427, 428, 429, 430, 432, 443, 448, 466, 469, 478, 479, 480, 482, 507, 512, 526, 527, 532, 534, 535, 536, 542, 551, 553, 558, 559, 563, 564, 565, 567, 568, 569, 570, 571, 572, 576, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595], "version": [0, 2, 5, 6, 58, 61, 63, 64, 87, 90, 91, 97, 191, 204, 271, 273, 298, 318, 336, 356, 375, 482, 517, 522, 534, 562, 573, 577, 578, 584, 587, 595], "1": [0, 2, 5, 6, 56, 58, 61, 64, 87, 88, 89, 91, 92, 98, 111, 118, 123, 134, 149, 153, 155, 183, 185, 191, 193, 195, 196, 201, 206, 208, 211, 212, 213, 215, 216, 217, 219, 220, 223, 224, 229, 233, 234, 235, 236, 237, 244, 246, 249, 250, 251, 253, 254, 255, 257, 258, 261, 262, 266, 269, 275, 276, 280, 281, 282, 284, 289, 292, 296, 298, 303, 308, 311, 313, 316, 317, 318, 322, 323, 324, 326, 336, 341, 348, 353, 354, 362, 372, 382, 504, 512, 564, 565, 567, 571, 573, 579, 580, 582, 583, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596], "4": [0, 5, 6, 19, 91, 97, 123, 225, 226, 227, 228, 229, 230, 233, 263, 264, 265, 266, 267, 269, 277, 278, 280, 319, 320, 322, 341, 357, 524, 562, 563, 569, 572, 573, 576, 577, 579, 584, 585, 594, 595, 597], "For": [0, 2, 4, 6, 155, 218, 232, 233, 243, 256, 268, 269, 276, 280, 281, 282, 284, 289, 311, 314, 322, 323, 324, 326, 327, 341, 349, 353, 357, 524, 562, 568, 569, 571, 573, 576, 585, 590, 593, 595, 596, 597], "answer": [0, 233, 269, 281, 282, 323, 324, 594, 597], "common": [0, 123, 179, 231, 276, 286, 292, 300, 301, 302, 311, 317, 318, 341, 372, 527, 528, 534, 565, 569, 571, 574, 577, 589], "question": [0, 1, 6, 233, 269, 281, 282, 323, 324, 577, 594, 597], "about": [0, 334, 338, 434, 463, 519, 521, 522, 527, 528, 562, 564, 590, 597], "see": [0, 2, 4, 233, 269, 277, 280, 296, 319, 322, 562, 578, 593, 595, 597], "faq": [0, 5], "page": [0, 1], "If": [1, 2, 106, 111, 112, 114, 118, 125, 150, 204, 205, 218, 233, 256, 269, 280, 292, 311, 312, 313, 322, 327, 353, 354, 562, 563, 565, 569, 571, 577, 578, 579, 580, 582, 589, 592, 593, 594, 595], "you": [1, 2, 5, 214, 216, 252, 254, 280, 296, 298, 313, 322, 562, 565, 569, 571, 577, 578, 579, 585, 591, 592, 593], "improv": [1, 348, 356, 585, 586, 589, 590, 595, 597], "neural": [1, 6, 28, 63, 89, 187, 196, 201, 228, 229, 230, 233, 234, 237, 240, 243, 266, 267, 269, 271, 276, 283, 284, 286, 303, 308, 311, 314, 316, 317, 318, 325, 326, 327, 329, 331, 341, 349, 353, 359, 360, 365, 375, 438, 442, 466, 475, 514, 521, 534, 561, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 577, 578, 579, 580, 581, 582, 583, 587, 589, 591, 593, 594, 595, 596], "compressor": [1, 3, 6, 63, 89, 196, 201, 228, 229, 230, 233, 234, 237, 240, 243, 266, 267, 269, 271, 276, 283, 284, 286, 311, 314, 316, 317, 318, 325, 326, 327, 329, 331, 341, 349, 353, 360, 365, 375, 438, 442, 466, 475, 514, 521, 534, 561, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 577, 578, 579, 580, 581, 582, 583, 585, 587, 589, 591, 593, 594, 595, 596], "send": [1, 5, 503, 546, 551], "your": [1, 5, 214, 216, 252, 254, 280, 322, 562, 565, 569, 571, 577, 578, 585, 592, 593, 595], "new": [1, 63, 100, 147, 150, 172, 185, 206, 218, 227, 230, 233, 234, 244, 256, 265, 267, 269, 298, 311, 312, 315, 317, 337, 341, 351, 425, 426, 430, 546, 569, 580, 587, 589, 591, 592, 594, 596], "github": [1, 5, 187, 216, 254, 277, 278, 281, 282, 311, 314, 319, 320, 323, 324, 341, 349, 478, 480, 521, 562, 565, 570, 577, 578, 591], "view": [1, 5, 562, 570, 591], "how": [1, 2, 4, 6, 233, 269, 270, 276, 291, 292, 311, 338, 341, 348, 562, 564, 565, 567, 569, 574, 585, 586, 589, 594, 595, 596], "To": [1, 88, 280, 306, 311, 315, 322, 337, 341, 351, 524, 562, 565, 569, 571, 580, 588, 590, 591, 595, 596], "befor": [1, 147, 149, 162, 216, 243, 254, 270, 271, 273, 276, 303, 308, 311, 313, 314, 315, 341, 347, 348, 349, 350, 351, 361, 369, 420, 562, 565, 567, 569, 572, 573, 585, 589, 592, 593, 595], "below": [1, 2, 6, 98, 110, 111, 112, 118, 123, 317, 355, 357, 362, 564, 567, 569, 574, 579, 582, 583, 585, 588, 589, 592, 593, 595], "chang": [1, 125, 141, 180, 195, 313, 315, 348, 351, 356, 359, 379, 394, 400, 503, 525, 532, 564, 569, 572, 578, 579, 586, 593, 594, 595], "consist": [1, 2, 99, 107, 298, 562, 571, 595], "python": [1, 2, 16, 119, 162, 185, 218, 237, 256, 276, 280, 318, 322, 379, 482, 561, 562, 565, 569, 577, 587, 590, 594], "style": [1, 106, 209, 223, 247, 261, 565, 574], "pylint": 1, "check": [1, 5, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 106, 107, 111, 112, 123, 150, 155, 162, 185, 191, 201, 205, 218, 256, 272, 276, 286, 312, 317, 341, 348, 352, 356, 357, 364, 379, 421, 426, 463, 466, 468, 469, 471, 473, 474, 475, 476, 482, 485, 503, 519, 520, 522, 527, 534, 536, 562, 569, 577, 591], "flake8": 1, "autopep8": 1, "clean": [1, 232, 235, 268, 399, 410, 413, 420, 421, 426, 428, 429, 430, 517, 533], "add": [1, 2, 19, 65, 87, 88, 96, 103, 108, 111, 112, 149, 150, 155, 159, 165, 168, 185, 216, 218, 240, 254, 256, 276, 277, 284, 298, 303, 308, 312, 314, 317, 319, 326, 334, 349, 352, 357, 392, 399, 400, 402, 409, 410, 411, 412, 413, 414, 416, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 432, 448, 534, 559, 562, 564, 565, 569, 571, 573, 579, 592, 593, 595], "unit": [1, 311, 341, 526, 534], "test": [1, 5, 65, 233, 269, 289, 562, 577, 597], "cover": [1, 574, 587], "would": [1, 150, 341, 580, 585, 586, 589], "like": [1, 2, 3, 6, 56, 58, 61, 64, 89, 118, 123, 141, 143, 150, 179, 185, 204, 205, 206, 218, 222, 227, 244, 256, 260, 265, 275, 276, 284, 290, 313, 316, 317, 326, 335, 341, 353, 369, 562, 567, 576, 583, 585, 589, 591, 595], "run": [1, 5, 6, 55, 56, 58, 61, 63, 65, 89, 150, 185, 204, 205, 215, 232, 234, 253, 268, 276, 289, 292, 312, 313, 327, 348, 352, 353, 356, 357, 481, 527, 549, 550, 551, 562, 563, 569, 572, 573, 580, 585, 587, 589, 591, 592, 593, 595, 596], "ha": [1, 3, 6, 19, 56, 58, 61, 64, 89, 106, 107, 111, 112, 114, 118, 123, 124, 137, 150, 162, 179, 196, 234, 276, 277, 291, 311, 313, 318, 319, 341, 348, 562, 564, 571, 576, 580, 586, 588, 589, 590, 592, 595], "adopt": 1, "develop": [1, 2, 187, 337, 534, 577, 580, 587, 589, 590, 592], "certif": [1, 562], "origin": [1, 88, 89, 181, 191, 192, 194, 216, 233, 234, 254, 269, 276, 289, 298, 303, 308, 311, 312, 313, 314, 341, 342, 343, 345, 346, 347, 348, 349, 352, 357, 361, 379, 382, 565, 585, 586, 589, 594, 595, 596], "must": [1, 2, 233, 269, 280, 284, 322, 326, 563, 564, 577, 594], "agre": 1, "term": [1, 270, 276, 348, 350, 567, 578, 579, 582, 583, 595], "sign": [1, 562, 589, 592], "off": [1, 111, 112, 114, 590], "each": [1, 6, 58, 61, 64, 65, 89, 90, 91, 131, 150, 155, 181, 187, 214, 218, 221, 229, 233, 252, 256, 259, 266, 269, 278, 280, 281, 282, 291, 292, 298, 313, 320, 322, 323, 324, 335, 336, 337, 341, 348, 361, 562, 565, 567, 573, 582, 585, 586, 592, 593, 594, 595], "random": [1, 3, 99, 179, 185, 201, 229, 233, 266, 269, 289, 302, 318, 356, 360, 379, 544, 588, 594, 596], "j": [1, 551], "org": [1, 2, 5, 280, 298, 313, 322, 338, 562, 577], "type": [1, 6, 19, 56, 58, 61, 63, 64, 65, 88, 89, 90, 91, 101, 104, 105, 106, 107, 112, 114, 118, 123, 129, 130, 136, 137, 138, 139, 141, 150, 153, 155, 156, 162, 172, 179, 185, 186, 187, 191, 192, 194, 198, 201, 205, 206, 214, 216, 218, 222, 225, 226, 227, 230, 233, 235, 240, 244, 252, 254, 256, 260, 263, 264, 265, 267, 269, 271, 273, 274, 276, 277, 278, 280, 283, 284, 286, 289, 291, 298, 301, 304, 305, 306, 311, 313, 315, 317, 319, 320, 322, 325, 326, 328, 329, 335, 336, 337, 341, 347, 348, 350, 351, 352, 354, 355, 356, 357, 361, 364, 365, 368, 369, 375, 378, 392, 397, 411, 412, 421, 422, 424, 426, 464, 519, 522, 524, 526, 529, 530, 562, 565, 569, 573, 576, 580, 585, 589, 592, 594, 595, 596], "featur": [1, 150, 187, 201, 216, 217, 229, 233, 235, 254, 255, 266, 269, 298, 318, 563, 564, 566, 567, 580, 581, 586, 587, 591, 594], "bug": 1, "fix": [1, 185, 216, 254, 313, 348, 565, 586, 595], "document": [1, 233, 269, 569, 580, 591, 594], "valid": [1, 3, 6, 56, 58, 61, 89, 90, 91, 98, 103, 111, 112, 150, 179, 218, 256, 280, 292, 312, 313, 322, 335, 341, 348, 352, 482, 551, 565, 567, 573, 576, 578, 585, 586, 589, 591], "api": [1, 2, 7, 9, 15, 17, 21, 36, 37, 46, 47, 49, 63, 64, 89, 91, 114, 119, 147, 150, 162, 172, 196, 275, 276, 280, 314, 316, 318, 322, 353, 379, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 550, 551, 571, 575, 576, 591, 592, 595], "descript": [1, 2, 63, 150, 172, 179, 273, 274, 280, 300, 322, 336], "jira": 1, "ticket": 1, "xxx": [1, 218, 256, 565], "potenti": [1, 3], "risk": 1, "trigger": [1, 234, 276, 313, 348], "pr": [1, 579, 591], "been": [1, 3, 19, 107, 232, 268, 277, 291, 311, 313, 319, 341, 348, 562, 567, 580], "reproduc": 1, "hardwar": [1, 6, 61, 90, 522, 567, 576, 580, 584, 585, 586, 587, 588], "depend": [1, 56, 58, 63, 91, 106, 123, 204, 205, 234, 276, 287, 299, 300, 327, 353, 572, 573, 588, 595], "librari": [1, 5, 237, 276, 318, 561, 577, 587, 589], "introduc": [1, 6, 118, 571, 573, 585, 586, 589, 591, 595], "submit": 1, "also": [1, 3, 5, 6, 19, 111, 112, 215, 218, 222, 227, 233, 253, 256, 260, 265, 269, 277, 319, 341, 353, 362, 562, 564, 576, 579, 582, 585, 589, 590, 595], "reach": [1, 205, 311, 315, 337, 341, 351, 364, 564, 585, 586, 595], "out": [1, 2, 5, 179, 187, 216, 217, 218, 254, 255, 256, 275, 276, 298, 311, 316, 334, 341, 565, 586, 588, 589], "intend": 1, "safe": [1, 162, 374], "collabor": 1, "adher": 1, "3": [2, 3, 5, 90, 114, 123, 155, 185, 218, 222, 227, 230, 233, 256, 260, 265, 267, 269, 280, 292, 322, 524, 562, 564, 565, 567, 569, 571, 573, 579, 580, 582, 585, 588, 589, 592, 594, 595, 597], "2": [2, 5, 6, 63, 88, 90, 91, 92, 97, 118, 123, 149, 193, 217, 234, 255, 280, 282, 284, 292, 306, 307, 313, 322, 324, 326, 341, 348, 354, 356, 362, 565, 567, 573, 576, 578, 579, 580, 582, 584, 585, 589, 591, 592, 594, 595], "pytorch": [2, 3, 5, 6, 215, 216, 218, 221, 222, 225, 226, 227, 230, 233, 235, 240, 242, 253, 254, 256, 259, 260, 263, 264, 265, 267, 269, 271, 273, 274, 275, 276, 283, 284, 285, 309, 311, 314, 316, 318, 325, 326, 327, 336, 341, 349, 353, 362, 373, 375, 379, 382, 455, 462, 485, 495, 515, 564, 567, 570, 571, 573, 576, 577, 580, 581, 585, 587, 588, 591, 595, 596], "toolkit": [2, 5, 577, 587], "transform": [2, 3, 5, 21, 51, 64, 88, 94, 106, 111, 112, 134, 135, 137, 171, 172, 176, 180, 181, 182, 183, 184, 196, 216, 217, 218, 219, 220, 221, 223, 225, 226, 227, 254, 255, 256, 257, 258, 259, 261, 263, 264, 265, 276, 295, 297, 298, 318, 392, 396, 402, 407, 421, 424, 426, 431, 433, 455, 534, 535, 536, 537, 542, 564, 565, 567, 568, 569, 587, 590, 593, 596], "nn": [2, 186, 187, 191, 235, 271, 273, 292, 296, 298, 327, 336, 353, 375, 567, 571, 581, 593], "modul": [2, 188, 271, 276, 293, 294, 295, 299, 309, 310, 340, 344, 523, 531, 539, 562, 564, 567, 571, 576, 579, 581, 585, 588, 590, 593], "three": [2, 6, 118, 216, 254, 276, 303, 308, 314, 349, 562, 564, 571, 577, 580, 583, 589, 590, 592, 593, 595], "main": [2, 5, 204, 240, 314, 349, 364, 514, 551, 569, 586, 589], "compon": [2, 5, 270, 276, 287, 299, 303, 308, 316, 317, 318, 369, 515, 550, 553, 569, 577, 578, 583, 584], "symbol": [2, 9, 63, 186, 190, 191, 277, 319, 327, 353, 581], "tracer": 2, "intermedi": [2, 65, 88, 187, 201, 235, 576, 585, 589], "code": [2, 5, 6, 204, 205, 234, 276, 286, 294, 295, 298, 314, 317, 353, 421, 426, 444, 462, 527, 528, 559, 560, 564, 565, 567, 569, 574, 576, 578, 579, 582, 583, 585, 587, 588, 589, 592, 593, 594], "gener": [2, 5, 6, 56, 57, 58, 63, 91, 92, 93, 132, 134, 135, 147, 150, 151, 162, 179, 181, 185, 191, 204, 205, 206, 215, 218, 219, 220, 221, 227, 230, 233, 234, 244, 253, 256, 257, 258, 259, 265, 267, 269, 273, 274, 276, 277, 285, 289, 296, 303, 311, 314, 317, 319, 327, 336, 341, 349, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 397, 421, 426, 432, 487, 492, 496, 499, 501, 502, 507, 508, 509, 518, 527, 559, 562, 564, 567, 579, 580, 582, 584, 585, 586, 587, 589, 590, 593, 594, 595], "With": [2, 6, 141, 196, 318, 564, 582, 585, 587, 589, 592, 595, 597], "convert": [2, 9, 56, 58, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 110, 118, 125, 131, 142, 144, 145, 171, 176, 186, 191, 216, 229, 232, 233, 254, 266, 268, 269, 276, 280, 284, 286, 300, 302, 312, 322, 326, 328, 329, 354, 369, 401, 408, 417, 512, 524, 580, 589, 590, 594], "torch": [2, 7, 89, 186, 187, 188, 189, 190, 191, 197, 201, 235, 271, 273, 284, 292, 296, 298, 318, 326, 327, 336, 341, 353, 375, 567, 569, 571, 580, 581, 589, 593], "graphmodul": [2, 89, 191, 590], "can": [2, 3, 5, 6, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 100, 180, 187, 195, 196, 204, 205, 215, 218, 233, 234, 236, 237, 253, 256, 269, 276, 280, 282, 284, 296, 298, 303, 308, 311, 313, 314, 315, 318, 322, 324, 326, 327, 337, 341, 348, 349, 351, 353, 375, 485, 517, 524, 534, 562, 563, 564, 565, 567, 569, 573, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 592, 593, 594, 595, 596], "resolv": [2, 4], "automat": [2, 5, 218, 221, 228, 229, 256, 259, 266, 275, 276, 285, 292, 316, 562, 563, 565, 576, 580, 583, 586, 594, 595], "insert": [2, 87, 91, 92, 121, 147, 149, 150, 153, 172, 183, 271, 273, 576, 585, 586, 589, 590, 593], "quant": [2, 91, 191, 589], "dequant": [2, 87, 88, 101, 133, 136, 137, 138, 139, 141, 165, 166, 168, 187, 191, 379, 434, 593], "oper": [2, 57, 66, 88, 150, 185, 229, 266, 298, 311, 341, 357, 546, 550, 562, 563, 564, 571, 589, 594, 595], "floatfunct": 2, "wrap": [2, 63, 156, 162, 235, 280, 322, 392, 569], "tensor": [2, 56, 58, 61, 63, 64, 65, 87, 88, 89, 91, 114, 150, 162, 172, 179, 185, 187, 191, 233, 235, 269, 271, 272, 273, 298, 306, 307, 311, 313, 315, 333, 334, 335, 336, 338, 341, 342, 348, 350, 351, 361, 379, 423, 426, 434, 463, 565, 585, 586, 589, 591, 593, 594, 595], "requir": [2, 6, 153, 162, 243, 276, 280, 292, 317, 322, 335, 354, 357, 381, 383, 392, 395, 450, 456, 463, 466, 468, 475, 481, 488, 489, 490, 491, 493, 494, 495, 497, 500, 501, 506, 511, 515, 562, 563, 564, 568, 569, 573, 577, 580, 581, 584, 585, 586, 589, 591, 592, 593, 595, 596], "special": [2, 156, 564, 579, 582], "handl": [2, 4, 87, 104, 105, 106, 185, 187, 276, 289, 290, 291, 316, 376, 524, 550, 551, 564], "cat": 2, "output": [2, 6, 19, 55, 65, 87, 88, 89, 91, 97, 101, 103, 104, 112, 114, 118, 129, 130, 136, 138, 143, 149, 150, 153, 162, 179, 185, 191, 196, 198, 201, 204, 205, 232, 235, 237, 238, 242, 268, 270, 271, 273, 275, 276, 277, 280, 284, 289, 290, 298, 311, 318, 319, 322, 325, 326, 327, 334, 335, 336, 341, 348, 353, 369, 370, 373, 375, 376, 399, 410, 413, 420, 426, 428, 429, 463, 473, 474, 475, 489, 493, 496, 519, 527, 535, 541, 562, 567, 569, 571, 573, 574, 579, 581, 583, 585, 588, 589, 593, 594, 595, 596], "paramet": [2, 19, 56, 58, 61, 63, 64, 65, 87, 88, 89, 91, 100, 101, 104, 105, 106, 107, 111, 112, 114, 118, 123, 129, 130, 131, 134, 135, 150, 153, 155, 156, 162, 172, 179, 181, 185, 186, 187, 190, 191, 192, 194, 196, 197, 198, 201, 204, 205, 206, 215, 216, 218, 222, 225, 226, 227, 229, 230, 232, 233, 234, 235, 240, 244, 253, 254, 256, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 298, 299, 300, 301, 302, 303, 306, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 331, 333, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 361, 364, 365, 368, 369, 372, 373, 375, 376, 378, 379, 392, 396, 401, 402, 421, 422, 423, 426, 432, 434, 443, 469, 487, 492, 496, 499, 502, 514, 519, 524, 526, 527, 533, 534, 536, 546, 547, 562, 564, 565, 567, 569, 576, 579, 585, 586, 589, 592, 594, 595, 596], "fuse": [2, 56, 63, 89, 91, 92, 93, 98, 102, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 123, 136, 137, 138, 139, 141, 171, 175, 176, 187, 190, 191, 593], "combin": [2, 6, 61, 63, 90, 191, 204, 205, 229, 243, 266, 276, 317, 327, 353, 379, 576, 583, 587, 590, 594, 595], "singl": [2, 111, 112, 165, 166, 172, 174, 175, 209, 216, 232, 233, 247, 254, 268, 269, 280, 289, 291, 313, 315, 322, 338, 351, 356, 415, 432, 451, 519, 553, 565, 577, 585, 586], "obtain": [2, 311, 312, 315, 341, 349, 350, 351, 352, 571, 586, 592, 595], "higher": [2, 204, 205, 301, 327, 353, 354, 567, 571, 579, 585, 586, 589, 592, 595], "accuraci": [2, 5, 89, 196, 201, 204, 205, 234, 270, 275, 276, 284, 288, 289, 290, 292, 299, 303, 308, 316, 318, 326, 327, 337, 353, 354, 357, 362, 364, 384, 400, 410, 420, 426, 428, 502, 526, 532, 535, 537, 553, 562, 564, 565, 568, 569, 571, 579, 580, 582, 583, 585, 586, 587, 588, 591, 592, 593, 596, 597], "perform": [2, 3, 5, 6, 106, 111, 112, 141, 196, 201, 216, 228, 229, 232, 234, 254, 266, 268, 275, 276, 287, 288, 290, 292, 299, 300, 303, 308, 316, 318, 337, 348, 350, 357, 361, 384, 400, 410, 420, 426, 428, 517, 526, 535, 537, 544, 553, 562, 563, 564, 565, 566, 568, 571, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 595, 596, 597], "done": [2, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 567, 585, 589], "_": [2, 3, 6, 63, 204, 205, 353, 567, 569, 573, 579, 580, 581, 582, 585, 586, 589, 590, 591, 592, 593, 595, 596], "list": [2, 5, 6, 19, 56, 58, 61, 63, 64, 88, 89, 91, 97, 100, 123, 150, 155, 162, 179, 185, 186, 187, 191, 204, 205, 209, 216, 229, 232, 233, 234, 235, 247, 254, 266, 268, 269, 271, 273, 276, 277, 278, 280, 281, 282, 284, 289, 291, 292, 301, 303, 308, 311, 314, 319, 320, 322, 323, 324, 326, 327, 335, 336, 337, 341, 349, 353, 357, 361, 364, 369, 370, 373, 392, 394, 396, 397, 399, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 443, 446, 448, 449, 451, 463, 466, 469, 470, 473, 474, 475, 477, 482, 485, 487, 489, 492, 493, 496, 499, 502, 512, 519, 524, 526, 527, 528, 532, 534, 535, 536, 537, 538, 540, 541, 542, 544, 546, 553, 565, 573, 582, 585, 588, 590, 593, 595], "current": [2, 3, 6, 58, 61, 63, 64, 87, 90, 91, 106, 111, 112, 114, 118, 150, 155, 276, 286, 292, 303, 308, 311, 313, 314, 315, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 356, 357, 361, 362, 364, 562, 569, 573, 577, 579, 582, 585, 586, 589, 595], "fusion": [2, 6, 61, 90, 102, 103, 105, 108, 111, 112, 113, 114, 117, 122, 139, 141, 149, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 178, 573], "conv": [2, 56, 57, 65, 66, 78, 87, 92, 93, 102, 106, 110, 115, 116, 117, 137, 149, 150, 165, 175, 201, 318, 341, 585, 588], "relu": [2, 56, 118, 122, 123, 149, 163, 165, 167, 168, 173, 175, 177, 573, 593], "batchnorm": [2, 106, 111, 161], "linear": [2, 88, 201, 271, 273, 311, 318, 341, 567, 571, 585, 586], "pleas": [2, 3, 4, 5, 6, 150, 187, 216, 217, 218, 221, 254, 255, 256, 259, 276, 303, 308, 311, 313, 314, 338, 341, 349, 562, 563, 565, 568, 569, 577, 579, 580, 585, 586, 590, 591, 592], "refer": [2, 5, 6, 19, 187, 216, 254, 276, 277, 278, 283, 284, 303, 308, 311, 313, 314, 319, 320, 325, 326, 338, 341, 349, 563, 564, 565, 568, 569, 574, 578, 579, 580, 582, 585, 588, 591, 594, 595], "graph": [2, 6, 64, 65, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 157, 170, 172, 176, 179, 180, 182, 183, 184, 185, 215, 253, 273, 275, 318, 328, 329, 330, 334, 335, 336, 386, 388, 390, 455, 463, 466, 474, 475, 477, 487, 488, 489, 494, 495, 499, 512, 513, 515, 535, 538, 550, 565, 567, 569, 574, 579, 581, 589, 590, 593], "10004": [2, 3, 6, 564, 567, 571, 573, 576, 580, 583, 588, 596], "backend": [2, 58, 61, 64, 65, 89, 90, 91, 201, 202, 203, 207, 208, 212, 216, 217, 219, 220, 221, 222, 223, 227, 230, 233, 240, 245, 246, 248, 250, 254, 255, 257, 258, 259, 260, 261, 265, 267, 269, 285, 318, 327, 328, 329, 331, 334, 362, 569, 574, 576, 588, 589, 594, 596], "field": [2, 6, 150, 179, 218, 256, 280, 317, 322, 562, 569, 592, 595, 596], "indic": [2, 87, 209, 214, 216, 247, 252, 254, 270, 276, 280, 296, 298, 301, 302, 322, 341, 562, 572, 593], "user": [2, 3, 5, 6, 61, 90, 150, 196, 204, 205, 207, 210, 218, 221, 225, 226, 227, 233, 234, 240, 243, 256, 259, 263, 264, 265, 269, 275, 276, 289, 291, 303, 308, 314, 316, 317, 318, 327, 348, 349, 352, 353, 357, 364, 369, 379, 518, 563, 567, 573, 576, 579, 580, 581, 582, 583, 585, 587, 589, 590, 591, 593, 594, 595], "configur": [2, 3, 6, 55, 56, 58, 61, 63, 64, 89, 90, 91, 150, 158, 186, 191, 196, 197, 201, 204, 205, 207, 210, 218, 221, 227, 234, 256, 259, 270, 271, 273, 275, 276, 280, 286, 287, 288, 289, 291, 299, 300, 303, 308, 312, 314, 316, 317, 318, 322, 327, 336, 337, 341, 349, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 368, 369, 371, 372, 375, 377, 378, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 399, 410, 421, 423, 426, 485, 487, 492, 496, 499, 502, 515, 517, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 549, 551, 562, 565, 568, 579, 582, 585, 591, 594, 595, 597], "And": [2, 114, 243, 276, 563], "default": [2, 5, 6, 19, 56, 58, 65, 89, 91, 142, 150, 179, 185, 196, 198, 201, 204, 205, 206, 208, 216, 217, 218, 229, 233, 235, 243, 244, 246, 254, 255, 256, 266, 269, 271, 273, 276, 277, 280, 283, 284, 286, 298, 312, 318, 319, 322, 325, 326, 335, 336, 352, 375, 379, 401, 403, 404, 406, 408, 411, 412, 417, 439, 440, 443, 460, 470, 522, 524, 534, 536, 537, 541, 542, 562, 565, 571, 573, 576, 579, 582, 585, 586, 588, 590, 592, 594, 595, 596], "valu": [2, 56, 58, 61, 64, 65, 88, 89, 91, 99, 100, 106, 111, 112, 114, 134, 135, 150, 155, 179, 180, 181, 185, 191, 195, 197, 198, 201, 204, 205, 216, 219, 220, 229, 233, 234, 235, 254, 257, 258, 266, 269, 276, 280, 284, 290, 291, 296, 303, 308, 311, 312, 314, 322, 326, 327, 336, 337, 338, 341, 342, 345, 349, 352, 353, 356, 361, 364, 370, 372, 373, 379, 392, 394, 396, 401, 403, 404, 406, 408, 411, 412, 417, 421, 422, 443, 445, 484, 516, 519, 520, 524, 526, 532, 534, 537, 542, 544, 545, 547, 558, 562, 565, 573, 579, 582, 585, 586, 588, 589, 594, 595, 596], "mean": [2, 106, 111, 112, 114, 206, 229, 233, 244, 266, 269, 280, 282, 284, 290, 292, 298, 311, 322, 324, 326, 337, 341, 361, 564, 569, 573, 579, 585, 586, 589, 594, 595, 596], "model": [2, 3, 6, 16, 17, 56, 58, 61, 63, 64, 65, 78, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 156, 158, 179, 185, 186, 187, 190, 191, 192, 194, 196, 201, 204, 205, 212, 215, 216, 218, 233, 234, 235, 237, 238, 243, 250, 253, 254, 256, 269, 270, 271, 272, 273, 274, 275, 276, 284, 285, 286, 287, 288, 290, 292, 297, 298, 299, 300, 302, 303, 308, 311, 312, 313, 314, 315, 316, 317, 318, 325, 326, 327, 337, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 369, 375, 378, 379, 381, 382, 383, 385, 396, 399, 407, 410, 413, 415, 423, 424, 425, 426, 427, 428, 430, 431, 432, 434, 438, 442, 443, 448, 449, 450, 453, 454, 455, 479, 480, 482, 485, 488, 489, 490, 491, 493, 494, 495, 496, 500, 501, 506, 508, 511, 512, 515, 516, 523, 532, 534, 539, 549, 550, 554, 561, 563, 564, 565, 567, 568, 569, 574, 576, 578, 579, 580, 582, 583, 584, 585, 586, 587, 589, 591, 592, 593, 594, 595, 596], "neural_compressor": [2, 3, 5, 19, 563, 564, 565, 567, 569, 571, 574, 579, 580, 581, 582, 583, 585, 588, 589, 590, 591, 592, 594, 595, 596], "import": [2, 3, 5, 185, 276, 286, 289, 342, 369, 379, 563, 564, 565, 567, 569, 571, 579, 580, 581, 582, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595], "posttrainingquantconfig": [2, 5, 201, 318, 564, 581, 589, 592, 595], "conf": [2, 3, 5, 192, 194, 204, 205, 234, 276, 285, 286, 303, 308, 317, 328, 329, 334, 336, 342, 343, 345, 346, 347, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 369, 542, 545, 563, 567, 574, 580, 581, 583, 589, 592, 595], "eval": [2, 64, 243, 276, 280, 286, 322, 564, 593], "q_model": [2, 89, 187, 192, 194, 276, 286, 375, 564, 565, 569, 571, 574, 579, 581, 589], "fit": [2, 5, 196, 327, 341, 353, 356, 563, 564, 565, 569, 574, 579, 580, 581, 585, 586, 589], "calib_dataload": [2, 5, 236, 237, 276, 316, 317, 336, 353, 564, 565, 574, 579, 589], "dataload": [2, 5, 6, 21, 51, 56, 58, 61, 63, 64, 65, 89, 91, 187, 189, 191, 192, 194, 196, 204, 205, 216, 227, 234, 237, 243, 254, 265, 270, 276, 286, 303, 308, 313, 316, 317, 318, 336, 347, 353, 369, 372, 380, 385, 392, 396, 407, 421, 424, 426, 431, 433, 455, 496, 509, 512, 515, 523, 534, 535, 539, 562, 567, 569, 574, 579, 580, 583, 589, 593, 594, 596], "eval_func": [2, 204, 205, 243, 275, 276, 286, 317, 327, 337, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 564, 565, 567, 569, 595, 596], "save": [2, 6, 56, 58, 61, 64, 89, 91, 150, 218, 222, 227, 256, 260, 265, 271, 273, 290, 300, 317, 328, 329, 330, 332, 334, 335, 336, 337, 357, 364, 369, 370, 373, 375, 379, 564, 574, 580, 581, 583, 585, 586, 589], "path": [2, 3, 6, 56, 58, 61, 64, 89, 91, 150, 179, 185, 196, 197, 216, 217, 218, 233, 254, 255, 256, 269, 270, 271, 273, 275, 276, 286, 287, 288, 289, 292, 299, 300, 303, 308, 312, 314, 316, 317, 318, 327, 334, 335, 336, 349, 352, 353, 369, 375, 379, 380, 385, 399, 402, 409, 410, 413, 420, 421, 426, 428, 429, 443, 449, 460, 463, 466, 468, 469, 471, 473, 474, 475, 476, 480, 487, 492, 496, 499, 502, 503, 509, 519, 527, 532, 534, 535, 544, 559, 562, 564, 565, 569, 574, 579, 580, 581, 583, 594, 596], "approach": [2, 3, 5, 89, 197, 201, 276, 287, 288, 289, 298, 299, 300, 318, 364, 396, 535, 542, 564, 565, 567, 576, 587, 588, 595, 596], "quantizationawaretrainingconfig": [2, 201, 318, 589, 595], "prepare_compress": [2, 369, 567, 583, 585, 589], "compression_manag": [2, 369, 567, 583, 585, 589], "callback": [2, 91, 303, 308, 369, 370, 372, 373, 550, 583, 585, 589], "on_train_begin": [2, 243, 276, 303, 308, 313, 314, 347, 348, 349, 369, 567, 583, 585, 589], "loop": [2, 3, 337, 369, 573, 592, 595], "now": [2, 3, 233, 269, 532, 565, 569, 588, 594, 595], "auto": [2, 354, 379], "method": [2, 3, 5, 89, 150, 162, 179, 180, 191, 209, 214, 215, 216, 218, 222, 225, 226, 227, 230, 233, 236, 237, 247, 252, 253, 254, 256, 260, 263, 264, 265, 267, 269, 276, 283, 284, 289, 292, 298, 300, 301, 302, 306, 316, 325, 326, 328, 329, 350, 372, 373, 375, 376, 519, 524, 528, 546, 565, 567, 568, 579, 583, 585, 586, 589, 590, 594, 595], "avoid": [2, 216, 254, 593], "log": [2, 150, 183, 303, 308, 373, 376, 382, 399, 410, 413, 420, 426, 428, 429, 485, 519, 525, 526, 527, 528, 533, 547, 562, 592, 593, 595], "fail": [2, 150, 528], "trace": [2, 9, 89, 186, 187, 190, 191, 271, 273, 353, 359, 595], "info": [2, 56, 58, 61, 64, 88, 89, 92, 150, 191, 227, 230, 231, 236, 237, 241, 273, 311, 317, 330, 331, 334, 335, 336, 341, 352, 373, 376, 379, 399, 400, 402, 409, 410, 413, 414, 416, 419, 519, 522, 527, 534, 550, 562, 571, 581], "entir": [2, 353, 585, 586], "conduct": 2, "imper": 2, "control": [2, 56, 58, 61, 91, 124, 130, 192, 194, 292, 426, 431, 562, 585, 595], "flow": [2, 3, 276, 281, 282, 303, 308, 323, 324], "therefor": [2, 586, 589, 591], "int8": [2, 6, 56, 57, 58, 61, 64, 67, 68, 88, 89, 90, 91, 92, 93, 132, 151, 163, 164, 165, 171, 173, 174, 175, 176, 180, 185, 187, 195, 201, 229, 266, 271, 272, 273, 336, 357, 434, 562, 563, 565, 568, 573, 588, 589, 590, 591, 592, 593, 594, 596], "lot": 2, "9": [2, 5, 201, 291, 318, 577, 585, 586, 588, 595, 596, 597], "between": [2, 6, 91, 180, 187, 195, 233, 235, 269, 281, 283, 284, 289, 291, 292, 323, 325, 326, 348, 434, 546, 550, 567, 571, 576, 579, 586, 589, 591, 592, 594, 595], "don": [2, 55, 180, 195, 341, 524, 562, 595], "t": [2, 6, 55, 111, 112, 114, 150, 179, 180, 195, 233, 236, 237, 269, 282, 291, 292, 296, 317, 324, 341, 524, 533, 562, 567, 569, 580, 595, 596], "need": [2, 6, 55, 56, 58, 61, 63, 64, 89, 106, 125, 131, 149, 150, 172, 179, 196, 204, 205, 206, 214, 215, 218, 225, 226, 227, 233, 236, 237, 238, 239, 244, 252, 253, 256, 263, 264, 265, 269, 270, 276, 283, 284, 289, 296, 298, 303, 308, 317, 325, 326, 327, 333, 334, 337, 341, 353, 357, 361, 364, 378, 379, 553, 562, 564, 565, 567, 569, 576, 580, 585, 588, 589, 590, 591, 594, 595, 596], "becaus": [2, 233, 269, 280, 311, 322, 341, 585, 589, 594, 595], "modifi": [2, 100, 106, 111, 112, 114, 125, 218, 256, 276, 303, 308, 314, 349, 513, 562, 569, 573, 596], "sourc": [2, 5, 56, 58, 65, 91, 237, 276, 278, 286, 298, 318, 320, 372, 447, 561, 578, 587], "8": [2, 5, 153, 232, 268, 524, 573, 577, 585, 587, 595, 597], "As": [2, 125, 280, 322, 562, 564, 567, 585, 586, 595], "cannot": [2, 280, 322, 522, 571, 572, 593], "iter": [2, 3, 6, 56, 58, 61, 63, 64, 65, 89, 91, 185, 192, 194, 201, 204, 205, 209, 214, 218, 219, 222, 227, 236, 237, 247, 252, 256, 257, 260, 265, 300, 313, 315, 327, 335, 348, 351, 353, 372, 399, 527, 535, 563, 565, 585, 586, 588, 593, 595, 596], "so": [2, 6, 92, 93, 162, 233, 269, 313, 369, 375, 572, 576, 579, 589, 590, 593, 594], "might": [2, 562, 595], "meet": [2, 317, 354, 357, 362, 571, 582, 587, 588, 589, 593, 595], "failur": [2, 546], "sometim": [2, 150, 179, 585, 589], "order": [2, 19, 191, 277, 278, 298, 317, 319, 320, 336, 355, 356, 357, 361, 362, 463, 466, 475, 536, 579, 585, 588, 593, 595], "successfulli": [2, 569, 587], "suggest": [2, 298, 302, 356, 592], "two": [2, 3, 137, 150, 187, 218, 222, 223, 227, 234, 256, 260, 261, 265, 280, 311, 315, 317, 322, 341, 348, 351, 379, 562, 565, 567, 569, 573, 579, 580, 585, 589, 590, 592, 595, 596], "first": [2, 3, 6, 65, 91, 137, 147, 180, 195, 198, 216, 232, 254, 268, 270, 276, 280, 322, 354, 357, 443, 562, 565, 571, 577, 580, 588, 589, 590, 592, 593, 595, 596], "pass": [2, 6, 121, 123, 125, 185, 196, 232, 268, 276, 296, 298, 303, 308, 314, 317, 349, 379, 477, 533, 546, 547, 563, 565, 567, 569, 571, 574, 579, 585, 588, 589, 590, 596], "non": [2, 123, 162, 240, 312, 379, 584, 585, 595], "traceabl": [2, 89], "class": [2, 3, 156, 191, 301, 327, 353, 457, 458, 564, 565, 567, 579, 582, 583, 591, 593, 595, 596], "name": [2, 5, 56, 58, 63, 64, 87, 88, 89, 91, 97, 106, 107, 111, 112, 114, 123, 150, 155, 156, 172, 179, 181, 185, 186, 187, 190, 191, 192, 194, 196, 198, 201, 216, 217, 218, 221, 222, 225, 226, 227, 230, 231, 233, 234, 235, 237, 238, 240, 241, 242, 254, 255, 256, 259, 260, 263, 264, 265, 267, 269, 271, 272, 273, 279, 280, 283, 284, 289, 290, 292, 298, 303, 306, 308, 311, 313, 315, 317, 318, 321, 322, 325, 326, 331, 333, 334, 335, 336, 337, 338, 341, 342, 348, 350, 351, 370, 373, 375, 379, 399, 403, 404, 406, 409, 410, 411, 412, 413, 415, 434, 443, 445, 463, 466, 468, 469, 475, 482, 483, 484, 485, 496, 512, 519, 522, 534, 536, 537, 558, 562, 565, 569, 573, 578, 579, 581, 584, 591, 592, 593, 595, 596, 597], "select": [2, 3, 216, 254, 288, 292, 299, 350, 362, 562, 576, 577, 586, 589, 593, 595], "proxi": 2, "object": [2, 3, 5, 19, 56, 58, 61, 63, 64, 82, 88, 89, 91, 101, 104, 105, 106, 107, 118, 123, 129, 130, 131, 136, 137, 138, 139, 150, 153, 156, 172, 179, 181, 186, 187, 190, 191, 192, 194, 196, 197, 198, 201, 204, 205, 206, 207, 209, 210, 214, 216, 217, 218, 222, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 247, 252, 254, 255, 256, 260, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 280, 283, 284, 285, 288, 289, 291, 299, 300, 302, 303, 304, 305, 306, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 325, 326, 327, 329, 331, 333, 334, 335, 336, 338, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 364, 370, 372, 373, 374, 376, 378, 379, 396, 411, 412, 415, 418, 459, 524, 527, 534, 544, 546, 547, 551, 562, 563, 564, 565, 572, 579, 581, 583, 585, 586, 588, 589, 594, 595], "them": [2, 103, 106, 150, 216, 254, 564, 573, 574, 583, 585, 595], "prepar": [2, 5, 63, 89, 191, 243, 270, 276, 303, 308, 314, 316, 421, 426, 514, 565, 569, 589], "dict": [2, 56, 58, 61, 63, 64, 65, 89, 91, 153, 155, 156, 162, 181, 185, 186, 187, 191, 192, 194, 197, 198, 204, 205, 215, 218, 234, 235, 240, 253, 256, 271, 272, 273, 276, 279, 280, 281, 282, 284, 287, 289, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 311, 312, 313, 314, 315, 321, 322, 323, 324, 326, 327, 328, 329, 335, 336, 338, 341, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 368, 370, 372, 373, 378, 379, 380, 382, 385, 392, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 439, 440, 443, 451, 460, 463, 470, 478, 479, 480, 482, 484, 485, 486, 487, 492, 496, 499, 502, 503, 504, 505, 507, 509, 510, 512, 519, 520, 522, 524, 526, 527, 530, 532, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 546, 547, 550, 551, 553, 555, 557, 558, 560, 579, 585, 588, 593, 595], "http": [2, 5, 187, 216, 218, 254, 256, 277, 278, 280, 281, 282, 298, 311, 313, 314, 319, 320, 322, 323, 324, 338, 341, 349, 559, 562, 565, 577, 578, 591], "tutori": [2, 587], "prototyp": 2, "guid": [2, 5, 216, 254, 565, 567, 577], "html": 2, "highlight": [2, 448, 451, 562], "decor": [2, 3, 6, 56, 82, 111, 112, 114, 185, 192, 194, 227, 230, 233, 240, 265, 267, 269, 283, 284, 301, 306, 311, 313, 315, 325, 326, 337, 341, 347, 348, 351, 364, 379, 529, 595], "untrac": 2, "part": [2, 65, 270, 276, 280, 311, 313, 322, 348, 577, 580], "global": [2, 155, 201, 311, 318, 341, 342, 343, 345, 346, 347, 348, 379, 547, 585, 586, 588, 595], "function": [2, 3, 6, 58, 61, 64, 87, 91, 106, 150, 179, 204, 205, 217, 243, 255, 275, 276, 287, 298, 299, 300, 303, 308, 314, 317, 334, 349, 370, 562, 563, 564, 567, 574, 576, 577, 579, 580, 585, 586, 589, 592, 593, 595], "call": [2, 3, 6, 55, 63, 162, 243, 276, 280, 291, 292, 303, 308, 311, 313, 314, 322, 342, 346, 347, 348, 369, 398, 431, 519, 527, 528, 562, 564, 574, 585, 589, 593, 594], "want": [2, 6, 111, 112, 114, 150, 214, 216, 252, 254, 313, 357, 369, 562, 565, 569, 577, 579, 582, 592, 593, 595], "move": [2, 91, 122, 588, 591], "keep": [2, 6, 311, 312, 352, 357, 591, 595], "should": [2, 3, 6, 58, 61, 64, 65, 87, 89, 90, 91, 98, 118, 123, 155, 156, 181, 196, 204, 205, 214, 216, 218, 222, 227, 232, 233, 237, 238, 252, 254, 256, 260, 265, 268, 269, 273, 278, 283, 284, 313, 317, 318, 320, 325, 326, 327, 341, 348, 353, 364, 375, 379, 443, 524, 562, 565, 569, 579, 582, 586, 589, 594, 595, 596], "try": [2, 214, 252, 463, 466, 475, 547, 571, 589], "detect": [2, 89, 187, 191, 280, 284, 322, 326, 331, 463, 466, 475, 534, 562], "ssd": [2, 597], "resnet34": [2, 597], "ptq": [2, 569, 576, 589, 593, 595], "r34": 2, "py": [2, 6, 150, 185, 187, 278, 280, 281, 282, 313, 320, 322, 323, 324, 348, 550, 562, 569, 577, 589, 591, 593], "def": [2, 6, 111, 112, 114, 172, 204, 205, 353, 564, 565, 567, 569, 579, 589, 593, 595], "bboxes_labels_scor": 2, "bbox": [2, 280, 322, 579], "prob": 2, "criteria": [2, 275, 276, 303, 308, 311, 313, 316, 318, 339, 362], "0": [2, 5, 56, 58, 61, 63, 87, 88, 89, 90, 97, 135, 150, 179, 185, 193, 196, 201, 206, 208, 211, 212, 213, 215, 216, 219, 220, 223, 229, 233, 235, 236, 237, 244, 246, 249, 250, 251, 253, 254, 257, 258, 261, 266, 269, 271, 273, 275, 276, 284, 289, 291, 292, 296, 298, 301, 303, 308, 311, 316, 318, 326, 336, 341, 351, 357, 519, 527, 562, 565, 567, 569, 571, 573, 578, 579, 580, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596], "45": [2, 291, 597], "max_output": 2, "200": [2, 232, 268, 595, 597], "box": [2, 233, 269, 280, 284, 322, 326, 356, 562, 579, 593, 594, 595], "label": [2, 19, 56, 58, 91, 196, 204, 205, 216, 218, 219, 220, 221, 224, 229, 233, 235, 237, 238, 254, 256, 257, 258, 259, 262, 266, 269, 277, 279, 283, 284, 289, 290, 318, 319, 321, 325, 326, 327, 353, 451, 564, 565, 579, 594], "score": [2, 19, 277, 278, 280, 281, 282, 284, 297, 311, 313, 319, 320, 322, 323, 324, 326, 338, 341, 348, 350, 359, 362, 372, 579, 582, 585, 586, 592, 595], "zip": 2, "split": [2, 57, 66, 78, 88, 123, 126, 179, 232, 233, 268, 269, 289, 594], "squeez": [2, 122], "dbox": 2, "dlabel": 2, "dscore": 2, "decode_singl": 2, "append": [2, 187, 191, 317, 356, 583], "return": [2, 3, 19, 56, 58, 61, 63, 64, 65, 89, 91, 92, 93, 94, 97, 100, 101, 104, 105, 106, 107, 111, 112, 114, 118, 123, 125, 129, 130, 134, 135, 136, 137, 138, 139, 150, 153, 155, 156, 162, 172, 179, 181, 183, 185, 186, 187, 190, 191, 192, 194, 198, 204, 205, 206, 208, 215, 218, 222, 225, 226, 227, 229, 230, 232, 233, 234, 235, 240, 244, 246, 253, 256, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 298, 299, 300, 301, 302, 303, 306, 308, 311, 312, 313, 314, 315, 317, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 341, 347, 348, 349, 350, 351, 352, 353, 356, 357, 361, 364, 365, 368, 369, 372, 375, 378, 379, 399, 400, 402, 409, 410, 411, 412, 413, 415, 416, 418, 419, 443, 446, 447, 448, 449, 480, 519, 522, 524, 526, 527, 528, 534, 537, 546, 547, 550, 565, 569, 579, 581, 582, 589, 593, 595], "process": [3, 6, 56, 58, 61, 64, 89, 91, 156, 187, 204, 205, 216, 217, 218, 227, 229, 230, 233, 234, 243, 254, 255, 256, 265, 266, 267, 269, 270, 271, 273, 276, 287, 288, 291, 297, 299, 300, 303, 308, 311, 313, 314, 315, 317, 318, 327, 341, 347, 348, 349, 351, 352, 353, 356, 378, 395, 478, 479, 482, 515, 519, 523, 526, 527, 535, 562, 564, 565, 567, 568, 569, 571, 583, 585, 586, 589, 593, 594, 595, 596], "autom": 3, "design": [3, 162, 215, 237, 238, 243, 253, 276, 291, 316, 325, 326, 357, 585, 586, 589], "artifici": 3, "network": [3, 5, 187, 289, 292, 313, 338, 341, 359, 562, 567, 568, 571, 584, 587, 589, 595], "ann": 3, "par": 3, "outperform": 3, "hand": [3, 280, 322, 562], "our": [3, 5, 180, 571, 592], "leverag": [3, 119, 567, 583, 589], "algorithm": [3, 5, 6, 16, 19, 63, 191, 197, 232, 268, 277, 284, 287, 291, 299, 300, 302, 318, 319, 326, 356, 372, 374, 567, 573, 576, 585, 586, 589, 593, 595, 596], "built": [3, 6, 119, 162, 196, 202, 203, 207, 212, 216, 217, 222, 224, 226, 227, 229, 230, 233, 237, 238, 240, 245, 248, 250, 254, 255, 260, 262, 264, 265, 266, 267, 269, 317, 318, 325, 326, 329, 333, 565, 569, 582, 594, 595, 596], "grid": [3, 302], "bayesian": [3, 302, 318, 360, 588], "optim": [3, 5, 17, 64, 89, 91, 92, 93, 97, 101, 104, 105, 107, 118, 119, 123, 124, 129, 130, 133, 136, 137, 138, 139, 143, 156, 158, 179, 197, 201, 237, 243, 270, 275, 276, 290, 302, 313, 314, 316, 318, 336, 338, 347, 348, 349, 350, 356, 369, 370, 373, 380, 382, 386, 388, 390, 407, 411, 412, 418, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 434, 435, 436, 437, 438, 441, 442, 455, 509, 515, 516, 526, 532, 535, 538, 542, 549, 554, 563, 567, 569, 573, 576, 577, 581, 584, 585, 587, 588, 589, 590, 592, 593, 595, 596], "propos": [3, 6, 300, 341, 567, 580, 585], "base": [3, 6, 19, 56, 58, 61, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 153, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 276, 277, 280, 283, 284, 285, 287, 288, 289, 291, 292, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 311, 313, 315, 316, 317, 318, 319, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 350, 351, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 370, 373, 374, 375, 376, 379, 384, 385, 386, 388, 389, 390, 391, 394, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 438, 439, 440, 442, 445, 447, 448, 451, 461, 463, 466, 468, 470, 471, 473, 474, 475, 476, 484, 487, 492, 496, 499, 502, 512, 516, 518, 520, 522, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 547, 548, 550, 552, 556, 557, 565, 568, 569, 573, 584, 586, 592, 593, 595, 597], "given": [3, 55, 63, 64, 65, 87, 91, 111, 112, 114, 155, 156, 185, 191, 201, 232, 233, 268, 269, 280, 322, 334, 335, 336, 341, 348, 353, 364, 375, 443, 449, 463, 466, 468, 469, 471, 473, 474, 476, 520, 534, 547, 585, 586, 594], "train": [3, 5, 6, 56, 58, 61, 64, 89, 91, 100, 106, 123, 124, 162, 201, 204, 205, 216, 218, 233, 243, 254, 256, 269, 270, 276, 286, 287, 289, 290, 297, 299, 303, 308, 313, 314, 316, 317, 318, 347, 348, 349, 353, 364, 372, 542, 565, 567, 568, 571, 576, 580, 583, 585, 586, 587, 592, 595, 596, 597], "evalu": [3, 6, 19, 56, 58, 61, 64, 89, 91, 196, 204, 205, 216, 234, 243, 254, 270, 275, 276, 277, 280, 281, 282, 283, 284, 286, 287, 288, 291, 292, 299, 300, 303, 308, 313, 314, 317, 318, 319, 322, 323, 324, 325, 326, 327, 337, 341, 348, 349, 353, 364, 372, 384, 386, 388, 390, 391, 392, 515, 523, 535, 539, 564, 565, 567, 574, 576, 579, 580, 582, 585, 589, 592, 593, 595, 596], "after": [3, 63, 65, 89, 101, 122, 191, 216, 229, 233, 236, 237, 243, 254, 266, 269, 270, 271, 273, 276, 289, 311, 313, 314, 315, 338, 341, 348, 349, 350, 351, 357, 369, 520, 562, 564, 565, 567, 571, 576, 579, 582, 583, 585, 586, 589, 590, 592, 593, 594, 595], "sever": [3, 179, 233, 269, 315, 351, 562, 567, 576, 580, 585, 586, 588, 594, 595, 596], "procedur": [3, 197, 341, 357], "lie": [3, 300], "pareto": [3, 300, 301], "front": [3, 300, 301], "dyna": [3, 276, 289, 290, 291, 292, 293, 299, 318, 576, 588], "super": [3, 282, 289, 292, 324], "metric": [3, 5, 6, 9, 17, 19, 56, 58, 61, 64, 89, 91, 196, 204, 205, 234, 237, 270, 275, 276, 286, 287, 288, 290, 292, 299, 300, 301, 302, 303, 308, 316, 317, 318, 327, 337, 353, 372, 392, 396, 402, 407, 421, 424, 426, 431, 455, 515, 523, 526, 531, 534, 535, 537, 553, 562, 564, 565, 569, 580, 592, 593, 595, 596, 597], "predictor": [3, 288, 289, 290, 292, 299], "predict": [3, 19, 185, 196, 233, 237, 238, 269, 277, 281, 282, 283, 284, 290, 292, 318, 319, 323, 324, 325, 326, 567, 579, 593, 594], "4x": [3, 589], "more": [3, 4, 5, 106, 179, 185, 204, 233, 269, 280, 296, 298, 311, 322, 341, 364, 562, 565, 567, 569, 576, 577, 579, 580, 582, 583, 585, 586, 590, 595, 597], "sampl": [3, 5, 121, 150, 187, 206, 209, 214, 216, 217, 218, 222, 227, 229, 233, 244, 247, 252, 254, 255, 256, 260, 265, 266, 269, 283, 284, 301, 325, 326, 356, 410, 466, 535, 565, 576, 589, 594, 595, 596, 597], "effici": [3, 5, 564, 567, 583, 587], "than": [3, 98, 106, 185, 216, 233, 254, 269, 280, 322, 337, 379, 563, 565, 574, 579, 582, 583, 585, 586, 589, 592, 594, 595], "typic": [3, 106, 155, 162, 276, 286, 317, 568, 585, 586], "one": [3, 5, 6, 19, 91, 149, 150, 155, 172, 191, 207, 210, 227, 233, 243, 269, 276, 277, 280, 283, 284, 286, 289, 311, 314, 315, 319, 322, 325, 326, 341, 349, 351, 369, 528, 562, 567, 568, 569, 573, 576, 577, 579, 580, 582, 583, 585, 586, 588, 589, 591, 594, 595], "shot": [3, 243, 276, 313, 315, 338, 351, 576, 585, 586, 587], "shown": [3, 443, 562, 564, 567, 579, 582, 583, 595], "figur": [3, 585], "phase": [3, 192, 194, 317, 348, 349, 585, 586, 589, 590, 595], "small": [3, 98, 111, 112, 113, 280, 322, 359, 562, 595], "popul": [3, 291], "sub": [3, 89, 110, 111, 112, 131, 150, 234, 273, 276, 292, 364, 595], "randomli": [3, 233, 269, 302, 356, 363, 594, 595], "measur": [3, 6, 56, 58, 61, 64, 89, 91, 185, 234, 291, 292, 297, 327, 337, 374, 553, 563, 567, 579, 593, 595], "provid": [3, 6, 111, 112, 150, 162, 204, 205, 227, 230, 233, 243, 265, 267, 269, 275, 276, 280, 289, 298, 303, 308, 316, 317, 322, 327, 353, 373, 375, 443, 463, 469, 519, 528, 553, 562, 563, 564, 568, 569, 570, 571, 576, 577, 580, 581, 585, 588, 589, 593, 595, 596, 597], "initi": [3, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 156, 185, 196, 204, 205, 213, 216, 235, 243, 251, 254, 270, 276, 287, 288, 299, 300, 312, 313, 317, 318, 334, 348, 353, 364, 398, 421, 422, 431, 480, 512, 514, 522, 535, 542, 564, 565, 579, 585, 586, 595], "inner": 3, "multi": [3, 118, 123, 234, 276, 280, 291, 296, 298, 322, 337, 362, 392, 564, 565, 576, 582, 595], "evolutionari": 3, "extens": [3, 6, 89, 317, 469, 534, 573, 576, 580, 581, 587, 595, 596], "next": [3, 104, 189, 209, 247, 274, 300, 315, 351, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 562, 588, 595], "cycl": 3, "continu": [3, 280, 311, 322, 341, 357, 585], "until": [3, 362, 595], "conclud": 3, "count": [3, 63, 300, 341, 357, 565], "met": [3, 205, 364, 573, 580, 589, 593], "tensorflow": [3, 5, 6, 57, 95, 97, 119, 120, 121, 125, 132, 140, 146, 150, 151, 152, 154, 157, 162, 170, 182, 185, 215, 216, 217, 218, 221, 222, 223, 225, 226, 227, 230, 233, 235, 240, 253, 254, 255, 256, 259, 260, 261, 263, 264, 265, 267, 269, 273, 274, 275, 276, 278, 280, 283, 284, 285, 286, 316, 320, 322, 325, 326, 327, 335, 353, 362, 379, 441, 442, 454, 455, 462, 511, 512, 513, 515, 562, 564, 567, 570, 571, 573, 576, 577, 580, 581, 585, 587, 588, 592, 595, 596], "Not": [3, 234, 243, 276, 303, 308, 379, 518], "yet": [3, 61, 64, 91, 341, 562], "simplest": 3, "launcher": [3, 567, 585], "experiment": [3, 19, 228, 318, 512, 565, 569, 571, 588, 590, 591, 594], "agent": 3, "nasconfig": [3, 197, 276, 288, 299, 300], "argument": [3, 276, 296, 298, 303, 308, 314, 317, 349, 381, 489, 493, 498, 501, 507, 519, 527, 547], "config": [3, 5, 43, 61, 63, 64, 65, 89, 90, 91, 153, 155, 156, 158, 162, 191, 196, 204, 205, 216, 234, 243, 254, 275, 276, 289, 297, 300, 303, 308, 311, 312, 313, 314, 315, 318, 327, 338, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 368, 369, 372, 378, 379, 380, 381, 384, 385, 386, 388, 390, 391, 394, 420, 426, 428, 429, 433, 434, 478, 480, 487, 489, 492, 493, 496, 498, 499, 501, 502, 509, 512, 515, 523, 534, 537, 538, 539, 540, 542, 544, 545, 547, 555, 557, 560, 562, 563, 567, 569, 571, 576, 580, 581, 583, 585, 588, 589, 590, 592, 593, 595], "search_algorithm": [3, 197, 276, 299, 300, 318], "nsga2": [3, 291], "supernet": [3, 291, 292, 294, 295], "ofa_mbv3_d234_e346_k357_w1": 3, "acc": [3, 61, 64, 284, 292, 326, 337, 593, 597], "mac": [3, 288, 290, 292, 297, 299], "50": [3, 280, 282, 291, 322, 324, 597], "num_ev": [3, 291], "250": 3, "results_csv_path": 3, "search_result": 3, "csv": [3, 289, 292, 534, 562], "batch_siz": [3, 196, 206, 208, 211, 212, 213, 214, 215, 216, 217, 236, 237, 244, 246, 249, 250, 251, 252, 253, 254, 255, 271, 273, 292, 297, 318, 336, 385, 399, 410, 512, 535, 564, 565, 569, 571, 574, 589], "64": [3, 233, 269, 594, 597], "dataset_path": [3, 292, 297, 535], "dataset": [3, 5, 6, 21, 56, 58, 61, 64, 89, 91, 191, 196, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 227, 236, 237, 244, 246, 247, 249, 250, 251, 252, 253, 265, 275, 276, 280, 281, 282, 284, 286, 292, 316, 317, 318, 322, 323, 324, 326, 327, 353, 372, 399, 407, 410, 413, 421, 426, 430, 431, 432, 443, 455, 532, 534, 535, 536, 564, 569, 579, 585, 586, 589, 591, 595, 596, 597], "imagenet": [3, 218, 221, 229, 256, 259, 266, 292, 593, 594, 596, 597], "ilsvrc2012": [3, 292], "under": [3, 150, 162, 218, 256, 378, 562, 565, 578, 579, 583, 585, 586, 589, 593, 595], "file": [3, 6, 89, 150, 179, 185, 194, 196, 197, 204, 205, 216, 217, 218, 221, 232, 233, 242, 254, 255, 256, 259, 268, 269, 270, 273, 275, 276, 280, 286, 287, 288, 289, 290, 292, 299, 300, 303, 308, 312, 314, 316, 317, 318, 322, 327, 336, 337, 349, 352, 353, 375, 378, 379, 384, 385, 386, 387, 388, 389, 390, 391, 443, 480, 489, 493, 503, 519, 526, 527, 533, 534, 535, 547, 551, 555, 557, 559, 560, 562, 569, 572, 574, 578, 579, 581, 582, 585, 588, 593, 594], "input": [3, 6, 56, 58, 63, 65, 87, 88, 89, 91, 97, 104, 106, 107, 108, 111, 112, 114, 115, 116, 118, 123, 124, 126, 127, 129, 131, 149, 150, 155, 156, 162, 172, 179, 181, 185, 186, 187, 190, 191, 196, 201, 204, 205, 216, 217, 218, 220, 229, 232, 233, 235, 237, 238, 243, 254, 255, 256, 258, 266, 268, 269, 270, 271, 272, 273, 275, 276, 280, 285, 292, 296, 298, 303, 308, 317, 318, 322, 325, 326, 327, 331, 333, 334, 335, 336, 341, 348, 353, 369, 379, 381, 392, 415, 420, 421, 423, 426, 427, 428, 429, 430, 463, 466, 473, 474, 475, 477, 489, 493, 498, 501, 507, 532, 535, 541, 562, 563, 564, 565, 567, 569, 571, 573, 574, 579, 581, 585, 588, 589, 593, 594, 596], "aim": [3, 586, 595], "accord": [3, 6, 63, 91, 162, 204, 216, 217, 218, 227, 230, 233, 254, 255, 256, 265, 267, 269, 276, 298, 315, 316, 336, 341, 342, 345, 346, 347, 351, 354, 356, 357, 359, 361, 364, 372, 533, 565, 569, 585, 586, 590, 594, 595], "note": [3, 5, 56, 58, 61, 64, 89, 98, 276, 280, 303, 308, 314, 322, 341, 349, 362, 415, 426, 430, 562, 569, 573, 577, 585, 589, 593, 595, 596], "regist": [3, 6, 56, 82, 172, 192, 194, 218, 222, 225, 226, 227, 230, 233, 235, 240, 243, 256, 260, 263, 264, 265, 267, 269, 270, 276, 283, 284, 301, 302, 303, 304, 305, 306, 308, 311, 313, 315, 325, 326, 333, 336, 337, 338, 341, 347, 348, 350, 351, 356, 364, 565, 569, 579, 582, 595], "inherit": [3, 6, 58, 61, 64, 89, 90, 213, 233, 235, 243, 251, 269, 276, 313, 315, 348, 351, 565], "nasbas": [3, 287, 288, 299, 300], "own": [3, 58, 61, 64, 89, 90, 118, 214, 233, 252, 269, 562, 564, 565, 576, 579, 582, 592], "just": [3, 55, 142, 206, 227, 230, 231, 233, 236, 237, 238, 239, 241, 244, 269, 337, 583, 589, 594, 595], "registri": [3, 311, 313, 315, 338, 341, 348, 350, 351], "well": [3, 55, 204, 205, 327, 353, 565, 589, 591, 596], "wai": [3, 217, 218, 221, 255, 256, 259, 562, 564, 565, 579, 583, 585, 586, 589, 595, 596], "mobilenetv3": [3, 291, 292], "lt": [3, 295, 565, 584], "wmt": 3, "en": 3, "de": 3, "center": [4, 5, 233, 269, 594, 595], "work": [4, 275, 276, 303, 308, 316, 564, 567, 585, 586, 590, 591, 593], "guidelin": [4, 5], "popular": [5, 6, 276, 318, 561, 567, 571, 585, 589, 595], "compress": [5, 243, 276, 303, 308, 318, 369, 561, 567, 576, 582, 583, 585, 586, 587, 589], "techniqu": [5, 276, 318, 561, 576, 583, 585, 586, 588, 589, 596], "mainstream": 5, "deep": [5, 6, 198, 564, 576, 577, 580, 587, 589, 595], "learn": [5, 6, 298, 564, 565, 571, 574, 576, 577, 580, 586, 587, 589, 593, 595], "framework": [5, 6, 56, 58, 61, 63, 64, 89, 196, 202, 203, 207, 208, 210, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 233, 235, 236, 237, 240, 245, 246, 248, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 269, 275, 276, 283, 284, 285, 292, 316, 317, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 362, 364, 372, 381, 396, 407, 424, 426, 431, 433, 435, 455, 463, 466, 468, 469, 475, 482, 484, 489, 493, 498, 501, 505, 516, 522, 534, 535, 562, 569, 570, 574, 576, 577, 579, 580, 585, 587, 589, 593, 594, 595, 596], "mxnet": [5, 6, 62, 63, 211, 215, 218, 221, 222, 225, 226, 227, 230, 233, 249, 253, 256, 259, 260, 263, 264, 265, 267, 269, 275, 276, 283, 284, 316, 325, 326, 327, 332, 353, 564, 570, 573, 576, 580, 581, 588, 595, 596], "formerli": 5, "known": [5, 236, 237, 356, 571, 585, 593, 595], "low": [5, 6, 61, 88, 90, 91, 204, 205, 219, 220, 257, 258, 275, 276, 285, 316, 327, 563, 565, 569, 580, 587, 589, 595], "precis": [5, 6, 43, 56, 58, 61, 64, 89, 90, 91, 92, 93, 123, 186, 204, 205, 275, 276, 280, 282, 284, 285, 316, 322, 324, 326, 327, 337, 354, 357, 364, 396, 407, 410, 411, 421, 422, 423, 424, 425, 426, 431, 455, 484, 489, 491, 492, 493, 516, 535, 538, 540, 562, 563, 568, 569, 573, 576, 587, 588, 589, 595], "tool": [5, 6, 185, 379, 587, 589], "deliv": [5, 587], "unifi": [5, 6, 207, 210, 227, 275, 276, 316, 526, 564, 574, 576, 581], "interfac": [5, 58, 61, 64, 89, 90, 131, 150, 153, 172, 181, 197, 201, 207, 210, 227, 275, 276, 291, 292, 303, 308, 316, 317, 318, 337, 364, 372, 374, 380, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 496, 502, 509, 521, 576, 584, 589, 591], "across": [5, 65, 275, 276, 285, 316, 327, 566, 585, 586], "technologi": [5, 218, 256, 584], "prune": [5, 28, 179, 243, 276, 304, 305, 306, 308, 309, 311, 312, 313, 315, 317, 318, 336, 338, 339, 341, 342, 343, 345, 346, 347, 348, 350, 351, 352, 369, 379, 390, 397, 410, 416, 426, 428, 455, 463, 475, 490, 515, 523, 534, 539, 569, 573, 576, 583, 587, 589, 596], "knowledg": [5, 201, 235, 270, 276, 568, 576, 581, 596], "distil": [5, 28, 201, 235, 242, 243, 276, 318, 369, 576, 583, 596], "driven": [5, 337, 580, 582, 593], "tune": [5, 6, 56, 58, 61, 63, 64, 89, 91, 196, 201, 204, 205, 216, 218, 254, 256, 275, 276, 316, 318, 327, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 379, 391, 410, 418, 419, 426, 428, 432, 455, 485, 490, 503, 515, 523, 535, 539, 562, 564, 565, 569, 576, 578, 580, 582, 587, 590, 591, 592, 593, 596], "strategi": [5, 6, 16, 56, 58, 61, 63, 64, 89, 191, 201, 202, 218, 256, 276, 316, 318, 396, 418, 516, 534, 544, 569, 576, 587, 588, 589, 590, 591, 596], "help": [5, 100, 242, 286, 334, 396, 534, 581, 595], "quickli": [5, 595], "find": [5, 6, 88, 111, 112, 114, 185, 205, 284, 300, 301, 326, 334, 356, 379, 480, 550, 562, 585, 592, 593, 595], "It": [5, 6, 89, 97, 106, 123, 204, 205, 242, 276, 282, 284, 289, 290, 301, 311, 316, 317, 324, 326, 327, 341, 353, 356, 357, 358, 361, 364, 375, 562, 567, 585, 586, 589, 592, 595, 596], "implement": [5, 19, 58, 61, 64, 89, 90, 91, 131, 150, 172, 180, 181, 184, 204, 205, 211, 214, 215, 216, 218, 222, 227, 249, 252, 253, 254, 256, 260, 265, 277, 283, 284, 306, 311, 315, 319, 325, 326, 327, 337, 341, 348, 349, 350, 351, 353, 359, 364, 564, 565, 586, 591, 593, 595, 596], "weight": [5, 6, 56, 58, 65, 87, 88, 89, 91, 104, 105, 106, 123, 150, 162, 179, 180, 187, 195, 271, 273, 283, 284, 298, 307, 311, 313, 315, 325, 326, 335, 336, 338, 341, 342, 343, 345, 346, 348, 350, 351, 359, 379, 439, 544, 562, 568, 571, 573, 574, 579, 582, 585, 586, 588, 589, 593, 595, 596], "predefin": [5, 385, 421, 425, 426, 534], "sparsiti": [5, 276, 303, 307, 308, 311, 313, 314, 315, 335, 336, 341, 345, 346, 347, 348, 349, 351, 379, 565, 576, 585, 597], "goal": [5, 196, 205, 270, 275, 276, 303, 308, 316, 318, 327, 337, 347, 353, 364, 535, 564, 583, 589, 595], "teacher": [5, 201, 235, 270, 276, 298, 318, 567, 568, 597], "student": [5, 216, 235, 242, 254, 270, 276, 565, 567, 568, 597], "ai": [5, 587, 590], "oneapi": [5, 577, 587], "analyt": [5, 577, 587], "visit": [5, 597], "websit": [5, 577], "io": [5, 63], "7": [5, 123, 179, 563, 572, 573, 577, 589, 591, 595], "10": [5, 218, 256, 280, 322, 356, 512, 562, 563, 565, 577, 585, 588, 594, 595], "releas": [5, 521, 534, 575, 577], "binari": [5, 70, 185, 284, 296, 298, 326, 572, 579], "stabl": [5, 562, 577, 587], "basic": [5, 201, 232, 268, 287, 299, 311, 318, 341, 360, 364, 369, 576, 577, 588, 592], "pypi": [5, 562, 577], "pip": [5, 562, 569, 572, 577, 591], "full": [5, 88, 91, 216, 217, 218, 234, 254, 255, 256, 276, 562, 565, 572, 577, 578], "nightli": [5, 562, 577], "git": [5, 375, 562, 577], "clone": [5, 562, 577], "cd": [5, 562, 569, 577], "r": [5, 88, 114, 180, 195, 292, 562, 577, 584, 589, 597], "txt": [5, 221, 259, 527, 562, 565, 577], "simpl": [5, 233, 269, 562, 577, 592, 595], "found": [5, 270, 276, 287, 288, 299, 300, 356, 362, 518, 534, 551, 562, 580, 595], "A": [5, 58, 64, 89, 91, 98, 100, 111, 112, 114, 118, 119, 150, 153, 155, 156, 162, 179, 185, 191, 192, 194, 218, 222, 227, 232, 233, 236, 237, 238, 239, 256, 260, 265, 268, 269, 270, 276, 277, 280, 281, 282, 284, 287, 299, 300, 301, 302, 303, 304, 305, 306, 308, 311, 312, 313, 314, 315, 319, 322, 323, 324, 325, 326, 327, 329, 331, 335, 338, 341, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 362, 363, 365, 368, 565, 570, 573, 579, 581, 585, 587, 594, 595, 596], "fp32": [5, 6, 56, 58, 61, 87, 89, 90, 91, 92, 93, 123, 136, 138, 171, 176, 180, 187, 191, 195, 204, 205, 271, 273, 284, 326, 336, 337, 357, 361, 372, 378, 379, 434, 562, 573, 579, 580, 588, 589, 590, 591, 592, 593, 595, 596, 597], "wget": 5, "storag": [5, 280, 322, 579], "googleapi": 5, "v1_6": 5, "mobilenet_v1_1": 5, "0_224_frozen": 5, "pb": [5, 91, 327, 335, 353, 471, 474, 485, 563, 569, 581, 593, 597], "data": [5, 6, 17, 56, 58, 61, 63, 64, 65, 88, 89, 91, 99, 123, 150, 179, 185, 187, 189, 191, 196, 204, 205, 234, 235, 236, 237, 271, 273, 274, 276, 292, 297, 311, 317, 318, 327, 334, 341, 353, 356, 362, 372, 379, 380, 382, 385, 392, 393, 394, 396, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 443, 459, 460, 463, 466, 470, 475, 478, 479, 480, 482, 485, 487, 492, 496, 499, 502, 504, 509, 512, 519, 532, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 546, 550, 555, 557, 558, 560, 562, 564, 565, 569, 573, 577, 579, 580, 589, 590, 591, 592, 593, 594, 595], "dummi": [5, 103, 219, 220, 257, 258, 274, 284, 326, 426, 430, 536, 562, 565, 579], "shape": [5, 150, 162, 179, 185, 219, 220, 229, 233, 257, 258, 266, 269, 280, 296, 298, 311, 322, 333, 341, 455, 462, 463, 466, 475, 477, 515, 562, 565, 573, 594], "224": [5, 229, 266, 292, 564, 565, 569, 571, 594, 596], "eval_dataload": [5, 204, 205, 243, 275, 276, 286, 317, 327, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 563, 574, 595], "search": [5, 19, 28, 112, 114, 123, 197, 204, 205, 275, 276, 277, 287, 288, 289, 291, 292, 299, 300, 301, 302, 316, 319, 356, 358, 359, 363, 421, 422, 449, 576, 579, 587, 593, 595], "jupyt": 5, "lab": 5, "manag": [5, 289, 290, 291, 292, 398, 431, 433, 456, 517, 533], "click": [5, 562, 576, 587, 593], "12": [5, 50, 562], "onnxruntim": [5, 6, 64, 212, 250, 276, 285, 438, 442, 576, 588], "raw": [5, 217, 221, 224, 255, 259, 262, 361, 579, 595], "vision": 5, "classif": [5, 216, 233, 254, 269, 284, 314, 326, 349, 567, 579, 587], "resnet": [5, 569, 597], "resnet50": [5, 292, 569, 589, 592, 597], "v1": [5, 51, 52, 53, 91, 185, 228, 229, 266, 281, 282, 284, 323, 324, 326, 335, 569, 579, 581, 591, 592, 597], "inc_bench": [5, 318, 515, 562], "xeon": [5, 578, 580, 584, 587, 589, 590, 597], "scalabl": [5, 580, 584, 587, 589, 590, 597], "skylak": 5, "cascad": 5, "lake": [5, 580, 587], "cooper": [5, 580, 587], "icelak": 5, "futur": [5, 106, 204, 205, 236, 237, 576, 580], "sapphir": 5, "rapid": 5, "flex": 5, "seri": [5, 229, 266, 594], "amd": [5, 576, 597], "arm": [5, 576, 597], "nvidia": [5, 576, 585, 589, 597], "o": [5, 63, 114, 443, 584], "cento": [5, 527], "ubuntu": [5, 584], "20": [5, 233, 269, 291, 292, 584, 594, 596, 597], "04": [5, 524, 584, 597], "11": [5, 53, 524, 562, 579, 580], "6": [5, 61, 123, 562, 573, 589, 595, 597], "variabl": [5, 162, 218, 234, 256, 276, 285, 291, 335, 350, 356, 522, 547, 562, 586, 595], "tf_enable_onednn_opt": [5, 562], "enabl": [5, 89, 91, 149, 187, 298, 313, 348, 522, 562, 569, 580, 584, 585, 586, 587, 590, 595], "onednn": [5, 589], "v2": [5, 187, 359, 569, 591, 595, 597], "420": [5, 576], "speedup": [5, 576, 589], "geomean": [5, 576], "2x": [5, 576, 584], "up": [5, 63, 111, 112, 114, 145, 233, 269, 276, 292, 303, 308, 312, 337, 420, 562, 569, 573, 576, 587, 588, 589, 592, 594, 596], "vnni": [5, 379, 576, 588, 589], "while": [5, 6, 58, 91, 181, 298, 313, 348, 356, 562, 565, 576, 580, 588, 589], "minim": [5, 180, 195, 356, 567, 579, 585, 586, 589, 595], "loss": [5, 89, 162, 201, 205, 235, 243, 275, 276, 284, 303, 308, 316, 318, 326, 337, 369, 567, 568, 569, 579, 580, 583, 585, 586, 589, 595, 596], "over": [5, 218, 222, 227, 256, 260, 265, 280, 284, 322, 326, 356, 576, 579, 588, 595], "30": [5, 233, 269, 576, 594, 597], "avail": [5, 7, 9, 15, 16, 17, 21, 28, 36, 37, 38, 43, 46, 47, 49, 55, 331, 396, 401, 403, 404, 408, 411, 412, 417, 482, 562, 576, 584, 586, 595], "here": [5, 55, 112, 114, 162, 280, 287, 298, 299, 322, 562, 565, 569, 571, 573, 579, 585, 589, 591, 592], "overview": 5, "dive": [5, 573], "mix": [5, 6, 43, 63, 91, 92, 93, 186, 327, 354, 491, 492, 493, 540, 576], "orchestr": [5, 369, 576], "benchmark": [5, 17, 56, 58, 61, 91, 201, 236, 237, 276, 317, 318, 337, 379, 400, 407, 410, 420, 426, 428, 431, 432, 455, 515, 516, 526, 532, 549, 554, 581, 595, 596, 597], "distribut": [5, 63, 180, 195, 196, 206, 208, 209, 211, 212, 213, 214, 215, 236, 237, 244, 246, 247, 249, 250, 251, 252, 253, 270, 276, 303, 308, 318, 356, 374, 522, 567, 577, 589, 591, 595, 597], "tensorboard": [5, 6, 56, 58, 61, 64, 89, 91, 201, 318, 369, 372, 379], "coder": [5, 576, 587], "topic": 5, "adaptor": [5, 16, 192, 194, 243, 276, 372, 576, 590, 591, 593], "mleffici": [5, 587], "dec": [5, 587], "2022": [5, 50, 51, 52, 53, 578, 597], "One": [5, 355, 562, 565, 569, 576, 585, 586, 587, 595], "acceler": [5, 567, 585, 586, 587, 590, 595], "hug": [5, 375, 587], "diffus": [5, 587], "togeth": [5, 233, 269, 311, 317, 341, 567, 577, 587, 593, 594], "tencent": [5, 587], "deepen": [5, 587], "build": [5, 6, 63, 155, 162, 172, 192, 193, 194, 195, 273, 274, 287, 289, 299, 300, 330, 332, 334, 335, 336, 399, 400, 402, 413, 414, 416, 419, 443, 503, 512, 534, 551, 562, 577, 581, 587, 592, 595], "cloud": [5, 587], "foundat": [5, 587], "digit": [5, 277, 319, 587], "intellig": [5, 587], "industri": [5, 579, 587], "fast": [5, 587], "achiev": [5, 275, 276, 316, 571, 579, 583, 585, 586, 587, 589, 593, 595], "signific": [5, 587, 589], "speed": [5, 586, 587, 589], "sota": [5, 587], "nov": [5, 587], "legal": [5, 575], "secur": [5, 584, 587], "activ": [5, 6, 56, 57, 58, 61, 64, 65, 66, 78, 89, 91, 150, 168, 187, 191, 242, 271, 273, 336, 439, 562, 568, 573, 584, 588, 589, 593, 596], "resum": [5, 204, 205, 354, 355, 358, 359, 362, 363, 364, 369, 375], "5": [6, 123, 201, 220, 229, 235, 258, 266, 280, 284, 322, 326, 357, 562, 565, 573, 579, 584, 585, 588, 594, 595, 596, 597], "infer": [6, 63, 65, 111, 112, 172, 179, 275, 276, 316, 335, 353, 567, 580, 582, 585, 586, 587, 589, 593, 595], "solut": [6, 180, 195, 289, 572, 587, 595], "onnx": [6, 9, 57, 64, 65, 78, 87, 88, 188, 212, 250, 271, 272, 273, 274, 328, 329, 334, 336, 369, 377, 382, 485, 564, 570, 571, 573, 576, 580, 581, 587, 588, 595], "runtim": [6, 527, 564, 570, 573, 576, 588], "layer": [6, 56, 58, 61, 64, 89, 90, 91, 112, 114, 155, 156, 157, 158, 159, 161, 162, 201, 235, 242, 276, 298, 303, 308, 311, 312, 314, 341, 349, 352, 370, 372, 373, 379, 546, 568, 576, 585, 586, 591], "bridg": [6, 576], "vanilla": [6, 576], "quantiz": [6, 28, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 133, 137, 139, 141, 144, 147, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 186, 187, 189, 191, 192, 194, 196, 201, 204, 205, 229, 236, 237, 243, 266, 271, 273, 274, 275, 276, 286, 317, 318, 327, 336, 355, 356, 357, 358, 359, 361, 362, 363, 364, 369, 370, 373, 374, 375, 378, 379, 391, 396, 426, 428, 434, 515, 523, 535, 539, 562, 564, 565, 569, 571, 573, 574, 576, 579, 580, 581, 583, 587, 591, 593, 594, 595, 596], "onli": [6, 58, 61, 64, 65, 89, 91, 92, 93, 97, 106, 107, 111, 112, 114, 118, 131, 149, 155, 174, 178, 180, 195, 216, 234, 236, 237, 240, 254, 276, 286, 298, 311, 313, 341, 342, 348, 362, 534, 544, 546, 547, 563, 564, 569, 571, 573, 580, 585, 586, 588, 593, 595, 596], "complet": [6, 107, 562, 595, 596, 597], "subclass": [6, 56, 82, 192, 194, 211, 215, 218, 222, 225, 226, 227, 230, 233, 240, 249, 253, 256, 260, 263, 264, 265, 267, 269, 283, 284, 301, 304, 305, 306, 311, 313, 315, 325, 326, 337, 341, 347, 348, 351, 364], "packag": [6, 356, 387, 395, 401, 403, 404, 406, 407, 408, 411, 412, 415, 417, 436, 437, 441, 444, 450, 452, 455, 456, 462, 481, 483, 488, 491, 494, 495, 497, 500, 506, 511, 515, 549, 562, 572, 577, 587, 591, 595], "adaptor_registri": [6, 56], "abc": [6, 153, 282, 324, 463, 526, 593, 595], "abcadaptor": 6, "__init__": [6, 564, 565, 579, 595], "self": [6, 92, 107, 137, 201, 276, 280, 303, 313, 322, 356, 547, 562, 564, 565, 576, 579, 592, 593, 595], "framework_specific_info": [6, 56, 58, 61, 64, 89, 91], "tune_cfg": [6, 56, 58, 61, 63, 64, 89, 91, 185, 186, 191, 205, 357, 595], "q_func": [6, 56, 58, 61, 64, 89, 91, 204, 205, 276, 316, 317, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 595], "none": [6, 19, 56, 58, 61, 63, 64, 65, 87, 88, 89, 91, 92, 93, 107, 134, 150, 156, 162, 179, 185, 187, 191, 196, 197, 198, 201, 204, 205, 206, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 229, 233, 234, 235, 236, 237, 243, 244, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 266, 269, 270, 271, 273, 275, 276, 277, 280, 283, 284, 285, 286, 287, 289, 291, 292, 296, 298, 299, 300, 303, 307, 308, 312, 313, 316, 317, 318, 319, 322, 325, 326, 327, 332, 334, 335, 336, 337, 347, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 369, 370, 372, 373, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 398, 400, 401, 402, 403, 404, 406, 408, 410, 411, 412, 414, 417, 420, 421, 422, 425, 426, 429, 431, 432, 433, 448, 463, 466, 468, 475, 480, 482, 487, 489, 492, 493, 496, 498, 499, 501, 502, 503, 504, 508, 509, 512, 514, 517, 519, 520, 522, 525, 527, 528, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 546, 547, 551, 559, 565, 579, 589, 593, 594, 595], "postprocess": [6, 56, 58, 61, 64, 89, 91, 196, 227, 230, 233, 234, 237, 265, 267, 269, 275, 276, 286, 298, 316, 317, 318, 372, 537, 542, 593, 594], "fals": [6, 56, 58, 61, 63, 64, 65, 87, 89, 91, 92, 93, 107, 115, 116, 123, 134, 137, 144, 150, 153, 164, 171, 176, 180, 183, 184, 185, 190, 191, 196, 201, 205, 206, 208, 211, 212, 213, 215, 216, 218, 229, 233, 234, 235, 236, 237, 242, 244, 246, 249, 250, 251, 253, 254, 256, 266, 269, 280, 283, 284, 289, 290, 291, 292, 296, 297, 298, 311, 318, 322, 325, 326, 334, 337, 341, 364, 372, 375, 451, 470, 519, 522, 527, 528, 534, 553, 559, 565, 573, 579, 588, 589, 593, 594, 596], "query_fw_cap": [6, 56, 58, 61, 64, 89, 91], "query_fused_pattern": [6, 56], "awar": [6, 56, 58, 61, 64, 89, 91, 187, 201, 207, 210, 227, 243, 276, 286, 311, 316, 317, 318, 359, 364, 568, 569, 571, 576, 580, 583, 595, 597], "calibr": [6, 56, 57, 58, 61, 63, 64, 66, 89, 92, 93, 121, 134, 135, 191, 192, 194, 196, 204, 205, 275, 276, 316, 317, 318, 327, 336, 353, 374, 543, 564, 565, 574, 576, 589, 595, 596], "convers": [6, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 98, 125, 276, 286, 580, 589, 590], "he": 6, "intersect": [6, 284, 326, 579], "yaml": [6, 89, 90, 91, 196, 197, 198, 204, 205, 216, 218, 234, 243, 254, 256, 270, 275, 276, 286, 287, 288, 299, 300, 303, 308, 316, 317, 318, 327, 352, 353, 378, 379, 380, 384, 385, 386, 387, 388, 390, 391, 393, 394, 478, 480, 487, 492, 496, 499, 502, 534, 545, 574, 579, 582, 585, 588, 593, 594], "decid": [6, 91, 155, 156, 278, 313, 320, 443, 591, 595], "besid": [6, 567], "describ": [6, 58, 64, 89, 91, 111, 112, 292, 562, 573, 593], "easili": [6, 582, 585, 586], "op": [6, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 91, 96, 98, 100, 101, 103, 104, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 122, 123, 125, 129, 130, 133, 136, 137, 138, 139, 141, 147, 149, 150, 163, 164, 165, 171, 173, 174, 175, 176, 178, 179, 180, 183, 185, 186, 187, 190, 191, 271, 273, 335, 354, 355, 357, 359, 361, 362, 365, 368, 374, 423, 426, 434, 439, 440, 448, 550, 562, 573, 580, 585, 589, 590, 591, 593, 595, 596], "sequenc": [6, 19, 91, 107, 123, 216, 232, 233, 254, 268, 269, 277, 278, 282, 311, 319, 320, 324, 341, 565, 573, 586, 594], "past": 6, "abov": [6, 97, 280, 322, 585], "wa": [6, 179, 205, 503, 562, 587, 595], "hidden": [6, 311, 341, 534, 585], "everi": [6, 61, 90, 111, 112, 114, 311, 313, 314, 341, 348, 349, 585, 586, 595], "corner": [6, 233, 269, 594], "made": [6, 111, 112, 114, 290, 292, 359, 589, 591, 595], "effect": [6, 585, 586], "mainten": 6, "difficult": 6, "correspond": [6, 19, 91, 162, 187, 216, 254, 277, 280, 284, 311, 313, 317, 319, 322, 326, 348, 356, 364, 372, 573, 585, 586, 588, 589, 592, 595], "abil": [6, 565, 573], "recommend": [6, 237, 238, 325, 326, 565, 571, 573, 585, 588, 595], "end": [6, 111, 150, 185, 216, 232, 233, 243, 254, 268, 269, 276, 289, 313, 314, 337, 342, 346, 347, 348, 349, 369, 567, 573, 577, 582, 585, 586, 593, 594, 595], "modif": [6, 503, 564, 573], "clear": [6, 19, 155, 214, 252, 277, 283, 284, 292, 319, 325, 326, 573, 579], "fragment": 6, "enumer": [6, 301, 369, 383, 484, 490, 516, 567, 569, 583, 585, 593], "scenario": [6, 55, 396, 562, 563, 567, 585, 586], "doesn": [6, 150, 233, 269, 317, 533, 569, 596], "bf16": [6, 9, 57, 61, 90, 91, 92, 93, 101, 125, 132, 136, 138, 151, 186, 336, 357, 379, 573, 580, 590, 595], "granular": [6, 61, 90, 573, 576, 585, 596], "scheme": [6, 61, 65, 87, 88, 90, 191, 551, 564, 573, 595, 596], "assum": [6, 232, 268, 280, 301, 322, 573], "same": [6, 91, 100, 111, 127, 185, 216, 233, 254, 269, 280, 303, 308, 322, 341, 357, 361, 379, 563, 564, 565, 567, 569, 573, 584, 588, 589, 593, 594, 595], "semant": [6, 573], "pattern": [6, 56, 61, 90, 91, 102, 103, 105, 106, 108, 111, 112, 114, 122, 123, 137, 141, 147, 148, 149, 150, 163, 164, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 197, 201, 218, 256, 276, 304, 309, 313, 318, 339, 346, 347, 348, 350, 423, 426, 439, 448, 449, 526, 550, 565, 573, 576, 583, 588, 597], "abstract": [6, 56, 61, 63, 90, 131, 153, 162, 233, 235, 269, 270, 275, 276, 283, 284, 300, 302, 306, 311, 315, 316, 325, 326, 328, 329, 330, 337, 341, 347, 351, 364, 385, 397, 463, 474, 475, 496, 508, 526, 550, 574], "querybackendcap": [6, 58, 61, 64, 89, 90, 91], "tensorflowqueri": [6, 91], "look": [6, 573, 579, 596], "microsoft": 6, "mla": [6, 589], "kernel": [6, 522, 584, 585, 595], "alreadi": [6, 218, 232, 234, 256, 268, 520, 547, 562, 565, 576, 595], "becom": [6, 106, 571, 586], "integr": [6, 185, 235, 562], "explor": 6, "attribut": [6, 88, 106, 127, 150, 162, 179, 191, 197, 198, 243, 316, 450, 451, 455, 515, 532, 564, 573, 574, 588, 596], "whether": [6, 63, 64, 65, 89, 91, 155, 156, 185, 206, 214, 216, 229, 233, 244, 252, 254, 266, 269, 270, 276, 278, 280, 284, 298, 303, 308, 311, 313, 320, 322, 326, 341, 357, 372, 375, 379, 485, 565, 579, 594], "per": [6, 58, 61, 64, 87, 88, 89, 90, 91, 206, 215, 234, 244, 253, 280, 292, 322, 341, 374, 379, 399, 562, 584, 590, 597], "channel": [6, 87, 88, 150, 180, 195, 229, 233, 266, 269, 292, 296, 311, 341, 463, 466, 475, 576, 577, 585, 586, 594, 597], "reduc": [6, 106, 111, 112, 306, 341, 568, 580, 586, 587, 589, 590, 595, 596], "rang": [6, 150, 219, 220, 233, 257, 258, 269, 280, 289, 322, 369, 565, 567, 569, 583, 585, 586, 589, 594], "qlinear": [6, 218, 225, 256, 263, 284, 326, 334, 571, 597], "mode": [6, 55, 56, 58, 61, 64, 69, 87, 88, 89, 91, 150, 225, 234, 263, 276, 280, 322, 335, 348, 364, 379, 399, 526, 562, 576, 577, 589, 590, 595], "qdq": [6, 57, 67, 69, 70, 71, 72, 74, 76, 77, 80, 82, 84, 86, 87, 92, 132, 151, 152, 153, 191, 201, 271, 272, 273, 334, 336, 571, 576, 589], "integ": [6, 162, 270, 276, 280, 284, 301, 311, 313, 315, 322, 326, 341, 348, 351, 589, 595], "seen": [6, 111, 112, 379], "static": [6, 87, 89, 150, 179, 189, 201, 274, 289, 317, 318, 334, 353, 392, 396, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 435, 463, 466, 468, 469, 471, 473, 474, 475, 476, 486, 503, 505, 510, 512, 517, 519, 524, 526, 532, 533, 535, 537, 542, 547, 551, 558, 559, 571, 576, 595, 597], "dynam": [6, 106, 150, 206, 244, 271, 273, 317, 336, 387, 564, 567, 571, 576, 587, 595, 597], "qtype": [6, 65, 88], "choic": [6, 216, 254, 562, 565, 579], "float32": [6, 219, 220, 233, 257, 258, 269, 280, 322, 532, 563, 565, 589, 594], "uint8": [6, 88, 229, 266, 280, 322, 565, 573, 588, 589, 594, 596], "param": [6, 65, 89, 90, 91, 111, 187, 204, 206, 234, 240, 244, 280, 283, 284, 298, 322, 325, 326, 356, 401, 433, 534, 537, 581, 595], "node": [6, 63, 65, 71, 73, 82, 86, 87, 88, 91, 92, 93, 94, 97, 98, 99, 100, 104, 106, 107, 108, 111, 112, 114, 118, 121, 123, 124, 126, 127, 128, 130, 143, 149, 150, 172, 179, 181, 185, 271, 272, 273, 328, 329, 334, 335, 336, 432, 445, 446, 447, 448, 449, 450, 455, 463, 466, 473, 474, 475, 512, 513, 515, 562, 569, 593], "exclud": [6, 123, 130, 296, 298], "onnxrt": [6, 7, 88, 216, 218, 225, 226, 227, 230, 233, 254, 256, 263, 264, 265, 267, 269, 283, 284, 325, 326, 377, 437, 438, 453, 455, 462, 515], "onnxrt_qlinearopsadaptor": [6, 64], "dump_elapsed_tim": [6, 379], "data_load": [6, 64, 91, 92, 93], "recov": [6, 61, 64, 91, 379, 568], "q_config": [6, 61, 64, 65, 87, 90, 91, 271, 273, 330, 334, 335], "inspect_tensor": [6, 56, 58, 61, 64, 89, 91], "op_list": [6, 56, 58, 61, 64, 89, 91, 187, 361, 593], "iteration_list": [6, 56, 58, 61, 64, 89, 91], "inspect_typ": [6, 56, 58, 61, 64, 89, 91, 434], "save_to_disk": [6, 56, 58, 61, 64, 89, 91], "save_path": [6, 61, 64, 91, 185, 271, 273, 328, 329, 334, 336, 369, 581], "quantization_cfg": [6, 61, 64, 91], "set_tensor": [6, 56, 58, 61, 64, 89, 91], "tensor_dict": [6, 56, 58, 61, 64, 89, 91], "input_graph": [6, 64, 171, 172, 176, 179, 180, 381, 489, 493, 498, 501, 508], "fp32_baselin": [6, 58, 61, 64, 89, 91, 372], "diagnosis_help": [6, 91], "fp32_model": [6, 89, 91, 185, 187, 191, 271, 273, 336, 361, 379], "int8_model": [6, 271, 273], "util": [7, 16, 57, 62, 66, 150, 151, 179, 186, 187, 188, 189, 190, 242, 271, 276, 278, 312, 318, 320, 339, 360, 362, 384, 385, 386, 388, 390, 391, 394, 399, 410, 413, 416, 420, 421, 426, 428, 429, 431, 439, 440, 445, 447, 448, 451, 455, 461, 462, 470, 472, 496, 502, 506, 511, 515, 548, 569, 589, 595], "hawq": [9, 187, 359, 595], "newapi": [16, 92, 139], "contrib": [16, 318], "criterion": [17, 89, 91, 187, 201, 237, 240, 270, 276, 318, 338, 341, 348, 502, 542, 567, 571, 585, 586, 589, 595, 596], "comput": [19, 88, 91, 106, 111, 112, 162, 187, 191, 243, 270, 276, 277, 278, 280, 281, 282, 284, 290, 319, 320, 322, 323, 324, 326, 342, 345, 346, 369, 379, 568, 579, 580, 585, 586, 589, 595], "bilingu": [19, 277, 319], "understudi": [19, 277, 319], "qualiti": [19, 277, 319], "text": [19, 232, 233, 268, 269, 277, 282, 314, 319, 324, 349, 578, 587, 594, 597], "machin": [19, 277, 295, 319, 394, 562, 571, 577, 587, 593], "translat": [19, 91, 277, 278, 289, 292, 295, 297, 319, 320], "natur": [19, 277, 319], "anoth": [19, 56, 58, 91, 149, 150, 233, 269, 276, 277, 286, 319, 369, 379, 567, 594, 595], "approxim": [19, 277, 278, 319, 320, 579], "sinc": [19, 275, 276, 277, 303, 308, 316, 319, 375, 503, 567, 571, 579, 583], "glue": [19, 277, 284, 319, 326, 565, 579], "word": [19, 232, 268, 277, 319, 579, 597], "piec": [19, 232, 268, 277, 319, 571, 579], "decod": [19, 228, 229, 266, 277, 298, 319, 579, 594], "id": [19, 50, 51, 52, 53, 232, 234, 268, 277, 279, 280, 281, 282, 319, 321, 322, 323, 324, 375, 399, 400, 402, 403, 404, 406, 409, 410, 411, 412, 413, 415, 416, 418, 419, 447, 448, 451, 519, 579, 592, 595], "token": [19, 216, 227, 230, 233, 254, 265, 267, 269, 276, 277, 278, 298, 318, 319, 320, 375, 547, 551, 562, 565, 579, 592, 594, 595], "By": [19, 55, 277, 319, 579, 581, 595], "ngram": [19, 277, 319, 579], "breviti": [19, 277, 278, 319, 320, 579], "penalti": [19, 277, 278, 319, 320, 579], "doe": [19, 277, 280, 289, 319, 322, 354, 565, 579, 591, 594], "beam": [19, 277, 319, 579], "reset": [19, 187, 277, 283, 284, 319, 325, 326, 337, 547, 579], "cach": [19, 216, 254, 277, 319, 375, 464, 551, 572, 589], "updat": [19, 51, 92, 106, 118, 130, 150, 155, 162, 196, 273, 277, 283, 284, 292, 311, 313, 318, 319, 325, 326, 334, 335, 336, 338, 341, 342, 343, 345, 346, 347, 348, 351, 352, 364, 382, 399, 400, 401, 402, 410, 413, 415, 416, 418, 420, 426, 428, 429, 430, 433, 503, 526, 530, 535, 538, 540, 544, 562, 571, 579, 584, 585, 586, 595], "str": [19, 56, 58, 63, 64, 65, 89, 150, 179, 186, 187, 190, 191, 192, 194, 196, 206, 216, 217, 218, 222, 225, 226, 227, 229, 230, 233, 235, 240, 244, 254, 255, 256, 260, 263, 264, 265, 266, 267, 269, 271, 273, 274, 277, 278, 280, 282, 283, 284, 289, 291, 292, 301, 306, 318, 319, 320, 322, 324, 325, 326, 328, 329, 333, 335, 336, 341, 353, 361, 369, 372, 375, 379, 380, 381, 382, 385, 392, 393, 394, 396, 398, 399, 402, 403, 404, 406, 409, 410, 411, 412, 413, 414, 415, 418, 421, 422, 423, 425, 426, 431, 432, 433, 434, 439, 440, 443, 445, 446, 447, 448, 449, 451, 460, 461, 463, 464, 466, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 482, 484, 485, 487, 489, 492, 493, 496, 498, 499, 501, 502, 503, 504, 507, 508, 509, 512, 519, 521, 522, 524, 526, 527, 530, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 546, 547, 550, 551, 558, 559, 565, 579, 588, 593, 594], "rais": [19, 106, 111, 112, 114, 125, 150, 235, 277, 280, 283, 284, 311, 312, 313, 319, 322, 325, 326, 327, 341, 348, 352, 356, 534, 547, 585, 586], "valueerror": [19, 106, 111, 112, 114, 125, 150, 277, 280, 284, 319, 322, 326, 572], "error": [19, 89, 187, 277, 284, 290, 317, 319, 326, 361, 373, 376, 518, 546, 579, 595], "occur": [19, 277, 319], "length": [19, 216, 233, 254, 269, 277, 280, 298, 319, 322, 565, 579, 589, 594], "float": [19, 56, 58, 61, 64, 88, 89, 91, 150, 179, 187, 216, 229, 254, 266, 276, 277, 278, 280, 281, 282, 289, 291, 292, 303, 308, 311, 313, 314, 315, 319, 320, 322, 323, 324, 335, 336, 341, 347, 348, 349, 350, 351, 356, 382, 400, 409, 418, 419, 434, 440, 495, 503, 519, 520, 524, 526, 532, 534, 535, 542, 544, 545, 553, 565, 579, 588, 589, 594], "bleu_scor": [19, 277, 278, 319, 320], "schedul": [28, 276, 309, 313, 318, 339, 345, 348, 350, 369, 583], "mixedprecis": [28, 201, 276, 285, 327, 388, 492, 540], "modelconvers": [28, 276, 286], "architectur": [28, 234, 287, 288, 298, 299, 300, 302, 563, 567, 577, 585, 586, 587], "na": [28, 197, 276, 318, 331, 576], "pruning_support": 50, "revis": [50, 51, 52, 53, 375], "644ec953a7dc": 50, "6ece06672ed3": [50, 51], "date": [50, 51, 52, 53, 354, 503], "09": [50, 597], "17": [50, 597], "22": [50, 53, 524, 527, 597], "310141": 50, "14": [51, 52, 201, 271, 273, 336, 571, 597], "6f0d0f71d92e": [51, 52], "08": [51, 233, 269, 594, 597], "31": [51, 597], "07": [51, 52, 596, 597], "16": [51, 564, 565, 585, 597], "24": [51, 595, 597], "229939": 51, "update_dataload": 51, "db_session": [51, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 426, 428, 430, 433], "sqlalchemi": [51, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 428, 430, 431, 433, 572, 577], "orm": [51, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 428, 430, 433], "session": [51, 185, 215, 253, 335, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 426, 428, 430, 431, 433, 593, 595], "exist": [51, 97, 179, 198, 234, 235, 280, 300, 322, 335, 375, 400, 420, 426, 428, 429, 466, 517, 533, 534, 579, 585, 595], "databas": [51, 218, 256, 398, 399, 400, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 427, 428, 429, 430, 431, 503, 517, 533], "update_transform": 51, "13": [52, 53, 353, 562, 597], "9e89549a08c8": [52, 53], "29": [52, 597], "41": [52, 597], "291905": 52, "03": [53, 524, 597], "34": [53, 597], "52": [53, 597], "916541": 53, "block": [54, 111, 276, 289, 298, 303, 308, 311, 314, 341, 349, 551, 576, 582, 585, 586], "mask": [54, 216, 254, 280, 296, 298, 307, 311, 313, 315, 322, 336, 341, 342, 345, 346, 348, 351, 585, 586, 597], "run_migrations_offlin": 55, "migrat": [55, 517], "context": [55, 63, 379, 588], "url": [55, 218, 256, 480, 547, 578], "engin": [55, 291, 398, 410, 431], "though": [55, 298], "skip": [55, 111, 337, 593, 595], "creation": [55, 395], "even": [55, 106, 562, 585], "dbapi": 55, "execut": [55, 58, 61, 64, 89, 91, 94, 96, 97, 99, 113, 117, 123, 126, 128, 133, 148, 183, 243, 270, 276, 287, 288, 299, 303, 308, 313, 316, 317, 348, 353, 372, 378, 379, 380, 381, 382, 399, 410, 413, 420, 426, 428, 429, 485, 487, 489, 492, 493, 496, 497, 498, 499, 501, 502, 504, 509, 512, 516, 519, 527, 528, 550, 562, 567, 580, 583, 585, 586, 589, 592, 595, 597], "emit": 55, "string": [55, 56, 58, 61, 64, 87, 88, 89, 90, 91, 100, 107, 123, 150, 155, 156, 179, 181, 185, 196, 197, 216, 218, 235, 240, 254, 256, 270, 273, 275, 276, 277, 280, 286, 287, 288, 291, 299, 300, 301, 303, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 327, 331, 335, 336, 341, 348, 349, 350, 351, 352, 353, 372, 379, 392, 512, 534, 558, 579, 594], "script": [55, 277, 278, 281, 282, 319, 320, 323, 324, 381, 382, 468, 485, 487, 489, 492, 493, 495, 496, 498, 499, 501, 502, 507, 569, 576, 587], "run_migrations_onlin": 55, "associ": [55, 280, 322, 421, 422], "connect": [55, 313, 338, 410, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 562, 584, 585, 586, 592], "cl": [56, 89, 192, 194, 196, 218, 222, 225, 226, 227, 230, 233, 235, 240, 256, 260, 263, 264, 265, 267, 269, 301, 306, 311, 313, 315, 318, 337, 341, 347, 348, 350, 351, 364, 379], "quanit": [56, 61, 64], "chosen": [56, 58, 562], "load": [56, 58, 216, 218, 232, 233, 254, 256, 268, 269, 280, 290, 292, 300, 322, 327, 335, 336, 353, 378, 379, 426, 428, 507, 534, 535, 564, 588, 589], "option": [56, 58, 61, 64, 65, 89, 91, 150, 179, 196, 201, 204, 205, 206, 216, 233, 235, 244, 254, 269, 271, 273, 276, 280, 286, 291, 292, 298, 311, 317, 318, 322, 327, 335, 336, 341, 353, 369, 373, 375, 379, 385, 398, 399, 400, 402, 409, 410, 413, 415, 416, 418, 419, 421, 426, 431, 434, 463, 470, 473, 474, 475, 480, 489, 493, 502, 503, 505, 510, 519, 520, 524, 527, 532, 534, 535, 537, 540, 542, 543, 544, 553, 559, 565, 573, 592, 594, 595, 596], "categori": [56, 58, 91, 218, 256, 279, 280, 321, 322, 563, 565], "int": [56, 58, 61, 63, 64, 88, 89, 91, 150, 179, 185, 187, 191, 206, 215, 216, 217, 229, 233, 244, 253, 254, 255, 266, 269, 271, 273, 278, 280, 284, 289, 291, 292, 301, 318, 320, 322, 326, 336, 337, 341, 347, 357, 379, 385, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 425, 426, 427, 428, 429, 430, 431, 433, 477, 512, 519, 520, 522, 524, 525, 526, 527, 528, 534, 535, 537, 542, 544, 547, 559, 565, 579, 588, 594], "step": [56, 58, 61, 91, 92, 111, 112, 137, 147, 243, 276, 311, 313, 314, 315, 337, 338, 341, 346, 347, 348, 349, 350, 351, 369, 562, 567, 568, 569, 583, 585, 586, 588, 590, 592, 593, 595], "mini": [56, 58, 61, 91, 597], "batch": [56, 58, 61, 63, 91, 106, 111, 155, 191, 206, 208, 209, 214, 215, 236, 237, 243, 244, 246, 247, 252, 253, 276, 292, 296, 298, 303, 308, 362, 369, 399, 410, 532, 562, 564, 567, 583, 585, 594, 595, 597], "boolean": [56, 58, 61, 63, 91, 100, 291, 348, 534], "inspect": [56, 58, 61, 64, 89, 91, 562, 591, 593], "capabl": [56, 58, 61, 63, 64, 89, 90, 91, 364, 563, 573, 580, 588, 589, 595, 596], "queri": [56, 58, 61, 63, 64, 89, 91, 150, 155, 162, 185, 296, 298, 357, 401, 408, 417, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 589], "bn": [56, 106, 123, 125, 163, 597], "dump": [56, 58, 61, 64, 65, 89, 91, 150, 271, 273, 379, 389, 503, 524, 535, 547, 589, 593], "feed": [56, 58, 89, 185, 215, 253, 396, 567], "contain": [56, 58, 61, 63, 64, 89, 100, 111, 112, 114, 118, 123, 150, 153, 179, 185, 187, 196, 204, 205, 216, 217, 218, 254, 255, 256, 270, 271, 273, 275, 276, 280, 281, 282, 286, 289, 294, 295, 303, 304, 305, 306, 308, 311, 312, 313, 314, 315, 316, 318, 322, 323, 324, 327, 341, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 378, 383, 387, 395, 401, 403, 404, 406, 407, 408, 411, 412, 415, 417, 421, 426, 431, 436, 437, 441, 444, 450, 455, 456, 462, 481, 488, 490, 491, 494, 495, 497, 500, 506, 511, 515, 519, 527, 565, 567, 576, 579, 585, 586, 593, 595], "bool": [56, 58, 63, 64, 65, 89, 106, 107, 123, 150, 155, 179, 185, 187, 190, 191, 205, 216, 218, 229, 233, 254, 256, 266, 269, 271, 273, 278, 280, 284, 289, 291, 292, 298, 311, 318, 320, 322, 326, 336, 341, 357, 364, 375, 379, 409, 443, 448, 451, 463, 466, 468, 469, 470, 471, 473, 474, 475, 476, 480, 482, 485, 503, 519, 520, 522, 527, 528, 534, 536, 537, 547, 553, 559, 565, 579, 588, 594], "disk": [56, 58, 89, 91], "memori": [56, 58, 89, 118, 275, 276, 303, 308, 316, 564, 568, 580, 582, 585, 586, 589, 595], "numpi": [56, 58, 61, 64, 88, 89, 91, 111, 112, 114, 150, 185, 233, 269, 274, 280, 284, 289, 291, 301, 322, 326, 572, 594], "arrai": [56, 58, 61, 64, 87, 88, 89, 91, 150, 179, 185, 233, 269, 280, 284, 289, 291, 301, 322, 326, 334, 336, 356, 379, 594], "node0_nam": [56, 58, 89, 91], "weight0_nam": [56, 58, 61, 64, 89, 91], "bias0_nam": [56, 58, 61, 64, 89, 91], "node1_nam": [56, 58, 89, 91], "weight1_nam": [56, 58, 89, 91], "bias1_nam": [56, 58, 89, 91], "output0_nam": [56, 58, 89, 91], "output1_nam": [56, 58, 89, 91], "back": [56, 58, 61, 64, 89, 91, 162, 191, 233, 269, 289, 343], "usual": [56, 58, 61, 64, 89, 216, 254, 276, 303, 308, 567, 583, 589], "respons": [56, 58, 61, 64, 89, 522, 526, 533, 546, 550, 551, 555, 557, 559, 560, 589], "int32": [56, 58, 61, 64, 89, 150, 271, 273, 565], "format": [56, 58, 61, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 97, 111, 112, 185, 216, 217, 218, 222, 227, 254, 255, 256, 260, 265, 271, 273, 276, 280, 286, 289, 300, 322, 336, 361, 485, 524, 542, 565, 569, 571, 579, 580, 581, 589], "someth": [56, 58, 61, 64, 89, 204, 205, 218, 256, 353], "quantize_input": [56, 58, 87, 91], "abl": [56, 58, 91, 125, 204, 205, 232, 268, 327, 353, 585, 589], "scale": [56, 58, 65, 87, 88, 91, 106, 111, 145, 180, 195, 229, 233, 266, 269, 273, 334, 571, 589, 592, 594], "where": [56, 58, 61, 65, 88, 89, 111, 162, 280, 284, 296, 298, 300, 302, 311, 322, 326, 341, 567, 585, 593], "destinatin": [56, 58], "destin": [56, 58, 65, 91, 271, 272, 276, 286], "mxnet_util": 57, "ox_util": 57, "argmax": [57, 66, 78], "binary_op": [57, 66, 78], "concat": [57, 66, 78, 184, 519], "direct_q8": [57, 66, 78], "embed_layernorm": [57, 66, 78], "gather": [57, 63, 65, 66, 78, 311, 341, 522], "gavgpool": [57, 66, 78], "gemm": [57, 66, 78, 585], "lstm": [57, 66, 78], "matmul": [57, 65, 66, 78, 90, 96, 103, 109, 117, 123, 129, 130, 139, 149, 150, 168, 177, 273, 311, 341, 571, 573], "maxpool": [57, 66, 78, 169, 178, 573], "pad": [57, 66, 78, 115, 116, 216, 233, 254, 269, 296, 298, 565, 594], "pool": [57, 66, 78, 178], "resiz": [57, 66, 78, 216, 217, 229, 233, 254, 255, 266, 269, 564, 565, 594], "tf_util": 57, "graph_rewrit": [57, 151], "graph_bas": [57, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 151], "quantize_graph": [57, 151], "qat": [57, 89, 151, 152, 190, 273, 276, 286, 335, 568, 569, 571, 576, 589], "quantize_graph_bas": [57, 151, 152, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178], "quantize_graph_bn": [57, 151, 152], "quantize_graph_concatv2": [57, 151, 152], "quantize_graph_conv": [57, 151, 152], "quantize_graph_for_intel_cpu": [57, 151, 152], "quantize_graph_matmul": [57, 151, 152], "quantize_graph_pool": [57, 151, 152], "transform_graph": [57, 151], "bias_correct": [57, 151, 182], "graph_transform_bas": [57, 151, 180, 182, 183, 184], "insert_log": [57, 151, 182], "rerange_quantized_concat": [57, 151, 182], "graph_convert": [57, 151], "graph_converter_without_calib": [57, 151], "graph_util": [57, 151], "quantize_graph_common": [57, 151], "torch_util": [57, 237, 276, 318], "bf16_convert": [57, 92, 93, 95, 132, 151, 188], "hawq_metr": [57, 188], "symbolic_trac": [57, 188], "kerasadaptor": 58, "specifi": [58, 61, 64, 65, 89, 90, 91, 123, 150, 179, 204, 205, 233, 234, 269, 275, 276, 280, 283, 284, 287, 290, 292, 299, 300, 303, 308, 316, 317, 322, 325, 326, 327, 336, 342, 353, 378, 379, 396, 399, 402, 409, 410, 411, 413, 414, 415, 420, 421, 423, 424, 426, 428, 429, 433, 434, 435, 448, 480, 484, 485, 486, 505, 510, 526, 530, 534, 547, 551, 562, 568, 569, 573, 579, 582, 588, 589, 594, 595, 596], "boolen": [58, 64, 89, 91], "compare_label": [58, 61, 64, 89, 91, 284, 326, 579], "pipelin": [58, 61, 64, 89, 91, 270, 276, 287, 288, 299, 314, 317, 568, 583], "get_optype_wise_": [58, 91], "quantizable_op_detail": 58, "get": [58, 61, 63, 64, 65, 89, 90, 91, 111, 112, 114, 123, 150, 155, 162, 163, 164, 165, 166, 167, 168, 169, 171, 173, 175, 177, 179, 181, 185, 187, 189, 191, 192, 194, 196, 198, 201, 204, 206, 209, 227, 230, 233, 234, 240, 242, 243, 244, 247, 265, 267, 269, 273, 274, 275, 276, 285, 292, 296, 302, 303, 308, 311, 313, 315, 316, 317, 318, 334, 335, 336, 337, 338, 341, 348, 350, 351, 356, 361, 372, 374, 376, 379, 380, 385, 392, 393, 394, 396, 399, 402, 403, 404, 406, 409, 410, 411, 412, 413, 414, 415, 420, 421, 423, 425, 426, 427, 428, 429, 430, 433, 434, 435, 438, 442, 443, 448, 460, 463, 464, 466, 468, 469, 473, 474, 475, 477, 480, 482, 484, 485, 486, 487, 492, 496, 499, 502, 503, 505, 509, 510, 512, 514, 521, 522, 526, 530, 532, 534, 535, 537, 541, 544, 546, 547, 550, 551, 555, 557, 558, 559, 560, 562, 576, 577, 595], "wise": [58, 65, 91, 180, 195, 311, 341, 355, 356, 357, 361, 423, 426, 534, 562, 576, 585, 586, 593, 595, 596], "union": [58, 91, 278, 280, 284, 320, 322, 326, 369, 392, 394, 410, 432, 470, 519, 522, 524, 526, 527, 534, 537, 538, 540, 542, 546, 579], "kei": [58, 64, 89, 91, 150, 155, 179, 181, 185, 187, 198, 276, 280, 296, 298, 301, 303, 308, 312, 314, 322, 335, 341, 349, 352, 356, 364, 370, 372, 373, 379, 526, 542, 562, 571, 593], "kerasqueri": 58, "local_config_fil": [58, 61, 64, 89, 91], "get_vers": [58, 61, 64, 90, 91], "infom": [58, 64, 91, 236, 237, 273], "get_precis": [58, 61, 64, 90, 91, 396], "support": [58, 61, 63, 64, 88, 89, 90, 91, 118, 125, 142, 201, 204, 205, 206, 215, 216, 218, 222, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 240, 243, 244, 253, 254, 256, 260, 263, 264, 265, 266, 267, 269, 276, 283, 284, 286, 291, 292, 298, 301, 303, 304, 305, 306, 308, 311, 313, 317, 318, 325, 326, 327, 331, 337, 341, 348, 353, 362, 372, 374, 396, 463, 466, 468, 469, 471, 473, 474, 475, 476, 482, 516, 524, 534, 561, 562, 586, 587, 590, 592, 595], "get_op_typ": [58, 61, 64, 89, 90, 91], "compos": [58, 64, 89, 91, 179, 233, 269, 372, 594], "dictionari": [58, 64, 65, 89, 91, 111, 112, 114, 162, 186, 187, 191, 197, 198, 201, 232, 268, 280, 287, 289, 292, 298, 299, 300, 302, 318, 322, 401, 403, 404, 406, 408, 411, 412, 417, 421, 422, 424], "get_quantization_cap": [58, 61, 64, 89, 90, 91], "get_op_types_by_precis": [58, 64, 89, 91], "mxnetadaptor": 61, "nc_model": [61, 63, 303, 308], "unimpl": [61, 64], "mxnetmodel": [61, 332], "data_x": [61, 63], "loader": [61, 63, 204, 205, 317, 327, 353, 375], "modelwis": 61, "opwis": 61, "recover_tuned_model": [61, 91], "mxnetqueri": 61, "g": [61, 64, 90, 289, 291, 317, 341, 526, 567, 585, 586, 591, 595], "conv2d": [61, 90, 103, 104, 105, 109, 110, 115, 116, 123, 165, 175, 180, 573, 593, 595], "fully_connect": 61, "get_fuse_pattern": [61, 90, 91], "etc": [61, 90, 196, 232, 243, 268, 270, 275, 276, 282, 290, 291, 303, 308, 316, 318, 324, 327, 353, 378, 567, 576, 592, 595], "get_mixed_precision_combin": [61, 90, 91], "init": [62, 66, 194, 235, 339, 364, 565, 579], "optyp": [63, 272], "enum": [63, 88, 379, 484, 516], "isiter": 63, "obj": [63, 196, 215, 253, 270, 275, 276, 286, 287, 288, 299, 300, 303, 308, 312, 316, 317, 318, 327, 352, 353, 372, 379], "true": [63, 65, 87, 89, 91, 106, 107, 123, 129, 150, 153, 155, 183, 185, 187, 201, 205, 206, 214, 216, 218, 219, 232, 233, 234, 244, 252, 254, 256, 257, 268, 269, 271, 273, 278, 280, 284, 289, 296, 298, 306, 311, 320, 322, 326, 336, 337, 341, 342, 364, 372, 480, 519, 522, 527, 528, 534, 565, 569, 573, 579, 588, 589, 590, 593, 594, 595, 596], "els": [63, 106, 107, 185, 214, 252, 357, 519, 534, 593], "ensure_list": 63, "x": [63, 98, 111, 112, 114, 118, 186, 215, 233, 253, 269, 292, 296, 298, 356, 569, 581, 585, 589, 593, 594], "ensur": [63, 65, 233, 269, 314, 349, 356, 398, 431, 463, 466, 468, 475, 517, 562, 569, 571, 589, 594], "check_mx_vers": 63, "mx": 63, "__version__": 63, "combine_cap": 63, "make_nc_model": 63, "target": [63, 88, 89, 134, 135, 150, 179, 204, 235, 289, 312, 315, 337, 341, 345, 347, 351, 352, 354, 356, 447, 448, 565, 569, 585, 586, 593, 594, 595, 596], "sym_model": 63, "ctx": 63, "input_desc": 63, "tupl": [63, 89, 91, 150, 162, 191, 204, 205, 229, 233, 235, 266, 269, 271, 273, 280, 289, 292, 298, 322, 327, 337, 341, 353, 361, 449, 480, 534, 553, 565, 579, 594], "symnet": 63, "arg": [63, 89, 97, 196, 216, 217, 218, 254, 255, 256, 275, 276, 286, 298, 308, 311, 316, 317, 318, 328, 329, 330, 333, 336, 349, 356, 373, 375, 376, 384, 386, 388, 389, 390, 391, 401, 403, 404, 406, 408, 411, 412, 417, 519, 527, 547, 564, 565, 569, 589, 593, 594], "aux": 63, "ncmodel": 63, "suppli": [63, 296], "get_framework_nam": [63, 463, 466, 468, 475], "prepare_model_data": 63, "dataloaderwrap": 63, "prepare_model": 63, "create_data_exampl": 63, "prepare_dataload": 63, "ndarray_to_devic": 63, "ndarrai": [63, 111, 112, 114, 150, 233, 269, 289, 291, 336, 356, 370, 373, 572, 594], "devic": [63, 123, 134, 135, 136, 137, 138, 139, 142, 147, 150, 171, 176, 179, 184, 187, 201, 235, 292, 318, 567, 585, 588], "is_model_quant": 63, "query_quantizable_nod": 63, "map": [63, 88, 91, 172, 181, 187, 233, 269, 271, 272, 273, 275, 276, 279, 280, 281, 282, 284, 289, 303, 308, 311, 313, 316, 321, 322, 323, 324, 326, 341, 350, 484, 565, 569, 579, 585, 586, 589], "quantize_sym_model": 63, "qconfig": [63, 593], "run_forward": 63, "b_filter": 63, "collector": [63, 187, 370, 373], "pre_batch": 63, "post_batch": 63, "forward": [63, 186, 235, 296, 298, 336, 588, 589, 593], "propag": [63, 145, 162, 343], "filter": [63, 216, 217, 218, 219, 220, 221, 223, 227, 254, 255, 256, 257, 258, 259, 261, 265, 276, 318, 379, 402, 443, 466, 536, 564, 565, 576, 585, 586, 593], "collect": [63, 88, 91, 227, 230, 231, 233, 236, 237, 238, 239, 241, 265, 267, 269, 277, 282, 283, 284, 319, 324, 325, 326, 370, 373, 379, 380, 485, 509, 520, 522, 534, 535, 571, 589, 593, 595], "dure": [63, 91, 106, 111, 112, 162, 289, 292, 298, 311, 315, 317, 341, 351, 528, 580, 581, 582, 583, 585, 586, 589, 593, 596], "prior": [63, 133, 356, 595], "make_symbol_block": 63, "gluon": [63, 327, 353, 581], "symbolblock": 63, "make_modul": 63, "parse_tune_config": 63, "quantizable_nod": 63, "distribute_calib_tensor": 63, "calib_tensor": 63, "calib_cfg": 63, "tensor_to_nod": 63, "kl": [63, 370, 373, 374, 573, 595, 596], "minmax": [63, 573, 596], "calib_model": 63, "qsym_model": 63, "calib_data": 63, "calibdata": 63, "threshold": [63, 65, 193, 280, 311, 322, 341, 370, 373, 374, 579], "amp_convert": 63, "amp_cfg": 63, "amp": [63, 584], "dataiterload": 63, "data_it": 63, "collectorbas": 63, "collect_gluon": 63, "arr": [63, 88, 379], "collect_modul": 63, "m": [63, 88, 114, 187, 311, 341, 567, 597], "b": [63, 88, 114, 118, 216, 254, 273, 565, 579, 586, 595], "calibcollector": 63, "include_tensors_kl": 63, "include_tensors_minmax": 63, "num_bin": [63, 370, 373, 374], "8001": [63, 370, 373], "calc_kl_th_dict": 63, "quantized_dtyp": 63, "calcul": [63, 65, 88, 89, 91, 104, 187, 205, 219, 220, 235, 257, 258, 276, 281, 282, 292, 297, 298, 303, 307, 308, 311, 313, 314, 323, 324, 337, 338, 341, 349, 350, 361, 370, 373, 434, 526, 532, 565, 579, 582, 585, 586, 589, 592, 595, 596], "tensorcollector": 63, "include_nod": 63, "qtensor_to_tensor": 63, "preprocess": [63, 216, 227, 230, 233, 254, 265, 267, 269, 270, 276, 298, 372, 569, 594], "namecollector": 63, "cache_kl": 63, "cache_minmax": 63, "tensors_kl": 63, "tensors_minmax": 63, "properti": [63, 150, 162, 192, 194, 201, 206, 208, 216, 218, 234, 235, 243, 244, 246, 254, 256, 270, 275, 276, 283, 284, 285, 286, 300, 303, 308, 316, 317, 318, 325, 326, 328, 329, 330, 332, 334, 335, 336, 337, 349, 356, 364, 379, 380, 398, 431, 438, 442, 447, 448, 451, 463, 466, 471, 475, 484, 487, 492, 496, 499, 502, 509, 519, 526, 527, 528, 532, 537, 541, 544, 546, 547, 578, 584], "min_max_dict": 63, "max": [63, 64, 65, 88, 91, 150, 180, 195, 233, 269, 281, 282, 323, 324, 356, 379, 544, 562, 589, 594, 595], "post_collect": 63, "onnxruntimeadaptor": 64, "rt": 64, "todo": [64, 216, 219, 254, 257, 280, 322, 532], "replac": [64, 111, 112, 129, 130, 150, 282, 324, 334, 357, 534, 569, 591], "func": [64, 235, 317, 336, 534, 551, 596], "onnxdataload": 64, "evalut": 64, "onnxtransform": 64, "onnxmetr": 64, "evaluaton": 64, "visualizaton": 64, "f1": [64, 276, 281, 283, 284, 318, 323, 325, 326, 569, 579, 592, 597], "modelproto": [64, 271, 272, 273, 581], "onnxrt_integeropsadaptor": 64, "onnxrt_qdqadaptor": 64, "onnxrtqueri": 64, "get_graph_optim": 64, "onnxrtaug": 65, "model_wrapp": 65, "dump_op_typ": 65, "black_nod": 65, "white_nod": 65, "cpuexecutionprovid": 65, "reduce_rang": [65, 87, 201, 318, 588], "augment": 65, "augment_graph": 65, "activation_onli": 65, "weight_onli": 65, "quantization_candid": 65, "store": [65, 218, 256, 280, 298, 304, 305, 306, 311, 313, 322, 338, 341, 348, 350, 351, 356, 375, 574], "get_intermediate_output": 65, "calib_mod": 65, "dump_minmax": 65, "naiv": 65, "min": [65, 91, 150, 180, 195, 379, 562, 589, 594, 595], "dump_calibr": 65, "give": [65, 595], "pair": [65, 87, 92, 147, 155, 564, 580], "element": [65, 214, 252, 276, 280, 296, 298, 303, 308, 311, 314, 322, 341, 349, 379, 397, 565, 576, 579, 585], "minimum": [65, 341, 356, 585, 595], "second": [65, 108, 216, 254, 357, 379, 443, 526, 562, 595, 596], "maximum": [65, 98, 216, 233, 254, 269, 278, 298, 311, 313, 320, 341, 348, 356, 565, 585, 589, 594], "calculate_quantization_param": 65, "quantization_threshold": 65, "param_nam": [65, 392], "dump_tensor": 65, "calculate_scale_zeropoint": 65, "last_nod": 65, "next_nod": 65, "rmin": [65, 88, 589], "rmax": [65, 88, 589], "quantize_rang": [65, 88], "zero": [65, 87, 88, 233, 269, 276, 284, 303, 308, 311, 313, 314, 326, 341, 348, 349, 379, 585, 586, 589, 594, 595], "point": [65, 87, 88, 229, 266, 281, 282, 301, 323, 324, 337, 356, 579, 589, 594, 595], "activationoper": 67, "onnx_quant": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86], "onnx_nod": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86], "quantize_check": [67, 70, 71, 73, 75, 77, 81, 82, 83, 84, 85], "quantizaion": [67, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86], "convert_check": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86], "convert_format": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86], "qoper": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87], "removableactivationoper": 67, "qactivationoper": 67, "children": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 334], "argmaxoper": 68, "qargmaxoper": 68, "attentionoper": 69, "qattentionoper": 69, "qattent": 69, "binaryoper": 70, "qbinaryoper": 70, "qbinari": 70, "concatoper": 71, "cast": [71, 73, 82, 86, 87, 88, 101, 571, 590, 594], "qconcatoper": 71, "qconcat": 71, "convoper": 72, "qconvoper": 72, "qlinearconv": 72, "direct8bit": 73, "direct8bitoper": 73, "directcastoper": 73, "qdirectoper": 73, "qdirect": 73, "embedlayernorm": 74, "embedlayernormalizationoper": 74, "qembedlayernormalizationoper": 74, "qembedlayernorm": 74, "gatheroper": 75, "qgatheroper": 75, "qgather": 75, "globalaveragepool": 76, "globalaveragepooloper": 76, "qglobalaveragepooloper": 76, "qlinearglobalaveragepool": 76, "gemmoper": 77, "qgemmoper": 77, "qgemm": 77, "lstmoper": 79, "matmuloper": 80, "qmatmuloper": 80, "qlinearmatmul": 80, "maxpooloper": 81, "qmaxpooloper": 81, "qmaxpool": 81, "op_registri": 82, "op_typ": [82, 89, 357, 361, 364, 365, 368], "qop_registri": 82, "padoper": 83, "qpadoper": 83, "qpad": 83, "averagepool": 84, "pooloper": 84, "qpooloper": 84, "qlinearaveragepool": 84, "resizeoper": 85, "qresizeoper": 85, "qresiz": 85, "splitoper": 86, "qsplitoper": 86, "qsplit": 86, "quantization_param": 87, "op_types_to_quant": 87, "fallback_list": 87, "check_opset_vers": 87, "opset": [87, 271, 273, 336], "should_quant": 87, "quantize_model": 87, "merge_dedicated_qdq_pair": 87, "merg": [87, 148, 208, 246, 593, 595], "dedic": 87, "q": [87, 88, 92, 147, 149, 171], "dq": [87, 92, 147, 149, 171], "should_cast": 87, "insert_qdq": 87, "should_convert": 87, "convert_qdq_to_operator_ori": 87, "remove_redundant_pair": 87, "redud": 87, "dtype_cast": 87, "cfg": [87, 91, 115, 116, 191, 197, 372], "keep_io_typ": 87, "dtype": [87, 88, 92, 93, 150, 179, 186, 201, 219, 220, 229, 233, 257, 258, 266, 269, 271, 273, 274, 336, 565, 571, 573, 588, 593, 594, 596], "quantize_output": 87, "initializer_use_weight_qtyp": 87, "direct_int8": 87, "quantize_bias_tensor": 87, "bia": [87, 91, 150, 179, 180, 271, 273, 296, 593], "quantize_bia": 87, "bias_nam": [87, 273], "input_nam": [87, 111, 112, 201, 271, 273, 336, 571], "weight_nam": [87, 342], "beta": [87, 111, 112, 114, 338], "input_scal": 87, "weight_scal": 87, "quantize_weights_per_channel": 87, "weight_qtyp": 87, "axi": [87, 88, 341], "quantize_weight_per_channel": 87, "channel_axi": [87, 153, 193, 195], "tensor_proto_to_arrai": 87, "tensorproto": [87, 88], "get_bias_add_nod": 87, "last_output": 87, "quantized_bias_nam": 87, "ad": [87, 162, 216, 254, 277, 319, 341, 348, 356, 399, 400, 402, 409, 410, 411, 412, 413, 416, 418, 419, 562, 580, 593], "reshap": [87, 105, 111, 112, 114, 117, 122, 306, 341], "nodeproto": [87, 273], "_type_": [87, 273, 333], "previou": [87, 91, 111, 123, 298, 300, 337, 341, 362, 562, 591, 593, 595], "is_valid_quantize_weight": 87, "dequantize_tensor": [87, 187, 434], "value_nam": 87, "helper": [88, 89, 91, 150, 156, 185, 187, 191, 216, 217, 218, 232, 254, 255, 256, 268, 272, 273, 296, 335, 377, 528], "dtype_to_nam": 88, "dtype_map": 88, "quanttyp": 88, "make_quant_nod": 88, "quantizelinear": [88, 571], "make_dquant_nod": 88, "dequantizelinear": [88, 571], "is_b_transpos": 88, "wheter": 88, "inuput": 88, "transpos": [88, 117, 233, 269, 311, 341, 594], "split_shared_bia": 88, "share": [88, 123, 126, 143, 149, 179, 572, 573, 595], "cast_tensor": 88, "remove_init_from_model_input": 88, "collate_pr": 88, "quantize_data_with_scale_zero": 88, "zero_point": [88, 273, 334, 341], "pack": [88, 105], "ab": [88, 298, 313, 338, 589], "np": [88, 150, 179, 233, 269, 356, 569, 594], "sym": [88, 573, 596], "asym": [88, 573, 596], "calculate_scale_zp": 88, "quantize_data": 88, "trasnform": 88, "equat": [88, 282, 284, 324, 326, 589], "z": [88, 567], "real": [88, 89, 219, 236, 237, 257, 569, 587, 589], "quantize_data_per_channel": 88, "tensor_valu": 88, "scale_valu": 88, "zo_valu": 88, "dequantize_data_with_scale_zero": 88, "sacal": 88, "dequantize_data": 88, "valueinfo": 88, "tensor_nam": [88, 185, 335, 336], "new_dtyp": 88, "quantizedvalu": 88, "new_quantized_nam": 88, "scale_nam": 88, "zero_point_nam": 88, "quantized_value_typ": 88, "quint8": 88, "linearli": 88, "intial": 88, "quantizediniti": 88, "quantized_data": 88, "quantizationmod": 88, "quantizedvaluetyp": 88, "quantformat": [88, 273], "quantize_nparrai": 88, "high": [88, 219, 220, 257, 258, 565, 577, 587, 595], "attribute_to_kwarg": 88, "kwarg": [88, 89, 91, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 177, 178, 196, 201, 218, 227, 230, 231, 233, 237, 238, 241, 256, 269, 275, 276, 286, 292, 298, 303, 308, 314, 316, 317, 318, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 349, 353, 365, 368, 369, 373, 375, 376, 378, 379, 384, 386, 388, 389, 390, 391, 401, 403, 404, 406, 408, 411, 412, 417, 564], "make_nod": 88, "find_by_nam": 88, "item_list": 88, "item": [88, 198, 232, 268, 312, 352, 364, 432, 520, 553, 569, 595], "get_ops_recurs": 89, "prefix": [89, 185, 186, 190, 234, 276, 277, 319, 547, 593], "graph_info": [89, 91, 328, 329, 330, 334, 335, 336], "templateadaptor": 89, "tampl": 89, "is_fused_modul": [89, 187, 191], "_propagate_qconfig_help": [89, 187, 191], "calculate_hessian_trac": 89, "enable_act": [89, 187], "hessian": [89, 187, 359, 595], "gradient": [89, 162, 313, 336, 338, 342, 343, 576, 585, 586, 597], "amap": 89, "op_nam": [89, 191, 197, 201, 318, 357, 361, 364, 365, 368, 434, 439, 440, 448, 449, 585, 593], "hessian_trac": [89, 187], "pytorchadaptor": 89, "objext": 89, "number": [89, 111, 112, 187, 191, 192, 194, 206, 214, 217, 229, 233, 244, 252, 255, 266, 269, 281, 282, 284, 291, 300, 311, 323, 324, 326, 341, 342, 347, 348, 351, 356, 372, 379, 466, 522, 532, 535, 562, 563, 565, 569, 579, 585, 589, 592, 594, 595], "summari": [89, 234, 276, 345, 369, 562, 584, 593], "optimizer_tupl": [89, 91], "criterion_tupl": [89, 91], "hook": [89, 91, 187, 204, 235, 242, 243, 270, 276, 303, 308, 336, 364, 372, 567, 585, 593], "is_fused_child": 89, "_post_eval_hook": [89, 593], "is_fused_op": 89, "is_last_fused_child": 89, "last": [89, 91, 137, 191, 204, 206, 244, 298, 311, 337, 338, 341, 364, 503, 562, 580, 589], "q_capabl": 89, "get_non_quant_modul": 89, "model_kwarg": 89, "non_quant_modul": 89, "custom": [89, 155, 196, 289, 317, 337, 378, 421, 426, 563, 567, 585, 592], "keyword": 89, "custom_non_quant_dict": 89, "pytorch_ipexadaptor": 89, "ipex": [89, 191, 336, 576, 597], "unspport": 89, "No": [89, 572, 584, 587], "pytorch_fxadaptor": 89, "fx": [89, 191, 353, 362, 576, 587, 589, 590, 597], "prepare_sub_graph": 89, "sub_module_list": 89, "fx_op_cfg": 89, "is_qat": [89, 190], "example_input": [89, 191, 201, 271, 273, 336, 571], "recurs": [89, 379], "qconfigmap": 89, "prepare_fx": 89, "dir": [89, 191, 216, 254, 378, 565, 572, 574], "convert_sub_graph": 89, "fuse_fx_model": 89, "fused_model": 89, "calculate_op_sensit": [89, 91], "output_op_nam": [89, 91], "confidence_batch": [89, 91, 191, 595], "fallback": [89, 91, 191, 354, 355, 359, 361, 362, 580, 590, 595], "requantize_cfg": [89, 91, 191], "switch": [89, 129, 593], "stage": [89, 91, 137, 354, 362, 527, 567, 593, 595], "re": [89, 91, 356, 375, 577], "sort": [89, 91, 179, 334, 361, 443, 595], "sensit": [89, 91, 313, 338, 342, 576, 585, 586], "ops_lst": 89, "pytorchqueri": 89, "set_quantization_config": 90, "organ": [90, 562, 596], "unsupported_precis": 90, "tensorflowadaptor": 91, "stock": 91, "spr": 91, "graphdef": [91, 100, 101, 104, 105, 107, 111, 112, 114, 118, 123, 129, 130, 136, 137, 138, 139, 150, 172, 179, 185, 335, 512, 581], "graph_def": [91, 97, 150, 185, 327, 335, 353, 477, 512, 513], "frozen": [91, 100, 327, 335, 353, 471, 474, 562, 581], "ckpt": [91, 185, 327, 335, 353, 597], "savedmodel": [91, 327, 335, 353, 597], "folder": [91, 185, 218, 223, 256, 261, 327, 353, 378, 565, 593], "on_epoch_begin": [91, 243, 276, 303, 308, 313, 314, 342, 345, 346, 347, 348, 349, 369, 372, 567, 583, 585], "on_epoch_end": [91, 243, 276, 303, 308, 313, 314, 342, 345, 346, 347, 348, 349, 369, 372, 567, 583, 585], "larger": [91, 341], "better": [91, 141, 204, 205, 301, 327, 337, 353, 568, 579, 580, 585, 586, 587, 589, 592, 595], "tf": [91, 156, 162, 185, 215, 216, 217, 218, 233, 253, 254, 255, 256, 269, 333, 335, 382, 562, 569, 581, 587, 590, 594], "compat": [91, 125, 185, 280, 289, 322, 335, 569, 581, 591], "definit": [91, 150, 209, 214, 247, 252, 448, 461, 470, 519, 550], "inspect_weight_and_bia": 91, "node_list": 91, "graph_node_name_map": [91, 185], "bias": 91, "fused_node_map": 91, "pattern_map": 91, "val": [91, 185, 218, 221, 256, 259, 312, 352], "seq": 91, "fused_mapping_revers": 91, "fused_map": 91, "inspect_activ": 91, "local": [91, 311, 341, 348, 364, 375, 379, 394, 426, 431, 444, 464, 562, 586, 592], "actual": [91, 284, 326, 337, 569], "tensorflowbasemodel": [91, 335, 475], "start": [91, 233, 269, 277, 280, 291, 319, 322, 334, 337, 348, 354, 357, 527, 547, 577, 594, 595], "quantizedv2": 91, "quantizedconv2d": 91, "qat_convert": 91, "quantize_recip": [91, 155, 156], "kera": [91, 114, 156, 162, 240, 330, 335, 455, 462, 472, 569, 581], "sequenti": [91, 214, 252, 317, 358, 595], "fake": [91, 153, 589], "converted_model": [91, 580], "quan_model": [91, 185], "diagnosi": [91, 185, 318, 423, 426, 432, 455, 515, 544, 550], "get_output_op_nam": 91, "qmodel": [91, 187], "oupur": 91, "mse": [91, 191, 284, 318, 326, 360, 434, 440, 562, 579, 588, 591], "backup": 91, "fallen": 91, "denot": 91, "tensorflow_itexadaptor": 91, "itex": [91, 149], "performance_onli": [91, 92, 93, 147, 171, 176, 184, 544], "get_grappler_optimization_cfg": 91, "grappler": [91, 119, 573], "get_bf16_pattern": 91, "patter": [91, 165], "get_eightbit_pattern": 91, "qdq_enabl": [91, 92], "eightbit": [91, 593], "generate_internal_pattern": 91, "intern": [91, 150, 187, 296, 518, 564, 565, 586], "graphconvert": 92, "qt_config": 92, "recip": [92, 155, 201, 271, 273, 275, 276, 316, 571, 595], "int8_sequ": 92, "fp32_op": [92, 94, 147, 150], "bf16_op": [92, 94, 147, 150, 590], "fake_qu": [92, 133, 147, 171, 176], "itex_mod": [92, 123, 134, 147, 171, 176], "new_api": [92, 93, 115, 116, 121, 123, 137, 144, 171, 176, 180], "use_bf16": [92, 93, 588, 590], "fp32_frozen_graph": 92, "requantizeop": [92, 93], "empti": [92, 155, 280, 322, 356], "bf16_node": [92, 93], "quantize_with_qdq_pattern": 92, "graphconverterwithoutcalib": 93, "recover_config": 93, "convert_without_calib": 93, "quantize_without_calib": 93, "rewrit": [94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], "bf16convert": [94, 590], "graphrewriterbas": [94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149], "do_transform": [94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 164, 171, 172, 176, 180, 181, 183, 184], "biasadd": [96, 103, 108, 110, 123, 149, 165, 166, 168, 175, 177, 573], "convertaddtobiasaddoptim": 96, "addv2": [96, 112, 113, 114, 165, 168, 573], "layout": 97, "convertlayoutoptim": 97, "nchw": 97, "nhwc": [97, 111, 112], "leakyrelu": [98, 163, 165, 167, 168, 173], "convertleakyreluoptim": 98, "subgraph": [98, 106, 110, 111, 112, 114, 190, 571], "mul": [98, 109, 110, 111, 113, 114, 123, 165, 168, 571], "coeffici": [98, 290, 586], "less": [98, 123, 185, 379, 563, 567, 585], "nan": 99, "convertnantorandom": 99, "const": [99, 100, 107, 108, 111, 112, 114, 126, 129, 130, 142, 143, 150, 318, 399, 410, 413, 420, 426, 428, 429, 433, 515, 523, 533], "placehold": [100, 214, 252], "convertplaceholdertoconst": 100, "renam": [100, 125, 298, 591], "placeholderwithdefault": 100, "constant": [100, 106, 123, 150, 179, 271, 273, 318, 334, 336, 356, 373, 516, 564, 573, 594], "simplifi": 100, "input_graph_def": [100, 101, 104, 105, 107, 111, 112, 114, 118, 129, 130, 150, 179], "nodes_to_convert": 100, "strtobool": 100, "val_str": 100, "equival": [100, 127, 289], "rerewrit": 101, "dequantizecastoptim": 101, "b16": 101, "redund": [101, 136, 138, 172], "dilat": 102, "contract": 102, "dilatedcontract": 102, "spacetobatchnd": 102, "batchtospacend": 102, "inject": 103, "injectdummybiasaddoptim": 103, "miss": [103, 392, 585, 589], "behind": 103, "expanddim": 104, "expanddimsoptim": 104, "whose": [104, 129, 130, 312, 341, 574, 585, 595], "featch": 105, "fetchweightfromreshapeoptim": 105, "fetch": [105, 191, 194, 209, 247, 280, 322, 565], "fold": [106, 107, 111, 112, 123, 271, 273, 336, 573], "foldbatchnormnodesoptim": 106, "scale_after_norm": 106, "batchnormwithglobalnorm": 106, "nodedef": [106, 111, 112, 114, 150, 179, 181, 512], "normal": [106, 111, 112, 114, 233, 269, 282, 324, 534, 582, 594], "convolut": [106, 111, 112, 567, 585, 587], "multipl": [106, 111, 112, 155, 202, 203, 207, 208, 216, 217, 219, 220, 221, 222, 223, 227, 230, 233, 240, 245, 246, 248, 254, 255, 257, 258, 259, 260, 261, 265, 267, 269, 285, 313, 327, 328, 329, 331, 337, 342, 348, 355, 519, 563, 565, 571, 583, 585, 592, 595], "onc": [106, 150, 185, 240, 315, 351, 562, 564, 585, 586, 587, 595, 597], "final": [106, 313, 341, 348, 526, 582, 585, 586, 589, 591, 595], "That": [106, 562], "opportun": [106, 111, 112], "down": 106, "addit": [106, 112, 114, 191, 204, 369, 519, 562, 567, 591], "rather": [106, 574], "expens": [106, 567, 595], "bake": 106, "identifi": [106, 111, 112, 114, 280, 322, 335, 375], "simpler": 106, "form": [106, 111, 112, 114, 125, 280, 282, 322, 324, 426, 428, 527, 562, 567], "spot": 106, "fusedbatchnorm": [106, 111, 125], "fusedbatchnormv3": [106, 163, 173], "_fusedbatchnormex": 106, "extend": [106, 111, 112], "newer": [106, 111, 112], "badli": [106, 111, 112, 114, 125], "duplic": [106, 111, 112, 114, 143, 148, 356], "graphfoldconstantoptim": 107, "supported_op_typ": 107, "check_all_fold": 107, "check_const_input": 107, "node_nam": [107, 111, 112, 114, 123, 150, 172, 179, 181, 185, 273, 334, 335, 414, 512], "fusebiasaddandaddoptim": 108, "columnwis": 109, "fusecolumnwisemuloptim": 109, "depthwiseconv2dn": [109, 115, 116, 165, 175, 573], "math": [110, 589], "fuseconvwithmathoptim": 110, "elimin": 110, "realdiv": [110, 113], "decompos": [111, 112], "fusedecomposedbnoptim": 111, "some": [111, 112, 155, 204, 216, 243, 254, 276, 312, 364, 534, 562, 565, 577, 579, 582, 585, 586, 589, 590, 593, 595], "normalizatin": [111, 112], "group": [111, 112, 343, 350, 451, 576, 585, 586, 593, 594, 595, 597], "instead": [111, 112, 197, 198, 215, 253, 379], "those": [111, 112, 118, 361, 379, 567, 574, 583, 585, 586, 589, 595], "recogn": [111, 112, 277, 319], "attempt": [111, 112, 375], "multipli": 111, "rsqrt": [111, 112], "varianc": [111, 180, 195], "epsilon": [111, 596], "gamma": [111, 112, 114], "OR": 111, "mul_0": 111, "mul_1": 111, "insid": [111, 280, 322, 567, 585, 595], "mul_3": 111, "batchnorma": 111, "node_name_from_input": [111, 112, 114, 150, 179, 181], "strip": [111, 112, 114, 123, 127, 128, 185, 593], "port": [111, 112, 114, 179, 547, 551, 562], "underli": [111, 112, 114, 290], "node_from_map": [111, 112, 114], "node_map": [111, 112, 114], "pull": [111, 112, 114, 527], "entri": [111, 112, 114, 172, 187, 240, 275, 317, 397, 440, 443, 526, 534, 578], "index": [111, 112, 114, 155, 162, 209, 214, 218, 222, 227, 234, 247, 252, 256, 260, 265, 276, 301, 337, 379, 551, 565, 579], "isn": [111, 112, 114, 150], "present": [111, 112, 114, 562, 587], "values_from_const": [111, 112, 114, 150], "node_def": [111, 112, 114, 150], "extract": [111, 112, 114, 150, 218, 256, 553, 565], "access": [111, 112, 114, 150, 162, 197, 198, 375, 379, 518, 534, 547, 551, 562], "valid_reshape_input": [111, 112], "reshape_in0_ndef": [111, 112], "reshape_in1_ndef": [111, 112], "bypass_reshap": [111, 112], "input_node_map": [111, 112], "get_const_dim_count": [111, 112], "dimens": [111, 112, 208, 233, 246, 269, 292, 307, 341, 356, 565, 567, 585, 594], "instancenorm": 112, "fusedecomposedinoptim": 112, "contraint": [112, 114], "clang": 112, "x____________": 112, "mean1": 112, "fusedop": [112, 114], "_mklfusedinstancenorm": 112, "_mkllayernorm": [112, 114], "squareddiff": 112, "mean0": 112, "mul1": 112, "constx": 112, "mul2": 112, "mul0": 112, "gelu": [113, 168], "fusegeluoptim": 113, "sqrt": 113, "erf": 113, "samll": 114, "layernorm": [114, 298], "fuselayernormoptim": 114, "remap": 114, "smaller": [114, 233, 269, 567, 585, 586, 594], "case": [114, 118, 215, 232, 233, 234, 253, 268, 269, 275, 276, 284, 303, 308, 316, 317, 326, 337, 524, 528, 534, 562, 564, 567, 569, 573, 574, 579, 582, 585, 587, 589, 591, 594, 596], "fusedbatcnormv3": 114, "restrict": [114, 585, 586, 592], "2d": 114, "3d": [114, 587], "fill": [114, 401, 403, 404, 406, 408, 411, 412, 417, 562, 592, 594], "f": [114, 567, 569, 589], "u": [114, 180, 195], "d": [114, 118, 289, 567, 574, 586], "c": [114, 118, 218, 256, 562, 565, 572, 577, 586, 595], "h": [114, 233, 269, 569, 594], "n": [114, 217, 233, 255, 269, 278, 311, 320, 341, 522, 565, 567, 585, 586, 594], "v": [114, 596], "fusepadwithconv2doptim": 115, "excluded_op_nam": [115, 116, 197, 201, 318, 585], "itex_qdq_mod": [115, 116], "conv3d": [115, 116, 165], "fusepadwithfp32conv2doptim": 116, "fusetransposereshapeoptim": 117, "cse": [118, 143], "graphcseoptim": 118, "child": [118, 593], "b1": 118, "c1c2": 118, "d1": [118, 379], "c1": 118, "c2": 118, "bound": [118, 233, 234, 269, 276, 280, 289, 322, 356, 579, 594], "relu6": [118, 165, 168, 573], "elim": [118, 123], "grappleroptim": 119, "input_output_nam": 119, "opt_cfg": 119, "wrapper": [119, 162, 186, 215, 227, 230, 233, 235, 236, 237, 238, 239, 253, 265, 267, 269, 280, 284, 322, 325, 326, 329, 331, 335, 551, 559, 590], "convert_add_to_biasadd": [120, 132, 151], "convert_layout": [120, 132, 151], "convert_leakyrelu": [120, 132, 151], "convert_nan_to_random": [120, 132, 151], "convert_placeholder_to_const": [120, 132, 151], "dequantize_cast_optim": [120, 132, 151], "dilated_contract": [120, 132, 151], "dummy_biasadd": [120, 132, 151], "expanddims_optim": [120, 132, 151], "fetch_weight_from_reshap": [120, 132, 151], "fold_batch_norm": [120, 132, 151], "fold_const": [120, 132, 151], "fuse_biasadd_add": [120, 132, 151], "fuse_column_wise_mul": [120, 132, 151], "fuse_conv_with_math": [120, 132, 151], "fuse_decomposed_bn": [120, 132, 151], "fuse_decomposed_in": [120, 132, 151], "fuse_gelu": [120, 132, 151], "fuse_layer_norm": [120, 132, 151], "fuse_pad_with_conv": [120, 132, 151], "fuse_pad_with_fp32_conv": [120, 132, 151], "fuse_reshape_transpos": [120, 132, 151], "graph_cse_optim": [120, 132, 151], "grappler_pass": [120, 132, 151], "insert_print_nod": [120, 132, 151], "move_squeeze_after_relu": [120, 132, 151], "pre_optim": [120, 132, 151], "remove_training_nod": [120, 132, 151, 179], "rename_batch_norm": [120, 132, 151], "split_shared_input": [120, 132, 151, 179], "strip_equivalent_nod": [120, 132, 151, 185], "strip_unused_nod": [120, 132, 151, 185], "switch_optim": [120, 132, 151], "update_ent": [120, 132, 151], "print": [121, 187, 284, 326, 336, 379, 562, 569, 579, 585, 595], "insertprintminmaxnod": 121, "pre_node_nam": 121, "post_node_nam": 121, "movesqueezeafterreluoptim": 122, "match": [122, 123, 150, 162, 232, 268, 280, 281, 322, 323, 567], "pre": [123, 156, 204, 205, 216, 254, 297, 327, 336, 353, 565, 567, 580, 585, 586, 587, 589, 593, 595], "entranc": [123, 207, 210, 227], "preoptim": 123, "get_excluded_node_nam": 123, "get_optimized_model": 123, "possibl": [123, 234, 276, 289, 354, 358, 396, 463, 562, 583, 590, 595], "useless": 123, "get_matched_nod": 123, "illustr": 123, "matched_node_a_nam": 123, "has_positive_input": [123, 150], "neg": [123, 150], "removetrainingnodesoptim": 124, "protected_nod": [124, 179], "types_to_splic": [124, 179], "checknumer": [124, 179], "stopgradi": 124, "tranin": 124, "edg": [124, 448, 450, 455, 515, 594], "fusedbatchnormv2": 125, "renamebatchnormoptim": 125, "due": [125, 585, 586, 589, 593], "histor": 125, "latter": [125, 155], "former": 125, "platform": [125, 379, 522, 576, 587, 589, 597], "vnni_bf16": 125, "amx": 125, "instruct": [125, 562, 567, 577, 580, 587, 588, 589], "splitsharedinputoptim": 126, "stripequivalentnodesoptim": 127, "output_node_nam": [127, 128, 171, 172, 176, 179, 185, 335], "unus": [128, 185, 289, 298, 334], "stripunusednodesoptim": 128, "input_node_nam": [128, 171, 176, 179, 185, 335], "switchoptim": 129, "condit": [129, 216, 217, 218, 233, 254, 255, 256, 269, 565, 578, 594, 595], "enter": [129, 130], "updateenteroptim": 130, "workaround": 130, "freeze_fake_qu": [132, 140, 151], "freeze_valu": [132, 140, 151], "freeze_value_without_calib": [132, 140, 151], "fuse_conv_redundant_dequant": [132, 140, 151], "fuse_conv_requant": [132, 140, 151], "fuse_matmul_redundant_dequant": [132, 140, 151], "fuse_matmul_requant": [132, 140, 151], "meta_op_optim": [132, 140, 151], "post_hostconst_convert": [132, 140, 151], "post_quantized_op_cs": [132, 140, 151], "rnn_convert": [132, 140, 151], "scale_propag": [132, 140, 151], "insert_qdq_pattern": [132, 146, 151], "merge_duplicated_qdq": [132, 146, 151], "share_qdq_y_pattern": [132, 146, 151], "freez": [133, 134, 135, 585, 586], "fakequ": 133, "freezefakequantopoptim": 133, "freezevaluetransform": 134, "max_min_data": [134, 135], "postfix": [134, 135], "tensor_data": [134, 379], "th": [134, 135], "gpu": [134, 135, 142, 150, 179, 563, 576, 588, 589], "generate_output_graph": [134, 135], "max_name_valu": [134, 135], "freeze_max": [134, 135], "freeze_min": [134, 135], "generate_output_graph_rang": [134, 135], "freezevaluewithoutcalibtransform": 135, "95": [135, 280, 284, 322, 326, 579, 597], "do_transformation_without_calib": 135, "quantizedconv": [136, 137], "quantizeddeconv": 136, "fuseconvredundantdequantizetransform": 136, "cpu": [136, 137, 138, 139, 150, 179, 201, 292, 318, 379, 563, 576, 580, 584, 587, 588, 590, 593], "_quantizedconv": 136, "_quantizeddeconv": 136, "successor": [136, 137, 138, 139], "requant": [137, 139, 593], "fuseconvrequantizetransform": 137, "fuse_pattern": 137, "sum_pattern": 137, "quantizedmatmul": [138, 139], "fusematmulredundantdequantizetransform": 138, "_quantizedmatmul": [138, 139], "fusematmulrequantizedequantizetransform": 139, "quantizedmatmulwithbiasanddequant": 139, "fusematmulrequantizetransform": 139, "fusematmulrequantizedequantizenewapitransform": 139, "fusematmulrequantizenewapitransform": 139, "meta": [141, 218, 256], "metainfochangingmemopoptim": 141, "metaop": 141, "quantizev2": [141, 143, 165, 166, 168, 172], "hostconst": 142, "posthostconstconvert": 142, "postcseoptim": 143, "decreas": 143, "rnn": [144, 150], "quantizedrnnconvert": 144, "calibration_data": [144, 147], "rnn_detail": 144, "scalepropagationtransform": 145, "direct": [145, 311, 341, 484], "algrothim": 145, "generategraphwithqdqpattern": 147, "op_wise_config": [147, 171, 176], "quantized_nod": 147, "quantizaiton": 147, "mergeduplicatedqdqoptim": 148, "y": [149, 233, 269, 356, 594], "shareqdqforitexypatternoptim": 149, "break": [149, 569], "graphanalyz": 150, "extend_engin": 150, "analyz": [150, 179, 335, 585, 586, 592, 593], "singleton": [150, 318, 379, 515, 523], "getter": [150, 243, 270, 276, 300, 303, 308, 316, 317, 336, 464], "_graph": 150, "retrun": 150, "get_graph_input_output": 150, "know": [150, 236, 237, 270, 276, 303, 308, 520, 569, 591], "clearli": 150, "similar": [150, 298, 588, 595, 596], "summarize_graph": 150, "writtern": 150, "googl": [150, 580, 587], "query_fusion_pattern_nod": 150, "aggreg": [150, 528], "_search_pattern": 150, "remove_node_with_single_input_output": 150, "rebuild": 150, "structur": [150, 313, 348, 368, 459, 576, 585, 586, 589, 593, 597], "except": [150, 318, 379, 515, 523, 524, 534, 549, 559], "remove_nod": [150, 334], "replace_const_nod": 150, "new_const_nod": 150, "target_nod": 150, "old_constant_node_nam": 150, "replace_al": 150, "outdat": 150, "replace_constant_graph_with_constant_nod": 150, "new_nod": 150, "old_end_node_nam": 150, "replace_single_nod": 150, "old_output_node_nam": 150, "old_output_nam": [150, 334], "old_input_node_nam": 150, "old_input_nam": [150, 334], "top": [150, 233, 269, 275, 276, 284, 303, 308, 316, 326, 579, 594, 597], "bottom": [150, 562], "replace_nod": 150, "old_node_nam": 150, "output_nodes_nam": 150, "node_name_detail": 150, "parent": [150, 307, 313, 315, 334, 348, 351, 593], "add_nod": [150, 334, 448], "start_node_nam": 150, "end_node_nam": 150, "dump_graph": 150, "get_frame_info": 150, "frame": 150, "ordereddict": [150, 364, 421, 426, 535], "parent_frame_detail": 150, "parse_graph": 150, "outputnod": 150, "graphrewriterhelp": 150, "encapsul": [150, 204, 205, 327, 353, 581], "compare_node_attr": 150, "node_a": 150, "node_b": 150, "compar": [150, 187, 284, 326, 337, 562, 568, 579, 586, 589, 592, 593, 595], "create_nod": [150, 179], "create_constant_nod": [150, 179], "datatyp": [150, 179, 590, 595], "set_attr_dtyp": [150, 179], "set_attr_tensor": [150, 179], "set_attr_type_list": [150, 179], "attr": [150, 179, 185], "set_attr_string_list": [150, 179], "set_attr_str": [150, 179], "set_attr_int_list": 150, "set_attr_int": [150, 179], "set_attr_float": [150, 179], "set_attr_bool": [150, 179], "generate_int32_bias_for_conv": 150, "bias_tensor": 150, "channel_s": 150, "max_input": 150, "min_input": 150, "max_filter_tensor": [150, 379], "min_filter_tensor": [150, 379], "activation_rang": 150, "weights_rang": 150, "127": [150, 219, 220, 257, 258, 565, 589, 597], "int32_bia": 150, "generate_int32_bias_for_matmul": 150, "weights_tensor": 150, "input_rang": 150, "max_filter_valu": 150, "min_filter_valu": 150, "gen_valid_sampling_log": 150, "log_path": 150, "analysis_rnn_model": 150, "quantize_lay": [151, 152, 154], "fake_quant": [151, 152, 154], "quantize_config": [151, 152, 154], "quantize_help": [151, 152, 154], "quantize_wrapp": [151, 152, 154], "fuse_qdq_bn": [151, 152, 170], "fuse_qdq_concatv2": [151, 152, 170], "fuse_qdq_conv": [151, 152, 170], "fuse_qdq_deconv": [151, 152, 170], "fuse_qdq_in": [151, 152, 170], "fuse_qdq_matmul": [151, 152, 170], "fuse_qdq_pool": [151, 152, 170], "optimize_qdq": [151, 152, 170], "optimize_lay": [152, 154, 157], "quantize_layer_add": [152, 154, 157], "quantize_layer_bas": [152, 154, 157, 159, 161], "quantize_layer_bn": [152, 154, 157], "fakequantizebas": 153, "get_config": [153, 162, 560], "serial": [153, 216, 254, 432, 439, 440, 470, 522, 524, 536, 537, 541, 542], "fakequant": 153, "classmethod": [153, 162, 192, 194, 304, 305, 306, 365, 368, 375, 521, 555, 557, 560], "from_config": [153, 162], "instanti": [153, 375, 583], "per_channel": [153, 179, 573, 596], "num_bit": 153, "symmetr": [153, 589, 594, 595], "narrow_rang": 153, "quantizeconfig": [155, 156, 162], "There": [155, 284, 317, 326, 562, 567, 573, 576, 579, 580, 595, 596], "add_quantize_recip": 155, "layer_nam": [155, 311, 341], "conv5_block3_3_conv": 155, "flase": 155, "conv5_block3_3_add": 155, "query_lay": 155, "layer_recip": 155, "remove_lay": 155, "get_quantize_recip": 155, "is_empti": 155, "clear_quantize_recip": 155, "init_quantize_config": 156, "begin": [156, 243, 276, 303, 308, 313, 314, 338, 342, 346, 347, 348, 349, 369, 567, 585, 595], "model_nam": [156, 292, 409, 415, 534], "qat_clone_funct": 156, "leav": 156, "quantizewrapp": [156, 162], "wrapped_lay": 156, "config_quantizable_lay": 158, "quantizelayeradd": 159, "quantizelayerbas": [159, 160, 161], "quantizelay": 160, "quantizelayerbatchnorm": 161, "quantizewrapperbas": 162, "trainabl": 162, "sublay": 162, "trainable_weight": 162, "track": [162, 364, 592], "descent": 162, "non_trainable_weight": 162, "manual": [162, 218, 256, 565], "add_loss": 162, "regular": [162, 277, 312, 319, 350, 585], "eager": [162, 314, 349, 381, 489, 493, 501, 569, 576, 589, 590, 593, 597], "gradienttap": 162, "input_shap": [162, 220, 258, 333, 463, 466, 475, 564, 565], "tensorshap": 162, "compute_output_shap": 162, "caus": [162, 585, 586], "state": [162, 187, 283, 284, 296, 298, 325, 326, 336, 365, 368, 585, 586], "happen": 162, "later": [162, 593], "output_shap": 162, "query_input_index": 162, "logic": [162, 204, 205, 364, 546, 596], "live": 162, "output_obj": 162, "fusenodestartwithfusedbatchnormv3": [163, 173], "quantizenodebas": [163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 177, 178], "_quantizedfusedbatchnorm": 163, "apply_newly_bn_relu_fus": [163, 173], "match_node_nam": [163, 165, 166, 167, 168, 173, 175, 177], "apply_newly_bn_leakyrelu_fus": [163, 173], "get_longest_fus": [163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 177, 178], "longest": [163, 164, 165, 166, 167, 168, 169, 173, 175, 177, 232, 233, 268, 269, 594], "apply_the_transform": [163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 177, 178], "concatv2": [164, 174, 184, 573], "fusenodestartwithconcatv2": [164, 174], "quantizedconcatv2": [164, 174], "fusenodestartwithconv2d": [165, 175], "apply_conv3d_add_addn_relu_fus": 165, "addn": [165, 175, 573], "apply_conv3d_add_addn_fus": 165, "apply_conv3d_add_relu_fus": 165, "apply_conv3d_add_fus": 165, "apply_conv3d_single_fus": 165, "apply_newly_conv_biasadd_relu_fus": 165, "elu": [165, 168], "sigmoid": [165, 168], "apply_newly_conv_biasadd_fus": 165, "apply_newly_conv_single_fus": 165, "apply_newly_conv_biasadd_addn_relu_fus": 165, "apply_conv_biasadd_hardswish_fus": 165, "hardswish": 165, "apply_newly_conv_biasadd_swishf32_fus": 165, "swishf32": 165, "swish_f32": 165, "apply_newly_conv_biasadd_addn_fus": 165, "conv2dbackpropinput": 166, "conv3dbackpropinputv2": 166, "fusenodestartwithdeconv2d": 166, "apply_single_deconv2d_fus": 166, "apply_deconv2d_biasadd_fus": 166, "apply_single_deconv3d_fus": 166, "apply_deconv3d_biasadd_fus": 166, "fusedinstancenorm": 167, "fusenodestartwithfusedinstancenorm": 167, "apply_newly_in_relu_fus": 167, "batchmatmul": 168, "batchmatmulv2": 168, "fusenodestartwithmatmul": [168, 177], "apply_matmul_biasadd_relu_fus": [168, 177], "tanh": 168, "apply_matmul_biasadd_fus": [168, 177], "apply_batchmatmulv2_fus": 168, "apply_batchmatmulv2_mul_add_fus": 168, "avgpool": [169, 178, 573], "fusenodestartwithpool": [169, 178], "optimizeqdqgraph": 171, "op_wise_sequ": [171, 176], "quantizegraphbas": [171, 172, 176], "get_quantized_nod": 171, "quantizegraph": 172, "register_transform": 172, "virtual": [172, 181, 587], "deriv": [172, 243, 270, 276, 311, 313, 315, 338, 341, 348, 350, 351], "remove_dead_nod": 172, "output_nam": [172, 201, 271, 273, 336, 571], "longer": [172, 216, 233, 254, 269, 565, 594], "eightbitize_single_input_tensor_nod": 172, "original_nod": 172, "add_op_funct": 172, "add_output_graph_nod": 172, "output_nod": [172, 409], "remove_redundant_quant": 172, "old_graph": 172, "create_nodes_map": 172, "apply_conv_single_fus": 175, "apply_conv_biasadd_relu_fus": 175, "apply_conv_biasadd_fus": 175, "apply_conv_biasadd_addn_relu_fus": 175, "quantizegraphforintel": 176, "itself": [178, 328, 329, 330, 332, 334, 335], "herlper": 179, "quantizegraphhelp": 179, "staticmethod": 179, "get_sorted_graph": 179, "reorder": [179, 296, 298], "pars": [179, 181, 191, 216, 217, 229, 233, 254, 255, 266, 269, 298, 342, 381, 392, 397, 420, 421, 423, 426, 427, 428, 429, 432, 485, 489, 493, 498, 501, 507, 526, 534, 542, 553, 594], "easier": [179, 562, 587], "in_graph": [179, 185], "ouput": 179, "aren": 179, "uncondition": 179, "copy_attr": 179, "attr_valu": 179, "copi": [179, 312, 379], "unique_node_name_from_input": 179, "ensure_tensor_name_has_port": 179, "sure": [179, 311, 313, 315, 341, 348, 351, 463, 562, 563], "generate_quantized_weight_nod": 179, "host_op_typ": 179, "input_nod": [179, 409], "weight_bit": 179, "enter_nod": 179, "biascorrect": 180, "fp32_graph": 180, "weight_empir": 180, "graphtransformbas": [180, 181, 183, 184], "Will": [180, 207, 210, 227, 547, 567, 576], "task": [180, 216, 223, 254, 261, 284, 298, 326, 565, 567, 576, 579, 585, 586], "close": [180, 195], "w_int8": [180, 195], "w_fp32": [180, 195], "ratio": [180, 195, 229, 233, 266, 269, 276, 303, 308, 311, 313, 314, 315, 341, 345, 348, 349, 351, 565, 585, 586, 594, 597], "equal": [180, 185, 195, 379, 579, 586], "round": [180, 195, 589], "scale_c": [180, 195], "shift": [180, 195, 229, 266, 594], "notic": [180, 195, 234, 276, 578, 591], "empir": [180, 195], "graphtransform": 181, "input_pb": [181, 183, 184], "parse_input_pb": 181, "pbdef": 181, "generate_input_map": 181, "get_node_name_from_input": 181, "insertlog": 183, "node_name_list": 183, "show_nam": 183, "show_op": 183, "first_n": 183, "summar": [183, 567], "1024": [183, 218, 256], "messag": [183, 534, 546, 551, 595], "dump_fp32": 183, "rerang": 184, "rerangequantizedconcat": 184, "rerange_quant": 184, "version1_lt_version2": [185, 379], "version1": [185, 379], "version2": [185, 379], "version1_gt_version2": [185, 379], "greater": [185, 379], "version1_eq_version2": [185, 379], "version1_gte_version2": [185, 379], "version1_lte_version2": [185, 379], "disable_random": 185, "seed": [185, 201, 289, 291, 302, 318, 379, 544, 596], "read_graph": 185, "in_graph_is_binari": 185, "read": [185, 218, 221, 233, 256, 259, 269, 276, 303, 308, 312, 314, 349, 449, 453, 454, 565, 590, 592], "write_graph": 185, "out_graph_def": 185, "out_graph_fil": 185, "write": [185, 225, 226, 227, 263, 264, 265, 280, 322, 379, 569, 574, 593], "is_ckpt_format": 185, "model_path": [185, 334, 449, 464, 469, 534], "is_saved_model_format": 185, "saved_model": [185, 276, 286, 335, 455, 462, 472], "get_estimator_graph": 185, "estim": [185, 187, 284, 287, 288, 292, 299, 300, 326, 335, 595], "input_fn": [185, 335], "get_tensor_by_nam": 185, "try_cnt": 185, "scope": [185, 243, 276, 333, 585], "suffix": 185, "time": [185, 233, 269, 284, 296, 326, 337, 356, 379, 520, 526, 527, 532, 547, 569, 572, 582, 585, 586, 587, 589, 592, 593, 594, 595], "got": [185, 572, 593], "iterator_sess_run": 185, "sess": [185, 335], "iter_op": [185, 335], "feed_dict": [185, 215, 253], "output_tensor": [185, 335], "makeiter": 185, "pred": [185, 283, 284, 325, 326, 579], "collate_tf_pr": 185, "collat": [185, 191], "tbe": 185, "get_input_output_node_nam": 185, "fix_ref_type_of_graph_def": 185, "ref": 185, "strip_unused_lib": 185, "r1": 185, "15": [185, 291, 573, 597], "branch": [185, 375], "get_graph_def": 185, "auto_input_output": 185, "get_model_input_shap": 185, "inout": 185, "get_tensor_val_from_graph_nod": 185, "tensor_v": 185, "int8_node_name_revers": 185, "revers": [185, 562], "tf_diagnosis_help": 185, "generate_feed_dict": 185, "input_tensor": [185, 335, 336], "bf16modulewrapp": 186, "bf16modul": 186, "mixed_precision_model": 186, "bf16_symbolic_trac": 186, "fx_sub_module_list": 186, "_description_": 186, "node_collector": 187, "record": [187, 191, 216, 217, 218, 224, 235, 242, 254, 255, 256, 262, 337, 565, 592, 593, 595], "hook_fn_act": 187, "inp": 187, "outp": 187, "hessiantrac": 187, "yao": 187, "zhewei": 187, "et": [187, 298], "al": [187, 298], "pyhessian": 187, "through": [187, 196, 204, 205, 232, 268, 318, 327, 353, 357, 563, 573, 574, 576, 577, 579, 582, 583, 585, 588], "len": [187, 233, 269, 356, 565, 569, 594], "2020": 187, "ieee": [187, 580], "confer": [187, 586], "big": 187, "dong": 187, "zhen": 187, "system": [187, 234, 375, 379, 522, 549, 550, 563, 585], "33": [187, 289, 597], "18518": 187, "18529": 187, "openvinotoolkit": 187, "nncf": 187, "blob": [187, 277, 278, 281, 282, 311, 319, 320, 323, 324, 341], "mse_metric_gap": [187, 434], "fp32_tensor": [187, 434], "euclidean": [187, 434, 567], "distanc": [187, 434, 567], "get_fused_map": 187, "weight_to_op": 187, "get_devic": 187, "register_act_grad_hook": 187, "reset_act_gradient_and_hook": 187, "get_param": [187, 233, 269], "get_vthv_weight": 187, "num_sampl": [187, 284, 326], "vthv": 187, "get_weight_trac": 187, "op_name_to_trac": 187, "get_act_trac": 187, "res_dict": 187, "get_act_gap": 187, "gap": [187, 571, 581], "get_avg_trac": 187, "32": [187, 280, 322, 569, 574, 584, 585, 597], "averag": [187, 280, 281, 282, 284, 322, 323, 324, 326, 579, 595], "compare_weight": 187, "float_dict": 187, "quantized_dict": 187, "being": [187, 280, 292, 317, 322, 336, 451], "usag": [187, 215, 253, 276, 280, 286, 317, 322, 337, 534, 562, 565, 569, 570, 579, 582, 588, 594], "wt_compare_dict": 187, "float_model": 187, "state_dict": [187, 298, 569, 593], "compute_error": 187, "weight_dict": 187, "hawq_top": 187, "dataread": [189, 274], "sample_s": 189, "100": [189, 201, 218, 256, 280, 289, 318, 322, 563, 565, 569, 574, 588, 589, 594, 595, 596, 597], "ortq": [189, 274], "get_next": [189, 274], "trace_and_fuse_sub_graph": 190, "traced_model": 190, "get_embedding_contigu": 191, "embed": [191, 298], "contigu": [191, 585], "collate_torch_pr": 191, "collate_result": 191, "input2tupl": 191, "append_attr": 191, "fx_model": 191, "generate_activation_observ": 191, "observ": [191, 592, 593, 595], "check_cfg_and_qconfig": 191, "op_infos_from_cfg": 191, "output_tensor_ids_op_nam": 191, "paser_cfg": 191, "ops_nam": 191, "get_quantizable_ops_from_cfg": 191, "input_tensor_ids_op_nam": 191, "auto_copi": 191, "fetch_modul": 191, "set_modul": 191, "new_modul": 191, "simple_infer": 191, "get_example_input": 191, "example_inp": 191, "get_fallback_ord": 191, "fall": 191, "confid": 191, "ordered_op": 191, "get_mse_order_per_fp32": 191, "influenc": 191, "fallback_ord": 191, "get_mse_order_per_int8": 191, "get_torch_vers": 191, "algorithm_registri": [192, 194], "algorithm_typ": [192, 194], "registr": [192, 194, 218, 222, 225, 226, 227, 230, 233, 240, 256, 260, 263, 264, 265, 267, 269, 306], "support_algorithm": [192, 194], "algorithmschedul": [192, 194], "origin_model": [192, 194], "calib_it": [192, 194], "fastbiascorrect": [193, 195], "fast_bias_correct": [194, 318], "weight_correct": [194, 318], "weightcorrect": 195, "ep": 195, "1e": [195, 596], "05": [195, 280, 284, 322, 326, 527, 579, 597], "conf_fname_or_obj": [196, 234, 243, 270, 275, 276, 285, 286, 287, 288, 299, 300, 303, 308, 316, 317, 318], "benchmark_conf": [196, 197, 318], "prefer": [196, 275, 276, 316, 318, 327, 353], "collate_fn": [196, 206, 208, 209, 211, 212, 213, 215, 236, 237, 244, 246, 247, 249, 250, 251, 253, 318, 565], "last_batch": [196, 206, 208, 211, 212, 213, 215, 236, 237, 244, 246, 249, 250, 251, 253, 318], "rollov": [196, 206, 208, 211, 212, 213, 215, 236, 237, 244, 246, 249, 250, 251, 253, 318], "sampler": [196, 206, 208, 210, 211, 212, 213, 215, 236, 237, 244, 246, 248, 249, 250, 251, 253, 265, 276, 318, 366, 569], "batch_sampl": [196, 206, 208, 211, 212, 213, 215, 236, 237, 244, 246, 249, 250, 251, 253, 318], "num_work": [196, 206, 208, 211, 212, 213, 215, 236, 237, 244, 246, 249, 250, 251, 253, 292, 318, 589], "pin_memori": [196, 206, 208, 211, 212, 213, 215, 236, 237, 244, 246, 249, 250, 251, 253, 318], "shuffl": [196, 206, 208, 211, 212, 213, 215, 236, 237, 244, 246, 249, 250, 251, 253, 318, 589], "metric_cl": [196, 237, 238, 283, 284, 318, 325, 326], "mani": [196, 291, 292, 318, 337, 354, 577, 595, 596], "alwai": [196, 237, 238, 280, 318, 322, 325, 326, 579], "user_metr": [196, 237, 238, 318, 325, 326], "sub_class": [196, 318], "basemetr": [196, 283, 284, 318, 325, 326], "postprocess_cl": [196, 227, 230, 231, 237, 241, 318], "b_dataload": [196, 234, 276, 563], "b_func": [196, 234, 276, 563], "benchmarkconfig": [196, 201, 563], "prunerv2": 197, "target_spars": [197, 201, 318, 341, 585, 588, 596], "pruning_typ": [197, 201, 318, 585], "start_step": [197, 201, 313, 318, 348, 585, 588], "end_step": [197, 201, 313, 318, 348, 585, 588], "pruning_scop": [197, 201, 318, 585], "pruning_frequ": [197, 201, 318, 348, 585], "min_sparsity_ratio_per_op": [197, 201, 318, 341, 585], "max_sparsity_ratio_per_op": [197, 201, 318, 341, 348, 585], "sparsity_decay_typ": [197, 201, 318, 585], "pruning_op_typ": [197, 201, 318, 585], "reg_typ": 197, "criterion_reduce_typ": 197, "resume_from_pruned_checkpoint": 197, "similiar": [197, 201, 318], "cfg_fname": 197, "parser": [197, 318, 392, 397, 515, 519, 523, 553], "quantization_conf": 197, "dotdict": 197, "pruning_conf": 197, "graph_optimization_conf": [197, 275, 276], "mixedprecision_conf": 197, "distillation_conf": [197, 270, 276], "search_spac": [197, 287, 299, 300, 301, 302], "defaultconf": 197, "notat": [197, 198], "deep_get": 198, "dot": [198, 534, 580, 589], "nest": 198, "eg": [198, 218, 222, 227, 256, 260, 265, 565, 588], "john": 198, "deep_set": 198, "male": 198, "check_valu": 201, "src": 201, "supported_typ": 201, "supported_valu": 201, "random_se": [201, 356, 369, 418, 544, 596], "1978": 201, "workspac": [201, 318, 335, 336, 369, 378, 379, 420, 421, 426, 428, 429, 430, 460, 533, 535, 544, 581], "default_workspac": 201, "resume_from": [201, 379], "warmup": [201, 535, 563, 588], "cores_per_inst": [201, 399, 535, 563, 588], "num_of_inst": [201, 535, 563, 588], "inter_num_of_thread": [201, 588], "intra_num_of_thread": [201, 588], "accuracycriterion": [201, 502, 595], "higher_is_bett": [201, 579, 595, 596], "rel": [201, 588, 595, 596, 597], "tolerable_loss": [201, 595], "01": [201, 584, 588, 595, 596, 597], "absolut": [201, 284, 290, 326, 338, 342, 345, 527, 579, 584, 585, 586, 589, 595], "tuningcriterion": [201, 582, 592, 595], "strategy_kwarg": [201, 592, 595], "timeout": [201, 205, 364, 544, 588, 595, 596], "max_trial": [201, 544, 595], "quant_format": [201, 271, 273, 318, 336, 571], "calibration_sampling_s": [201, 318], "op_type_list": [201, 318, 588, 595], "op_name_list": [201, 318, 595], "excluded_precis": [201, 318], "quant_level": [201, 318, 595], "tuning_criterion": [201, 318, 582, 592, 595], "accuracy_criterion": [201, 318, 337, 582, 588, 595, 596], "_basequantizationconfig": [201, 318], "weightpruningconfig": [201, 318, 583, 585], "pruning_config": [201, 318, 585], "snip_momentum": [201, 318, 338, 585], "4x1": [201, 307, 318, 341, 585, 597], "98": [201, 318, 585, 588, 597], "exp": [201, 318, 585, 586], "weight_compress": [201, 318, 588, 596], "knowledgedistillationlossconfig": [201, 583], "temperatur": [201, 235, 596], "loss_typ": [201, 235, 596], "ce": [201, 235, 596], "loss_weight": [201, 235, 596], "intermediatelayersknowledgedistillationlossconfig": 201, "layer_map": [201, 235], "add_origin_loss": [201, 235], "selfknowledgedistillationlossconfig": [201, 567], "distillationconfig": [201, 318, 567, 583], "teacher_model": [201, 235, 270, 276, 318, 567], "sgd": [201, 240, 318, 567, 588, 596], "learning_r": [201, 318, 588, 596], "0001": [201, 318, 567, 588], "callabl": [201, 282, 318, 324, 369, 530, 534, 550, 551], "altern": [201, 318], "mixedprecisionconfig": [201, 580], "exportconfig": 201, "opset_vers": [201, 271, 273, 336, 571], "dynamic_ax": [201, 271, 273, 336, 571], "export": [201, 276, 280, 318, 322, 328, 329, 334, 336, 369, 534, 593], "onnxqlinear2qdqconfig": 201, "onnxqlinear2qdq": 201, "torch2onnxconfig": [201, 571], "qdq_op_fp32_bia": [201, 271, 273, 571], "torch2onnx": [201, 271, 276, 318], "tf2onnxconfig": 201, "tf2onnx": 201, "sigopt": [202, 203, 318, 587], "tpe": [202, 203, 318], "sigopttunestrategi": 204, "q_dataload": [204, 205, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 574, 595], "q_hook": [204, 205, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364], "tunestrategi": [204, 205, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 595], "hpo": 204, "mandatori": [204, 205, 353, 596], "yield": [204, 205, 214, 236, 237, 252, 327, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 564, 589, 595], "taken": [204, 205, 327, 353], "reserv": [204, 205, 243, 276, 317, 342], "tuner": [204, 205, 275, 276, 316, 327, 353], "scalar": [204, 205, 327, 353, 579, 589], "pseudo": [204, 205, 353, 593], "params_to_tune_config": 204, "next_tune_cfg": [204, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 595], "travers": [204, 205, 354, 357, 358, 364], "concret": [204, 364, 595], "get_acc_target": 204, "base_acc": 204, "ceiterion": 204, "overrid": [204, 243, 276, 316, 364, 375, 379, 524], "constraint": [204, 275, 276, 316, 592, 595, 596], "create_exp": 204, "acc_target": 204, "fefin": 205, "tpetunestrategi": 205, "add_loss_to_tuned_history_and_find_best": 205, "tuning_history_list": 205, "histori": [205, 356, 364, 378, 379, 419, 426, 428, 432, 485, 503, 553, 595], "object_evalu": 205, "alredi": 205, "calculate_loss": 205, "acc_diff": 205, "lat_diff": 205, "stop": [205, 334, 357, 364, 503, 527, 595, 596], "trials_count": [205, 357, 364], "either": [205, 280, 322, 364, 580, 583, 588, 589], "basedatalod": [206, 244], "basedataload": [206, 208, 211, 212, 213, 215, 244, 246, 249, 250, 251, 253], "_generate_dataload": [206, 244], "drop": [206, 244, 280, 312, 322, 580, 585, 586, 597], "incomplet": [206, 244, 375], "discard": [206, 244], "dispatch": [207, 210, 227, 576], "default_col": [208, 246], "outer": [208, 246], "defaultdataload": [208, 212, 215, 246, 250, 253], "base_dataload": [208, 210, 211, 212, 213, 215, 246, 248, 249, 250, 251, 253, 265, 276], "drop_last": [209, 214, 247, 252], "iterablefetch": [209, 247], "indexfetch": [209, 247], "default_dataload": [210, 212, 215, 248, 250, 253, 265, 276], "fetcher": [210, 248, 265, 276], "mxnet_dataload": [210, 248, 265, 276], "onnxrt_dataload": [210, 248, 265, 276], "pytorch_dataload": [210, 248, 265, 276], "tensorflow_dataload": [210, 248, 265, 276, 512], "mxnetdataload": [211, 249], "onnxrtbertdataload": [212, 250], "bert": [212, 215, 216, 233, 250, 253, 254, 269, 565, 567, 579, 594, 597], "varient": [212, 250], "onnxrtdataload": [212, 250], "pytorchdataload": [213, 251], "data_sourc": [214, 252, 372], "__iter__": [214, 218, 222, 227, 252, 256, 260, 265, 564, 565], "matter": [214, 252, 590], "iterablesampl": [214, 252], "squential": [214, 252], "iterabledataset": [214, 217, 218, 220, 221, 222, 227, 252, 255, 256, 258, 259, 260, 265], "indexdataset": [214, 252], "__getitem__": [214, 218, 222, 227, 230, 233, 252, 256, 260, 265, 267, 269, 565], "__len__": [214, 218, 222, 227, 252, 256, 260, 265, 565], "inter": [214, 218, 222, 227, 252, 256, 260, 265], "retriev": [214, 252, 528], "sequentialsampl": [214, 252], "batchsampl": [214, 252], "tfdatadataload": [215, 253], "tensorflow1": [215, 253], "coupl": [215, 253], "satisfi": [215, 253, 577], "tf1": [215, 253, 581], "although": [215, 253, 592], "tensorflowbertdataload": [215, 253], "tensorflowmodelzoobertdataload": [215, 253], "zoo": [215, 233, 253, 269, 597], "tensorflowdataload": [215, 253, 512], "directli": [215, 253, 280, 284, 312, 322, 326, 571, 579, 588, 589, 593], "pytorchbertdataset": [216, 254], "model_typ": [216, 254, 335, 434, 464, 565], "tensordataset": [216, 254, 565], "repo": [216, 254, 565, 570], "link": [216, 254, 562, 565], "huggingfac": [216, 254, 375, 565], "easi": [216, 254, 276, 316, 562, 564, 571, 587, 589, 592], "classifi": [216, 254, 284, 326, 357, 565, 567, 585], "squad": [216, 233, 254, 269, 281, 282, 284, 323, 324, 326, 565, 579, 594, 597], "distilbert": [216, 254, 565, 587, 597], "xlnet": [216, 254, 565], "xlm": [216, 254, 565, 597], "101": [216, 254, 284, 326, 579, 597], "2043": [216, 254], "2001": [216, 254], "onnxrtbertdataset": [216, 254], "data_dir": [216, 254, 565], "model_name_or_path": [216, 254, 375, 565], "max_seq_length": [216, 233, 254, 269, 565, 594], "128": [216, 219, 220, 233, 254, 257, 258, 269, 565, 589, 594, 597], "do_lower_cas": [216, 232, 233, 254, 268, 269, 565, 594], "mrpc": [216, 254, 284, 326, 565, 579, 597], "dynamic_length": [216, 254, 565], "shortcut": [216, 254, 565], "truncat": [216, 233, 254, 269, 565, 594], "shorter": [216, 233, 254, 269, 565, 594], "lowercas": [216, 254, 565], "fine": [216, 254, 348, 565, 587, 589], "qqp": [216, 254, 565, 579, 597], "qnli": [216, 254, 565, 579, 597], "rte": [216, 254, 565, 579, 597], "st": [216, 254, 565, 579], "cola": [216, 254, 565, 579, 597], "mnli": [216, 254, 565, 579, 597], "wnli": [216, 254, 565, 579, 597], "mobilebert": [216, 254, 565, 567, 597], "roberta": [216, 254, 565, 597], "uncas": [216, 233, 254, 269, 565, 594, 597], "load_and_cache_exampl": [216, 254], "convert_examples_to_featur": [216, 233, 254, 269], "max_length": [216, 254], "label_list": [216, 254, 284, 326], "output_mod": [216, 254], "pad_token": [216, 254], "pad_token_segment_id": [216, 254], "mask_padding_with_zero": [216, 254], "inputfeatur": [216, 233, 254, 269], "input_id": [216, 233, 254, 269], "vocabulari": [216, 232, 233, 254, 268, 269, 298, 594], "attention_mask": [216, 254], "NOT": [216, 254, 573, 577], "token_type_id": [216, 254], "segment": [216, 254, 278, 280, 320, 322], "portion": [216, 254], "problem": [216, 254, 284, 291, 326, 579, 580], "regress": [216, 254], "seq_length": [216, 254], "to_json_str": [216, 254], "json": [216, 217, 233, 254, 255, 269, 389, 507, 509, 517, 524, 534, 565, 581, 594], "tensorflowbertdataset": [216, 254], "root": [216, 217, 218, 221, 254, 255, 256, 259, 284, 290, 326, 328, 329, 330, 332, 334, 335, 336, 369, 551, 564, 565, 569, 579, 596], "label_fil": [216, 233, 254, 269, 565, 594], "tfrecord": [216, 217, 218, 222, 227, 254, 255, 256, 260, 265, 565], "parsedecodebert": [216, 254], "tensorflowmodelzoobertdataset": [216, 217, 254, 255], "num_cor": [216, 217, 221, 254, 255, 259, 565], "28": [216, 217, 221, 254, 255, 259, 565, 597], "coco": [217, 224, 228, 255, 262, 280, 284, 322, 326, 579], "parsedecodecoco": [217, 255], "cocorecorddataset": [217, 255], "directori": [217, 218, 255, 256, 335, 375, 378, 379, 443, 496, 517, 534, 547, 565, 569, 572, 593], "interleav": [217, 255, 565], "parallel": [217, 255, 565], "cocoraw": [217, 255, 564, 565], "img_dir": [217, 255, 565], "val2017": [217, 255, 565], "anno_dir": [217, 255, 565], "annot": [217, 255, 280, 322, 565, 579], "instances_val2017": [217, 255, 565], "arrang": [217, 218, 221, 255, 256, 259, 348, 565, 585], "jpg": [217, 221, 223, 255, 259, 261, 565], "imag": [217, 218, 221, 223, 229, 233, 255, 256, 259, 261, 266, 269, 280, 292, 322, 532, 562, 565, 569, 588, 593, 594, 597], "coconpi": [217, 255, 565], "npy_dir": [217, 255, 565], "npy": [217, 255, 565], "tensorflowdataset": [218, 256], "pytorchdataset": [218, 256], "mxnetdataset": [218, 256], "onnxrtqldataset": [218, 256], "onnxrtitdataset": [218, 256], "IT": [218, 225, 256, 263], "pytorchmxnetwrapdataset": [218, 256], "datafunc": [218, 256], "pytorchmxnetwrapfunct": [218, 233, 256, 269], "framework_dataset": [218, 256], "convent": [218, 256, 280, 322, 567], "imageclassifi": [218, 256], "choos": [218, 256, 363, 562, 576, 577, 591, 595, 596], "tensorflow_itex": [218, 221, 222, 223, 225, 226, 227, 256, 259, 260, 261, 263, 264, 265, 588], "onnxrt_qdq": [218, 222, 225, 226, 227, 256, 260, 263, 264, 265, 588], "onnxrt_qlinearop": [218, 222, 225, 226, 227, 233, 256, 260, 263, 264, 265, 269, 588], "onnxrt_integerop": [218, 222, 225, 226, 227, 233, 256, 260, 263, 264, 265, 269, 588], "pytorch_ipex": [218, 222, 225, 226, 227, 256, 260, 263, 264, 265, 588, 596], "pytorch_fx": [218, 222, 225, 226, 227, 256, 260, 263, 264, 265, 588], "onnxrt_qoper": [218, 222, 225, 226, 227, 256, 260, 263, 264, 265, 588], "dataset_registri": [218, 222, 227, 256, 260, 265], "dataset_typ": [218, 222, 227, 256, 260, 265, 275, 276, 286, 316, 402], "dataset_format": [218, 222, 227, 256, 260, 265], "data_format": [218, 222, 227, 229, 256, 260, 265, 266], "raw_imag": [218, 222, 227, 256, 260, 265], "overwrit": [218, 222, 227, 256, 260, 265], "download_url": [218, 256], "filenam": [218, 256, 290, 379, 380, 480, 496, 503, 509, 519, 527, 565], "md5": [218, 256], "download": [218, 256, 375, 455, 478, 479, 481, 482, 515, 562, 565, 577, 591], "gen_bar_updat": [218, 256], "progress": [218, 256, 315, 341, 348, 351, 586], "bar": [218, 256, 562], "check_integr": [218, 256], "fpath": [218, 256], "checksum": [218, 256], "calculate_md5": [218, 256], "chunk_siz": [218, 256], "cifar10": [218, 256, 565], "cifar100": [218, 256, 565], "www": [218, 256, 565, 597], "toronto": [218, 256, 565], "edu": [218, 256, 565], "kriz": [218, 256, 565], "cifar": [218, 256, 565, 597], "tar": [218, 256, 565], "gz": [218, 256, 565], "subset": [218, 221, 256, 259, 565], "internet": [218, 256, 562, 565], "put": [218, 256, 565, 567, 585], "again": [218, 256, 565, 590], "load_meta": [218, 256], "pytorchcifar10": [218, 256], "mxnetcifar10": [218, 256], "tensorflowcifar10": [218, 256], "pytorchcifar100": [218, 256], "mxnetcifar100": [218, 256], "tensorflowcifar100": [218, 256], "mnist": [218, 256, 565, 569], "institut": [218, 256], "standard": [218, 233, 256, 269, 375, 571, 579, 594, 595], "fashionmnist": [218, 256, 565], "npz": [218, 256, 565], "idx1": [218, 256, 565], "ubyt": [218, 256, 565], "idx3": [218, 256, 565], "t10k": [218, 256, 565], "class_to_idx": [218, 256], "read_data": [218, 256], "pytorchmnist": [218, 256], "mxnetmnist": [218, 256], "tensorflowmnist": [218, 256], "pytorchfashionmnist": [218, 256], "mxnetfashionmnist": [218, 256], "tensorflowfashionmnist": [218, 256], "imagefold": [218, 256, 565, 569], "subfold": [218, 256], "belong": [218, 256, 273, 331, 589], "class_1": [218, 256, 565], "png": [218, 256, 565], "xxy": [218, 256, 565], "xxz": [218, 256, 565], "class_n": [218, 256, 565], "123": [218, 256, 565, 594], "nsdf3": [218, 256, 565], "asd932_": [218, 256, 565], "mxnetimagefold": [218, 256], "tensorflowimagefold": [218, 256], "tensorflowtfrecorddataset": [218, 256], "tensorflowimagerecord": [218, 256], "000": [218, 256, 565], "001": [218, 256, 565, 569, 596], "099": [218, 256, 565], "tensorflowvocrecord": [218, 256], "pascal": [218, 256], "voc": [218, 256, 284, 326], "2012": [218, 256], "00000": [218, 256], "00004": [218, 256], "00001": [218, 256], "00003": [218, 256], "dummydataset": [219, 220, 257, 258], "stand_norm": [219, 220, 257, 258, 565], "dummy_v2": [220, 258, 564, 565], "sparse_dummy_v2": [220, 258, 565], "label_shap": [220, 258, 565], "sparsedummydataset": [220, 258], "dense_shap": [220, 258, 565], "sparse_ratio": [220, 258, 565], "imagenetraw": [221, 259, 565], "data_path": [221, 259, 565], "image_list": [221, 259, 565], "img1": [221, 259, 565], "img2": [221, 259, 565], "imgx": [221, 259, 565], "val_map": [221, 259, 565], "pytorchimagenetraw": [221, 259], "mxnetimagenetraw": [221, 259], "tensorflowimagenetraw": [221, 259], "inteltensorflow": [221, 223, 259, 261], "tensorflowimagenetdataset": [221, 259], "onnxrtimagenetdataset": [221, 259], "bert_dataset": [222, 227, 260, 265, 276, 318], "coco_dataset": [222, 227, 260, 265, 276, 318], "dummy_dataset": [222, 227, 260, 265, 276, 318], "dummy_dataset_v2": [222, 227, 260, 265, 276, 318], "imagenet_dataset": [222, 227, 260, 265, 276, 318], "style_transfer_dataset": [222, 227, 260, 265, 276, 318], "transfer": [223, 261, 270, 276, 565, 567, 568], "styletransferdataset": [223, 261], "content_fold": [223, 261, 565], "style_fold": [223, 261, 565], "crop_ratio": [223, 261, 565], "resize_shap": [223, 261, 565], "256": [223, 229, 261, 266, 565, 569, 594, 597], "image_format": [223, 261, 565], "holder": [223, 261, 565], "labelbalancecocorecordfilt": [224, 262], "balanc": [224, 262, 584], "labelbalancecocorawfilt": [224, 262], "tensorflowfilt": [225, 263], "onnxrtqlfilt": [225, 263], "onnxrtitfilt": [225, 263], "pytorchfilt": [225, 263], "mxnetfilt": [225, 263], "filter_registri": [225, 226, 227, 263, 264, 265], "filter_typ": [225, 226, 227, 263, 264, 265], "__call__": [225, 226, 227, 263, 264, 265], "coco_filt": [226, 227, 264, 265, 276, 318], "imagenet_transform": [227, 230, 265, 267, 276, 318], "transform_cl": [227, 230, 233, 265, 267, 269], "basetransform": [227, 228, 229, 230, 233, 265, 266, 267, 269], "transform_registri": [227, 230, 233, 265, 267, 269], "transform_typ": [227, 230, 233, 265, 267, 269], "user_postprocess": [227, 230, 231, 237, 241], "parsedecodecocotransform": 228, "quantizedinput": [229, 266, 594], "desir": [229, 233, 266, 269, 298, 594], "labelshift": [229, 266, 537, 594], "label_shift": [229, 266, 594], "parsedecodeimagenet": [229, 266, 594], "proto": [229, 233, 266, 269, 594], "parsedecodeimagenettransform": [229, 266], "tensorflowresizecropimagenettransform": [229, 266], "height": [229, 233, 266, 269, 292, 311, 341, 569, 585, 594, 596], "width": [229, 233, 266, 269, 292, 311, 341, 569, 589, 594, 596], "random_crop": [229, 266, 594], "resize_sid": [229, 266, 594], "resize_method": [229, 266], "bilinear": [229, 233, 266, 269, 594], "random_flip_left_right": [229, 266, 594], "mean_valu": [229, 266, 594], "channels_last": [229, 266], "subpixel": [229, 266], "rgb": [229, 266], "applic": [229, 266, 518, 547, 549, 551, 562, 571, 587, 593, 594], "crop": [229, 233, 266, 269, 565, 594], "flip": [229, 233, 266, 269, 594], "left": [229, 233, 266, 269, 341, 562, 594], "std": [229, 233, 266, 269, 292, 594], "bilinearimagenettransform": [229, 266], "central_fract": [229, 266, 594], "875": [229, 266, 594], "fraction": [229, 266, 594], "onnxbilinearimagenettransform": [229, 266], "onnxresizecropimagenettransform": [229, 266], "std_valu": [229, 266], "229": [229, 266], "225": [229, 266], "resizewithaspectratio": [229, 266], "87": [229, 266, 597], "inter_pol": [229, 266], "cv2": [229, 266], "inter_area": [229, 266], "aspect": [229, 233, 266, 269, 594], "convert_to_unicod": [232, 268], "unicod": [232, 268, 277, 319], "utf": [232, 268], "load_vocab": [232, 268], "vocab_fil": [232, 233, 268, 269, 594], "convert_by_vocab": [232, 268], "vocab": [232, 268, 298], "whitespace_token": [232, 268], "whitespac": [232, 268, 282, 324], "fulltoken": [232, 268], "tokenzi": [232, 268], "convert_tokens_to_id": [232, 268], "convert_ids_to_token": [232, 268], "basictoken": [232, 268], "punctuat": [232, 268, 277, 282, 319, 324], "lower": [232, 233, 268, 269, 282, 324, 357, 534, 568, 585, 586, 587, 589, 594, 595], "wordpiecetoken": [232, 268], "unk_token": [232, 268], "unk": [232, 268], "max_input_chars_per_word": [232, 268], "wordpiec": [232, 233, 268, 269, 594], "greedi": [232, 268], "unaff": [232, 268], "un": [232, 268], "aff": [232, 268], "concat_gener": [233, 269], "tensorflowtransform": [233, 269], "mxnettransform": [233, 269], "pytorchtransform": [233, 269], "onnxrtqltransform": [233, 269], "onnxrtittransform": [233, 269], "tensorflowwrapfunct": [233, 269], "transform_func": [233, 269], "pytorchmxnettransform": [233, 269], "get_torchvision_map": [233, 269], "interpol": [233, 269, 348, 579, 586, 594], "torchvis": [233, 269, 292], "composetransform": [233, 269], "transform_list": [233, 269, 594], "croptoboundingbox": [233, 269, 594], "offset_height": [233, 269, 594], "offset_width": [233, 269, 594], "target_height": [233, 269, 594], "target_width": [233, 269, 594], "vertic": [233, 269, 311, 341, 594], "coordin": [233, 269, 356, 594], "horizont": [233, 269, 594], "mxnetcroptoboundingbox": [233, 269], "onnxrtcroptoboundingbox": [233, 269], "tensorflowcroptoboundingbox": [233, 269], "resizewithratio": [233, 269, 594], "min_dim": [233, 269, 594], "800": [233, 269, 594], "max_dim": [233, 269, 594], "1365": [233, 269, 594], "constant_valu": [233, 269], "side": [233, 269, 298, 562, 565, 594], "exce": [233, 269, 594], "tensorflowresizewithratio": [233, 269], "perm": [233, 269, 594], "permut": [233, 269, 341, 594], "tensorflowtranspos": [233, 269], "mxnettranspos": [233, 269], "pytorchtranspos": [233, 269], "randomverticalflip": [233, 269, 594], "tensorflowrandomverticalflip": [233, 269], "randomhorizontalflip": [233, 269, 594], "tensorflowrandomhorizontalflip": [233, 269], "toarrai": [233, 269, 594], "pil": [233, 269, 594], "casttftransform": [233, 269], "castonnxtransform": [233, 269], "castpytorchtransform": [233, 269], "centercroptftransform": [233, 269], "paddedcentercroptransform": [233, 269], "crop_pad": [233, 269], "resizetftransform": [233, 269], "nearest": [233, 269, 594], "bicub": [233, 269, 594], "resizepytorchtransform": [233, 269], "randomcroptftransform": [233, 269], "locat": [233, 269, 569, 589, 591, 594, 596], "randomresizedcroppytorchtransform": [233, 269], "randomresizedcropmxnettransform": [233, 269], "randomresizedcroptftransform": [233, 269], "pramet": [233, 269], "normalizetftransform": [233, 269], "rescal": [233, 269, 594], "deviat": [233, 269, 594], "broadcast": [233, 269, 569, 594], "rescalekeraspretraintransform": [233, 269], "rescaletftransform": [233, 269], "rescaletransform": [233, 269], "alignimagechanneltransform": [233, 269], "dim": [233, 269, 306, 341, 356, 594], "w": [233, 269, 292, 585, 586, 594], "pytorchalignimagechannel": [233, 269], "tondarraytransform": [233, 269], "resizemxnettransform": [233, 269], "resizetransform": [233, 269], "cropresizetftransform": [233, 269], "boundari": [233, 269, 432, 594], "area": [233, 269, 280, 322, 579, 594], "pytorchcropresizetransform": [233, 269], "mxnetcropresizetransform": [233, 269], "cropresizetransform": [233, 269], "centercroptransform": [233, 269], "mxnetnormalizetransform": [233, 269], "pytorchnormalizetransform": [233, 269], "normalizetransform": [233, 269], "randomcroptransform": [233, 269], "randomresizedcroptransform": [233, 269], "get_final_text": [233, 269], "pred_text": [233, 269], "orig_text": [233, 269], "squadexampl": [233, 269], "qas_id": [233, 269], "question_text": [233, 269], "doc_token": [233, 269], "orig_answer_text": [233, 269], "start_posit": [233, 269], "end_posit": [233, 269], "is_imposs": [233, 269], "unique_id": [233, 269], "example_index": [233, 269], "doc_span_index": [233, 269], "token_to_orig_map": [233, 269], "token_is_max_context": [233, 269], "input_mask": [233, 269, 348], "segment_id": [233, 269], "read_squad_exampl": [233, 269], "input_fil": [233, 269], "doc_strid": [233, 269, 594], "max_query_length": [233, 269, 594], "output_fn": [233, 269], "inputbatch": [233, 269], "collecttransform": [233, 269], "10833": [233, 269], "tfsquadv1posttransform": [233, 269], "n_best_siz": [233, 269, 594], "384": [233, 269, 594], "max_answer_length": [233, 269, 594], "total": [233, 269, 284, 313, 315, 326, 335, 336, 337, 341, 348, 351, 357, 565, 586, 594], "nbest_predict": [233, 269, 594], "long": [233, 269, 572, 594], "chunk": [233, 269, 594], "much": [233, 269, 270, 276, 338, 567, 585, 586, 594], "stride": [233, 269, 342, 594], "process_result": [233, 269], "get_postprocess_result": [233, 269], "tfmodelzoocollecttransform": [233, 269], "tfsquadv1modelzooposttransform": [233, 269], "squadv1": [233, 269, 594], "parsedecodevoctransform": [233, 269], "set_env_var": 234, "env_var": 234, "overwrite_exist": 234, "env": [234, 519, 527], "set_all_env_var": 234, "core": [234, 276, 291, 379, 399, 562, 563, 578, 584, 597], "get_architectur": 234, "get_threads_per_cor": 234, "thread": [234, 550, 562, 564, 584], "get_thread": 234, "get_physical_id": 234, "socket": [234, 379, 522, 551, 584, 597], "get_core_id": 234, "get_bounded_thread": 234, "core_id": 234, "bind": 234, "command": [234, 276, 298, 369, 399, 410, 413, 420, 426, 428, 429, 496, 519, 527, 547, 562, 569], "unnecessari": [234, 276], "summary_benchmark": [234, 276], "config_inst": [234, 276], "generate_prefix": [234, 276], "core_list": [234, 276], "numactl": [234, 276], "run_inst": [234, 276], "critet": 235, "tensorflowcrossentropyloss": 235, "pytorchcrossentropyloss": 235, "tensorflowknowledgedistillationloss": 235, "pytorchknowledgedistillationloss": 235, "pytorchintermediatelayersknowledgedistillationloss": 235, "tensorflowcriterion": 235, "pytorchcriterion": 235, "criterion_cl": 235, "criterion_registri": 235, "criterion_typ": 235, "registry_criterion": 235, "param_dict": [235, 240, 289], "crossentropyloss": [235, 567], "tensorflowsparsecategoricalcrossentropi": 235, "sparsecategoricalcrossentropyloss": 235, "knowledgedistillationframework": 235, "student_model": [235, 270, 276], "knowledgedistillationloss": [235, 596], "teacher_model_forward": 235, "notimplementederror": [235, 283, 284, 325, 326], "teacher_student_loss_c": 235, "student_output": [235, 243, 276, 369, 567], "teacher_output": [235, 243, 270, 276, 369], "student_targets_loss_c": 235, "groud": 235, "truth": [235, 281, 282, 323, 324], "loss_cal": 235, "loss_cal_sloss": 235, "student_loss": [235, 243, 276, 369, 567], "softcrossentropi": 235, "logit": [235, 567], "ground": [235, 281, 282, 323, 324], "kullbackleiblerdiverg": 235, "pytorchknowledgedistillationlosswrapp": 235, "tensorflowknowledgedistillationlosswrapp": 235, "tensorflowknowledgedistillationlossextern": 235, "intermediatelayersknowledgedistillationloss": [235, 542], "init_loss_func": 235, "init_feature_match": 235, "student_featur": 235, "teacher_featur": 235, "matcher": 235, "clear_featur": 235, "register_hooks_for_model": 235, "attributeerror": 235, "remove_all_hook": 235, "pytorch_linear_feature_match": 235, "pytorchintermediatelayersknowledgedistillationlosswrapp": 235, "selfknowledgedistillationloss": [235, 542], "selfknowledg": 235, "pytorchselfknowledgedistillationloss": 235, "l2diverg": 235, "feature1": 235, "feature2": 235, "pytorchselfknowledgedistillationlosswrapp": 235, "setter": [236, 237], "tensorflowoptim": 240, "pytorchoptim": 240, "optimizer_cl": 240, "allow": [240, 356, 375, 551, 562, 567, 569, 579, 580, 588, 596], "optimizer_registri": 240, "optimizer_typ": 240, "cross": [240, 283, 284, 325, 326, 574, 595], "tensorflowsgd": 240, "tensorflowadamw": 240, "tensorflow_addon": 240, "adamw": 240, "tensorflowadam": 240, "adam": [240, 596], "pytorchsgd": 240, "record_output": 242, "output_process": 242, "get_activ": 242, "mainli": [243, 276, 315, 341, 351, 586, 589], "train_func": [243, 276, 317, 569, 589], "train_dataload": [243, 276, 585], "prepare_qat": [243, 276], "pre_process": [243, 270, 276, 287, 299, 303, 308, 316, 569], "post_process": [243, 276], "Be": [243, 276, 280, 322, 342, 346, 347], "epoch": [243, 270, 276, 303, 308, 313, 314, 342, 345, 346, 347, 348, 349, 369, 567, 569, 583, 585, 596], "on_train_end": [243, 276, 303, 308, 313, 314, 347, 348, 349, 369, 567, 583, 585, 589], "pre_epoch_begin": [243, 276, 303, 308], "post_epoch_end": [243, 276, 303, 308], "on_step_begin": [243, 276, 303, 308, 313, 314, 338, 342, 345, 346, 347, 348, 349, 369, 372, 567, 583, 585], "batch_id": [243, 276, 342, 345, 346, 347, 369], "on_batch_begin": [243, 276, 303, 308], "on_after_compute_loss": [243, 276, 303, 308, 369, 567, 583], "on_before_optimizer_step": [243, 276, 313, 314, 343, 347, 348, 349, 350, 369, 567, 583, 585], "on_after_optimizer_step": [243, 276, 313, 314, 338, 348, 349, 350, 369, 585], "on_before_ev": [243, 276, 313, 314, 348, 349], "on_after_ev": [243, 276, 313, 314, 348, 349], "on_post_grad": [243, 276], "on_step_end": [243, 276, 303, 308, 313, 314, 342, 345, 346, 347, 348, 349, 369, 372, 567, 583, 585], "on_batch_end": [243, 276, 303, 308], "register_hook": [243, 276], "input_arg": [243, 276], "input_kwarg": [243, 276], "relat": [270, 276, 280, 294, 295, 303, 308, 311, 322, 350, 372, 462, 465, 467, 472, 552, 555, 556, 557, 560, 596], "_epoch_ran": [270, 276], "ran": [270, 276], "eval_frequ": [270, 276], "frequenc": [270, 276, 313, 348, 584, 585, 596], "best_scor": [270, 276], "best_model": [270, 276], "train_cfg": [270, 276, 372], "evaluation_distribut": [270, 276, 303, 308], "train_distribut": [270, 276, 303, 308], "on_post_forward": [270, 276], "deprec": [270, 276, 534, 594], "init_train_cfg": [270, 276], "create_criterion": [270, 276], "create_optim": [270, 276], "disil": [270, 276], "generate_hook": [270, 276, 303, 308], "qlinear2qdq": [271, 276, 318], "torch_to_fp32_onnx": [271, 273], "do_constant_fold": [271, 273, 336], "verbos": [271, 273, 289, 290, 291, 336, 356], "ax": [271, 273, 336], "torch_to_int8_onnx": [271, 273], "u8s8": [271, 273], "optionl": [271, 273], "qdq_op_int32_bia": [271, 273, 571], "qdq_op_fp32_bias_qdq": [271, 273, 571], "onnx_qlinear_to_qdq": [271, 272], "input_name_to_nod": [271, 272, 334], "qlinearop": [271, 272, 576, 589], "check_model": 272, "update_weight_bia": 273, "fp32_onnx_path": [273, 274], "wegiht": 273, "set_data_typ": 273, "weight_typ": 273, "activation_typ": 273, "get_node_map": 273, "module_node_map": 273, "get_quantizable_onnx_op": 273, "quantize_nod": 273, "build_scale_map": 273, "int8_scale_info": 273, "scale_zp_dict": 273, "set_scale_info": 273, "int8_onnx_model": 273, "int8_onnx_path": 273, "recalculate_bia": 273, "recalcul": [273, 341], "remove_nodes_by_nam": 273, "sub_graph_with_int32_bia": 273, "a_info": 273, "b_info": 273, "qdq_fp32_bia": 273, "excut": 273, "qdq_int32_bia": 273, "qdq_fp32_bias_qdq": 273, "onnx2numpy_dtyp": 274, "onnx_node_typ": 274, "dummydataread": 274, "variou": [275, 276, 285, 316, 327, 576, 586, 588], "dl": [275, 276, 285, 303, 308, 316, 327, 574, 587], "bring": [275, 276, 316, 589], "vari": [275, 276, 303, 308, 316, 584, 597], "roc": [275, 276, 284, 303, 308, 316, 326], "footprint": [275, 276, 303, 308, 316, 337, 568, 582, 585, 586, 588], "flexibl": [275, 276, 303, 308, 316, 567, 585, 586], "set_config_by_model": [275, 276, 285], "model_obj": [275, 276, 285], "bleu": [276, 278, 283, 297, 318, 320, 325, 579], "bleu_util": [276, 283, 318, 325], "coco_label_map": [276, 283, 318, 325], "coco_tool": [276, 283, 318, 325], "evaluate_squad": [276, 283, 318, 325], "dynast": [276, 299, 318], "supernetwork": [276, 289, 292, 293, 299], "dynas_manag": [276, 292, 293, 299], "dynas_predictor": [276, 292, 293, 299], "dynas_search": [276, 293, 299], "dynas_util": [276, 291, 293, 299], "basic_na": [276, 299, 318], "nas_util": [276, 299, 318], "pruning_recip": [276, 318], "tile_pattern": [276, 304, 305], "pytorch_prun": [276, 318, 349], "logger": [276, 309, 318, 339, 370, 373, 379, 515, 519, 523], "prune_util": [276, 309, 318], "pruner": [276, 303, 308, 309, 311, 314, 318, 542, 545, 585, 596], "graph_optim": [276, 285, 318, 386, 455, 490, 494, 495, 515, 523, 539], "mixed_precis": [276, 318, 388, 455, 490, 515, 523, 539], "model_convers": [276, 318], "pruning_v2": [276, 318], "quantconf": [276, 316, 327, 353], "qfunc": [276, 316], "routinu": [276, 316], "pruningconf": [276, 303, 308], "pruning_func": [276, 303, 308], "update_items_for_all_prun": [276, 303, 314], "howev": [276, 303, 308, 314, 349, 571, 585], "still": [276, 303, 308, 314, 349, 589, 590], "analys": [276, 303, 308, 314], "generate_prun": [276, 303, 308], "dens": [276, 303, 308, 315, 351, 585, 586, 597], "spars": [276, 303, 308, 313, 348, 565, 585, 586, 587], "get_sparsity_ratio": [276, 303, 308, 311, 314, 341, 349], "elementwise_over_matmul_gemm_conv": [276, 303, 308, 314, 349], "elementwise_over_al": [276, 303, 308, 314, 349], "blockwise_over_matmul_gemm_conv": [276, 303, 308, 314, 349], "graphoptim": [276, 285, 386, 487, 538], "unicoderegex": [277, 319], "hoc": [277, 319], "hack": [277, 319], "nondigit_punct_r": [277, 319], "compil": [277, 319, 584], "preced": [277, 319], "punct_nondigit_r": [277, 319], "symbol_r": [277, 319], "property_char": [277, 319], "join": [277, 319], "bleu_token": [277, 319], "mose": [277, 319], "smt": [277, 319], "mosesdecod": [277, 319], "master": [277, 278, 281, 282, 311, 314, 319, 320, 323, 324, 341, 349], "mteval": [277, 319], "v14": [277, 319], "pl": [277, 319], "l954": [277, 319], "l983": [277, 319], "tensor2tensor": [278, 298, 320], "bleu_hook": [278, 320], "compute_bleu": [278, 297, 320], "reference_corpu": [278, 320], "translation_corpu": [278, 320], "max_ord": [278, 320], "use_bp": [278, 320], "against": [278, 320], "gram": [278, 320], "flag": [278, 320, 369, 544], "third": [280, 322, 578], "parti": [280, 322, 578, 589], "pycocotool": [280, 322, 572, 577], "object_detect": [280, 322], "noth": [280, 322, 527, 595], "thu": [280, 322, 589], "slim": [280, 322, 333, 335, 581], "jonathanhuang": [280, 322], "image_id": [280, 322, 579], "encod": [280, 289, 298, 322, 594], "groundtruth": [280, 322], "invok": [280, 322], "groundtruth_dict": [280, 322], "exportgroundtruthtococo": [280, 322], "groundtruth_boxes_list": [280, 322], "groundtruth_classes_list": [280, 322], "max_num_class": [280, 322], "output_path": [280, 322, 334, 527], "detections_list": [280, 322], "exportdetectionstococo": [280, 322], "detection_boxes_list": [280, 322], "detection_scores_list": [280, 322], "detection_classes_list": [280, 322], "cocowrapp": [280, 322], "loadannot": [280, 322], "cocoevalwrapp": [280, 322], "agnostic_mod": [280, 322], "computemetr": [280, 322], "detection_typ": [280, 322], "hold": [280, 322, 334, 356, 565], "datastructur": [280, 322], "mscoco": [280, 322], "replic": [280, 322], "extern": [280, 322, 334, 562], "category_id": [280, 322], "iou_typ": [280, 322], "iou_thr": [280, 284, 322, 326, 579], "map_point": [280, 284, 322, 326, 579], "cocoev": [280, 322], "Then": [280, 322, 562, 595], "getcategori": [280, 322], "getagnosticmod": [280, 322], "agnost": [280, 322, 567], "getcategoryidlist": [280, 322], "accumul": [280, 322, 355, 595], "p": [280, 322, 562], "include_metrics_per_categori": [280, 322], "all_metrics_per_categori": [280, 322], "summeri": [280, 322], "per_category_ap": [280, 322], "care": [280, 322], "pollut": [280, 322], "mldash": [280, 322], "summary_metr": [280, 322], "iou": [280, 284, 322, 326], "increment": [280, 296, 298, 322, 595], "50iou": [280, 322], "75iou": [280, 322], "75": [280, 322, 597], "pixel": [280, 322, 594], "medium": [280, 322], "96": [280, 322, 597], "larg": [280, 322, 334, 564, 567, 585, 586, 597], "10000": [280, 322, 356], "recal": [280, 282, 284, 322, 324, 326], "bycategori": [280, 322], "supercategori": [280, 322], "backward": [280, 322, 369, 567, 569, 583, 585, 589, 591], "performancebycategori": [280, 322], "category_stat": [280, 322], "exportsingleimagegroundtruthtococo": [280, 322], "next_annotation_id": [280, 322], "category_id_set": [280, 322], "groundtruth_box": [280, 322], "groundtruth_class": [280, 322], "groundtruth_mask": [280, 322], "groundtruth_is_crowd": [280, 322], "ingest": [280, 322], "ones": [280, 322, 586], "exportsingleimagedetectionstococo": [280, 322], "uniqu": [280, 292, 317, 322, 356, 421, 422, 589], "assign": [280, 322, 336, 379, 420, 421, 426, 427, 428, 429, 562, 569, 588], "num_gt_box": [280, 322], "num_detect": [280, 284, 322, 326, 579, 596], "image_height": [280, 322], "image_width": [280, 322], "detection_mask": [280, 322], "crowd": [280, 322], "exportsingleimagedetectionboxestococo": [280, 322], "detection_box": [280, 322, 596], "detection_scor": [280, 322, 596], "detection_class": [280, 322, 596], "exporsingleimagedetectionboxestococo": [280, 322], "exportsingleimagedetectionmaskstococo": [280, 322], "allenai": [281, 282, 323, 324], "bi": [281, 282, 323, 324], "att": [281, 282, 323, 324], "f1_score": [281, 282, 323, 324], "ground_truth": [281, 282, 323, 324], "metric_max_over_ground_truth": [281, 282, 323, 324], "metric_fn": [281, 282, 323, 324], "exact_match_scor": [281, 323], "exact": [281, 323], "articl": [281, 282, 323, 324], "paragraph": [281, 282, 323, 324], "qa": [281, 282, 323, 324], "cantain": [281, 282, 323, 324], "normalize_answ": [282, 324], "extra": [282, 324], "newlin": [282, 324], "tab": [282, 324, 423, 426, 432, 550, 593], "harmon": [282, 284, 324, 326], "answer_start": [282, 324], "177": [282, 324], "denver": [282, 324], "bronco": [282, 324], "nfl": [282, 324], "afc": [282, 324], "bowl": [282, 324], "56be4db0acb8001400a502ec": [282, 324], "percentag": [282, 290, 324, 596], "single_output": [283, 284, 325, 326], "hvd": [283, 284, 325, 326, 569], "sample_weight": [283, 284, 325, 326], "metric_registri": [283, 284, 325, 326], "metric_typ": [283, 284, 325, 326], "decorator_metr": [283, 284, 325, 326], "tensorflowmetr": [284, 326], "pytorchmetr": [284, 326], "mxnetmetr": [284, 326], "onnxrtqlmetr": [284, 326], "onnxrtitmetr": [284, 326], "wrappytorchmetr": [284, 326], "wrapmxnetmetr": [284, 326], "wraponnxrtmetr": [284, 326], "proport": [284, 326], "were": [284, 326], "pred_list": [284, 326], "pytorchloss": [284, 326], "least": [284, 314, 326, 341, 349, 528, 585, 586, 595], "sum": [284, 326, 567], "mae": [284, 326, 579], "magnitud": [284, 318, 326, 338, 339, 343, 344, 576, 585, 586, 597], "numer": [284, 326, 580, 587, 589], "rmse": [284, 290, 326, 579, 595], "squar": [284, 290, 326, 361, 579, 595], "tensorflowtopk": [284, 326], "k": [284, 326, 579, 585], "among": [284, 326], "most": [284, 326, 356, 562, 580, 585, 589, 595], "outcom": [284, 326], "num_correct": [284, 326], "generaltopk": [284, 326], "cocomapv2": [284, 326, 579], "anno_path": [284, 326, 579], "map_kei": [284, 326], "detectionboxes_precis": [284, 326], "output_index_map": [284, 326, 579], "tensorflowmap": [284, 326], "tensorflowcocomap": [284, 326], "tensorflowvocmap": [284, 326], "squadf1": [284, 326, 579], "miou": [284, 326], "num_class": [284, 326], "21": [284, 326, 597], "hist": [284, 326, 374], "onnxrtglu": [284, 326], "dlrm": [284, 326], "basicna": [287, 299], "model_build": [287, 299, 300], "conf_fnam": [287, 299], "init_by_cfg": [287, 299], "init_for_search": [288, 299], "select_model_arch": [288, 299, 300], "create_acc_predictor": [288, 299], "create_macs_predictor": [288, 299], "create_latency_predictor": [288, 299], "latenc": [288, 289, 290, 292, 297, 299, 532, 592, 595], "init_cfg": [288, 299], "parametermanag": [289, 292], "hot": 289, "pymoo": [289, 291, 292], "process_param_dict": 289, "upper": [289, 291], "vector": [289, 300, 302], "onehot_gener": 289, "in_arrai": 289, "onehot": 289, "depth": [289, 567, 590], "input_arrai": 289, "elast": 289, "mapper": [289, 420, 483, 484], "random_sampl": [289, 356], "subnetwork": [289, 292], "trial_limit": 289, "100000": 289, "translate2param": 289, "pymoo_vector": 289, "translate2pymoo": 289, "import_csv": 289, "filepath": 289, "column_nam": 289, "drop_dupl": 289, "panda": 289, "datafram": [289, 335, 336], "purpos": [289, 573, 580, 588], "subnet": [289, 292], "column": [289, 562, 585], "df": [289, 335, 336], "set_se": 289, "create_training_set": 289, "train_with_al": 289, "sklearn": 289, "transformerltencod": 289, "alpha": [290, 338, 350], "default_alpha": 290, "cost_factor": 290, "default_cost_factor": 290, "max_iter": 290, "default_max_iter": 290, "regressor": 290, "get_paramet": 290, "get_metr": [290, 372, 396], "mape": 290, "kendal": 290, "rank": [290, 569], "correl": 290, "spearman": 290, "searcher": [290, 302], "searchalgomanag": 291, "optuna": 291, "configure_nsga2": 291, "1000": [291, 532, 596], "warm_pop": 291, "crossover_prob": 291, "crossover_eta": 291, "mutation_prob": 291, "02": [291, 597], "mutation_eta": 291, "configure_ag": 291, "run_search": 291, "save_histori": 291, "previous": [291, 564], "problemmultiobject": 291, "evaluation_interfac": 291, "evaluationinterfac": [291, 292], "param_count": 291, "param_upperbound": 291, "ofa": [291, 292], "get_mac": 292, "input_s": 292, "measure_lat": 292, "warmup_step": 292, "measure_step": 292, "resolut": 292, "warm": [292, 337], "adjust": [292, 341, 589], "runner": 292, "ofarunn": 292, "acc_predictor": 292, "macs_predictor": 292, "latency_predictor": 292, "datasetpath": 292, "w1": 292, "estimate_accuracy_top1": 292, "subnet_cfg": 292, "top1": [292, 589], "estimate_mac": 292, "estimate_lat": 292, "validate_top1": 292, "validate_mac": 292, "flop": 292, "fvcore": 292, "get_subnet": 292, "transformerltrunn": 292, "checkpoint_path": [292, 297], "predictor_mod": 292, "csv_path": 292, "written": 292, "eval_subnet": 292, "clear_csv": 292, "evaluationinterfaceresnet50": 292, "evaluationinterfacemobilenetv3": 292, "evaluationinterfacetransformerlt": 292, "get_torchvision_model": 292, "torchvisionrefer": 292, "baselin": [292, 337, 364, 372, 592, 593], "subprocess": [292, 527, 550], "machine_transl": [293, 294, 299], "transformer_interfac": [293, 294, 295], "get_incremental_st": 296, "incremental_st": [296, 298], "set_incremental_st": 296, "multiheadattentionsup": 296, "super_embed_dim": 296, "num_head": 296, "is_encod": 296, "super_kdim": 296, "super_vdim": 296, "dropout": [296, 298], "add_bias_kv": [296, 298], "add_zero_attn": [296, 298], "self_attent": 296, "encoder_decoder_attent": 296, "out_dim": 296, "qkv_dim": 296, "head": [296, 298, 585], "key_padding_mask": 296, "need_weight": 296, "static_kv": 296, "attn_mask": [296, 298], "timestep": 296, "bytetensor": [296, 298], "src_len": [296, 298], "reorder_incremental_st": 296, "new_ord": [296, 298], "buffer": [296, 335], "compute_lat": 297, "get_model_paramet": 297, "compute_mac": 297, "transformersupernetwork": 298, "fairseq": 298, "vaswani": 298, "2017": 298, "arxiv": [298, 313, 338], "1706": 298, "03762": 298, "transformerencod": 298, "transformerdecod": 298, "line": [298, 526, 527, 547, 562, 569, 576, 585, 593], "encoder_config": 298, "embed_token": 298, "encoder_lay": 298, "transformerencoderlay": 298, "argpars": 298, "namespac": 298, "src_token": 298, "src_length": 298, "longtensor": 298, "sentenc": 298, "encoder_out": 298, "embed_dim": 298, "encoder_padding_mask": 298, "reorder_encoder_out": 298, "rearrang": 298, "max_posit": 298, "upgrade_state_dict_nam": 298, "upgrad": 298, "possibli": 298, "old": [298, 314, 379, 591], "decoder_config": 298, "no_encoder_attn": 298, "decoder_lay": 298, "transformerdecoderlay": 298, "attend": 298, "prev_output_token": 298, "tgt_len": 298, "forc": [298, 375, 580, 590], "extract_featur": 298, "output_lay": 298, "layer_idx": 298, "paper": [298, 567, 585, 586], "ffn": 298, "residu": 298, "robust": 298, "encoder_normalize_befor": 298, "norm": 298, "layer_norm": 298, "self_attn_layer_norm": 298, "final_layer_norm": 298, "seq_len": 298, "t_tgt": 298, "t_src": 298, "decoder_normalize_befor": 298, "prev_self_attn_st": 298, "prev_attn_st": 298, "self_attn_mask": 298, "self_attn_padding_mask": 298, "builder": [300, 335], "res_save_path": 300, "count_model_paramet": 300, "load_search_result": 300, "dump_search_result": 300, "params_vec2params_dict": [300, 302], "paras_vec": 300, "find_best_model_arch": 300, "metrics_convers": 300, "init_search_cfg": 300, "nas_registri": 301, "nas_method": 301, "create_search_space_pool": 301, "idx": [301, 334, 565], "find_pareto_front": 301, "n_point": 301, "n_metric": 301, "n_pareto_point": 301, "get_feedback": 302, "feedback": 302, "para_vec": 302, "gridsearch": 302, "whole": [302, 549, 562, 589, 597], "exhaust": [302, 318, 360, 588], "randomsearch": 302, "42": [302, 584, 597], "bayesianoptimizationsearch": 302, "indices2params_vec": 302, "tfpruningcallback": [303, 308], "input_model": [303, 308, 581, 593], "pure": [303, 308], "s_output": [303, 308], "s_loss": [303, 308], "t_output": [303, 308], "support_pattern": [304, 305, 306], "pattern_registri": 306, "pattern_typ": 306, "patternbas": [306, 307], "mask_shap": [306, 307], "is_contigu": 306, "compute_spars": [306, 307, 379], "abs_sum": 306, "abs_max": 306, "tile": 307, "tilepatternbas": 307, "nxm": [307, 311, 341, 348, 586], "matrix": [307, 586], "repeat_mask": 307, "ori_shap": 307, "repeat": [307, 595], "tilepattern_1x1": 307, "1x1": [307, 567, 585], "unstructur": [307, 576, 585, 586, 597], "tilepattern_2x2": 307, "2x2": 307, "tilepattern_1x16": 307, "1x16": 307, "tilepattern_4x1": 307, "tilepattern_1x2": 307, "1x2": 307, "update_config": [308, 349], "register_pattern": [311, 341], "get_pattern": [311, 341], "assertionerror": [311, 312, 313, 327, 341, 348, 352], "is_glob": [311, 341], "contrast": [311, 341, 594], "get_mask": [311, 341], "target_sparsity_ratio": [311, 313, 341, 348], "pre_mask": [311, 341], "max_sparsity_ratio_per_lay": [311, 313, 588], "get_masks_glob": [311, 341], "get_mask_singl": 311, "exact_sparsity_ratio": [311, 341], "get_block_size_dict": [311, 341], "get_masks_loc": [311, 341], "calul": [311, 341], "ration": [311, 341], "get_pattern_lock_mask": [311, 341], "lock": [311, 341, 346, 347, 576, 583, 585, 586], "patternnxm": [311, 341], "kept": [311, 341], "block_siz": [311, 341], "block_size_1": [311, 341], "block_size_2": [311, 341], "keep_pre_mask": [311, 341], "unchang": [311, 341], "patternninm": [311, 341], "doc": [311, 341, 379, 579], "md": [311, 341, 569], "check_config": [312, 352], "prune_config": [312, 352], "everyth": [312, 352], "reset_non_value_to_default": 312, "undefin": [312, 352], "process_and_check_config": [312, 352], "obejct": 312, "process_config": [312, 352], "parse_to_prun": [312, 352], "parse_not_to_prun": 312, "register_prun": [313, 348], "get_prun": [313, 348], "module_nam": [313, 315, 338, 348, 350, 351, 379, 534], "cuurent": [313, 348], "current_sparsity_ratio": [313, 348], "global_step": [313, 348], "update_frequency_on_step": [313, 588], "mask_weight": [313, 348], "formal": [313, 348], "local_step": [313, 314, 348, 349], "judg": 313, "Or": 313, "simpli": [313, 569, 581], "check_is_pruned_step": [313, 348], "update_scor": 313, "magnitudeprun": 313, "snipprun": 313, "snip": [313, 338, 576, 585, 586, 597], "1810": [313, 338], "02340": [313, 338], "snipmomentumprun": 313, "moreoev": 313, "momentum": [313, 338, 576, 585, 586, 596], "patternlockprun": [313, 346, 348], "templat": [314, 318, 349, 402, 421, 426, 515, 523, 560, 562, 585], "tree": [314, 349, 397, 426, 428], "nlp": [314, 349, 585, 586, 589], "huggingface_model": [314, 349], "config_file_path": [314, 349], "pruner_info": [314, 349], "register_schedul": [315, 351], "get_schedul": [315, 351], "gradual": [315, 351, 585, 586], "update_sparsity_ratio": [315, 351], "aggressive_ratio": 315, "current_prune_step": [315, 351], "total_prune_step": [315, 351], "oneshotschedul": [315, 351], "aggress": 315, "iterativeschedul": [315, 351], "target_ratio": [315, 351], "server": [317, 318, 455, 462, 514, 515, 522, 523, 531, 534, 545, 547, 549, 562], "seper": 317, "opt_model": 317, "fulli": [317, 589], "saniti": 317, "illeg": 317, "sync": 317, "accordingli": [317, 345], "base_model": [318, 329, 330, 332, 334, 335, 336], "keras_model": [318, 329], "mxnet_model": [318, 329], "nets_factori": [318, 329], "onnx_model": [318, 329, 466], "tensorflow_model": [318, 329], "torch_model": [318, 329], "pruner_legaci": [318, 339], "gradient_sensit": [318, 339, 344], "group_lasso": [318, 339, 344], "pattern_lock": [318, 339, 344], "reg": [318, 339, 348], "tuning_sampl": [318, 360, 365], "tuning_spac": [318, 360, 365, 368], "tuning_struct": [318, 360, 365], "auto_mixed_precis": [318, 360], "conserv": [318, 360], "hawq_v2": [318, 360], "mse_v2": [318, 360], "collect_layer_histogram": [318, 373], "create_obj_from_config": [318, 373], "kl_diverg": [318, 373], "load_huggingfac": [318, 373], "ux": 318, "config_gener": [318, 455, 515], "configuration_wizard": [318, 455, 515], "db_manag": [318, 455, 515, 553], "file_brows": [318, 455, 515], "jobs_manag": [318, 455, 515], "model_zoo": [318, 455, 515], "names_mapp": [318, 455, 515], "profil": [318, 389, 407, 414, 416, 426, 429, 431, 432, 455, 463, 471, 515, 516, 526, 532, 549, 554], "manage_workspac": [318, 455, 515], "workload": [318, 384, 385, 386, 388, 390, 391, 394, 416, 421, 426, 486, 503, 510, 515, 517, 523, 533, 534, 549, 552, 554, 555, 556, 557, 587], "executor": [318, 382, 515, 523], "expiring_dict": [318, 515, 523], "github_info": [318, 515, 523], "hw_info": [318, 515, 523], "json_seri": [318, 385, 439, 440, 445, 447, 448, 451, 461, 470, 496, 502, 515, 522, 523, 532, 535, 536, 537, 538, 540, 541, 542, 543, 544], "proc": [318, 515, 523], "status_upd": [318, 515, 523], "yaml_util": [318, 515, 523], "web": [318, 514, 515, 562, 593], "servic": [318, 515, 548, 549, 584], "router": [318, 515, 549], "mix_precis": [318, 580], "set_random_se": [318, 379, 544], "set_tensorboard": [318, 379], "set_workspac": [318, 379, 535, 544], "eval_metr": [327, 353], "hybirdblock": [327, 353], "paramt": [327, 353], "basemodel": [328, 329, 330, 332, 334, 335, 336], "plai": [328, 329, 585, 587], "role": [328, 329, 585], "node_typ": [328, 329], "kerasmodel": [330, 473], "get_model_fwk_nam": 331, "fwk": 331, "net": 333, "factori": [333, 436, 455, 490, 506, 511, 515, 526, 530], "tfslimnetsfactori": 333, "model_func": 333, "arg_scop": 333, "onnxmodel": [334, 466], "large_s": 334, "ort": 334, "output_name_to_nod": 334, "ir_vers": 334, "opset_import": 334, "nodes_to_remov": 334, "nodes_to_add": 334, "add_initi": 334, "get_initi": 334, "remove_initi": 334, "init_to_remov": 334, "set_initi": 334, "get_children": 334, "get_par": 334, "find_node_by_nam": 334, "new_nodes_list": 334, "find_nodes_by_initi": 334, "get_scale_zero": 334, "save_model_to_fil": 334, "use_external_data_format": 334, "2gb": 334, "replace_node_input": 334, "new_input_nam": 334, "replace_input_of_all_nod": 334, "white_optyp": 334, "black_optyp": 334, "replace_node_output": 334, "new_output_nam": 334, "replace_output_of_all_nod": 334, "remove_unused_const": 334, "topological_sort": 334, "enable_subgraph": 334, "topolog": 334, "get_nodes_chain": 334, "start_nod": 334, "stop_nod": 334, "result_chain": 334, "chain": 334, "get_model_typ": [335, 464], "validate_graph_nod": 335, "validate_and_inference_input_output": 335, "input_tensor_nam": 335, "output_tensor_nam": 335, "graph_sess": 335, "graph_def_sess": 335, "frozen_pb_sess": 335, "load_saved_model": 335, "saved_model_tag": 335, "serv": [335, 551, 559], "signatur": 335, "saved_model_dir": 335, "tag": [335, 375, 521, 534, 593], "metagraphdef": 335, "keras_sess": 335, "slim_sess": 335, "checkpoint_sess": 335, "estimator_sess": 335, "saved_model_sess": 335, "renturn": 335, "workspace_path": [335, 336, 519, 534], "tensorflowsavedmodelmodel": 335, "get_all_weight_nam": [335, 336], "update_weight": [335, 336, 346], "new_tensor": [335, 336], "get_weight": [335, 336], "wight": 335, "report_spars": [335, 336], "total_spars": [335, 336], "build_saved_model": 335, "savedmodelbuild": 335, "protocol": 335, "asset": 335, "tensorflowqatmodel": 335, "tensorflowcheckpointmodel": 335, "checkpoint": [335, 378, 581], "tensorflowmodel": [335, 442, 471, 473, 474, 475, 476], "pytorchbasemodel": 336, "register_forward_pre_hook": 336, "remove_hook": 336, "generate_forward_pre_hook": 336, "update_gradi": 336, "grad_nam": 336, "new_grad": 336, "grad": 336, "prune_weights_": 336, "place": [336, 577, 585, 593], "get_input": 336, "get_gradi": 336, "pytorchmodel": [336, 342, 343, 345, 346, 347], "quantized_state_dict": 336, "load_quantized_state_dict": 336, "stat_dict": 336, "export_to_jit": 336, "jit": [336, 593], "export_to_fp32_onnx": 336, "rand": 336, "stdout": 336, "export_to_bf16_onnx": 336, "export_to_int8_onnx": 336, "s8s8": 336, "pytorchfxmodel": 336, "ipexmodel": 336, "objective_registri": 337, "objective_custom_registri": 337, "obj_cl": 337, "sart": 337, "result_list": 337, "durat": [337, 364, 399, 410, 413, 420, 426, 428, 429, 519, 592], "alloc": 337, "models": [337, 582, 588], "multiobject": [337, 544], "metric_criterion": 337, "metric_weight": 337, "obj_criterion": 337, "obj_weight": 337, "is_measur": 337, "accuracy_target": 337, "accuracy_meet": 337, "verifi": 337, "set_model": 337, "best_result": 337, "tune_data": 337, "acc1": 337, "obj1": 337, "obj2": 337, "acc2": 337, "register_criterion": 338, "get_criterion": 338, "pruningcriterion": 338, "magnitudecriterion": 338, "criterion_class": 338, "magtinud": 338, "gradientcriterion": 338, "snipcriterion": 338, "product": [338, 576, 580, 584, 587, 589, 592, 595], "snipmomentumcriterion": 338, "mechan": [338, 592], "preserv": 338, "basepattern": [341, 350], "keep_mask_lay": 341, "invalid_lay": 341, "reduce_tensor": 341, "along": [341, 527, 577], "unprun": 341, "get_single_mask_per_target_ratio": 341, "return_dict": 341, "zero_cnt": 341, "total_cnt": 341, "check_layer_valid": 341, "get_reduced_masks_from_data": 341, "update_residual_cnt": 341, "get_sparsity_ratio_each_lay": 341, "sparsity_ratio": 341, "cnt": 341, "sparsityinfo": 341, "adjust_ratio": 341, "key_new_spars": 341, "max_sparsity_ratio": 341, "min_sparsity_ratio": 341, "final_target_sparsity_ratio": 341, "examin": [341, 585], "adjust_sparsity_ratio": 341, "block_wis": 341, "get_sparsity_ratio_progress": 341, "reshape_orig_to_pattern": 341, "s1": 341, "s2": 341, "reshape_reduced_to_orig": 341, "orig_shap": 341, "reduce_scor": 341, "get_mask_per_threshold": 341, "cur_target_sparsity_ratio": 341, "keep_exact_sparsity_ratio": 341, "remain": 341, "count_new_masked_cnt": 341, "new_added_mask": 341, "update_new_added_mask": 341, "cur_mask": 341, "bacaus": 341, "update_progressive_mask": 341, "progressive_step": 341, "progressive_config": 341, "update_progressive_masks_linear": 341, "update_progressive_masks_scor": 341, "update_progressive_masks_loc": 341, "domain": [341, 396, 404, 407, 424, 426, 431, 455, 462, 463, 466, 484, 515, 516, 518, 534, 546, 551, 562, 585, 586, 595], "update_progressive_masks_glob": 341, "get_least_ninm_mask_from_data": 341, "elementwis": [341, 342], "sparisti": 341, "get_ele_mask_per_threshold": 341, "least_ninm_mask": 341, "least_m_in_m_mask": 341, "gradientsensitivityprun": 342, "local_config": [342, 343, 345, 346, 347, 352], "global_config": [342, 343, 345, 346, 347, 352], "overwritten": [342, 343, 345, 346, 347], "elementwise_prun": 342, "parse_weight_nam": 342, "weight_name_pattern": 342, "compute_mask": [342, 345, 346], "prune_weight": 342, "update_importance_elementwis": 342, "update_importance_ab": 342, "update_importance_weight": 342, "prune_by_import": 342, "num_inst": 342, "lasso": [343, 350, 576, 585, 586], "grouplassoprun": 343, "basicmagnitudeprun": [343, 345], "legaci": 344, "pruner_registri": 347, "clase": 347, "update_spars": 347, "parse_valid_pruner_typ": 348, "baseprun": 348, "mask_weights_gener": 348, "update_mask": 348, "basicprun": 348, "proce": 348, "regul": 348, "set_global_step": 348, "progressiveprun": 348, "grain": [348, 587], "interv": [348, 586], "check_progressive_valid": 348, "check_is_pruned_progressive_step": 348, "update_masks_progress": 348, "print_progressive_spars": 348, "register_reg": 350, "regulariz": 350, "get_reg_typ": 350, "get_reg": 350, "basereg": 350, "grouplasso": 350, "coeff": 350, "reg_term": 350, "coeffient": 350, "pruningschedul": 351, "init_ratio": 351, "init_sparsity_ratio": 351, "reset_none_to_default": 352, "update_param": [352, 401], "process_weight_config": 352, "default_config": 352, "pruners_info": 352, "process_yaml_config": 352, "check_key_valid": 352, "template_config": 352, "user_config": 352, "calib_func": 353, "automixedprecisiontunestrategi": 354, "rule": [354, 585, 586], "tri": [354, 547, 595], "tune_config": [354, 355, 356, 357, 358, 359, 361, 362, 363, 364], "basictunestrategi": 355, "bayesiantunestrategi": 356, "come": [356, 595], "discret": [356, 595], "gaussian": [356, 595], "posterior": [356, 595], "black": [356, 595], "maxim": [356, 585, 586, 595], "acq_max": 356, "ac": 356, "gp": 356, "y_max": 356, "n_warmup": 356, "n_iter": 356, "acquisit": 356, "relev": 356, "limit": [356, 379, 567, 585, 593], "acq": 356, "randomst": 356, "scipi": 356, "x_max": 356, "targetspac": 356, "pbound": 356, "9527": [356, 596], "params_to_arrai": 356, "array_to_param": 356, "amort": 356, "keyerror": 356, "get_target": 356, "num": [356, 379, 579], "_kei": 356, "bayesianoptim": 356, "promis": [356, 568, 585, 586], "gen_next_param": 356, "conservativetunestrategi": 357, "o0": 357, "quantifi": 357, "quant_queu": 357, "prioriti": [357, 595], "go": [357, 573, 588, 594], "fp16": [357, 580, 589], "trail": 357, "exhaustivetunestrategi": 358, "hawq_v2tunestrategi": 359, "impact": [359, 361, 362, 591, 595], "msetunestrategi": 361, "mse_impact_lst": 361, "best_qmodel": 361, "current_best_model": 361, "ordered_op_name_typ": 361, "mse_v2tunestrategi": 362, "highest": [362, 595], "revert": [362, 595], "lowest": [362, 585, 586, 595], "randomtunestrategi": 363, "strategy_registri": [364, 595], "evaluation_result": [364, 569], "initial_tuning_cfg": 364, "quant_mode_wise_item": 364, "quant_mod": 364, "initial_op_tuning_cfg": 364, "op_item_dtype_dict": 364, "show_baseline_info": 364, "displai": [364, 379, 450, 463], "initial_best_acc": 364, "set_tuning_spac": 364, "setup_resum": 364, "set_q_func": 364, "update_best_op_tuning_cfg": 364, "op_tuning_cfg": 364, "deploy_config": 364, "deploy": [364, 566], "optuningconfig": [365, 368], "op_quant_mod": [365, 368], "get_stat": [365, 368], "from_stat": [365, 368], "compressionmanag": 369, "uesd": 369, "deal": 369, "commpon": 369, "train_loop": [369, 583], "path_to_sav": 369, "layerhistogramcollector": [370, 373], "histogram": [370, 373, 379, 423, 426, 434, 593], "layer_tensor": [370, 373], "include_lay": [370, 373], "diverg": [370, 373, 374, 567, 595], "get_func_from_config": 372, "func_dict": 372, "get_preprocess": 372, "get_postprocess": 372, "get_algorithm": 372, "create_dataset": 372, "cfg_preprocess": 372, "cfg_filter": 372, "create_dataload": 372, "dataloader_cfg": 372, "create_eval_func": 372, "postprocess_cfg": 372, "create_train_func": 372, "Their": 372, "auxiliari": 373, "msg": [373, 376], "debug": [373, 376, 436, 437, 441, 562, 595], "warn": [373, 376, 562], "warin": [373, 376], "alia": [373, 376], "fatal": [373, 376], "probabl": 374, "expand_quantized_bin": 374, "quantized_bin": 374, "reference_bin": 374, "expand": 374, "bin": [374, 379], "safe_entropi": 374, "reference_distr_p": 374, "p_sum": 374, "candidate_distr_q": 374, "q_sum": 374, "entropi": [374, 595], "get_threshold": 374, "hist_edg": 374, "min_val": 374, "max_val": 374, "quantized_typ": 374, "num_quantized_bin": 374, "255": [374, 589], "pretrain": 375, "optimizedmodel": 375, "from_pretrain": 375, "repositori": [375, 455, 460, 462, 515, 521, 575], "hub": [375, 527], "host": [375, 569], "cache_dir": 375, "force_download": 375, "resume_download": 375, "delet": [375, 414, 420, 421, 426, 427, 428, 429, 430, 585, 586], "receiv": [375, 592], "artifact": 375, "co": [375, 586], "save_for_huggingface_upstream": 375, "output_dir": [375, 527], "get_logg": 376, "checkpoint_dir": 378, "history_cfg": 378, "best_configur": 378, "best_model_weight": 378, "pt": [378, 581, 587, 590], "snapshot": [378, 432, 553], "cfg_from_fil": 379, "yaml_fil": [379, 565, 569, 579], "lazyimport": 379, "lazi": 379, "till": [379, 595], "decorat": 379, "time_limit": 379, "get_siz": [379, 534], "fault_tolerant_fil": 379, "equal_dict": 379, "d2": 379, "compare_kei": 379, "ignore_kei": 379, "ignor": [379, 565], "cpuinfo": 379, "cores_per_socket": 379, "get_number_of_socket": [379, 522], "customized_msg": 379, "elaps": 379, "combine_histogram": 379, "old_hist": 379, "get_tensor_histogram": 379, "2048": 379, "get_all_fp32_data": 379, "get_tuning_histori": 379, "tuning_history_path": [379, 503], "str2arrai": 379, "dequantizeweight": 379, "weight_tensor": 379, "scale_info": 379, "statist": 379, "header": [379, 480, 559, 572], "field_nam": 379, "output_handl": 379, "printer": 379, "print_stat": 379, "global_st": 379, "load_data_from_pkl": 379, "pkl": 379, "dump_data_to_loc": 379, "set_resume_from": 379, "project_data": [380, 486, 487, 492, 496, 499, 502, 509], "benchmark_data": 380, "workdir": [380, 496, 509, 515, 519, 523, 531], "config_filenam": [380, 496, 509], "configuration_data": [380, 487, 492, 496, 499, 502], "generate_config": [380, 487, 492, 496, 499, 502, 509], "dataloaderinterfac": [380, 496, 509], "dataloader_data": [380, 392, 421, 426, 496, 509], "parse_arg": [381, 489, 493, 498, 501, 507], "benchmark_mod": [381, 526], "set_eager_execut": [381, 489, 493, 501], "request_id": [382, 485, 503, 504, 519, 527], "asd": [382, 504], "benchmark_id": [382, 399, 400, 410], "benchmark_result_upd": 382, "benchmark_result_update_pytorch_script": 382, "neural_coder_perform": 382, "neural_coder_tim": 382, "pytorch_script_bench_optim": 382, "command_line_of_script": 382, "pytorch_script_bench_original_model": 382, "execute_real_benchmark": 382, "project_detail": [382, 415, 485, 504], "benchmark_detail": 382, "benchmark_model": [383, 455, 515], "execute_benchmark": [383, 455, 515], "benchmarkconfiggener": 384, "configgener": [384, 385, 386, 388, 389, 390, 391], "generate_evaluation_config": [384, 386, 388, 390, 391], "generate_accuracy_config": 384, "generate_performance_config": 384, "workload_directori": 385, "configuration_path": 385, "jsonseri": [385, 439, 440, 445, 447, 448, 451, 461, 470, 496, 502, 522, 524, 532, 535, 536, 537, 538, 540, 541, 542, 543, 544], "get_predefined_config_path": [385, 534], "generate_model_config": 385, "generate_dataloader_config": 385, "graphoptimizationconfiggener": 386, "generate_graph_optimization_config": 386, "benchmark_config_gener": [387, 455, 515], "graph_optimization_config_gener": [387, 455, 515], "mixed_precision_config_gener": [387, 455, 515], "profiling_config_gener": [387, 455, 515], "pruning_config_gener": [387, 455, 515], "quantization_config_gener": [387, 455, 515], "mixedprecisionconfiggener": 388, "generate_mixed_precision_config": 388, "profilingconfiggener": 389, "pruningconfiggener": 390, "generate_pruning_config": 390, "quantizationconfiggener": 391, "generate_tuning_config": 391, "generate_quantization_config": 391, "configurationpars": 392, "input_data": [392, 397, 564], "parse_evaluation_data": 392, "evaluation_data": 392, "parse_transform": 392, "transforms_data": [392, 421, 426], "parse_dataload": 392, "parse_metr": 392, "metric_data": 392, "get_param_typ": 392, "param_group": 392, "parse_valu": 392, "required_typ": 392, "parse_list_valu": 392, "parse_multidim_list": 392, "dimension": 392, "normalize_string_list": 392, "string_list": 392, "bracket": 392, "get_predefined_configur": 394, "update_config_to_machine_specif": 394, "configuration_pars": [395, 455, 515], "get_boundary_nod": [395, 455, 515], "get_configur": [395, 455, 515], "params_feed": [395, 455, 515], "pruning_config_pars": [395, 455, 515], "feeder": 396, "get_framework": [396, 469], "get_domain": 396, "get_model": [396, 469, 555], "get_dataload": 396, "get_transform": 396, "get_object": 396, "get_strategi": 396, "get_quantization_approach": 396, "get_possible_valu": 396, "pruningconfigpars": 397, "generate_tre": 397, "parse_entri": 397, "bench": [398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 485, 514], "dbmanag": [398, 431], "database_loc": [398, 431], "log_level": [398, 431, 525], "initialize_databas": [398, 431], "create_sqlalchemy_engin": [398, 431], "create_al": [398, 431], "tabl": [398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 431], "project_id": [399, 402, 409, 410, 413, 415, 421, 425, 426], "model_id": [399, 409, 410, 413], "dataset_id": [399, 402, 410, 413, 421, 425, 426], "warmup_iter": 399, "number_of_inst": 399, "execution_command": [399, 410, 413], "benchark": 399, "delete_benchmark": [399, 420, 426], "benchmark_nam": 399, "update_statu": [399, 410, 413], "execution_statu": [399, 410, 413], "executionstatu": [399, 410, 413, 420, 426, 428, 429, 516, 533], "update_dur": [399, 410, 413], "update_execution_command": [399, 410, 413, 420, 426, 428, 429], "update_log_path": [399, 410, 413, 426, 429], "update_config_path": [399, 410], "update_dataset": [399, 410, 413], "update_batch_s": [399, 410], "update_mod": 399, "update_cores_per_inst": 399, "update_number_of_inst": 399, "clean_statu": [399, 410, 413, 420, 426, 428, 429, 533], "status_to_clean": [399, 410, 413, 420, 426, 428, 429, 533], "build_info": [399, 400, 402, 409, 410, 413, 414, 416, 419], "benchmark_result": [399, 407, 431, 455], "benchmarkresult": [399, 400], "update_accuraci": 400, "update_perform": 400, "list_by_framework": [401, 408, 417], "framework_id": [401, 408, 409, 417, 433], "query_to_list": [401, 408, 417], "dataloaders_queri": 401, "dataloader_id": 401, "fill_dictionari": [401, 403, 404, 406, 408, 411, 412, 417], "dataset_nam": [402, 421, 426], "template_path": 402, "delete_dataset": [402, 421, 426], "update_template_path": 402, "get_domain_id": 403, "domain_nam": 403, "domainflavour": [404, 516], "db": [404, 411, 412, 432, 433], "get_domain_flavour_id": 404, "domain_flavour_nam": 404, "flavour": [404, 424, 426, 484, 516], "get_framework_id": 406, "framework_nam": [406, 482, 522], "domain_flavour": [407, 431, 455, 461, 534], "optimization_typ": [407, 410, 431, 455], "profiling_result": [407, 413, 431, 455], "pruning_detail": [407, 410, 431, 455], "tuning_detail": [407, 410, 431, 455], "tuning_histori": [407, 410, 426, 428, 431, 455, 490, 515], "metrics_queri": 408, "precision_id": [409, 410, 411, 412], "domain_id": [409, 417], "domain_flavour_id": 409, "supports_profil": [409, 463, 471], "supports_graph": [409, 463], "supports_prun": [409, 463, 475], "delete_model": [409, 426, 427], "optimization_type_id": 410, "sampling_s": [410, 535, 596], "tuning_details_id": [410, 418], "pruning_details_id": [410, 416], "diagnosis_config": 410, "delete_optim": [410, 426, 428], "optimization_id": [410, 411, 426, 428, 485], "optimization_nam": [410, 411, 425, 426], "update_optimized_model": [410, 426, 428], "optimized_model_id": 410, "update_sampling_s": 410, "update_precis": 410, "update_tuning_detail": 410, "update_pruning_detail": 410, "pin_accuracy_benchmark": [410, 426, 428], "pin": [410, 426, 428], "pin_performance_benchmark": [410, 426, 428], "get_optimization_by_project_and_model": 410, "unpin_benchmark": 410, "db_connect": 410, "unpin": 410, "optimizationtyp": [410, 411, 516], "tuningdetail": [410, 418, 502], "tuninghistori": [410, 419, 503], "pruningdetail": [410, 416], "optimized_model": 410, "get_pinned_benchmark": 410, "list_for_precis": 411, "precision_nam": [411, 412], "get_optimization_type_for_precis": 411, "get_optimization_type_id": 411, "get_optimization_type_by_nam": 411, "get_optimization_type_by_id": 411, "get_precision_id": 412, "get_precision_by_nam": 412, "get_precision_by_id": 412, "num_thread": 413, "delete_profil": [413, 426, 429], "profiling_id": [413, 414, 426, 429, 504], "profiling_nam": 413, "update_num_thread": 413, "profilingresult": [413, 414], "total_execution_tim": 414, "accelerator_execution_tim": 414, "cpu_execution_tim": 414, "op_run": 414, "op_defin": 414, "get_result": 414, "bulk_add": 414, "params_interfac": [414, 420, 421, 423, 425, 426, 427, 428, 429, 431, 455, 515, 553], "profilingresultaddparamsinterfac": [414, 426, 429, 432], "bulk": [414, 426, 429], "delete_result": 414, "create_project": [415, 425, 426, 430], "delete_project": [415, 426, 430], "project_nam": [415, 421, 426], "get_model_by_nam": 415, "list_project": [415, 426, 430], "update_not": 415, "pruning_details_data": 416, "delete_pruning_detail": 416, "list_by_domain": 417, "transforms_queri": 417, "accuracy_criterion_typ": 418, "accuracy_criterion_threshold": 418, "exit_polici": [418, 596], "tuning_details_data": 418, "delete_tuning_detail": 418, "update_tuning_histori": 418, "tuning_history_id": 418, "minimal_accuraci": 419, "baseline_accuraci": 419, "baseline_perform": 419, "last_tune_accuraci": 419, "last_tune_perform": 419, "best_tune_accuraci": 419, "best_tune_perform": 419, "benchmarkapiinterfac": [420, 426], "get_benchmark_detail": [420, 426], "list_benchmark": [420, 426], "update_benchmark_accuraci": [420, 426], "update_benchmark_perform": [420, 426], "update_benchmark_statu": [420, 426], "update_benchmark_dur": [420, 426], "update_path": [420, 426, 428], "add_benchmark": [420, 426], "add_result": [420, 426, 429], "edit_benchmark": [420, 426], "parse_benchmark_data": [420, 426], "benchmarkaddparamsinterfac": [420, 426, 432], "parse_benchmark_edit_data": [420, 426], "benchmarkeditparamsinterfac": [420, 426, 432], "before_delete_benchmark_entri": 420, "sqlite3": 420, "db_model": [420, 431, 455, 515], "datasetapiinterfac": [421, 426], "get_dataset_detail": [421, 426], "list_dataset": [421, 426], "add_dataset": [421, 426], "set_template_path": [421, 426], "parsed_dataset_data": [421, 426], "datasetaddparamsinterfac": [421, 426, 432], "check_if_custom_metric_or_dataload": [421, 426], "dataset_data": [421, 426, 486, 487, 492, 496, 499, 502, 536], "generate_custom_templ": [421, 426], "dataloader_path": [421, 426], "generate_templ": [421, 426], "template_typ": [421, 426], "parse_dataset_data": [421, 426], "get_predefined_dataset": [421, 426], "prepare_predefined_dataload": [421, 426], "prepare_predefined_transform": [421, 426], "set_database_vers": [421, 422], "version_num": [421, 422], "alembic_vers": [421, 422], "initialize_associ": [421, 422], "initialize_precision_optimization_types_associ": [421, 422], "search_in_list_of_dict_for_unique_valu": [421, 422], "list_of_dict": [421, 422], "search_in_list_of_dict": [421, 422], "diagnosisapiinterfac": [423, 426], "get_op_list": [423, 426, 434], "get_op_detail": [423, 426, 434], "generate_optim": [423, 426], "model_wise_param": [423, 426], "parse_optimization_data": [423, 426, 428], "diagnosisoptimizationparamsinterfac": [423, 426, 432], "parse_op_wise_config": [423, 426], "op_wise_param": [423, 426], "parse_wise_paramet": [423, 426], "params_per_typ": [423, 426], "set_op_wise_pattern_precis": [423, 426], "parse_model_wise_config": [423, 426], "dictionariesapiinterfac": [424, 426], "dictonari": [424, 426], "list_domain": [424, 426], "list_domain_flavour": [424, 426], "list_optimization_typ": [424, 426], "list_optimization_types_for_precis": [424, 426], "list_precis": [424, 426], "list_dataload": [424, 426], "list_dataloaders_by_framework": [424, 426], "list_transform": [424, 426], "list_transforms_by_framework": [424, 426], "list_transforms_by_domain": [424, 426], "list_metr": [424, 426], "list_metrics_by_framework": [424, 426], "examplesapiinterfac": [425, 426], "get_optimization_data": [425, 426], "optimizationaddparamsinterfac": [425, 426, 428, 432], "benchmark_api_interfac": [426, 431, 455], "dataset_api_interfac": [426, 431, 455], "diagnosis_api_interfac": [426, 431, 455], "dictionaries_api_interfac": [426, 431, 455], "examples_api_interfac": [426, 431, 455], "model_api_interfac": [426, 431, 455], "optimization_api_interfac": [426, 431, 455], "profiling_api_interfac": [426, 431, 455], "project_api_interfac": [426, 431, 455], "modelapiinterfac": [426, 427], "add_model": [426, 427, 430], "get_model_detail": [426, 427], "list_model": [426, 427, 455, 481, 515], "parse_model_data": [426, 427], "modeladdparamsinterfac": [426, 427, 432], "optimizationapiinterfac": [426, 428], "get_optimization_detail": [426, 428], "list_optim": [426, 428], "update_optimization_statu": [426, 428], "update_optimization_dur": [426, 428], "add_optim": [426, 428], "add_quantization_optim": [426, 428], "optimization_data": [426, 428, 486, 487, 492, 496, 499, 502], "add_pruning_optim": [426, 428], "add_standard_optim": [426, 428], "edit_optim": [426, 428], "get_pruning_detail": [426, 428], "gat": [426, 428], "edit_tuning_detail": [426, 428], "parsed_optimization_data": [426, 428], "optimizationeditparamsinterfac": [426, 428, 432], "edit_pruning_detail": [426, 428], "pruning_data": [426, 428], "add_tuning_histori": [426, 428], "parse_tuning_histori": [426, 428], "tuninghistoryinterfac": [426, 428, 432, 553], "parse_optimization_edit_data": [426, 428], "load_pruning_details_config": [426, 428, 534], "profilingapiinterfac": [426, 429], "get_profiling_detail": [426, 429], "list_profil": [426, 429], "update_profiling_statu": [426, 429], "update_profiling_dur": [426, 429], "add_profil": [426, 429], "edit_profil": [426, 429], "bulk_add_result": [426, 429], "parse_profiling_data": [426, 429], "profilingaddparamsinterfac": [426, 429, 432], "parse_profiling_result_data": [426, 429], "parse_profiling_edit_data": [426, 429], "profilingeditparamsinterfac": [426, 429, 432], "projectapiinterfac": [426, 430], "get_project_detail": [426, 430], "add_dummy_dataset": [426, 430], "update_project_not": [426, 430], "db_oper": [431, 455, 515], "parse_nod": 432, "tuninghistoryiteminterfac": [432, 553], "update_dataloaders_param": 433, "dataloaders_to_upd": 433, "framework_dataloaders_config": 433, "get_framework_dataloaders_config": 433, "get_framework_transforms_config": 433, "get_tensors_info": [434, 463], "load_quantization_config": 434, "calculate_ms": 434, "input_model_tensor": 434, "optimized_model_tensor": 434, "op_detail": [434, 436, 455, 515], "opdetail": [434, 439], "get_histogram_data": 434, "draw": [434, 592, 595], "diagnosisfactori": 435, "get_diagnosi": 435, "onnx_diagnosi": [436, 455, 515], "onnxrt_diagnosi": [436, 437, 455], "tensorflow_diagnosi": [436, 455, 515], "op_entri": [436, 455, 515], "onnxrtdiagnosi": 438, "onnxrtmodel": [438, 466], "serialization_typ": [439, 440, 470, 522, 524, 536, 537, 541, 542], "oppattern": 439, "pattern_data": 439, "opweight": 439, "weights_data": 439, "opactiv": 439, "op_activ": 439, "opentri": 440, "activation_min": 440, "activation_max": 440, "tensorflowdiagnosi": 442, "browser": [443, 562], "get_directory_entri": 443, "get_requested_path": 443, "request": [443, 455, 456, 457, 478, 479, 482, 503, 515, 519, 546, 548, 550, 551, 555, 557, 558, 560, 562, 589], "get_non_hidden_directory_entri": 443, "create_dir_entri": 443, "direntri": 443, "create_file_entri": 443, "create_entri": 443, "is_directori": 443, "sort_entri": 443, "should_show_fil": 443, "should_show_only_model_fil": 443, "get_setting_valu": 443, "get_filter_valu": 443, "filter_requested_entri": 443, "filter_nam": 443, "is_directory_entri": 443, "is_model_or_directory_entri": 443, "is_dataset_or_directory_entri": 443, "brows": 444, "filesystem": [444, 534, 559], "attribute_typ": 445, "expanded_group": [446, 449], "add_edg": 448, "source_id": 448, "target_id": 448, "get_nod": 448, "highlight_pattern": 448, "get_target_nod": 448, "reader": [449, 450, 455, 515], "graphread": 449, "find_pattern_in_graph": [449, 550], "onnxrt_read": [450, 452, 455], "tensorflow_read": [450, 452, 455], "collaps": [450, 455, 515, 562], "graph_read": [450, 455, 515], "groupnod": 451, "group_nam": 451, "onnxrtread": 453, "tensorflowread": 454, "jobs_control_queu": [455, 456, 515], "frozen_pb": [455, 462, 472], "meta_graph": [455, 462, 472], "model_type_gett": [455, 462, 515], "download_config": [455, 480, 481, 515], "download_model": [455, 480, 481, 515], "optimize_model": [455, 488, 490, 491, 494, 497], "neural_coder_optim": [455, 490, 515], "tune_model": [455, 490, 500], "execute_optim": [455, 490, 515], "tensorflow_profil": [455, 506, 515], "execute_profil": [455, 506, 515], "profile_model": [455, 506, 508, 512, 515], "job": [456, 530], "_jobscontrolqueu": 457, "queu": 457, "jobsmanag": 457, "_jobsmmanag": 458, "_job": 458, "get_default_path": 460, "shape_elements_ord": [463, 466, 475, 534], "get_input_nod": [463, 473, 474, 475], "get_output_nod": [463, 473, 474, 475], "ensure_supported_path": 463, "get_model_graph": [463, 466, 474, 475, 550], "supports_path": [463, 466, 468, 471, 473, 474, 476], "guard_requirements_instal": [463, 466, 468, 475], "instal": [463, 466, 468, 475, 482, 569, 572, 584], "nc_model_inst": [466, 475], "filtered_input_nod": 466, "remove_number_of_samples_from_shap": 466, "pytorchscriptmodel": 468, "modelrepositori": 469, "get_framework_from_path": [469, 534], "get_supported_framework": 469, "is_model_path": 469, "trust": [470, 562], "frozenpbmodel": 471, "metagraphmodel": 474, "metagraph": 474, "savedmodelmodel": 476, "get_input_shap": 477, "fix_dynamic_shap": 477, "resourc": [480, 567, 585], "download_yaml_config": 480, "model_info": 480, "download_fil": 480, "download_path": 480, "report_progress": 480, "unpack_arch": 480, "archive_path": 480, "unpack": 480, "archiv": 480, "get_yaml_url": 480, "model_src_dir": 480, "yaml_relative_loc": 480, "get_available_model": 482, "check_vers": 482, "framework_vers": 482, "supported_vers": 482, "validate_model_list": 482, "model_list": 482, "get_framework_module_nam": 482, "get_installed_framework": 482, "mappingdirect": 484, "namesmapp": 484, "framework_map": 484, "domain_map": 484, "domain_flavour_map": 484, "precision_map": 484, "map_nam": 484, "parameter_typ": 484, "execute_optimization_pytorch_script": 485, "execute_optimization_regular": 485, "parse_model_data_to_bench_nam": 485, "parse_log": 485, "optimization_detail": 485, "check_if_collect_tuning_histori": 485, "optimizationfactori": 486, "get_optim": 486, "optimization_script": [487, 492, 496, 499, 502], "optimize_graph": [489, 493], "output_graph": [489, 493, 498, 501], "optimize_graph_config": [489, 493], "optimize_pt_script": 495, "output_model_nam": 496, "output_model_dir": 496, "optimizationinterfac": 496, "optimization_workdir": 503, "watcher": 503, "process_succeed": 503, "signal": [503, 534], "was_history_file_chang": 503, "history_file_modification_tim": 503, "send_history_snapshot": 503, "execute_real_profil": 504, "profiling_detail": 504, "profilerfactori": [505, 510], "get_profil": [505, 510], "profiling_data": [505, 509, 510, 512, 532], "load_profiling_detail": 507, "json_path": 507, "config_path": 509, "initialize_graph": 512, "tf_modul": 512, "create_tf_config": 512, "num_warmup": 512, "get_node_by_nam": 512, "convert_nodes_to_list": 512, "build_dataload": 512, "delete_assign": 513, "wsgi": 514, "prepare_environ": 514, "app": [515, 549], "history_snapshot_pars": [515, 549, 554], "request_data_processor": [515, 549, 554], "response_gener": [515, 549, 554, 555, 557, 560], "status": [516, 528, 533], "ensure_workdir_exists_and_writ": 517, "clean_workloads_wip_statu": 517, "wip": [517, 597], "workloads_list": 517, "migrate_databas": 517, "latest": [517, 527, 577, 587, 591], "alemb": [517, 572, 577], "notfoundexcept": [518, 547, 548], "accessdeniedexcept": 518, "deni": 518, "clienterrorexcept": 518, "internalexcept": 518, "subject": [519, 546, 578], "send_respons": 519, "log_nam": 519, "additional_log_nam": [519, 527], "shell": [519, 527, 593], "process_dur": 519, "call_on": 519, "cwd": [519, 527], "universal_newlin": [519, 527], "startupinfo": [519, 527], "creationflag": [519, 527], "ignore_exit_cod": [519, 527], "pid": [519, 527], "env_arg": 519, "ncprocess": [519, 528], "refresh_workdir": 519, "is_multi_command": 519, "expir": 520, "expiringdictitem": 520, "expires_at": 520, "is_expir": 520, "expiringdict": 520, "initial_valu": 520, "ttl": 520, "120": 520, "userdict": 520, "githubinfo": 521, "hw": 522, "hwinfo": 522, "get_distribut": 522, "distibut": 522, "get_bios_vers": 522, "bio": [522, 584], "is_turbo_boost_en": 522, "turbo": [522, 584], "boost": [522, 580, 587], "get_kernel_vers": 522, "get_framework_info": 522, "get_framework_dependency_info": 522, "subdepend": 522, "serializ": 524, "serialize_item": 524, "datetim": 524, "throw": 524, "typeerror": 524, "2016": 524, "84913": 524, "08t11": 524, "084913": 524, "change_log_level": 525, "optimizationpars": 526, "performancepars": 526, "update_parti": 526, "partial": [526, 589], "parsed_result": 526, "summarize_parti": 526, "summarize_valu": 526, "accuracypars": 526, "benchmarkparserfactori": 526, "get_pars": 526, "profilingpars": 526, "unify_tim": 526, "string_valu": 526, "micro": 526, "125": [526, 597], "6m": 526, "microsecond": 526, "cmd": 527, "docker": 527, "aibt_tensorflow": 527, "7_3_mkldnn_tensorflow": 527, "111224": 527, "pull_imag": 527, "0c750a01": 527, "90e0": 527, "4aa8": 527, "99fe": 527, "a194d55a2046": 527, "time_start": 527, "2018": 527, "17t14": 527, "47": [527, 597], "352502": 527, "time_stop": 527, "25": [527, 597], "110410": 527, "info_path": 527, "tail": 527, "is_ok": [527, 528], "popen": 527, "remove_log": 527, "properli": 528, "rtype": 528, "return_code_al": 528, "remove_successful_log": 528, "success": [528, 546, 577], "get_status_update_funct": 530, "job_typ": 530, "sent": 532, "throughput": 532, "acc_input_model": 532, "acc_optimized_model": 532, "size_input_model": 532, "size_optimized_model": 532, "path_optimized_model": 532, "optimization_tim": 532, "insert_data": 532, "calculate_throughput": 532, "readi": 532, "ensure_working_path_exist": 533, "clean_log": 533, "workdir_path": 533, "is_hidden": 534, "get_dataset_path": 534, "get_file_extens": 534, "lead": [534, 567, 580, 585, 586], "is_dataset_fil": 534, "normalize_domain": 534, "underscor": 534, "normalize_framework": 534, "normalize_str": 534, "string_to_norm": 534, "get_model_zoo_config_path": 534, "model_dict": 534, "get_model_zoo_model_path": 534, "check_modul": 534, "get_module_vers": 534, "mb": 534, "add_unit": 534, "load_model_config": 534, "load_dataloader_config": 534, "load_transforms_config": 534, "load_transforms_filter_config": 534, "meaning": [534, 583], "load_precisions_config": 534, "get_default_pruning_config_path": 534, "load_model_wise_param": 534, "load_metrics_config": 534, "get_metrics_dict": 534, "load_help_nc_param": 534, "replace_with_valu": 534, "file_path": 534, "verify_file_path": 534, "determine_ip": 534, "ip": 534, "is_development_env": 534, "nc_mode": 534, "filter_transform": 534, "parse_bool_valu": 534, "release_tag": 534, "get_shape_from_transform": 534, "get_height_width_from_s": 534, "parse_to_string_list": 534, "parse_to_float_list": 534, "export_to_csv": 534, "parse_vers": 534, "string_vers": 534, "remove_dataload": 535, "datalad": 535, "remove_accuracy_metr": 535, "set_evaluation_dataload": 535, "udpat": 535, "set_evaluation_dataset_path": 535, "get_performance_config": 535, "set_performance_cores_per_inst": 535, "get_performance_cores_per_inst": 535, "set_performance_num_of_inst": 535, "get_performance_num_of_inst": 535, "set_accuracy_and_performance_batch_s": 535, "set_quantization_dataload": 535, "set_quantization_dataset_path": 535, "set_quantization_batch_s": 535, "set_accuracy_go": 535, "accuracy_go": 535, "set_accuracy_metr": 535, "set_transform": 535, "process_transform": 535, "set_quantization_approach": 535, "set_input": 535, "set_output": 535, "set_quantization_sampling_s": 535, "set_performance_warmup": 535, "set_performance_iter": 535, "set_optimization_precis": 535, "yaml_path": 535, "is_dummi": 536, "labelbal": [536, 564, 565], "set_transforms_from_list": 536, "transforms_list": 536, "set_dataset": 536, "postprocessschema": 537, "get_label_shift_valu": 537, "set_accuracy_postprocess_transform": 537, "set_precis": [538, 540], "sgdoptim": 542, "adamwoptim": 542, "adamoptim": 542, "crossentropylosscriterion": 542, "sparsecategoricalcrossentropycriterion": 542, "knowledgedistillationlosscriterion": 542, "set_postprocess_transform": 542, "weightcompressionapproach": 542, "initialize_prun": 542, "pruner_dict_list": 542, "serialize_prun": 542, "parse_dict_value_to_float": 542, "parse_dict_value_to_int": 542, "wiseconfigdetail": 543, "wiseconfig": 543, "acccriterion": 544, "exitpolici": 544, "set_timeout": 544, "set_max_tri": 544, "trial": [544, 595], "set_performance_onli": 544, "float_represent": 545, "dumper": 545, "pruner_represent": 545, "outsid": 546, "create_simple_respons": 546, "gui": [546, 547, 551, 562, 576, 577], "messagequeu": 546, "queue": [546, 551], "post_failur": 546, "post_success": 546, "post_error": 546, "wait": 546, "global_config_directori": 547, "set_up": 547, "determine_values_from_environ": 547, "get_command_line_arg": 547, "determine_server_port": 547, "max_ports_tri": 547, "port_default": 547, "determine_gui_port": 547, "client": [547, 562], "server_port": 547, "unless": [547, 573], "is_port_taken": 547, "determine_log_level": 547, "determine_url_prefix": 547, "get_url": 547, "dump_token_to_fil": 547, "servicenotfoundexcept": 548, "unknown": 548, "connector": 550, "routingdefinit": 550, "rout": 550, "realtimeroutingdefinit": 550, "realtim": 550, "deferredroutingdefinit": 550, "deferredsubprocessroutingdefinit": 550, "spawn": 550, "get_system_info": 550, "endpoint": 551, "run_serv": 551, "webserv": 551, "get_tls_arg": 551, "tl": [551, 562], "block_ifram": 551, "werkzeug": [551, 559], "ifram": 551, "csp": 551, "block_snif": 551, "mime": 551, "snif": 551, "require_api_token": 551, "author": [551, 578], "handle_api_cal": 551, "subpath": 551, "allow_api_cal": 551, "page_not_found": 551, "disable_cach": 551, "build_paramet": 551, "flask": [551, 562], "web_socket_publish": 551, "web_socket": 551, "flask_socketio": 551, "socketio": [551, 562], "benchmarkservic": 552, "workloadservic": [552, 556, 557, 560], "historysnapshotpars": 553, "history_snapshot": 553, "provide_perform": 553, "parse_history_snapshot": 553, "parse_history_item": 553, "history_item": 553, "extract_accuraci": 553, "extract_perform": 553, "modelservic": 555, "optimizationservic": 556, "profilingservic": 557, "generate_csv": 557, "processor": [558, 580, 584, 587, 589, 590, 597], "requestdataprocessor": 558, "get_string_valu": 558, "responsegener": 559, "serve_from_filesystem": 559, "mimetyp": 559, "as_attach": 559, "add_refresh": 559, "refresh_tim": 559, "refresh": 559, "from_except": 559, "get_status_code_for_except": 559, "get_code_templ": 560, "get_output": 560, "conda": [562, 572, 577, 591], "forg": [562, 572, 577], "setup": [562, 573, 577, 585], "ui": 562, "5000": 562, "338174d13706855fc6924cec7b3a8ae8": 562, "listen": 562, "firewal": 562, "8080": 562, "cert": 562, "path_to_cert": 562, "crt": 562, "path_to_private_kei": 562, "encrypt": 562, "insecur": 562, "expos": 562, "forfeit": 562, "threat": 562, "button": [562, 576], "pop": 562, "recognit": [562, 569, 593], "few": [562, 587, 595], "finish": 562, "synthet": 562, "plu": 562, "icon": 562, "section": [562, 567, 585, 588, 596], "unfold": 562, "On": [562, 589], "panel": 562, "navig": 562, "trash": 562, "visibl": 562, "cursor": 562, "prompt": [562, 569], "confirm": 562, "exit": [562, 580, 596], "pencil": 562, "light": [562, 568], "blue": 562, "color": 562, "row": [562, 585], "arrow": 562, "checkbox": 562, "chart": [562, 589, 592, 593], "offer": [562, 565], "conveni": 562, "variat": 562, "yellow": 562, "remind": 562, "dialog": 562, "cryptographi": 562, "linux": 563, "window": 563, "x86_64": 563, "aarch64": 563, "often": [564, 567, 583, 585, 586], "encount": 564, "consum": 564, "lack": 564, "faster": [564, 566, 587, 597], "hard": 564, "treat": 564, "manner": [564, 567, 581], "post_training_static_qu": [564, 565, 588, 595], "300": [564, 565], "output_model": [564, 593], "customis": [564, 565], "ensp": [565, 579, 594], "imagerecord": [565, 569, 596], "image_nam": 565, "cocorecord": 565, "gt": [565, 571, 594], "float16": 565, "int64": 565, "style_transf": 565, "content": 565, "tfrecorddataset": 565, "helloworld": [565, 594], "aid": 566, "increas": [566, 576, 595], "infrastructur": 566, "deploi": [567, 595], "power": [567, 584], "mobil": [567, 597], "workflow": [567, 577, 580, 593], "produc": 567, "softmax": 567, "l": [567, 593, 595], "kd": 567, "kullback": 567, "leibler": 567, "patient": 567, "compact": [567, 585, 586], "ia": 567, "attach": 567, "shallow": 567, "deepest": 567, "deeper": 567, "10006": 567, "training_func_for_nc": 567, "distil_loss": 567, "lr": [567, 569], "huge": [568, 586], "bit": [568, 580, 587, 589], "heavi": 568, "booster": 568, "degrad": 568, "retrain": [568, 585, 586], "incorpor": [568, 595], "novel": 568, "horovod": 569, "builtin": 569, "program": [569, 578, 580], "addition": [569, 595], "enable_eager_execut": 569, "yaml_file_path": 569, "evaluation_time_cost": 569, "partit": 569, "distributedsampl": 569, "train_sampl": 569, "train_dataset": 569, "num_replica": 569, "train_load": 569, "train_kwarg": 569, "adadelta": 569, "distributedoptim": 569, "named_paramet": 569, "broadcast_paramet": 569, "root_rank": 569, "broadcast_optimizer_st": 569, "set_epoch": 569, "batch_idx": 569, "zero_grad": [569, 585], "nll_loss": 569, "log_interv": 569, "0f": 569, "tloss": 569, "6f": 569, "dry_run": 569, "test_func": 569, "num_of_process": 569, "002": 569, "ssh": 569, "readm": 569, "exactli": 569, "resnet50_v1": 569, "topk": [569, 579], "resizecropimagenet": [569, 594], "realiz": [569, 579, 582, 590, 592], "tow": 569, "situat": 569, "node1": 569, "node2": 569, "TO": 569, "your_node1_nam": 569, "your_node2_nam": 569, "resnet50_fp32_pretrained_model": 569, "nc_resnet50_v1": 569, "wide": [570, 580, 586, 589], "varieti": [570, 588, 595], "demonstr": [570, 585, 586, 593], "exchang": 571, "hope": 571, "briefli": [571, 585], "matur": 571, "major": [571, 574, 589], "reus": 571, "inc_model": [571, 581], "fp32_onnx_config": 571, "randn": 571, "int8_onnx_config": 571, "matmulintegertofloat": 571, "matmulinteg": 571, "incompat": 572, "88": [572, 592, 597], "80": [572, 593, 597], "pyobject": 572, "reinstal": 572, "importerror": 572, "libgl": 572, "apt": [572, 577], "yum": [572, 577], "opencv": 572, "conflict": 572, "pend": 572, "27": [572, 577, 597], "quick": [573, 596], "friendli": [573, 596], "let": [573, 588, 596], "syntax": 573, "up1": 573, "up2": 573, "valid_mixed_precis": 573, "per_tensor": [573, 596], "grappler_optim": 573, "constfold": 573, "arithmet": 573, "debug_stripp": 573, "concept": [574, 592], "custom_metr": 574, "explicitli": 574, "refin": [574, 586], "These": 576, "broad": 576, "snippet": 576, "upload": 576, "qintegerop": [576, 589], "plan": [576, 580], "uninstal": 577, "frequent": 577, "ask": 577, "consolid": 577, "eas": [577, 587], "streamlin": 577, "scienc": 577, "anaconda": 577, "suit": [577, 593], "esri": 577, "apach": 578, "softwar": [578, 580, 584, 587, 591], "copyright": 578, "accompani": 578, "research": 578, "wish": 578, "bibtex": 578, "misc": 578, "feng": 578, "tian": 578, "hanwen": 578, "haihao": 578, "shen": 578, "suyu": 578, "chen": 578, "titl": 578, "howpublish": 578, "year": 578, "logo": [578, 584], "atom": 578, "phi": 578, "pentium": 578, "vtune": 578, "corpor": [578, 584], "subsidiari": [578, 584], "brand": [578, 584], "claim": [578, 584], "popularli": 579, "label_map": 579, "decis": 579, "ap": 579, "curv": 579, "turn": 579, "target_boxes_num": 579, "str_label": 579, "int_label": 579, "inturn": 579, "cocomap": 579, "vocmap": 579, "categor": 579, "multiclass": 579, "multilabel": 579, "multi_metr": 579, "newmetr": 579, "reflect": [579, 584, 594], "recent": 580, "growth": [580, 586], "complex": [580, 586], "significantli": [580, 585, 586], "bfloat16": [580, 590], "half": 580, "sixteen": 580, "bandwidth": 580, "launch": 580, "3rd": [580, 587, 589, 590], "gen": [580, 587, 590], "codenam": 580, "x86": 580, "avx512": [580, 589], "vcvtne2ps2bf16": 580, "vcvtneps2bf16": 580, "vdpbf16p": 580, "avx512_bf16": 580, "consequ": 580, "persist": 581, "brought": [581, 589], "tf2": 581, "h5": 581, "onnx_ml_pb2": 581, "hybridblock": 581, "0000": 581, "saved_result": 581, "multi_object": 582, "peak": 582, "simultan": [583, 588], "arbitrari": 583, "gain": [583, 587], "benefit": [583, 585], "distillation_criterion": 583, "d_conf": 583, "p_conf": 583, "platinum": [584, 597], "8358": 584, "manufactur": 584, "m50cyp2sbstd": 584, "se5c620": 584, "86b": 584, "0005": 584, "2202160810": 584, "microcod": 584, "0xd000332": 584, "irq": 584, "60ghz": 584, "6chz": 584, "perf": 584, "512gb": 584, "16x32gb": 584, "ddr4": 584, "3200": 584, "mt": 584, "nic": 584, "1x": 584, "ethernet": 584, "100mb": 584, "i350": 584, "gigabit": 584, "drive": 584, "intel_ssdsckkb48": 584, "447": 584, "1g": 584, "factor": [584, 597], "publicli": 584, "degre": 584, "mark": 584, "trademark": 584, "art": [585, 586], "increasingli": [585, 586], "crucial": [585, 586], "salient": [585, 586], "nonzero": [585, 586], "irregular": [585, 586], "anywher": [585, 586], "2in4": 585, "amper": 585, "ic": [585, 587], "oc": 585, "kh": 585, "kw": 585, "fastform": 585, "finetun": [585, 586, 597], "downstream": [585, 586], "formula": [585, 586], "exemplifi": 585, "complement": 585, "pruner1": 585, "layer1": 585, "layer3": 585, "rate": [585, 589], "pruner2": 585, "snip_momentum_progress": 585, "layer2": 585, "num_train_epoch": 585, "lr_schedul": 585, "mention": 585, "cv": [585, 586], "grown": 586, "unpreced": 586, "smooth": 586, "tradit": 586, "cube": 586, "discourag": 586, "idea": [586, 595], "penal": 586, "l2": 586, "parametr": 586, "namhoon": 586, "lee": 586, "thalaiyasingam": 586, "ajanthan": 586, "philip": 586, "torr": 586, "2019": 586, "applianc": 587, "bitnami": 587, "oct": 587, "innov": 587, "plug": 587, "twitter": 587, "linkedin": 587, "zone": 587, "land": 587, "gcp": 587, "aw": [587, 597], "azur": 587, "marketplac": 587, "pat": 587, "keynot": 587, "intelon": 587, "sep": 587, "alibaba": 587, "chines": 587, "aug": 587, "purif": 587, "sacrif": 587, "jun": 587, "partner": 587, "democrat": 587, "apr": 587, "ecosystem": 587, "mar": 587, "feb": 587, "jan": 587, "bilibili": 587, "ml": 587, "doubl": 587, "mlperf": [587, 597], "reconstruct": 587, "abound": 587, "lpot": [587, 591], "cern": 587, "gan": 587, "3dgan": 587, "4th": 587, "iml": 587, "workshop": 587, "highli": 587, "intelcaff": 587, "aris": 588, "advantag": 588, "tell": 588, "henc": 588, "post_training_dynamic_qu": [588, 595], "quant_aware_train": 588, "initial_spars": [588, 596], "prune_typ": [588, 596], "basic_magnitud": [588, 596], "start_epoch": [588, 596], "end_epoch": [588, 596], "update_frequ": 588, "prune_domain": 588, "tile_pattern_1x1": 588, "graph_optimization_level": 588, "disable_al": 588, "veri": [589, 595], "invent": 589, "int4": 589, "cost": 589, "theoret": 589, "affin": 589, "zeropoint": 589, "asymmetr": [589, 595], "earli": [589, 595, 596], "overflow": 589, "solv": [589, 591], "fbgemm": 589, "unseen": 589, "enough": 589, "peopl": 589, "emul": 589, "mimic": 589, "fact": 589, "ultim": 589, "pain": 589, "lossi": 589, "understand": [589, 593], "philosophi": 589, "val_dataset": 589, "val_dataload": 589, "worker": 589, "ping_memori": 589, "val_load": 589, "avg": 589, "enhanc": 590, "bf16wrapper": 590, "retrac": 590, "site": 591, "assist": 591, "comparison": [591, 593], "sed": 591, "your_script": 591, "visual": [592, 593, 595], "hyperparamet": [592, 595], "backbon": 592, "interact": 592, "sigopt_api_token": [592, 595], "sigopt_project_id": [592, 595], "sigopt_experiment_id": 592, "nc": [592, 595], "login": 592, "certain": 592, "suffici": 592, "ordinari": 592, "capac": 592, "sigopt_experiment_nam": [592, 595], "analysi": 592, "mobilenet": [592, 597], "8266": 592, "8372": 592, "2132": 592, "83": [592, 597], "7495": 592, "8299": 592, "8294": 592, "85": [592, 597], "0837": 592, "8291": 592, "4469": 592, "discov": 593, "why": 593, "valuabl": 593, "instrument": 593, "writer": 593, "_pre_eval_hook": 593, "submodul": 593, "whitelist": 593, "_recordingobserv": 593, "output_tensors_dict": 593, "current_it": 593, "get_tensor_valu": 593, "_observer_forward_hook": 593, "activation_post_process": 593, "_add_observer_": 593, "named_children": 593, "leaf": 593, "add_modul": 593, "register_forward_hook": 593, "dump_tim": 593, "summarywrit": 593, "_acc": 593, "tune_": 593, "add_graph": 593, "get_observer_dict": 593, "observer_dict": 593, "is_quant": 593, "add_histogram": 593, "bind_al": 593, "logdir_spec": 593, "tune_0_acc0": 593, "tune_1": 593, "tune_1_acc0": 593, "79": [593, 597], "four": 593, "baseline_acc_0": 593, "776": 593, "tune_1_acc_0": 593, "095": 593, "runs_v3": 593, "image_recognit": 593, "run_tuning_dump_tensor": 593, "sh": 593, "inceptionv3": 593, "v0": 593, "cg": 593, "conv0": 593, "op_wis": [593, 596], "bash": 593, "run_tun": 593, "topologi": 593, "inception_v3": 593, "dataset_loc": 593, "inceptionv3_fp32_pretrained_model": 593, "nc_inceptionv3": 593, "inceptionv3_dump_tensor": 593, "poor": 593, "disappear": 593, "centercrop": 594, "randomresizedcrop": 594, "randomcrop": 594, "cropres": 594, "decodeimag": 594, "jpeg": 594, "encodejp": 594, "alignimagechannel": 594, "68": [594, 597], "116": 594, "78": [594, 597], "103": 594, "94": [594, 597], "017": 594, "bilinearimagenet": [594, 596], "totensor": 594, "topilimag": 594, "padding_mod": 594, "border": 594, "colorjitt": 594, "bright": 594, "satur": 594, "hue": 594, "jitter": 594, "tondarrai": 594, "human": 595, "post_training_auto_qu": 595, "ii": 595, "iii": 595, "classic": 595, "primari": 595, "spent": 595, "hawq_v2_loss": 595, "model_loss": 595, "compli": 595, "focu": 595, "short": 595, "never": 595, "loglevel": 595, "endlessli": 595, "perspect": 595, "smbo": 595, "appl": 595, "surrog": 595, "divid": 595, "quantil": 595, "x1": 595, "x2": 595, "densiti": 595, "parzen": 595, "greatest": 595, "hour": 595, "dai": 595, "abctunestrategi": 595, "overridden": 595, "mobilenet_v1": 596, "onnxrt_integ": 596, "onnxrt_qlinear": 596, "image_tensor": 596, "subsect": 596, "model_wis": 596, "conv1": 596, "hyper": 596, "40": [596, 597], "06": [596, 597], "beta_1": 596, "beta_2": 596, "999": 596, "sparsecategoricalcrossentropi": 596, "reduct": 596, "sum_over_batch_s": 596, "from_logit": 596, "54": [596, 597], "19": [596, 597], "90": [596, 597], "nesterov": 596, "weight_decai": 596, "overal": 596, "8380": 597, "performancethroughput": 597, "sec": 597, "efficientnet": 597, "76": 597, "74": 597, "91": 597, "43": 597, "69": 597, "32x": 597, "cnn": 597, "incept": 597, "37": 597, "65": 597, "38": 597, "77": 597, "53": 597, "62": 597, "57x": 597, "46": 597, "61": 597, "58x": 597, "resnet101": 597, "39": 597, "63": 597, "11x": 597, "71": 597, "51x": 597, "26": 597, "59": 597, "23": 597, "06x": 597, "25x": 597, "70": 597, "44": 597, "00": 597, "163": 597, "133": 597, "22x": 597, "73": 597, "97": 597, "49": 597, "111": 597, "20x": 597, "v3": 597, "67": 597, "43x": 597, "v4": 597, "18": 597, "56": 597, "53x": 597, "36": 597, "33x": 597, "44x": 597, "374": 597, "226": 597, "66x": 597, "92": 597, "41x": 597, "fashion": 597, "359": 597, "244": 597, "47x": 597, "172": 597, "66": 597, "98x": 597, "153": 597, "76x": 597, "151": 597, "112": 597, "35x": 597, "26x": 597, "72": 597, "99": 597, "56x": 597, "82": 597, "93x": 597, "vgg16": 597, "89": 597, "178": 597, "14x": 597, "vgg19": 597, "156": 597, "18x": 597, "albert": 597, "23x": 597, "barthez": 597, "81": 597, "86": 597, "82x": 597, "203": 597, "01x": 597, "216": 597, "102": 597, "10x": 597, "sst2": 597, "218": 597, "stsb": 597, "57": 597, "48": 597, "49x": 597, "93": 597, "70x": 597, "50x": 597, "40x": 597, "blendcnn": 597, "3878": 597, "3717": 597, "04x": 597, "camembert": 597, "188": 597, "91x": 597, "ctrl": 597, "deberta": 597, "124": 597, "81x": 597, "347": 597, "73x": 597, "382": 597, "198": 597, "flaubert": 597, "561": 597, "35": 597, "370": 597, "52x": 597, "hubert": 597, "84": 597, "36x": 597, "409": 597, "181": 597, "longform": 597, "28x": 597, "mbart": 597, "16x": 597, "639": 597, "490": 597, "31x": 597, "lvwerra": 597, "pegasu": 597, "samsum": 597, "19x": 597, "peleenet": 597, "419": 597, "316": 597, "resnet18": 597, "686": 597, "332": 597, "07x": 597, "611": 597, "333": 597, "83x": 597, "327": 597, "162": 597, "resnext101_32x8d": 597, "175": 597, "88x": 597, "197": 597, "99x": 597, "se_resnext50_32x4d": 597, "308": 597, "144": 597, "13x": 597, "squeezebert": 597, "186": 597, "155": 597, "78x": 597, "transfo": 597, "xl": 597, "37x": 597, "wave2vec2": 597, "60": 597, "58": 597, "21x": 597, "114": 597, "15x": 597, "yolo": 597, "29x": 597, "690": 597, "330": 597, "09x": 597, "614": 597, "334": 597, "84x": 597, "54x": 597, "410": 597, "168": 597, "resnext101_32x16d_wsl": 597, "1189": 597, "680": 597, "75x": 597, "677": 597, "381": 597, "59x": 597, "alexnet": 597, "960": 597, "469": 597, "05x": 597, "962": 597, "466": 597, "arcfac": 597, "235": 597, "130": 597, "294": 597, "34x": 597, "604": 597, "51": 597, "80x": 597, "caffenet": 597, "1501": 597, "536": 597, "1493": 597, "533": 597, "1372": 597, "485": 597, "541": 597, "480": 597, "1250": 597, "753": 597, "1130": 597, "748": 597, "emot": 597, "ferplu": 597, "336": 597, "65x": 597, "fcn": 597, "googlenet": 597, "740": 597, "587": 597, "770": 597, "567": 597, "824": 597, "601": 597, "819": 597, "597": 597, "45x": 597, "613": 597, "506": 597, "2454": 597, "1543": 597, "2164": 597, "1564": 597, "38x": 597, "2147": 597, "1046": 597, "1877": 597, "1054": 597, "mobilenetv2": 597, "2751": 597, "1797": 597, "2656": 597, "1835": 597, "7615": 597, "7646": 597, "764": 597, "901": 597, "434": 597, "141": 597, "7614": 597, "575": 597, "952": 597, "433": 597, "7226": 597, "7229": 597, "761": 597, "432": 597, "615": 597, "722": 597, "032": 597, "894": 597, "885": 597, "454": 597, "95x": 597, "603": 597, "455": 597, "644": 597, "636": 597, "254": 597, "791": 597, "shufflenet": 597, "2298": 597, "55": 597, "1480": 597, "55x": 597, "1951": 597, "1490": 597, "squeezenet": 597, "2588": 597, "1605": 597, "61x": 597, "2566": 597, "1936": 597, "725": 597, "570": 597, "27x": 597, "666": 597, "539": 597, "641": 597, "519": 597, "633": 597, "492": 597, "542": 597, "401": 597, "68x": 597, "tini": 597, "yolov3": 597, "648": 597, "518": 597, "221": 597, "319": 597, "307": 597, "30x": 597, "yolov4": 597, "zfnet": 597, "459": 597, "261": 597, "460": 597, "264": 597, "74x": 597, "441": 597, "337": 597, "272": 597, "211": 597, "152": 597, "423": 597, "180": 597, "311": 597, "69x": 597, "taskdataset": 597, "accuracyspars": 597, "ratiospars": 597, "commentsbalanc": 597, "unbalanc": 597, "classificationimagenet": 597, "76top": 597, "13top": 597, "magnitudepost": 597, "magnitudequant": 597, "answeringsquad": 597, "34f1": 597, "2x1": 597, "lassounbalanc": 597, "classificationmnli": 597, "mm": 597, "allbalanc": 597, "classificationsst": 597, "32accuraci": 597, "sensitivitybalanc": 597, "classificationqqp": 597, "classificationqnli": 597, "54accuraci": 597, "em": 597, "87f1": 597, "momentumunbalanc": 597, "momentumbalanc": 597, "90f1": 597, "59f1": 597, "23f1": 597, "classificationmrpc": 597, "52f1": 597, "26f1": 597, "61accuraci": 597, "7965": 597, "wideresnet40": 597, "9522": 597, "8178": 597, "0213": 597, "8235": 597, "027": 597, "5494": 597, "7153": 597, "5540": 597, "0046": 597, "5523": 597, "0029": 597, "vgg": 597, "7022": 597, "7415": 597, "7025": 597, "0003": 597, "6739": 597, "7399": 597, "6845": 597, "0106": 597, "7034": 597, "8382": 597, "bilstm": 597, "sst": 597, "8314": 597, "9403": 597, "9048": 597, "0734": 597, "7323": 597, "8256": 597, "8084": 597, "8814": 597, "7442": 597, "8371": 597, "0119": 597, "0115": 597, "tinybert": 597, "8018": 597, "8044": 597, "8363": 597, "8411": 597, "8025": 597, "8074": 597, "0007": 597, "0030": 597, "8626": 597, "8213": 597, "9091": 597, "8782": 597, "8684": 597, "8259": 597, "0058": 597, "distilroberta": 597, "6057": 597, "6455": 597, "6187": 597, "0130": 597, "c6i": 597, "2xlarg": 597, "c6a": 597, "c6g": 597, "a100cuda": 597}, "objects": {"": [[50, 0, 0, "-", "644ec953a7dc_pruning_support"], [51, 0, 0, "-", "6ece06672ed3_v1_14"], [52, 0, 0, "-", "6f0d0f71d92e_v1_13"], [53, 0, 0, "-", "9e89549a08c8_v1_11"], [54, 0, 0, "-", "block_mask"], [55, 0, 0, "-", "env"], [318, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[51, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [51, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[55, 1, 1, "", "run_migrations_offline"], [55, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[318, 2, 1, "", "Benchmark"], [318, 2, 1, "", "DistillationConfig"], [318, 2, 1, "", "PostTrainingQuantConfig"], [318, 2, 1, "", "QuantizationAwareTrainingConfig"], [318, 2, 1, "", "WeightPruningConfig"], [57, 0, 0, "-", "adaptor"], [194, 0, 0, "-", "algorithm"], [196, 0, 0, "-", "benchmark"], [199, 0, 0, "-", "conf"], [201, 0, 0, "-", "config"], [202, 0, 0, "-", "contrib"], [227, 0, 0, "-", "data"], [276, 0, 0, "-", "experimental"], [325, 0, 0, "-", "metric"], [327, 0, 0, "-", "mix_precision"], [329, 0, 0, "-", "model"], [337, 0, 0, "-", "objective"], [339, 0, 0, "-", "pruner"], [353, 0, 0, "-", "quantization"], [318, 1, 1, "", "set_random_seed"], [318, 1, 1, "", "set_tensorboard"], [318, 1, 1, "", "set_workspace"], [360, 0, 0, "-", "strategy"], [369, 0, 0, "-", "training"], [373, 0, 0, "-", "utils"], [515, 0, 0, "-", "ux"], [561, 0, 0, "-", "version"]], "neural_compressor.Benchmark": [[318, 3, 1, "", "dataloader"], [318, 3, 1, "", "metric"], [318, 3, 1, "", "postprocess"]], "neural_compressor.DistillationConfig": [[318, 4, 1, "", "criterion"], [318, 4, 1, "", "optimizer"], [318, 4, 1, "", "teacher_model"]], "neural_compressor.PostTrainingQuantConfig": [[318, 4, 1, "", "approach"], [318, 4, 1, "", "tuning_criterion"]], "neural_compressor.QuantizationAwareTrainingConfig": [[318, 4, 1, "", "approach"]], "neural_compressor.WeightPruningConfig": [[318, 4, 1, "", "weight_compression"]], "neural_compressor.adaptor": [[56, 0, 0, "-", "adaptor"], [58, 0, 0, "-", "keras"], [59, 0, 0, "-", "keras_utils"], [61, 0, 0, "-", "mxnet"], [62, 0, 0, "-", "mxnet_utils"], [64, 0, 0, "-", "onnxrt"], [66, 0, 0, "-", "ox_utils"], [89, 0, 0, "-", "pytorch"], [90, 0, 0, "-", "query"], [91, 0, 0, "-", "tensorflow"], [151, 0, 0, "-", "tf_utils"], [188, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[56, 2, 1, "", "Adaptor"], [56, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[56, 3, 1, "", "convert"], [56, 3, 1, "", "evaluate"], [56, 3, 1, "", "inspect_tensor"], [56, 3, 1, "", "quantize"], [56, 3, 1, "", "quantize_input"], [56, 3, 1, "", "query_fused_patterns"], [56, 3, 1, "", "query_fw_capability"], [56, 3, 1, "", "save"], [56, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[58, 2, 1, "", "KerasAdaptor"], [58, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[58, 3, 1, "", "convert"], [58, 3, 1, "", "evaluate"], [58, 3, 1, "", "get_optype_wise_ability"], [58, 3, 1, "", "inspect_tensor"], [58, 3, 1, "", "quantize"], [58, 3, 1, "", "quantize_input"], [58, 3, 1, "", "query_fw_capability"], [58, 3, 1, "", "save"], [58, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[58, 3, 1, "", "get_op_types"], [58, 3, 1, "", "get_op_types_by_precision"], [58, 3, 1, "", "get_precisions"], [58, 3, 1, "", "get_quantization_capability"], [58, 3, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[60, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[61, 2, 1, "", "MXNetQuery"], [61, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MXNetQuery": [[61, 3, 1, "", "get_fuse_patterns"], [61, 3, 1, "", "get_mixed_precision_combination"], [61, 3, 1, "", "get_op_types"], [61, 3, 1, "", "get_precisions"], [61, 3, 1, "", "get_quantization_capability"], [61, 3, 1, "", "get_version"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[61, 3, 1, "", "evaluate"], [61, 3, 1, "", "inspect_tensor"], [61, 3, 1, "", "quantize"], [61, 3, 1, "", "query_fw_capability"], [61, 3, 1, "", "recover_tuned_model"], [61, 3, 1, "", "save"], [61, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[63, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[63, 2, 1, "", "CalibCollector"], [63, 2, 1, "", "CalibData"], [63, 2, 1, "", "CollectorBase"], [63, 2, 1, "", "DataIterLoader"], [63, 2, 1, "", "DataLoaderWrap"], [63, 2, 1, "", "NameCollector"], [63, 2, 1, "", "OpType"], [63, 2, 1, "", "TensorCollector"], [63, 1, 1, "", "amp_convert"], [63, 1, 1, "", "calib_model"], [63, 1, 1, "", "check_mx_version"], [63, 1, 1, "", "combine_capabilities"], [63, 1, 1, "", "create_data_example"], [63, 1, 1, "", "distribute_calib_tensors"], [63, 1, 1, "", "ensure_list"], [63, 1, 1, "", "fuse"], [63, 1, 1, "", "get_framework_name"], [63, 1, 1, "", "is_model_quantized"], [63, 1, 1, "", "isiterable"], [63, 1, 1, "", "make_module"], [63, 1, 1, "", "make_nc_model"], [63, 1, 1, "", "make_symbol_block"], [63, 1, 1, "", "ndarray_to_device"], [63, 1, 1, "", "parse_tune_config"], [63, 1, 1, "", "prepare_dataloader"], [63, 1, 1, "", "prepare_model"], [63, 1, 1, "", "prepare_model_data"], [63, 1, 1, "", "quantize_sym_model"], [63, 1, 1, "", "query_quantizable_nodes"], [63, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.mxnet_utils.util.CalibCollector": [[63, 3, 1, "", "calc_kl_th_dict"], [63, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.CalibData": [[63, 4, 1, "", "min_max_dict"], [63, 3, 1, "", "post_collect"]], "neural_compressor.adaptor.mxnet_utils.util.CollectorBase": [[63, 3, 1, "", "collect_gluon"], [63, 3, 1, "", "collect_module"], [63, 3, 1, "", "post_batch"], [63, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.mxnet_utils.util.NameCollector": [[63, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.TensorCollector": [[63, 3, 1, "", "collect_gluon"], [63, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.onnxrt": [[64, 2, 1, "", "ONNXRTQuery"], [64, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [64, 2, 1, "", "ONNXRT_QDQAdaptor"], [64, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [64, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[64, 3, 1, "", "get_graph_optimization"], [64, 3, 1, "", "get_op_types"], [64, 3, 1, "", "get_op_types_by_precision"], [64, 3, 1, "", "get_precisions"], [64, 3, 1, "", "get_quantization_capability"], [64, 3, 1, "", "get_version"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[64, 3, 1, "", "evaluate"], [64, 3, 1, "", "inspect_tensor"], [64, 3, 1, "", "quantize"], [64, 3, 1, "", "query_fw_capability"], [64, 3, 1, "", "recover"], [64, 3, 1, "", "save"], [64, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.ox_utils": [[65, 0, 0, "-", "calibration"], [78, 0, 0, "-", "operators"], [87, 0, 0, "-", "quantizer"], [88, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[65, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[65, 3, 1, "", "augment_graph"], [65, 3, 1, "", "calculate_quantization_params"], [65, 3, 1, "", "calculate_scale_zeropoint"], [65, 3, 1, "", "dump_calibration"], [65, 3, 1, "", "dump_minmax"], [65, 3, 1, "", "dump_tensor"], [65, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[67, 0, 0, "-", "activation"], [68, 0, 0, "-", "argmax"], [69, 0, 0, "-", "attention"], [70, 0, 0, "-", "binary_op"], [71, 0, 0, "-", "concat"], [72, 0, 0, "-", "conv"], [73, 0, 0, "-", "direct_q8"], [74, 0, 0, "-", "embed_layernorm"], [75, 0, 0, "-", "gather"], [76, 0, 0, "-", "gavgpool"], [77, 0, 0, "-", "gemm"], [79, 0, 0, "-", "lstm"], [80, 0, 0, "-", "matmul"], [81, 0, 0, "-", "maxpool"], [82, 0, 0, "-", "ops"], [83, 0, 0, "-", "pad"], [84, 0, 0, "-", "pooling"], [85, 0, 0, "-", "resize"], [86, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[67, 2, 1, "", "ActivationOperator"], [67, 2, 1, "", "QActivationOperator"], [67, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator": [[67, 3, 1, "", "convert"], [67, 3, 1, "", "convert_check"], [67, 3, 1, "", "quantize"], [67, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator": [[67, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator": [[67, 3, 1, "", "quantize"], [67, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[68, 2, 1, "", "ArgMaxOperator"], [68, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator": [[68, 3, 1, "", "convert"], [68, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[69, 2, 1, "", "AttentionOperator"], [69, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator": [[69, 3, 1, "", "convert"], [69, 3, 1, "", "convert_check"], [69, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator": [[69, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[70, 2, 1, "", "BinaryOperator"], [70, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator": [[70, 3, 1, "", "convert"], [70, 3, 1, "", "convert_check"], [70, 3, 1, "", "quantize"], [70, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator": [[70, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[71, 2, 1, "", "ConcatOperator"], [71, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator": [[71, 3, 1, "", "cast"], [71, 3, 1, "", "convert"], [71, 3, 1, "", "convert_check"], [71, 3, 1, "", "quantize"], [71, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator": [[71, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[72, 2, 1, "", "ConvOperator"], [72, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator": [[72, 3, 1, "", "convert"], [72, 3, 1, "", "convert_check"], [72, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator": [[72, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[73, 2, 1, "", "Direct8BitOperator"], [73, 2, 1, "", "DirectCastOperator"], [73, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator": [[73, 3, 1, "", "cast"], [73, 3, 1, "", "convert"], [73, 3, 1, "", "convert_check"], [73, 3, 1, "", "quantize"], [73, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator": [[73, 3, 1, "", "cast"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[74, 2, 1, "", "EmbedLayerNormalizationOperator"], [74, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator": [[74, 3, 1, "", "convert"], [74, 3, 1, "", "convert_check"], [74, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator": [[74, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[75, 2, 1, "", "GatherOperator"], [75, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator": [[75, 3, 1, "", "convert"], [75, 3, 1, "", "convert_check"], [75, 3, 1, "", "quantize"], [75, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[76, 2, 1, "", "GlobalAveragePoolOperator"], [76, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator": [[76, 3, 1, "", "convert"], [76, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator": [[76, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[77, 2, 1, "", "GemmOperator"], [77, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator": [[77, 3, 1, "", "convert"], [77, 3, 1, "", "convert_check"], [77, 3, 1, "", "quantize"], [77, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator": [[77, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[79, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator": [[79, 3, 1, "", "convert"], [79, 3, 1, "", "convert_check"], [79, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[80, 2, 1, "", "MatMulOperator"], [80, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator": [[80, 3, 1, "", "convert"], [80, 3, 1, "", "convert_check"], [80, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator": [[80, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[81, 2, 1, "", "MaxPoolOperator"], [81, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator": [[81, 3, 1, "", "convert"], [81, 3, 1, "", "convert_check"], [81, 3, 1, "", "quantize"], [81, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[82, 2, 1, "", "Operator"], [82, 2, 1, "", "QOperator"], [82, 1, 1, "", "op_registry"], [82, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.ops.Operator": [[82, 3, 1, "", "cast"], [82, 3, 1, "", "convert"], [82, 3, 1, "", "convert_check"], [82, 3, 1, "", "quantize"], [82, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops.QOperator": [[82, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[83, 2, 1, "", "PadOperator"], [83, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator": [[83, 3, 1, "", "convert"], [83, 3, 1, "", "convert_check"], [83, 3, 1, "", "quantize"], [83, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[84, 2, 1, "", "PoolOperator"], [84, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator": [[84, 3, 1, "", "convert"], [84, 3, 1, "", "convert_check"], [84, 3, 1, "", "quantize"], [84, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator": [[84, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[85, 2, 1, "", "QResizeOperator"], [85, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator": [[85, 3, 1, "", "convert"], [85, 3, 1, "", "convert_check"], [85, 3, 1, "", "quantize"], [85, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[86, 2, 1, "", "QSplitOperator"], [86, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator": [[86, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator": [[86, 3, 1, "", "cast"], [86, 3, 1, "", "convert"], [86, 3, 1, "", "convert_check"], [86, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.quantizer": [[87, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer.Quantizer": [[87, 3, 1, "", "check_opset_version"], [87, 3, 1, "", "convert_qdq_to_operator_oriented"], [87, 3, 1, "", "dequantize_tensor"], [87, 3, 1, "", "dtype_cast"], [87, 3, 1, "", "get_bias_add_nodes"], [87, 3, 1, "", "insert_qdq"], [87, 3, 1, "", "is_valid_quantize_weight"], [87, 3, 1, "", "merge_dedicated_qdq_pair"], [87, 3, 1, "", "quantize_bias"], [87, 3, 1, "", "quantize_bias_tensor"], [87, 3, 1, "", "quantize_inputs"], [87, 3, 1, "", "quantize_model"], [87, 3, 1, "", "quantize_outputs"], [87, 3, 1, "", "quantize_weight_per_channel"], [87, 3, 1, "", "quantize_weights_per_channel"], [87, 3, 1, "", "remove_redundant_pairs"], [87, 3, 1, "", "should_cast"], [87, 3, 1, "", "should_convert"], [87, 3, 1, "", "should_quantize"], [87, 3, 1, "", "tensor_proto_to_array"]], "neural_compressor.adaptor.ox_utils.util": [[88, 2, 1, "", "QuantFormat"], [88, 2, 1, "", "QuantType"], [88, 2, 1, "", "QuantizationMode"], [88, 2, 1, "", "QuantizedInitializer"], [88, 2, 1, "", "QuantizedValue"], [88, 2, 1, "", "QuantizedValueType"], [88, 2, 1, "", "ValueInfo"], [88, 1, 1, "", "attribute_to_kwarg"], [88, 1, 1, "", "calculate_scale_zp"], [88, 1, 1, "", "cast_tensor"], [88, 1, 1, "", "collate_preds"], [88, 1, 1, "", "dequantize_data"], [88, 1, 1, "", "dequantize_data_with_scale_zero"], [88, 1, 1, "", "dtype_to_name"], [88, 1, 1, "", "find_by_name"], [88, 1, 1, "", "is_B_transposed"], [88, 1, 1, "", "make_dquant_node"], [88, 1, 1, "", "make_quant_node"], [88, 1, 1, "", "quantize_data"], [88, 1, 1, "", "quantize_data_per_channel"], [88, 1, 1, "", "quantize_data_with_scale_zero"], [88, 1, 1, "", "quantize_nparray"], [88, 1, 1, "", "remove_init_from_model_input"], [88, 1, 1, "", "split_shared_bias"]], "neural_compressor.adaptor.pytorch": [[89, 2, 1, "", "PyTorchAdaptor"], [89, 2, 1, "", "PyTorchQuery"], [89, 2, 1, "", "PyTorch_FXAdaptor"], [89, 2, 1, "", "PyTorch_IPEXAdaptor"], [89, 2, 1, "", "TemplateAdaptor"], [89, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[89, 3, 1, "", "evaluate"], [89, 3, 1, "", "get_non_quant_modules"], [89, 3, 1, "", "inspect_tensor"], [89, 3, 1, "", "is_fused_child"], [89, 3, 1, "", "is_fused_op"], [89, 3, 1, "", "is_last_fused_child"], [89, 3, 1, "", "quantize"], [89, 3, 1, "", "query_fw_capability"], [89, 3, 1, "", "save"], [89, 3, 1, "", "set_tensor"], [89, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[89, 3, 1, "", "get_op_types"], [89, 3, 1, "", "get_op_types_by_precision"], [89, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[89, 3, 1, "", "calculate_op_sensitivity"], [89, 3, 1, "", "convert_sub_graph"], [89, 3, 1, "", "evaluate"], [89, 3, 1, "", "fuse_fx_model"], [89, 3, 1, "", "prepare_sub_graph"], [89, 3, 1, "", "quantize"], [89, 3, 1, "", "query_fw_capability"], [89, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[89, 3, 1, "", "evaluate"], [89, 3, 1, "", "inspect_tensor"], [89, 3, 1, "", "quantize"], [89, 3, 1, "", "query_fw_capability"], [89, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[89, 3, 1, "", "calculate_hessian_trace"], [89, 3, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[90, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[90, 3, 1, "", "get_fuse_patterns"], [90, 3, 1, "", "get_mixed_precision_combination"], [90, 3, 1, "", "get_op_types"], [90, 3, 1, "", "get_precisions"], [90, 3, 1, "", "get_quantization_capability"], [90, 3, 1, "", "get_version"], [90, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[91, 2, 1, "", "TensorFlowAdaptor"], [91, 2, 1, "", "TensorflowQuery"], [91, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[91, 3, 1, "", "calculate_op_sensitivity"], [91, 3, 1, "", "convert"], [91, 3, 1, "", "diagnosis_helper"], [91, 3, 1, "", "evaluate"], [91, 3, 1, "", "fused_node_mapping"], [91, 3, 1, "", "get_optype_wise_ability"], [91, 3, 1, "", "get_output_op_names"], [91, 3, 1, "", "inspect_activation"], [91, 3, 1, "", "inspect_tensor"], [91, 3, 1, "", "inspect_weight_and_bias"], [91, 3, 1, "", "qat_convert"], [91, 3, 1, "", "quantize"], [91, 3, 1, "", "quantize_input"], [91, 3, 1, "", "query_fw_capability"], [91, 3, 1, "", "recover_tuned_model"], [91, 3, 1, "", "save"], [91, 3, 1, "", "set_tensor"], [91, 3, 1, "", "train"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[91, 3, 1, "", "generate_internal_patterns"], [91, 3, 1, "", "get_bf16_patterns"], [91, 3, 1, "", "get_eightbit_patterns"], [91, 3, 1, "", "get_fuse_patterns"], [91, 3, 1, "", "get_grappler_optimization_cfg"], [91, 3, 1, "", "get_mixed_precision_combination"], [91, 3, 1, "", "get_op_types"], [91, 3, 1, "", "get_op_types_by_precision"], [91, 3, 1, "", "get_precisions"], [91, 3, 1, "", "get_quantization_capability"], [91, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[91, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[92, 0, 0, "-", "graph_converter"], [93, 0, 0, "-", "graph_converter_without_calib"], [132, 0, 0, "-", "graph_rewriter"], [150, 0, 0, "-", "graph_util"], [152, 0, 0, "-", "quantize_graph"], [179, 0, 0, "-", "quantize_graph_common"], [182, 0, 0, "-", "transform_graph"], [185, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[92, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter": [[92, 3, 1, "", "bf16_convert"], [92, 3, 1, "", "convert"], [92, 3, 1, "", "quantize"], [92, 3, 1, "", "quantize_with_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[93, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib": [[93, 3, 1, "", "bf16_convert"], [93, 3, 1, "", "convert_without_calib"], [93, 3, 1, "", "quantize_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[95, 0, 0, "-", "bf16"], [120, 0, 0, "-", "generic"], [131, 0, 0, "-", "graph_base"], [140, 0, 0, "-", "int8"], [146, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[94, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[94, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[94, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[96, 0, 0, "-", "convert_add_to_biasadd"], [97, 0, 0, "-", "convert_layout"], [98, 0, 0, "-", "convert_leakyrelu"], [99, 0, 0, "-", "convert_nan_to_random"], [100, 0, 0, "-", "convert_placeholder_to_const"], [101, 0, 0, "-", "dequantize_cast_optimizer"], [102, 0, 0, "-", "dilated_contraction"], [103, 0, 0, "-", "dummy_biasadd"], [104, 0, 0, "-", "expanddims_optimizer"], [105, 0, 0, "-", "fetch_weight_from_reshape"], [106, 0, 0, "-", "fold_batch_norm"], [107, 0, 0, "-", "fold_constant"], [108, 0, 0, "-", "fuse_biasadd_add"], [109, 0, 0, "-", "fuse_column_wise_mul"], [110, 0, 0, "-", "fuse_conv_with_math"], [111, 0, 0, "-", "fuse_decomposed_bn"], [112, 0, 0, "-", "fuse_decomposed_in"], [113, 0, 0, "-", "fuse_gelu"], [114, 0, 0, "-", "fuse_layer_norm"], [115, 0, 0, "-", "fuse_pad_with_conv"], [116, 0, 0, "-", "fuse_pad_with_fp32_conv"], [117, 0, 0, "-", "fuse_reshape_transpose"], [118, 0, 0, "-", "graph_cse_optimizer"], [119, 0, 0, "-", "grappler_pass"], [121, 0, 0, "-", "insert_print_node"], [122, 0, 0, "-", "move_squeeze_after_relu"], [123, 0, 0, "-", "pre_optimize"], [124, 0, 0, "-", "remove_training_nodes"], [125, 0, 0, "-", "rename_batch_norm"], [126, 0, 0, "-", "split_shared_input"], [127, 0, 0, "-", "strip_equivalent_nodes"], [128, 0, 0, "-", "strip_unused_nodes"], [129, 0, 0, "-", "switch_optimizer"], [130, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[96, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[96, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[97, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[97, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[98, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[98, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[99, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[99, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[100, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[100, 3, 1, "", "do_transformation"], [100, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[101, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[101, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[102, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[102, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[103, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[103, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[104, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[104, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[105, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[105, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[106, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[106, 3, 1, "", "do_transformation"], [106, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[107, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[107, 3, 1, "", "check_all_folded"], [107, 3, 1, "", "check_const_inputs"], [107, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[108, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[108, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[109, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[109, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[110, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[110, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[111, 2, 1, "", "FuseDecomposedBNOptimizer"], [111, 1, 1, "", "bypass_reshape"], [111, 1, 1, "", "get_const_dim_count"], [111, 1, 1, "", "node_from_map"], [111, 1, 1, "", "node_name_from_input"], [111, 1, 1, "", "valid_reshape_inputs"], [111, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer": [[111, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[112, 2, 1, "", "FuseDecomposedINOptimizer"], [112, 1, 1, "", "bypass_reshape"], [112, 1, 1, "", "get_const_dim_count"], [112, 1, 1, "", "node_from_map"], [112, 1, 1, "", "node_name_from_input"], [112, 1, 1, "", "valid_reshape_inputs"], [112, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer": [[112, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[113, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[113, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[114, 2, 1, "", "FuseLayerNormOptimizer"], [114, 1, 1, "", "node_from_map"], [114, 1, 1, "", "node_name_from_input"], [114, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[114, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[115, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[115, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[116, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[117, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[117, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[118, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[118, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[119, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[119, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[121, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[121, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[122, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[122, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[123, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization": [[123, 3, 1, "", "get_excluded_node_names"], [123, 3, 1, "", "get_matched_nodes"], [123, 3, 1, "", "get_optimized_model"], [123, 3, 1, "", "has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[124, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[124, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[125, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[125, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[126, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[126, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[127, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[127, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[128, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[128, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[129, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[129, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[130, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[130, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[131, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[131, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[133, 0, 0, "-", "freeze_fake_quant"], [134, 0, 0, "-", "freeze_value"], [135, 0, 0, "-", "freeze_value_without_calib"], [136, 0, 0, "-", "fuse_conv_redundant_dequantize"], [137, 0, 0, "-", "fuse_conv_requantize"], [138, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [139, 0, 0, "-", "fuse_matmul_requantize"], [141, 0, 0, "-", "meta_op_optimizer"], [142, 0, 0, "-", "post_hostconst_converter"], [143, 0, 0, "-", "post_quantized_op_cse"], [144, 0, 0, "-", "rnn_convert"], [145, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[133, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[133, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[134, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[134, 3, 1, "", "do_transformation"], [134, 3, 1, "", "generate_output_graph"], [134, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[135, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[135, 3, 1, "", "do_transformation_without_calib"], [135, 3, 1, "", "generate_output_graph"], [135, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[136, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[136, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[137, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[137, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[138, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[138, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[139, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [139, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [139, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [139, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[139, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[139, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[139, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[139, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[141, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[141, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[142, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[142, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[143, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[143, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[144, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[144, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[145, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[145, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[147, 0, 0, "-", "insert_qdq_pattern"], [148, 0, 0, "-", "merge_duplicated_qdq"], [149, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[147, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[147, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[148, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[148, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[149, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[149, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[150, 2, 1, "", "GraphAnalyzer"], [150, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[150, 3, 1, "", "add_node"], [150, 3, 1, "", "dump_graph"], [150, 3, 1, "", "get_frame_info"], [150, 3, 1, "", "get_graph_input_output"], [150, 4, 1, "", "graph"], [150, 3, 1, "", "has_positive_input"], [150, 3, 1, "", "parse_graph"], [150, 3, 1, "", "query_fusion_pattern_nodes"], [150, 3, 1, "", "remove_node"], [150, 3, 1, "", "remove_node_with_single_input_output"], [150, 3, 1, "", "replace_const_node"], [150, 3, 1, "", "replace_constant_graph_with_constant_node"], [150, 3, 1, "", "replace_node"], [150, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[150, 3, 1, "", "analysis_rnn_model"], [150, 3, 1, "", "compare_node_attr"], [150, 3, 1, "", "create_constant_node"], [150, 3, 1, "", "create_node"], [150, 3, 1, "", "gen_valid_sampling_log"], [150, 3, 1, "", "generate_int32_bias_for_conv"], [150, 3, 1, "", "generate_int32_bias_for_matmul"], [150, 3, 1, "", "node_name_from_input"], [150, 3, 1, "", "set_attr_bool"], [150, 3, 1, "", "set_attr_dtype"], [150, 3, 1, "", "set_attr_float"], [150, 3, 1, "", "set_attr_int"], [150, 3, 1, "", "set_attr_int_list"], [150, 3, 1, "", "set_attr_string"], [150, 3, 1, "", "set_attr_string_list"], [150, 3, 1, "", "set_attr_tensor"], [150, 3, 1, "", "set_attr_type_list"], [150, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[154, 0, 0, "-", "qat"], [170, 0, 0, "-", "qdq"], [172, 0, 0, "-", "quantize_graph_base"], [173, 0, 0, "-", "quantize_graph_bn"], [174, 0, 0, "-", "quantize_graph_concatv2"], [175, 0, 0, "-", "quantize_graph_conv"], [176, 0, 0, "-", "quantize_graph_for_intel_cpu"], [177, 0, 0, "-", "quantize_graph_matmul"], [178, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[153, 0, 0, "-", "fake_quantize"], [155, 0, 0, "-", "quantize_config"], [156, 0, 0, "-", "quantize_helper"], [157, 0, 0, "-", "quantize_layers"], [162, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[153, 2, 1, "", "FakeQuantize"], [153, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[153, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[153, 3, 1, "", "from_config"], [153, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[155, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[155, 3, 1, "", "add_quantize_recipe"], [155, 3, 1, "", "clear_quantize_recipe"], [155, 3, 1, "", "get_quantize_recipe"], [155, 3, 1, "", "is_empty"], [155, 3, 1, "", "query_layer"], [155, 3, 1, "", "remove_layer"], [155, 3, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[156, 1, 1, "", "init_quantize_config"], [156, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[158, 0, 0, "-", "optimize_layer"], [159, 0, 0, "-", "quantize_layer_add"], [160, 0, 0, "-", "quantize_layer_base"], [161, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[158, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[159, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[160, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[161, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[162, 2, 1, "", "QuantizeWrapper"], [162, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[162, 3, 1, "", "build"], [162, 3, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[162, 3, 1, "", "build"], [162, 3, 1, "", "call"], [162, 3, 1, "", "compute_output_shape"], [162, 3, 1, "", "from_config"], [162, 3, 1, "", "get_config"], [162, 4, 1, "", "losses"], [162, 4, 1, "", "non_trainable_weights"], [162, 3, 1, "", "query_input_index"], [162, 4, 1, "", "trainable"], [162, 4, 1, "", "trainable_weights"], [162, 4, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[163, 0, 0, "-", "fuse_qdq_bn"], [164, 0, 0, "-", "fuse_qdq_concatv2"], [165, 0, 0, "-", "fuse_qdq_conv"], [166, 0, 0, "-", "fuse_qdq_deconv"], [167, 0, 0, "-", "fuse_qdq_in"], [168, 0, 0, "-", "fuse_qdq_matmul"], [169, 0, 0, "-", "fuse_qdq_pooling"], [171, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[163, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[163, 3, 1, "", "apply_newly_bn_leakyrelu_fusion"], [163, 3, 1, "", "apply_newly_bn_relu_fusion"], [163, 3, 1, "", "apply_the_transform"], [163, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[164, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[164, 3, 1, "", "apply_the_transform"], [164, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[165, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[165, 3, 1, "", "apply_conv3d_add_addn_fusion"], [165, 3, 1, "", "apply_conv3d_add_addn_relu_fusion"], [165, 3, 1, "", "apply_conv3d_add_fusion"], [165, 3, 1, "", "apply_conv3d_add_relu_fusion"], [165, 3, 1, "", "apply_conv3d_single_fusion"], [165, 3, 1, "", "apply_conv_biasadd_hardswish_fusion"], [165, 3, 1, "", "apply_newly_conv_biasadd_addn_fusion"], [165, 3, 1, "", "apply_newly_conv_biasadd_addn_relu_fusion"], [165, 3, 1, "", "apply_newly_conv_biasadd_fusion"], [165, 3, 1, "", "apply_newly_conv_biasadd_relu_fusion"], [165, 3, 1, "", "apply_newly_conv_biasadd_swishf32_fusion"], [165, 3, 1, "", "apply_newly_conv_single_fusion"], [165, 3, 1, "", "apply_the_transform"], [165, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[166, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[166, 3, 1, "", "apply_deconv2d_biasadd_fusion"], [166, 3, 1, "", "apply_deconv3d_biasadd_fusion"], [166, 3, 1, "", "apply_single_deconv2d_fusion"], [166, 3, 1, "", "apply_single_deconv3d_fusion"], [166, 3, 1, "", "apply_the_transform"], [166, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[167, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[167, 3, 1, "", "apply_newly_in_relu_fusion"], [167, 3, 1, "", "apply_the_transform"], [167, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[168, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[168, 3, 1, "", "apply_batchmatmulv2_fusion"], [168, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [168, 3, 1, "", "apply_matmul_biasadd_fusion"], [168, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [168, 3, 1, "", "apply_the_transform"], [168, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[169, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[169, 3, 1, "", "apply_the_transform"], [169, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[171, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[171, 3, 1, "", "do_transform"], [171, 3, 1, "", "get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[172, 2, 1, "", "QuantizeGraphBase"], [172, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[172, 3, 1, "", "do_transform"], [172, 3, 1, "", "register_transformer"], [172, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[172, 3, 1, "", "add_output_graph_node"], [172, 3, 1, "", "apply_the_transform"], [172, 3, 1, "", "create_nodes_map"], [172, 3, 1, "", "eightbitize_single_input_tensor_node"], [172, 3, 1, "", "get_longest_fuse"], [172, 3, 1, "", "remove_redundant_quantization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[173, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[173, 3, 1, "", "apply_newly_bn_leakyrelu_fusion"], [173, 3, 1, "", "apply_newly_bn_relu_fusion"], [173, 3, 1, "", "apply_the_transform"], [173, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[174, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[174, 3, 1, "", "apply_the_transform"], [174, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[175, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[175, 3, 1, "", "apply_conv_biasadd_addn_relu_fusion"], [175, 3, 1, "", "apply_conv_biasadd_fusion"], [175, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [175, 3, 1, "", "apply_conv_single_fusion"], [175, 3, 1, "", "apply_the_transform"], [175, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[176, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[176, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[177, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[177, 3, 1, "", "apply_matmul_biasadd_fusion"], [177, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [177, 3, 1, "", "apply_the_transform"], [177, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[178, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[178, 3, 1, "", "apply_the_transform"], [178, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[179, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[179, 3, 1, "", "copy_attr"], [179, 3, 1, "", "create_constant_node"], [179, 3, 1, "", "create_node"], [179, 3, 1, "", "ensure_tensor_name_has_port"], [179, 3, 1, "", "generate_quantized_weight_node"], [179, 3, 1, "", "get_sorted_graph"], [179, 3, 1, "", "node_name_from_input"], [179, 3, 1, "", "remove_training_nodes"], [179, 3, 1, "", "set_attr_bool"], [179, 3, 1, "", "set_attr_dtype"], [179, 3, 1, "", "set_attr_float"], [179, 3, 1, "", "set_attr_int"], [179, 3, 1, "", "set_attr_string"], [179, 3, 1, "", "set_attr_string_list"], [179, 3, 1, "", "set_attr_tensor"], [179, 3, 1, "", "set_attr_type_list"], [179, 3, 1, "", "split_shared_inputs"], [179, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[180, 0, 0, "-", "bias_correction"], [181, 0, 0, "-", "graph_transform_base"], [183, 0, 0, "-", "insert_logging"], [184, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[180, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[180, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[181, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase": [[181, 3, 1, "", "do_transformation"], [181, 3, 1, "", "generate_input_map"], [181, 3, 1, "", "get_node_name_from_input"], [181, 3, 1, "", "node_name_from_input"], [181, 3, 1, "", "parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[183, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[183, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[184, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[184, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[185, 1, 1, "", "collate_tf_preds"], [185, 1, 1, "", "disable_random"], [185, 1, 1, "", "fix_ref_type_of_graph_def"], [185, 1, 1, "", "generate_feed_dict"], [185, 1, 1, "", "get_estimator_graph"], [185, 1, 1, "", "get_graph_def"], [185, 1, 1, "", "get_input_output_node_names"], [185, 1, 1, "", "get_model_input_shape"], [185, 1, 1, "", "get_tensor_by_name"], [185, 1, 1, "", "get_tensor_val_from_graph_node"], [185, 1, 1, "", "int8_node_name_reverse"], [185, 1, 1, "", "is_ckpt_format"], [185, 1, 1, "", "is_saved_model_format"], [185, 1, 1, "", "iterator_sess_run"], [185, 1, 1, "", "read_graph"], [185, 1, 1, "", "strip_equivalent_nodes"], [185, 1, 1, "", "strip_unused_nodes"], [185, 1, 1, "", "tf_diagnosis_helper"], [185, 1, 1, "", "version1_eq_version2"], [185, 1, 1, "", "version1_gt_version2"], [185, 1, 1, "", "version1_gte_version2"], [185, 1, 1, "", "version1_lt_version2"], [185, 1, 1, "", "version1_lte_version2"], [185, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[186, 0, 0, "-", "bf16_convert"], [187, 0, 0, "-", "hawq_metric"], [189, 0, 0, "-", "onnx"], [190, 0, 0, "-", "symbolic_trace"], [191, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[186, 2, 1, "", "BF16ModuleWrapper"], [186, 1, 1, "", "Convert"], [186, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper": [[186, 3, 1, "", "forward"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[187, 2, 1, "", "HessianTrace"], [187, 2, 1, "", "Node_collector"], [187, 1, 1, "", "compare_weights"], [187, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[187, 3, 1, "", "get_act_gap"], [187, 3, 1, "", "get_act_traces"], [187, 3, 1, "", "get_avg_traces"], [187, 3, 1, "", "get_device"], [187, 3, 1, "", "get_fused_mapping"], [187, 3, 1, "", "get_params"], [187, 3, 1, "", "get_vtHv_weight"], [187, 3, 1, "", "get_weight_traces"], [187, 3, 1, "", "is_fused_module"], [187, 3, 1, "", "mse_metric_gap"], [187, 3, 1, "", "register_act_grad_hooks"], [187, 3, 1, "", "reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector": [[187, 3, 1, "", "hook_fn_act"], [187, 3, 1, "", "remove"]], "neural_compressor.adaptor.torch_utils.onnx": [[189, 2, 1, "", "DataReader"]], "neural_compressor.adaptor.torch_utils.onnx.DataReader": [[189, 3, 1, "", "get_next"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[190, 1, 1, "", "symbolic_trace"], [190, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[191, 1, 1, "", "append_attr"], [191, 1, 1, "", "auto_copy"], [191, 1, 1, "", "check_cfg_and_qconfig"], [191, 1, 1, "", "collate_torch_preds"], [191, 1, 1, "", "fetch_module"], [191, 1, 1, "", "generate_activation_observer"], [191, 1, 1, "", "get_embedding_contiguous"], [191, 1, 1, "", "get_example_input"], [191, 1, 1, "", "get_fallback_order"], [191, 1, 1, "", "get_mse_order_per_fp32"], [191, 1, 1, "", "get_mse_order_per_int8"], [191, 1, 1, "", "get_quantizable_ops_from_cfgs"], [191, 1, 1, "", "get_torch_version"], [191, 1, 1, "", "input2tuple"], [191, 1, 1, "", "is_fused_module"], [191, 1, 1, "", "paser_cfgs"], [191, 1, 1, "", "set_module"], [191, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[194, 2, 1, "", "ALGORITHMS"], [194, 2, 1, "", "Algorithm"], [194, 2, 1, "", "AlgorithmScheduler"], [192, 0, 0, "-", "algorithm"], [194, 1, 1, "", "algorithm_registry"], [193, 0, 0, "-", "fast_bias_correction"], [195, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.ALGORITHMS": [[194, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.AlgorithmScheduler": [[194, 4, 1, "", "adaptor"], [194, 4, 1, "", "calib_iter"], [194, 4, 1, "", "dataloader"], [194, 4, 1, "", "origin_model"], [194, 4, 1, "", "q_model"]], "neural_compressor.algorithm.algorithm": [[192, 2, 1, "", "ALGORITHMS"], [192, 2, 1, "", "Algorithm"], [192, 2, 1, "", "AlgorithmScheduler"], [192, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.algorithm.ALGORITHMS": [[192, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.algorithm.AlgorithmScheduler": [[192, 4, 1, "", "adaptor"], [192, 4, 1, "", "calib_iter"], [192, 4, 1, "", "dataloader"], [192, 4, 1, "", "origin_model"], [192, 4, 1, "", "q_model"]], "neural_compressor.algorithm.fast_bias_correction": [[193, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[195, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[196, 2, 1, "", "Benchmark"], [196, 1, 1, "", "fit"]], "neural_compressor.benchmark.Benchmark": [[196, 3, 1, "", "dataloader"], [196, 3, 1, "", "metric"], [196, 3, 1, "", "postprocess"]], "neural_compressor.conf": [[197, 0, 0, "-", "config"], [198, 0, 0, "-", "dotdict"], [200, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[197, 2, 1, "", "Benchmark_Conf"], [197, 2, 1, "", "Conf"], [197, 2, 1, "", "DefaultConf"], [197, 2, 1, "", "Distillation_Conf"], [197, 2, 1, "", "Graph_Optimization_Conf"], [197, 2, 1, "", "MixedPrecision_Conf"], [197, 2, 1, "", "NASConfig"], [197, 2, 1, "", "PrunerV2"], [197, 2, 1, "", "Pruning_Conf"], [197, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[198, 2, 1, "", "DotDict"], [198, 1, 1, "", "deep_get"], [198, 1, 1, "", "deep_set"]], "neural_compressor.config": [[201, 2, 1, "", "AccuracyCriterion"], [201, 2, 1, "", "BenchmarkConfig"], [201, 2, 1, "", "DistillationConfig"], [201, 2, 1, "", "ExportConfig"], [201, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [201, 2, 1, "", "KnowledgeDistillationLossConfig"], [201, 2, 1, "", "MixedPrecisionConfig"], [201, 2, 1, "", "ONNXQlinear2QDQConfig"], [201, 2, 1, "", "Options"], [201, 2, 1, "", "PostTrainingQuantConfig"], [201, 2, 1, "", "QuantizationAwareTrainingConfig"], [201, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [201, 2, 1, "", "TF2ONNXConfig"], [201, 2, 1, "", "Torch2ONNXConfig"], [201, 2, 1, "", "TuningCriterion"], [201, 2, 1, "", "WeightPruningConfig"], [201, 1, 1, "", "check_value"]], "neural_compressor.config.AccuracyCriterion": [[201, 4, 1, "", "absolute"], [201, 4, 1, "", "criterion"], [201, 4, 1, "", "higher_is_better"], [201, 4, 1, "", "relative"], [201, 4, 1, "", "tolerable_loss"]], "neural_compressor.config.BenchmarkConfig": [[201, 4, 1, "", "backend"], [201, 4, 1, "", "cores_per_instance"], [201, 4, 1, "", "inputs"], [201, 4, 1, "", "inter_num_of_threads"], [201, 4, 1, "", "intra_num_of_threads"], [201, 4, 1, "", "iteration"], [201, 4, 1, "", "num_of_instance"], [201, 4, 1, "", "outputs"], [201, 4, 1, "", "warmup"]], "neural_compressor.config.DistillationConfig": [[201, 4, 1, "", "criterion"], [201, 4, 1, "", "optimizer"], [201, 4, 1, "", "teacher_model"]], "neural_compressor.config.ExportConfig": [[201, 4, 1, "", "dtype"], [201, 4, 1, "", "dynamic_axes"], [201, 4, 1, "", "example_inputs"], [201, 4, 1, "", "input_names"], [201, 4, 1, "", "opset_version"], [201, 4, 1, "", "output_names"], [201, 4, 1, "", "quant_format"]], "neural_compressor.config.Options": [[201, 4, 1, "", "random_seed"], [201, 4, 1, "", "resume_from"], [201, 4, 1, "", "tensorboard"], [201, 4, 1, "", "workspace"]], "neural_compressor.config.PostTrainingQuantConfig": [[201, 4, 1, "", "approach"], [201, 4, 1, "", "tuning_criterion"]], "neural_compressor.config.QuantizationAwareTrainingConfig": [[201, 4, 1, "", "approach"]], "neural_compressor.config.TuningCriterion": [[201, 4, 1, "", "max_trials"], [201, 4, 1, "", "objective"], [201, 4, 1, "", "strategy"], [201, 4, 1, "", "strategy_kwargs"], [201, 4, 1, "", "timeout"]], "neural_compressor.config.WeightPruningConfig": [[201, 4, 1, "", "weight_compression"]], "neural_compressor.contrib": [[203, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[204, 0, 0, "-", "sigopt"], [205, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[204, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[204, 3, 1, "", "create_exp"], [204, 3, 1, "", "get_acc_target"], [204, 3, 1, "", "next_tune_cfg"], [204, 3, 1, "", "params_to_tune_configs"], [204, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[205, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[205, 3, 1, "", "add_loss_to_tuned_history_and_find_best"], [205, 3, 1, "", "calculate_loss"], [205, 3, 1, "", "object_evaluation"], [205, 3, 1, "", "stop"], [205, 3, 1, "", "traverse"]], "neural_compressor.data": [[227, 2, 1, "", "BaseTransform"], [227, 2, 1, "", "DataLoader"], [227, 2, 1, "", "Dataset"], [227, 2, 1, "", "Datasets"], [227, 2, 1, "", "FILTERS"], [227, 2, 1, "", "Filter"], [227, 2, 1, "", "IterableDataset"], [227, 2, 1, "", "Postprocess"], [227, 2, 1, "", "TRANSFORMS"], [210, 0, 0, "-", "dataloaders"], [227, 1, 1, "", "dataset_registry"], [222, 0, 0, "-", "datasets"], [227, 1, 1, "", "filter_registry"], [226, 0, 0, "-", "filters"], [227, 1, 1, "", "transform_registry"], [230, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[227, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[210, 2, 1, "", "DataLoader"], [206, 0, 0, "-", "base_dataloader"], [207, 0, 0, "-", "dataloader"], [208, 0, 0, "-", "default_dataloader"], [209, 0, 0, "-", "fetcher"], [211, 0, 0, "-", "mxnet_dataloader"], [212, 0, 0, "-", "onnxrt_dataloader"], [213, 0, 0, "-", "pytorch_dataloader"], [214, 0, 0, "-", "sampler"], [215, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[206, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[206, 3, 1, "", "batch"], [206, 4, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[207, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[208, 2, 1, "", "DefaultDataLoader"], [208, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[208, 3, 1, "", "batch"], [208, 4, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[209, 2, 1, "", "Fetcher"], [209, 2, 1, "", "IndexFetcher"], [209, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[211, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[212, 2, 1, "", "ONNXRTBertDataLoader"], [212, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[213, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[214, 2, 1, "", "BatchSampler"], [214, 2, 1, "", "IterableSampler"], [214, 2, 1, "", "Sampler"], [214, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[215, 2, 1, "", "TFDataDataLoader"], [215, 2, 1, "", "TensorflowBertDataLoader"], [215, 2, 1, "", "TensorflowDataLoader"], [215, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[215, 3, 1, "", "batch"]], "neural_compressor.data.datasets": [[222, 2, 1, "", "Dataset"], [222, 2, 1, "", "Datasets"], [222, 2, 1, "", "IterableDataset"], [216, 0, 0, "-", "bert_dataset"], [217, 0, 0, "-", "coco_dataset"], [218, 0, 0, "-", "dataset"], [222, 1, 1, "", "dataset_registry"], [219, 0, 0, "-", "dummy_dataset"], [220, 0, 0, "-", "dummy_dataset_v2"], [221, 0, 0, "-", "imagenet_dataset"], [223, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[216, 2, 1, "", "InputFeatures"], [216, 2, 1, "", "ONNXRTBertDataset"], [216, 2, 1, "", "ParseDecodeBert"], [216, 2, 1, "", "PytorchBertDataset"], [216, 2, 1, "", "TensorflowBertDataset"], [216, 2, 1, "", "TensorflowModelZooBertDataset"], [216, 1, 1, "", "convert_examples_to_features"], [216, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[216, 3, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[217, 2, 1, "", "COCONpy"], [217, 2, 1, "", "COCORaw"], [217, 2, 1, "", "COCORecordDataset"], [217, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[218, 2, 1, "", "CIFAR10"], [218, 2, 1, "", "CIFAR100"], [218, 2, 1, "", "Dataset"], [218, 2, 1, "", "Datasets"], [218, 2, 1, "", "FashionMNIST"], [218, 2, 1, "", "ImageFolder"], [218, 2, 1, "", "IterableDataset"], [218, 2, 1, "", "MNIST"], [218, 2, 1, "", "MXNetCIFAR10"], [218, 2, 1, "", "MXNetCIFAR100"], [218, 2, 1, "", "MXNetDatasets"], [218, 2, 1, "", "MXNetFashionMNIST"], [218, 2, 1, "", "MXNetImageFolder"], [218, 2, 1, "", "MXNetMNIST"], [218, 2, 1, "", "ONNXRTITDatasets"], [218, 2, 1, "", "ONNXRTQLDatasets"], [218, 2, 1, "", "PyTorchDatasets"], [218, 2, 1, "", "PytorchCIFAR10"], [218, 2, 1, "", "PytorchCIFAR100"], [218, 2, 1, "", "PytorchFashionMNIST"], [218, 2, 1, "", "PytorchMNIST"], [218, 2, 1, "", "PytorchMxnetWrapDataset"], [218, 2, 1, "", "PytorchMxnetWrapFunction"], [218, 2, 1, "", "TensorflowCIFAR10"], [218, 2, 1, "", "TensorflowCIFAR100"], [218, 2, 1, "", "TensorflowDatasets"], [218, 2, 1, "", "TensorflowFashionMNIST"], [218, 2, 1, "", "TensorflowImageFolder"], [218, 2, 1, "", "TensorflowImageRecord"], [218, 2, 1, "", "TensorflowMNIST"], [218, 2, 1, "", "TensorflowTFRecordDataset"], [218, 2, 1, "", "TensorflowVOCRecord"], [218, 1, 1, "", "calculate_md5"], [218, 1, 1, "", "check_integrity"], [218, 1, 1, "", "dataset_registry"], [218, 1, 1, "", "download_url"], [218, 5, 1, "", "framework_datasets"], [218, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[218, 3, 1, "", "download"], [218, 3, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[218, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[218, 4, 1, "", "class_to_idx"], [218, 3, 1, "", "download"], [218, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[219, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[220, 2, 1, "", "DummyDataset"], [220, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[221, 2, 1, "", "ImagenetRaw"], [221, 2, 1, "", "MXNetImagenetRaw"], [221, 2, 1, "", "ONNXRTImagenetDataset"], [221, 2, 1, "", "PytorchImagenetRaw"], [221, 2, 1, "", "TensorflowImagenetDataset"], [221, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[223, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[226, 2, 1, "", "FILTERS"], [226, 2, 1, "", "Filter"], [224, 0, 0, "-", "coco_filter"], [225, 0, 0, "-", "filter"], [226, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[224, 2, 1, "", "LabelBalanceCOCORawFilter"], [224, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[225, 2, 1, "", "FILTERS"], [225, 2, 1, "", "Filter"], [225, 2, 1, "", "MXNetFilters"], [225, 2, 1, "", "ONNXRTITFilters"], [225, 2, 1, "", "ONNXRTQLFilters"], [225, 2, 1, "", "PyTorchFilters"], [225, 2, 1, "", "TensorflowFilters"], [225, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[230, 2, 1, "", "BaseTransform"], [230, 2, 1, "", "Postprocess"], [230, 2, 1, "", "TRANSFORMS"], [228, 0, 0, "-", "coco_transform"], [229, 0, 0, "-", "imagenet_transform"], [231, 0, 0, "-", "postprocess"], [232, 0, 0, "-", "tokenization"], [233, 0, 0, "-", "transform"], [230, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TRANSFORMS": [[230, 3, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[228, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[229, 2, 1, "", "BilinearImagenetTransform"], [229, 2, 1, "", "LabelShift"], [229, 2, 1, "", "ONNXResizeCropImagenetTransform"], [229, 2, 1, "", "OnnxBilinearImagenetTransform"], [229, 2, 1, "", "ParseDecodeImagenet"], [229, 2, 1, "", "ParseDecodeImagenetTransform"], [229, 2, 1, "", "QuantizedInput"], [229, 2, 1, "", "ResizeWithAspectRatio"], [229, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[231, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[232, 2, 1, "", "BasicTokenizer"], [232, 2, 1, "", "FullTokenizer"], [232, 2, 1, "", "WordpieceTokenizer"], [232, 1, 1, "", "convert_by_vocab"], [232, 1, 1, "", "convert_to_unicode"], [232, 1, 1, "", "load_vocab"], [232, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[232, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[232, 3, 1, "", "convert_ids_to_tokens"], [232, 3, 1, "", "convert_tokens_to_ids"], [232, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[232, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[233, 2, 1, "", "AlignImageChannelTransform"], [233, 2, 1, "", "BaseTransform"], [233, 2, 1, "", "CastONNXTransform"], [233, 2, 1, "", "CastPyTorchTransform"], [233, 2, 1, "", "CastTFTransform"], [233, 2, 1, "", "CenterCropTFTransform"], [233, 2, 1, "", "CenterCropTransform"], [233, 2, 1, "", "CollectTransform"], [233, 2, 1, "", "ComposeTransform"], [233, 2, 1, "", "CropResizeTFTransform"], [233, 2, 1, "", "CropResizeTransform"], [233, 2, 1, "", "CropToBoundingBox"], [233, 2, 1, "", "InputFeatures"], [233, 2, 1, "", "MXNetCropResizeTransform"], [233, 2, 1, "", "MXNetCropToBoundingBox"], [233, 2, 1, "", "MXNetNormalizeTransform"], [233, 2, 1, "", "MXNetTransforms"], [233, 2, 1, "", "MXNetTranspose"], [233, 2, 1, "", "NormalizeTFTransform"], [233, 2, 1, "", "NormalizeTransform"], [233, 2, 1, "", "ONNXRTCropToBoundingBox"], [233, 2, 1, "", "ONNXRTITTransforms"], [233, 2, 1, "", "ONNXRTQLTransforms"], [233, 2, 1, "", "PaddedCenterCropTransform"], [233, 2, 1, "", "ParseDecodeVocTransform"], [233, 2, 1, "", "PyTorchAlignImageChannel"], [233, 2, 1, "", "PyTorchCropResizeTransform"], [233, 2, 1, "", "PyTorchNormalizeTransform"], [233, 2, 1, "", "PyTorchTransforms"], [233, 2, 1, "", "PyTorchTranspose"], [233, 2, 1, "", "PytorchMxnetTransform"], [233, 2, 1, "", "PytorchMxnetWrapFunction"], [233, 2, 1, "", "RandomCropTFTransform"], [233, 2, 1, "", "RandomCropTransform"], [233, 2, 1, "", "RandomHorizontalFlip"], [233, 2, 1, "", "RandomResizedCropMXNetTransform"], [233, 2, 1, "", "RandomResizedCropPytorchTransform"], [233, 2, 1, "", "RandomResizedCropTFTransform"], [233, 2, 1, "", "RandomResizedCropTransform"], [233, 2, 1, "", "RandomVerticalFlip"], [233, 2, 1, "", "RescaleKerasPretrainTransform"], [233, 2, 1, "", "RescaleTFTransform"], [233, 2, 1, "", "RescaleTransform"], [233, 2, 1, "", "ResizeMXNetTransform"], [233, 2, 1, "", "ResizePytorchTransform"], [233, 2, 1, "", "ResizeTFTransform"], [233, 2, 1, "", "ResizeTransform"], [233, 2, 1, "", "ResizeWithRatio"], [233, 2, 1, "", "SquadExample"], [233, 2, 1, "", "TFModelZooCollectTransform"], [233, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [233, 2, 1, "", "TFSquadV1PostTransform"], [233, 2, 1, "", "TRANSFORMS"], [233, 2, 1, "", "TensorflowCropToBoundingBox"], [233, 2, 1, "", "TensorflowRandomHorizontalFlip"], [233, 2, 1, "", "TensorflowRandomVerticalFlip"], [233, 2, 1, "", "TensorflowResizeWithRatio"], [233, 2, 1, "", "TensorflowTransform"], [233, 2, 1, "", "TensorflowTransforms"], [233, 2, 1, "", "TensorflowTranspose"], [233, 2, 1, "", "TensorflowWrapFunction"], [233, 2, 1, "", "ToArray"], [233, 2, 1, "", "ToNDArrayTransform"], [233, 2, 1, "", "Transforms"], [233, 2, 1, "", "Transpose"], [233, 1, 1, "", "convert_examples_to_features"], [233, 1, 1, "", "get_final_text"], [233, 1, 1, "", "get_torchvision_map"], [233, 1, 1, "", "read_squad_examples"], [233, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[233, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[233, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[233, 3, 1, "", "get_postprocess_result"], [233, 3, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[233, 3, 1, "", "register"]], "neural_compressor.experimental": [[276, 2, 1, "", "Benchmark"], [276, 2, 1, "", "Component"], [276, 2, 1, "", "Distillation"], [276, 2, 1, "", "Graph_Optimization"], [276, 2, 1, "", "MixedPrecision"], [276, 2, 1, "", "ModelConversion"], [276, 2, 1, "", "NAS"], [276, 2, 1, "", "Pruning"], [276, 2, 1, "", "Quantization"], [234, 0, 0, "-", "benchmark"], [237, 0, 0, "-", "common"], [243, 0, 0, "-", "component"], [265, 0, 0, "-", "data"], [270, 0, 0, "-", "distillation"], [271, 0, 0, "-", "export"], [275, 0, 0, "-", "graph_optimization"], [283, 0, 0, "-", "metric"], [285, 0, 0, "-", "mixed_precision"], [286, 0, 0, "-", "model_conversion"], [299, 0, 0, "-", "nas"], [303, 0, 0, "-", "pruning"], [304, 0, 0, "-", "pruning_recipes"], [308, 0, 0, "-", "pruning_v2"], [309, 0, 0, "-", "pytorch_pruner"], [316, 0, 0, "-", "quantization"], [317, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[276, 4, 1, "", "b_dataloader"], [276, 4, 1, "", "b_func"], [276, 3, 1, "", "config_instance"], [276, 3, 1, "", "generate_prefix"], [276, 4, 1, "", "metric"], [276, 4, 1, "", "model"], [276, 4, 1, "", "postprocess"], [276, 4, 1, "", "results"], [276, 3, 1, "", "run_instance"], [276, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[276, 4, 1, "", "eval_dataloader"], [276, 4, 1, "", "eval_func"], [276, 3, 1, "", "execute"], [276, 4, 1, "", "model"], [276, 3, 1, "", "on_after_compute_loss"], [276, 3, 1, "", "on_after_eval"], [276, 3, 1, "", "on_after_optimizer_step"], [276, 3, 1, "", "on_batch_begin"], [276, 3, 1, "", "on_batch_end"], [276, 3, 1, "", "on_before_eval"], [276, 3, 1, "", "on_before_optimizer_step"], [276, 3, 1, "", "on_epoch_begin"], [276, 3, 1, "", "on_epoch_end"], [276, 3, 1, "", "on_post_grad"], [276, 3, 1, "", "on_step_begin"], [276, 3, 1, "", "on_step_end"], [276, 3, 1, "", "on_train_begin"], [276, 3, 1, "", "on_train_end"], [276, 3, 1, "", "post_epoch_end"], [276, 3, 1, "", "post_process"], [276, 3, 1, "", "pre_epoch_begin"], [276, 3, 1, "", "pre_process"], [276, 3, 1, "", "prepare"], [276, 3, 1, "", "prepare_qat"], [276, 3, 1, "", "register_hook"], [276, 4, 1, "", "train_dataloader"], [276, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[276, 6, 1, "", "_epoch_ran"], [276, 6, 1, "", "best_model"], [276, 6, 1, "", "best_score"], [276, 3, 1, "", "create_criterion"], [276, 3, 1, "", "create_optimizer"], [276, 4, 1, "", "criterion"], [276, 6, 1, "", "eval_frequency"], [276, 4, 1, "", "evaluation_distributed"], [276, 3, 1, "", "execute"], [276, 3, 1, "", "generate_hooks"], [276, 3, 1, "", "init_train_cfg"], [276, 3, 1, "", "on_post_forward"], [276, 4, 1, "", "optimizer"], [276, 3, 1, "", "pre_process"], [276, 3, 1, "", "prepare"], [276, 4, 1, "", "student_model"], [276, 4, 1, "", "teacher_model"], [276, 4, 1, "", "train_cfg"], [276, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[276, 3, 1, "", "dataset"], [276, 4, 1, "", "eval_dataloader"], [276, 4, 1, "", "eval_func"], [276, 4, 1, "", "input"], [276, 4, 1, "", "metric"], [276, 4, 1, "", "model"], [276, 4, 1, "", "output"], [276, 4, 1, "", "postprocess"], [276, 4, 1, "", "precisions"], [276, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[276, 4, 1, "", "precisions"], [276, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[276, 3, 1, "", "dataset"], [276, 4, 1, "", "destination"], [276, 4, 1, "", "eval_dataloader"], [276, 4, 1, "", "eval_func"], [276, 4, 1, "", "metric"], [276, 4, 1, "", "model"], [276, 4, 1, "", "postprocess"], [276, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[276, 6, 1, "", "conf"], [276, 4, 1, "", "evaluation_distributed"], [276, 3, 1, "", "execute"], [276, 3, 1, "", "generate_hooks"], [276, 3, 1, "", "generate_pruners"], [276, 3, 1, "", "get_sparsity_ratio"], [276, 3, 1, "", "pre_process"], [276, 3, 1, "", "prepare"], [276, 6, 1, "", "pruners"], [276, 4, 1, "", "pruning_func"], [276, 4, 1, "", "train_distributed"], [276, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.Quantization": [[276, 4, 1, "", "calib_dataloader"], [276, 3, 1, "", "dataset"], [276, 3, 1, "", "execute"], [276, 4, 1, "", "metric"], [276, 4, 1, "", "model"], [276, 4, 1, "", "objective"], [276, 4, 1, "", "postprocess"], [276, 3, 1, "", "pre_process"], [276, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[234, 2, 1, "", "Benchmark"], [234, 1, 1, "", "get_architecture"], [234, 1, 1, "", "get_bounded_threads"], [234, 1, 1, "", "get_core_ids"], [234, 1, 1, "", "get_physical_ids"], [234, 1, 1, "", "get_threads"], [234, 1, 1, "", "get_threads_per_core"], [234, 1, 1, "", "set_all_env_var"], [234, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[234, 4, 1, "", "b_dataloader"], [234, 4, 1, "", "b_func"], [234, 3, 1, "", "config_instance"], [234, 3, 1, "", "generate_prefix"], [234, 4, 1, "", "metric"], [234, 4, 1, "", "model"], [234, 4, 1, "", "postprocess"], [234, 4, 1, "", "results"], [234, 3, 1, "", "run_instance"], [234, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[237, 2, 1, "", "DataLoader"], [237, 2, 1, "", "Metric"], [237, 2, 1, "", "Model"], [237, 2, 1, "", "Postprocess"], [235, 0, 0, "-", "criterion"], [236, 0, 0, "-", "dataloader"], [238, 0, 0, "-", "metric"], [239, 0, 0, "-", "model"], [240, 0, 0, "-", "optimizer"], [241, 0, 0, "-", "postprocess"], [242, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[235, 2, 1, "", "Criterions"], [235, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [235, 2, 1, "", "KnowledgeDistillationFramework"], [235, 2, 1, "", "KnowledgeDistillationLoss"], [235, 2, 1, "", "PyTorchCriterions"], [235, 2, 1, "", "PyTorchCrossEntropyLoss"], [235, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [235, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [235, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [235, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [235, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [235, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [235, 2, 1, "", "SelfKnowledgeDistillationLoss"], [235, 2, 1, "", "TensorFlowCrossEntropyLoss"], [235, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [235, 2, 1, "", "TensorflowCriterions"], [235, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [235, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [235, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [235, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[235, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[235, 3, 1, "", "clear_features"], [235, 3, 1, "", "init_feature_matcher"], [235, 3, 1, "", "init_loss_funcs"], [235, 3, 1, "", "loss_cal"], [235, 3, 1, "", "loss_cal_sloss"], [235, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[235, 4, 1, "", "student_model"], [235, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[235, 3, 1, "", "loss_cal"], [235, 3, 1, "", "loss_cal_sloss"], [235, 3, 1, "", "student_targets_loss_cal"], [235, 3, 1, "", "teacher_model_forward"], [235, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[235, 3, 1, "", "init_feature_matcher"], [235, 3, 1, "", "init_loss_funcs"], [235, 3, 1, "", "loss_cal"], [235, 3, 1, "", "loss_cal_sloss"], [235, 3, 1, "", "register_hooks_for_models"], [235, 3, 1, "", "remove_all_hooks"], [235, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[235, 3, 1, "", "KullbackLeiblerDivergence"], [235, 3, 1, "", "SoftCrossEntropy"], [235, 3, 1, "", "student_targets_loss_cal"], [235, 3, 1, "", "teacher_model_forward"], [235, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[235, 3, 1, "", "KullbackLeiblerDivergence"], [235, 3, 1, "", "L2Divergence"], [235, 3, 1, "", "SoftCrossEntropy"], [235, 3, 1, "", "init_loss_funcs"], [235, 3, 1, "", "loss_cal"], [235, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[235, 3, 1, "", "init_loss_funcs"], [235, 3, 1, "", "loss_cal"], [235, 3, 1, "", "loss_cal_sloss"], [235, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[235, 3, 1, "", "SoftCrossEntropy"], [235, 3, 1, "", "student_targets_loss_cal"], [235, 3, 1, "", "teacher_model_forward"], [235, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[235, 3, 1, "", "student_targets_loss_cal"], [235, 3, 1, "", "teacher_model_forward"], [235, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[236, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[238, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[239, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[240, 2, 1, "", "Optimizers"], [240, 2, 1, "", "PyTorchOptimizers"], [240, 2, 1, "", "PyTorchSGD"], [240, 2, 1, "", "TensorFlowAdam"], [240, 2, 1, "", "TensorFlowAdamW"], [240, 2, 1, "", "TensorFlowSGD"], [240, 2, 1, "", "TensorflowOptimizers"], [240, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[240, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[241, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[242, 1, 1, "", "get_activation"], [242, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[243, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[243, 4, 1, "", "eval_dataloader"], [243, 4, 1, "", "eval_func"], [243, 3, 1, "", "execute"], [243, 4, 1, "", "model"], [243, 3, 1, "", "on_after_compute_loss"], [243, 3, 1, "", "on_after_eval"], [243, 3, 1, "", "on_after_optimizer_step"], [243, 3, 1, "", "on_batch_begin"], [243, 3, 1, "", "on_batch_end"], [243, 3, 1, "", "on_before_eval"], [243, 3, 1, "", "on_before_optimizer_step"], [243, 3, 1, "", "on_epoch_begin"], [243, 3, 1, "", "on_epoch_end"], [243, 3, 1, "", "on_post_grad"], [243, 3, 1, "", "on_step_begin"], [243, 3, 1, "", "on_step_end"], [243, 3, 1, "", "on_train_begin"], [243, 3, 1, "", "on_train_end"], [243, 3, 1, "", "post_epoch_end"], [243, 3, 1, "", "post_process"], [243, 3, 1, "", "pre_epoch_begin"], [243, 3, 1, "", "pre_process"], [243, 3, 1, "", "prepare"], [243, 3, 1, "", "prepare_qat"], [243, 3, 1, "", "register_hook"], [243, 4, 1, "", "train_dataloader"], [243, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[265, 2, 1, "", "BaseTransform"], [265, 2, 1, "", "Dataset"], [265, 2, 1, "", "Datasets"], [265, 2, 1, "", "FILTERS"], [265, 2, 1, "", "Filter"], [265, 2, 1, "", "IterableDataset"], [265, 2, 1, "", "TRANSFORMS"], [248, 0, 0, "-", "dataloaders"], [265, 1, 1, "", "dataset_registry"], [260, 0, 0, "-", "datasets"], [265, 1, 1, "", "filter_registry"], [264, 0, 0, "-", "filters"], [265, 1, 1, "", "transform_registry"], [267, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[265, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[244, 0, 0, "-", "base_dataloader"], [245, 0, 0, "-", "dataloader"], [246, 0, 0, "-", "default_dataloader"], [247, 0, 0, "-", "fetcher"], [249, 0, 0, "-", "mxnet_dataloader"], [250, 0, 0, "-", "onnxrt_dataloader"], [251, 0, 0, "-", "pytorch_dataloader"], [252, 0, 0, "-", "sampler"], [253, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[244, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[244, 3, 1, "", "batch"], [244, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[246, 2, 1, "", "DefaultDataLoader"], [246, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[246, 3, 1, "", "batch"], [246, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[247, 2, 1, "", "Fetcher"], [247, 2, 1, "", "IndexFetcher"], [247, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[249, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[250, 2, 1, "", "ONNXRTBertDataLoader"], [250, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[251, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[252, 2, 1, "", "BatchSampler"], [252, 2, 1, "", "IterableSampler"], [252, 2, 1, "", "Sampler"], [252, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[253, 2, 1, "", "TFDataDataLoader"], [253, 2, 1, "", "TensorflowBertDataLoader"], [253, 2, 1, "", "TensorflowDataLoader"], [253, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[253, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[260, 2, 1, "", "Dataset"], [260, 2, 1, "", "Datasets"], [260, 2, 1, "", "IterableDataset"], [254, 0, 0, "-", "bert_dataset"], [255, 0, 0, "-", "coco_dataset"], [256, 0, 0, "-", "dataset"], [260, 1, 1, "", "dataset_registry"], [257, 0, 0, "-", "dummy_dataset"], [258, 0, 0, "-", "dummy_dataset_v2"], [259, 0, 0, "-", "imagenet_dataset"], [261, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[254, 2, 1, "", "InputFeatures"], [254, 2, 1, "", "ONNXRTBertDataset"], [254, 2, 1, "", "ParseDecodeBert"], [254, 2, 1, "", "PytorchBertDataset"], [254, 2, 1, "", "TensorflowBertDataset"], [254, 2, 1, "", "TensorflowModelZooBertDataset"], [254, 1, 1, "", "convert_examples_to_features"], [254, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[254, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[255, 2, 1, "", "COCONpy"], [255, 2, 1, "", "COCORaw"], [255, 2, 1, "", "COCORecordDataset"], [255, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[256, 2, 1, "", "CIFAR10"], [256, 2, 1, "", "CIFAR100"], [256, 2, 1, "", "Dataset"], [256, 2, 1, "", "Datasets"], [256, 2, 1, "", "FashionMNIST"], [256, 2, 1, "", "ImageFolder"], [256, 2, 1, "", "IterableDataset"], [256, 2, 1, "", "MNIST"], [256, 2, 1, "", "MXNetCIFAR10"], [256, 2, 1, "", "MXNetCIFAR100"], [256, 2, 1, "", "MXNetDatasets"], [256, 2, 1, "", "MXNetFashionMNIST"], [256, 2, 1, "", "MXNetImageFolder"], [256, 2, 1, "", "MXNetMNIST"], [256, 2, 1, "", "ONNXRTITDatasets"], [256, 2, 1, "", "ONNXRTQLDatasets"], [256, 2, 1, "", "PyTorchDatasets"], [256, 2, 1, "", "PytorchCIFAR10"], [256, 2, 1, "", "PytorchCIFAR100"], [256, 2, 1, "", "PytorchFashionMNIST"], [256, 2, 1, "", "PytorchMNIST"], [256, 2, 1, "", "PytorchMxnetWrapDataset"], [256, 2, 1, "", "PytorchMxnetWrapFunction"], [256, 2, 1, "", "TensorflowCIFAR10"], [256, 2, 1, "", "TensorflowCIFAR100"], [256, 2, 1, "", "TensorflowDatasets"], [256, 2, 1, "", "TensorflowFashionMNIST"], [256, 2, 1, "", "TensorflowImageFolder"], [256, 2, 1, "", "TensorflowImageRecord"], [256, 2, 1, "", "TensorflowMNIST"], [256, 2, 1, "", "TensorflowTFRecordDataset"], [256, 2, 1, "", "TensorflowVOCRecord"], [256, 1, 1, "", "calculate_md5"], [256, 1, 1, "", "check_integrity"], [256, 1, 1, "", "dataset_registry"], [256, 1, 1, "", "download_url"], [256, 5, 1, "", "framework_datasets"], [256, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[256, 3, 1, "", "download"], [256, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[256, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[256, 4, 1, "", "class_to_idx"], [256, 3, 1, "", "download"], [256, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[257, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[258, 2, 1, "", "DummyDataset"], [258, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[259, 2, 1, "", "ImagenetRaw"], [259, 2, 1, "", "MXNetImagenetRaw"], [259, 2, 1, "", "ONNXRTImagenetDataset"], [259, 2, 1, "", "PytorchImagenetRaw"], [259, 2, 1, "", "TensorflowImagenetDataset"], [259, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[261, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[264, 2, 1, "", "FILTERS"], [264, 2, 1, "", "Filter"], [262, 0, 0, "-", "coco_filter"], [263, 0, 0, "-", "filter"], [264, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[262, 2, 1, "", "LabelBalanceCOCORawFilter"], [262, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[263, 2, 1, "", "FILTERS"], [263, 2, 1, "", "Filter"], [263, 2, 1, "", "MXNetFilters"], [263, 2, 1, "", "ONNXRTITFilters"], [263, 2, 1, "", "ONNXRTQLFilters"], [263, 2, 1, "", "PyTorchFilters"], [263, 2, 1, "", "TensorflowFilters"], [263, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[267, 2, 1, "", "BaseTransform"], [267, 2, 1, "", "TRANSFORMS"], [266, 0, 0, "-", "imagenet_transform"], [268, 0, 0, "-", "tokenization"], [269, 0, 0, "-", "transform"], [267, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[267, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[266, 2, 1, "", "BilinearImagenetTransform"], [266, 2, 1, "", "LabelShift"], [266, 2, 1, "", "ONNXResizeCropImagenetTransform"], [266, 2, 1, "", "OnnxBilinearImagenetTransform"], [266, 2, 1, "", "ParseDecodeImagenet"], [266, 2, 1, "", "ParseDecodeImagenetTransform"], [266, 2, 1, "", "QuantizedInput"], [266, 2, 1, "", "ResizeWithAspectRatio"], [266, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[268, 2, 1, "", "BasicTokenizer"], [268, 2, 1, "", "FullTokenizer"], [268, 2, 1, "", "WordpieceTokenizer"], [268, 1, 1, "", "convert_by_vocab"], [268, 1, 1, "", "convert_to_unicode"], [268, 1, 1, "", "load_vocab"], [268, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[268, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[268, 3, 1, "", "convert_ids_to_tokens"], [268, 3, 1, "", "convert_tokens_to_ids"], [268, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[268, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[269, 2, 1, "", "AlignImageChannelTransform"], [269, 2, 1, "", "BaseTransform"], [269, 2, 1, "", "CastONNXTransform"], [269, 2, 1, "", "CastPyTorchTransform"], [269, 2, 1, "", "CastTFTransform"], [269, 2, 1, "", "CenterCropTFTransform"], [269, 2, 1, "", "CenterCropTransform"], [269, 2, 1, "", "CollectTransform"], [269, 2, 1, "", "ComposeTransform"], [269, 2, 1, "", "CropResizeTFTransform"], [269, 2, 1, "", "CropResizeTransform"], [269, 2, 1, "", "CropToBoundingBox"], [269, 2, 1, "", "InputFeatures"], [269, 2, 1, "", "MXNetCropResizeTransform"], [269, 2, 1, "", "MXNetCropToBoundingBox"], [269, 2, 1, "", "MXNetNormalizeTransform"], [269, 2, 1, "", "MXNetTransforms"], [269, 2, 1, "", "MXNetTranspose"], [269, 2, 1, "", "NormalizeTFTransform"], [269, 2, 1, "", "NormalizeTransform"], [269, 2, 1, "", "ONNXRTCropToBoundingBox"], [269, 2, 1, "", "ONNXRTITTransforms"], [269, 2, 1, "", "ONNXRTQLTransforms"], [269, 2, 1, "", "PaddedCenterCropTransform"], [269, 2, 1, "", "ParseDecodeVocTransform"], [269, 2, 1, "", "PyTorchAlignImageChannel"], [269, 2, 1, "", "PyTorchCropResizeTransform"], [269, 2, 1, "", "PyTorchNormalizeTransform"], [269, 2, 1, "", "PyTorchTransforms"], [269, 2, 1, "", "PyTorchTranspose"], [269, 2, 1, "", "PytorchMxnetTransform"], [269, 2, 1, "", "PytorchMxnetWrapFunction"], [269, 2, 1, "", "RandomCropTFTransform"], [269, 2, 1, "", "RandomCropTransform"], [269, 2, 1, "", "RandomHorizontalFlip"], [269, 2, 1, "", "RandomResizedCropMXNetTransform"], [269, 2, 1, "", "RandomResizedCropPytorchTransform"], [269, 2, 1, "", "RandomResizedCropTFTransform"], [269, 2, 1, "", "RandomResizedCropTransform"], [269, 2, 1, "", "RandomVerticalFlip"], [269, 2, 1, "", "RescaleKerasPretrainTransform"], [269, 2, 1, "", "RescaleTFTransform"], [269, 2, 1, "", "RescaleTransform"], [269, 2, 1, "", "ResizeMXNetTransform"], [269, 2, 1, "", "ResizePytorchTransform"], [269, 2, 1, "", "ResizeTFTransform"], [269, 2, 1, "", "ResizeTransform"], [269, 2, 1, "", "ResizeWithRatio"], [269, 2, 1, "", "SquadExample"], [269, 2, 1, "", "TFModelZooCollectTransform"], [269, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [269, 2, 1, "", "TFSquadV1PostTransform"], [269, 2, 1, "", "TRANSFORMS"], [269, 2, 1, "", "TensorflowCropToBoundingBox"], [269, 2, 1, "", "TensorflowRandomHorizontalFlip"], [269, 2, 1, "", "TensorflowRandomVerticalFlip"], [269, 2, 1, "", "TensorflowResizeWithRatio"], [269, 2, 1, "", "TensorflowTransform"], [269, 2, 1, "", "TensorflowTransforms"], [269, 2, 1, "", "TensorflowTranspose"], [269, 2, 1, "", "TensorflowWrapFunction"], [269, 2, 1, "", "ToArray"], [269, 2, 1, "", "ToNDArrayTransform"], [269, 2, 1, "", "Transforms"], [269, 2, 1, "", "Transpose"], [269, 1, 1, "", "convert_examples_to_features"], [269, 1, 1, "", "get_final_text"], [269, 1, 1, "", "get_torchvision_map"], [269, 1, 1, "", "read_squad_examples"], [269, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[269, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[269, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[269, 3, 1, "", "get_postprocess_result"], [269, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[269, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[270, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[270, 6, 1, "", "_epoch_ran"], [270, 6, 1, "", "best_model"], [270, 6, 1, "", "best_score"], [270, 3, 1, "", "create_criterion"], [270, 3, 1, "", "create_optimizer"], [270, 4, 1, "", "criterion"], [270, 6, 1, "", "eval_frequency"], [270, 4, 1, "", "evaluation_distributed"], [270, 3, 1, "", "execute"], [270, 3, 1, "", "generate_hooks"], [270, 3, 1, "", "init_train_cfg"], [270, 3, 1, "", "on_post_forward"], [270, 4, 1, "", "optimizer"], [270, 3, 1, "", "pre_process"], [270, 3, 1, "", "prepare"], [270, 4, 1, "", "student_model"], [270, 4, 1, "", "teacher_model"], [270, 4, 1, "", "train_cfg"], [270, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[271, 1, 1, "", "onnx_qlinear_to_qdq"], [272, 0, 0, "-", "qlinear2qdq"], [273, 0, 0, "-", "torch2onnx"], [271, 1, 1, "", "torch_to_fp32_onnx"], [271, 1, 1, "", "torch_to_int8_onnx"], [274, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[272, 1, 1, "", "check_model"], [272, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.torch2onnx": [[273, 1, 1, "", "build_scale_mapping"], [273, 1, 1, "", "get_node_mapping"], [273, 1, 1, "", "get_quantizable_onnx_ops"], [273, 1, 1, "", "qdq_fp32_bias"], [273, 1, 1, "", "qdq_fp32_bias_qdq"], [273, 1, 1, "", "qdq_int32_bias"], [273, 1, 1, "", "recalculate_bias"], [273, 1, 1, "", "remove_nodes_by_name"], [273, 1, 1, "", "set_data_type"], [273, 1, 1, "", "set_scale_info"], [273, 1, 1, "", "sub_graph_with_int32_bias"], [273, 1, 1, "", "torch_to_fp32_onnx"], [273, 1, 1, "", "torch_to_int8_onnx"], [273, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[274, 2, 1, "", "DummyDataReader"], [274, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[274, 3, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[275, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[275, 3, 1, "", "dataset"], [275, 4, 1, "", "eval_dataloader"], [275, 4, 1, "", "eval_func"], [275, 4, 1, "", "input"], [275, 4, 1, "", "metric"], [275, 4, 1, "", "model"], [275, 4, 1, "", "output"], [275, 4, 1, "", "postprocess"], [275, 4, 1, "", "precisions"], [275, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[283, 2, 1, "", "BaseMetric"], [283, 2, 1, "", "METRICS"], [277, 0, 0, "-", "bleu"], [278, 0, 0, "-", "bleu_util"], [279, 0, 0, "-", "coco_label_map"], [280, 0, 0, "-", "coco_tools"], [281, 0, 0, "-", "evaluate_squad"], [282, 0, 0, "-", "f1"], [284, 0, 0, "-", "metric"], [283, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[283, 4, 1, "", "hvd"], [283, 4, 1, "", "metric"], [283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[283, 6, 1, "", "metrics"], [283, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[277, 2, 1, "", "BLEU"], [277, 2, 1, "", "UnicodeRegex"], [277, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[277, 6, 1, "", "labels"], [277, 6, 1, "", "predictions"], [277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[277, 6, 1, "", "nondigit_punct_re"], [277, 3, 1, "", "property_chars"], [277, 6, 1, "", "punct_nondigit_re"], [277, 6, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[278, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[280, 2, 1, "", "COCOEvalWrapper"], [280, 2, 1, "", "COCOWrapper"], [280, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [280, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [280, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[280, 3, 1, "", "ComputeMetrics"], [280, 3, 1, "", "GetAgnosticMode"], [280, 3, 1, "", "GetCategory"], [280, 3, 1, "", "GetCategoryIdList"], [280, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[280, 3, 1, "", "LoadAnnotations"], [280, 6, 1, "", "dataset"], [280, 6, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[281, 1, 1, "", "evaluate"], [281, 1, 1, "", "exact_match_score"], [281, 1, 1, "", "f1_score"], [281, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[282, 1, 1, "", "evaluate"], [282, 1, 1, "", "f1_score"], [282, 1, 1, "", "metric_max_over_ground_truths"], [282, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[284, 2, 1, "", "Accuracy"], [284, 2, 1, "", "BaseMetric"], [284, 2, 1, "", "COCOmAPv2"], [284, 2, 1, "", "F1"], [284, 2, 1, "", "GeneralTopK"], [284, 2, 1, "", "Loss"], [284, 2, 1, "", "MAE"], [284, 2, 1, "", "METRICS"], [284, 2, 1, "", "MSE"], [284, 2, 1, "", "MXNetMetrics"], [284, 2, 1, "", "ONNXRTGLUE"], [284, 2, 1, "", "ONNXRTITMetrics"], [284, 2, 1, "", "ONNXRTQLMetrics"], [284, 2, 1, "", "PyTorchLoss"], [284, 2, 1, "", "PyTorchMetrics"], [284, 2, 1, "", "RMSE"], [284, 2, 1, "", "ROC"], [284, 2, 1, "", "SquadF1"], [284, 2, 1, "", "TensorflowCOCOMAP"], [284, 2, 1, "", "TensorflowMAP"], [284, 2, 1, "", "TensorflowMetrics"], [284, 2, 1, "", "TensorflowTopK"], [284, 2, 1, "", "TensorflowVOCMAP"], [284, 2, 1, "", "WrapMXNetMetric"], [284, 2, 1, "", "WrapONNXRTMetric"], [284, 2, 1, "", "WrapPyTorchMetric"], [284, 2, 1, "", "mIOU"], [284, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[284, 6, 1, "", "label_list"], [284, 6, 1, "", "pred_list"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 6, 1, "", "sample"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[284, 4, 1, "", "hvd"], [284, 4, 1, "", "metric"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[284, 6, 1, "", "k"], [284, 6, 1, "", "num_correct"], [284, 6, 1, "", "num_sample"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 6, 1, "", "sample"], [284, 6, 1, "", "sum"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[284, 6, 1, "", "compare_label"], [284, 6, 1, "", "label_list"], [284, 6, 1, "", "pred_list"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[284, 6, 1, "", "metrics"], [284, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[284, 6, 1, "", "compare_label"], [284, 6, 1, "", "label_list"], [284, 6, 1, "", "pred_list"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[284, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[284, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[284, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[284, 3, 1, "", "compute"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[284, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[284, 6, 1, "", "mse"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[284, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[284, 6, 1, "", "k"], [284, 6, 1, "", "num_correct"], [284, 6, 1, "", "num_sample"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[285, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[285, 4, 1, "", "precisions"], [285, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[286, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[286, 3, 1, "", "dataset"], [286, 4, 1, "", "destination"], [286, 4, 1, "", "eval_dataloader"], [286, 4, 1, "", "eval_func"], [286, 4, 1, "", "metric"], [286, 4, 1, "", "model"], [286, 4, 1, "", "postprocess"], [286, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[299, 2, 1, "", "BasicNAS"], [299, 2, 1, "", "DyNAS"], [299, 2, 1, "", "NAS"], [287, 0, 0, "-", "basic_nas"], [288, 0, 0, "-", "dynas"], [293, 0, 0, "-", "dynast"], [300, 0, 0, "-", "nas"], [301, 0, 0, "-", "nas_utils"], [302, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[299, 3, 1, "", "estimate"], [299, 3, 1, "", "execute"], [299, 3, 1, "", "init_by_cfg"], [299, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[299, 3, 1, "", "create_acc_predictor"], [299, 3, 1, "", "create_latency_predictor"], [299, 3, 1, "", "create_macs_predictor"], [299, 3, 1, "", "estimate"], [299, 3, 1, "", "init_cfg"], [299, 3, 1, "", "init_for_search"], [299, 3, 1, "", "search"], [299, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[287, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[287, 3, 1, "", "estimate"], [287, 3, 1, "", "execute"], [287, 3, 1, "", "init_by_cfg"], [287, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[288, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[288, 3, 1, "", "create_acc_predictor"], [288, 3, 1, "", "create_latency_predictor"], [288, 3, 1, "", "create_macs_predictor"], [288, 3, 1, "", "estimate"], [288, 3, 1, "", "init_cfg"], [288, 3, 1, "", "init_for_search"], [288, 3, 1, "", "search"], [288, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[289, 0, 0, "-", "dynas_manager"], [290, 0, 0, "-", "dynas_predictor"], [291, 0, 0, "-", "dynas_search"], [292, 0, 0, "-", "dynas_utils"], [294, 0, 0, "-", "supernetwork"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[289, 2, 1, "", "ParameterManager"], [289, 2, 1, "", "TransformerLTEncoding"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[289, 3, 1, "", "create_training_set"], [289, 3, 1, "", "import_csv"], [289, 3, 1, "", "onehot_generic"], [289, 3, 1, "", "process_param_dict"], [289, 3, 1, "", "random_sample"], [289, 3, 1, "", "random_samples"], [289, 3, 1, "", "set_seed"], [289, 3, 1, "", "translate2param"], [289, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding": [[289, 3, 1, "", "create_training_set"], [289, 3, 1, "", "import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[290, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[290, 3, 1, "", "get_metrics"], [290, 3, 1, "", "get_parameters"], [290, 3, 1, "", "load"], [290, 3, 1, "", "predict"], [290, 3, 1, "", "save"], [290, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[291, 2, 1, "", "ProblemMultiObjective"], [291, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[291, 3, 1, "", "configure_age"], [291, 3, 1, "", "configure_nsga2"], [291, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[292, 2, 1, "", "EvaluationInterface"], [292, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [292, 2, 1, "", "EvaluationInterfaceResNet50"], [292, 2, 1, "", "EvaluationInterfaceTransformerLT"], [292, 2, 1, "", "OFARunner"], [292, 2, 1, "", "Runner"], [292, 2, 1, "", "TorchVisionReference"], [292, 2, 1, "", "TransformerLTRunner"], [292, 1, 1, "", "get_macs"], [292, 1, 1, "", "get_torchvision_model"], [292, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[292, 3, 1, "", "clear_csv"], [292, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[292, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[292, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT": [[292, 3, 1, "", "clear_csv"], [292, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[292, 3, 1, "", "estimate_accuracy_top1"], [292, 3, 1, "", "estimate_latency"], [292, 3, 1, "", "estimate_macs"], [292, 3, 1, "", "get_subnet"], [292, 3, 1, "", "measure_latency"], [292, 3, 1, "", "validate_macs"], [292, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[292, 3, 1, "", "measure_latency"], [292, 3, 1, "", "validate_macs"], [292, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner": [[292, 3, 1, "", "measure_latency"], [292, 3, 1, "", "validate_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[295, 0, 0, "-", "machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[296, 0, 0, "-", "modules_supernetwork"], [297, 0, 0, "-", "transformer_interface"], [298, 0, 0, "-", "transformer_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[296, 2, 1, "", "MultiheadAttentionSuper"], [296, 1, 1, "", "get_incremental_state"], [296, 1, 1, "", "set_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper": [[296, 3, 1, "", "forward"], [296, 3, 1, "", "reorder_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[297, 1, 1, "", "compute_bleu"], [297, 1, 1, "", "compute_latency"], [297, 1, 1, "", "compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[298, 2, 1, "", "TransformerDecoder"], [298, 2, 1, "", "TransformerDecoderLayer"], [298, 2, 1, "", "TransformerEncoder"], [298, 2, 1, "", "TransformerEncoderLayer"], [298, 2, 1, "", "TransformerSuperNetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder": [[298, 3, 1, "", "extract_features"], [298, 3, 1, "", "forward"], [298, 3, 1, "", "max_positions"], [298, 3, 1, "", "output_layer"], [298, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer": [[298, 3, 1, "", "forward"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder": [[298, 3, 1, "", "forward"], [298, 3, 1, "", "max_positions"], [298, 3, 1, "", "reorder_encoder_out"], [298, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer": [[298, 3, 1, "", "forward"], [298, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.nas": [[300, 2, 1, "", "NAS"], [300, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[300, 3, 1, "", "count_model_parameters"], [300, 3, 1, "", "dump_search_results"], [300, 3, 1, "", "estimate"], [300, 3, 1, "", "find_best_model_archs"], [300, 3, 1, "", "init_search_cfg"], [300, 3, 1, "", "load_search_results"], [300, 3, 1, "", "metrics_conversion"], [300, 4, 1, "", "model_builder"], [300, 3, 1, "", "params_vec2params_dict"], [300, 3, 1, "", "search"], [300, 4, 1, "", "search_algorithm"], [300, 4, 1, "", "search_space"], [300, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[301, 1, 1, "", "create_search_space_pool"], [301, 1, 1, "", "find_pareto_front"], [301, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[302, 2, 1, "", "BayesianOptimizationSearcher"], [302, 2, 1, "", "GridSearcher"], [302, 2, 1, "", "RandomSearcher"], [302, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[302, 3, 1, "", "get_feedback"], [302, 3, 1, "", "indices2params_vec"], [302, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[302, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[302, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[302, 3, 1, "", "get_feedback"], [302, 3, 1, "", "params_vec2params_dict"], [302, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[303, 2, 1, "", "Pruning"], [303, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[303, 6, 1, "", "conf"], [303, 4, 1, "", "evaluation_distributed"], [303, 3, 1, "", "execute"], [303, 3, 1, "", "generate_hooks"], [303, 3, 1, "", "generate_pruners"], [303, 3, 1, "", "get_sparsity_ratio"], [303, 3, 1, "", "pre_process"], [303, 3, 1, "", "prepare"], [303, 6, 1, "", "pruners"], [303, 4, 1, "", "pruning_func"], [303, 4, 1, "", "train_distributed"], [303, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[303, 3, 1, "", "on_after_compute_loss"], [303, 3, 1, "", "on_batch_begin"], [303, 3, 1, "", "on_batch_end"], [303, 3, 1, "", "on_epoch_begin"], [303, 3, 1, "", "on_epoch_end"], [303, 3, 1, "", "on_step_begin"], [303, 3, 1, "", "on_step_end"], [303, 3, 1, "", "on_train_begin"], [303, 3, 1, "", "on_train_end"], [303, 3, 1, "", "post_epoch_end"], [303, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[304, 2, 1, "", "PATTERNS"], [305, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[304, 6, 1, "", "patterns"], [304, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[305, 2, 1, "", "PATTERNS"], [306, 0, 0, "-", "pattern"], [307, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[305, 6, 1, "", "patterns"], [305, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[306, 2, 1, "", "PATTERNS"], [306, 2, 1, "", "PatternBase"], [306, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[306, 6, 1, "", "patterns"], [306, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[306, 3, 1, "", "compute_sparsity"], [306, 3, 1, "", "reduce"], [306, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[307, 2, 1, "", "TilePatternBase"], [307, 2, 1, "", "TilePattern_1x1"], [307, 2, 1, "", "TilePattern_1x16"], [307, 2, 1, "", "TilePattern_1x2"], [307, 2, 1, "", "TilePattern_2x2"], [307, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[307, 3, 1, "", "compute_sparsity"], [307, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pruning_v2": [[308, 2, 1, "", "Pruning"], [308, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[308, 6, 1, "", "conf"], [308, 4, 1, "", "evaluation_distributed"], [308, 3, 1, "", "execute"], [308, 3, 1, "", "generate_hooks"], [308, 3, 1, "", "get_sparsity_ratio"], [308, 3, 1, "", "pre_process"], [308, 3, 1, "", "prepare"], [308, 6, 1, "", "pruners"], [308, 4, 1, "", "pruning_func"], [308, 4, 1, "", "train_distributed"], [308, 3, 1, "", "update_config"]], "neural_compressor.experimental.pruning_v2.TfPruningCallback": [[308, 3, 1, "", "on_after_compute_loss"], [308, 3, 1, "", "on_batch_begin"], [308, 3, 1, "", "on_batch_end"], [308, 3, 1, "", "on_epoch_begin"], [308, 3, 1, "", "on_epoch_end"], [308, 3, 1, "", "on_step_begin"], [308, 3, 1, "", "on_step_end"], [308, 3, 1, "", "on_train_begin"], [308, 3, 1, "", "on_train_end"], [308, 3, 1, "", "post_epoch_end"], [308, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pytorch_pruner": [[310, 0, 0, "-", "logger"], [311, 0, 0, "-", "patterns"], [312, 0, 0, "-", "prune_utils"], [313, 0, 0, "-", "pruner"], [314, 0, 0, "-", "pruning"], [315, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[311, 2, 1, "", "Pattern"], [311, 2, 1, "", "PatternNInM"], [311, 2, 1, "", "PatternNxM"], [311, 1, 1, "", "get_pattern"], [311, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[311, 3, 1, "", "get_block_size_dict"], [311, 3, 1, "", "get_mask_single"], [311, 3, 1, "", "get_masks"], [311, 3, 1, "", "get_masks_global"], [311, 3, 1, "", "get_masks_local"], [311, 3, 1, "", "get_pattern_lock_masks"], [311, 3, 1, "", "get_sparsity_ratio"], [311, 6, 1, "", "is_global"], [311, 6, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[311, 6, 1, "", "M"], [311, 6, 1, "", "N"], [311, 3, 1, "", "get_masks_global"], [311, 3, 1, "", "get_pattern_lock_masks"], [311, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[311, 6, 1, "", "block_size"], [311, 3, 1, "", "get_block_size_dict"], [311, 3, 1, "", "get_masks_global"], [311, 3, 1, "", "get_pattern_lock_masks"], [311, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[312, 1, 1, "", "check_config"], [312, 1, 1, "", "parse_not_to_prune"], [312, 1, 1, "", "parse_to_prune"], [312, 1, 1, "", "process_and_check_config"], [312, 1, 1, "", "process_config"], [312, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[313, 2, 1, "", "MagnitudePruner"], [313, 2, 1, "", "PatternLockPruner"], [313, 2, 1, "", "Pruner"], [313, 2, 1, "", "SnipMomentumPruner"], [313, 2, 1, "", "SnipPruner"], [313, 1, 1, "", "get_pruner"], [313, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[313, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[313, 3, 1, "", "on_after_optimizer_step"], [313, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[313, 3, 1, "", "check_is_pruned_step"], [313, 6, 1, "", "config"], [313, 6, 1, "", "current_sparsity_ratio"], [313, 6, 1, "", "end_step"], [313, 6, 1, "", "global_step"], [313, 3, 1, "", "mask_weights"], [313, 6, 1, "", "masks"], [313, 6, 1, "", "max_sparsity_ratio_per_layer"], [313, 6, 1, "", "modules"], [313, 3, 1, "", "on_after_eval"], [313, 3, 1, "", "on_after_optimizer_step"], [313, 3, 1, "", "on_before_eval"], [313, 3, 1, "", "on_before_optimizer_step"], [313, 3, 1, "", "on_epoch_begin"], [313, 3, 1, "", "on_epoch_end"], [313, 3, 1, "", "on_step_begin"], [313, 3, 1, "", "on_step_end"], [313, 3, 1, "", "on_train_begin"], [313, 3, 1, "", "on_train_end"], [313, 6, 1, "", "pattern"], [313, 6, 1, "", "scheduler"], [313, 6, 1, "", "scores"], [313, 6, 1, "", "start_step"], [313, 6, 1, "", "target_sparsity_ratio"], [313, 6, 1, "", "update_frequency_on_step"], [313, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[313, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[313, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[314, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[314, 6, 1, "", "config_file_path"], [314, 3, 1, "", "get_sparsity_ratio"], [314, 6, 1, "", "model"], [314, 3, 1, "", "on_after_eval"], [314, 3, 1, "", "on_after_optimizer_step"], [314, 3, 1, "", "on_before_eval"], [314, 3, 1, "", "on_before_optimizer_step"], [314, 3, 1, "", "on_epoch_begin"], [314, 3, 1, "", "on_epoch_end"], [314, 3, 1, "", "on_step_begin"], [314, 3, 1, "", "on_step_end"], [314, 3, 1, "", "on_train_begin"], [314, 3, 1, "", "on_train_end"], [314, 3, 1, "", "prepare"], [314, 6, 1, "", "pruner_info"], [314, 6, 1, "", "pruners"], [314, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[315, 2, 1, "", "IterativeScheduler"], [315, 2, 1, "", "OneshotScheduler"], [315, 2, 1, "", "Scheduler"], [315, 1, 1, "", "get_scheduler"], [315, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[315, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[315, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[315, 6, 1, "", "config"], [315, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[316, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[316, 4, 1, "", "calib_dataloader"], [316, 3, 1, "", "dataset"], [316, 3, 1, "", "execute"], [316, 4, 1, "", "metric"], [316, 4, 1, "", "model"], [316, 4, 1, "", "objective"], [316, 4, 1, "", "postprocess"], [316, 3, 1, "", "pre_process"], [316, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[317, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[317, 3, 1, "", "append"], [317, 3, 1, "", "combine"], [317, 4, 1, "", "eval_func"], [317, 4, 1, "", "model"], [317, 4, 1, "", "train_func"]], "neural_compressor.metric": [[325, 2, 1, "", "BaseMetric"], [325, 2, 1, "", "METRICS"], [325, 2, 1, "", "Metric"], [319, 0, 0, "-", "bleu"], [320, 0, 0, "-", "bleu_util"], [321, 0, 0, "-", "coco_label_map"], [322, 0, 0, "-", "coco_tools"], [323, 0, 0, "-", "evaluate_squad"], [324, 0, 0, "-", "f1"], [326, 0, 0, "-", "metric"], [325, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[325, 4, 1, "", "hvd"], [325, 4, 1, "", "metric"], [325, 3, 1, "", "reset"], [325, 3, 1, "", "result"], [325, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[325, 6, 1, "", "metrics"], [325, 3, 1, "", "register"]], "neural_compressor.metric.bleu": [[319, 2, 1, "", "BLEU"], [319, 2, 1, "", "UnicodeRegex"], [319, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[319, 6, 1, "", "labels"], [319, 6, 1, "", "predictions"], [319, 3, 1, "", "reset"], [319, 3, 1, "", "result"], [319, 3, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[319, 6, 1, "", "nondigit_punct_re"], [319, 3, 1, "", "property_chars"], [319, 6, 1, "", "punct_nondigit_re"], [319, 6, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[320, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[322, 2, 1, "", "COCOEvalWrapper"], [322, 2, 1, "", "COCOWrapper"], [322, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [322, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [322, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[322, 3, 1, "", "ComputeMetrics"], [322, 3, 1, "", "GetAgnosticMode"], [322, 3, 1, "", "GetCategory"], [322, 3, 1, "", "GetCategoryIdList"], [322, 3, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[322, 3, 1, "", "LoadAnnotations"], [322, 6, 1, "", "dataset"], [322, 6, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[323, 1, 1, "", "evaluate"], [323, 1, 1, "", "exact_match_score"], [323, 1, 1, "", "f1_score"], [323, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[324, 1, 1, "", "evaluate"], [324, 1, 1, "", "f1_score"], [324, 1, 1, "", "metric_max_over_ground_truths"], [324, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[326, 2, 1, "", "Accuracy"], [326, 2, 1, "", "BaseMetric"], [326, 2, 1, "", "COCOmAPv2"], [326, 2, 1, "", "F1"], [326, 2, 1, "", "GeneralTopK"], [326, 2, 1, "", "Loss"], [326, 2, 1, "", "MAE"], [326, 2, 1, "", "METRICS"], [326, 2, 1, "", "MSE"], [326, 2, 1, "", "MXNetMetrics"], [326, 2, 1, "", "Metric"], [326, 2, 1, "", "ONNXRTGLUE"], [326, 2, 1, "", "ONNXRTITMetrics"], [326, 2, 1, "", "ONNXRTQLMetrics"], [326, 2, 1, "", "PyTorchLoss"], [326, 2, 1, "", "PyTorchMetrics"], [326, 2, 1, "", "RMSE"], [326, 2, 1, "", "ROC"], [326, 2, 1, "", "SquadF1"], [326, 2, 1, "", "TensorflowCOCOMAP"], [326, 2, 1, "", "TensorflowMAP"], [326, 2, 1, "", "TensorflowMetrics"], [326, 2, 1, "", "TensorflowTopK"], [326, 2, 1, "", "TensorflowVOCMAP"], [326, 2, 1, "", "WrapMXNetMetric"], [326, 2, 1, "", "WrapONNXRTMetric"], [326, 2, 1, "", "WrapPyTorchMetric"], [326, 2, 1, "", "mIOU"], [326, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[326, 6, 1, "", "label_list"], [326, 6, 1, "", "pred_list"], [326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 6, 1, "", "sample"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[326, 4, 1, "", "hvd"], [326, 4, 1, "", "metric"], [326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[326, 6, 1, "", "k"], [326, 6, 1, "", "num_correct"], [326, 6, 1, "", "num_sample"], [326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 6, 1, "", "sample"], [326, 6, 1, "", "sum"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[326, 6, 1, "", "compare_label"], [326, 6, 1, "", "label_list"], [326, 6, 1, "", "pred_list"], [326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[326, 6, 1, "", "metrics"], [326, 3, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[326, 6, 1, "", "compare_label"], [326, 6, 1, "", "label_list"], [326, 6, 1, "", "pred_list"], [326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[326, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[326, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[326, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[326, 3, 1, "", "compute"], [326, 3, 1, "", "reset"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[326, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[326, 6, 1, "", "mse"], [326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[326, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[326, 6, 1, "", "k"], [326, 6, 1, "", "num_correct"], [326, 6, 1, "", "num_sample"], [326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[326, 3, 1, "", "reset"], [326, 3, 1, "", "result"], [326, 3, 1, "", "update"]], "neural_compressor.mix_precision": [[327, 1, 1, "", "fit"]], "neural_compressor.model": [[329, 2, 1, "", "BaseModel"], [329, 2, 1, "", "Model"], [328, 0, 0, "-", "base_model"], [330, 0, 0, "-", "keras_model"], [331, 0, 0, "-", "model"], [332, 0, 0, "-", "mxnet_model"], [333, 0, 0, "-", "nets_factory"], [334, 0, 0, "-", "onnx_model"], [335, 0, 0, "-", "tensorflow_model"], [336, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[329, 3, 1, "", "export"], [329, 3, 1, "", "framework"], [329, 4, 1, "", "graph_info"], [329, 4, 1, "", "model"], [329, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[328, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[328, 3, 1, "", "export"], [328, 3, 1, "", "framework"], [328, 4, 1, "", "graph_info"], [328, 4, 1, "", "model"], [328, 3, 1, "", "save"]], "neural_compressor.model.keras_model": [[330, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[330, 3, 1, "", "framework"], [330, 4, 1, "", "graph_info"], [330, 4, 1, "", "model"], [330, 4, 1, "", "q_config"], [330, 3, 1, "", "save"]], "neural_compressor.model.model": [[331, 2, 1, "", "Model"], [331, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[332, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[332, 3, 1, "", "framework"], [332, 4, 1, "", "model"], [332, 3, 1, "", "save"]], "neural_compressor.model.nets_factory": [[333, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.nets_factory.TFSlimNetsFactory": [[333, 3, 1, "", "register"]], "neural_compressor.model.onnx_model": [[334, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[334, 3, 1, "", "add_initializer"], [334, 3, 1, "", "add_initializers"], [334, 3, 1, "", "add_node"], [334, 3, 1, "", "add_nodes"], [334, 3, 1, "", "export"], [334, 3, 1, "", "find_node_by_name"], [334, 3, 1, "", "find_nodes_by_initializer"], [334, 3, 1, "", "framework"], [334, 3, 1, "", "get_children"], [334, 3, 1, "", "get_initializer"], [334, 3, 1, "", "get_nodes_chain"], [334, 3, 1, "", "get_parent"], [334, 3, 1, "", "get_parents"], [334, 3, 1, "", "get_scale_zero"], [334, 3, 1, "", "graph"], [334, 4, 1, "", "graph_info"], [334, 3, 1, "", "initializer"], [334, 3, 1, "", "input"], [334, 4, 1, "", "input_name_to_nodes"], [334, 3, 1, "", "ir_version"], [334, 4, 1, "", "large_size"], [334, 4, 1, "", "model"], [334, 4, 1, "", "model_path"], [334, 3, 1, "", "nodes"], [334, 3, 1, "", "opset_import"], [334, 3, 1, "", "output"], [334, 4, 1, "", "output_name_to_node"], [334, 4, 1, "", "q_config"], [334, 3, 1, "", "remove_initializer"], [334, 3, 1, "", "remove_initializers"], [334, 3, 1, "", "remove_node"], [334, 3, 1, "", "remove_nodes"], [334, 3, 1, "", "remove_unused_constant"], [334, 3, 1, "", "replace_input_of_all_nodes"], [334, 3, 1, "", "replace_node_input"], [334, 3, 1, "", "replace_node_output"], [334, 3, 1, "", "replace_output_of_all_nodes"], [334, 3, 1, "", "save"], [334, 3, 1, "", "save_model_to_file"], [334, 3, 1, "", "set_initializer"], [334, 3, 1, "", "topological_sort"], [334, 3, 1, "", "update"]], "neural_compressor.model.tensorflow_model": [[335, 2, 1, "", "TensorflowBaseModel"], [335, 2, 1, "", "TensorflowCheckpointModel"], [335, 2, 1, "", "TensorflowModel"], [335, 2, 1, "", "TensorflowQATModel"], [335, 2, 1, "", "TensorflowSavedModelModel"], [335, 1, 1, "", "checkpoint_session"], [335, 1, 1, "", "estimator_session"], [335, 1, 1, "", "frozen_pb_session"], [335, 1, 1, "", "get_model_type"], [335, 1, 1, "", "graph_def_session"], [335, 1, 1, "", "graph_session"], [335, 1, 1, "", "keras_session"], [335, 1, 1, "", "load_saved_model"], [335, 1, 1, "", "saved_model_session"], [335, 1, 1, "", "slim_session"], [335, 1, 1, "", "validate_and_inference_input_output"], [335, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[335, 3, 1, "", "framework"], [335, 4, 1, "", "graph"], [335, 4, 1, "", "graph_def"], [335, 4, 1, "", "graph_info"], [335, 4, 1, "", "input_node_names"], [335, 4, 1, "", "input_tensor"], [335, 4, 1, "", "input_tensor_names"], [335, 4, 1, "", "iter_op"], [335, 4, 1, "", "model"], [335, 4, 1, "", "model_type"], [335, 4, 1, "", "name"], [335, 4, 1, "", "output_node_names"], [335, 4, 1, "", "output_tensor"], [335, 4, 1, "", "output_tensor_names"], [335, 4, 1, "", "q_config"], [335, 3, 1, "", "save"], [335, 4, 1, "", "sess"], [335, 4, 1, "", "weights"], [335, 4, 1, "", "workspace_path"]], "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel": [[335, 4, 1, "", "graph_def"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[335, 4, 1, "", "model"], [335, 3, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[335, 3, 1, "", "build_saved_model"], [335, 3, 1, "", "get_all_weight_names"], [335, 3, 1, "", "get_weight"], [335, 4, 1, "", "model"], [335, 3, 1, "", "report_sparsity"], [335, 3, 1, "", "save"], [335, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model": [[336, 2, 1, "", "IPEXModel"], [336, 2, 1, "", "PyTorchBaseModel"], [336, 2, 1, "", "PyTorchFXModel"], [336, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[336, 3, 1, "", "save"], [336, 4, 1, "", "workspace_path"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[336, 3, 1, "", "forward"], [336, 4, 1, "", "fp32_model"], [336, 3, 1, "", "framework"], [336, 3, 1, "", "generate_forward_pre_hook"], [336, 3, 1, "", "get_all_weight_names"], [336, 3, 1, "", "get_gradient"], [336, 3, 1, "", "get_inputs"], [336, 3, 1, "", "get_weight"], [336, 4, 1, "", "model"], [336, 3, 1, "", "prune_weights_"], [336, 3, 1, "", "register_forward_pre_hook"], [336, 3, 1, "", "remove_hooks"], [336, 3, 1, "", "report_sparsity"], [336, 3, 1, "", "update_gradient"], [336, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[336, 3, 1, "", "export"], [336, 3, 1, "", "export_to_bf16_onnx"], [336, 3, 1, "", "export_to_fp32_onnx"], [336, 3, 1, "", "export_to_int8_onnx"], [336, 3, 1, "", "export_to_jit"], [336, 4, 1, "", "graph_info"], [336, 3, 1, "", "load_quantized_state_dict"], [336, 3, 1, "", "quantized_state_dict"], [336, 3, 1, "", "save"], [336, 4, 1, "", "workspace_path"]], "neural_compressor.objective": [[337, 2, 1, "", "Accuracy"], [337, 2, 1, "", "Footprint"], [337, 2, 1, "", "ModelSize"], [337, 2, 1, "", "MultiObjective"], [337, 2, 1, "", "Objective"], [337, 2, 1, "", "Performance"], [337, 1, 1, "", "objective_custom_registry"], [337, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[337, 3, 1, "", "end"], [337, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[337, 3, 1, "", "end"], [337, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[337, 3, 1, "", "end"], [337, 3, 1, "", "start"]], "neural_compressor.objective.MultiObjective": [[337, 3, 1, "", "accuracy_meets"], [337, 4, 1, "", "accuracy_target"], [337, 4, 1, "", "baseline"], [337, 3, 1, "", "best_result"], [337, 3, 1, "", "compare"], [337, 3, 1, "", "end"], [337, 3, 1, "", "evaluate"], [337, 3, 1, "", "reset"], [337, 3, 1, "", "result"], [337, 3, 1, "", "set_model"], [337, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[337, 3, 1, "", "end"], [337, 4, 1, "", "model"], [337, 3, 1, "", "reset"], [337, 3, 1, "", "result"], [337, 3, 1, "", "result_list"], [337, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[337, 3, 1, "", "end"], [337, 3, 1, "", "start"]], "neural_compressor.pruner": [[338, 0, 0, "-", "criteria"], [340, 0, 0, "-", "logger"], [341, 0, 0, "-", "patterns"], [344, 0, 0, "-", "pruner_legacy"], [348, 0, 0, "-", "pruners"], [349, 0, 0, "-", "pruning"], [350, 0, 0, "-", "regs"], [351, 0, 0, "-", "schedulers"], [352, 0, 0, "-", "utils"]], "neural_compressor.pruner.criteria": [[338, 2, 1, "", "GradientCriterion"], [338, 2, 1, "", "MagnitudeCriterion"], [338, 2, 1, "", "PruningCriterion"], [338, 2, 1, "", "SnipCriterion"], [338, 2, 1, "", "SnipMomentumCriterion"], [338, 1, 1, "", "get_criterion"], [338, 1, 1, "", "register_criterion"]], "neural_compressor.pruner.criteria.GradientCriterion": [[338, 3, 1, "", "on_after_optimizer_step"], [338, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.MagnitudeCriterion": [[338, 3, 1, "", "on_step_begin"], [338, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.PruningCriterion": [[338, 3, 1, "", "on_after_optimizer_step"], [338, 3, 1, "", "on_step_begin"], [338, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipCriterion": [[338, 3, 1, "", "on_after_optimizer_step"], [338, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipMomentumCriterion": [[338, 3, 1, "", "on_after_optimizer_step"], [338, 6, 1, "", "scores"]], "neural_compressor.pruner.patterns": [[341, 2, 1, "", "BasePattern"], [341, 2, 1, "", "PatternNInM"], [341, 2, 1, "", "PatternNxM"], [341, 1, 1, "", "get_pattern"], [341, 1, 1, "", "register_pattern"]], "neural_compressor.pruner.patterns.BasePattern": [[341, 3, 1, "", "adjust_ratio"], [341, 3, 1, "", "check_layer_validity"], [341, 6, 1, "", "config"], [341, 3, 1, "", "get_block_size_dict"], [341, 3, 1, "", "get_masks"], [341, 3, 1, "", "get_masks_global"], [341, 3, 1, "", "get_masks_local"], [341, 3, 1, "", "get_pattern_lock_masks"], [341, 3, 1, "", "get_reduced_masks_from_data"], [341, 3, 1, "", "get_single_mask_per_target_ratio"], [341, 3, 1, "", "get_sparsity_ratio"], [341, 3, 1, "", "get_sparsity_ratio_each_layer"], [341, 6, 1, "", "invalid_layers"], [341, 6, 1, "", "is_global"], [341, 6, 1, "", "keep_mask_layers"], [341, 6, 1, "", "max_sparsity_ratio_per_op"], [341, 6, 1, "", "min_sparsity_ratio_per_op"], [341, 6, 1, "", "modules"], [341, 6, 1, "", "pattern"], [341, 3, 1, "", "reduce_tensor"], [341, 6, 1, "", "target_sparsity"], [341, 3, 1, "", "update_residual_cnt"]], "neural_compressor.pruner.patterns.PatternNInM": [[341, 6, 1, "", "M"], [341, 6, 1, "", "N"], [341, 3, 1, "", "check_layer_validity"], [341, 3, 1, "", "get_ele_mask_per_threshold"], [341, 3, 1, "", "get_least_ninm_mask_from_data"], [341, 3, 1, "", "get_masks_global"], [341, 3, 1, "", "get_pattern_lock_masks"], [341, 3, 1, "", "get_reduced_masks_from_data"], [341, 3, 1, "", "get_sparsity_ratio"], [341, 3, 1, "", "reduce_scores"], [341, 3, 1, "", "reshape_orig_to_pattern"], [341, 3, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.pruner.patterns.PatternNxM": [[341, 6, 1, "", "block_size"], [341, 3, 1, "", "check_layer_validity"], [341, 3, 1, "", "count_new_masked_cnts"], [341, 3, 1, "", "get_block_size_dict"], [341, 3, 1, "", "get_mask_per_threshold"], [341, 3, 1, "", "get_masks_global"], [341, 3, 1, "", "get_pattern_lock_masks"], [341, 3, 1, "", "get_reduced_masks_from_data"], [341, 3, 1, "", "get_sparsity_ratio"], [341, 3, 1, "", "get_sparsity_ratio_progressive"], [341, 3, 1, "", "reduce_scores"], [341, 3, 1, "", "reshape_orig_to_pattern"], [341, 3, 1, "", "reshape_reduced_to_orig"], [341, 3, 1, "", "update_new_added_masks"], [341, 3, 1, "", "update_progressive_masks"], [341, 3, 1, "", "update_progressive_masks_global"], [341, 3, 1, "", "update_progressive_masks_linear"], [341, 3, 1, "", "update_progressive_masks_local"], [341, 3, 1, "", "update_progressive_masks_scores"]], "neural_compressor.pruner.pruner_legacy": [[342, 0, 0, "-", "gradient_sensitivity"], [343, 0, 0, "-", "group_lasso"], [345, 0, 0, "-", "magnitude"], [346, 0, 0, "-", "pattern_lock"], [347, 0, 0, "-", "pruner"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[342, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner": [[342, 3, 1, "", "compute_mask"], [342, 3, 1, "", "on_epoch_begin"], [342, 3, 1, "", "on_epoch_end"], [342, 3, 1, "", "on_step_begin"], [342, 3, 1, "", "on_step_end"], [342, 3, 1, "", "parse_weight_name"], [342, 3, 1, "", "prune_by_importance"], [342, 3, 1, "", "prune_weight"], [342, 3, 1, "", "update_importance_abs"], [342, 3, 1, "", "update_importance_elementwise"], [342, 3, 1, "", "update_importance_weighted"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[343, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner": [[343, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[345, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner": [[345, 3, 1, "", "compute_mask"], [345, 3, 1, "", "on_epoch_begin"], [345, 3, 1, "", "on_epoch_end"], [345, 3, 1, "", "on_step_begin"], [345, 3, 1, "", "on_step_end"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[346, 2, 1, "", "PatternLockPruner"]], "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner": [[346, 3, 1, "", "compute_mask"], [346, 3, 1, "", "on_epoch_begin"], [346, 3, 1, "", "on_epoch_end"], [346, 3, 1, "", "on_step_begin"], [346, 3, 1, "", "on_step_end"], [346, 3, 1, "", "update_weights"]], "neural_compressor.pruner.pruner_legacy.pruner": [[347, 2, 1, "", "Pruner"], [347, 1, 1, "", "pruner_registry"]], "neural_compressor.pruner.pruner_legacy.pruner.Pruner": [[347, 3, 1, "", "on_before_optimizer_step"], [347, 3, 1, "", "on_epoch_begin"], [347, 3, 1, "", "on_epoch_end"], [347, 3, 1, "", "on_step_begin"], [347, 3, 1, "", "on_step_end"], [347, 3, 1, "", "on_train_begin"], [347, 3, 1, "", "on_train_end"], [347, 3, 1, "", "update_sparsity"]], "neural_compressor.pruner.pruners": [[348, 2, 1, "", "BasePruner"], [348, 2, 1, "", "BasicPruner"], [348, 2, 1, "", "PatternLockPruner"], [348, 2, 1, "", "ProgressivePruner"], [348, 1, 1, "", "get_pruner"], [348, 1, 1, "", "parse_valid_pruner_types"], [348, 1, 1, "", "register_pruner"]], "neural_compressor.pruner.pruners.BasePruner": [[348, 3, 1, "", "check_is_pruned_step"], [348, 6, 1, "", "config"], [348, 6, 1, "", "current_sparsity_ratio"], [348, 6, 1, "", "end_step"], [348, 6, 1, "", "global_step"], [348, 3, 1, "", "mask_weights"], [348, 3, 1, "", "mask_weights_general"], [348, 6, 1, "", "masks"], [348, 6, 1, "", "max_sparsity_ratio_per_op"], [348, 6, 1, "", "modules"], [348, 3, 1, "", "on_after_eval"], [348, 3, 1, "", "on_after_optimizer_step"], [348, 3, 1, "", "on_before_eval"], [348, 3, 1, "", "on_before_optimizer_step"], [348, 3, 1, "", "on_epoch_begin"], [348, 3, 1, "", "on_epoch_end"], [348, 3, 1, "", "on_step_begin"], [348, 3, 1, "", "on_step_end"], [348, 3, 1, "", "on_train_begin"], [348, 3, 1, "", "on_train_end"], [348, 6, 1, "", "pattern"], [348, 6, 1, "", "pruning_frequency"], [348, 6, 1, "", "scheduler"], [348, 6, 1, "", "scores"], [348, 6, 1, "", "start_step"], [348, 6, 1, "", "target_sparsity_ratio"], [348, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.BasicPruner": [[348, 6, 1, "", "criterion"], [348, 3, 1, "", "on_after_optimizer_step"], [348, 3, 1, "", "on_before_optimizer_step"], [348, 6, 1, "", "pattern"], [348, 6, 1, "", "reg"], [348, 6, 1, "", "scheduler"], [348, 3, 1, "", "set_global_step"], [348, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.PatternLockPruner": [[348, 3, 1, "", "on_after_optimizer_step"], [348, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.ProgressivePruner": [[348, 3, 1, "", "check_is_pruned_progressive_step"], [348, 3, 1, "", "check_progressive_validity"], [348, 3, 1, "", "on_after_optimizer_step"], [348, 3, 1, "", "on_before_optimizer_step"], [348, 3, 1, "", "on_step_begin"], [348, 3, 1, "", "print_progressive_sparsity"], [348, 3, 1, "", "update_masks_progressive"]], "neural_compressor.pruner.pruning": [[349, 2, 1, "", "Pruning"]], "neural_compressor.pruner.pruning.Pruning": [[349, 6, 1, "", "config_file_path"], [349, 3, 1, "", "get_sparsity_ratio"], [349, 4, 1, "id0", "model"], [349, 3, 1, "", "on_after_eval"], [349, 3, 1, "", "on_after_optimizer_step"], [349, 3, 1, "", "on_before_eval"], [349, 3, 1, "", "on_before_optimizer_step"], [349, 3, 1, "", "on_epoch_begin"], [349, 3, 1, "", "on_epoch_end"], [349, 3, 1, "", "on_step_begin"], [349, 3, 1, "", "on_step_end"], [349, 3, 1, "", "on_train_begin"], [349, 3, 1, "", "on_train_end"], [349, 6, 1, "", "pruner_info"], [349, 6, 1, "", "pruners"], [349, 3, 1, "", "update_config"]], "neural_compressor.pruner.regs": [[350, 2, 1, "", "BaseReg"], [350, 2, 1, "", "GroupLasso"], [350, 1, 1, "", "get_reg"], [350, 1, 1, "", "get_reg_type"], [350, 1, 1, "", "register_reg"]], "neural_compressor.pruner.regs.BaseReg": [[350, 3, 1, "", "on_after_optimizer_step"], [350, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.regs.GroupLasso": [[350, 6, 1, "", "alpha"], [350, 3, 1, "", "on_after_optimizer_step"], [350, 3, 1, "", "on_before_optimizer_step"], [350, 6, 1, "", "reg_terms"]], "neural_compressor.pruner.schedulers": [[351, 2, 1, "", "IterativeScheduler"], [351, 2, 1, "", "OneshotScheduler"], [351, 2, 1, "", "PruningScheduler"], [351, 1, 1, "", "get_scheduler"], [351, 1, 1, "", "register_scheduler"]], "neural_compressor.pruner.schedulers.IterativeScheduler": [[351, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.OneshotScheduler": [[351, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.PruningScheduler": [[351, 6, 1, "", "config"], [351, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.utils": [[352, 1, 1, "", "check_config"], [352, 1, 1, "", "check_key_validity"], [352, 1, 1, "", "parse_to_prune"], [352, 1, 1, "", "process_and_check_config"], [352, 1, 1, "", "process_config"], [352, 1, 1, "", "process_weight_config"], [352, 1, 1, "", "process_yaml_config"], [352, 1, 1, "", "reset_none_to_default"], [352, 1, 1, "", "update_params"]], "neural_compressor.quantization": [[353, 1, 1, "", "fit"]], "neural_compressor.strategy": [[354, 0, 0, "-", "auto_mixed_precision"], [355, 0, 0, "-", "basic"], [356, 0, 0, "-", "bayesian"], [357, 0, 0, "-", "conservative"], [358, 0, 0, "-", "exhaustive"], [359, 0, 0, "-", "hawq_v2"], [361, 0, 0, "-", "mse"], [362, 0, 0, "-", "mse_v2"], [363, 0, 0, "-", "random"], [364, 0, 0, "-", "strategy"], [365, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[354, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[354, 3, 1, "", "next_tune_cfg"], [354, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[355, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[355, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[356, 2, 1, "", "BayesianOptimization"], [356, 2, 1, "", "BayesianTuneStrategy"], [356, 2, 1, "", "TargetSpace"], [356, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianOptimization": [[356, 3, 1, "", "gen_next_params"], [356, 4, 1, "", "max"], [356, 4, 1, "", "res"], [356, 4, 1, "", "space"], [356, 3, 1, "", "suggest"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[356, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[356, 3, 1, "", "array_to_params"], [356, 4, 1, "", "bounds"], [356, 4, 1, "", "dim"], [356, 4, 1, "", "empty"], [356, 3, 1, "", "get_target"], [356, 4, 1, "", "keys"], [356, 3, 1, "", "max"], [356, 4, 1, "", "params"], [356, 3, 1, "", "params_to_array"], [356, 3, 1, "", "random_sample"], [356, 3, 1, "", "register"], [356, 3, 1, "", "res"], [356, 4, 1, "", "target"]], "neural_compressor.strategy.conservative": [[357, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[357, 3, 1, "", "next_tune_cfg"], [357, 3, 1, "", "stop"], [357, 3, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[358, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[358, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[359, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[359, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[361, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[361, 3, 1, "", "mse_impact_lst"], [361, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[362, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[362, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[363, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[363, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[364, 2, 1, "", "TuneStrategy"], [364, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[364, 3, 1, "", "deploy_config"], [364, 4, 1, "", "evaluation_result"], [364, 3, 1, "", "initial_best_acc"], [364, 3, 1, "", "initial_tuning_cfg"], [364, 3, 1, "", "next_tune_cfg"], [364, 3, 1, "", "set_q_func"], [364, 3, 1, "", "set_tuning_space"], [364, 3, 1, "", "setup_resume"], [364, 3, 1, "", "show_baseline_info"], [364, 3, 1, "", "stop"], [364, 3, 1, "", "traverse"], [364, 3, 1, "", "update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils": [[365, 2, 1, "", "OpTuningConfig"], [366, 0, 0, "-", "tuning_sampler"], [367, 0, 0, "-", "tuning_space"], [368, 0, 0, "-", "tuning_structs"]], "neural_compressor.strategy.utils.OpTuningConfig": [[365, 3, 1, "", "from_state"], [365, 3, 1, "", "get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[368, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig": [[368, 3, 1, "", "from_state"], [368, 3, 1, "", "get_state"]], "neural_compressor.training": [[369, 2, 1, "", "CompressionManager"], [369, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[369, 2, 1, "", "CallBacks"], [369, 3, 1, "", "export"], [369, 3, 1, "", "save"]], "neural_compressor.training.CompressionManager.CallBacks": [[369, 3, 1, "", "on_after_compute_loss"], [369, 3, 1, "", "on_after_optimizer_step"], [369, 3, 1, "", "on_before_optimizer_step"], [369, 3, 1, "", "on_epoch_begin"], [369, 3, 1, "", "on_epoch_end"], [369, 3, 1, "", "on_step_begin"], [369, 3, 1, "", "on_step_end"], [369, 3, 1, "", "on_train_begin"], [369, 3, 1, "", "on_train_end"]], "neural_compressor.utils": [[373, 2, 1, "", "LayerHistogramCollector"], [370, 0, 0, "-", "collect_layer_histogram"], [371, 0, 0, "-", "constant"], [372, 0, 0, "-", "create_obj_from_config"], [373, 1, 1, "", "debug"], [373, 1, 1, "", "error"], [373, 1, 1, "", "fatal"], [373, 1, 1, "", "info"], [374, 0, 0, "-", "kl_divergence"], [375, 0, 0, "-", "load_huggingface"], [373, 1, 1, "", "log"], [376, 0, 0, "-", "logger"], [377, 0, 0, "-", "options"], [378, 0, 0, "-", "pytorch"], [379, 0, 0, "-", "utility"], [373, 1, 1, "", "warn"], [373, 1, 1, "", "warning"]], "neural_compressor.utils.LayerHistogramCollector": [[373, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[370, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[370, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[372, 1, 1, "", "create_dataloader"], [372, 1, 1, "", "create_dataset"], [372, 1, 1, "", "create_eval_func"], [372, 1, 1, "", "create_train_func"], [372, 1, 1, "", "get_algorithm"], [372, 1, 1, "", "get_func_from_config"], [372, 1, 1, "", "get_metrics"], [372, 1, 1, "", "get_postprocess"], [372, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[374, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[374, 3, 1, "", "expand_quantized_bins"], [374, 3, 1, "", "get_threshold"], [374, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.load_huggingface": [[375, 2, 1, "", "OptimizedModel"], [375, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.load_huggingface.OptimizedModel": [[375, 3, 1, "", "from_pretrained"]], "neural_compressor.utils.logger": [[376, 2, 1, "", "Logger"], [376, 1, 1, "", "debug"], [376, 1, 1, "", "error"], [376, 1, 1, "", "fatal"], [376, 1, 1, "", "info"], [376, 1, 1, "", "log"], [376, 1, 1, "", "warn"], [376, 1, 1, "", "warning"]], "neural_compressor.utils.logger.Logger": [[376, 3, 1, "", "get_logger"]], "neural_compressor.utils.options": [[377, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[378, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[379, 2, 1, "", "CpuInfo"], [379, 1, 1, "", "Dequantize"], [379, 1, 1, "", "DequantizeWeight"], [379, 2, 1, "", "GLOBAL_STATE"], [379, 2, 1, "", "LazyImport"], [379, 2, 1, "", "MODE"], [379, 2, 1, "", "Statistics"], [379, 1, 1, "", "combine_histogram"], [379, 1, 1, "", "compute_sparsity"], [379, 1, 1, "", "dump_data_to_local"], [379, 1, 1, "", "dump_elapsed_time"], [379, 1, 1, "", "equal_dicts"], [379, 1, 1, "", "fault_tolerant_file"], [379, 1, 1, "", "get_all_fp32_data"], [379, 1, 1, "", "get_size"], [379, 1, 1, "", "get_tensor_histogram"], [379, 1, 1, "", "get_tuning_history"], [379, 1, 1, "", "load_data_from_pkl"], [379, 1, 1, "", "recover"], [379, 1, 1, "", "set_random_seed"], [379, 1, 1, "", "set_resume_from"], [379, 1, 1, "", "set_tensorboard"], [379, 1, 1, "", "set_workspace"], [379, 1, 1, "", "singleton"], [379, 1, 1, "", "str2array"], [379, 1, 1, "", "time_limit"], [379, 1, 1, "", "version1_eq_version2"], [379, 1, 1, "", "version1_gt_version2"], [379, 1, 1, "", "version1_gte_version2"], [379, 1, 1, "", "version1_lt_version2"], [379, 1, 1, "", "version1_lte_version2"]], "neural_compressor.utils.utility.CpuInfo": [[379, 4, 1, "", "bf16"], [379, 4, 1, "", "cores_per_socket"], [379, 3, 1, "", "get_number_of_sockets"], [379, 4, 1, "", "vnni"]], "neural_compressor.utils.utility.Statistics": [[379, 3, 1, "", "print_stat"]], "neural_compressor.ux": [[455, 0, 0, "-", "components"], [514, 0, 0, "-", "inc_bench"], [523, 0, 0, "-", "utils"], [549, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[383, 0, 0, "-", "benchmark"], [387, 0, 0, "-", "config_generator"], [395, 0, 0, "-", "configuration_wizard"], [431, 0, 0, "-", "db_manager"], [436, 0, 0, "-", "diagnosis"], [444, 0, 0, "-", "file_browser"], [450, 0, 0, "-", "graph"], [456, 0, 0, "-", "jobs_management"], [460, 0, 0, "-", "manage_workspace"], [462, 0, 0, "-", "model"], [481, 0, 0, "-", "model_zoo"], [483, 0, 0, "-", "names_mapper"], [490, 0, 0, "-", "optimization"], [506, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[383, 2, 1, "", "Benchmarks"], [380, 0, 0, "-", "benchmark"], [381, 0, 0, "-", "benchmark_model"], [382, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[380, 2, 1, "", "Benchmark"], [380, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[380, 4, 1, "", "config_filename"], [380, 4, 1, "", "configuration_data"], [380, 3, 1, "", "execute"], [380, 3, 1, "", "generate_config"], [380, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[381, 1, 1, "", "benchmark_model"], [381, 1, 1, "", "parse_args"], [381, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[382, 1, 1, "", "benchmark_result_update"], [382, 1, 1, "", "benchmark_result_update_pytorch_script"], [382, 1, 1, "", "execute_benchmark"], [382, 1, 1, "", "execute_real_benchmark"], [382, 1, 1, "", "pytorch_script_bench_optimizations"], [382, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[384, 0, 0, "-", "benchmark_config_generator"], [385, 0, 0, "-", "config_generator"], [386, 0, 0, "-", "graph_optimization_config_generator"], [388, 0, 0, "-", "mixed_precision_config_generator"], [389, 0, 0, "-", "profiling_config_generator"], [390, 0, 0, "-", "pruning_config_generator"], [391, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[384, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[384, 3, 1, "", "generate"], [384, 3, 1, "", "generate_accuracy_config"], [384, 3, 1, "", "generate_evaluation_config"], [384, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[385, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[385, 3, 1, "", "generate"], [385, 3, 1, "", "generate_dataloader_config"], [385, 3, 1, "", "generate_model_config"], [385, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[386, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[386, 3, 1, "", "generate"], [386, 3, 1, "", "generate_evaluation_config"], [386, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[388, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[388, 3, 1, "", "generate"], [388, 3, 1, "", "generate_evaluation_config"], [388, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[389, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[389, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[390, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator": [[390, 3, 1, "", "generate"], [390, 3, 1, "", "generate_evaluation_config"], [390, 3, 1, "", "generate_pruning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[391, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[391, 3, 1, "", "generate"], [391, 3, 1, "", "generate_evaluation_config"], [391, 3, 1, "", "generate_quantization_config"], [391, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[392, 0, 0, "-", "configuration_parser"], [393, 0, 0, "-", "get_boundary_nodes"], [394, 0, 0, "-", "get_configuration"], [396, 0, 0, "-", "params_feeder"], [397, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[392, 2, 1, "", "ConfigurationParser"], [392, 1, 1, "", "normalize_string_list"], [392, 1, 1, "", "parse_list_value"], [392, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[392, 3, 1, "", "get_param_type"], [392, 3, 1, "", "parse"], [392, 3, 1, "", "parse_dataloader"], [392, 3, 1, "", "parse_evaluation_data"], [392, 3, 1, "", "parse_metric"], [392, 3, 1, "", "parse_transforms"], [392, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[393, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[394, 1, 1, "", "get_predefined_configuration"], [394, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[396, 2, 1, "", "Feeder"], [396, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[396, 3, 1, "", "feed"], [396, 3, 1, "", "get_dataloaders"], [396, 3, 1, "", "get_domains"], [396, 3, 1, "", "get_frameworks"], [396, 3, 1, "", "get_metrics"], [396, 3, 1, "", "get_models"], [396, 3, 1, "", "get_objectives"], [396, 3, 1, "", "get_precisions"], [396, 3, 1, "", "get_quantization_approaches"], [396, 3, 1, "", "get_strategies"], [396, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[397, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser": [[397, 3, 1, "", "generate_tree"], [397, 3, 1, "", "parse"], [397, 3, 1, "", "parse_entry"]], "neural_compressor.ux.components.db_manager": [[431, 2, 1, "", "DBManager"], [398, 0, 0, "-", "db_manager"], [407, 0, 0, "-", "db_models"], [426, 0, 0, "-", "db_operations"], [432, 0, 0, "-", "params_interfaces"], [433, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[431, 3, 1, "", "create_all"], [431, 3, 1, "", "create_sqlalchemy_engine"], [431, 4, 1, "", "engine"], [431, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[398, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[398, 3, 1, "", "create_all"], [398, 3, 1, "", "create_sqlalchemy_engine"], [398, 4, 1, "", "engine"], [398, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[399, 0, 0, "-", "benchmark"], [400, 0, 0, "-", "benchmark_result"], [401, 0, 0, "-", "dataloader"], [402, 0, 0, "-", "dataset"], [403, 0, 0, "-", "domain"], [404, 0, 0, "-", "domain_flavour"], [405, 0, 0, "-", "example"], [406, 0, 0, "-", "framework"], [408, 0, 0, "-", "metric"], [409, 0, 0, "-", "model"], [410, 0, 0, "-", "optimization"], [411, 0, 0, "-", "optimization_type"], [412, 0, 0, "-", "precision"], [413, 0, 0, "-", "profiling"], [414, 0, 0, "-", "profiling_result"], [415, 0, 0, "-", "project"], [416, 0, 0, "-", "pruning_details"], [417, 0, 0, "-", "transform"], [418, 0, 0, "-", "tuning_details"], [419, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[399, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[399, 3, 1, "", "add"], [399, 3, 1, "", "build_info"], [399, 3, 1, "", "clean_status"], [399, 3, 1, "", "delete_benchmark"], [399, 3, 1, "", "details"], [399, 3, 1, "", "list"], [399, 3, 1, "", "update_batch_size"], [399, 3, 1, "", "update_config_path"], [399, 3, 1, "", "update_cores_per_instance"], [399, 3, 1, "", "update_dataset"], [399, 3, 1, "", "update_duration"], [399, 3, 1, "", "update_execution_command"], [399, 3, 1, "", "update_log_path"], [399, 3, 1, "", "update_mode"], [399, 3, 1, "", "update_number_of_instance"], [399, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[400, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[400, 3, 1, "", "add"], [400, 3, 1, "", "build_info"], [400, 3, 1, "", "update_accuracy"], [400, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[401, 2, 1, "", "Dataloader"], [401, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[401, 3, 1, "", "list"], [401, 3, 1, "", "list_by_framework"], [401, 3, 1, "", "query_to_list"], [401, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[402, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[402, 3, 1, "", "add"], [402, 3, 1, "", "build_info"], [402, 3, 1, "", "delete_dataset"], [402, 3, 1, "", "details"], [402, 3, 1, "", "list"], [402, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[403, 2, 1, "", "Domain"], [403, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[403, 3, 1, "", "get_domain_id"], [403, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[404, 2, 1, "", "DomainFlavour"], [404, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[404, 3, 1, "", "get_domain_flavour_id"], [404, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[405, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[406, 2, 1, "", "Framework"], [406, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[406, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[408, 2, 1, "", "Metric"], [408, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[408, 3, 1, "", "list"], [408, 3, 1, "", "list_by_framework"], [408, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[409, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[409, 3, 1, "", "add"], [409, 3, 1, "", "build_info"], [409, 3, 1, "", "delete_model"], [409, 3, 1, "", "details"], [409, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[410, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[410, 3, 1, "", "add"], [410, 3, 1, "", "build_info"], [410, 3, 1, "", "clean_status"], [410, 3, 1, "", "delete_optimization"], [410, 3, 1, "", "details"], [410, 3, 1, "", "get_optimization_by_project_and_model"], [410, 3, 1, "", "get_pinned_benchmarks"], [410, 3, 1, "", "list"], [410, 3, 1, "", "pin_accuracy_benchmark"], [410, 3, 1, "", "pin_performance_benchmark"], [410, 3, 1, "", "unpin_benchmark"], [410, 3, 1, "", "update_batch_size"], [410, 3, 1, "", "update_config_path"], [410, 3, 1, "", "update_dataset"], [410, 3, 1, "", "update_duration"], [410, 3, 1, "", "update_execution_command"], [410, 3, 1, "", "update_log_path"], [410, 3, 1, "", "update_optimized_model"], [410, 3, 1, "", "update_precision"], [410, 3, 1, "", "update_pruning_details"], [410, 3, 1, "", "update_sampling_size"], [410, 3, 1, "", "update_status"], [410, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[411, 2, 1, "", "OptimizationType"], [411, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[411, 3, 1, "", "add"], [411, 3, 1, "", "get_optimization_type_by_id"], [411, 3, 1, "", "get_optimization_type_by_name"], [411, 3, 1, "", "get_optimization_type_for_precision"], [411, 3, 1, "", "get_optimization_type_id"], [411, 3, 1, "", "list"], [411, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[412, 2, 1, "", "Precision"], [412, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[412, 3, 1, "", "add"], [412, 3, 1, "", "get_precision_by_id"], [412, 3, 1, "", "get_precision_by_name"], [412, 3, 1, "", "get_precision_id"], [412, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[413, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[413, 3, 1, "", "add"], [413, 3, 1, "", "build_info"], [413, 3, 1, "", "clean_status"], [413, 3, 1, "", "delete_profiling"], [413, 3, 1, "", "details"], [413, 3, 1, "", "list"], [413, 3, 1, "", "update_dataset"], [413, 3, 1, "", "update_duration"], [413, 3, 1, "", "update_execution_command"], [413, 3, 1, "", "update_log_path"], [413, 3, 1, "", "update_num_threads"], [413, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[414, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[414, 3, 1, "", "add"], [414, 3, 1, "", "build_info"], [414, 3, 1, "", "bulk_add"], [414, 3, 1, "", "delete_results"], [414, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[415, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[415, 3, 1, "", "create_project"], [415, 3, 1, "", "delete_project"], [415, 3, 1, "", "get_model_by_name"], [415, 3, 1, "", "list_projects"], [415, 3, 1, "", "project_details"], [415, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[416, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails": [[416, 3, 1, "", "add"], [416, 3, 1, "", "build_info"], [416, 3, 1, "", "delete_pruning_details"], [416, 3, 1, "", "update"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[417, 2, 1, "", "Transform"], [417, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[417, 3, 1, "", "list"], [417, 3, 1, "", "list_by_domain"], [417, 3, 1, "", "list_by_framework"], [417, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[418, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[418, 3, 1, "", "add"], [418, 3, 1, "", "delete_tuning_details"], [418, 3, 1, "", "update"], [418, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[419, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[419, 3, 1, "", "add"], [419, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[426, 2, 1, "", "BenchmarkAPIInterface"], [426, 2, 1, "", "DatasetAPIInterface"], [426, 2, 1, "", "DiagnosisAPIInterface"], [426, 2, 1, "", "DictionariesAPIInterface"], [426, 2, 1, "", "ExamplesAPIInterface"], [426, 2, 1, "", "ModelAPIInterface"], [426, 2, 1, "", "OptimizationAPIInterface"], [426, 2, 1, "", "ProfilingAPIInterface"], [426, 2, 1, "", "ProjectAPIInterface"], [420, 0, 0, "-", "benchmark_api_interface"], [421, 0, 0, "-", "dataset_api_interface"], [422, 0, 0, "-", "db_operations"], [423, 0, 0, "-", "diagnosis_api_interface"], [424, 0, 0, "-", "dictionaries_api_interface"], [425, 0, 0, "-", "examples_api_interface"], [427, 0, 0, "-", "model_api_interface"], [428, 0, 0, "-", "optimization_api_interface"], [429, 0, 0, "-", "profiling_api_interface"], [430, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[426, 3, 1, "", "add_benchmark"], [426, 3, 1, "", "add_result"], [426, 3, 1, "", "clean_status"], [426, 3, 1, "", "delete_benchmark"], [426, 3, 1, "", "edit_benchmark"], [426, 3, 1, "", "get_benchmark_details"], [426, 3, 1, "", "list_benchmarks"], [426, 3, 1, "", "parse_benchmark_data"], [426, 3, 1, "", "parse_benchmark_edit_data"], [426, 3, 1, "", "update_benchmark_accuracy"], [426, 3, 1, "", "update_benchmark_duration"], [426, 3, 1, "", "update_benchmark_performance"], [426, 3, 1, "", "update_benchmark_status"], [426, 3, 1, "", "update_execution_command"], [426, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[426, 3, 1, "", "add_dataset"], [426, 3, 1, "", "check_if_custom_metric_or_dataloader"], [426, 3, 1, "", "dataloader_path"], [426, 3, 1, "", "delete_dataset"], [426, 3, 1, "", "generate_custom_template"], [426, 3, 1, "", "generate_template"], [426, 3, 1, "", "get_dataset_details"], [426, 3, 1, "", "get_predefined_dataset"], [426, 3, 1, "", "list_datasets"], [426, 3, 1, "", "parse_dataset_data"], [426, 3, 1, "", "prepare_predefined_dataloader"], [426, 3, 1, "", "prepare_predefined_transform"], [426, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[426, 3, 1, "", "generate_optimization"], [426, 3, 1, "", "get_op_details"], [426, 3, 1, "", "get_op_list"], [426, 3, 1, "", "histogram"], [426, 3, 1, "", "model_wise_params"], [426, 3, 1, "", "parse_model_wise_config"], [426, 3, 1, "", "parse_op_wise_config"], [426, 3, 1, "", "parse_optimization_data"], [426, 3, 1, "", "parse_wise_parameters"], [426, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[426, 3, 1, "", "list_dataloaders"], [426, 3, 1, "", "list_dataloaders_by_framework"], [426, 3, 1, "", "list_domain_flavours"], [426, 3, 1, "", "list_domains"], [426, 3, 1, "", "list_metrics"], [426, 3, 1, "", "list_metrics_by_framework"], [426, 3, 1, "", "list_optimization_types"], [426, 3, 1, "", "list_optimization_types_for_precision"], [426, 3, 1, "", "list_precisions"], [426, 3, 1, "", "list_transforms"], [426, 3, 1, "", "list_transforms_by_domain"], [426, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[426, 3, 1, "", "create_project"], [426, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[426, 3, 1, "", "add_model"], [426, 3, 1, "", "delete_model"], [426, 3, 1, "", "get_model_details"], [426, 3, 1, "", "list_models"], [426, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[426, 3, 1, "", "add_optimization"], [426, 3, 1, "", "add_pruning_optimization"], [426, 3, 1, "", "add_quantization_optimization"], [426, 3, 1, "", "add_standard_optimization"], [426, 3, 1, "", "add_tuning_history"], [426, 3, 1, "", "clean_status"], [426, 3, 1, "", "delete_optimization"], [426, 3, 1, "", "edit_optimization"], [426, 3, 1, "", "edit_pruning_details"], [426, 3, 1, "", "edit_tuning_details"], [426, 3, 1, "", "get_optimization_details"], [426, 3, 1, "", "get_pruning_details"], [426, 3, 1, "", "list_optimizations"], [426, 3, 1, "", "load_pruning_details_config"], [426, 3, 1, "", "parse_optimization_data"], [426, 3, 1, "", "parse_optimization_edit_data"], [426, 3, 1, "", "parse_tuning_history"], [426, 3, 1, "", "pin_accuracy_benchmark"], [426, 3, 1, "", "pin_performance_benchmark"], [426, 3, 1, "", "update_execution_command"], [426, 3, 1, "", "update_optimization_duration"], [426, 3, 1, "", "update_optimization_status"], [426, 3, 1, "", "update_optimized_model"], [426, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[426, 3, 1, "", "add_profiling"], [426, 3, 1, "", "add_result"], [426, 3, 1, "", "bulk_add_results"], [426, 3, 1, "", "clean_status"], [426, 3, 1, "", "delete_profiling"], [426, 3, 1, "", "edit_profiling"], [426, 3, 1, "", "get_profiling_details"], [426, 3, 1, "", "list_profilings"], [426, 3, 1, "", "parse_profiling_data"], [426, 3, 1, "", "parse_profiling_edit_data"], [426, 3, 1, "", "parse_profiling_result_data"], [426, 3, 1, "", "update_execution_command"], [426, 3, 1, "", "update_log_path"], [426, 3, 1, "", "update_profiling_duration"], [426, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[426, 3, 1, "", "add_dummy_dataset"], [426, 3, 1, "", "add_model"], [426, 3, 1, "", "create_project"], [426, 3, 1, "", "delete_project"], [426, 3, 1, "", "get_project_details"], [426, 3, 1, "", "list_projects"], [426, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[420, 2, 1, "", "BenchmarkAPIInterface"], [420, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[420, 3, 1, "", "add_benchmark"], [420, 3, 1, "", "add_result"], [420, 3, 1, "", "clean_status"], [420, 3, 1, "", "delete_benchmark"], [420, 3, 1, "", "edit_benchmark"], [420, 3, 1, "", "get_benchmark_details"], [420, 3, 1, "", "list_benchmarks"], [420, 3, 1, "", "parse_benchmark_data"], [420, 3, 1, "", "parse_benchmark_edit_data"], [420, 3, 1, "", "update_benchmark_accuracy"], [420, 3, 1, "", "update_benchmark_duration"], [420, 3, 1, "", "update_benchmark_performance"], [420, 3, 1, "", "update_benchmark_status"], [420, 3, 1, "", "update_execution_command"], [420, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[421, 2, 1, "", "DatasetAPIInterface"], [421, 1, 1, "", "initialize_associations"], [421, 1, 1, "", "initialize_precision_optimization_types_association"], [421, 1, 1, "", "search_in_list_of_dict"], [421, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [421, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[421, 3, 1, "", "add_dataset"], [421, 3, 1, "", "check_if_custom_metric_or_dataloader"], [421, 3, 1, "", "dataloader_path"], [421, 3, 1, "", "delete_dataset"], [421, 3, 1, "", "generate_custom_template"], [421, 3, 1, "", "generate_template"], [421, 3, 1, "", "get_dataset_details"], [421, 3, 1, "", "get_predefined_dataset"], [421, 3, 1, "", "list_datasets"], [421, 3, 1, "", "parse_dataset_data"], [421, 3, 1, "", "prepare_predefined_dataloader"], [421, 3, 1, "", "prepare_predefined_transform"], [421, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[422, 1, 1, "", "initialize_associations"], [422, 1, 1, "", "initialize_precision_optimization_types_association"], [422, 1, 1, "", "search_in_list_of_dict"], [422, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [422, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[423, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[423, 3, 1, "", "generate_optimization"], [423, 3, 1, "", "get_op_details"], [423, 3, 1, "", "get_op_list"], [423, 3, 1, "", "histogram"], [423, 3, 1, "", "model_wise_params"], [423, 3, 1, "", "parse_model_wise_config"], [423, 3, 1, "", "parse_op_wise_config"], [423, 3, 1, "", "parse_optimization_data"], [423, 3, 1, "", "parse_wise_parameters"], [423, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[424, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[424, 3, 1, "", "list_dataloaders"], [424, 3, 1, "", "list_dataloaders_by_framework"], [424, 3, 1, "", "list_domain_flavours"], [424, 3, 1, "", "list_domains"], [424, 3, 1, "", "list_metrics"], [424, 3, 1, "", "list_metrics_by_framework"], [424, 3, 1, "", "list_optimization_types"], [424, 3, 1, "", "list_optimization_types_for_precision"], [424, 3, 1, "", "list_precisions"], [424, 3, 1, "", "list_transforms"], [424, 3, 1, "", "list_transforms_by_domain"], [424, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[425, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[425, 3, 1, "", "create_project"], [425, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[427, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[427, 3, 1, "", "add_model"], [427, 3, 1, "", "delete_model"], [427, 3, 1, "", "get_model_details"], [427, 3, 1, "", "list_models"], [427, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[428, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[428, 3, 1, "", "add_optimization"], [428, 3, 1, "", "add_pruning_optimization"], [428, 3, 1, "", "add_quantization_optimization"], [428, 3, 1, "", "add_standard_optimization"], [428, 3, 1, "", "add_tuning_history"], [428, 3, 1, "", "clean_status"], [428, 3, 1, "", "delete_optimization"], [428, 3, 1, "", "edit_optimization"], [428, 3, 1, "", "edit_pruning_details"], [428, 3, 1, "", "edit_tuning_details"], [428, 3, 1, "", "get_optimization_details"], [428, 3, 1, "", "get_pruning_details"], [428, 3, 1, "", "list_optimizations"], [428, 3, 1, "", "load_pruning_details_config"], [428, 3, 1, "", "parse_optimization_data"], [428, 3, 1, "", "parse_optimization_edit_data"], [428, 3, 1, "", "parse_tuning_history"], [428, 3, 1, "", "pin_accuracy_benchmark"], [428, 3, 1, "", "pin_performance_benchmark"], [428, 3, 1, "", "update_execution_command"], [428, 3, 1, "", "update_optimization_duration"], [428, 3, 1, "", "update_optimization_status"], [428, 3, 1, "", "update_optimized_model"], [428, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[429, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[429, 3, 1, "", "add_profiling"], [429, 3, 1, "", "add_result"], [429, 3, 1, "", "bulk_add_results"], [429, 3, 1, "", "clean_status"], [429, 3, 1, "", "delete_profiling"], [429, 3, 1, "", "edit_profiling"], [429, 3, 1, "", "get_profiling_details"], [429, 3, 1, "", "list_profilings"], [429, 3, 1, "", "parse_profiling_data"], [429, 3, 1, "", "parse_profiling_edit_data"], [429, 3, 1, "", "parse_profiling_result_data"], [429, 3, 1, "", "update_execution_command"], [429, 3, 1, "", "update_log_path"], [429, 3, 1, "", "update_profiling_duration"], [429, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[430, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[430, 3, 1, "", "add_dummy_dataset"], [430, 3, 1, "", "add_model"], [430, 3, 1, "", "create_project"], [430, 3, 1, "", "delete_project"], [430, 3, 1, "", "get_project_details"], [430, 3, 1, "", "list_projects"], [430, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[432, 2, 1, "", "BenchmarkAddParamsInterface"], [432, 2, 1, "", "BenchmarkEditParamsInterface"], [432, 2, 1, "", "DatasetAddParamsInterface"], [432, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [432, 2, 1, "", "ModelAddParamsInterface"], [432, 2, 1, "", "OptimizationAddParamsInterface"], [432, 2, 1, "", "OptimizationEditParamsInterface"], [432, 2, 1, "", "ProfilingAddParamsInterface"], [432, 2, 1, "", "ProfilingEditParamsInterface"], [432, 2, 1, "", "ProfilingResultAddParamsInterface"], [432, 2, 1, "", "TuningHistoryInterface"], [432, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[432, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[432, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[432, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[433, 1, 1, "", "get_framework_dataloaders_config"], [433, 1, 1, "", "get_framework_transforms_config"], [433, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[434, 0, 0, "-", "diagnosis"], [435, 0, 0, "-", "factory"], [437, 0, 0, "-", "onnx_diagnosis"], [439, 0, 0, "-", "op_details"], [440, 0, 0, "-", "op_entry"], [441, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[434, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[434, 3, 1, "", "calculate_mse"], [434, 3, 1, "", "get_histogram_data"], [434, 3, 1, "", "get_op_details"], [434, 3, 1, "", "get_op_list"], [434, 3, 1, "", "get_tensors_info"], [434, 3, 1, "", "load_quantization_config"], [434, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[435, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[435, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[438, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[438, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[438, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[439, 2, 1, "", "OpActivation"], [439, 2, 1, "", "OpDetails"], [439, 2, 1, "", "OpPattern"], [439, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[439, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[440, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[440, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[442, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[442, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[442, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[443, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[443, 1, 1, "", "create_dir_entry"], [443, 1, 1, "", "create_entry"], [443, 1, 1, "", "create_file_entry"], [443, 1, 1, "", "filter_requested_entries"], [443, 1, 1, "", "get_directory_entries"], [443, 1, 1, "", "get_filter_value"], [443, 1, 1, "", "get_non_hidden_directory_entries"], [443, 1, 1, "", "get_requested_path"], [443, 1, 1, "", "get_setting_value"], [443, 1, 1, "", "is_dataset_or_directory_entry"], [443, 1, 1, "", "is_directory_entry"], [443, 1, 1, "", "is_model_or_directory_entry"], [443, 1, 1, "", "should_show_files"], [443, 1, 1, "", "should_show_only_model_files"], [443, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[445, 0, 0, "-", "attribute"], [446, 0, 0, "-", "collapser"], [447, 0, 0, "-", "edge"], [448, 0, 0, "-", "graph"], [449, 0, 0, "-", "graph_reader"], [451, 0, 0, "-", "node"], [452, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[445, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[446, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[446, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[447, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[447, 4, 1, "", "source"], [447, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[448, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[448, 3, 1, "", "add_edge"], [448, 3, 1, "", "add_node"], [448, 4, 1, "", "edges"], [448, 3, 1, "", "get_node"], [448, 3, 1, "", "get_target_nodes"], [448, 3, 1, "", "highlight_pattern"], [448, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[449, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[449, 3, 1, "", "find_pattern_in_graph"], [449, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[451, 2, 1, "", "GroupNode"], [451, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[453, 0, 0, "-", "onnxrt_reader"], [454, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[453, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[453, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[454, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[454, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[457, 0, 0, "-", "jobs_control_queue"], [458, 0, 0, "-", "jobs_manager"], [459, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[460, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[461, 0, 0, "-", "domain"], [463, 0, 0, "-", "model"], [464, 0, 0, "-", "model_type_getter"], [465, 0, 0, "-", "onnxrt"], [467, 0, 0, "-", "pytorch"], [469, 0, 0, "-", "repository"], [470, 0, 0, "-", "shape"], [472, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[461, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[463, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[463, 4, 1, "", "domain"], [463, 3, 1, "", "ensure_supported_path"], [463, 3, 1, "", "get_framework_name"], [463, 3, 1, "", "get_input_nodes"], [463, 3, 1, "", "get_model_graph"], [463, 3, 1, "", "get_output_nodes"], [463, 3, 1, "", "get_tensors_info"], [463, 3, 1, "", "guard_requirements_installed"], [463, 4, 1, "", "input_shape"], [463, 4, 1, "", "shape_elements_order"], [463, 4, 1, "", "supports_graph"], [463, 3, 1, "", "supports_path"], [463, 4, 1, "", "supports_profiling"], [463, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.model_type_getter": [[464, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[466, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[466, 2, 1, "", "OnnxrtModel"], [466, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[466, 4, 1, "", "domain"], [466, 4, 1, "", "filtered_input_nodes"], [466, 3, 1, "", "get_framework_name"], [466, 3, 1, "", "get_model_graph"], [466, 3, 1, "", "guard_requirements_installed"], [466, 4, 1, "", "input_shape"], [466, 4, 1, "", "nc_model_instance"], [466, 4, 1, "", "shape_elements_order"], [466, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[468, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[468, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[468, 3, 1, "", "get_framework_name"], [468, 3, 1, "", "guard_requirements_installed"], [468, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[469, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[469, 3, 1, "", "get_framework_from_path"], [469, 3, 1, "", "get_frameworks"], [469, 3, 1, "", "get_model"], [469, 3, 1, "", "get_supported_frameworks"], [469, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[470, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[470, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[471, 0, 0, "-", "frozen_pb"], [473, 0, 0, "-", "keras"], [474, 0, 0, "-", "meta_graph"], [475, 0, 0, "-", "model"], [476, 0, 0, "-", "saved_model"], [477, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[471, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[471, 3, 1, "", "supports_path"], [471, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[473, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[473, 3, 1, "", "get_input_nodes"], [473, 3, 1, "", "get_output_nodes"], [473, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[474, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[474, 3, 1, "", "get_input_nodes"], [474, 3, 1, "", "get_model_graph"], [474, 3, 1, "", "get_output_nodes"], [474, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[475, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[475, 3, 1, "", "get_framework_name"], [475, 3, 1, "", "get_input_nodes"], [475, 3, 1, "", "get_model_graph"], [475, 3, 1, "", "get_output_nodes"], [475, 3, 1, "", "guard_requirements_installed"], [475, 4, 1, "", "input_shape"], [475, 4, 1, "", "nc_model_instance"], [475, 4, 1, "", "shape_elements_order"], [475, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[476, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[476, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[477, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[478, 0, 0, "-", "download_config"], [479, 0, 0, "-", "download_model"], [480, 0, 0, "-", "downloader"], [482, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[478, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[479, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[480, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[480, 3, 1, "", "download"], [480, 3, 1, "", "download_config"], [480, 3, 1, "", "download_file"], [480, 3, 1, "", "download_model"], [480, 3, 1, "", "download_yaml_config"], [480, 3, 1, "", "get_yaml_url"], [480, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[482, 1, 1, "", "check_version"], [482, 1, 1, "", "get_available_models"], [482, 1, 1, "", "get_framework_module_name"], [482, 1, 1, "", "get_installed_frameworks"], [482, 1, 1, "", "list_models"], [482, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[484, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[484, 2, 1, "", "MappingDirection"], [484, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[484, 4, 1, "", "domain_flavour_mappings"], [484, 4, 1, "", "domain_mappings"], [484, 4, 1, "", "framework_mappings"], [484, 3, 1, "", "map_name"], [484, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[490, 2, 1, "", "Optimizations"], [485, 0, 0, "-", "execute_optimization"], [486, 0, 0, "-", "factory"], [488, 0, 0, "-", "graph_optimizer"], [491, 0, 0, "-", "mixed_precision"], [494, 0, 0, "-", "neural_coder_optimization"], [496, 0, 0, "-", "optimization"], [497, 0, 0, "-", "pruning"], [500, 0, 0, "-", "tune"], [503, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[485, 1, 1, "", "check_if_collect_tuning_history"], [485, 1, 1, "", "execute_optimization"], [485, 1, 1, "", "execute_optimization_pytorch_script"], [485, 1, 1, "", "execute_optimization_regular"], [485, 1, 1, "", "parse_logs"], [485, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[486, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[486, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[487, 0, 0, "-", "graph_optimization"], [489, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[487, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[487, 4, 1, "", "configuration_data"], [487, 3, 1, "", "execute"], [487, 3, 1, "", "generate_config"], [487, 4, 1, "", "optimization_script"], [487, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[489, 1, 1, "", "optimize_graph"], [489, 1, 1, "", "optimize_graph_config"], [489, 1, 1, "", "parse_args"], [489, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[492, 0, 0, "-", "mixed_precision"], [493, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[492, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[492, 4, 1, "", "configuration_data"], [492, 3, 1, "", "execute"], [492, 3, 1, "", "generate_config"], [492, 4, 1, "", "optimization_script"], [492, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[493, 1, 1, "", "optimize_graph"], [493, 1, 1, "", "optimize_graph_config"], [493, 1, 1, "", "parse_args"], [493, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[495, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[495, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[496, 2, 1, "", "DataloaderInterface"], [496, 2, 1, "", "Optimization"], [496, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[496, 4, 1, "", "command"], [496, 4, 1, "", "config_filename"], [496, 4, 1, "", "configuration_data"], [496, 3, 1, "", "execute"], [496, 3, 1, "", "generate_config"], [496, 4, 1, "", "optimization_script"], [496, 4, 1, "", "output_model_dir"], [496, 4, 1, "", "output_model_name"], [496, 4, 1, "", "parameters"], [496, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.pruning": [[498, 0, 0, "-", "optimize_model"], [499, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[498, 1, 1, "", "optimize_model"], [498, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[499, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning.Pruning": [[499, 4, 1, "", "configuration_data"], [499, 3, 1, "", "execute"], [499, 3, 1, "", "generate_config"], [499, 4, 1, "", "optimization_script"], [499, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tune": [[501, 0, 0, "-", "tune_model"], [502, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[501, 1, 1, "", "parse_args"], [501, 1, 1, "", "set_eager_execution"], [501, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[502, 2, 1, "", "AccuracyCriterion"], [502, 2, 1, "", "Tuning"], [502, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[502, 4, 1, "", "configuration_data"], [502, 3, 1, "", "execute"], [502, 3, 1, "", "generate_config"], [502, 4, 1, "", "optimization_script"], [502, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[503, 2, 1, "", "TuningHistory"], [503, 2, 1, "", "Watcher"], [503, 1, 1, "", "tuning_history"], [503, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[503, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[503, 3, 1, "", "history_file_modification_time"], [503, 3, 1, "", "stop"], [503, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[504, 0, 0, "-", "execute_profiling"], [505, 0, 0, "-", "factory"], [507, 0, 0, "-", "profile_model"], [508, 0, 0, "-", "profiler"], [509, 0, 0, "-", "profiling"], [511, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[504, 1, 1, "", "execute_profiling"], [504, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[505, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[505, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[507, 1, 1, "", "load_profiling_details"], [507, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[508, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[508, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[509, 2, 1, "", "DataloaderInterface"], [509, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[509, 4, 1, "", "config_filename"], [509, 4, 1, "", "config_path"], [509, 3, 1, "", "execute"], [509, 3, 1, "", "generate_config"], [509, 4, 1, "", "profiling_data"], [509, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[510, 0, 0, "-", "factory"], [512, 0, 0, "-", "profiler"], [513, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[510, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[510, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[512, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[512, 3, 1, "", "build_dataloader"], [512, 3, 1, "", "convert_nodes_to_list"], [512, 3, 1, "", "create_tf_config"], [512, 3, 1, "", "get_node_by_name"], [512, 3, 1, "", "initialize_graph"], [512, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[513, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[514, 1, 1, "", "main"], [514, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[516, 0, 0, "-", "consts"], [517, 0, 0, "-", "environment"], [518, 0, 0, "-", "exceptions"], [519, 0, 0, "-", "executor"], [520, 0, 0, "-", "expiring_dict"], [521, 0, 0, "-", "github_info"], [522, 0, 0, "-", "hw_info"], [524, 0, 0, "-", "json_serializer"], [525, 0, 0, "-", "logger"], [526, 0, 0, "-", "parser"], [527, 0, 0, "-", "proc"], [528, 0, 0, "-", "processes"], [529, 0, 0, "-", "singleton"], [530, 0, 0, "-", "status_updates"], [531, 0, 0, "-", "templates"], [534, 0, 0, "-", "utils"], [539, 0, 0, "-", "workload"], [545, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[516, 2, 1, "", "DomainFlavours"], [516, 2, 1, "", "Domains"], [516, 2, 1, "", "ExecutionStatus"], [516, 2, 1, "", "Frameworks"], [516, 2, 1, "", "OptimizationTypes"], [516, 2, 1, "", "Precisions"], [516, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[517, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[517, 3, 1, "", "clean_workloads_wip_status"], [517, 3, 1, "", "ensure_workdir_exists_and_writeable"], [517, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[518, 7, 1, "", "AccessDeniedException"], [518, 7, 1, "", "ClientErrorException"], [518, 7, 1, "", "InternalException"], [518, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[519, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[519, 4, 1, "", "additional_log_names"], [519, 3, 1, "", "call"], [519, 3, 1, "", "call_one"], [519, 3, 1, "", "is_multi_commands"], [519, 4, 1, "", "log_name"], [519, 4, 1, "", "process_duration"], [519, 3, 1, "", "refresh_workdir"], [519, 4, 1, "", "request_id"], [519, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[520, 2, 1, "", "ExpiringDict"], [520, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[520, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[521, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[521, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[522, 2, 1, "", "HWInfo"], [522, 1, 1, "", "get_bios_version"], [522, 1, 1, "", "get_distribution"], [522, 1, 1, "", "get_framework_dependency_info"], [522, 1, 1, "", "get_framework_info"], [522, 1, 1, "", "get_kernel_version"], [522, 1, 1, "", "get_number_of_sockets"], [522, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[522, 3, 1, "", "initialize"], [522, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[524, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[524, 3, 1, "", "serialize"], [524, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[525, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[526, 2, 1, "", "AccuracyParser"], [526, 2, 1, "", "BenchmarkParserFactory"], [526, 2, 1, "", "OptimizationParser"], [526, 2, 1, "", "Parser"], [526, 2, 1, "", "PerformanceParser"], [526, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[526, 4, 1, "", "patterns"], [526, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[526, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[526, 4, 1, "", "patterns"], [526, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[526, 4, 1, "", "patterns"], [526, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[526, 4, 1, "", "patterns"], [526, 3, 1, "", "process"], [526, 3, 1, "", "summarize_partial"], [526, 3, 1, "", "summarize_value"], [526, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[526, 4, 1, "", "patterns"], [526, 3, 1, "", "process"], [526, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[527, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[527, 4, 1, "", "info"], [527, 4, 1, "", "info_path"], [527, 4, 1, "", "is_ok"], [527, 4, 1, "", "output"], [527, 4, 1, "", "output_path"], [527, 3, 1, "", "remove_logs"], [527, 3, 1, "", "run"], [527, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[528, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[528, 4, 1, "", "is_ok"], [528, 3, 1, "", "remove_successful_logs"], [528, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[529, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[530, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[532, 0, 0, "-", "metric"], [533, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[532, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[532, 4, 1, "", "acc_input_model"], [532, 4, 1, "", "acc_optimized_model"], [532, 4, 1, "", "accuracy"], [532, 3, 1, "", "calculate_throughput"], [532, 3, 1, "", "insert_data"], [532, 4, 1, "", "latency"], [532, 4, 1, "", "optimization_time"], [532, 4, 1, "", "path_optimized_model"], [532, 4, 1, "", "profiling_data"], [532, 4, 1, "", "size_input_model"], [532, 4, 1, "", "size_optimized_model"], [532, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[533, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[533, 3, 1, "", "clean_logs"], [533, 3, 1, "", "clean_status"], [533, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[534, 1, 1, "", "check_module"], [534, 1, 1, "", "deprecated"], [534, 1, 1, "", "determine_ip"], [534, 1, 1, "", "export_to_csv"], [534, 1, 1, "", "filter_transforms"], [534, 1, 1, "", "get_dataset_path"], [534, 1, 1, "", "get_default_pruning_config_path"], [534, 1, 1, "", "get_file_extension"], [534, 1, 1, "", "get_framework_from_path"], [534, 1, 1, "", "get_height_width_from_size"], [534, 1, 1, "", "get_metrics_dict"], [534, 1, 1, "", "get_model_zoo_config_path"], [534, 1, 1, "", "get_model_zoo_model_path"], [534, 1, 1, "", "get_module_version"], [534, 1, 1, "", "get_predefined_config_path"], [534, 1, 1, "", "get_shape_from_transforms"], [534, 1, 1, "", "get_size"], [534, 1, 1, "", "is_dataset_file"], [534, 1, 1, "", "is_development_env"], [534, 1, 1, "", "is_hidden"], [534, 1, 1, "", "load_dataloader_config"], [534, 1, 1, "", "load_help_nc_params"], [534, 1, 1, "", "load_metrics_config"], [534, 1, 1, "", "load_model_config"], [534, 1, 1, "", "load_model_wise_params"], [534, 1, 1, "", "load_precisions_config"], [534, 1, 1, "", "load_pruning_details_config"], [534, 1, 1, "", "load_transforms_config"], [534, 1, 1, "", "load_transforms_filter_config"], [534, 1, 1, "", "normalize_domain"], [534, 1, 1, "", "normalize_framework"], [534, 1, 1, "", "normalize_string"], [534, 1, 1, "", "parse_bool_value"], [534, 1, 1, "", "parse_to_float_list"], [534, 1, 1, "", "parse_to_string_list"], [534, 1, 1, "", "parse_version"], [534, 1, 1, "", "release_tag"], [534, 1, 1, "", "replace_with_values"], [534, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[535, 0, 0, "-", "config"], [536, 0, 0, "-", "dataloader"], [537, 0, 0, "-", "evaluation"], [538, 0, 0, "-", "graph_optimization"], [540, 0, 0, "-", "mixed_precision"], [541, 0, 0, "-", "model"], [542, 0, 0, "-", "pruning"], [543, 0, 0, "-", "quantization"], [544, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[535, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[535, 3, 1, "", "dump"], [535, 3, 1, "", "get_performance_configs"], [535, 3, 1, "", "get_performance_cores_per_instance"], [535, 3, 1, "", "get_performance_num_of_instance"], [535, 3, 1, "", "initialize"], [535, 3, 1, "", "load"], [535, 3, 1, "", "process_transform"], [535, 3, 1, "", "remove_accuracy_metric"], [535, 3, 1, "", "remove_dataloader"], [535, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [535, 3, 1, "", "set_accuracy_goal"], [535, 3, 1, "", "set_accuracy_metric"], [535, 3, 1, "", "set_evaluation_dataloader"], [535, 3, 1, "", "set_evaluation_dataset_path"], [535, 3, 1, "", "set_inputs"], [535, 3, 1, "", "set_optimization_precision"], [535, 3, 1, "", "set_outputs"], [535, 3, 1, "", "set_performance_cores_per_instance"], [535, 3, 1, "", "set_performance_iterations"], [535, 3, 1, "", "set_performance_num_of_instance"], [535, 3, 1, "", "set_performance_warmup"], [535, 3, 1, "", "set_quantization_approach"], [535, 3, 1, "", "set_quantization_batch_size"], [535, 3, 1, "", "set_quantization_dataloader"], [535, 3, 1, "", "set_quantization_dataset_path"], [535, 3, 1, "", "set_quantization_sampling_size"], [535, 3, 1, "", "set_transform"], [535, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[536, 2, 1, "", "Dataloader"], [536, 2, 1, "", "Dataset"], [536, 2, 1, "", "Filter"], [536, 2, 1, "", "LabelBalance"], [536, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[536, 3, 1, "", "serialize"], [536, 3, 1, "", "set_dataset"], [536, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[536, 3, 1, "", "is_dummy"], [536, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[536, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[537, 2, 1, "", "Accuracy"], [537, 2, 1, "", "Configs"], [537, 2, 1, "", "Evaluation"], [537, 2, 1, "", "Metric"], [537, 2, 1, "", "Performance"], [537, 2, 1, "", "Postprocess"], [537, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[537, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[537, 4, 1, "", "name"], [537, 4, 1, "", "param"], [537, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema": [[537, 3, 1, "", "get_label_shift_value"]], "neural_compressor.ux.utils.workload.graph_optimization": [[538, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[538, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[540, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[540, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[541, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[541, 4, 1, "", "inputs"], [541, 4, 1, "", "outputs"], [541, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[542, 2, 1, "", "AdamOptimizer"], [542, 2, 1, "", "AdamWOptimizer"], [542, 2, 1, "", "Approach"], [542, 2, 1, "", "Criterion"], [542, 2, 1, "", "CrossEntropyLossCriterion"], [542, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [542, 2, 1, "", "KnowledgeDistillationLossCriterion"], [542, 2, 1, "", "Optimizer"], [542, 2, 1, "", "Pruning"], [542, 2, 1, "", "SGDOptimizer"], [542, 2, 1, "", "SelfKnowledgeDistillationLoss"], [542, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [542, 2, 1, "", "Train"], [542, 2, 1, "", "WeightCompressionApproach"], [542, 1, 1, "", "parse_dict_value_to_float"], [542, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[542, 3, 1, "", "serialize"], [542, 3, 1, "", "set_postprocess_transforms"]], "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach": [[542, 3, 1, "", "initialize_pruners"], [542, 3, 1, "", "serialize"], [542, 3, 1, "", "serialize_pruner"]], "neural_compressor.ux.utils.workload.quantization": [[543, 2, 1, "", "Advance"], [543, 2, 1, "", "Calibration"], [543, 2, 1, "", "Quantization"], [543, 2, 1, "", "WiseConfig"], [543, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[544, 2, 1, "", "AccCriterion"], [544, 2, 1, "", "Diagnosis"], [544, 2, 1, "", "ExitPolicy"], [544, 2, 1, "", "MultiObjectives"], [544, 2, 1, "", "Strategy"], [544, 2, 1, "", "Tuning"], [544, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[544, 4, 1, "", "objective"], [544, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[544, 3, 1, "", "set_max_trials"], [544, 3, 1, "", "set_performance_only"], [544, 3, 1, "", "set_random_seed"], [544, 3, 1, "", "set_timeout"], [544, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[545, 1, 1, "", "float_representer"], [545, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[546, 0, 0, "-", "communication"], [547, 0, 0, "-", "configuration"], [548, 0, 0, "-", "exceptions"], [550, 0, 0, "-", "router"], [551, 0, 0, "-", "server"], [554, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[546, 2, 1, "", "Message"], [546, 2, 1, "", "MessageQueue"], [546, 2, 1, "", "Request"], [546, 2, 1, "", "Response"], [546, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[546, 4, 1, "", "data"], [546, 4, 1, "", "status"], [546, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[546, 3, 1, "", "get"], [546, 3, 1, "", "post_error"], [546, 3, 1, "", "post_failure"], [546, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[547, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[547, 3, 1, "", "determine_gui_port"], [547, 3, 1, "", "determine_log_level"], [547, 3, 1, "", "determine_server_port"], [547, 3, 1, "", "determine_url_prefix"], [547, 3, 1, "", "determine_values_from_environment"], [547, 3, 1, "", "dump_token_to_file"], [547, 3, 1, "", "get_command_line_args"], [547, 3, 1, "", "get_url"], [547, 4, 1, "", "global_config_directory"], [547, 3, 1, "", "is_port_taken"], [547, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[548, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[550, 2, 1, "", "DeferredRoutingDefinition"], [550, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [550, 2, 1, "", "RealtimeRoutingDefinition"], [550, 2, 1, "", "Router"], [550, 2, 1, "", "RoutingDefinition"], [550, 1, 1, "", "find_pattern_in_graph"], [550, 1, 1, "", "get_model_graph"], [550, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[550, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[551, 1, 1, "", "allow_api_call"], [551, 1, 1, "", "block_iframe"], [551, 1, 1, "", "block_sniffing"], [551, 1, 1, "", "build_parameters"], [551, 1, 1, "", "disable_cache"], [551, 1, 1, "", "get_tls_args"], [551, 1, 1, "", "handle_api_call"], [551, 1, 1, "", "page_not_found"], [551, 1, 1, "", "require_api_token"], [551, 1, 1, "", "root"], [551, 1, 1, "", "run_server"], [551, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[552, 0, 0, "-", "benchmark"], [553, 0, 0, "-", "history_snapshot_parser"], [555, 0, 0, "-", "model"], [556, 0, 0, "-", "optimization"], [557, 0, 0, "-", "profiling"], [558, 0, 0, "-", "request_data_processor"], [559, 0, 0, "-", "response_generator"], [560, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[552, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[553, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[553, 3, 1, "", "extract_accuracy"], [553, 3, 1, "", "extract_performance"], [553, 3, 1, "", "parse_history_item"], [553, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[555, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[555, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[556, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[557, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[557, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[558, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[558, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[559, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[559, 3, 1, "", "add_refresh"], [559, 3, 1, "", "from_exception"], [559, 3, 1, "", "get_status_code_for_exception"], [559, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[560, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[560, 3, 1, "", "get_code_template"], [560, 3, 1, "", "get_config"], [560, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data", "6": "py:attribute", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contributor": [0, 1], "coven": [0, 1], "code": [0, 1, 3], "conduct": [0, 1], "our": 0, "pledg": 0, "standard": 0, "respons": 0, "scope": [0, 586], "enforc": 0, "attribut": [0, 210, 218, 227, 256, 265, 276, 304, 329, 445], "contribut": 1, "guidelin": 1, "pull": 1, "request": [1, 459], "checklist": 1, "templat": [1, 531, 532, 533], "support": [1, 2, 3, 5, 6, 563, 564, 565, 567, 569, 571, 573, 576, 579, 580, 581, 582, 583, 585, 588, 589, 593, 594, 596], "fx": 2, "introduct": [2, 3, 6, 562, 563, 564, 565, 567, 568, 569, 571, 573, 576, 579, 580, 581, 582, 583, 585, 586, 588, 589, 592, 593, 594, 595, 596], "mode": [2, 597], "matrix": [2, 3, 6, 563, 564, 565, 567, 569, 571, 573, 576, 579, 580, 581, 582, 583, 585, 588, 589, 593, 596], "neural": [2, 3, 5, 32, 562, 575, 576, 585, 586, 592], "compressor": [2, 5, 562, 575, 576, 592], "get": [2, 3, 5, 6, 563, 564, 565, 567, 569, 573, 579, 580, 582, 583, 585, 588, 589, 593, 596], "start": [2, 3, 5, 6, 562, 563, 564, 565, 567, 569, 573, 579, 580, 582, 583, 585, 588, 589, 593, 596], "post": [2, 589], "train": [2, 42, 369, 569, 589], "static": [2, 589], "quantiz": [2, 5, 34, 41, 60, 87, 316, 353, 543, 568, 588, 589, 590, 597], "dynam": [2, 3, 589], "awar": [2, 589], "exampl": [2, 3, 6, 405, 563, 564, 565, 567, 568, 569, 570, 571, 580, 581, 582, 583, 585, 586, 589, 593, 597], "note": [2, 591], "detail": [2, 562, 586], "common": [2, 17, 235, 236, 237, 238, 239, 240, 241, 242, 572], "problem": 2, "architectur": [3, 5, 32, 566, 576], "search": [3, 32], "basic": [3, 355, 595], "na": [3, 32, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 588], "api": [3, 5, 6, 16, 28, 43, 563, 564, 565, 567, 569, 574, 579, 580, 582, 583, 585, 588], "usag": [3, 593, 595], "1": [3, 562, 569, 572, 574, 577, 597], "python": [3, 5, 46, 579, 588], "yaml": [3, 564, 565, 568, 569, 573, 596], "2": [3, 28, 562, 569, 572, 574, 577, 597], "onli": 3, "advanc": 3, "custom": [3, 562, 579, 595], "secur": [4, 562, 569], "polici": [4, 595], "report": 4, "vulner": 4, "intel": [5, 562, 575, 576, 597], "instal": [5, 562, 577], "prerequisit": [5, 577], "linux": [5, 577], "jupyterlab": 5, "extens": [5, 597], "gui": 5, "system": [5, 562, 584], "requir": 5, "valid": [5, 597], "hardwar": [5, 597], "environ": [5, 517], "cpu": [5, 597], "base": 5, "64": 5, "compat": 5, "processor": 5, "gpu": 5, "built": [5, 574, 579], "": 5, "xe": 5, "onnx": [5, 12, 189, 589, 597], "model": [5, 26, 37, 239, 328, 329, 330, 331, 332, 333, 334, 335, 336, 409, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 541, 555, 562, 571, 581, 597], "multipl": [5, 582, 597], "vendor": 5, "through": [5, 597], "runtim": [5, 589, 597], "softwar": 5, "document": [5, 575], "select": 5, "public": [5, 587], "event": [5, 587], "addit": 5, "content": [5, 19, 32, 51, 55, 56, 57, 58, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 451, 453, 454, 460, 461, 463, 464, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 485, 486, 487, 489, 490, 492, 493, 495, 496, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 562], "hire": 5, "adaptor": [6, 7, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "work": [6, 589], "flow": [6, 589], "queri": [6, 90], "background": 6, "ad": 6, "new": [6, 43, 562, 595], "backend": 6, "capabl": 6, "implement": 6, "onnxrtadaptor": 6, "class": [6, 19, 32, 56, 58, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 153, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 276, 277, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 311, 313, 314, 315, 316, 317, 318, 319, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 368, 369, 370, 373, 374, 375, 376, 377, 379, 380, 383, 384, 385, 386, 388, 389, 390, 391, 392, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 438, 439, 440, 442, 445, 446, 447, 448, 449, 451, 453, 454, 461, 463, 466, 468, 469, 470, 471, 473, 474, 475, 476, 480, 484, 486, 487, 490, 492, 496, 499, 502, 503, 505, 508, 509, 510, 512, 516, 517, 519, 520, 521, 522, 524, 526, 527, 528, 529, 532, 533, 535, 536, 537, 538, 540, 541, 542, 543, 544, 546, 547, 550, 552, 553, 555, 556, 557, 558, 559, 560], "onnxrt": [8, 64, 465, 466, 565, 579, 594], "torch": [9, 597], "util": [9, 14, 49, 63, 88, 185, 191, 274, 352, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 433, 477, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545], "bf16": [10, 94, 95], "convert": 10, "hawq": 11, "metric": [11, 25, 238, 277, 278, 279, 280, 281, 282, 283, 284, 319, 320, 321, 322, 323, 324, 325, 326, 408, 532, 574, 579], "symbol": 13, "trace": 13, "algorithm": [15, 192, 193, 194, 195], "benchmark": [18, 39, 196, 234, 380, 381, 382, 383, 399, 552, 562, 563, 588], "bleu": [19, 277, 319], "modul": [19, 51, 55, 56, 58, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 201, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 266, 268, 269, 270, 272, 273, 274, 275, 277, 278, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 297, 298, 300, 301, 302, 303, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 368, 369, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 432, 433, 434, 435, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 451, 453, 454, 460, 461, 463, 464, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 485, 486, 487, 489, 492, 493, 495, 496, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560], "criterion": [20, 235], "data": [21, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269], "dataload": [22, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 236, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 401, 536, 564, 565], "basedataload": 22, "dataset": [23, 216, 217, 218, 219, 220, 221, 222, 223, 254, 255, 256, 257, 258, 259, 260, 261, 402, 562, 565, 574], "transform": [24, 228, 229, 230, 231, 232, 233, 266, 267, 268, 269, 417, 574, 594], "optim": [27, 240, 410, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 556, 562, 583], "compon": [28, 243, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "experiement": 28, "deprec": 28, "0": [28, 597], "distil": [29, 270, 567, 568, 588, 597], "mixedprecis": 30, "modelconvers": 31, "packag": [32, 57, 78, 194, 210, 222, 226, 227, 230, 237, 248, 260, 264, 265, 267, 271, 276, 283, 299, 304, 305, 318, 325, 329, 344, 360, 365, 373, 383, 426, 431, 490], "prune": [33, 303, 314, 349, 497, 498, 499, 542, 562, 585, 586, 588, 597], "schedul": [35, 315, 317, 351, 585, 586], "contrib": [36, 202, 203, 204, 205], "newapi": 38, "object": [40, 337, 582], "config": [44, 197, 201, 535, 564, 565, 582], "mix": [45, 580, 590], "precis": [45, 412, 580, 590], "strategi": [47, 48, 203, 204, 205, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 592, 595], "644ec953a7dc_pruning_support": 50, "6ece06672ed3_v1_14": 51, "function": [51, 55, 56, 63, 82, 88, 89, 111, 112, 114, 156, 158, 185, 186, 187, 190, 191, 192, 194, 196, 198, 201, 208, 216, 218, 222, 225, 226, 227, 230, 232, 233, 234, 235, 237, 240, 242, 246, 254, 256, 260, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 277, 278, 280, 281, 282, 283, 284, 292, 296, 297, 301, 306, 311, 312, 313, 315, 318, 319, 320, 322, 323, 324, 325, 326, 327, 331, 335, 337, 338, 341, 347, 348, 350, 351, 352, 353, 356, 364, 369, 372, 373, 375, 376, 378, 379, 381, 382, 392, 393, 394, 396, 401, 403, 404, 406, 408, 411, 412, 417, 420, 421, 422, 433, 443, 460, 464, 466, 477, 478, 479, 482, 485, 489, 493, 495, 498, 501, 503, 504, 507, 513, 514, 522, 525, 530, 534, 542, 545, 546, 550, 551, 569], "6f0d0f71d92e_v1_13": 52, "9e89549a08c8_v1_11": 53, "block_mask": 54, "env": 55, "neural_compressor": [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561], "subpackag": [57, 66, 132, 151, 152, 154, 202, 227, 265, 276, 293, 294, 299, 304, 318, 339, 360, 431, 436, 450, 455, 462, 490, 506, 515, 523, 549], "submodul": [57, 62, 66, 78, 95, 120, 132, 140, 146, 151, 152, 154, 157, 170, 182, 188, 194, 203, 210, 222, 226, 230, 237, 248, 260, 264, 267, 271, 276, 283, 293, 295, 299, 305, 309, 318, 325, 329, 339, 344, 360, 365, 373, 383, 387, 395, 407, 426, 431, 436, 437, 441, 444, 450, 452, 455, 456, 462, 465, 467, 472, 481, 483, 488, 490, 491, 494, 497, 500, 506, 511, 515, 523, 531, 539, 549, 554], "kera": [58, 473], "keras_util": [59, 60], "mxnet": [61, 565, 579, 589, 594, 597], "mxnet_util": [62, 63], "ox_util": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], "calibr": 65, "oper": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "activ": 67, "argmax": 68, "attent": 69, "binary_op": 70, "concat": 71, "conv": 72, "direct_q8": 73, "embed_layernorm": 74, "gather": 75, "gavgpool": 76, "gemm": 77, "lstm": 79, "matmul": 80, "maxpool": 81, "op": 82, "pad": 83, "pool": 84, "resiz": 85, "split": 86, "pytorch": [89, 378, 467, 468, 565, 569, 579, 589, 590, 593, 594, 597], "tensorflow": [91, 471, 472, 473, 474, 475, 476, 477, 565, 569, 579, 589, 590, 593, 594, 597], "tf_util": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185], "graph_convert": 92, "graph_converter_without_calib": 93, "graph_rewrit": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], "bf16_convert": [94, 186], "gener": [96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], "convert_add_to_biasadd": 96, "convert_layout": 97, "convert_leakyrelu": 98, "convert_nan_to_random": 99, "convert_placeholder_to_const": 100, "dequantize_cast_optim": 101, "dilated_contract": 102, "dummy_biasadd": 103, "expanddims_optim": 104, "fetch_weight_from_reshap": 105, "fold_batch_norm": 106, "fold_const": 107, "fuse_biasadd_add": 108, "fuse_column_wise_mul": 109, "fuse_conv_with_math": 110, "fuse_decomposed_bn": 111, "fuse_decomposed_in": 112, "fuse_gelu": 113, "fuse_layer_norm": 114, "fuse_pad_with_conv": 115, "fuse_pad_with_fp32_conv": 116, "fuse_reshape_transpos": 117, "graph_cse_optim": 118, "grappler_pass": 119, "insert_print_nod": 121, "move_squeeze_after_relu": 122, "pre_optim": 123, "remove_training_nod": 124, "rename_batch_norm": 125, "split_shared_input": 126, "strip_equivalent_nod": 127, "strip_unused_nod": 128, "switch_optim": 129, "update_ent": 130, "graph_bas": 131, "int8": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 571, 597], "freeze_fake_qu": 133, "freeze_valu": 134, "freeze_value_without_calib": 135, "fuse_conv_redundant_dequant": 136, "fuse_conv_requant": 137, "fuse_matmul_redundant_dequant": 138, "fuse_matmul_requant": 139, "meta_op_optim": 141, "post_hostconst_convert": 142, "post_quantized_op_cs": 143, "rnn_convert": 144, "scale_propag": 145, "qdq": [146, 147, 148, 149, 163, 164, 165, 166, 167, 168, 169, 170, 171, 597], "insert_qdq_pattern": 147, "merge_duplicated_qdq": 148, "share_qdq_y_pattern": 149, "graph_util": 150, "quantize_graph": [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178], "qat": [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 597], "fake_quant": 153, "quantize_config": 155, "quantize_help": 156, "quantize_lay": [157, 158, 159, 160, 161], "optimize_lay": 158, "quantize_layer_add": 159, "quantize_layer_bas": 160, "quantize_layer_bn": 161, "quantize_wrapp": 162, "fuse_qdq_bn": 163, "fuse_qdq_concatv2": 164, "fuse_qdq_conv": 165, "fuse_qdq_deconv": 166, "fuse_qdq_in": 167, "fuse_qdq_matmul": 168, "fuse_qdq_pool": 169, "optimize_qdq": 171, "quantize_graph_bas": 172, "quantize_graph_bn": 173, "quantize_graph_concatv2": 174, "quantize_graph_conv": 175, "quantize_graph_for_intel_cpu": 176, "quantize_graph_matmul": 177, "quantize_graph_pool": 178, "quantize_graph_common": 179, "transform_graph": [180, 181, 182, 183, 184], "bias_correct": 180, "graph_transform_bas": 181, "insert_log": 183, "rerange_quantized_concat": 184, "torch_util": [186, 187, 188, 189, 190, 191, 242], "hawq_metr": 187, "symbolic_trac": 190, "fast_bias_correct": 193, "weight_correct": 195, "conf": [197, 198, 199, 200], "dotdict": 198, "pythonic_config": 200, "sigopt": [204, 592, 595], "tpe": [205, 595], "base_dataload": [206, 244], "default_dataload": [208, 246], "fetcher": [209, 247], "mxnet_dataload": [211, 249], "onnxrt_dataload": [212, 250], "pytorch_dataload": [213, 251], "sampler": [214, 252], "tensorflow_dataload": [215, 253], "bert_dataset": [216, 254], "coco_dataset": [217, 255], "dummy_dataset": [219, 257], "dummy_dataset_v2": [220, 258], "imagenet_dataset": [221, 259], "style_transfer_dataset": [223, 261], "filter": [224, 225, 226, 262, 263, 264], "coco_filt": [224, 262], "coco_transform": 228, "imagenet_transform": [229, 266], "postprocess": [231, 241], "token": [232, 268], "experiment": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "export": [271, 272, 273, 274, 571], "qlinear2qdq": 272, "torch2onnx": 273, "graph_optim": [275, 487, 488, 489, 538], "bleu_util": [278, 320], "coco_label_map": [279, 321], "coco_tool": [280, 322], "evaluate_squad": [281, 323], "f1": [282, 324], "mixed_precis": [285, 491, 492, 493, 540], "model_convers": 286, "basic_na": 287, "dyna": 288, "dynast": [289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "dynas_manag": 289, "dynas_predictor": 290, "dynas_search": 291, "dynas_util": 292, "supernetwork": [294, 295, 296, 297, 298], "machine_transl": [295, 296, 297, 298], "modules_supernetwork": 296, "transformer_interfac": 297, "transformer_supernetwork": 298, "nas_util": 301, "search_algorithm": 302, "pruning_recip": [304, 305, 306, 307], "pattern": [305, 306, 307, 311, 341, 585, 586], "tile_pattern": 307, "pruning_v2": 308, "pytorch_prun": [309, 310, 311, 312, 313, 314, 315], "logger": [310, 340, 376, 525], "prune_util": 312, "pruner": [313, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352], "mix_precis": 327, "base_model": 328, "keras_model": 330, "mxnet_model": 332, "nets_factori": 333, "onnx_model": 334, "tensorflow_model": 335, "torch_model": 336, "criteria": [338, 585, 586, 595], "pruner_legaci": [342, 343, 344, 345, 346, 347], "gradient_sensit": 342, "group_lasso": 343, "magnitud": 345, "pattern_lock": 346, "reg": 350, "auto_mixed_precis": 354, "bayesian": [356, 595], "conserv": 357, "exhaust": [358, 595], "hawq_v2": [359, 595], "mse": [361, 595], "mse_v2": [362, 595], "random": [363, 595], "tuning_sampl": 366, "tuning_spac": 367, "tuning_struct": 368, "collect_layer_histogram": 370, "constant": 371, "create_obj_from_config": 372, "kl_diverg": 374, "load_huggingfac": 375, "option": [377, 562, 569, 577], "ux": [380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560], "benchmark_model": 381, "execute_benchmark": 382, "config_gener": [384, 385, 386, 387, 388, 389, 390, 391], "benchmark_config_gener": 384, "graph_optimization_config_gener": 386, "mixed_precision_config_gener": 388, "profiling_config_gener": 389, "pruning_config_gener": 390, "quantization_config_gener": 391, "configuration_wizard": [392, 393, 394, 395, 396, 397], "configuration_pars": 392, "get_boundary_nod": 393, "get_configur": 394, "params_feed": 396, "pruning_config_pars": 397, "db_manag": [398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433], "db_model": [399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "benchmark_result": 400, "domain": [403, 461], "domain_flavour": 404, "framework": [406, 564, 565, 571, 573, 581, 588], "optimization_typ": 411, "profil": [413, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 557, 562], "profiling_result": 414, "project": [415, 562], "pruning_detail": 416, "tuning_detail": 418, "tuning_histori": [419, 503], "db_oper": [420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430], "benchmark_api_interfac": 420, "dataset_api_interfac": 421, "diagnosis_api_interfac": 423, "dictionaries_api_interfac": 424, "examples_api_interfac": 425, "model_api_interfac": 427, "optimization_api_interfac": 428, "profiling_api_interfac": 429, "project_api_interfac": 430, "params_interfac": 432, "diagnosi": [434, 435, 436, 437, 438, 439, 440, 441, 442, 562], "factori": [435, 486, 505, 510], "onnx_diagnosi": [437, 438], "onnxrt_diagnosi": 438, "op_detail": 439, "op_entri": 440, "tensorflow_diagnosi": [441, 442], "file_brows": [443, 444], "graph": [445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 562], "collaps": 446, "edg": 447, "graph_read": 449, "node": 451, "reader": [452, 453, 454], "onnxrt_read": 453, "tensorflow_read": 454, "jobs_manag": [456, 457, 458, 459], "jobs_control_queu": 457, "manage_workspac": 460, "model_type_gett": 464, "repositori": 469, "shape": 470, "frozen_pb": 471, "meta_graph": 474, "saved_model": 476, "model_zoo": [478, 479, 480, 481, 482], "download_config": 478, "download_model": 479, "download": 480, "list_model": 482, "names_mapp": [483, 484], "execute_optim": 485, "optimize_model": [489, 493, 495, 498], "neural_coder_optim": [494, 495], "tune": [500, 501, 502, 544, 589, 595], "tune_model": 501, "execute_profil": 504, "profile_model": 507, "tensorflow_profil": [510, 511, 512, 513], "inc_bench": 514, "const": 516, "except": [518, 548], "executor": 519, "expiring_dict": 520, "github_info": 521, "hw_info": 522, "json_seri": 524, "parser": 526, "proc": 527, "process": 528, "singleton": 529, "status_upd": 530, "workdir": 533, "workload": [535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 560], "evalu": [537, 569], "yaml_util": 545, "web": [546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560], "commun": 546, "configur": [547, 569, 573, 584, 588, 592, 596], "router": 550, "server": 551, "servic": [552, 553, 554, 555, 556, 557, 558, 559, 560], "history_snapshot_pars": 553, "request_data_processor": 558, "response_gener": 559, "version": 561, "bench": 562, "tabl": 562, "from": [562, 577], "binari": [562, 577], "sourc": [562, 577], "home": 562, "screen": 562, "creat": [562, 564], "predefin": 562, "displai": 562, "list": [562, 594], "remov": 562, "develop": 562, "tab": 562, "wizard": 562, "edit": 562, "entri": 562, "inform": [562, 578], "file": [564, 565, 573, 596], "user": [564, 565, 568, 569, 574, 588, 596], "specif": [564, 565], "design": [566, 595], "workflow": 566, "knowledg": [567, 597], "intermedi": 567, "layer": 567, "self": 567, "defin": [568, 569], "distribut": 569, "infer": 569, "featur": [569, 573, 576, 588, 589, 593, 596], "pure": 569, "horovodrun": 569, "execut": 569, "fp32": 571, "appendix": 571, "frequent": 572, "ask": 572, "question": 572, "build": [572, 579], "issu": [572, 591], "3": [572, 577], "incompat": [574, 591], "chang": [574, 591], "between": 574, "v1": 574, "face": 574, "section": 575, "infrastructur": 576, "ai": 577, "kit": 577, "window": 577, "legal": 578, "licens": 578, "citat": 578, "trademark": 578, "singl": [579, 582], "multi": 579, "orchestr": 583, "One": 583, "shot": 583, "network": [585, 586], "type": 586, "sparsiti": 586, "decai": 586, "regular": 586, "refer": [586, 589], "full": 587, "52": 587, "2022": 587, "34": 587, "2021": 587, "14": 587, "2018": 587, "2020": 587, "4": 587, "style": 588, "access": 588, "fundament": 589, "scheme": 589, "ipex": 589, "approach": 589, "accuraci": [589, 595], "turn": 590, "ON": 590, "auto": 590, "dure": 590, "releas": 591, "known": 591, "prepar": 592, "platform": 592, "perform": 592, "benefit": 592, "comparison": 592, "differ": 592, "tensorboard": 593, "space": 595, "exit": 595, "travers": 595, "logic": 595, "o0": 595, "10": 597, "12": 597, "ptq": 597, "11": 597, "7": 597}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributor Covenant Code of Conduct": [[0, "contributor-covenant-code-of-conduct"], [1, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[0, "our-pledge"]], "Our Standards": [[0, "our-standards"]], "Our Responsibilities": [[0, "our-responsibilities"]], "Scope": [[0, "scope"]], "Enforcement": [[0, "enforcement"]], "Attribution": [[0, "attribution"]], "Contribution Guidelines": [[1, "contribution-guidelines"]], "Pull Request Checklist": [[1, "pull-request-checklist"]], "Pull Request Template": [[1, "pull-request-template"]], "Support": [[1, "support"]], "FX": [[2, "fx"]], "Introduction": [[2, "introduction"], [3, "introduction"], [6, "introduction"], [562, "introduction"], [563, "introduction"], [564, "introduction"], [565, "introduction"], [567, "introduction"], [568, "introduction"], [569, "introduction"], [571, "introduction"], [573, "introduction"], [576, "introduction"], [579, "introduction"], [580, "introduction"], [581, "introduction"], [582, "introduction"], [583, "introduction"], [585, "introduction"], [586, "introduction"], [588, "introduction"], [592, "introduction"], [593, "introduction"], [594, "introduction"], [595, "introduction"], [596, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[2, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[2, "get-start"]], "Post Training Static Quantization": [[2, "post-training-static-quantization"], [589, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[2, "post-training-dynamic-quantization"], [589, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[2, "quantization-aware-training"]], "Examples": [[2, "examples"], [3, "examples"], [563, "examples"], [564, "examples"], [565, "examples"], [567, "examples"], [568, "examples"], [569, "examples"], [570, "examples"], [571, "examples"], [580, "examples"], [581, "examples"], [583, "examples"], [585, "examples"], [589, "examples"], [593, "examples"]], "Note": [[2, "note"]], "Details": [[2, "details"]], "Common Problem": [[2, "common-problem"]], "Dynamic Quantization": [[2, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[2, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[3, "neural-architecture-search"]], "Basic NAS": [[3, "basic-nas"]], "Dynamic NAS": [[3, "dynamic-nas"]], "NAS Support Matrix": [[3, "nas-support-matrix"]], "Get Started with NAS API": [[3, "get-started-with-nas-api"]], "Basic Usage": [[3, "basic-usage"]], "1. Python code + YAML": [[3, "python-code-yaml"]], "2. Python code only": [[3, "python-code-only"]], "Advanced Usage (Custom NAS)": [[3, "advanced-usage-custom-nas"]], "Security Policy": [[4, "security-policy"]], "Report a Vulnerability": [[4, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[5, "intel-neural-compressor"]], "Installation": [[5, "installation"], [577, "installation"]], "Prerequisites": [[5, "prerequisites"], [577, "prerequisites"], [577, "id1"]], "Install on Linux": [[5, "install-on-linux"]], "Getting Started": [[5, "getting-started"]], "Quantization with Python API": [[5, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[5, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[5, "quantization-with-gui"]], "System Requirements": [[5, "system-requirements"]], "Validated Hardware Environment": [[5, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[5, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[5, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[5, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[5, "validated-software-environment"]], "Validated Models": [[5, "validated-models"], [597, "validated-models"]], "Documentation": [[5, "documentation"]], "Selected Publications/Events": [[5, "selected-publications-events"]], "Additional Content": [[5, "additional-content"]], "Hiring": [[5, "hiring"]], "Adaptor": [[6, "adaptor"], [7, "adaptor"]], "Adaptor Support Matrix": [[6, "adaptor-support-matrix"]], "Working Flow": [[6, "working-flow"], [589, "working-flow"]], "Get Start with Adaptor API": [[6, "get-start-with-adaptor-api"]], "Query API": [[6, "query-api"]], "Background": [[6, "background"]], "Query API Introduction": [[6, "query-api-introduction"]], "Example of Adding a New Backend Support": [[6, "example-of-adding-a-new-backend-support"]], "Capability": [[6, "capability"]], "Implement ONNXRTAdaptor Class": [[6, "implement-onnxrtadaptor-class"]], "ONNXRT": [[8, "onnxrt"], [565, "onnxrt"], [579, "onnxrt"], [594, "onnxrt"]], "Torch Utils": [[9, "torch-utils"]], "Bf16 Convert": [[10, "bf16-convert"]], "Hawq Metric": [[11, "hawq-metric"]], "Onnx": [[12, "onnx"]], "Symbolic Trace": [[13, "symbolic-trace"]], "Util": [[14, "util"]], "Algorithm": [[15, "algorithm"]], "APIs": [[16, "apis"]], "Common": [[17, "common"]], "Benchmark": [[18, "benchmark"], [39, "benchmark"], [563, "benchmark"], [588, "benchmark"]], "BLEU": [[19, "module-neural_compressor.experimental.metric.bleu"]], "Module Contents": [[19, "module-contents"], [51, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [61, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [153, "module-contents"], [155, "module-contents"], [156, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [201, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [228, "module-contents"], [229, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [246, "module-contents"], [247, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [266, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [277, "module-contents"], [278, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [319, "module-contents"], [320, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [372, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [442, "module-contents"], [443, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [449, "module-contents"], [451, "module-contents"], [453, "module-contents"], [454, "module-contents"], [460, "module-contents"], [461, "module-contents"], [463, "module-contents"], [464, "module-contents"], [466, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [482, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [489, "module-contents"], [492, "module-contents"], [493, "module-contents"], [495, "module-contents"], [496, "module-contents"], [498, "module-contents"], [499, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [512, "module-contents"], [513, "module-contents"], [514, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [524, "module-contents"], [525, "module-contents"], [526, "module-contents"], [527, "module-contents"], [528, "module-contents"], [529, "module-contents"], [530, "module-contents"], [532, "module-contents"], [533, "module-contents"], [534, "module-contents"], [535, "module-contents"], [536, "module-contents"], [537, "module-contents"], [538, "module-contents"], [540, "module-contents"], [541, "module-contents"], [542, "module-contents"], [543, "module-contents"], [544, "module-contents"], [545, "module-contents"], [546, "module-contents"], [547, "module-contents"], [548, "module-contents"], [550, "module-contents"], [551, "module-contents"], [552, "module-contents"], [553, "module-contents"], [555, "module-contents"], [556, "module-contents"], [557, "module-contents"], [558, "module-contents"], [559, "module-contents"], [560, "module-contents"]], "Classes": [[19, "classes"], [32, "classes"], [56, "classes"], [58, "classes"], [61, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [153, "classes"], [155, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [183, "classes"], [184, "classes"], [186, "classes"], [187, "classes"], [189, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [201, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [243, "classes"], [244, "classes"], [246, "classes"], [247, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [280, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [296, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [311, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [322, "classes"], [325, "classes"], [326, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [379, "classes"], [380, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [416, "classes"], [417, "classes"], [418, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [423, "classes"], [424, "classes"], [425, "classes"], [426, "classes"], [427, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [434, "classes"], [435, "classes"], [438, "classes"], [439, "classes"], [440, "classes"], [442, "classes"], [445, "classes"], [446, "classes"], [447, "classes"], [448, "classes"], [449, "classes"], [451, "classes"], [453, "classes"], [454, "classes"], [461, "classes"], [463, "classes"], [466, "classes"], [468, "classes"], [469, "classes"], [470, "classes"], [471, "classes"], [473, "classes"], [474, "classes"], [475, "classes"], [476, "classes"], [480, "classes"], [484, "classes"], [486, "classes"], [487, "classes"], [490, "classes"], [492, "classes"], [496, "classes"], [499, "classes"], [502, "classes"], [503, "classes"], [505, "classes"], [508, "classes"], [509, "classes"], [510, "classes"], [512, "classes"], [516, "classes"], [517, "classes"], [519, "classes"], [520, "classes"], [521, "classes"], [522, "classes"], [524, "classes"], [526, "classes"], [527, "classes"], [528, "classes"], [529, "classes"], [532, "classes"], [533, "classes"], [535, "classes"], [536, "classes"], [537, "classes"], [538, "classes"], [540, "classes"], [541, "classes"], [542, "classes"], [543, "classes"], [544, "classes"], [546, "classes"], [547, "classes"], [550, "classes"], [552, "classes"], [553, "classes"], [555, "classes"], [556, "classes"], [557, "classes"], [558, "classes"], [559, "classes"], [560, "classes"]], "Criterion": [[20, "criterion"]], "Data": [[21, "data"]], "Dataloader": [[22, "dataloader"]], "BaseDataLoader": [[22, "basedataloader"]], "dataloaders": [[22, "dataloaders"]], "Datasets": [[23, "datasets"]], "Transforms": [[24, "transforms"]], "Metric": [[25, "metric"]], "Model": [[26, "model"], [37, "model"], [581, "model"]], "Optimizer": [[27, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[28, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[29, "distillation"], [567, "distillation"], [588, "distillation"]], "MixedPrecision": [[30, "mixedprecision"]], "ModelConversion": [[31, "modelconversion"]], "Neural architecture search (NAS)": [[32, "neural-architecture-search-nas"]], "Package Contents": [[32, "package-contents"], [57, "package-contents"], [78, "package-contents"], [194, "package-contents"], [210, "package-contents"], [222, "package-contents"], [226, "package-contents"], [227, "package-contents"], [230, "package-contents"], [237, "package-contents"], [248, "package-contents"], [260, "package-contents"], [264, "package-contents"], [265, "package-contents"], [267, "package-contents"], [271, "package-contents"], [276, "package-contents"], [283, "package-contents"], [299, "package-contents"], [304, "package-contents"], [305, "package-contents"], [318, "package-contents"], [325, "package-contents"], [329, "package-contents"], [344, "package-contents"], [360, "package-contents"], [365, "package-contents"], [373, "package-contents"], [383, "package-contents"], [426, "package-contents"], [431, "package-contents"], [490, "package-contents"]], "Pruning": [[33, "pruning"], [562, "pruning"], [585, "pruning"], [588, "pruning"]], "Quantization": [[34, "quantization"], [41, "quantization"], [588, "quantization"], [589, "quantization"]], "Scheduler": [[35, "scheduler"]], "Contrib": [[36, "contrib"]], "newAPI": [[38, "newapi"]], "Objective": [[40, "objective"], [582, "objective"]], "Training": [[42, "training"]], "New API": [[43, "new-api"]], "Config": [[44, "config"]], "Mix Precision": [[45, "mix-precision"]], "Pythonic": [[46, "pythonic"]], "Strategy": [[47, "strategy"]], "Strategies": [[48, "strategies"]], "Utils": [[49, "utils"]], "644ec953a7dc_pruning_support": [[50, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[51, "module-6ece06672ed3_v1_14"]], "Functions": [[51, "functions"], [55, "functions"], [56, "functions"], [63, "functions"], [82, "functions"], [88, "functions"], [89, "functions"], [111, "functions"], [112, "functions"], [114, "functions"], [156, "functions"], [158, "functions"], [185, "functions"], [186, "functions"], [187, "functions"], [190, "functions"], [191, "functions"], [192, "functions"], [194, "functions"], [196, "functions"], [198, "functions"], [201, "functions"], [208, "functions"], [216, "functions"], [218, "functions"], [222, "functions"], [225, "functions"], [226, "functions"], [227, "functions"], [230, "functions"], [232, "functions"], [233, "functions"], [234, "functions"], [235, "functions"], [237, "functions"], [240, "functions"], [242, "functions"], [246, "functions"], [254, "functions"], [256, "functions"], [260, "functions"], [263, "functions"], [264, "functions"], [265, "functions"], [267, "functions"], [268, "functions"], [269, "functions"], [271, "functions"], [272, "functions"], [273, "functions"], [274, "functions"], [277, "functions"], [278, "functions"], [280, "functions"], [281, "functions"], [282, "functions"], [283, "functions"], [284, "functions"], [292, "functions"], [296, "functions"], [297, "functions"], [301, "functions"], [306, "functions"], [311, "functions"], [312, "functions"], [313, "functions"], [315, "functions"], [318, "functions"], [319, "functions"], [320, "functions"], [322, "functions"], [323, "functions"], [324, "functions"], [325, "functions"], [326, "functions"], [327, "functions"], [331, "functions"], [335, "functions"], [337, "functions"], [338, "functions"], [341, "functions"], [347, "functions"], [348, "functions"], [350, "functions"], [351, "functions"], [352, "functions"], [353, "functions"], [356, "functions"], [364, "functions"], [369, "functions"], [372, "functions"], [373, "functions"], [375, "functions"], [376, "functions"], [378, "functions"], [379, "functions"], [381, "functions"], [382, "functions"], [392, "functions"], [393, "functions"], [394, "functions"], [396, "functions"], [401, "functions"], [403, "functions"], [404, "functions"], [406, "functions"], [408, "functions"], [411, "functions"], [412, "functions"], [417, "functions"], [420, "functions"], [421, "functions"], [422, "functions"], [433, "functions"], [443, "functions"], [460, "functions"], [464, "functions"], [466, "functions"], [477, "functions"], [478, "functions"], [479, "functions"], [482, "functions"], [485, "functions"], [489, "functions"], [493, "functions"], [495, "functions"], [498, "functions"], [501, "functions"], [503, "functions"], [504, "functions"], [507, "functions"], [513, "functions"], [514, "functions"], [522, "functions"], [525, "functions"], [530, "functions"], [534, "functions"], [542, "functions"], [545, "functions"], [546, "functions"], [550, "functions"], [551, "functions"]], "6f0d0f71d92e_v1_13": [[52, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[53, "module-9e89549a08c8_v1_11"]], "block_mask": [[54, "module-block_mask"]], "env": [[55, "module-env"]], "neural_compressor.adaptor.adaptor": [[56, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[57, "module-neural_compressor.adaptor"]], "Subpackages": [[57, "subpackages"], [66, "subpackages"], [132, "subpackages"], [151, "subpackages"], [152, "subpackages"], [154, "subpackages"], [202, "subpackages"], [227, "subpackages"], [265, "subpackages"], [276, "subpackages"], [293, "subpackages"], [294, "subpackages"], [299, "subpackages"], [304, "subpackages"], [318, "subpackages"], [339, "subpackages"], [360, "subpackages"], [431, "subpackages"], [436, "subpackages"], [450, "subpackages"], [455, "subpackages"], [462, "subpackages"], [490, "subpackages"], [506, "subpackages"], [515, "subpackages"], [523, "subpackages"], [549, "subpackages"]], "Submodules": [[57, "submodules"], [62, "submodules"], [66, "submodules"], [78, "submodules"], [95, "submodules"], [120, "submodules"], [132, "submodules"], [140, "submodules"], [146, "submodules"], [151, "submodules"], [152, "submodules"], [154, "submodules"], [157, "submodules"], [170, "submodules"], [182, "submodules"], [188, "submodules"], [194, "submodules"], [203, "submodules"], [210, "submodules"], [222, "submodules"], [226, "submodules"], [230, "submodules"], [237, "submodules"], [248, "submodules"], [260, "submodules"], [264, "submodules"], [267, "submodules"], [271, "submodules"], [276, "submodules"], [283, "submodules"], [293, "submodules"], [295, "submodules"], [299, "submodules"], [305, "submodules"], [309, "submodules"], [318, "submodules"], [325, "submodules"], [329, "submodules"], [339, "submodules"], [344, "submodules"], [360, "submodules"], [365, "submodules"], [373, "submodules"], [383, "submodules"], [387, "submodules"], [395, "submodules"], [407, "submodules"], [426, "submodules"], [431, "submodules"], [436, "submodules"], [437, "submodules"], [441, "submodules"], [444, "submodules"], [450, "submodules"], [452, "submodules"], [455, "submodules"], [456, "submodules"], [462, "submodules"], [465, "submodules"], [467, "submodules"], [472, "submodules"], [481, "submodules"], [483, "submodules"], [488, "submodules"], [490, "submodules"], [491, "submodules"], [494, "submodules"], [497, "submodules"], [500, "submodules"], [506, "submodules"], [511, "submodules"], [515, "submodules"], [523, "submodules"], [531, "submodules"], [539, "submodules"], [549, "submodules"], [554, "submodules"]], "neural_compressor.adaptor.keras": [[58, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils": [[59, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[60, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[61, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[62, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[63, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[64, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[65, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[66, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[67, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[68, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[69, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[70, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[71, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[72, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[73, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[74, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[75, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[76, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[77, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[78, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[79, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[80, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[81, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[82, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[83, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[84, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[85, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[86, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[87, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[88, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[89, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[90, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[91, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[92, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[93, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[133, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[134, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[135, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[136, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[137, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[138, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[139, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[140, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[141, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[142, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[143, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[144, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[145, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[146, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[147, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[148, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[149, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[150, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[151, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[162, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[163, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[164, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[165, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[166, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[167, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[168, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[169, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[170, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[171, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[172, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[173, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[174, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[175, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[176, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[177, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[178, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[179, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[180, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[181, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[182, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[183, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[184, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[185, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[186, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[187, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[188, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[189, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[190, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[191, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[192, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[193, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[194, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[195, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[196, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[197, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[198, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[199, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[200, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[201, "module-neural_compressor.config"]], "neural_compressor.contrib": [[202, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[203, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[204, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[205, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[206, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[207, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[208, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[209, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[210, "module-neural_compressor.data.dataloaders"]], "Attributes": [[210, "attributes"], [218, "attributes"], [227, "attributes"], [256, "attributes"], [265, "attributes"], [276, "attributes"], [304, "attributes"], [329, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[211, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[212, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[213, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[214, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[215, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[216, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[217, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[218, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[219, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[220, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[221, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[222, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[223, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[224, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[225, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[226, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[227, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[228, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[229, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[230, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[231, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[232, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[233, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[234, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[235, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[236, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[237, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[238, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[239, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[240, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[241, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[242, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[243, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[244, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[245, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[246, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[247, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[248, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[249, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[250, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[251, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[252, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[253, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[254, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[255, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[256, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[257, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[258, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[259, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[260, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[261, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[262, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[263, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[264, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[265, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[266, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[267, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[268, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[269, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[270, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[271, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[272, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.torch2onnx": [[273, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[274, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[275, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[276, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[277, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[278, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[279, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[280, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[281, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[282, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[283, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[284, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[285, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[286, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[287, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[288, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[289, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[290, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[291, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[292, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[293, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[294, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[295, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[296, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[297, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[298, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "neural_compressor.experimental.nas": [[299, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[300, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[301, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[302, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[303, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[304, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[305, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[306, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[307, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[308, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[309, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[310, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[311, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[312, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[313, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[314, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[315, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[316, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[317, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[318, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[319, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[320, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[321, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[322, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[323, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[324, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[325, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[326, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[327, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[328, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[329, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[330, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[331, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[332, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[333, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[334, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[335, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[336, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[337, "module-neural_compressor.objective"]], "neural_compressor.pruner.criteria": [[338, "module-neural_compressor.pruner.criteria"]], "neural_compressor.pruner": [[339, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[340, "module-neural_compressor.pruner.logger"]], "neural_compressor.pruner.patterns": [[341, "module-neural_compressor.pruner.patterns"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[342, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[343, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[344, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[345, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[346, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[347, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "neural_compressor.pruner.pruners": [[348, "module-neural_compressor.pruner.pruners"]], "neural_compressor.pruner.pruning": [[349, "module-neural_compressor.pruner.pruning"]], "neural_compressor.pruner.regs": [[350, "module-neural_compressor.pruner.regs"]], "neural_compressor.pruner.schedulers": [[351, "module-neural_compressor.pruner.schedulers"]], "neural_compressor.pruner.utils": [[352, "module-neural_compressor.pruner.utils"]], "neural_compressor.quantization": [[353, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[354, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[355, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[356, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[357, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[358, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[359, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[360, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[361, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[362, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[363, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[364, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils": [[365, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[366, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[367, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[368, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.training": [[369, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[370, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[371, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[372, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[373, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[374, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[375, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[376, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[377, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[378, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[379, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[380, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[381, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[382, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[383, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[384, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[385, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[386, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[387, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[388, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[389, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[390, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[391, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[392, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[393, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[394, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[395, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[396, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[397, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[398, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[399, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[400, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[401, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[402, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[403, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[404, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[405, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[406, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[407, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[408, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[409, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[410, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[411, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[412, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[413, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[414, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[415, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[416, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[417, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[418, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[419, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[420, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[421, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[422, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[423, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[424, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[425, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[426, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[427, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[428, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[429, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[430, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[431, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[432, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[433, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[434, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[435, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[436, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[437, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[438, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[439, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[440, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[441, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[442, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[443, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[444, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[445, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[446, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[447, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[448, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[449, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[450, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[451, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[452, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[453, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[454, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[455, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[456, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[457, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[458, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[459, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[460, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[461, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[462, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[463, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[464, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[465, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[466, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[467, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[468, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[469, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[470, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[471, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[472, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[473, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[474, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[475, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[476, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[477, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[478, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[479, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[480, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[481, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[482, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[483, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[484, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[485, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[486, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[487, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[488, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[489, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[490, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[491, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[492, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[493, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[494, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[495, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[496, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[497, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[498, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[499, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[500, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[501, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[502, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[503, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[504, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[505, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[506, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[507, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[508, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[509, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[510, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[511, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[512, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[513, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[514, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[515, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[516, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[517, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[518, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[519, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[520, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[521, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[522, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[523, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[524, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[525, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[526, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[527, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[528, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[529, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[530, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[531, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[532, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[533, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[534, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[535, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[536, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[537, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[538, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[539, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[540, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[541, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[542, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[543, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[544, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[545, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[546, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[547, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[548, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[549, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[550, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[551, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[552, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[553, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[554, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[555, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[556, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[557, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[558, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[559, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[560, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[561, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Bench": [[562, "intel-neural-compressor-bench"]], "Table of Contents": [[562, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[562, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[562, "option-1-install-from-binary"]], "Option 2: Install from Source": [[562, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[562, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[562, "home-screen"]], "Create New Project": [[562, "create-new-project"]], "Predefined Model": [[562, "predefined-model"]], "Custom Model": [[562, "custom-model"]], "Display Model Graph": [[562, "display-model-graph"]], "Project List": [[562, "project-list"]], "Remove Project": [[562, "remove-project"]], "Develop Project": [[562, "develop-project"]], "Optimization Tab": [[562, "optimization-tab"]], "Optimization Table": [[562, "optimization-table"]], "Optimization Wizard": [[562, "optimization-wizard"]], "Editing Optimization Entries": [[562, "editing-optimization-entries"]], "Optimization Details": [[562, "optimization-details"]], "Benchmark Tab": [[562, "benchmark-tab"]], "Benchmark Table": [[562, "benchmark-table"]], "Benchmark Wizard": [[562, "benchmark-wizard"]], "Editing Benchmark Entries": [[562, "editing-benchmark-entries"]], "Benchmark Details": [[562, "benchmark-details"]], "Profiling Tab": [[562, "profiling-tab"]], "Profiling Table": [[562, "profiling-table"]], "Profiling Wizard": [[562, "profiling-wizard"]], "Editing Profiling Entries": [[562, "editing-profiling-entries"]], "Profiling Details": [[562, "profiling-details"]], "Diagnosis Tab": [[562, "diagnosis-tab"]], "Dataset Tab": [[562, "dataset-tab"]], "Dataset List": [[562, "dataset-list"]], "Dataset Wizard": [[562, "dataset-wizard"]], "Dataset Details": [[562, "dataset-details"]], "Custom Dataset": [[562, "custom-dataset"]], "Project Information": [[562, "project-information"]], "System Information": [[562, "system-information"]], "Security": [[562, "security"], [569, "security"]], "Benchmark Support Matrix": [[563, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[563, "get-started-with-benchmark-api"]], "DataLoader": [[564, "dataloader"]], "Supported Framework Dataloader Matrix": [[564, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[564, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[564, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[564, "create-a-user-specific-dataloader"]], "Dataset": [[565, "dataset"]], "Supported Framework Dataset Matrix": [[565, "supported-framework-dataset-matrix"]], "TensorFlow": [[565, "tensorflow"], [579, "tensorflow"], [594, "tensorflow"]], "PyTorch": [[565, "pytorch"], [579, "pytorch"], [590, "pytorch"]], "MXNet": [[565, "mxnet"], [579, "mxnet"], [594, "mxnet"]], "Get start with Dataset API": [[565, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[565, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[565, "user-specific-dataset"]], "Design": [[566, "design"], [595, "design"], [595, "id1"], [595, "id3"], [595, "id5"], [595, "id7"], [595, "id9"], [595, "id11"], [595, "id13"], [595, "id15"], [595, "id17"]], "Architecture": [[566, "architecture"], [576, "architecture"]], "Workflow": [[566, "workflow"]], "Knowledge Distillation": [[567, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[567, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[567, "self-distillation"]], "Distillation Support Matrix": [[567, "distillation-support-matrix"]], "Get Started with Distillation API": [[567, "get-started-with-distillation-api"]], "Distillation for Quantization": [[568, "distillation-for-quantization"]], "User-defined yaml": [[568, "user-defined-yaml"]], "Distributed Training and Inference (Evaluation)": [[569, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[569, "supported-feature-matrix"], [573, "supported-feature-matrix"], [576, "supported-feature-matrix"], [588, "supported-feature-matrix"], [589, "supported-feature-matrix"], [593, "supported-feature-matrix"], [596, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[569, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[569, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[569, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[569, "horovodrun-execution"]], "PyTorch Examples:": [[569, "pytorch-examples"]], "TensorFlow Examples:": [[569, "tensorflow-examples"]], "Export": [[571, "export"]], "Supported Framework Model Matrix": [[571, "supported-framework-model-matrix"], [581, "supported-framework-model-matrix"]], "FP32 Model Export": [[571, "fp32-model-export"]], "INT8 Model Export": [[571, "int8-model-export"]], "Appendix": [[571, "appendix"]], "Frequently Asked Questions": [[572, "frequently-asked-questions"]], "Common Build Issues": [[572, "common-build-issues"]], "Issue 1:": [[572, "issue-1"]], "Issue 2:": [[572, "issue-2"]], "Issue 3:": [[572, "issue-3"]], "Framework YAML Configuration Files": [[573, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[573, "get-started-with-framework-yaml-files"]], "Incompatible changes between v1.2 and v1.1": [[574, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[574, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[574, "built-in-transform-dataset-metric-apis"]], "Intel\u00ae Neural Compressor Documentation": [[575, "intel-neural-compressor-documentation"]], "Sections": [[575, "sections"]], "Infrastructure of Intel\u00ae Neural Compressor": [[576, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[577, "linux-installation"]], "Option 1 Install from Binary": [[577, "option-1-install-from-binary"], [577, "id2"]], "Option 2 Install from Source": [[577, "option-2-install-from-source"], [577, "id3"]], "Option 3 Install from AI Kit": [[577, "option-3-install-from-ai-kit"]], "Windows Installation": [[577, "windows-installation"]], "Legal Information": [[578, "legal-information"]], "License": [[578, "license"]], "Citation": [[578, "citation"]], "Trademarks": [[578, "trademarks"]], "Metrics": [[579, "metrics"]], "Supported Built-in Metric Matrix": [[579, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[579, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[579, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[579, "build-custom-metric-with-python-api"]], "Mixed Precision": [[580, "mixed-precision"]], "Mixed Precision Support Matrix": [[580, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[580, "get-started-with-mixed-precision-api"]], "Single Objective": [[582, "single-objective"]], "Multiple Objectives": [[582, "multiple-objectives"]], "Objective Support Matrix": [[582, "objective-support-matrix"]], "Get Started with Objective API": [[582, "get-started-with-objective-api"]], "Config Single Objective": [[582, "config-single-objective"]], "Config Multiple Objectives": [[582, "config-multiple-objectives"]], "Example": [[582, "example"]], "Optimization Orchestration": [[583, "optimization-orchestration"]], "One-shot": [[583, "one-shot"]], "Orchestration Support Matrix": [[583, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[583, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[584, "system-configuration"]], "Neural Network Pruning": [[585, "neural-network-pruning"], [586, "neural-network-pruning"]], "Pruning Patterns": [[585, "pruning-patterns"], [586, "pruning-patterns"]], "Pruning Criteria": [[585, "pruning-criteria"], [586, "pruning-criteria"]], "Pruning Schedule": [[585, "pruning-schedule"], [586, "pruning-schedule"]], "Pruning Support Matrix": [[585, "pruning-support-matrix"]], "Get Started with Pruning API": [[585, "get-started-with-pruning-api"]], "Pruning details": [[586, "pruning-details"]], "Pruning Type": [[586, "pruning-type"]], "Pruning Scope": [[586, "pruning-scope"]], "Sparsity Decay Type": [[586, "sparsity-decay-type"]], "Regularization": [[586, "regularization"]], "Pruning Examples": [[586, "pruning-examples"]], "Reference": [[586, "reference"], [589, "reference"]], "Full Publications/Events (52)": [[587, "full-publications-events-52"]], "2022 (34)": [[587, "id1"]], "2021 (14)": [[587, "id2"]], "2018 - 2020 (4)": [[587, "id3"]], "Pythonic Style Access for Configurations": [[588, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[588, "pythonic-api-for-user-configurations"], [588, "id1"]], "Pythonic API for Framework Configurations": [[588, "pythonic-api-for-framework-configurations"], [588, "id2"]], "Get Started with Pythonic API for Configurations": [[588, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[588, "nas"]], "Quantization Introduction": [[589, "quantization-introduction"]], "Quantization Fundamentals": [[589, "quantization-fundamentals"]], "Quantization Support Matrix": [[589, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[589, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[589, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[589, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[589, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[589, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[589, "quantization-approaches"]], "Quantization Aware Training": [[589, "quantization-aware-training"]], "Accuracy Aware Tuning": [[589, "accuracy-aware-tuning"]], "Get Started": [[589, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[590, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[590, "tensorflow"]], "Release": [[591, "release"]], "Release Notes": [[591, "release-notes"]], "Known Issues": [[591, "known-issues"]], "Incompatible Changes": [[591, "incompatible-changes"]], "SigOpt Strategy": [[592, "sigopt-strategy"]], "Preparation": [[592, "preparation"]], "SigOpt Platform": [[592, "sigopt-platform"]], "Neural Compressor Configuration": [[592, "neural-compressor-configuration"]], "Performance": [[592, "performance"]], "Benefit of SigOpt Strategy": [[592, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[592, "performance-comparison-of-different-strategies"]], "TensorBoard": [[593, "tensorboard"]], "Get Started with TensorBoard": [[593, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[593, "pytorch-tensorboard"]], "Usage": [[593, "usage"], [593, "id1"], [595, "usage"], [595, "id2"], [595, "id4"], [595, "id6"], [595, "id8"], [595, "id10"], [595, "id12"], [595, "id14"], [595, "id16"], [595, "id18"]], "TensorFlow Tensorboard": [[593, "tensorflow-tensorboard"]], "PyTorch Examples": [[593, "pytorch-examples"]], "TensorFlow Examples": [[593, "tensorflow-examples"]], "Transform": [[594, "transform"]], "Transform Support List": [[594, "transform-support-list"]], "Pytorch": [[594, "pytorch"]], "Tuning Strategies": [[595, "tuning-strategies"]], "Strategy Design": [[595, "strategy-design"]], "Tuning Space": [[595, "tuning-space"]], "Exit Policy": [[595, "exit-policy"]], "Accuracy Criteria": [[595, "accuracy-criteria"]], "Traverse": [[595, "traverse"]], "Traverse Logic": [[595, "traverse-logic"]], "O0": [[595, "o0"]], "Basic": [[595, "basic"]], "MSE": [[595, "mse"]], "MSE_V2": [[595, "mse-v2"]], "HAWQ_V2": [[595, "hawq-v2"]], "Bayesian": [[595, "bayesian"]], "Exhaustive": [[595, "exhaustive"]], "Random": [[595, "random"]], "SigOpt": [[595, "sigopt"]], "TPE": [[595, "tpe"]], "Customize a New Tuning Strategy": [[595, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[596, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[596, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[597, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.10.0": [[597, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch Models with Torch 1.12.1+cpu in PTQ Mode": [[597, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.12.1+cpu in QAT Mode": [[597, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[597, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[597, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet Models with MXNet 1.7.0": [[597, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[597, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[597, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[597, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"bleu (class in neural_compressor.experimental.metric.bleu)": [[19, "neural_compressor.experimental.metric.bleu.BLEU"], [277, "neural_compressor.experimental.metric.bleu.BLEU"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[19, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [277, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "module": [[19, "module-neural_compressor.experimental.metric.bleu"], [50, "module-644ec953a7dc_pruning_support"], [51, "module-6ece06672ed3_v1_14"], [52, "module-6f0d0f71d92e_v1_13"], [53, "module-9e89549a08c8_v1_11"], [54, "module-block_mask"], [55, "module-env"], [56, "module-neural_compressor.adaptor.adaptor"], [57, "module-neural_compressor.adaptor"], [58, "module-neural_compressor.adaptor.keras"], [59, "module-neural_compressor.adaptor.keras_utils"], [60, "module-neural_compressor.adaptor.keras_utils.quantizer"], [61, "module-neural_compressor.adaptor.mxnet"], [62, "module-neural_compressor.adaptor.mxnet_utils"], [63, "module-neural_compressor.adaptor.mxnet_utils.util"], [64, "module-neural_compressor.adaptor.onnxrt"], [65, "module-neural_compressor.adaptor.ox_utils.calibration"], [66, "module-neural_compressor.adaptor.ox_utils"], [67, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [68, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [69, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [70, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [71, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [72, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [73, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [74, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [75, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [76, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [77, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [78, "module-neural_compressor.adaptor.ox_utils.operators"], [79, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [80, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [81, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [82, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [83, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [84, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [85, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [86, "module-neural_compressor.adaptor.ox_utils.operators.split"], [87, "module-neural_compressor.adaptor.ox_utils.quantizer"], [88, "module-neural_compressor.adaptor.ox_utils.util"], [89, "module-neural_compressor.adaptor.pytorch"], [90, "module-neural_compressor.adaptor.query"], [91, "module-neural_compressor.adaptor.tensorflow"], [92, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [93, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [133, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [134, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [135, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [136, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [137, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [138, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [139, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [140, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [141, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [142, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [143, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [144, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [145, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [146, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [147, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [148, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [149, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [150, "module-neural_compressor.adaptor.tf_utils.graph_util"], [151, "module-neural_compressor.adaptor.tf_utils"], [152, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [162, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [163, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [164, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [165, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [166, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [167, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [168, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [169, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [170, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [171, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [172, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [173, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [174, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [175, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [176, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [177, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [178, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [179, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [180, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [181, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [182, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [183, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [184, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [185, "module-neural_compressor.adaptor.tf_utils.util"], [186, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [187, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [188, "module-neural_compressor.adaptor.torch_utils"], [189, "module-neural_compressor.adaptor.torch_utils.onnx"], [190, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [191, "module-neural_compressor.adaptor.torch_utils.util"], [192, "module-neural_compressor.algorithm.algorithm"], [193, "module-neural_compressor.algorithm.fast_bias_correction"], [194, "module-neural_compressor.algorithm"], [195, "module-neural_compressor.algorithm.weight_correction"], [196, "module-neural_compressor.benchmark"], [197, "module-neural_compressor.conf.config"], [198, "module-neural_compressor.conf.dotdict"], [199, "module-neural_compressor.conf"], [200, "module-neural_compressor.conf.pythonic_config"], [201, "module-neural_compressor.config"], [202, "module-neural_compressor.contrib"], [203, "module-neural_compressor.contrib.strategy"], [204, "module-neural_compressor.contrib.strategy.sigopt"], [205, "module-neural_compressor.contrib.strategy.tpe"], [206, "module-neural_compressor.data.dataloaders.base_dataloader"], [207, "module-neural_compressor.data.dataloaders.dataloader"], [208, "module-neural_compressor.data.dataloaders.default_dataloader"], [209, "module-neural_compressor.data.dataloaders.fetcher"], [210, "module-neural_compressor.data.dataloaders"], [211, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [212, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [213, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [214, "module-neural_compressor.data.dataloaders.sampler"], [215, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [216, "module-neural_compressor.data.datasets.bert_dataset"], [217, "module-neural_compressor.data.datasets.coco_dataset"], [218, "module-neural_compressor.data.datasets.dataset"], [219, "module-neural_compressor.data.datasets.dummy_dataset"], [220, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [221, "module-neural_compressor.data.datasets.imagenet_dataset"], [222, "module-neural_compressor.data.datasets"], [223, "module-neural_compressor.data.datasets.style_transfer_dataset"], [224, "module-neural_compressor.data.filters.coco_filter"], [225, "module-neural_compressor.data.filters.filter"], [226, "module-neural_compressor.data.filters"], [227, "module-neural_compressor.data"], [228, "module-neural_compressor.data.transforms.coco_transform"], [229, "module-neural_compressor.data.transforms.imagenet_transform"], [230, "module-neural_compressor.data.transforms"], [231, "module-neural_compressor.data.transforms.postprocess"], [232, "module-neural_compressor.data.transforms.tokenization"], [233, "module-neural_compressor.data.transforms.transform"], [234, "module-neural_compressor.experimental.benchmark"], [235, "module-neural_compressor.experimental.common.criterion"], [236, "module-neural_compressor.experimental.common.dataloader"], [237, "module-neural_compressor.experimental.common"], [238, "module-neural_compressor.experimental.common.metric"], [239, "module-neural_compressor.experimental.common.model"], [240, "module-neural_compressor.experimental.common.optimizer"], [241, "module-neural_compressor.experimental.common.postprocess"], [242, "module-neural_compressor.experimental.common.torch_utils"], [243, "module-neural_compressor.experimental.component"], [244, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [245, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [246, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [247, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [248, "module-neural_compressor.experimental.data.dataloaders"], [249, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [250, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [251, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [252, "module-neural_compressor.experimental.data.dataloaders.sampler"], [253, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [254, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [255, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [256, "module-neural_compressor.experimental.data.datasets.dataset"], [257, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [258, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [259, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [260, "module-neural_compressor.experimental.data.datasets"], [261, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [262, "module-neural_compressor.experimental.data.filters.coco_filter"], [263, "module-neural_compressor.experimental.data.filters.filter"], [264, "module-neural_compressor.experimental.data.filters"], [265, "module-neural_compressor.experimental.data"], [266, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [267, "module-neural_compressor.experimental.data.transforms"], [268, "module-neural_compressor.experimental.data.transforms.tokenization"], [269, "module-neural_compressor.experimental.data.transforms.transform"], [270, "module-neural_compressor.experimental.distillation"], [271, "module-neural_compressor.experimental.export"], [272, "module-neural_compressor.experimental.export.qlinear2qdq"], [273, "module-neural_compressor.experimental.export.torch2onnx"], [274, "module-neural_compressor.experimental.export.utils"], [275, "module-neural_compressor.experimental.graph_optimization"], [276, "module-neural_compressor.experimental"], [277, "module-neural_compressor.experimental.metric.bleu"], [278, "module-neural_compressor.experimental.metric.bleu_util"], [279, "module-neural_compressor.experimental.metric.coco_label_map"], [280, "module-neural_compressor.experimental.metric.coco_tools"], [281, "module-neural_compressor.experimental.metric.evaluate_squad"], [282, "module-neural_compressor.experimental.metric.f1"], [283, "module-neural_compressor.experimental.metric"], [284, "module-neural_compressor.experimental.metric.metric"], [285, "module-neural_compressor.experimental.mixed_precision"], [286, "module-neural_compressor.experimental.model_conversion"], [287, "module-neural_compressor.experimental.nas.basic_nas"], [288, "module-neural_compressor.experimental.nas.dynas"], [289, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [290, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [291, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [292, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [293, "module-neural_compressor.experimental.nas.dynast"], [294, "module-neural_compressor.experimental.nas.dynast.supernetwork"], [295, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"], [296, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"], [297, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"], [298, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"], [299, "module-neural_compressor.experimental.nas"], [300, "module-neural_compressor.experimental.nas.nas"], [301, "module-neural_compressor.experimental.nas.nas_utils"], [302, "module-neural_compressor.experimental.nas.search_algorithms"], [303, "module-neural_compressor.experimental.pruning"], [304, "module-neural_compressor.experimental.pruning_recipes"], [305, "module-neural_compressor.experimental.pruning_recipes.patterns"], [306, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [307, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [308, "module-neural_compressor.experimental.pruning_v2"], [309, "module-neural_compressor.experimental.pytorch_pruner"], [310, "module-neural_compressor.experimental.pytorch_pruner.logger"], [311, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [312, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [313, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [314, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [315, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [316, "module-neural_compressor.experimental.quantization"], [317, "module-neural_compressor.experimental.scheduler"], [318, "module-neural_compressor"], [319, "module-neural_compressor.metric.bleu"], [320, "module-neural_compressor.metric.bleu_util"], [321, "module-neural_compressor.metric.coco_label_map"], [322, "module-neural_compressor.metric.coco_tools"], [323, "module-neural_compressor.metric.evaluate_squad"], [324, "module-neural_compressor.metric.f1"], [325, "module-neural_compressor.metric"], [326, "module-neural_compressor.metric.metric"], [327, "module-neural_compressor.mix_precision"], [328, "module-neural_compressor.model.base_model"], [329, "module-neural_compressor.model"], [330, "module-neural_compressor.model.keras_model"], [331, "module-neural_compressor.model.model"], [332, "module-neural_compressor.model.mxnet_model"], [333, "module-neural_compressor.model.nets_factory"], [334, "module-neural_compressor.model.onnx_model"], [335, "module-neural_compressor.model.tensorflow_model"], [336, "module-neural_compressor.model.torch_model"], [337, "module-neural_compressor.objective"], [338, "module-neural_compressor.pruner.criteria"], [339, "module-neural_compressor.pruner"], [340, "module-neural_compressor.pruner.logger"], [341, "module-neural_compressor.pruner.patterns"], [342, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"], [343, "module-neural_compressor.pruner.pruner_legacy.group_lasso"], [344, "module-neural_compressor.pruner.pruner_legacy"], [345, "module-neural_compressor.pruner.pruner_legacy.magnitude"], [346, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"], [347, "module-neural_compressor.pruner.pruner_legacy.pruner"], [348, "module-neural_compressor.pruner.pruners"], [349, "module-neural_compressor.pruner.pruning"], [350, "module-neural_compressor.pruner.regs"], [351, "module-neural_compressor.pruner.schedulers"], [352, "module-neural_compressor.pruner.utils"], [353, "module-neural_compressor.quantization"], [354, "module-neural_compressor.strategy.auto_mixed_precision"], [355, "module-neural_compressor.strategy.basic"], [356, "module-neural_compressor.strategy.bayesian"], [357, "module-neural_compressor.strategy.conservative"], [358, "module-neural_compressor.strategy.exhaustive"], [359, "module-neural_compressor.strategy.hawq_v2"], [360, "module-neural_compressor.strategy"], [361, "module-neural_compressor.strategy.mse"], [362, "module-neural_compressor.strategy.mse_v2"], [363, "module-neural_compressor.strategy.random"], [364, "module-neural_compressor.strategy.strategy"], [365, "module-neural_compressor.strategy.utils"], [366, "module-neural_compressor.strategy.utils.tuning_sampler"], [367, "module-neural_compressor.strategy.utils.tuning_space"], [368, "module-neural_compressor.strategy.utils.tuning_structs"], [369, "module-neural_compressor.training"], [370, "module-neural_compressor.utils.collect_layer_histogram"], [371, "module-neural_compressor.utils.constant"], [372, "module-neural_compressor.utils.create_obj_from_config"], [373, "module-neural_compressor.utils"], [374, "module-neural_compressor.utils.kl_divergence"], [375, "module-neural_compressor.utils.load_huggingface"], [376, "module-neural_compressor.utils.logger"], [377, "module-neural_compressor.utils.options"], [378, "module-neural_compressor.utils.pytorch"], [379, "module-neural_compressor.utils.utility"], [380, "module-neural_compressor.ux.components.benchmark.benchmark"], [381, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [382, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [383, "module-neural_compressor.ux.components.benchmark"], [384, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [385, "module-neural_compressor.ux.components.config_generator.config_generator"], [386, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [387, "module-neural_compressor.ux.components.config_generator"], [388, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [389, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [390, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [391, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [392, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [393, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [394, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [395, "module-neural_compressor.ux.components.configuration_wizard"], [396, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [397, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [398, "module-neural_compressor.ux.components.db_manager.db_manager"], [399, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [400, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [401, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [402, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [403, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [404, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [405, "module-neural_compressor.ux.components.db_manager.db_models.example"], [406, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [407, "module-neural_compressor.ux.components.db_manager.db_models"], [408, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [409, "module-neural_compressor.ux.components.db_manager.db_models.model"], [410, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [411, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [412, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [413, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [414, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [415, "module-neural_compressor.ux.components.db_manager.db_models.project"], [416, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [417, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [418, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [419, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [420, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [421, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [422, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [423, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [424, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [425, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [426, "module-neural_compressor.ux.components.db_manager.db_operations"], [427, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [428, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [429, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [430, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [431, "module-neural_compressor.ux.components.db_manager"], [432, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [433, "module-neural_compressor.ux.components.db_manager.utils"], [434, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [435, "module-neural_compressor.ux.components.diagnosis.factory"], [436, "module-neural_compressor.ux.components.diagnosis"], [437, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [438, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [439, "module-neural_compressor.ux.components.diagnosis.op_details"], [440, "module-neural_compressor.ux.components.diagnosis.op_entry"], [441, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [442, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [443, "module-neural_compressor.ux.components.file_browser.file_browser"], [444, "module-neural_compressor.ux.components.file_browser"], [445, "module-neural_compressor.ux.components.graph.attribute"], [446, "module-neural_compressor.ux.components.graph.collapser"], [447, "module-neural_compressor.ux.components.graph.edge"], [448, "module-neural_compressor.ux.components.graph.graph"], [449, "module-neural_compressor.ux.components.graph.graph_reader"], [450, "module-neural_compressor.ux.components.graph"], [451, "module-neural_compressor.ux.components.graph.node"], [452, "module-neural_compressor.ux.components.graph.reader"], [453, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [454, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [455, "module-neural_compressor.ux.components"], [456, "module-neural_compressor.ux.components.jobs_management"], [457, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [458, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [459, "module-neural_compressor.ux.components.jobs_management.request"], [460, "module-neural_compressor.ux.components.manage_workspace"], [461, "module-neural_compressor.ux.components.model.domain"], [462, "module-neural_compressor.ux.components.model"], [463, "module-neural_compressor.ux.components.model.model"], [464, "module-neural_compressor.ux.components.model.model_type_getter"], [465, "module-neural_compressor.ux.components.model.onnxrt"], [466, "module-neural_compressor.ux.components.model.onnxrt.model"], [467, "module-neural_compressor.ux.components.model.pytorch"], [468, "module-neural_compressor.ux.components.model.pytorch.model"], [469, "module-neural_compressor.ux.components.model.repository"], [470, "module-neural_compressor.ux.components.model.shape"], [471, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [472, "module-neural_compressor.ux.components.model.tensorflow"], [473, "module-neural_compressor.ux.components.model.tensorflow.keras"], [474, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [475, "module-neural_compressor.ux.components.model.tensorflow.model"], [476, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [477, "module-neural_compressor.ux.components.model.tensorflow.utils"], [478, "module-neural_compressor.ux.components.model_zoo.download_config"], [479, "module-neural_compressor.ux.components.model_zoo.download_model"], [480, "module-neural_compressor.ux.components.model_zoo.downloader"], [481, "module-neural_compressor.ux.components.model_zoo"], [482, "module-neural_compressor.ux.components.model_zoo.list_models"], [483, "module-neural_compressor.ux.components.names_mapper"], [484, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [485, "module-neural_compressor.ux.components.optimization.execute_optimization"], [486, "module-neural_compressor.ux.components.optimization.factory"], [487, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [488, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [489, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [490, "module-neural_compressor.ux.components.optimization"], [491, "module-neural_compressor.ux.components.optimization.mixed_precision"], [492, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [493, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [494, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [495, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [496, "module-neural_compressor.ux.components.optimization.optimization"], [497, "module-neural_compressor.ux.components.optimization.pruning"], [498, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [499, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [500, "module-neural_compressor.ux.components.optimization.tune"], [501, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [502, "module-neural_compressor.ux.components.optimization.tune.tuning"], [503, "module-neural_compressor.ux.components.optimization.tuning_history"], [504, "module-neural_compressor.ux.components.profiling.execute_profiling"], [505, "module-neural_compressor.ux.components.profiling.factory"], [506, "module-neural_compressor.ux.components.profiling"], [507, "module-neural_compressor.ux.components.profiling.profile_model"], [508, "module-neural_compressor.ux.components.profiling.profiler"], [509, "module-neural_compressor.ux.components.profiling.profiling"], [510, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [511, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [512, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [513, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [514, "module-neural_compressor.ux.inc_bench"], [515, "module-neural_compressor.ux"], [516, "module-neural_compressor.ux.utils.consts"], [517, "module-neural_compressor.ux.utils.environment"], [518, "module-neural_compressor.ux.utils.exceptions"], [519, "module-neural_compressor.ux.utils.executor"], [520, "module-neural_compressor.ux.utils.expiring_dict"], [521, "module-neural_compressor.ux.utils.github_info"], [522, "module-neural_compressor.ux.utils.hw_info"], [523, "module-neural_compressor.ux.utils"], [524, "module-neural_compressor.ux.utils.json_serializer"], [525, "module-neural_compressor.ux.utils.logger"], [526, "module-neural_compressor.ux.utils.parser"], [527, "module-neural_compressor.ux.utils.proc"], [528, "module-neural_compressor.ux.utils.processes"], [529, "module-neural_compressor.ux.utils.singleton"], [530, "module-neural_compressor.ux.utils.status_updates"], [531, "module-neural_compressor.ux.utils.templates"], [532, "module-neural_compressor.ux.utils.templates.metric"], [533, "module-neural_compressor.ux.utils.templates.workdir"], [534, "module-neural_compressor.ux.utils.utils"], [535, "module-neural_compressor.ux.utils.workload.config"], [536, "module-neural_compressor.ux.utils.workload.dataloader"], [537, "module-neural_compressor.ux.utils.workload.evaluation"], [538, "module-neural_compressor.ux.utils.workload.graph_optimization"], [539, "module-neural_compressor.ux.utils.workload"], [540, "module-neural_compressor.ux.utils.workload.mixed_precision"], [541, "module-neural_compressor.ux.utils.workload.model"], [542, "module-neural_compressor.ux.utils.workload.pruning"], [543, "module-neural_compressor.ux.utils.workload.quantization"], [544, "module-neural_compressor.ux.utils.workload.tuning"], [545, "module-neural_compressor.ux.utils.yaml_utils"], [546, "module-neural_compressor.ux.web.communication"], [547, "module-neural_compressor.ux.web.configuration"], [548, "module-neural_compressor.ux.web.exceptions"], [549, "module-neural_compressor.ux.web"], [550, "module-neural_compressor.ux.web.router"], [551, "module-neural_compressor.ux.web.server"], [552, "module-neural_compressor.ux.web.service.benchmark"], [553, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [554, "module-neural_compressor.ux.web.service"], [555, "module-neural_compressor.ux.web.service.model"], [556, "module-neural_compressor.ux.web.service.optimization"], [557, "module-neural_compressor.ux.web.service.profiling"], [558, "module-neural_compressor.ux.web.service.request_data_processor"], [559, "module-neural_compressor.ux.web.service.response_generator"], [560, "module-neural_compressor.ux.web.service.workload"], [561, "module-neural_compressor.version"]], "neural_compressor.experimental.metric.bleu": [[19, "module-neural_compressor.experimental.metric.bleu"], [277, "module-neural_compressor.experimental.metric.bleu"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[19, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [277, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[19, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [277, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[19, "neural_compressor.experimental.metric.bleu.BLEU.result"], [277, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[19, "neural_compressor.experimental.metric.bleu.BLEU.update"], [277, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "644ec953a7dc_pruning_support": [[50, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[51, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[51, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[51, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[52, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[53, "module-9e89549a08c8_v1_11"]], "block_mask": [[54, "module-block_mask"]], "env": [[55, "module-env"]], "run_migrations_offline() (in module env)": [[55, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[55, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[56, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[56, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[56, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[56, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[56, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[56, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[56, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[56, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[56, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[56, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[56, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[56, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[57, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[58, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[58, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[58, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[58, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[58, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[58, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[58, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[58, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[58, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[58, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[58, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[58, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[58, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[58, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[58, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[58, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[58, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils": [[59, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[60, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[61, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[61, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[61, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "get_fuse_patterns() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[61, "neural_compressor.adaptor.mxnet.MXNetQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[61, "neural_compressor.adaptor.mxnet.MXNetQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[61, "neural_compressor.adaptor.mxnet.MXNetQuery.get_op_types"]], "get_precisions() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[61, "neural_compressor.adaptor.mxnet.MXNetQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[61, "neural_compressor.adaptor.mxnet.MXNetQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[61, "neural_compressor.adaptor.mxnet.MXNetQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[61, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[61, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[61, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[61, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[61, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[61, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[61, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[62, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calc_kl_th_dict() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[63, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.calc_kl_th_dict"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[63, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[63, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.namecollector method)": [[63, "neural_compressor.adaptor.mxnet_utils.util.NameCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[63, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.collect_gluon"]], "collect_module() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[63, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_module"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "min_max_dict (neural_compressor.adaptor.mxnet_utils.util.calibdata property)": [[63, "neural_compressor.adaptor.mxnet_utils.util.CalibData.min_max_dict"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[63, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "post_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[63, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.post_batch"]], "post_collect() (neural_compressor.adaptor.mxnet_utils.util.calibdata method)": [[63, "neural_compressor.adaptor.mxnet_utils.util.CalibData.post_collect"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[63, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.pre_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[63, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.pre_batch"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[63, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[64, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[64, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[65, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[65, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[65, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[65, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[65, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "dump_minmax() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[65, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_minmax"]], "dump_tensor() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[65, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_tensor"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[65, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[65, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[66, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[67, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[67, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[67, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.qactivationoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[67, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize_check"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize_check"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[68, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[68, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[68, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[69, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[69, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.qattentionoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[69, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.quantize"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[70, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[70, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.qbinaryoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[70, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize_check"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[71, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[71, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.qconcatoperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[71, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize_check"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[72, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[72, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.qconvoperator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[72, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.quantize"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[73, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "directcastoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[73, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[73, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.cast"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.directcastoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[73, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize_check"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[74, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[74, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[74, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.qembedlayernormalizationoperator method)": [[74, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[74, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[74, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[74, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.quantize"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[75, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[75, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[75, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[75, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[75, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[75, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[75, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize_check"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[76, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[76, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[76, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.qglobalaveragepooloperator method)": [[76, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[76, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[76, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[77, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[77, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[77, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.qgemmoperator method)": [[77, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[77, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[77, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[77, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[77, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize_check"]], "neural_compressor.adaptor.ox_utils.operators": [[78, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[79, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[79, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[79, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[79, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[79, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.quantize"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[80, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[80, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[80, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.qmatmuloperator method)": [[80, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[80, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[80, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[80, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.quantize"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[81, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[81, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[81, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[81, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[81, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[81, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[81, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize_check"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[82, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[82, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[82, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[82, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.qoperator method)": [[82, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[82, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[82, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[82, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[82, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[82, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[82, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize_check"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[83, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[83, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[83, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[83, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[83, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[83, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[83, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize_check"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[84, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[84, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[84, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.qpooloperator method)": [[84, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[84, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[84, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[84, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[84, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize_check"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[85, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[85, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[85, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[85, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[85, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[85, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[85, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize_check"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[86, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[86, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[86, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.qsplitoperator method)": [[86, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[86, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[86, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[86, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[86, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.quantize"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "check_opset_version() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.check_opset_version"]], "convert_qdq_to_operator_oriented() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.convert_qdq_to_operator_oriented"]], "dequantize_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dequantize_tensor"]], "dtype_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dtype_cast"]], "get_bias_add_nodes() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.get_bias_add_nodes"]], "insert_qdq() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.insert_qdq"]], "is_valid_quantize_weight() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.is_valid_quantize_weight"]], "merge_dedicated_qdq_pair() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.merge_dedicated_qdq_pair"]], "neural_compressor.adaptor.ox_utils.quantizer": [[87, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantize_bias() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias"]], "quantize_bias_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias_tensor"]], "quantize_inputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_inputs"]], "quantize_model() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_model"]], "quantize_outputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_outputs"]], "quantize_weight_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weight_per_channel"]], "quantize_weights_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weights_per_channel"]], "remove_redundant_pairs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.remove_redundant_pairs"]], "should_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_cast"]], "should_convert() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_convert"]], "should_quantize() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_quantize"]], "tensor_proto_to_array() (neural_compressor.adaptor.ox_utils.quantizer.quantizer static method)": [[87, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.tensor_proto_to_array"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[88, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[88, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[89, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[89, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[89, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[89, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[89, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[89, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[89, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[89, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[90, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[90, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[90, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[90, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[90, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[90, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[90, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[90, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[90, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[91, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[91, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "diagnosis_helper() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.diagnosis_helper"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[91, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_bf16_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[91, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_bf16_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[91, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[91, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_grappler_optimization_cfg() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[91, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_grappler_optimization_cfg"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[91, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[91, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[91, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_output_op_names() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_output_op_names"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[91, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[91, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[91, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[91, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[91, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.train"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[92, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[92, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.bf16_convert"]], "convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[92, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.convert"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[92, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "quantize() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[92, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize"]], "quantize_with_qdq_pattern() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[92, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize_with_qdq_pattern"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[93, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[93, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.bf16_convert"]], "convert_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[93, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.convert_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[93, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "quantize_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[93, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.quantize_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.fusedecomposedbnoptimizer method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.fusedecomposedinoptimizer method)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "get_excluded_node_names() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_excluded_node_names"]], "get_matched_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_matched_nodes"]], "get_optimized_model() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_optimized_model"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[130, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[131, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[131, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[133, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[133, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[134, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[134, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[135, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "do_transformation_without_calib() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[135, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.do_transformation_without_calib"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[135, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[135, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[135, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[136, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[136, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[136, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[137, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[137, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[137, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[138, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[138, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[138, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[139, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[139, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[139, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[139, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[139, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[139, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[139, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[139, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[139, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[140, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[141, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[141, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[141, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[142, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[142, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[142, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[143, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[143, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[143, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[144, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[144, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[144, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[145, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[145, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[145, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[146, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[147, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[147, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[147, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[148, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[148, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[148, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[149, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[149, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[149, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "analysis_rnn_model() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.analysis_rnn_model"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "gen_valid_sampling_log() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.gen_valid_sampling_log"]], "generate_int32_bias_for_conv() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_conv"]], "generate_int32_bias_for_matmul() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_matmul"]], "get_frame_info() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_frame_info"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[150, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[150, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[151, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[162, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[163, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[164, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_conv3d_add_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_fusion"]], "apply_conv3d_add_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_relu_fusion"]], "apply_conv3d_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_fusion"]], "apply_conv3d_add_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_relu_fusion"]], "apply_conv3d_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_single_fusion"]], "apply_conv_biasadd_hardswish_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_hardswish_fusion"]], "apply_newly_conv_biasadd_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_fusion"]], "apply_newly_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_relu_fusion"]], "apply_newly_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_fusion"]], "apply_newly_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_relu_fusion"]], "apply_newly_conv_biasadd_swishf32_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_swishf32_fusion"]], "apply_newly_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[165, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[166, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_deconv2d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[166, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv2d_biasadd_fusion"]], "apply_deconv3d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[166, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv3d_biasadd_fusion"]], "apply_single_deconv2d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[166, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv2d_fusion"]], "apply_single_deconv3d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[166, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv3d_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[166, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[166, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[166, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_newly_in_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_newly_in_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[167, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[168, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[168, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[168, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[168, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[168, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[168, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[168, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[168, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[169, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[170, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "get_quantized_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[171, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[171, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "eightbitize_single_input_tensor_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.eightbitize_single_input_tensor_node"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[172, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "register_transformer() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.register_transformer"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "remove_redundant_quantization() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[172, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.remove_redundant_quantization"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[173, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[173, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[173, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[173, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[173, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[173, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[174, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[174, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[174, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[174, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[175, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[175, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_addn_relu_fusion"]], "apply_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[175, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_fusion"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[175, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[175, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[175, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[175, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[175, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[176, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[176, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[176, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[177, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[177, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[177, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[177, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[177, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[177, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[178, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[178, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "generate_quantized_weight_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.generate_quantized_weight_node"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[179, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[179, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[180, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[180, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[180, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[181, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[181, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.do_transformation"]], "generate_input_map() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[181, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.generate_input_map"]], "get_node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[181, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.get_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[181, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[181, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.node_name_from_input"]], "parse_input_pb() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[181, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[182, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[183, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[183, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[183, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[184, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[184, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[184, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[185, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[185, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[186, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[186, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[186, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "forward() (neural_compressor.adaptor.torch_utils.bf16_convert.bf16modulewrapper method)": [[186, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper.forward"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[186, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_act_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_traces"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "get_device() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_device"]], "get_fused_mapping() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_fused_mapping"]], "get_params() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_params"]], "get_vthv_weight() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_vtHv_weight"]], "get_weight_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_weight_traces"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "hook_fn_act() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.hook_fn_act"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[187, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "register_act_grad_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.register_act_grad_hooks"]], "remove() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.remove"]], "reset_act_gradient_and_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[187, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils": [[188, "module-neural_compressor.adaptor.torch_utils"]], "datareader (class in neural_compressor.adaptor.torch_utils.onnx)": [[189, "neural_compressor.adaptor.torch_utils.onnx.DataReader"]], "get_next() (neural_compressor.adaptor.torch_utils.onnx.datareader method)": [[189, "neural_compressor.adaptor.torch_utils.onnx.DataReader.get_next"]], "neural_compressor.adaptor.torch_utils.onnx": [[189, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[190, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[190, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[190, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[191, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[191, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[192, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[192, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[192, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[192, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[192, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[192, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[192, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm.algorithm": [[192, "module-neural_compressor.algorithm.algorithm"]], "origin_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[192, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[192, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithm.algorithms class method)": [[192, "neural_compressor.algorithm.algorithm.ALGORITHMS.support_algorithms"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[193, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[193, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithms (class in neural_compressor.algorithm)": [[194, "neural_compressor.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm)": [[194, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[194, "neural_compressor.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithmscheduler property)": [[194, "neural_compressor.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[194, "neural_compressor.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithmscheduler property)": [[194, "neural_compressor.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithmscheduler property)": [[194, "neural_compressor.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm": [[194, "module-neural_compressor.algorithm"]], "origin_model (neural_compressor.algorithm.algorithmscheduler property)": [[194, "neural_compressor.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithmscheduler property)": [[194, "neural_compressor.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithms class method)": [[194, "neural_compressor.algorithm.ALGORITHMS.support_algorithms"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[195, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[195, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[196, "neural_compressor.benchmark.Benchmark"]], "dataloader() (neural_compressor.benchmark.benchmark method)": [[196, "neural_compressor.benchmark.Benchmark.dataloader"]], "fit() (in module neural_compressor.benchmark)": [[196, "neural_compressor.benchmark.fit"]], "metric() (neural_compressor.benchmark.benchmark method)": [[196, "neural_compressor.benchmark.Benchmark.metric"]], "neural_compressor.benchmark": [[196, "module-neural_compressor.benchmark"]], "postprocess() (neural_compressor.benchmark.benchmark method)": [[196, "neural_compressor.benchmark.Benchmark.postprocess"]], "benchmark_conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[197, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[197, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[198, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[198, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[198, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[198, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[199, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[200, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[201, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[201, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[201, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[201, "neural_compressor.config.WeightPruningConfig"]], "absolute (neural_compressor.config.accuracycriterion property)": [[201, "neural_compressor.config.AccuracyCriterion.absolute"]], "approach (neural_compressor.config.posttrainingquantconfig property)": [[201, "neural_compressor.config.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.config.quantizationawaretrainingconfig property)": [[201, "neural_compressor.config.QuantizationAwareTrainingConfig.approach"]], "backend (neural_compressor.config.benchmarkconfig property)": [[201, "neural_compressor.config.BenchmarkConfig.backend"]], "check_value() (in module neural_compressor.config)": [[201, "neural_compressor.config.check_value"]], "cores_per_instance (neural_compressor.config.benchmarkconfig property)": [[201, "neural_compressor.config.BenchmarkConfig.cores_per_instance"]], "criterion (neural_compressor.config.accuracycriterion property)": [[201, "neural_compressor.config.AccuracyCriterion.criterion"]], "criterion (neural_compressor.config.distillationconfig property)": [[201, "neural_compressor.config.DistillationConfig.criterion"]], "dtype (neural_compressor.config.exportconfig property)": [[201, "neural_compressor.config.ExportConfig.dtype"]], "dynamic_axes (neural_compressor.config.exportconfig property)": [[201, "neural_compressor.config.ExportConfig.dynamic_axes"]], "example_inputs (neural_compressor.config.exportconfig property)": [[201, "neural_compressor.config.ExportConfig.example_inputs"]], "higher_is_better (neural_compressor.config.accuracycriterion property)": [[201, "neural_compressor.config.AccuracyCriterion.higher_is_better"]], "input_names (neural_compressor.config.exportconfig property)": [[201, "neural_compressor.config.ExportConfig.input_names"]], "inputs (neural_compressor.config.benchmarkconfig property)": [[201, "neural_compressor.config.BenchmarkConfig.inputs"]], "inter_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[201, "neural_compressor.config.BenchmarkConfig.inter_num_of_threads"]], "intra_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[201, "neural_compressor.config.BenchmarkConfig.intra_num_of_threads"]], "iteration (neural_compressor.config.benchmarkconfig property)": [[201, "neural_compressor.config.BenchmarkConfig.iteration"]], "max_trials (neural_compressor.config.tuningcriterion property)": [[201, "neural_compressor.config.TuningCriterion.max_trials"]], "neural_compressor.config": [[201, "module-neural_compressor.config"]], "num_of_instance (neural_compressor.config.benchmarkconfig property)": [[201, "neural_compressor.config.BenchmarkConfig.num_of_instance"]], "objective (neural_compressor.config.tuningcriterion property)": [[201, "neural_compressor.config.TuningCriterion.objective"]], "opset_version (neural_compressor.config.exportconfig property)": [[201, "neural_compressor.config.ExportConfig.opset_version"]], "optimizer (neural_compressor.config.distillationconfig property)": [[201, "neural_compressor.config.DistillationConfig.optimizer"]], "output_names (neural_compressor.config.exportconfig property)": [[201, "neural_compressor.config.ExportConfig.output_names"]], "outputs (neural_compressor.config.benchmarkconfig property)": [[201, "neural_compressor.config.BenchmarkConfig.outputs"]], "quant_format (neural_compressor.config.exportconfig property)": [[201, "neural_compressor.config.ExportConfig.quant_format"]], "random_seed (neural_compressor.config.options property)": [[201, "neural_compressor.config.Options.random_seed"]], "relative (neural_compressor.config.accuracycriterion property)": [[201, "neural_compressor.config.AccuracyCriterion.relative"]], "resume_from (neural_compressor.config.options property)": [[201, "neural_compressor.config.Options.resume_from"]], "strategy (neural_compressor.config.tuningcriterion property)": [[201, "neural_compressor.config.TuningCriterion.strategy"]], "strategy_kwargs (neural_compressor.config.tuningcriterion property)": [[201, "neural_compressor.config.TuningCriterion.strategy_kwargs"]], "teacher_model (neural_compressor.config.distillationconfig property)": [[201, "neural_compressor.config.DistillationConfig.teacher_model"]], "tensorboard (neural_compressor.config.options property)": [[201, "neural_compressor.config.Options.tensorboard"]], "timeout (neural_compressor.config.tuningcriterion property)": [[201, "neural_compressor.config.TuningCriterion.timeout"]], "tolerable_loss (neural_compressor.config.accuracycriterion property)": [[201, "neural_compressor.config.AccuracyCriterion.tolerable_loss"]], "tuning_criterion (neural_compressor.config.posttrainingquantconfig property)": [[201, "neural_compressor.config.PostTrainingQuantConfig.tuning_criterion"]], "warmup (neural_compressor.config.benchmarkconfig property)": [[201, "neural_compressor.config.BenchmarkConfig.warmup"]], "weight_compression (neural_compressor.config.weightpruningconfig property)": [[201, "neural_compressor.config.WeightPruningConfig.weight_compression"]], "workspace (neural_compressor.config.options property)": [[201, "neural_compressor.config.Options.workspace"]], "neural_compressor.contrib": [[202, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[203, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[204, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "create_exp() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[204, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.create_exp"]], "get_acc_target() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[204, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.get_acc_target"]], "neural_compressor.contrib.strategy.sigopt": [[204, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[204, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "params_to_tune_configs() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[204, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.params_to_tune_configs"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[204, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[205, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "add_loss_to_tuned_history_and_find_best() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[205, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.add_loss_to_tuned_history_and_find_best"]], "calculate_loss() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[205, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.calculate_loss"]], "neural_compressor.contrib.strategy.tpe": [[205, "module-neural_compressor.contrib.strategy.tpe"]], "object_evaluation() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[205, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.object_evaluation"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[205, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[205, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[206, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[206, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[206, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[206, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[207, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[207, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[208, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[208, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[208, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[208, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[208, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[209, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[209, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[209, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[209, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[210, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[210, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[211, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[211, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[212, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[212, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[212, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[213, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[213, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[214, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[214, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[214, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[214, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[214, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[215, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[215, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[215, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[215, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[215, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[215, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[216, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[216, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[216, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[217, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[217, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[217, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[217, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[217, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[218, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[218, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[218, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[218, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[218, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[218, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[218, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[218, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[219, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[219, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[220, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[220, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[220, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[221, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[221, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[221, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[221, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[221, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[221, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[221, "module-neural_compressor.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.data.datasets)": [[222, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[222, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[222, "neural_compressor.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[222, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[222, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[223, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[223, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[224, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[224, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[224, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[225, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[225, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[226, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[226, "neural_compressor.data.filters.Filter"]], "filter_registry() (in module neural_compressor.data.filters)": [[226, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[226, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[227, "neural_compressor.data.BaseTransform"]], "dataloader (class in neural_compressor.data)": [[227, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[227, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[227, "neural_compressor.data.Datasets"]], "filters (class in neural_compressor.data)": [[227, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[227, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[227, "neural_compressor.data.IterableDataset"]], "postprocess (class in neural_compressor.data)": [[227, "neural_compressor.data.Postprocess"]], "transforms (class in neural_compressor.data)": [[227, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[227, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[227, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[227, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[227, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[227, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[228, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[228, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[229, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[229, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[230, "neural_compressor.data.transforms.BaseTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[230, "neural_compressor.data.transforms.Postprocess"]], "transforms (class in neural_compressor.data.transforms)": [[230, "neural_compressor.data.transforms.TRANSFORMS"]], "neural_compressor.data.transforms": [[230, "module-neural_compressor.data.transforms"]], "register() (neural_compressor.data.transforms.transforms method)": [[230, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[230, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[231, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[231, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[232, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[232, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[232, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[232, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[232, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[232, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[232, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TRANSFORMS"], [233, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[233, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[233, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[233, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[233, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[233, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[233, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[233, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[234, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[234, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[234, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[234, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[234, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[234, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[234, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[234, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[234, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[234, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[234, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[234, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[235, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[235, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[235, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[235, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[235, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[235, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[235, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[235, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[235, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[236, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[236, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[237, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[237, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[237, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[237, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[237, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[238, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[238, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[239, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[239, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[240, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[240, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[240, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[241, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[241, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[242, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[242, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[242, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[243, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[243, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[243, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[243, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[243, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[243, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[243, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[243, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[244, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[244, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[244, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[244, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[245, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[246, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[246, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[246, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[246, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[246, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[247, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[247, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[247, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[247, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[248, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[249, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[249, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[250, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[250, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[250, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[251, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[251, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[252, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[252, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[252, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[252, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[252, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[253, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[253, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[253, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[253, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[253, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[253, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[254, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[254, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[254, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[254, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[254, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[254, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[254, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[254, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[254, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[254, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[255, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[255, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[255, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[255, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[255, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[256, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[256, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[256, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[256, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[256, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[256, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[256, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[256, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[257, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[257, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[258, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[258, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[258, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[259, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[259, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[259, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[259, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[259, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[259, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[259, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[260, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[260, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[260, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[260, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[260, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[261, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[261, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[262, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[262, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[262, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[263, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[263, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[263, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[263, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[263, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[263, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[263, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[263, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[263, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[264, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[264, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[264, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[264, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[265, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[265, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[265, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[265, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[265, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[265, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[265, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[265, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[265, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[265, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[265, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[265, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[266, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[266, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[266, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[266, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[266, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[266, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[266, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[266, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[266, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[266, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[267, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[267, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[267, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[267, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[267, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[268, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[268, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[268, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[268, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[268, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[268, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[268, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[268, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[268, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[268, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[268, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[268, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[268, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [269, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[269, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[269, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[269, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[269, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[269, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[269, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[269, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[270, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[270, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[270, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[270, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[270, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[270, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[270, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[270, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[270, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[270, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[270, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[270, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[270, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[270, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[270, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[270, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[270, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[270, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[270, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[270, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[270, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[271, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[271, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[271, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[271, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[272, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[272, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[272, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[273, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[273, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[274, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[274, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[274, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[274, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[275, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[275, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[275, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[275, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[275, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[275, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[275, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[275, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[275, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[275, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[275, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[275, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[276, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[276, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[276, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[276, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[276, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[276, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[276, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[276, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[276, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[276, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[276, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[276, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[276, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[276, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[276, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[276, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[276, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[276, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[276, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[276, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[276, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[276, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[276, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[276, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[276, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[276, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[276, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[276, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[276, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[276, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[276, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[276, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[276, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[276, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[276, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[276, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[276, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[276, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[276, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[276, "neural_compressor.experimental.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning method)": [[276, "neural_compressor.experimental.Pruning.get_sparsity_ratio"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[276, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[276, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[276, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[276, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[276, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[276, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[276, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[276, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[276, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[276, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[276, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[276, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[276, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[276, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[276, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[276, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[276, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[276, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[276, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[276, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[276, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[276, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[276, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[276, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[276, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[276, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[276, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[276, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[276, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[276, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[276, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[276, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[276, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[276, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[276, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[276, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[276, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[276, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[276, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[276, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[276, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[276, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[276, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[276, "neural_compressor.experimental.Component.train_func"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning method)": [[276, "neural_compressor.experimental.Pruning.update_items_for_all_pruners"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[277, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[277, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[277, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[277, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[277, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[277, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[278, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[278, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[279, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[280, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[280, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[280, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[280, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[280, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[280, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[280, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[280, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[280, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[280, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[280, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[280, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[280, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[280, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[281, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[281, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[281, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[281, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[281, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[282, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[282, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[282, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[282, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[282, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[283, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[283, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[283, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[283, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[283, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[283, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[283, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[283, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[283, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[283, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[283, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[284, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[284, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[284, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[284, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[284, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[284, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[284, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[284, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[284, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[284, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[284, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[284, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[284, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[284, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[284, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[284, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[284, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[284, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[284, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[284, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[284, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[284, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[284, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[284, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[284, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[284, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[284, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[284, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[284, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[284, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[284, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[284, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[284, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[284, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[284, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[284, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[284, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[284, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[284, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[284, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[284, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[284, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[284, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[284, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[284, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[284, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[284, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[284, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[284, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[284, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[284, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[284, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[284, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[284, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[284, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[284, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[284, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[284, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[284, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[284, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[284, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[284, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[284, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[284, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[284, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[284, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[284, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[284, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[284, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[284, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[284, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[284, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[284, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[284, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[284, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[284, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[284, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[284, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[284, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[284, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[284, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[284, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[284, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[284, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[284, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[284, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[285, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[285, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[285, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[285, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[286, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[286, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[286, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[286, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[286, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[286, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[286, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[286, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[286, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[286, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[287, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[287, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[287, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[287, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[287, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[287, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[288, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[288, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[288, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[288, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[288, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[288, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[288, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[288, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[288, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[288, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[289, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "transformerltencoding (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[289, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[289, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[289, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[290, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[290, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[290, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[290, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[290, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[290, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[290, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[290, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[291, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[291, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[291, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[291, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "evaluationinterfacetransformerlt (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "transformerltrunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[292, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[292, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[293, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[294, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[295, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "multiheadattentionsuper (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[296, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[296, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.forward"]], "get_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[296, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.get_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[296, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "reorder_incremental_state() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[296, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.reorder_incremental_state"]], "set_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[296, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.set_incremental_state"]], "compute_bleu() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_bleu"]], "compute_latency() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_latency"]], "compute_macs() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[297, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[297, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "transformerdecoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder"]], "transformerdecoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer"]], "transformerencoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder"]], "transformerencoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer"]], "transformersupernetwork (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerSuperNetwork"]], "extract_features() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.extract_features"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoderlayer method)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.forward"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.max_positions"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.max_positions"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[298, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "output_layer() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.output_layer"]], "reorder_encoder_out() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.reorder_encoder_out"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[298, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.upgrade_state_dict_named"]], "basicnas (class in neural_compressor.experimental.nas)": [[299, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[299, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[299, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[299, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[299, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[299, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[299, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[299, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[299, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[299, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[299, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[299, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[299, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[299, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[299, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[299, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[300, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[300, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[300, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[300, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[300, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[300, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[300, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[300, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[300, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[300, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[300, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[300, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[300, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[300, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[300, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[300, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[301, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[301, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[301, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[301, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[302, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[302, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[302, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[302, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[302, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[302, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[302, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[302, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[302, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[302, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[302, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[302, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[302, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[303, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[303, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[303, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[303, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[303, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[303, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[303, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning.pruning method)": [[303, "neural_compressor.experimental.pruning.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning": [[303, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[303, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[303, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[303, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[303, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[303, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[303, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[303, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[303, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[303, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[303, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[303, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[303, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[303, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[303, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[303, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[303, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning.pruning method)": [[303, "neural_compressor.experimental.pruning.Pruning.update_items_for_all_pruners"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[304, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[304, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[304, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[304, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[305, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[306, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[306, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[307, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[307, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[307, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[307, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[307, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[307, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[307, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[307, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[307, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[308, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[308, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[308, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[308, "neural_compressor.experimental.pruning_v2.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning_v2.pruning method)": [[308, "neural_compressor.experimental.pruning_v2.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning_v2.pruning method)": [[308, "neural_compressor.experimental.pruning_v2.Pruning.generate_hooks"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning_v2.pruning method)": [[308, "neural_compressor.experimental.pruning_v2.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning_v2": [[308, "module-neural_compressor.experimental.pruning_v2"]], "on_after_compute_loss() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[308, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[308, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[308, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[308, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[308, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[308, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[308, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[308, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[308, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[308, "neural_compressor.experimental.pruning_v2.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[308, "neural_compressor.experimental.pruning_v2.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning_v2.pruning method)": [[308, "neural_compressor.experimental.pruning_v2.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning_v2.pruning method)": [[308, "neural_compressor.experimental.pruning_v2.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[308, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning_v2.pruning property)": [[308, "neural_compressor.experimental.pruning_v2.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[308, "neural_compressor.experimental.pruning_v2.Pruning.train_distributed"]], "update_config() (neural_compressor.experimental.pruning_v2.pruning method)": [[308, "neural_compressor.experimental.pruning_v2.Pruning.update_config"]], "neural_compressor.experimental.pytorch_pruner": [[309, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[310, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[311, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[311, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[312, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[312, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[312, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[312, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[312, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[312, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[312, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[313, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[313, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[314, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "prepare() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.prepare"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[314, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[315, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[315, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[315, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[315, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[315, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[315, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[315, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[315, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[315, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[315, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[316, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[316, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[316, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[316, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[316, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[316, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[316, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[316, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[316, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[316, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[316, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[317, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[317, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[317, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[317, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[317, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[317, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[317, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[318, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[318, "neural_compressor.DistillationConfig"]], "posttrainingquantconfig (class in neural_compressor)": [[318, "neural_compressor.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor)": [[318, "neural_compressor.QuantizationAwareTrainingConfig"]], "weightpruningconfig (class in neural_compressor)": [[318, "neural_compressor.WeightPruningConfig"]], "approach (neural_compressor.posttrainingquantconfig property)": [[318, "neural_compressor.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.quantizationawaretrainingconfig property)": [[318, "neural_compressor.QuantizationAwareTrainingConfig.approach"]], "criterion (neural_compressor.distillationconfig property)": [[318, "neural_compressor.DistillationConfig.criterion"]], "dataloader() (neural_compressor.benchmark method)": [[318, "neural_compressor.Benchmark.dataloader"]], "metric() (neural_compressor.benchmark method)": [[318, "neural_compressor.Benchmark.metric"]], "neural_compressor": [[318, "module-neural_compressor"]], "optimizer (neural_compressor.distillationconfig property)": [[318, "neural_compressor.DistillationConfig.optimizer"]], "postprocess() (neural_compressor.benchmark method)": [[318, "neural_compressor.Benchmark.postprocess"]], "set_random_seed() (in module neural_compressor)": [[318, "neural_compressor.set_random_seed"]], "set_tensorboard() (in module neural_compressor)": [[318, "neural_compressor.set_tensorboard"]], "set_workspace() (in module neural_compressor)": [[318, "neural_compressor.set_workspace"]], "teacher_model (neural_compressor.distillationconfig property)": [[318, "neural_compressor.DistillationConfig.teacher_model"]], "tuning_criterion (neural_compressor.posttrainingquantconfig property)": [[318, "neural_compressor.PostTrainingQuantConfig.tuning_criterion"]], "weight_compression (neural_compressor.weightpruningconfig property)": [[318, "neural_compressor.WeightPruningConfig.weight_compression"]], "bleu (class in neural_compressor.metric.bleu)": [[319, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[319, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[319, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[319, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[319, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[319, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[319, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[319, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[319, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[319, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[319, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[319, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[319, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[320, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[320, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[321, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[322, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[322, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[322, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[322, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[322, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[322, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[322, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[322, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[322, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[322, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[322, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[322, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[322, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[322, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[323, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[323, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[323, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[323, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[323, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[324, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[324, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[324, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[324, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[324, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[325, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[325, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[325, "neural_compressor.metric.Metric"]], "hvd (neural_compressor.metric.basemetric property)": [[325, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[325, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[325, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[325, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[325, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[325, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[325, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[325, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[325, "neural_compressor.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[326, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[326, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[326, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[326, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[326, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[326, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[326, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[326, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[326, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[326, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[326, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[326, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[326, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[326, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[326, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[326, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[326, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[326, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[326, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[326, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[326, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[326, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[326, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[326, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[326, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[326, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[326, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[326, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[326, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[326, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[326, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[326, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[326, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[326, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[326, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[326, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[326, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[326, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[326, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[326, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[326, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[326, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[326, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[326, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[326, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[326, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[326, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[326, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[326, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[326, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[326, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[326, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[326, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[326, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[326, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[326, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[326, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[326, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[326, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[326, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[326, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[326, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[326, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[326, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[326, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[326, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[326, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[326, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[326, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[326, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[326, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[326, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[326, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[326, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[326, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[326, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[326, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[326, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[326, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[326, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[326, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[326, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[326, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[326, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[326, "neural_compressor.metric.metric.mIOU.update"]], "fit() (in module neural_compressor.mix_precision)": [[327, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[327, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[328, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[328, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[328, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[328, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[328, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[328, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[328, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[329, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[329, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[329, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[329, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[329, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[329, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[329, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[329, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[330, "neural_compressor.model.keras_model.KerasModel"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[330, "neural_compressor.model.keras_model.KerasModel.framework"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[330, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[330, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[330, "module-neural_compressor.model.keras_model"]], "q_config (neural_compressor.model.keras_model.kerasmodel property)": [[330, "neural_compressor.model.keras_model.KerasModel.q_config"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[330, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[331, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[331, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[331, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[332, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[332, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[332, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[332, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[332, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[333, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[333, "module-neural_compressor.model.nets_factory"]], "register() (neural_compressor.model.nets_factory.tfslimnetsfactory method)": [[333, "neural_compressor.model.nets_factory.TFSlimNetsFactory.register"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[334, "neural_compressor.model.onnx_model.ONNXModel"]], "add_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.add_initializer"]], "add_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.add_initializers"]], "add_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.add_node"]], "add_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.add_nodes"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_children() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.get_children"]], "get_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.get_initializer"]], "get_nodes_chain() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.get_nodes_chain"]], "get_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.get_parent"]], "get_parents() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.get_parents"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.graph"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[334, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.initializer"]], "input() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.input"]], "input_name_to_nodes (neural_compressor.model.onnx_model.onnxmodel property)": [[334, "neural_compressor.model.onnx_model.ONNXModel.input_name_to_nodes"]], "ir_version() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.ir_version"]], "large_size (neural_compressor.model.onnx_model.onnxmodel property)": [[334, "neural_compressor.model.onnx_model.ONNXModel.large_size"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[334, "neural_compressor.model.onnx_model.ONNXModel.model"]], "model_path (neural_compressor.model.onnx_model.onnxmodel property)": [[334, "neural_compressor.model.onnx_model.ONNXModel.model_path"]], "neural_compressor.model.onnx_model": [[334, "module-neural_compressor.model.onnx_model"]], "nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.nodes"]], "opset_import() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.opset_import"]], "output() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.output"]], "output_name_to_node (neural_compressor.model.onnx_model.onnxmodel property)": [[334, "neural_compressor.model.onnx_model.ONNXModel.output_name_to_node"]], "q_config (neural_compressor.model.onnx_model.onnxmodel property)": [[334, "neural_compressor.model.onnx_model.ONNXModel.q_config"]], "remove_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.remove_initializer"]], "remove_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.remove_initializers"]], "remove_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.remove_node"]], "remove_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.remove_nodes"]], "remove_unused_constant() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.remove_unused_constant"]], "replace_input_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.replace_input_of_all_nodes"]], "replace_node_input() (neural_compressor.model.onnx_model.onnxmodel static method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.replace_node_input"]], "replace_node_output() (neural_compressor.model.onnx_model.onnxmodel static method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.replace_node_output"]], "replace_output_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.replace_output_of_all_nodes"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "set_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.set_initializer"]], "topological_sort() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.topological_sort"]], "update() (neural_compressor.model.onnx_model.onnxmodel method)": [[334, "neural_compressor.model.onnx_model.ONNXModel.update"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "build_saved_model() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[335, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.build_saved_model"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.estimator_session"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_all_weight_names() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[335, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_all_weight_names"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.get_model_type"]], "get_weight() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[335, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_weight"]], "graph (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_def"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.graph_def"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.graph_session"]], "input_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_node_names"]], "input_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor"]], "input_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor_names"]], "iter_op (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.iter_op"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "model_type (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model_type"]], "name (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.name"]], "neural_compressor.model.tensorflow_model": [[335, "module-neural_compressor.model.tensorflow_model"]], "output_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_node_names"]], "output_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor"]], "output_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor_names"]], "q_config (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.q_config"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[335, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[335, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[335, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.saved_model_session"]], "sess (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.sess"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.slim_session"]], "update_weights() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[335, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.update_weights"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "workspace_path (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.workspace_path"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[336, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[336, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[336, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[336, "neural_compressor.model.torch_model.PyTorchModel.export"]], "export_to_bf16_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[336, "neural_compressor.model.torch_model.PyTorchModel.export_to_bf16_onnx"]], "export_to_fp32_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[336, "neural_compressor.model.torch_model.PyTorchModel.export_to_fp32_onnx"]], "export_to_int8_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[336, "neural_compressor.model.torch_model.PyTorchModel.export_to_int8_onnx"]], "export_to_jit() (neural_compressor.model.torch_model.pytorchmodel method)": [[336, "neural_compressor.model.torch_model.PyTorchModel.export_to_jit"]], "forward() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.forward"]], "fp32_model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.fp32_model"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "generate_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.generate_forward_pre_hook"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[336, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "load_quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[336, "neural_compressor.model.torch_model.PyTorchModel.load_quantized_state_dict"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[336, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[336, "neural_compressor.model.torch_model.PyTorchModel.quantized_state_dict"]], "register_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.register_forward_pre_hook"]], "remove_hooks() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.remove_hooks"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[336, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[336, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "workspace_path (neural_compressor.model.torch_model.ipexmodel property)": [[336, "neural_compressor.model.torch_model.IPEXModel.workspace_path"]], "workspace_path (neural_compressor.model.torch_model.pytorchmodel property)": [[336, "neural_compressor.model.torch_model.PyTorchModel.workspace_path"]], "accuracy (class in neural_compressor.objective)": [[337, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[337, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[337, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[337, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[337, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[337, "neural_compressor.objective.Performance"]], "accuracy_meets() (neural_compressor.objective.multiobjective method)": [[337, "neural_compressor.objective.MultiObjective.accuracy_meets"]], "accuracy_target (neural_compressor.objective.multiobjective property)": [[337, "neural_compressor.objective.MultiObjective.accuracy_target"]], "baseline (neural_compressor.objective.multiobjective property)": [[337, "neural_compressor.objective.MultiObjective.baseline"]], "best_result() (neural_compressor.objective.multiobjective method)": [[337, "neural_compressor.objective.MultiObjective.best_result"]], "compare() (neural_compressor.objective.multiobjective method)": [[337, "neural_compressor.objective.MultiObjective.compare"]], "end() (neural_compressor.objective.accuracy method)": [[337, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[337, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[337, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.multiobjective method)": [[337, "neural_compressor.objective.MultiObjective.end"]], "end() (neural_compressor.objective.objective method)": [[337, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[337, "neural_compressor.objective.Performance.end"]], "evaluate() (neural_compressor.objective.multiobjective method)": [[337, "neural_compressor.objective.MultiObjective.evaluate"]], "model (neural_compressor.objective.objective property)": [[337, "neural_compressor.objective.Objective.model"]], "neural_compressor.objective": [[337, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[337, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[337, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.multiobjective method)": [[337, "neural_compressor.objective.MultiObjective.reset"]], "reset() (neural_compressor.objective.objective method)": [[337, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.multiobjective method)": [[337, "neural_compressor.objective.MultiObjective.result"]], "result() (neural_compressor.objective.objective method)": [[337, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[337, "neural_compressor.objective.Objective.result_list"]], "set_model() (neural_compressor.objective.multiobjective method)": [[337, "neural_compressor.objective.MultiObjective.set_model"]], "start() (neural_compressor.objective.accuracy method)": [[337, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[337, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[337, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.multiobjective method)": [[337, "neural_compressor.objective.MultiObjective.start"]], "start() (neural_compressor.objective.objective method)": [[337, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[337, "neural_compressor.objective.Performance.start"]], "gradientcriterion (class in neural_compressor.pruner.criteria)": [[338, "neural_compressor.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.pruner.criteria)": [[338, "neural_compressor.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.pruner.criteria)": [[338, "neural_compressor.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.pruner.criteria)": [[338, "neural_compressor.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.pruner.criteria)": [[338, "neural_compressor.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.pruner.criteria)": [[338, "neural_compressor.pruner.criteria.get_criterion"]], "neural_compressor.pruner.criteria": [[338, "module-neural_compressor.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.gradientcriterion method)": [[338, "neural_compressor.pruner.criteria.GradientCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[338, "neural_compressor.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipcriterion method)": [[338, "neural_compressor.pruner.criteria.SnipCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipmomentumcriterion method)": [[338, "neural_compressor.pruner.criteria.SnipMomentumCriterion.on_after_optimizer_step"]], "on_step_begin() (neural_compressor.pruner.criteria.magnitudecriterion method)": [[338, "neural_compressor.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.criteria.pruningcriterion method)": [[338, "neural_compressor.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.pruner.criteria)": [[338, "neural_compressor.pruner.criteria.register_criterion"]], "scores (neural_compressor.pruner.criteria.gradientcriterion attribute)": [[338, "neural_compressor.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.pruner.criteria.magnitudecriterion attribute)": [[338, "neural_compressor.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.pruner.criteria.pruningcriterion attribute)": [[338, "neural_compressor.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipcriterion attribute)": [[338, "neural_compressor.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipmomentumcriterion attribute)": [[338, "neural_compressor.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.pruner": [[339, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[340, "module-neural_compressor.pruner.logger"]], "basepattern (class in neural_compressor.pruner.patterns)": [[341, "neural_compressor.pruner.patterns.BasePattern"]], "m (neural_compressor.pruner.patterns.patternninm attribute)": [[341, "neural_compressor.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.pruner.patterns.patternninm attribute)": [[341, "neural_compressor.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.pruner.patterns)": [[341, "neural_compressor.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.pruner.patterns)": [[341, "neural_compressor.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[341, "neural_compressor.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.pruner.patterns.patternnxm attribute)": [[341, "neural_compressor.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.pruner.patterns.basepattern method)": [[341, "neural_compressor.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternninm method)": [[341, "neural_compressor.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.pruner.patterns.basepattern attribute)": [[341, "neural_compressor.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.pruner.patterns.basepattern method)": [[341, "neural_compressor.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.pruner.patterns.patternninm method)": [[341, "neural_compressor.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[341, "neural_compressor.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.pruner.patterns.basepattern method)": [[341, "neural_compressor.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.pruner.patterns.basepattern method)": [[341, "neural_compressor.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternninm method)": [[341, "neural_compressor.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.pruner.patterns.basepattern method)": [[341, "neural_compressor.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.pruner.patterns)": [[341, "neural_compressor.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.basepattern method)": [[341, "neural_compressor.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternninm method)": [[341, "neural_compressor.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.basepattern method)": [[341, "neural_compressor.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[341, "neural_compressor.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[341, "neural_compressor.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[341, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternninm method)": [[341, "neural_compressor.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.pruner.patterns.basepattern method)": [[341, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[341, "neural_compressor.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.pruner.patterns.basepattern attribute)": [[341, "neural_compressor.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[341, "neural_compressor.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[341, "neural_compressor.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[341, "neural_compressor.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.patterns.basepattern attribute)": [[341, "neural_compressor.pruner.patterns.BasePattern.modules"]], "neural_compressor.pruner.patterns": [[341, "module-neural_compressor.pruner.patterns"]], "pattern (neural_compressor.pruner.patterns.basepattern attribute)": [[341, "neural_compressor.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.pruner.patterns.patternninm method)": [[341, "neural_compressor.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.pruner.patterns.basepattern method)": [[341, "neural_compressor.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.pruner.patterns)": [[341, "neural_compressor.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternninm method)": [[341, "neural_compressor.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternninm method)": [[341, "neural_compressor.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.pruner.patterns.basepattern attribute)": [[341, "neural_compressor.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[341, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.pruner.patterns.basepattern method)": [[341, "neural_compressor.pruner.patterns.BasePattern.update_residual_cnt"]], "gradientsensitivitypruner (class in neural_compressor.pruner.pruner_legacy.gradient_sensitivity)": [[342, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[342, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[342, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[342, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[342, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[342, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[342, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_end"]], "parse_weight_name() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[342, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.parse_weight_name"]], "prune_by_importance() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[342, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_by_importance"]], "prune_weight() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[342, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_weight"]], "update_importance_abs() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[342, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_abs"]], "update_importance_elementwise() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[342, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_elementwise"]], "update_importance_weighted() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[342, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_weighted"]], "grouplassopruner (class in neural_compressor.pruner.pruner_legacy.group_lasso)": [[343, "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[343, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "on_before_optimizer_step() (neural_compressor.pruner.pruner_legacy.group_lasso.grouplassopruner method)": [[343, "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner.on_before_optimizer_step"]], "neural_compressor.pruner.pruner_legacy": [[344, "module-neural_compressor.pruner.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.pruner.pruner_legacy.magnitude)": [[345, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[345, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[345, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[345, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[345, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[345, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[345, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_end"]], "patternlockpruner (class in neural_compressor.pruner.pruner_legacy.pattern_lock)": [[346, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[346, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_step_end"]], "update_weights() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[346, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.update_weights"]], "pruner (class in neural_compressor.pruner.pruner_legacy.pruner)": [[347, "neural_compressor.pruner.pruner_legacy.pruner.Pruner"]], "neural_compressor.pruner.pruner_legacy.pruner": [[347, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "on_before_optimizer_step() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[347, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[347, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[347, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[347, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[347, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[347, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[347, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_train_end"]], "pruner_registry() (in module neural_compressor.pruner.pruner_legacy.pruner)": [[347, "neural_compressor.pruner.pruner_legacy.pruner.pruner_registry"]], "update_sparsity() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[347, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.update_sparsity"]], "basepruner (class in neural_compressor.pruner.pruners)": [[348, "neural_compressor.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.pruner.pruners)": [[348, "neural_compressor.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.pruner.pruners)": [[348, "neural_compressor.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.pruner.pruners)": [[348, "neural_compressor.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[348, "neural_compressor.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.pruner.pruners.progressivepruner method)": [[348, "neural_compressor.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.pruner.pruners.basepruner attribute)": [[348, "neural_compressor.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.pruner.pruners.basicpruner attribute)": [[348, "neural_compressor.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[348, "neural_compressor.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.pruner.pruners.basepruner attribute)": [[348, "neural_compressor.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.pruner.pruners)": [[348, "neural_compressor.pruner.pruners.get_pruner"]], "global_step (neural_compressor.pruner.pruners.basepruner attribute)": [[348, "neural_compressor.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.pruner.pruners.basepruner attribute)": [[348, "neural_compressor.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.pruners.basepruner attribute)": [[348, "neural_compressor.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.pruners.basepruner attribute)": [[348, "neural_compressor.pruner.pruners.BasePruner.modules"]], "neural_compressor.pruner.pruners": [[348, "module-neural_compressor.pruner.pruners"]], "on_after_eval() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[348, "neural_compressor.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.patternlockpruner method)": [[348, "neural_compressor.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[348, "neural_compressor.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[348, "neural_compressor.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[348, "neural_compressor.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.pruners.progressivepruner method)": [[348, "neural_compressor.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.on_train_end"]], "parse_valid_pruner_types() (in module neural_compressor.pruner.pruners)": [[348, "neural_compressor.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.pruner.pruners.basepruner attribute)": [[348, "neural_compressor.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.pruner.pruners.basicpruner attribute)": [[348, "neural_compressor.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.pruner.pruners.progressivepruner method)": [[348, "neural_compressor.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.pruner.pruners.basepruner attribute)": [[348, "neural_compressor.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.pruner.pruners.basicpruner attribute)": [[348, "neural_compressor.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.pruner.pruners)": [[348, "neural_compressor.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.pruner.pruners.basepruner attribute)": [[348, "neural_compressor.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.pruner.pruners.basicpruner attribute)": [[348, "neural_compressor.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.pruner.pruners.basepruner attribute)": [[348, "neural_compressor.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.pruner.pruners.basicpruner method)": [[348, "neural_compressor.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.pruner.pruners.basepruner attribute)": [[348, "neural_compressor.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[348, "neural_compressor.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.pruner.pruners.basepruner method)": [[348, "neural_compressor.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.basicpruner method)": [[348, "neural_compressor.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.patternlockpruner method)": [[348, "neural_compressor.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.pruner.pruners.progressivepruner method)": [[348, "neural_compressor.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "pruning (class in neural_compressor.pruner.pruning)": [[349, "neural_compressor.pruner.pruning.Pruning"]], "config_file_path (neural_compressor.pruner.pruning.pruning attribute)": [[349, "neural_compressor.pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.pruner.pruning.pruning method)": [[349, "neural_compressor.pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.pruner.pruning.pruning attribute)": [[349, "neural_compressor.pruner.pruning.Pruning.model"]], "model (neural_compressor.pruner.pruning.pruning property)": [[349, "id0"]], "neural_compressor.pruner.pruning": [[349, "module-neural_compressor.pruner.pruning"]], "on_after_eval() (neural_compressor.pruner.pruning.pruning method)": [[349, "neural_compressor.pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[349, "neural_compressor.pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruning.pruning method)": [[349, "neural_compressor.pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[349, "neural_compressor.pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruning.pruning method)": [[349, "neural_compressor.pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruning.pruning method)": [[349, "neural_compressor.pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruning.pruning method)": [[349, "neural_compressor.pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruning.pruning method)": [[349, "neural_compressor.pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruning.pruning method)": [[349, "neural_compressor.pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruning.pruning method)": [[349, "neural_compressor.pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.pruner.pruning.pruning attribute)": [[349, "neural_compressor.pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.pruner.pruning.pruning attribute)": [[349, "neural_compressor.pruner.pruning.Pruning.pruners"]], "update_config() (neural_compressor.pruner.pruning.pruning method)": [[349, "neural_compressor.pruner.pruning.Pruning.update_config"]], "basereg (class in neural_compressor.pruner.regs)": [[350, "neural_compressor.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.pruner.regs)": [[350, "neural_compressor.pruner.regs.GroupLasso"]], "alpha (neural_compressor.pruner.regs.grouplasso attribute)": [[350, "neural_compressor.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.pruner.regs)": [[350, "neural_compressor.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.pruner.regs)": [[350, "neural_compressor.pruner.regs.get_reg_type"]], "neural_compressor.pruner.regs": [[350, "module-neural_compressor.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[350, "neural_compressor.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[350, "neural_compressor.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[350, "neural_compressor.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[350, "neural_compressor.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.pruner.regs.grouplasso attribute)": [[350, "neural_compressor.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.pruner.regs)": [[350, "neural_compressor.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.pruner.schedulers)": [[351, "neural_compressor.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.pruner.schedulers)": [[351, "neural_compressor.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.pruner.schedulers)": [[351, "neural_compressor.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.pruner.schedulers.pruningscheduler attribute)": [[351, "neural_compressor.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.pruner.schedulers)": [[351, "neural_compressor.pruner.schedulers.get_scheduler"]], "neural_compressor.pruner.schedulers": [[351, "module-neural_compressor.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.pruner.schedulers)": [[351, "neural_compressor.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.iterativescheduler method)": [[351, "neural_compressor.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.oneshotscheduler method)": [[351, "neural_compressor.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.pruningscheduler method)": [[351, "neural_compressor.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "check_config() (in module neural_compressor.pruner.utils)": [[352, "neural_compressor.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.pruner.utils)": [[352, "neural_compressor.pruner.utils.check_key_validity"]], "neural_compressor.pruner.utils": [[352, "module-neural_compressor.pruner.utils"]], "parse_to_prune() (in module neural_compressor.pruner.utils)": [[352, "neural_compressor.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.pruner.utils)": [[352, "neural_compressor.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.pruner.utils)": [[352, "neural_compressor.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.pruner.utils)": [[352, "neural_compressor.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.pruner.utils)": [[352, "neural_compressor.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.pruner.utils)": [[352, "neural_compressor.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.pruner.utils)": [[352, "neural_compressor.pruner.utils.update_params"]], "fit() (in module neural_compressor.quantization)": [[353, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[353, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[354, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[354, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[354, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[354, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[355, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[355, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[355, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[356, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[356, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[356, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[356, "neural_compressor.strategy.bayesian.acq_max"]], "array_to_params() (neural_compressor.strategy.bayesian.targetspace method)": [[356, "neural_compressor.strategy.bayesian.TargetSpace.array_to_params"]], "bounds (neural_compressor.strategy.bayesian.targetspace property)": [[356, "neural_compressor.strategy.bayesian.TargetSpace.bounds"]], "dim (neural_compressor.strategy.bayesian.targetspace property)": [[356, "neural_compressor.strategy.bayesian.TargetSpace.dim"]], "empty (neural_compressor.strategy.bayesian.targetspace property)": [[356, "neural_compressor.strategy.bayesian.TargetSpace.empty"]], "gen_next_params() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[356, "neural_compressor.strategy.bayesian.BayesianOptimization.gen_next_params"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[356, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "keys (neural_compressor.strategy.bayesian.targetspace property)": [[356, "neural_compressor.strategy.bayesian.TargetSpace.keys"]], "max (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[356, "neural_compressor.strategy.bayesian.BayesianOptimization.max"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[356, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[356, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[356, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "params (neural_compressor.strategy.bayesian.targetspace property)": [[356, "neural_compressor.strategy.bayesian.TargetSpace.params"]], "params_to_array() (neural_compressor.strategy.bayesian.targetspace method)": [[356, "neural_compressor.strategy.bayesian.TargetSpace.params_to_array"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[356, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[356, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[356, "neural_compressor.strategy.bayesian.BayesianOptimization.res"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[356, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "space (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[356, "neural_compressor.strategy.bayesian.BayesianOptimization.space"]], "suggest() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[356, "neural_compressor.strategy.bayesian.BayesianOptimization.suggest"]], "target (neural_compressor.strategy.bayesian.targetspace property)": [[356, "neural_compressor.strategy.bayesian.TargetSpace.target"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[357, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[357, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[357, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[357, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[357, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[358, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[358, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[358, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[359, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[359, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[359, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[360, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[361, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[361, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "neural_compressor.strategy.mse": [[361, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[361, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[362, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[362, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[362, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[363, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[363, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[363, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[364, "neural_compressor.strategy.strategy.TuneStrategy"]], "deploy_config() (neural_compressor.strategy.strategy.tunestrategy method)": [[364, "neural_compressor.strategy.strategy.TuneStrategy.deploy_config"]], "evaluation_result (neural_compressor.strategy.strategy.tunestrategy property)": [[364, "neural_compressor.strategy.strategy.TuneStrategy.evaluation_result"]], "initial_best_acc() (neural_compressor.strategy.strategy.tunestrategy method)": [[364, "neural_compressor.strategy.strategy.TuneStrategy.initial_best_acc"]], "initial_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[364, "neural_compressor.strategy.strategy.TuneStrategy.initial_tuning_cfg"]], "neural_compressor.strategy.strategy": [[364, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[364, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "set_q_func() (neural_compressor.strategy.strategy.tunestrategy method)": [[364, "neural_compressor.strategy.strategy.TuneStrategy.set_q_func"]], "set_tuning_space() (neural_compressor.strategy.strategy.tunestrategy method)": [[364, "neural_compressor.strategy.strategy.TuneStrategy.set_tuning_space"]], "setup_resume() (neural_compressor.strategy.strategy.tunestrategy method)": [[364, "neural_compressor.strategy.strategy.TuneStrategy.setup_resume"]], "show_baseline_info() (neural_compressor.strategy.strategy.tunestrategy method)": [[364, "neural_compressor.strategy.strategy.TuneStrategy.show_baseline_info"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[364, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[364, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[364, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "update_best_op_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[364, "neural_compressor.strategy.strategy.TuneStrategy.update_best_op_tuning_cfg"]], "optuningconfig (class in neural_compressor.strategy.utils)": [[365, "neural_compressor.strategy.utils.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.optuningconfig class method)": [[365, "neural_compressor.strategy.utils.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.optuningconfig method)": [[365, "neural_compressor.strategy.utils.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils": [[365, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[366, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[367, "module-neural_compressor.strategy.utils.tuning_space"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[368, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig class method)": [[368, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig method)": [[368, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[368, "module-neural_compressor.strategy.utils.tuning_structs"]], "compressionmanager (class in neural_compressor.training)": [[369, "neural_compressor.training.CompressionManager"]], "compressionmanager.callbacks (class in neural_compressor.training)": [[369, "neural_compressor.training.CompressionManager.CallBacks"]], "export() (neural_compressor.training.compressionmanager method)": [[369, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[369, "module-neural_compressor.training"]], "on_after_compute_loss() (neural_compressor.training.compressionmanager.callbacks method)": [[369, "neural_compressor.training.CompressionManager.CallBacks.on_after_compute_loss"]], "on_after_optimizer_step() (neural_compressor.training.compressionmanager.callbacks method)": [[369, "neural_compressor.training.CompressionManager.CallBacks.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.training.compressionmanager.callbacks method)": [[369, "neural_compressor.training.CompressionManager.CallBacks.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[369, "neural_compressor.training.CompressionManager.CallBacks.on_epoch_begin"]], "on_epoch_end() (neural_compressor.training.compressionmanager.callbacks method)": [[369, "neural_compressor.training.CompressionManager.CallBacks.on_epoch_end"]], "on_step_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[369, "neural_compressor.training.CompressionManager.CallBacks.on_step_begin"]], "on_step_end() (neural_compressor.training.compressionmanager.callbacks method)": [[369, "neural_compressor.training.CompressionManager.CallBacks.on_step_end"]], "on_train_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[369, "neural_compressor.training.CompressionManager.CallBacks.on_train_begin"]], "on_train_end() (neural_compressor.training.compressionmanager.callbacks method)": [[369, "neural_compressor.training.CompressionManager.CallBacks.on_train_end"]], "prepare_compression() (in module neural_compressor.training)": [[369, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[369, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[370, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[370, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[370, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[371, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[372, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[372, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[372, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[372, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[372, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[372, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[372, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[372, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[372, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[372, "module-neural_compressor.utils.create_obj_from_config"]], "layerhistogramcollector (class in neural_compressor.utils)": [[373, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[373, "neural_compressor.utils.LayerHistogramCollector.collect"]], "debug() (in module neural_compressor.utils)": [[373, "neural_compressor.utils.debug"]], "error() (in module neural_compressor.utils)": [[373, "neural_compressor.utils.error"]], "fatal() (in module neural_compressor.utils)": [[373, "neural_compressor.utils.fatal"]], "info() (in module neural_compressor.utils)": [[373, "neural_compressor.utils.info"]], "log() (in module neural_compressor.utils)": [[373, "neural_compressor.utils.log"]], "neural_compressor.utils": [[373, "module-neural_compressor.utils"]], "warn() (in module neural_compressor.utils)": [[373, "neural_compressor.utils.warn"]], "warning() (in module neural_compressor.utils)": [[373, "neural_compressor.utils.warning"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[374, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[374, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[374, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[374, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[374, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[375, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "from_pretrained() (neural_compressor.utils.load_huggingface.optimizedmodel class method)": [[375, "neural_compressor.utils.load_huggingface.OptimizedModel.from_pretrained"]], "neural_compressor.utils.load_huggingface": [[375, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[375, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[376, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[376, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[376, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[376, "neural_compressor.utils.logger.fatal"]], "get_logger() (neural_compressor.utils.logger.logger method)": [[376, "neural_compressor.utils.logger.Logger.get_logger"]], "info() (in module neural_compressor.utils.logger)": [[376, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[376, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[376, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[376, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[376, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[377, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[377, "neural_compressor.utils.options.onnxrt"]], "load() (in module neural_compressor.utils.pytorch)": [[378, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[378, "module-neural_compressor.utils.pytorch"]], "cpuinfo (class in neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.Statistics"]], "bf16 (neural_compressor.utils.utility.cpuinfo property)": [[379, "neural_compressor.utils.utility.CpuInfo.bf16"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.compute_sparsity"]], "cores_per_socket (neural_compressor.utils.utility.cpuinfo property)": [[379, "neural_compressor.utils.utility.CpuInfo.cores_per_socket"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (neural_compressor.utils.utility.cpuinfo method)": [[379, "neural_compressor.utils.utility.CpuInfo.get_number_of_sockets"]], "get_size() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[379, "module-neural_compressor.utils.utility"]], "print_stat() (neural_compressor.utils.utility.statistics method)": [[379, "neural_compressor.utils.utility.Statistics.print_stat"]], "recover() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.set_workspace"]], "singleton() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[379, "neural_compressor.utils.utility.version1_lte_version2"]], "vnni (neural_compressor.utils.utility.cpuinfo property)": [[379, "neural_compressor.utils.utility.CpuInfo.vnni"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[380, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[380, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[380, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[380, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[380, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[380, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[380, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[380, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[381, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[381, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[381, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[381, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[382, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[382, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[382, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[382, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[382, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[382, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[382, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[383, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[383, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[384, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[384, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[384, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[384, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[384, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[384, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[385, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[385, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[385, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[385, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[385, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[385, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[386, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[386, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[386, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[386, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[386, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[387, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[388, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[388, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[388, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[388, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[388, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[389, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[389, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[389, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[390, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[390, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[390, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_evaluation_config"]], "generate_pruning_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[390, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_pruning_config"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[390, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[391, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[391, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[391, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[391, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[391, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[391, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[392, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[392, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[392, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[392, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[392, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[392, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[392, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[392, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[392, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[392, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[392, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[392, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[393, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[393, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[394, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[394, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[394, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[395, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[396, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[396, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[396, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[396, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[396, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[396, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[396, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[396, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[396, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[396, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[396, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[396, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[396, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[396, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[397, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "generate_tree() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[397, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.generate_tree"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[397, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "parse() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[397, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse"]], "parse_entry() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[397, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse_entry"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[398, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[398, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[398, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[398, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[398, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[398, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[399, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[400, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[400, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[401, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[401, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[401, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[402, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[402, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[403, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[403, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[403, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[404, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[404, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[404, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[404, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[404, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[405, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[405, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[406, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[406, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[406, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[406, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[407, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[408, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[408, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[408, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[408, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[408, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[408, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[409, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[409, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[410, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_pruning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_pruning_details"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[410, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[411, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[411, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[411, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[411, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[411, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[411, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[411, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[411, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[411, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[411, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[412, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[412, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[412, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[412, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[413, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[413, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[414, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[414, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[414, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[414, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[414, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[414, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[414, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[415, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[415, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[415, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[415, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[415, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[415, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[415, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[415, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[416, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[416, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[416, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.build_info"]], "delete_pruning_details() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[416, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.delete_pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[416, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[416, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.update"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[417, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[417, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[417, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[417, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[417, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[417, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[417, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[418, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[418, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[418, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[418, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[418, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[418, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[419, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[419, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[419, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[419, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[420, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[421, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[421, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[422, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[422, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[422, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[422, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[422, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[422, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[423, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[423, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[423, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[424, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[424, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[424, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[425, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[425, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[425, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_tuning_details"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_pruning_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.load_pruning_details_config"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[426, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[426, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[427, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[427, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[427, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_tuning_details"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_pruning_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.load_pruning_details_config"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[428, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[428, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[429, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[429, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[430, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[430, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[430, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[430, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[430, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[430, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[430, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[430, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[430, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[431, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[431, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[431, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[431, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[431, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[431, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[432, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[432, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[433, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[433, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[433, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[433, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[434, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[434, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[434, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[434, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[434, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[434, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[434, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[434, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[434, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[435, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[435, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[435, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[436, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[437, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[438, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[438, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[438, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[439, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[439, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[439, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[439, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[439, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[439, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[440, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[440, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[440, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[441, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[442, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[442, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[442, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[443, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[443, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[444, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[445, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[445, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[446, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[446, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[446, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[447, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[447, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[447, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[447, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[448, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[448, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[448, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[448, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[448, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[448, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[448, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[448, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[448, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[449, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[449, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[449, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[449, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[450, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[451, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[451, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[451, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[452, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[453, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[453, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[453, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[454, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[454, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[454, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[455, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[456, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[457, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[458, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[459, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[460, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[460, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[461, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[461, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[462, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[463, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[463, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[463, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[463, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[463, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[463, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[463, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[463, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[463, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[463, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[463, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[463, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[463, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[463, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[463, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "supports_pruning (neural_compressor.ux.components.model.model.model property)": [[463, "neural_compressor.ux.components.model.model.Model.supports_pruning"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[464, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[464, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[465, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[466, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[466, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[466, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[466, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[466, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[466, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[466, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[466, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[466, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[466, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[466, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[466, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[467, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[468, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[468, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[468, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[468, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[468, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[469, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[469, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[469, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[469, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[469, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[469, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[469, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[470, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[470, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[470, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[471, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[471, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[471, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[471, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[472, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[473, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[473, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[473, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[473, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[473, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[474, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[474, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[474, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[474, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[474, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[474, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[475, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[475, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[475, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[475, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[475, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[475, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[475, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[475, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[475, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[475, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "supports_pruning (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[475, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.supports_pruning"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[476, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[476, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[476, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[477, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[477, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[478, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[478, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[479, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[479, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[480, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[480, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[480, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[480, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[480, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[480, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[480, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[480, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[480, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[481, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[482, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[482, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[482, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[482, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[482, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[482, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[482, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[483, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[484, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[484, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[484, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[484, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[484, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[484, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[484, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[484, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[485, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[485, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[485, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[485, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[485, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[485, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[485, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[486, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[486, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[486, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[487, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[487, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[487, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[487, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[487, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[487, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[487, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[488, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[489, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[489, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[489, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[489, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[489, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[490, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[490, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[491, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[492, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[492, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[492, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[492, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[492, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[492, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[492, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[493, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[493, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[493, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[493, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[493, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[494, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[495, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[495, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[496, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[496, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[496, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[496, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[496, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[496, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[496, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[496, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[496, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[496, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[496, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[496, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[496, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[496, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.pruning": [[497, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[498, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[498, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[498, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[499, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "configuration_data (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[499, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[499, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[499, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.generate_config"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[499, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "optimization_script (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[499, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[499, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.parameters"]], "neural_compressor.ux.components.optimization.tune": [[500, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[501, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[501, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[501, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[501, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[502, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[502, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[502, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[502, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[502, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[502, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[502, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[502, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[502, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[503, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[503, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[503, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[503, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[503, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[503, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[503, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[503, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[503, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[504, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[504, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[504, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[505, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[505, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[505, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[506, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[507, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[507, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[507, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[508, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[508, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[508, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[509, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[509, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[509, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[509, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[509, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[509, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[509, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[509, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[509, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[510, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[510, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[510, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[511, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[512, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[512, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[512, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[512, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[512, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[512, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[512, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[512, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[513, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[513, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[514, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[514, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[514, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[515, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[516, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[516, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[516, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[516, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[516, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[516, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[516, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[516, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[517, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[517, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[517, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[517, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[517, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[518, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[518, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[518, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[518, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[518, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[519, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[519, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[519, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[519, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[519, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[519, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[519, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[519, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[519, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[519, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[519, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[520, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[520, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[520, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[520, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[521, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[521, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[521, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[522, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[522, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[522, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[522, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[522, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[522, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[522, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[522, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[522, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[522, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[522, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[523, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[524, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[524, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[524, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[524, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[525, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[525, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[526, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[526, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[526, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[526, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[526, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[526, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[526, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[526, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[526, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[526, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[526, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[526, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[526, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[526, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[526, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[526, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[526, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[526, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[526, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[526, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[526, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[526, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[527, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[527, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[527, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[527, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[527, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[527, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[527, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[527, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[527, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[527, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[528, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[528, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[528, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[528, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[528, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[529, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[529, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[530, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[530, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[531, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[532, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[532, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[532, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[532, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[532, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[532, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[532, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[532, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[532, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[532, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[532, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[532, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[532, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[532, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[533, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[533, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[533, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[533, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[533, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[534, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[534, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[535, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[535, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[535, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[535, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[536, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[536, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[536, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[536, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[536, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[536, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[536, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[536, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[536, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[536, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[536, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[536, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[537, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[537, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[537, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[537, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[537, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[537, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[537, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "get_label_shift_value() (neural_compressor.ux.utils.workload.evaluation.postprocessschema static method)": [[537, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema.get_label_shift_value"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[537, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[537, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[537, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[537, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[537, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[538, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[538, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[538, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[539, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[540, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[540, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[540, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[541, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[541, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[541, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[541, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[541, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "initialize_pruners() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[542, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.initialize_pruners"]], "neural_compressor.ux.utils.workload.pruning": [[542, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[542, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[542, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "serialize() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach method)": [[542, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize"]], "serialize_pruner() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[542, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize_pruner"]], "set_postprocess_transforms() (neural_compressor.ux.utils.workload.pruning.train method)": [[542, "neural_compressor.ux.utils.workload.pruning.Train.set_postprocess_transforms"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[543, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[543, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[543, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[543, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[543, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[543, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[544, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[544, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[544, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[544, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[544, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[544, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[544, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[544, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[544, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[544, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[544, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[544, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[544, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[544, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[544, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[545, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[545, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[545, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[546, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[546, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[546, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[546, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[546, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[546, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[546, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[546, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[546, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[546, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[546, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[546, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[546, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[547, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[547, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[547, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[547, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[547, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[547, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[547, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[547, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[547, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[547, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[547, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[547, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[547, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[548, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[548, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[549, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[550, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[550, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[550, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[550, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[550, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[550, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[550, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[550, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[550, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[550, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[551, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[551, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[551, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[551, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[551, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[551, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[551, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[551, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[551, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[551, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[551, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[551, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[551, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[552, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[552, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[553, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[553, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[553, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[553, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[553, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[553, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[554, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[555, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[555, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[555, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[556, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[556, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[557, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[557, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[557, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[558, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[558, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[558, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[559, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[559, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[559, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[559, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[559, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[559, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[560, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[560, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[560, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[560, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[560, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[561, "module-neural_compressor.version"]]}})