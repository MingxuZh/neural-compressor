Search.setIndex({"docnames": ["CODE_OF_CONDUCT", "FX", "NAS", "PTQ", "QAT", "SECURITY", "Welcome", "adaptor", "api-documentation/adaptor", "api-documentation/apis", "api-documentation/common", "api-documentation/common/benchmark", "api-documentation/common/bleu", "api-documentation/common/criterion", "api-documentation/common/data", "api-documentation/common/data/dataloader", "api-documentation/common/data/datasets", "api-documentation/common/data/transforms", "api-documentation/common/metric", "api-documentation/common/model", "api-documentation/common/optimizer", "api-documentation/component", "api-documentation/component/Distillation", "api-documentation/component/MixedPrecision", "api-documentation/component/Nas", "api-documentation/component/Pruning", "api-documentation/component/Quantization", "api-documentation/component/Scheduler", "api-documentation/pythonic", "api-documentation/strategy", "api-documentation/strategy/strategy", "autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruner/criteria/index", "autoapi/neural_compressor/pruner/index", "autoapi/neural_compressor/pruner/logger/index", "autoapi/neural_compressor/pruner/patterns/index", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/pruner/pruner_legacy/index", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index", "autoapi/neural_compressor/pruner/pruners/index", "autoapi/neural_compressor/pruner/pruning/index", "autoapi/neural_compressor/pruner/regs/index", "autoapi/neural_compressor/pruner/schedulers/index", "autoapi/neural_compressor/pruner/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "backend_quant", "bench", "benchmark", "contributions", "dataloader", "dataset", "design", "distillation", "distillation_quantization", "distributed", "dynamic_quantization", "examples_readme", "export", "faq", "framework_yaml", "incompatible_changes", "index", "infrastructure", "installation_guide", "legal_information", "metric", "mixed_precision", "model", "objective", "orchestration", "platform_configuration", "pruning", "pruning_details", "publication_list", "pythonic_style", "quantization", "quantization_mixed_precision", "releases_info", "sigopt_strategy", "tensorboard", "transform", "tuning_strategies", "user_yaml", "validated_model_list"], "filenames": ["CODE_OF_CONDUCT.md", "FX.md", "NAS.md", "PTQ.md", "QAT.md", "SECURITY.md", "Welcome.md", "adaptor.md", "api-documentation/adaptor.rst", "api-documentation/apis.rst", "api-documentation/common.rst", "api-documentation/common/benchmark.rst", "api-documentation/common/bleu.rst", "api-documentation/common/criterion.rst", "api-documentation/common/data.rst", "api-documentation/common/data/dataloader.rst", "api-documentation/common/data/datasets.rst", "api-documentation/common/data/transforms.rst", "api-documentation/common/metric.rst", "api-documentation/common/model.rst", "api-documentation/common/optimizer.rst", "api-documentation/component.rst", "api-documentation/component/Distillation.rst", "api-documentation/component/MixedPrecision.rst", "api-documentation/component/Nas.rst", "api-documentation/component/Pruning.rst", "api-documentation/component/Quantization.rst", "api-documentation/component/Scheduler.rst", "api-documentation/pythonic.rst", "api-documentation/strategy.rst", "api-documentation/strategy/strategy.rst", "autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruner/criteria/index.rst", "autoapi/neural_compressor/pruner/index.rst", "autoapi/neural_compressor/pruner/logger/index.rst", "autoapi/neural_compressor/pruner/patterns/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/pruner/pruners/index.rst", "autoapi/neural_compressor/pruner/pruning/index.rst", "autoapi/neural_compressor/pruner/regs/index.rst", "autoapi/neural_compressor/pruner/schedulers/index.rst", "autoapi/neural_compressor/pruner/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "backend_quant.md", "bench.md", "benchmark.md", "contributions.md", "dataloader.md", "dataset.md", "design.md", "distillation.md", "distillation_quantization.md", "distributed.md", "dynamic_quantization.md", "examples_readme.md", "export.md", "faq.md", "framework_yaml.md", "incompatible_changes.md", "index.rst", "infrastructure.md", "installation_guide.md", "legal_information.md", "metric.md", "mixed_precision.md", "model.md", "objective.md", "orchestration.md", "platform_configuration.md", "pruning.md", "pruning_details.md", "publication_list.md", "pythonic_style.md", "quantization.md", "quantization_mixed_precision.md", "releases_info.md", "sigopt_strategy.md", "tensorboard.md", "transform.md", "tuning_strategies.md", "user_yaml.md", "validated_model_list.md"], "titles": ["Contributor Covenant Code of Conduct", "FX", "Neural Architecture Search", "PTQ", "Quantization-aware Training", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "APIs", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Pythonic", "Strategy", "Strategies", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Quantization Support Matrix", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "Contribution Guidelines", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Dynamic Quantization", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Incompatible changes between v1.2 and v1.1", "Intel\u00ae Neural Compressor Documentation", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Introduction", "Full Publications/Events (49)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models"], "terms": {"In": [0, 1, 2, 3, 7, 36, 81, 136, 196, 224, 234, 257, 261, 279, 292, 294, 303, 322, 329, 331, 343, 544, 545, 546, 547, 548, 550, 552, 563, 566, 567, 569, 570, 573, 574, 576, 577, 578, 579], "interest": [0, 6, 546, 577], "foster": [0, 546], "an": [0, 1, 2, 3, 4, 6, 7, 12, 36, 44, 87, 92, 93, 95, 136, 160, 161, 176, 190, 195, 199, 203, 208, 214, 218, 223, 224, 228, 233, 237, 241, 246, 250, 257, 258, 261, 262, 263, 270, 277, 280, 281, 282, 298, 300, 303, 304, 305, 315, 322, 329, 332, 337, 424, 429, 505, 545, 546, 547, 549, 553, 555, 563, 564, 566, 570, 571, 576, 577, 578, 579], "open": [0, 6, 218, 257, 508, 544, 546, 555, 556, 571], "welcom": [0, 546, 559], "environ": [0, 215, 299, 463, 495, 496, 504, 528, 544, 546, 579], "we": [0, 1, 3, 4, 6, 7, 12, 36, 69, 81, 82, 83, 84, 85, 86, 87, 88, 92, 93, 95, 98, 99, 103, 105, 106, 107, 108, 109, 112, 115, 116, 125, 126, 129, 130, 131, 160, 161, 176, 196, 215, 217, 218, 234, 258, 261, 268, 279, 280, 300, 303, 340, 546, 547, 552, 555, 557, 563, 566, 567, 569, 570, 572, 573, 576, 577, 579], "maintain": [0, 6, 265, 307, 546, 565, 569, 575], "make": [0, 3, 7, 160, 161, 176, 195, 233, 292, 294, 296, 322, 329, 332, 379, 412, 444, 544, 546, 547, 557, 563, 573, 574, 576, 579], "particip": [0, 546], "project": [0, 214, 250, 279, 380, 383, 388, 390, 391, 394, 401, 402, 406, 407, 408, 409, 410, 411, 412, 436, 546, 559, 571, 576, 579], "commun": [0, 299, 496, 530, 531, 532, 544, 546], "harass": [0, 546], "free": [0, 185, 186, 334, 546, 563, 566, 576], "experi": [0, 546, 576, 579], "everyon": [0, 546], "regardless": [0, 261, 303, 546], "ag": [0, 272, 546], "bodi": [0, 546], "size": [0, 3, 124, 187, 189, 190, 196, 199, 203, 205, 208, 210, 214, 225, 227, 228, 234, 237, 241, 243, 246, 247, 250, 261, 270, 273, 279, 292, 303, 315, 322, 360, 380, 390, 391, 513, 515, 516, 544, 545, 546, 547, 548, 552, 556, 566, 569, 570, 578, 580, 581], "disabl": [0, 166, 503, 532, 546], "ethnic": [0, 546], "sex": [0, 179, 546], "characterist": [0, 546], "gender": [0, 546], "ident": [0, 3, 99, 105, 131, 160, 292, 322, 546, 550], "express": [0, 72, 258, 300, 546], "level": [0, 3, 42, 45, 338, 345, 506, 528, 546, 579], "educ": [0, 546], "socio": [0, 546], "econom": [0, 546], "statu": [0, 131, 380, 391, 394, 399, 401, 407, 409, 410, 498, 511, 527, 540, 546, 566], "nation": [0, 199, 237, 546], "person": [0, 6, 179, 546, 571], "appear": [0, 544, 546], "race": [0, 546], "religion": [0, 546], "sexual": [0, 546], "orient": [0, 546], "exampl": [0, 6, 46, 136, 168, 197, 198, 199, 210, 213, 214, 235, 236, 237, 247, 249, 250, 261, 262, 263, 265, 271, 295, 303, 304, 305, 307, 330, 350, 388, 406, 412, 436, 460, 461, 462, 463, 508, 515, 544, 546, 548, 553, 558, 559, 560, 574, 575, 578, 579], "behavior": [0, 7, 261, 303, 546, 550, 557, 565, 577, 580], "contribut": [0, 6, 559], "creat": [0, 2, 7, 31, 32, 33, 34, 36, 72, 131, 143, 160, 187, 197, 199, 217, 218, 225, 235, 237, 251, 257, 261, 269, 270, 280, 281, 282, 298, 303, 315, 337, 345, 346, 349, 353, 379, 396, 406, 407, 411, 412, 493, 514, 527, 540, 546, 548, 553, 565, 573, 576, 577, 579], "posit": [0, 131, 214, 250, 279, 322, 544, 546, 563], "includ": [0, 6, 7, 42, 197, 199, 203, 206, 207, 208, 211, 214, 216, 235, 237, 241, 244, 245, 246, 248, 250, 256, 257, 261, 266, 279, 292, 296, 297, 303, 319, 322, 331, 332, 345, 346, 349, 354, 355, 544, 546, 548, 561, 562, 563, 569, 570, 573, 574, 577, 579], "us": [0, 1, 2, 3, 4, 6, 7, 12, 37, 39, 42, 44, 45, 63, 69, 70, 72, 95, 134, 136, 137, 143, 168, 173, 175, 177, 178, 179, 185, 186, 195, 196, 197, 198, 199, 200, 201, 204, 208, 211, 213, 214, 215, 216, 221, 233, 234, 235, 236, 237, 238, 239, 242, 246, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 261, 265, 266, 267, 268, 271, 273, 279, 280, 282, 284, 287, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 307, 318, 319, 322, 328, 329, 332, 337, 339, 340, 342, 343, 344, 345, 351, 354, 355, 360, 407, 412, 417, 418, 422, 424, 436, 443, 445, 470, 474, 498, 515, 517, 527, 528, 544, 546, 548, 550, 551, 552, 553, 555, 557, 558, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581], "inclus": [0, 546], "languag": [0, 12, 258, 279, 300, 546, 571], "Being": [0, 546], "respect": [0, 546, 551, 557, 569, 570, 580], "differ": [0, 1, 2, 3, 6, 12, 161, 173, 175, 176, 190, 199, 214, 216, 228, 237, 250, 256, 257, 258, 264, 265, 272, 280, 281, 283, 286, 292, 297, 298, 300, 306, 307, 322, 544, 546, 547, 548, 550, 552, 554, 555, 558, 560, 563, 565, 566, 569, 573, 577, 578, 579], "viewpoint": [0, 546], "gracefulli": [0, 546], "accept": [0, 36, 544, 546, 564], "construct": [0, 197, 200, 201, 204, 208, 211, 212, 217, 218, 219, 220, 222, 235, 238, 239, 242, 306, 307, 310, 312, 353, 545, 546, 548, 552, 579], "critic": [0, 6, 546], "focus": [0, 7, 546], "what": [0, 177, 195, 233, 299, 329, 350, 544, 546], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 21, 28, 29, 36, 37, 39, 42, 44, 45, 46, 70, 72, 78, 79, 85, 87, 89, 95, 106, 110, 111, 117, 118, 119, 131, 136, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 168, 172, 176, 177, 185, 186, 187, 188, 191, 195, 196, 197, 198, 199, 200, 201, 204, 206, 207, 208, 210, 214, 215, 217, 218, 221, 223, 224, 225, 233, 234, 235, 236, 237, 238, 239, 242, 244, 245, 246, 247, 250, 257, 258, 261, 263, 264, 265, 267, 270, 273, 277, 279, 282, 284, 289, 293, 294, 295, 298, 300, 303, 305, 306, 307, 315, 319, 322, 329, 330, 331, 333, 334, 337, 338, 343, 344, 345, 350, 359, 379, 412, 424, 444, 447, 449, 450, 452, 454, 455, 456, 457, 463, 501, 503, 505, 507, 508, 513, 515, 517, 523, 528, 530, 544, 545, 546, 547, 548, 550, 552, 553, 555, 557, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580], "best": [0, 2, 4, 6, 70, 214, 250, 251, 256, 257, 268, 269, 280, 281, 297, 342, 345, 546, 561, 566, 573, 578, 579], "show": [0, 3, 329, 544, 545, 546, 550, 552, 569, 579], "empathi": [0, 546], "toward": [0, 4, 546, 550], "other": [0, 1, 70, 92, 93, 95, 160, 196, 234, 263, 298, 305, 311, 316, 505, 509, 532, 544, 546, 553, 557, 560, 562, 565, 566, 568, 569, 573, 578, 579, 581], "member": [0, 7, 257, 266, 546], "unaccept": [0, 546], "The": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 14, 21, 28, 29, 37, 39, 42, 45, 46, 63, 70, 72, 78, 95, 99, 117, 118, 119, 131, 134, 136, 140, 142, 166, 168, 172, 173, 174, 175, 177, 178, 179, 185, 186, 187, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 211, 214, 216, 218, 219, 221, 224, 225, 235, 236, 237, 238, 239, 241, 243, 244, 245, 246, 248, 250, 251, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 279, 280, 281, 282, 283, 284, 287, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 316, 318, 319, 322, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 349, 350, 351, 353, 354, 355, 359, 360, 380, 381, 383, 386, 390, 391, 394, 395, 397, 399, 400, 407, 412, 415, 417, 418, 419, 420, 421, 422, 423, 436, 443, 444, 496, 544, 545, 546, 547, 548, 550, 551, 552, 553, 555, 557, 558, 560, 561, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580], "imageri": [0, 546], "unwelcom": [0, 546], "attent": [0, 197, 235, 277, 279, 546, 550], "advanc": [0, 6, 168, 524, 546, 547, 573, 580], "troll": [0, 546], "insult": [0, 546], "derogatori": [0, 546], "comment": [0, 546, 548, 563, 578], "polit": [0, 546], "attack": [0, 546], "public": [0, 131, 546], "privat": [0, 257, 266, 546], "publish": [0, 546, 562, 564], "inform": [0, 5, 6, 7, 8, 9, 10, 14, 21, 28, 29, 44, 72, 134, 168, 185, 186, 217, 218, 219, 220, 261, 292, 294, 295, 296, 298, 303, 306, 307, 310, 312, 319, 322, 329, 330, 331, 332, 345, 377, 415, 444, 502, 503, 508, 509, 546, 550, 553, 555, 557, 559, 565, 569, 570, 574, 575, 577, 580, 581], "physic": [0, 215, 546], "electron": [0, 546], "address": [0, 199, 237, 532, 544, 546, 564, 571], "without": [0, 131, 166, 214, 250, 261, 294, 303, 329, 515, 544, 546, 547, 550, 552, 563, 569, 571, 572, 573, 579], "explicit": [0, 160, 546], "permiss": [0, 546], "which": [0, 1, 2, 4, 6, 7, 12, 39, 44, 45, 70, 72, 80, 131, 136, 160, 185, 197, 198, 199, 210, 215, 235, 236, 237, 247, 257, 258, 261, 263, 271, 273, 281, 282, 284, 285, 286, 287, 292, 293, 294, 295, 296, 300, 303, 305, 312, 315, 319, 322, 329, 332, 335, 337, 345, 513, 544, 545, 546, 547, 548, 550, 552, 553, 557, 560, 563, 564, 565, 567, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580], "could": [0, 1, 72, 185, 186, 199, 237, 298, 322, 330, 334, 345, 546, 551, 567, 569, 570, 573], "reason": [0, 106, 217, 218, 546, 547, 577, 579], "consid": [0, 166, 265, 307, 546, 547, 550, 579], "inappropri": [0, 546], "profession": [0, 546], "set": [0, 2, 3, 4, 6, 37, 39, 42, 44, 45, 46, 70, 71, 72, 122, 131, 136, 160, 166, 177, 179, 185, 186, 187, 189, 197, 199, 202, 214, 215, 221, 225, 227, 235, 237, 240, 250, 251, 254, 256, 257, 261, 266, 267, 268, 270, 277, 279, 280, 284, 289, 293, 298, 299, 303, 315, 316, 318, 322, 329, 333, 334, 345, 362, 402, 403, 404, 407, 424, 470, 474, 482, 503, 507, 513, 514, 516, 517, 518, 523, 527, 528, 532, 544, 545, 546, 547, 548, 552, 557, 558, 560, 563, 564, 572, 573, 576, 579, 580], "ar": [0, 1, 2, 3, 4, 6, 7, 12, 37, 39, 46, 70, 87, 99, 143, 153, 182, 197, 214, 224, 235, 250, 257, 258, 261, 265, 271, 273, 277, 279, 282, 284, 289, 292, 293, 294, 295, 298, 299, 300, 303, 307, 322, 329, 330, 335, 337, 353, 359, 360, 444, 447, 449, 456, 500, 509, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 560, 562, 563, 564, 566, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 579, 580], "clarifi": [0, 546], "expect": [0, 72, 143, 199, 237, 337, 363, 485, 508, 546, 556, 573, 579], "take": [0, 1, 2, 37, 39, 72, 185, 186, 190, 214, 218, 219, 228, 250, 292, 306, 307, 322, 334, 337, 546, 547, 550, 557, 569, 573, 574, 578, 579, 580], "appropri": [0, 546], "fair": [0, 546], "correct": [0, 3, 161, 176, 261, 262, 263, 265, 293, 303, 304, 305, 307, 333, 465, 544, 546], "action": [0, 546], "ani": [0, 95, 143, 160, 168, 251, 257, 261, 263, 279, 303, 305, 362, 363, 365, 367, 369, 370, 371, 372, 373, 374, 375, 377, 378, 380, 381, 383, 390, 391, 392, 393, 394, 395, 397, 400, 402, 403, 413, 415, 420, 421, 424, 426, 432, 441, 444, 447, 451, 454, 455, 456, 458, 461, 463, 466, 470, 474, 476, 479, 482, 485, 488, 493, 494, 500, 501, 503, 505, 507, 508, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 531, 532, 539, 540, 544, 546, 547, 552, 576], "instanc": [0, 1, 7, 134, 136, 137, 143, 185, 186, 197, 215, 235, 257, 262, 263, 265, 268, 280, 281, 304, 305, 307, 334, 337, 345, 350, 380, 419, 423, 447, 456, 523, 544, 546, 580, 581], "have": [0, 3, 12, 99, 131, 166, 195, 213, 217, 218, 233, 249, 258, 261, 265, 272, 292, 294, 300, 303, 307, 322, 329, 544, 546, 547, 552, 557, 562, 563, 564, 566, 569, 570, 573, 579], "right": [0, 1, 210, 247, 261, 303, 513, 544, 546, 547, 578], "remov": [0, 3, 72, 87, 99, 110, 122, 124, 131, 136, 153, 160, 216, 254, 263, 305, 380, 383, 390, 391, 394, 396, 397, 399, 401, 447, 508, 509, 516, 545, 546, 569, 570, 577], "edit": [0, 401, 407, 409, 410, 413, 546], "reject": [0, 546], "commit": [0, 546], "wiki": [0, 546], "issu": [0, 5, 544, 546, 561, 573, 577], "align": [0, 214, 250, 295, 546, 578], "thi": [0, 1, 2, 3, 4, 6, 7, 12, 36, 39, 44, 69, 70, 72, 81, 82, 83, 84, 85, 86, 87, 88, 98, 103, 105, 106, 107, 108, 109, 111, 112, 115, 116, 125, 126, 129, 130, 131, 136, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 165, 168, 172, 176, 185, 186, 196, 197, 198, 199, 200, 201, 202, 204, 213, 214, 217, 218, 223, 224, 234, 235, 236, 237, 238, 239, 240, 242, 249, 250, 257, 258, 261, 262, 263, 265, 270, 275, 276, 283, 284, 289, 292, 294, 295, 296, 297, 298, 300, 303, 304, 305, 307, 318, 322, 329, 330, 331, 332, 334, 337, 342, 359, 360, 543, 544, 545, 546, 547, 548, 550, 552, 553, 557, 560, 562, 563, 564, 565, 569, 570, 573, 574, 575, 576, 577, 578, 579], "ban": [0, 546], "temporarili": [0, 546], "perman": [0, 546], "thei": [0, 143, 177, 215, 257, 279, 299, 322, 545, 546, 550, 557, 563, 566, 569, 570], "deem": [0, 546], "threaten": [0, 546], "offens": [0, 546], "harm": [0, 546], "appli": [0, 4, 134, 149, 224, 257, 259, 292, 294, 301, 322, 329, 544, 546, 567, 569, 570, 573, 574, 576, 579, 580], "both": [0, 2, 4, 7, 166, 279, 281, 283, 546, 547, 551, 572, 573, 579], "within": [0, 1, 256, 257, 261, 297, 303, 316, 329, 337, 546, 564, 571], "space": [0, 2, 7, 177, 185, 186, 256, 257, 263, 268, 270, 272, 280, 281, 282, 283, 297, 299, 305, 329, 334, 335, 337, 338, 339, 340, 342, 344, 345, 348, 515, 546, 547, 569, 573, 580], "when": [0, 2, 4, 12, 69, 78, 89, 95, 143, 166, 197, 198, 206, 207, 208, 214, 235, 236, 244, 245, 246, 250, 258, 259, 271, 279, 292, 293, 294, 300, 301, 322, 329, 333, 513, 515, 528, 532, 544, 546, 547, 548, 553, 569, 570, 573, 578, 579], "individu": [0, 95, 269, 270, 280, 292, 322, 546], "repres": [0, 69, 199, 204, 237, 242, 261, 263, 265, 303, 305, 307, 322, 329, 330, 331, 332, 333, 382, 384, 385, 387, 389, 392, 393, 396, 398, 513, 546, 548, 555, 573, 579], "its": [0, 72, 122, 131, 134, 143, 168, 193, 199, 213, 214, 231, 237, 249, 250, 252, 253, 259, 260, 264, 265, 294, 298, 301, 302, 306, 307, 322, 329, 337, 338, 342, 544, 546, 547, 550, 562, 563, 564, 568, 569, 570, 576, 578, 579], "offici": [0, 166, 258, 262, 263, 300, 304, 305, 544, 546, 563], "e": [0, 42, 45, 71, 95, 270, 272, 298, 322, 505, 507, 532, 546, 550, 579], "mail": [0, 546], "post": [0, 3, 4, 7, 37, 42, 45, 185, 186, 214, 224, 250, 254, 257, 298, 334, 527, 546, 551, 552, 555, 560, 561, 567, 577, 579], "via": [0, 143, 256, 257, 284, 289, 297, 532, 546, 552, 560], "social": [0, 546], "media": [0, 546], "account": [0, 270, 546, 576, 579], "act": [0, 195, 233, 546], "appoint": [0, 546], "onlin": [0, 6, 36, 546, 576], "offlin": [0, 36, 360, 546, 573], "event": [0, 546, 577], "represent": [0, 1, 81, 270, 380, 381, 383, 386, 390, 391, 394, 395, 397, 399, 400, 526, 546, 551, 566, 570, 573], "mai": [0, 131, 160, 166, 318, 546, 547, 556, 562, 564, 568, 571, 573, 579], "further": [0, 95, 546, 564, 565], "defin": [0, 2, 3, 4, 7, 39, 42, 44, 45, 69, 70, 71, 72, 81, 82, 83, 84, 85, 86, 87, 88, 98, 103, 105, 106, 107, 108, 109, 112, 115, 116, 118, 125, 126, 129, 130, 131, 160, 185, 186, 216, 257, 268, 269, 272, 280, 281, 282, 283, 284, 289, 292, 293, 294, 295, 296, 322, 329, 330, 331, 332, 334, 337, 359, 360, 438, 439, 440, 527, 544, 546, 548, 550, 557, 560, 563, 566, 567, 569, 570, 573, 576, 577, 579, 580], "abus": [0, 546], "otherwis": [0, 186, 199, 214, 237, 250, 345, 546, 548, 572, 578], "report": [0, 544, 546, 576], "contact": [0, 546, 575, 576], "mlp": [0, 546], "mlpc": [0, 546], "dl": [0, 256, 257, 266, 284, 289, 297, 546, 558, 571], "intel": [0, 2, 5, 7, 70, 218, 221, 252, 257, 264, 265, 292, 295, 306, 307, 322, 330, 341, 346, 495, 508, 546, 549, 550, 551, 554, 555, 557, 561, 562, 564, 565, 566, 567, 568, 569, 571, 573, 574, 575, 577, 579, 580], "com": [0, 3, 6, 168, 197, 235, 258, 259, 262, 263, 292, 295, 300, 301, 304, 305, 322, 330, 508, 544, 546, 548, 561, 562, 575, 576, 581], "all": [0, 3, 4, 6, 7, 37, 39, 45, 46, 63, 70, 72, 85, 88, 110, 111, 123, 143, 173, 175, 187, 188, 191, 195, 199, 203, 206, 207, 208, 211, 214, 215, 216, 221, 224, 225, 233, 237, 241, 244, 245, 246, 248, 250, 254, 257, 258, 261, 263, 264, 265, 275, 276, 277, 279, 282, 284, 285, 286, 287, 288, 289, 292, 295, 298, 300, 303, 305, 306, 307, 309, 310, 315, 317, 318, 322, 328, 329, 330, 335, 337, 338, 339, 345, 354, 355, 364, 376, 379, 388, 405, 407, 412, 417, 418, 431, 433, 436, 437, 443, 444, 447, 449, 456, 462, 469, 471, 475, 476, 478, 481, 487, 492, 496, 505, 509, 532, 544, 546, 547, 548, 552, 557, 561, 567, 568, 569, 570, 571, 573, 574, 578, 579], "complaint": [0, 546], "review": [0, 546], "investig": [0, 546], "result": [0, 2, 3, 12, 37, 39, 42, 45, 70, 72, 166, 185, 210, 214, 215, 216, 247, 250, 257, 258, 261, 262, 263, 264, 265, 270, 272, 281, 300, 303, 304, 305, 306, 307, 318, 340, 345, 361, 363, 380, 381, 394, 395, 397, 401, 407, 410, 413, 490, 531, 534, 544, 545, 546, 547, 550, 552, 553, 560, 562, 563, 566, 569, 570, 571, 573, 576, 577, 578, 579, 581], "necessari": [0, 2, 69, 251, 257, 546, 565, 576, 579], "circumst": [0, 546, 572], "team": [0, 263, 305, 546, 574], "oblig": [0, 546], "confidenti": [0, 544, 546], "regard": [0, 546, 574], "incid": [0, 546], "detail": [0, 6, 39, 72, 214, 250, 277, 380, 383, 390, 391, 394, 396, 397, 399, 401, 402, 404, 407, 408, 409, 410, 411, 415, 420, 483, 488, 502, 515, 546, 557, 558, 563, 564, 569, 570, 575, 576, 577, 579, 581], "specif": [0, 2, 3, 7, 39, 42, 45, 70, 71, 72, 136, 137, 188, 191, 197, 198, 199, 200, 204, 206, 207, 208, 215, 221, 235, 236, 237, 238, 242, 244, 245, 246, 257, 258, 261, 267, 268, 279, 280, 281, 300, 303, 317, 333, 391, 402, 403, 404, 407, 415, 430, 544, 546, 550, 553, 557, 558, 563, 564, 565, 566, 572, 579, 580], "polici": [0, 6, 342, 546, 568, 580], "separ": [0, 213, 249, 531, 544, 546, 558, 562, 567, 572], "who": [0, 338, 546, 579], "do": [0, 12, 37, 39, 42, 45, 70, 196, 197, 234, 235, 251, 252, 254, 257, 258, 261, 295, 298, 300, 303, 330, 338, 359, 544, 546, 548, 552, 557, 560, 563, 566, 574, 575, 579], "follow": [0, 1, 2, 3, 4, 7, 9, 46, 95, 111, 114, 117, 118, 119, 120, 131, 199, 237, 257, 258, 261, 279, 284, 289, 300, 303, 335, 543, 544, 545, 546, 548, 550, 552, 553, 555, 557, 561, 562, 563, 565, 567, 569, 570, 572, 573, 577, 579], "good": [0, 546, 553, 573, 579], "faith": [0, 546], "face": [0, 546, 571, 575], "temporari": [0, 546], "repercuss": [0, 546], "determin": [0, 1, 3, 319, 322, 329, 528, 546, 553, 570], "": [0, 2, 3, 42, 69, 71, 81, 87, 95, 131, 143, 160, 161, 176, 178, 179, 182, 187, 196, 199, 213, 214, 215, 217, 218, 219, 225, 234, 237, 249, 250, 257, 263, 271, 273, 279, 292, 294, 295, 299, 305, 306, 307, 312, 322, 329, 334, 338, 345, 354, 355, 413, 444, 500, 501, 545, 546, 550, 552, 553, 557, 560, 561, 564, 567, 568, 569, 570, 571, 572, 573, 575, 576, 580], "leadership": [0, 546], "adapt": [0, 39, 42, 45, 70, 71, 72, 546], "from": [0, 1, 2, 3, 4, 6, 7, 12, 37, 39, 42, 44, 69, 70, 72, 86, 92, 93, 95, 131, 134, 136, 143, 153, 160, 166, 185, 186, 187, 190, 194, 197, 198, 199, 200, 201, 202, 204, 209, 210, 216, 217, 218, 224, 225, 228, 232, 235, 236, 237, 238, 239, 240, 242, 247, 251, 253, 254, 255, 257, 258, 261, 262, 263, 267, 270, 271, 272, 273, 277, 279, 282, 284, 289, 292, 293, 294, 295, 296, 298, 300, 303, 304, 305, 316, 318, 319, 322, 329, 330, 331, 332, 333, 337, 344, 345, 346, 349, 353, 359, 360, 378, 380, 383, 384, 385, 387, 390, 391, 392, 393, 394, 396, 397, 399, 401, 402, 404, 407, 408, 409, 410, 411, 413, 424, 429, 447, 450, 459, 460, 461, 463, 488, 493, 507, 508, 513, 515, 516, 517, 523, 532, 534, 539, 540, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 560, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579], "version": [0, 1, 6, 7, 39, 42, 44, 45, 71, 72, 78, 185, 252, 254, 279, 337, 463, 498, 503, 515, 544, 546, 557, 561, 562, 568, 571, 579], "1": [0, 1, 3, 4, 6, 7, 37, 39, 42, 45, 46, 69, 70, 72, 79, 99, 115, 134, 136, 164, 166, 174, 176, 182, 187, 189, 192, 193, 194, 196, 197, 198, 200, 201, 204, 205, 210, 214, 215, 216, 217, 218, 225, 227, 230, 231, 232, 234, 235, 236, 238, 239, 242, 243, 247, 250, 256, 257, 261, 262, 263, 265, 270, 273, 277, 279, 284, 289, 292, 294, 297, 298, 299, 303, 304, 305, 307, 322, 329, 334, 335, 343, 353, 363, 485, 493, 543, 545, 546, 547, 548, 550, 553, 555, 557, 563, 564, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 579, 580], "4": [0, 3, 6, 7, 12, 72, 78, 206, 207, 208, 209, 210, 211, 214, 244, 245, 246, 247, 248, 250, 258, 259, 261, 300, 301, 303, 322, 338, 505, 544, 545, 546, 547, 552, 556, 557, 560, 561, 563, 568, 569, 578, 579, 581], "avail": [0, 6, 8, 9, 10, 14, 21, 28, 29, 36, 312, 377, 382, 384, 385, 389, 392, 393, 398, 463, 544, 560, 568, 579], "http": [0, 1, 3, 6, 168, 197, 199, 235, 237, 258, 259, 261, 262, 263, 279, 292, 294, 295, 300, 301, 303, 304, 305, 319, 322, 330, 540, 544, 548, 561, 562, 575], "www": [0, 199, 237, 548, 581], "org": [0, 1, 6, 261, 279, 294, 303, 319, 544, 561], "html": [0, 1], "For": [0, 1, 3, 4, 5, 7, 136, 199, 213, 214, 224, 237, 249, 250, 257, 261, 262, 263, 265, 270, 292, 295, 303, 304, 305, 307, 322, 330, 334, 338, 505, 544, 546, 551, 552, 555, 557, 560, 569, 574, 577, 579, 580, 581], "answer": [0, 214, 250, 262, 263, 304, 305, 546, 578, 581], "common": [0, 4, 9, 212, 257, 267, 273, 281, 282, 283, 292, 298, 299, 322, 353, 508, 509, 515, 545, 546, 547, 548, 550, 552, 555, 558, 561, 565, 569, 573], "question": [0, 7, 214, 250, 262, 263, 304, 305, 546, 561, 578, 581], "about": [0, 319, 415, 444, 500, 502, 503, 508, 509, 544, 546, 547, 553, 574, 581], "see": [0, 1, 3, 5, 214, 250, 258, 261, 277, 300, 303, 544, 546, 562, 569, 577, 579, 581], "faq": [0, 6, 546], "3": [1, 2, 3, 4, 6, 46, 71, 72, 95, 136, 166, 199, 203, 208, 211, 214, 237, 241, 246, 248, 250, 261, 273, 303, 505, 544, 548, 550, 552, 555, 557, 563, 564, 566, 569, 572, 573, 576, 578, 579, 581], "2": [1, 3, 4, 6, 7, 9, 69, 71, 72, 78, 99, 174, 198, 215, 236, 261, 263, 265, 273, 287, 288, 294, 303, 305, 307, 322, 329, 335, 337, 343, 543, 548, 550, 557, 560, 562, 563, 564, 566, 567, 568, 569, 573, 575, 576, 578, 579], "pytorch": [1, 2, 6, 7, 196, 197, 199, 202, 203, 206, 207, 208, 211, 214, 216, 221, 223, 234, 235, 237, 240, 241, 244, 245, 246, 248, 250, 252, 254, 255, 256, 257, 264, 265, 266, 290, 292, 295, 297, 306, 307, 317, 322, 330, 334, 343, 363, 436, 443, 466, 476, 496, 550, 553, 554, 555, 557, 560, 561, 564, 565, 569, 571, 572, 573, 575, 579, 580], "toolkit": [1, 6, 561, 571], "develop": [1, 168, 515, 546, 561, 564, 571, 573, 574, 576], "transform": [1, 2, 6, 14, 32, 45, 69, 75, 87, 115, 116, 118, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159, 161, 164, 165, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 257, 276, 278, 279, 299, 373, 377, 383, 388, 402, 405, 407, 412, 414, 436, 515, 516, 517, 518, 523, 545, 547, 548, 550, 551, 552, 569, 571, 574, 577, 580], "nn": [1, 3, 4, 172, 216, 252, 254, 273, 277, 279, 334, 555, 565, 569, 577], "modul": [1, 3, 4, 252, 257, 274, 275, 276, 280, 290, 291, 321, 504, 512, 520, 544, 545, 550, 555, 560, 563, 565, 572, 574, 577], "consist": [1, 80, 88, 279, 544, 546, 555, 579], "three": [1, 7, 99, 197, 235, 257, 284, 289, 295, 330, 544, 547, 555, 561, 564, 567, 573, 574, 576, 577, 579], "main": [1, 3, 6, 185, 221, 295, 330, 345, 495, 532, 552, 573], "compon": [1, 6, 9, 251, 257, 268, 280, 284, 289, 297, 298, 299, 350, 496, 531, 534, 546, 547, 552, 562, 567, 568], "symbol": [1, 44, 172, 258, 300, 334, 565], "tracer": 1, "intermedi": [1, 46, 69, 216, 560, 569, 573], "python": [1, 9, 100, 143, 166, 199, 218, 237, 257, 261, 303, 360, 463, 544, 546, 548, 552, 561, 571, 574, 578], "code": [1, 6, 7, 185, 186, 215, 257, 267, 275, 276, 279, 295, 298, 334, 402, 407, 425, 443, 508, 509, 540, 541, 547, 548, 550, 552, 558, 560, 562, 563, 566, 567, 569, 571, 572, 573, 576, 577, 578], "gener": [1, 6, 7, 37, 39, 44, 69, 72, 115, 116, 143, 185, 186, 187, 196, 199, 200, 201, 202, 208, 211, 214, 215, 225, 234, 237, 238, 239, 240, 246, 248, 250, 254, 255, 257, 258, 266, 270, 277, 284, 292, 295, 298, 300, 322, 330, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 378, 402, 407, 413, 468, 473, 477, 480, 482, 483, 488, 489, 490, 499, 508, 540, 544, 547, 550, 563, 564, 566, 568, 569, 570, 571, 573, 574, 577, 578, 579], "With": [1, 4, 7, 122, 547, 566, 569, 571, 573, 576, 579, 581], "convert": [1, 3, 4, 37, 39, 44, 69, 70, 72, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 98, 99, 103, 105, 106, 107, 108, 109, 112, 115, 116, 125, 126, 128, 129, 130, 197, 210, 213, 214, 235, 247, 249, 250, 257, 261, 265, 267, 281, 283, 293, 303, 307, 309, 310, 311, 315, 317, 335, 350, 382, 389, 398, 493, 505, 564, 573, 574, 578], "torch": [1, 3, 4, 70, 168, 172, 178, 182, 216, 252, 254, 265, 273, 277, 279, 299, 307, 317, 322, 334, 552, 555, 564, 565, 569, 573, 577], "graphmodul": [1, 70, 172, 574], "can": [1, 2, 3, 4, 6, 7, 81, 161, 168, 176, 177, 185, 186, 196, 199, 214, 215, 217, 218, 234, 237, 250, 257, 261, 263, 265, 277, 279, 284, 289, 292, 294, 295, 296, 299, 303, 305, 307, 318, 322, 329, 330, 332, 334, 466, 498, 505, 515, 544, 545, 547, 548, 550, 552, 553, 557, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580], "resolv": [1, 5], "automat": [1, 6, 199, 202, 209, 210, 237, 240, 247, 256, 257, 266, 273, 297, 544, 548, 560, 564, 567, 570, 578, 579], "insert": [1, 3, 72, 128, 131, 134, 153, 164, 252, 254, 560, 573, 574, 577], "quant": [1, 3, 72, 172, 573], "dequant": [1, 3, 114, 117, 119, 120, 122, 149, 168, 172, 415, 577], "oper": [1, 3, 69, 131, 166, 210, 247, 279, 292, 322, 338, 527, 531, 544, 555, 566, 573, 578, 579], "floatfunct": [1, 3], "wrap": [1, 72, 137, 143, 216, 261, 303, 373, 552], "tensor": [1, 3, 37, 39, 42, 44, 45, 46, 69, 70, 72, 95, 131, 143, 160, 166, 168, 214, 216, 250, 252, 253, 254, 279, 287, 288, 292, 294, 296, 315, 316, 317, 319, 322, 329, 331, 332, 342, 354, 355, 404, 407, 415, 444, 548, 569, 570, 573, 575, 577, 578, 579], "requir": [1, 3, 4, 7, 134, 143, 224, 257, 261, 273, 298, 303, 311, 316, 335, 338, 362, 364, 373, 376, 431, 437, 444, 447, 449, 456, 462, 469, 470, 471, 472, 474, 475, 476, 478, 481, 482, 487, 492, 496, 544, 545, 547, 551, 552, 557, 561, 564, 565, 568, 570, 573, 575, 576, 577, 579, 580], "special": [1, 137, 563, 566], "handl": [1, 5, 85, 87, 166, 257, 270, 271, 272, 297, 505, 531, 532, 547], "like": [1, 2, 7, 37, 39, 42, 45, 70, 72, 99, 122, 124, 131, 160, 166, 185, 186, 187, 199, 203, 208, 225, 237, 241, 246, 256, 257, 265, 271, 294, 297, 298, 307, 309, 310, 311, 315, 316, 317, 322, 334, 350, 544, 546, 550, 553, 560, 567, 569, 573, 579], "add": [1, 3, 12, 46, 69, 77, 89, 131, 136, 140, 149, 166, 197, 199, 221, 235, 237, 257, 258, 265, 279, 284, 289, 293, 295, 298, 300, 307, 330, 333, 338, 373, 380, 381, 383, 390, 391, 392, 393, 394, 395, 397, 399, 400, 401, 402, 406, 407, 408, 409, 410, 411, 413, 429, 515, 540, 544, 546, 548, 552, 555, 557, 563, 566, 576, 577, 579], "cat": 1, "output": [1, 3, 4, 7, 12, 36, 46, 70, 72, 78, 84, 85, 95, 99, 110, 111, 117, 119, 124, 131, 134, 143, 160, 166, 179, 185, 186, 213, 216, 218, 219, 223, 249, 251, 252, 254, 256, 257, 258, 261, 265, 270, 271, 279, 292, 300, 303, 306, 307, 316, 322, 329, 334, 350, 351, 354, 380, 391, 394, 401, 407, 409, 410, 444, 454, 455, 456, 470, 474, 477, 500, 508, 516, 522, 544, 547, 550, 552, 555, 557, 558, 563, 565, 569, 572, 573, 577, 578, 579, 580], "paramet": [1, 3, 4, 12, 37, 39, 42, 44, 45, 46, 63, 69, 70, 72, 81, 82, 83, 84, 85, 86, 87, 88, 95, 98, 99, 103, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 125, 126, 129, 130, 131, 134, 136, 137, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159, 160, 166, 168, 172, 173, 175, 177, 178, 179, 182, 185, 186, 187, 196, 197, 199, 203, 206, 207, 208, 210, 211, 213, 214, 215, 216, 221, 225, 234, 235, 237, 241, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 279, 280, 281, 282, 283, 284, 287, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 311, 313, 316, 317, 318, 319, 322, 328, 329, 330, 331, 332, 333, 334, 337, 338, 342, 345, 346, 349, 350, 353, 354, 355, 359, 360, 373, 377, 382, 383, 402, 403, 404, 407, 413, 415, 424, 450, 468, 473, 477, 480, 483, 495, 500, 505, 507, 508, 514, 515, 517, 527, 528, 544, 547, 548, 552, 553, 560, 563, 569, 570, 573, 576, 578, 579, 580], "fuse": [1, 3, 4, 37, 44, 70, 72, 89, 90, 94, 95, 96, 97, 117, 118, 119, 120, 122, 156, 168, 172, 577], "combin": [1, 7, 42, 71, 185, 186, 210, 224, 247, 257, 298, 334, 360, 553, 560, 567, 571, 574, 578, 579], "singl": [1, 190, 197, 213, 214, 228, 235, 249, 250, 261, 270, 272, 294, 296, 303, 319, 332, 337, 396, 413, 432, 500, 534, 548, 569, 570], "obtain": [1, 292, 293, 296, 322, 330, 331, 332, 333, 555, 576, 579], "higher": [1, 4, 185, 186, 282, 334, 335, 550, 555, 563, 564, 569, 570, 573, 576, 579], "accuraci": [1, 3, 4, 6, 70, 177, 185, 186, 215, 251, 256, 257, 265, 269, 270, 271, 273, 280, 284, 289, 297, 299, 307, 318, 334, 335, 338, 343, 345, 365, 381, 391, 401, 407, 409, 483, 507, 513, 516, 518, 534, 544, 545, 547, 551, 552, 553, 555, 563, 564, 566, 567, 569, 570, 571, 572, 575, 576, 577, 580, 581], "perform": [1, 2, 4, 6, 7, 87, 122, 177, 197, 209, 210, 213, 215, 235, 247, 249, 256, 257, 268, 269, 271, 273, 280, 281, 284, 289, 297, 299, 318, 329, 331, 338, 342, 365, 381, 391, 401, 407, 409, 498, 507, 516, 518, 525, 534, 544, 545, 547, 549, 551, 555, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581], "done": [1, 3, 4, 550, 569, 573], "_": [1, 2, 3, 4, 7, 185, 186, 334, 543, 550, 552, 553, 557, 563, 564, 565, 566, 569, 570, 573, 574, 575, 576, 577, 579, 580], "api": [1, 4, 8, 10, 14, 28, 29, 45, 70, 95, 100, 131, 143, 256, 257, 261, 295, 297, 303, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 531, 532, 547, 555, 559, 560, 575, 576, 579], "list": [1, 3, 6, 7, 12, 37, 39, 42, 44, 45, 46, 69, 70, 72, 78, 81, 131, 136, 143, 160, 166, 172, 185, 186, 190, 197, 210, 213, 214, 215, 216, 228, 235, 247, 249, 250, 252, 254, 257, 258, 259, 261, 262, 263, 265, 270, 272, 273, 282, 284, 289, 292, 295, 300, 301, 303, 304, 305, 307, 316, 317, 318, 322, 330, 334, 338, 342, 345, 350, 351, 354, 355, 373, 375, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 424, 427, 429, 430, 432, 444, 447, 450, 451, 454, 455, 456, 458, 463, 466, 468, 470, 473, 474, 477, 480, 483, 493, 500, 505, 507, 508, 509, 513, 515, 516, 517, 518, 519, 521, 522, 523, 525, 527, 534, 543, 557, 566, 572, 574, 577, 579], "current": [1, 2, 3, 7, 39, 42, 45, 71, 72, 87, 95, 99, 131, 136, 257, 267, 273, 284, 289, 292, 294, 295, 296, 319, 322, 329, 330, 332, 337, 338, 342, 343, 345, 544, 552, 553, 557, 563, 566, 569, 570, 573, 579], "fusion": [1, 3, 7, 42, 71, 95, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159, 557], "conv": [1, 3, 37, 46, 118, 156, 182, 299, 322, 572], "relu": [1, 3, 37, 99, 156, 557, 577], "batchnorm": [1, 142], "linear": [1, 3, 69, 182, 252, 254, 292, 299, 322, 550, 555], "descript": [1, 44, 131, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159, 160, 254, 255, 261, 281, 303], "pleas": [1, 2, 4, 5, 6, 7, 131, 168, 197, 198, 199, 202, 235, 236, 237, 240, 257, 284, 289, 292, 294, 295, 319, 322, 330, 544, 548, 551, 552, 561, 563, 564, 566, 569, 570, 574, 575, 576], "refer": [1, 4, 6, 7, 12, 168, 197, 235, 257, 258, 259, 264, 265, 284, 289, 292, 294, 295, 300, 301, 306, 307, 319, 322, 330, 545, 548, 551, 552, 558, 562, 563, 564, 566, 569, 572, 573, 575, 578, 579], "graph": [1, 7, 45, 46, 70, 72, 75, 81, 82, 83, 84, 85, 86, 87, 88, 95, 98, 99, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 125, 126, 129, 130, 131, 153, 160, 161, 164, 165, 166, 196, 234, 254, 256, 299, 309, 310, 315, 316, 317, 367, 369, 371, 436, 444, 447, 455, 456, 458, 468, 469, 470, 475, 476, 480, 493, 494, 496, 516, 519, 531, 548, 550, 552, 558, 563, 565, 573, 574, 577], "10004": [1, 2, 7, 550, 555, 557, 560, 564, 567, 572, 580], "backend": [1, 39, 42, 45, 46, 70, 71, 72, 188, 189, 193, 197, 198, 200, 201, 202, 203, 204, 208, 211, 214, 221, 226, 227, 229, 231, 235, 236, 238, 239, 240, 241, 242, 246, 248, 250, 266, 343, 543, 552, 553, 558, 560, 572, 573, 578, 580], "field": [1, 7, 131, 160, 199, 237, 261, 298, 303, 544, 545, 552, 553, 576, 579, 580], "indic": [1, 190, 195, 197, 228, 233, 235, 251, 257, 261, 277, 279, 282, 283, 303, 322, 544, 545, 556, 577], "user": [1, 2, 3, 6, 7, 42, 71, 131, 177, 185, 186, 188, 191, 199, 202, 206, 207, 208, 214, 215, 221, 224, 237, 240, 244, 245, 246, 250, 256, 257, 270, 272, 284, 289, 295, 297, 298, 299, 329, 330, 334, 338, 345, 350, 360, 499, 550, 553, 557, 560, 563, 564, 565, 566, 567, 569, 571, 573, 574, 575, 577, 578, 579], "configur": [1, 2, 3, 7, 36, 37, 39, 42, 44, 45, 70, 71, 72, 131, 172, 177, 178, 182, 185, 186, 188, 191, 199, 202, 208, 215, 237, 240, 251, 252, 254, 256, 257, 261, 267, 268, 269, 270, 272, 280, 281, 284, 289, 293, 295, 297, 298, 299, 303, 322, 330, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 349, 350, 359, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 380, 391, 402, 404, 407, 466, 468, 473, 477, 480, 483, 496, 498, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 530, 532, 544, 545, 548, 551, 563, 566, 575, 578, 579, 581], "And": [1, 95, 224, 257], "default": [1, 6, 7, 12, 37, 39, 70, 72, 123, 131, 160, 166, 179, 182, 185, 186, 187, 189, 197, 198, 199, 210, 214, 216, 224, 225, 227, 235, 236, 237, 247, 250, 252, 254, 257, 258, 261, 264, 265, 267, 279, 293, 299, 300, 303, 306, 307, 316, 333, 360, 382, 384, 385, 387, 389, 392, 393, 398, 420, 421, 424, 441, 451, 503, 505, 515, 517, 518, 522, 523, 544, 545, 547, 548, 553, 555, 557, 560, 563, 566, 572, 574, 576, 578, 579, 580], "valu": [1, 3, 4, 37, 39, 42, 45, 46, 69, 70, 72, 80, 81, 87, 92, 93, 95, 115, 116, 131, 136, 160, 161, 166, 176, 178, 179, 185, 186, 197, 200, 201, 210, 214, 215, 216, 235, 238, 239, 247, 250, 257, 261, 265, 271, 272, 277, 284, 289, 292, 293, 295, 303, 307, 317, 318, 319, 322, 330, 333, 334, 337, 342, 345, 351, 353, 354, 360, 373, 375, 377, 382, 384, 385, 387, 389, 392, 393, 398, 402, 403, 424, 426, 465, 497, 500, 501, 505, 507, 513, 515, 518, 523, 525, 526, 528, 539, 544, 547, 548, 553, 557, 563, 566, 569, 570, 572, 573, 578, 579, 580], "mean": [1, 3, 4, 87, 95, 187, 210, 214, 225, 247, 250, 261, 263, 265, 271, 273, 279, 292, 303, 305, 307, 318, 322, 342, 545, 547, 552, 553, 557, 563, 569, 570, 573, 578, 579, 580], "model": [1, 2, 4, 7, 10, 37, 39, 42, 44, 45, 46, 70, 72, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 137, 160, 166, 168, 172, 177, 182, 185, 186, 193, 196, 197, 199, 214, 215, 216, 218, 219, 224, 231, 234, 235, 237, 250, 251, 252, 253, 254, 255, 256, 257, 265, 266, 267, 268, 269, 271, 273, 278, 279, 280, 281, 283, 284, 289, 292, 293, 294, 295, 296, 297, 298, 299, 306, 307, 322, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 350, 353, 359, 360, 362, 363, 364, 366, 377, 380, 388, 391, 394, 396, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 419, 423, 424, 429, 430, 431, 434, 435, 436, 460, 461, 463, 466, 469, 470, 471, 472, 474, 475, 476, 477, 481, 482, 487, 489, 492, 493, 496, 497, 504, 513, 515, 520, 530, 531, 535, 545, 547, 548, 550, 551, 552, 553, 558, 560, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 580], "neural_compressor": [1, 2, 4, 6, 12, 545, 547, 548, 550, 552, 555, 558, 563, 564, 565, 566, 567, 569, 572, 573, 574, 575, 576, 578, 579, 580], "import": [1, 2, 3, 4, 6, 166, 257, 267, 270, 350, 360, 545, 547, 548, 550, 552, 555, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 576, 577, 578, 579], "posttrainingquantconfig": [1, 6, 576, 579], "conf": [1, 2, 4, 6, 173, 175, 185, 186, 215, 257, 266, 267, 284, 289, 298, 309, 310, 311, 315, 317, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 350, 523, 526, 545, 547, 550, 558, 576, 579], "eval": [1, 3, 4, 45, 224, 257, 261, 267, 303, 577], "q_model": [1, 4, 70, 168, 257, 267, 547, 548, 552, 555, 558, 563, 565, 566, 573], "fit": [1, 4, 6, 177, 322, 334, 337, 547, 548, 550, 552, 558, 563, 565, 566, 567, 569, 570, 573], "calib_dataload": [1, 6, 217, 218, 257, 297, 298, 334, 547, 548, 558, 563, 573], "dataload": [1, 6, 7, 14, 32, 37, 39, 42, 44, 45, 46, 70, 72, 168, 172, 177, 185, 186, 197, 208, 215, 218, 224, 235, 246, 251, 257, 267, 284, 289, 294, 297, 298, 299, 334, 350, 353, 361, 366, 373, 377, 388, 402, 405, 407, 412, 414, 436, 477, 490, 493, 496, 504, 515, 516, 520, 544, 548, 552, 558, 563, 564, 573, 577, 578, 580], "eval_func": [1, 185, 186, 224, 256, 257, 267, 298, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 545, 547, 548, 552, 564, 573, 579, 580], "save": [1, 3, 7, 37, 39, 42, 45, 70, 72, 131, 199, 203, 208, 237, 241, 246, 252, 254, 271, 281, 298, 309, 310, 311, 313, 315, 316, 317, 338, 345, 350, 351, 354, 360, 558, 564, 565, 569, 570, 573], "path": [1, 2, 3, 7, 37, 39, 42, 45, 70, 72, 160, 166, 177, 178, 197, 198, 199, 214, 235, 236, 237, 250, 251, 252, 254, 256, 257, 267, 268, 269, 270, 273, 280, 281, 284, 289, 293, 295, 297, 298, 299, 311, 313, 316, 317, 330, 333, 334, 350, 360, 361, 366, 380, 383, 390, 391, 394, 401, 402, 407, 409, 410, 424, 430, 441, 444, 447, 449, 450, 452, 454, 455, 456, 457, 461, 468, 473, 477, 480, 483, 484, 490, 500, 508, 513, 515, 516, 525, 540, 544, 545, 547, 548, 550, 552, 558, 563, 565, 569, 578, 580], "approach": [1, 2, 6, 70, 178, 257, 268, 269, 270, 279, 280, 281, 345, 377, 516, 523, 550, 553, 560, 571, 572, 579, 580], "quantizationawaretrainingconfig": [1, 579], "prepare_compress": [1, 350], "compression_manag": [1, 350], "callback": [1, 284, 289, 350, 351, 353, 354, 531], "on_train_begin": [1, 224, 257, 284, 289, 294, 295, 329, 330, 350, 550], "loop": [1, 2, 4, 318, 350, 557, 576, 579], "how": [1, 3, 5, 7, 214, 250, 251, 257, 272, 273, 292, 319, 322, 329, 544, 545, 546, 548, 550, 552, 558, 569, 570, 573, 578, 579, 580], "now": [1, 2, 214, 250, 513, 548, 552, 572, 578, 579], "auto": [1, 335, 360], "method": [1, 2, 3, 4, 6, 70, 131, 143, 160, 161, 172, 190, 195, 196, 197, 199, 203, 206, 207, 208, 211, 214, 217, 218, 228, 233, 234, 235, 237, 241, 244, 245, 246, 248, 250, 257, 264, 265, 270, 273, 279, 281, 282, 283, 287, 297, 306, 307, 309, 310, 311, 313, 315, 316, 317, 331, 500, 505, 509, 527, 545, 547, 550, 551, 553, 563, 567, 569, 570, 573, 574, 578, 579], "avoid": [1, 197, 235, 577], "below": [1, 4, 7, 79, 91, 99, 298, 336, 338, 343, 543, 546, 550, 552, 558, 563, 566, 567, 569, 572, 573, 576, 577, 579], "you": [1, 4, 6, 195, 197, 233, 235, 261, 277, 279, 294, 303, 544, 545, 546, 547, 548, 552, 555, 561, 562, 563, 575, 576, 577], "log": [1, 164, 284, 289, 363, 380, 391, 394, 401, 407, 409, 410, 466, 500, 506, 507, 508, 509, 514, 528, 544, 576, 577, 579], "fail": [1, 131, 509], "trace": [1, 70, 168, 172, 252, 254, 334, 340, 579], "info": [1, 37, 39, 42, 45, 70, 131, 208, 211, 212, 217, 218, 222, 254, 292, 298, 312, 322, 333, 380, 381, 383, 390, 391, 394, 395, 397, 400, 500, 503, 508, 515, 531, 544, 546, 555, 565], "entir": [1, 3, 4, 334, 569, 570], "conduct": 1, "imper": 1, "control": [1, 37, 39, 42, 72, 111, 173, 175, 273, 407, 412, 544, 568, 579], "flow": [1, 2, 257, 262, 263, 284, 289, 304, 305], "therefor": [1, 4, 570, 573, 575], "int8": [1, 4, 7, 37, 39, 42, 45, 69, 70, 71, 72, 161, 168, 176, 210, 247, 252, 253, 254, 338, 354, 355, 415, 543, 544, 548, 551, 557, 572, 573, 574, 575, 576, 577, 578, 580], "lot": [1, 553], "9": [1, 3, 4, 6, 182, 272, 299, 561, 569, 570, 572, 579, 580, 581], "between": [1, 3, 7, 72, 161, 168, 176, 214, 216, 250, 262, 264, 265, 270, 272, 273, 304, 306, 307, 329, 415, 527, 531, 545, 550, 555, 560, 563, 573, 575, 576, 578, 579], "don": [1, 36, 161, 176, 322, 505, 544, 579], "t": [1, 3, 7, 36, 92, 93, 95, 131, 160, 161, 176, 214, 217, 218, 250, 263, 272, 273, 277, 298, 305, 322, 505, 514, 544, 545, 547, 550, 552, 564, 569, 579, 580, 581], "need": [1, 4, 7, 36, 37, 39, 42, 44, 45, 70, 72, 77, 78, 79, 80, 83, 84, 87, 89, 90, 91, 94, 96, 97, 98, 100, 102, 103, 105, 106, 107, 108, 109, 112, 114, 115, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 152, 153, 157, 160, 177, 185, 186, 187, 195, 196, 199, 206, 207, 208, 214, 217, 218, 219, 220, 225, 233, 234, 237, 244, 245, 246, 250, 251, 257, 264, 265, 270, 277, 279, 284, 289, 298, 306, 307, 310, 312, 315, 322, 334, 338, 342, 345, 359, 360, 534, 544, 545, 547, 548, 550, 552, 560, 564, 566, 569, 572, 573, 574, 575, 578, 579, 580], "becaus": [1, 214, 250, 261, 292, 303, 322, 569, 573, 578, 579], "modifi": [1, 81, 87, 95, 106, 199, 237, 257, 284, 289, 295, 330, 494, 544, 545, 552, 557, 580], "sourc": [1, 6, 37, 39, 46, 72, 218, 257, 259, 267, 279, 301, 428, 562, 571], "8": [1, 3, 4, 6, 134, 213, 249, 505, 557, 561, 566, 571, 579, 581], "As": [1, 106, 261, 303, 544, 547, 550, 553, 569, 570, 579], "cannot": [1, 261, 303, 503, 555, 556, 577], "iter": [1, 2, 4, 7, 37, 39, 42, 44, 45, 46, 70, 72, 166, 185, 186, 190, 195, 199, 200, 203, 208, 217, 218, 228, 233, 237, 238, 241, 246, 281, 294, 296, 329, 332, 334, 353, 354, 355, 380, 508, 516, 547, 550, 569, 570, 572, 577, 579, 580], "so": [1, 7, 143, 214, 250, 294, 350, 553, 556, 560, 563, 573, 574, 577, 578], "might": [1, 544, 546, 579], "meet": [1, 6, 298, 335, 338, 343, 555, 566, 571, 572, 573, 577, 579], "failur": [1, 527], "sometim": [1, 131, 160, 569, 573], "order": [1, 12, 172, 258, 259, 279, 298, 300, 301, 336, 337, 338, 342, 343, 444, 447, 456, 517, 563, 569, 572, 577, 579], "successfulli": [1, 552, 571], "suggest": [1, 279, 283, 337, 576], "two": [1, 2, 118, 131, 168, 199, 203, 204, 208, 215, 237, 241, 242, 246, 261, 292, 296, 298, 303, 322, 329, 332, 360, 544, 545, 548, 550, 552, 557, 563, 564, 567, 569, 573, 574, 576, 579, 580], "first": [1, 2, 3, 4, 7, 46, 72, 118, 161, 176, 179, 197, 213, 235, 249, 251, 257, 261, 303, 335, 338, 424, 544, 548, 555, 561, 564, 572, 573, 574, 576, 577, 579, 580], "pass": [1, 3, 4, 7, 102, 106, 166, 177, 213, 249, 257, 277, 279, 284, 289, 295, 298, 330, 360, 458, 514, 527, 528, 545, 547, 548, 550, 552, 555, 558, 563, 566, 569, 572, 573, 574, 580], "non": [1, 3, 143, 221, 293, 568, 569, 579], "traceabl": [1, 70], "class": [1, 2, 3, 63, 137, 282, 328, 334, 438, 439, 545, 547, 548, 550, 553, 563, 566, 567, 577, 579, 580], "name": [1, 3, 6, 37, 39, 45, 46, 69, 70, 72, 78, 87, 88, 92, 93, 95, 131, 136, 137, 153, 160, 166, 168, 173, 175, 179, 197, 198, 199, 202, 203, 206, 207, 208, 211, 212, 214, 215, 216, 218, 219, 221, 222, 223, 235, 236, 237, 240, 241, 244, 245, 246, 248, 250, 252, 253, 254, 260, 261, 264, 265, 270, 271, 273, 279, 284, 287, 289, 292, 294, 296, 298, 302, 303, 306, 307, 312, 316, 317, 319, 322, 329, 331, 332, 351, 354, 360, 380, 384, 385, 387, 390, 391, 392, 393, 394, 396, 415, 424, 426, 444, 447, 449, 450, 456, 463, 464, 465, 466, 477, 493, 500, 503, 515, 517, 518, 539, 544, 545, 548, 552, 553, 557, 562, 563, 565, 568, 575, 576, 577, 579, 580, 581], "select": [1, 2, 197, 235, 269, 273, 280, 331, 343, 544, 560, 561, 570, 573, 577, 579], "proxi": 1, "object": [1, 2, 3, 6, 12, 37, 39, 42, 44, 45, 69, 70, 72, 81, 82, 83, 84, 85, 86, 87, 88, 98, 99, 103, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 125, 126, 129, 130, 131, 134, 137, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159, 160, 168, 172, 173, 175, 177, 178, 179, 185, 186, 187, 188, 190, 191, 195, 197, 198, 199, 203, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 228, 233, 235, 236, 237, 241, 244, 245, 246, 248, 249, 250, 251, 254, 256, 257, 258, 261, 264, 265, 266, 269, 270, 272, 280, 281, 283, 284, 285, 286, 287, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 306, 307, 310, 311, 312, 313, 316, 317, 319, 322, 329, 330, 331, 332, 333, 334, 337, 345, 351, 353, 354, 355, 359, 360, 377, 392, 393, 396, 399, 440, 505, 508, 515, 525, 527, 528, 532, 544, 545, 547, 548, 556, 563, 564, 565, 567, 572, 573, 578, 579], "them": [1, 87, 131, 197, 235, 547, 557, 558, 567, 569, 579], "prepar": [1, 3, 4, 6, 44, 70, 224, 251, 257, 284, 289, 295, 297, 402, 407, 495, 548, 552, 573], "dict": [1, 37, 39, 42, 44, 45, 70, 72, 134, 136, 137, 143, 166, 168, 172, 178, 179, 185, 186, 196, 199, 215, 216, 221, 234, 237, 252, 253, 254, 257, 260, 261, 262, 263, 265, 268, 270, 273, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292, 293, 294, 295, 296, 302, 303, 304, 305, 307, 311, 316, 319, 322, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 349, 351, 353, 354, 359, 360, 361, 363, 366, 373, 374, 375, 377, 378, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 420, 421, 424, 432, 441, 444, 451, 459, 460, 461, 463, 465, 466, 467, 468, 473, 477, 480, 483, 484, 485, 486, 488, 490, 491, 493, 500, 501, 503, 505, 507, 508, 511, 513, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 531, 532, 534, 536, 538, 539, 541, 563, 572, 577, 579], "tutori": [1, 571], "prototyp": 1, "guid": [1, 6, 197, 235, 548, 550, 561], "highlight": [1, 429, 432, 544], "decor": [1, 2, 7, 37, 63, 92, 93, 95, 166, 173, 175, 208, 211, 214, 221, 246, 248, 250, 264, 265, 282, 287, 292, 294, 296, 306, 307, 318, 322, 328, 329, 332, 345, 360, 510, 579], "If": [1, 87, 92, 93, 95, 99, 106, 131, 185, 186, 199, 214, 237, 250, 261, 273, 292, 293, 294, 303, 334, 335, 544, 546, 548, 552, 555, 561, 562, 563, 564, 566, 567, 573, 576, 577, 578, 579], "untrac": 1, "part": [1, 46, 251, 257, 261, 292, 294, 303, 329, 547, 550, 561, 564, 569], "global": [1, 136, 182, 292, 299, 322, 329, 528, 572, 579], "function": [1, 2, 4, 7, 39, 42, 45, 72, 87, 131, 160, 185, 186, 198, 224, 236, 256, 257, 268, 279, 280, 281, 284, 289, 295, 298, 315, 330, 351, 354, 544, 545, 547, 550, 558, 560, 561, 563, 564, 569, 570, 573, 576, 577, 579], "call": [1, 2, 7, 36, 44, 143, 224, 257, 261, 272, 273, 284, 289, 292, 294, 295, 303, 329, 379, 412, 500, 508, 509, 544, 547, 558, 569, 573, 577, 578], "want": [1, 7, 92, 93, 95, 131, 195, 197, 233, 235, 294, 338, 350, 544, 545, 548, 552, 563, 566, 567, 576, 577, 579], "move": [1, 72, 572, 575], "out": [1, 6, 160, 197, 198, 199, 235, 236, 237, 256, 257, 279, 292, 297, 315, 322, 546, 548, 572, 573], "keep": [1, 7, 292, 293, 333, 338, 575, 579], "should": [1, 2, 3, 7, 39, 42, 45, 46, 70, 71, 72, 79, 99, 136, 137, 161, 165, 185, 186, 195, 197, 199, 203, 208, 213, 214, 218, 219, 233, 235, 237, 241, 246, 249, 250, 254, 259, 264, 265, 294, 298, 301, 306, 307, 322, 329, 334, 345, 360, 424, 505, 544, 548, 552, 563, 566, 570, 573, 578, 579, 580], "try": [1, 195, 233, 444, 447, 456, 528, 555, 573], "must": [1, 214, 250, 261, 265, 303, 307, 561, 578], "detect": [1, 70, 168, 172, 261, 265, 303, 307, 312, 444, 447, 456, 515, 544], "ssd": [1, 581], "resnet34": [1, 581], "ptq": [1, 552, 560, 573, 577, 579], "r34": 1, "py": [1, 3, 7, 131, 166, 168, 259, 261, 262, 263, 294, 301, 303, 304, 305, 329, 531, 544, 552, 561, 573, 575, 577], "def": [1, 3, 4, 7, 92, 93, 95, 153, 185, 186, 334, 548, 550, 552, 563, 566, 569, 573, 577, 579], "bboxes_labels_scor": 1, "bbox": [1, 261, 303, 563], "prob": 1, "criteria": [1, 256, 257, 284, 289, 292, 294, 297, 299, 320, 343], "0": [1, 3, 4, 6, 9, 37, 39, 42, 46, 69, 70, 71, 78, 116, 160, 166, 174, 182, 187, 189, 192, 193, 194, 196, 197, 200, 201, 204, 210, 214, 216, 217, 218, 225, 227, 230, 231, 232, 234, 235, 238, 239, 242, 247, 250, 252, 254, 256, 257, 265, 270, 272, 273, 277, 279, 282, 284, 289, 292, 297, 299, 307, 322, 332, 338, 500, 508, 544, 545, 547, 548, 550, 552, 553, 555, 557, 562, 563, 564, 566, 568, 569, 570, 572, 573, 576, 577, 578, 579, 580], "45": [1, 272, 581], "max_output": 1, "200": [1, 213, 249, 579, 581], "box": [1, 214, 250, 261, 265, 303, 307, 337, 544, 563, 577, 578, 579], "label": [1, 12, 37, 39, 72, 185, 186, 197, 199, 200, 201, 202, 205, 210, 214, 216, 218, 219, 235, 237, 238, 239, 240, 243, 247, 250, 258, 260, 264, 265, 270, 271, 300, 302, 306, 307, 334, 432, 548, 563, 569, 578], "score": [1, 12, 258, 259, 261, 262, 263, 265, 278, 292, 294, 300, 301, 303, 304, 305, 307, 319, 322, 329, 331, 340, 343, 563, 566, 569, 570, 576, 579], "zip": 1, "split": [1, 160, 213, 214, 249, 250, 270, 578], "squeez": 1, "dbox": 1, "dlabel": 1, "dscore": 1, "decode_singl": 1, "append": [1, 3, 172, 298, 337, 566, 567], "return": [1, 2, 3, 4, 12, 37, 39, 42, 44, 45, 46, 69, 70, 72, 75, 78, 81, 82, 85, 86, 87, 88, 92, 93, 95, 99, 106, 110, 111, 115, 116, 117, 118, 119, 120, 128, 131, 134, 136, 137, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 166, 168, 172, 173, 175, 179, 185, 186, 187, 189, 196, 199, 203, 206, 207, 208, 210, 211, 213, 214, 215, 216, 221, 225, 227, 234, 237, 241, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 273, 279, 280, 281, 282, 283, 284, 287, 289, 292, 293, 294, 295, 296, 298, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 315, 316, 317, 318, 322, 328, 329, 330, 331, 332, 333, 334, 337, 338, 342, 345, 346, 349, 350, 353, 354, 355, 359, 360, 380, 381, 383, 390, 391, 392, 393, 394, 396, 397, 399, 400, 424, 427, 428, 429, 430, 461, 500, 503, 505, 507, 508, 509, 515, 518, 527, 528, 531, 548, 552, 563, 564, 565, 566, 573, 577, 579], "process": [2, 4, 7, 37, 39, 42, 45, 70, 72, 137, 168, 185, 186, 197, 198, 199, 208, 210, 211, 214, 215, 224, 235, 236, 237, 246, 247, 248, 250, 251, 252, 254, 257, 268, 269, 272, 278, 280, 281, 284, 289, 292, 294, 295, 296, 298, 299, 322, 329, 330, 332, 333, 334, 337, 359, 376, 459, 460, 463, 496, 500, 504, 507, 508, 516, 544, 545, 547, 548, 550, 551, 552, 555, 567, 569, 570, 573, 577, 578, 579, 580], "autom": 2, "design": [2, 143, 196, 218, 219, 224, 234, 257, 272, 297, 306, 307, 338, 569, 570, 573], "artifici": 2, "network": [2, 3, 6, 168, 270, 273, 294, 319, 322, 340, 544, 550, 551, 555, 571, 573, 579], "ann": 2, "ha": [2, 7, 12, 37, 39, 42, 45, 70, 72, 87, 88, 92, 93, 95, 99, 118, 131, 143, 160, 215, 257, 258, 272, 292, 294, 300, 322, 329, 544, 547, 555, 560, 564, 570, 572, 573, 574, 576, 579], "been": [2, 12, 88, 213, 249, 258, 272, 292, 294, 300, 322, 329, 544, 550, 564], "par": 2, "outperform": 2, "hand": [2, 261, 303, 544], "compressor": [2, 7, 44, 70, 209, 210, 211, 214, 215, 218, 221, 224, 247, 248, 250, 252, 257, 264, 265, 267, 292, 295, 297, 298, 306, 307, 312, 322, 330, 341, 346, 419, 423, 447, 456, 495, 502, 515, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 569, 571, 573, 575, 577, 578, 579, 580], "our": [2, 3, 6, 161, 555, 576], "leverag": [2, 100, 550, 567, 573], "algorithm": [2, 6, 7, 12, 44, 178, 213, 249, 258, 265, 268, 272, 280, 281, 283, 300, 307, 337, 354, 355, 550, 557, 560, 569, 570, 573, 577, 579, 580], "built": [2, 7, 100, 143, 188, 193, 197, 198, 203, 205, 207, 208, 210, 211, 214, 218, 219, 221, 226, 229, 231, 235, 236, 241, 243, 245, 246, 247, 248, 250, 298, 306, 307, 545, 552, 566, 578, 579, 580], "grid": [2, 283], "random": [2, 80, 160, 166, 210, 214, 247, 250, 270, 283, 299, 337, 341, 525, 553, 572, 578, 580], "bayesian": [2, 283, 299, 341, 562, 572], "optim": [2, 3, 4, 6, 10, 45, 70, 78, 82, 85, 86, 88, 99, 100, 110, 111, 117, 118, 119, 120, 137, 160, 178, 182, 218, 224, 251, 256, 257, 271, 283, 294, 295, 297, 299, 319, 329, 330, 331, 337, 350, 351, 354, 361, 363, 367, 369, 371, 388, 392, 393, 399, 401, 402, 403, 404, 405, 406, 407, 409, 410, 412, 413, 415, 416, 417, 418, 419, 422, 423, 436, 490, 496, 497, 507, 513, 516, 519, 523, 530, 535, 550, 552, 557, 560, 561, 562, 565, 568, 569, 571, 572, 573, 574, 576, 577, 579, 580], "propos": [2, 7, 281, 322, 550, 564, 569], "base": [2, 7, 12, 37, 39, 42, 44, 45, 69, 70, 71, 72, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 134, 137, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 173, 174, 175, 176, 177, 178, 179, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 261, 264, 265, 266, 268, 269, 270, 272, 273, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 292, 294, 296, 297, 298, 299, 300, 303, 306, 307, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 322, 329, 331, 332, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 351, 354, 355, 360, 365, 366, 367, 369, 370, 371, 372, 375, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 419, 420, 421, 423, 426, 428, 429, 432, 442, 444, 447, 449, 451, 452, 454, 455, 456, 457, 465, 468, 473, 477, 480, 483, 493, 497, 499, 501, 503, 507, 508, 509, 510, 513, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 528, 529, 531, 533, 537, 538, 548, 551, 552, 553, 557, 568, 570, 576, 577, 579, 581], "given": [2, 36, 44, 45, 46, 72, 92, 93, 95, 136, 137, 166, 213, 214, 249, 250, 261, 303, 315, 322, 329, 334, 345, 424, 430, 444, 447, 449, 450, 452, 454, 455, 457, 501, 515, 528, 547, 569, 570, 578], "train": [2, 3, 6, 7, 37, 39, 42, 45, 70, 72, 87, 143, 185, 186, 197, 199, 214, 224, 235, 237, 250, 251, 257, 267, 268, 270, 271, 278, 280, 284, 289, 294, 295, 297, 298, 329, 330, 334, 345, 353, 523, 543, 548, 550, 551, 555, 560, 564, 567, 569, 570, 571, 576, 579, 580, 581], "evalu": [2, 3, 4, 7, 12, 37, 39, 42, 45, 70, 72, 177, 185, 186, 197, 215, 224, 235, 251, 256, 257, 258, 261, 262, 263, 264, 265, 267, 268, 269, 272, 273, 280, 281, 284, 289, 294, 295, 298, 299, 300, 303, 304, 305, 306, 307, 322, 329, 330, 334, 345, 353, 365, 367, 369, 371, 372, 373, 496, 504, 516, 520, 547, 548, 550, 558, 560, 563, 564, 566, 569, 573, 576, 577, 579, 580], "potenti": 2, "after": [2, 3, 4, 44, 46, 70, 172, 197, 210, 214, 217, 218, 224, 235, 247, 250, 251, 252, 254, 257, 270, 292, 294, 295, 296, 319, 322, 329, 330, 331, 332, 338, 501, 544, 545, 547, 548, 550, 555, 560, 563, 566, 567, 569, 570, 573, 574, 576, 577, 578, 579], "sever": [2, 3, 160, 214, 250, 296, 332, 544, 550, 560, 564, 569, 570, 572, 578, 579, 580], "procedur": [2, 178, 322, 338], "lie": [2, 281], "pareto": [2, 281, 282], "front": [2, 281, 282], "dyna": [2, 257, 270, 271, 272, 273, 274, 280, 299, 560, 572], "super": [2, 3, 4, 263, 270, 273, 305, 566], "metric": [2, 6, 7, 10, 12, 37, 39, 42, 45, 70, 72, 185, 186, 215, 218, 251, 256, 257, 267, 268, 269, 271, 273, 280, 281, 282, 283, 284, 289, 297, 298, 299, 334, 353, 373, 377, 383, 388, 402, 405, 407, 412, 436, 496, 504, 507, 512, 515, 516, 518, 534, 544, 545, 547, 552, 564, 576, 577, 579, 580, 581], "predictor": [2, 269, 270, 271, 273, 280], "predict": [2, 3, 12, 166, 214, 218, 219, 250, 258, 262, 263, 264, 265, 271, 273, 300, 304, 305, 306, 307, 550, 563, 577, 578], "4x": [2, 3, 573], "more": [2, 3, 4, 5, 6, 87, 160, 166, 185, 214, 250, 261, 277, 279, 292, 303, 322, 345, 544, 548, 550, 552, 560, 561, 563, 564, 566, 567, 569, 570, 574, 579, 581], "sampl": [2, 6, 102, 128, 187, 190, 195, 197, 198, 199, 203, 208, 210, 214, 225, 228, 233, 235, 236, 237, 241, 246, 247, 250, 264, 265, 282, 306, 307, 337, 391, 447, 516, 547, 548, 560, 573, 578, 579, 580, 581], "effici": [2, 547, 550, 567, 571], "than": [2, 3, 4, 79, 87, 177, 197, 214, 235, 250, 261, 303, 548, 558, 563, 566, 567, 569, 573, 576, 578, 579], "typic": [2, 87, 136, 143, 257, 267, 298, 551, 569, 570], "one": [2, 6, 7, 12, 72, 131, 136, 153, 188, 191, 208, 214, 224, 250, 257, 258, 261, 264, 265, 267, 270, 292, 295, 296, 300, 303, 306, 307, 322, 330, 332, 350, 509, 544, 547, 550, 551, 552, 557, 560, 561, 563, 564, 566, 567, 569, 570, 572, 573, 575, 578, 579], "shot": [2, 6, 224, 257, 294, 296, 319, 332, 560, 569, 570, 571], "shown": [2, 424, 544, 550, 563, 566, 567, 579], "figur": [2, 569], "phase": [2, 173, 175, 298, 329, 330, 569, 570, 573, 574, 579], "small": [2, 4, 261, 303, 340, 544, 579], "popul": [2, 272], "sub": [2, 70, 77, 78, 79, 80, 83, 84, 89, 90, 91, 94, 96, 97, 98, 100, 102, 103, 105, 107, 108, 109, 112, 114, 115, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 215, 254, 257, 273, 345, 545, 579], "randomli": [2, 214, 250, 283, 337, 344, 578, 579], "valid": [2, 7, 37, 39, 42, 70, 71, 72, 79, 131, 160, 199, 237, 261, 273, 293, 294, 303, 316, 322, 329, 333, 463, 532, 548, 550, 557, 560, 562, 569, 570, 573, 575], "measur": [2, 7, 37, 39, 42, 45, 70, 72, 166, 215, 272, 273, 278, 318, 534, 545, 550, 563, 577, 579], "provid": [2, 7, 131, 143, 185, 186, 208, 211, 214, 224, 246, 248, 250, 256, 257, 261, 270, 279, 284, 289, 297, 298, 303, 334, 424, 444, 450, 500, 509, 534, 543, 544, 545, 546, 547, 551, 552, 553, 554, 555, 560, 561, 564, 565, 572, 573, 577, 579, 580, 581], "initi": [2, 3, 69, 137, 166, 185, 186, 194, 197, 216, 224, 232, 235, 251, 257, 268, 269, 280, 281, 293, 294, 298, 315, 329, 345, 379, 402, 403, 412, 461, 493, 495, 503, 516, 523, 547, 548, 563, 564, 569, 570, 579], "inner": 2, "multi": [2, 99, 215, 257, 261, 272, 277, 279, 303, 343, 373, 547, 548, 560, 566, 569, 579], "evolutionari": 2, "extens": [2, 7, 70, 298, 450, 515, 557, 560, 564, 565, 571, 579, 580], "next": [2, 185, 190, 228, 255, 281, 296, 332, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 544, 564, 572, 579], "cycl": [2, 547], "continu": [2, 261, 292, 303, 322, 338, 569], "until": [2, 343, 579], "conclud": 2, "count": [2, 3, 44, 281, 322, 338, 548], "met": [2, 186, 345, 557, 564, 573, 577], "tensorflow": [2, 3, 6, 7, 78, 100, 102, 106, 131, 143, 166, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 211, 214, 216, 221, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 248, 250, 254, 255, 256, 257, 259, 261, 264, 265, 266, 267, 297, 301, 303, 306, 307, 316, 334, 343, 422, 423, 435, 436, 443, 492, 493, 494, 496, 544, 550, 554, 555, 557, 560, 561, 562, 564, 565, 569, 571, 572, 573, 576, 579, 580], "Not": [2, 215, 224, 257, 284, 289, 499], "yet": [2, 42, 45, 72, 322, 544], "simplest": [2, 550], "launcher": [2, 550, 569], "experiment": [2, 4, 12, 209, 299, 493, 545, 547, 548, 550, 552, 555, 564, 565, 566, 567, 569, 572, 574, 575, 578], "agent": 2, "also": [2, 3, 6, 7, 12, 196, 199, 203, 208, 214, 234, 237, 241, 246, 250, 258, 300, 322, 334, 343, 544, 545, 546, 547, 550, 560, 563, 566, 567, 569, 573, 574, 579], "nasconfig": [2, 178, 257, 269, 280, 281], "argument": [2, 257, 277, 279, 284, 289, 295, 298, 330, 362, 470, 474, 479, 482, 488, 500, 508, 528, 545, 550], "config": [2, 6, 42, 44, 45, 70, 71, 72, 134, 136, 137, 143, 177, 185, 186, 197, 215, 224, 235, 256, 257, 270, 278, 281, 284, 289, 292, 293, 294, 295, 296, 299, 319, 322, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 349, 350, 353, 359, 360, 361, 362, 365, 366, 367, 369, 371, 372, 375, 401, 407, 409, 410, 414, 415, 459, 461, 468, 470, 473, 474, 477, 479, 480, 482, 483, 490, 493, 496, 504, 515, 518, 519, 520, 521, 523, 525, 526, 528, 536, 538, 541, 544, 548, 550, 552, 555, 560, 565, 569, 572, 574, 576, 577, 579], "search_algorithm": [2, 178, 257, 280, 281, 299], "nsga2": [2, 272], "supernet": [2, 272, 273, 275, 276], "ofa_mbv3_d234_e346_k357_w1": 2, "acc": [2, 3, 42, 45, 265, 273, 307, 318, 577, 581], "mac": [2, 269, 271, 273, 278, 280], "50": [2, 261, 263, 272, 303, 305, 581], "num_ev": [2, 272], "250": 2, "results_csv_path": 2, "search_result": 2, "csv": [2, 270, 273, 515, 544], "batch_siz": [2, 3, 187, 189, 192, 193, 194, 195, 196, 197, 198, 217, 218, 225, 227, 230, 231, 232, 233, 234, 235, 236, 252, 254, 273, 278, 366, 380, 391, 493, 516, 545, 547, 548, 552, 555, 558, 573], "64": [2, 3, 214, 250, 578, 581], "dataset_path": [2, 273, 278, 516], "dataset": [2, 4, 6, 7, 14, 37, 39, 42, 45, 70, 72, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 208, 217, 218, 225, 227, 228, 230, 231, 232, 233, 234, 246, 256, 257, 261, 262, 263, 265, 267, 273, 297, 298, 299, 303, 304, 305, 307, 334, 380, 388, 391, 394, 402, 407, 411, 412, 413, 424, 436, 513, 515, 516, 517, 545, 547, 552, 553, 563, 569, 570, 573, 579, 580, 581], "imagenet": [2, 4, 199, 202, 210, 237, 240, 247, 273, 577, 578, 580, 581], "ilsvrc2012": [2, 273], "under": [2, 3, 131, 143, 199, 237, 359, 544, 548, 562, 563, 567, 569, 570, 573, 577, 579], "file": [2, 7, 70, 160, 166, 177, 178, 185, 186, 197, 198, 199, 202, 213, 214, 223, 235, 236, 237, 240, 249, 250, 251, 254, 256, 257, 261, 267, 268, 269, 270, 271, 273, 280, 281, 284, 289, 293, 295, 297, 298, 299, 303, 330, 333, 334, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 424, 461, 470, 474, 484, 500, 507, 508, 514, 515, 516, 528, 532, 536, 538, 540, 541, 544, 548, 552, 556, 558, 562, 563, 565, 566, 569, 572, 577, 578], "input": [2, 7, 37, 39, 44, 46, 69, 70, 72, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 96, 97, 98, 99, 103, 105, 106, 107, 108, 109, 110, 112, 115, 116, 125, 126, 128, 129, 130, 131, 136, 137, 143, 160, 166, 168, 172, 185, 186, 197, 198, 199, 201, 210, 213, 214, 216, 218, 219, 224, 235, 236, 237, 239, 247, 249, 250, 251, 252, 253, 254, 256, 257, 261, 266, 273, 277, 279, 284, 289, 298, 303, 306, 307, 312, 315, 316, 317, 322, 329, 334, 360, 362, 373, 396, 401, 402, 404, 407, 408, 409, 410, 411, 444, 447, 454, 455, 456, 458, 470, 474, 479, 482, 488, 513, 516, 522, 544, 547, 548, 550, 552, 555, 557, 558, 563, 564, 565, 569, 572, 573, 577, 578, 580], "aim": [2, 547, 570, 579], "accord": [2, 7, 44, 72, 143, 185, 197, 198, 199, 208, 211, 214, 235, 236, 237, 246, 248, 250, 257, 279, 296, 297, 317, 322, 332, 335, 337, 338, 340, 342, 345, 514, 548, 552, 569, 570, 574, 578, 579], "note": [2, 3, 6, 37, 39, 42, 45, 70, 72, 79, 257, 261, 284, 289, 295, 303, 322, 330, 343, 396, 407, 411, 544, 545, 552, 553, 557, 569, 573, 577, 579, 580], "regist": [2, 7, 37, 63, 173, 175, 199, 203, 206, 207, 208, 211, 214, 216, 221, 224, 237, 241, 244, 245, 246, 248, 250, 251, 257, 264, 265, 282, 283, 284, 285, 286, 287, 289, 292, 294, 296, 306, 307, 318, 319, 322, 328, 329, 331, 332, 337, 345, 545, 548, 552, 563, 566, 579], "inherit": [2, 7, 39, 42, 45, 70, 71, 72, 194, 214, 216, 224, 232, 250, 257, 294, 296, 329, 332, 547], "nasbas": [2, 268, 269, 280, 281], "own": [2, 39, 42, 45, 70, 71, 72, 99, 195, 214, 233, 250, 544, 547, 548, 560, 563, 566, 576], "just": [2, 3, 4, 36, 187, 208, 211, 212, 214, 217, 218, 219, 220, 222, 225, 250, 567, 573, 578, 579], "registri": [2, 292, 294, 296, 319, 322, 329, 331, 332], "well": [2, 3, 36, 185, 186, 334, 548, 573, 575, 580], "wai": [2, 198, 199, 202, 236, 237, 240, 544, 547, 548, 563, 567, 569, 570, 573, 579, 580], "mobilenetv3": [2, 272, 273], "lt": [2, 276, 548, 568], "wmt": 2, "en": 2, "de": 2, "static": [3, 4, 7, 70, 131, 160, 255, 270, 298, 334, 373, 377, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 416, 444, 447, 449, 450, 452, 454, 455, 456, 457, 467, 484, 486, 491, 493, 498, 500, 505, 507, 513, 514, 516, 518, 523, 528, 532, 539, 540, 555, 560, 579, 581], "quantiz": [3, 7, 21, 37, 39, 42, 44, 45, 46, 69, 70, 71, 72, 114, 118, 120, 122, 128, 134, 136, 137, 140, 142, 143, 153, 168, 172, 177, 185, 186, 210, 217, 218, 224, 247, 252, 254, 255, 256, 257, 267, 298, 299, 315, 336, 337, 338, 339, 340, 342, 343, 344, 345, 350, 351, 354, 355, 359, 360, 372, 377, 407, 409, 415, 496, 504, 516, 520, 544, 545, 547, 548, 552, 555, 557, 558, 560, 562, 563, 564, 565, 566, 567, 571, 575, 577, 578, 579, 580], "involv": 3, "weight": [3, 4, 6, 7, 37, 39, 69, 70, 72, 85, 86, 87, 143, 160, 161, 168, 176, 252, 254, 264, 265, 279, 288, 292, 294, 296, 306, 307, 316, 317, 319, 322, 329, 331, 332, 340, 420, 525, 543, 544, 551, 555, 557, 558, 563, 566, 569, 570, 572, 573, 577, 579, 580], "float": [3, 4, 12, 37, 39, 42, 45, 69, 70, 72, 131, 160, 168, 197, 210, 235, 247, 257, 258, 259, 261, 262, 263, 270, 272, 273, 284, 289, 292, 294, 295, 296, 300, 301, 303, 304, 305, 316, 317, 322, 329, 330, 331, 332, 337, 363, 381, 390, 399, 400, 415, 421, 476, 484, 500, 501, 505, 507, 513, 515, 516, 523, 525, 526, 534, 543, 548, 553, 563, 572, 573, 578], "int": [3, 37, 39, 42, 44, 45, 70, 72, 131, 160, 166, 187, 196, 197, 198, 210, 214, 225, 234, 235, 236, 247, 250, 252, 254, 259, 261, 265, 270, 272, 273, 282, 301, 303, 307, 318, 322, 338, 366, 379, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 404, 406, 407, 408, 409, 410, 411, 412, 414, 458, 493, 500, 501, 503, 505, 506, 507, 508, 509, 515, 516, 518, 523, 525, 528, 540, 548, 563, 569, 572, 578], "feed": [3, 37, 39, 70, 166, 196, 234, 377, 550], "batch": [3, 4, 37, 39, 42, 44, 72, 87, 136, 187, 189, 190, 195, 196, 217, 218, 224, 225, 227, 228, 233, 234, 257, 273, 277, 279, 284, 289, 343, 350, 380, 391, 513, 544, 547, 550, 569, 578, 579, 581], "data": [3, 6, 7, 10, 37, 39, 42, 44, 45, 46, 69, 70, 72, 80, 128, 131, 160, 166, 168, 172, 177, 185, 186, 215, 216, 217, 218, 252, 254, 255, 257, 273, 278, 292, 298, 299, 315, 322, 334, 337, 343, 360, 361, 363, 366, 373, 374, 375, 377, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 424, 440, 441, 444, 447, 451, 456, 459, 460, 461, 463, 466, 468, 473, 477, 480, 483, 485, 490, 493, 500, 513, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 531, 536, 538, 539, 541, 544, 547, 548, 552, 553, 557, 561, 563, 564, 573, 574, 576, 577, 578, 579], "through": [3, 168, 185, 186, 213, 249, 334, 338, 557, 558, 560, 561, 563, 566, 567, 572], "comput": [3, 4, 12, 69, 72, 87, 143, 168, 224, 251, 257, 258, 259, 261, 262, 263, 265, 271, 300, 301, 303, 304, 305, 307, 551, 563, 564, 569, 570, 573, 579], "distribut": [3, 6, 44, 161, 176, 187, 189, 190, 192, 193, 194, 195, 196, 217, 218, 225, 227, 228, 230, 231, 232, 233, 234, 251, 257, 284, 289, 337, 503, 550, 561, 573, 575, 579, 581], "activ": [3, 4, 6, 7, 37, 39, 42, 45, 46, 70, 72, 149, 168, 223, 252, 254, 420, 543, 544, 551, 553, 557, 568, 572, 573, 577, 580], "observ": [3, 553, 576, 577, 579], "point": [3, 4, 46, 69, 210, 247, 262, 263, 282, 304, 305, 318, 337, 543, 553, 563, 573, 578, 579], "record": [3, 197, 198, 199, 205, 216, 223, 235, 236, 237, 243, 548, 576, 577, 579], "These": [3, 560], "infer": [3, 4, 6, 7, 44, 46, 153, 160, 256, 257, 297, 316, 334, 543, 547, 550, 564, 566, 569, 570, 571, 573, 577, 579], "time": [3, 4, 166, 214, 250, 265, 277, 307, 318, 337, 360, 501, 507, 508, 513, 528, 552, 556, 566, 569, 570, 571, 573, 576, 577, 578, 579], "A": [3, 6, 39, 45, 70, 72, 79, 81, 95, 99, 100, 131, 134, 136, 137, 143, 160, 166, 172, 199, 203, 208, 213, 214, 217, 218, 219, 220, 237, 241, 246, 249, 250, 251, 257, 258, 261, 262, 263, 265, 268, 280, 281, 282, 283, 284, 285, 286, 287, 289, 292, 293, 294, 295, 296, 300, 303, 304, 305, 306, 307, 310, 312, 319, 322, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 342, 343, 344, 346, 349, 547, 554, 557, 563, 565, 569, 571, 578, 579, 580], "simpl": [3, 6, 214, 250, 544, 561, 576, 579], "techniqu": [3, 4, 6, 257, 560, 567, 569, 570, 572, 573, 580], "would": [3, 131, 322, 546, 564, 570, 573], "simpli": [3, 294, 552, 565], "divid": [3, 579], "rang": [3, 4, 7, 200, 201, 214, 238, 239, 250, 261, 270, 303, 350, 548, 550, 552, 553, 569, 573, 578], "256": [3, 204, 210, 242, 247, 545, 547, 548, 552, 578, 581], "support": [3, 39, 42, 45, 69, 70, 71, 72, 99, 106, 123, 185, 186, 187, 196, 197, 199, 203, 206, 207, 208, 210, 211, 214, 215, 216, 217, 218, 221, 224, 225, 234, 235, 237, 241, 244, 245, 246, 247, 248, 250, 257, 264, 265, 267, 272, 273, 279, 282, 284, 285, 286, 287, 289, 292, 294, 298, 306, 307, 312, 318, 322, 329, 334, 343, 353, 354, 355, 377, 444, 447, 449, 450, 452, 454, 455, 456, 457, 463, 497, 505, 515, 544, 545, 553, 570, 571, 574, 576, 579, 581], "sophist": 3, "addit": [3, 87, 95, 172, 185, 350, 500, 544, 550, 575], "step": [3, 4, 37, 39, 42, 72, 118, 224, 257, 292, 294, 295, 296, 318, 319, 322, 329, 330, 331, 332, 350, 544, 546, 550, 551, 552, 564, 569, 570, 572, 574, 576, 577, 579], "allow": [3, 4, 221, 337, 532, 544, 545, 550, 552, 553, 563, 564, 572, 580], "u": [3, 95, 161, 176], "instead": [3, 178, 179, 196, 234, 360], "back": [3, 37, 39, 42, 45, 70, 72, 143, 214, 250, 270], "everi": [3, 7, 42, 71, 92, 93, 95, 292, 294, 295, 322, 329, 330, 569, 579], "signific": [3, 6, 571, 573], "speed": [3, 6, 570, 571, 573], "up": [3, 6, 44, 95, 126, 214, 250, 257, 273, 284, 289, 293, 318, 401, 544, 552, 557, 560, 571, 572, 573, 576, 578, 580], "pre": [3, 137, 185, 186, 197, 235, 278, 334, 548, 550, 564, 569, 571, 573, 577, 579], "notabl": 3, "modif": [3, 7, 484, 547, 557], "enabl": [3, 6, 70, 72, 279, 294, 329, 503, 544, 552, 564, 568, 569, 570, 571, 574, 579], "replac": [3, 45, 110, 111, 131, 263, 305, 338, 515, 552, 575], "quantstub": 3, "dequantstub": 3, "begin": [3, 137, 224, 257, 284, 289, 294, 295, 319, 329, 330, 550, 569, 579], "end": [3, 4, 7, 131, 166, 197, 213, 214, 224, 235, 249, 250, 257, 270, 294, 295, 318, 329, 330, 550, 557, 561, 566, 569, 570, 577, 578, 579], "relu6": [3, 99, 557], "_make_divis": 3, "v": [3, 95, 580], "divisor": 3, "min_valu": 3, "none": [3, 7, 12, 37, 39, 42, 44, 45, 46, 69, 70, 72, 88, 115, 131, 137, 143, 160, 166, 168, 172, 177, 178, 179, 182, 185, 186, 187, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 210, 214, 215, 216, 217, 218, 224, 225, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 247, 250, 251, 252, 254, 256, 257, 258, 261, 264, 265, 266, 267, 268, 270, 272, 273, 277, 279, 280, 281, 284, 288, 289, 293, 294, 297, 298, 299, 300, 303, 306, 307, 313, 316, 317, 318, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 350, 351, 353, 354, 359, 360, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 379, 381, 382, 383, 384, 385, 387, 389, 391, 392, 393, 395, 398, 401, 402, 403, 406, 407, 410, 412, 413, 414, 429, 444, 447, 449, 456, 461, 463, 468, 470, 473, 474, 477, 479, 480, 482, 483, 484, 485, 489, 490, 493, 495, 498, 500, 501, 503, 506, 508, 509, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 527, 528, 532, 540, 548, 563, 573, 577, 578, 579], "taken": [3, 185, 186, 334], "origin": [3, 69, 70, 172, 197, 214, 215, 235, 250, 257, 270, 279, 284, 289, 292, 293, 294, 295, 322, 329, 330, 333, 338, 342, 363, 548, 569, 570, 573, 578, 579, 580], "tf": [3, 6, 72, 137, 143, 166, 196, 197, 198, 199, 214, 234, 235, 236, 237, 250, 316, 363, 544, 552, 565, 571, 574, 578], "repo": [3, 197, 235, 548, 554], "It": [3, 6, 7, 70, 78, 87, 185, 186, 223, 257, 263, 265, 270, 271, 282, 292, 297, 298, 305, 307, 322, 334, 337, 338, 339, 342, 345, 544, 545, 550, 569, 570, 573, 576, 579, 580], "ensur": [3, 44, 46, 214, 250, 295, 330, 337, 379, 412, 444, 447, 449, 456, 498, 544, 552, 553, 555, 573, 578], "layer": [3, 7, 37, 39, 42, 45, 70, 71, 72, 95, 136, 137, 143, 216, 223, 257, 279, 284, 289, 292, 293, 295, 322, 330, 333, 351, 353, 354, 360, 527, 547, 551, 560, 569, 570, 575], "channel": [3, 7, 161, 176, 210, 214, 247, 250, 273, 277, 292, 322, 444, 447, 456, 560, 561, 569, 570, 578, 581], "number": [3, 4, 70, 92, 93, 187, 195, 198, 210, 214, 225, 233, 236, 247, 250, 262, 263, 265, 272, 281, 292, 304, 305, 307, 322, 329, 332, 337, 354, 355, 447, 503, 513, 516, 544, 548, 552, 553, 563, 569, 573, 576, 578, 579], "divis": 3, "seen": [3, 7, 360], "here": [3, 4, 6, 36, 95, 143, 261, 268, 279, 280, 303, 544, 548, 552, 555, 557, 563, 566, 569, 573, 575, 576], "github": [3, 6, 168, 197, 235, 258, 259, 262, 263, 292, 295, 300, 301, 304, 305, 322, 330, 459, 461, 502, 544, 546, 548, 554, 561, 562, 575], "blob": [3, 168, 258, 259, 262, 263, 292, 300, 301, 304, 305, 322], "master": [3, 258, 259, 262, 263, 292, 295, 300, 301, 304, 305, 322, 330], "research": [3, 562], "slim": [3, 261, 303, 316, 565], "net": 3, "mobilenet": [3, 576, 581], "param": [3, 7, 46, 69, 70, 71, 72, 86, 92, 93, 95, 115, 116, 131, 160, 166, 168, 172, 187, 215, 221, 225, 261, 264, 265, 279, 303, 306, 307, 312, 316, 334, 337, 360, 382, 414, 515, 518, 565, 579], "new_v": 3, "max": [3, 45, 46, 69, 72, 161, 176, 214, 250, 262, 263, 304, 305, 337, 525, 543, 544, 573, 578, 579], "sure": [3, 160, 292, 294, 296, 322, 329, 332, 444, 544], "round": [3, 4, 161, 176, 543, 553, 573], "down": [3, 87], "doe": [3, 4, 12, 258, 261, 270, 300, 303, 335, 548, 553, 563, 575, 578], "go": [3, 338, 557, 572, 578], "10": [3, 6, 199, 237, 261, 303, 337, 493, 544, 548, 561, 572, 578, 579], "convbnrelu": 3, "sequenti": [3, 72, 195, 233, 298, 339, 567, 579], "__init__": [3, 7, 548, 563, 566, 579], "self": [3, 7, 88, 118, 257, 261, 284, 294, 303, 337, 528, 544, 548, 560, 563, 566, 576, 577, 579], "in_plan": 3, "out_plan": 3, "kernel_s": 3, "stride": [3, 214, 250, 578], "group": [3, 331, 432, 560, 569, 570, 577, 578, 579, 581], "pad": [3, 96, 97, 197, 214, 235, 250, 277, 279, 548, 578], "conv2d": [3, 42, 71, 85, 86, 90, 91, 96, 97, 161, 309, 310, 311, 315, 316, 317, 557, 577, 579], "bia": [3, 72, 160, 161, 252, 254, 277, 577], "fals": [3, 4, 7, 37, 39, 42, 44, 45, 46, 70, 72, 88, 96, 97, 115, 118, 125, 131, 134, 145, 152, 157, 161, 164, 165, 166, 186, 187, 189, 192, 193, 194, 196, 197, 199, 210, 214, 215, 216, 217, 218, 223, 225, 227, 230, 231, 232, 234, 235, 237, 247, 250, 261, 264, 265, 270, 271, 272, 273, 277, 278, 279, 292, 303, 306, 307, 315, 322, 345, 353, 432, 451, 500, 503, 508, 509, 515, 534, 540, 547, 548, 557, 563, 566, 572, 573, 577, 578, 580], "batchnorm2d": 3, "momentum": [3, 294, 319, 560, 569, 570, 580], "inplac": [3, 4], "invertedresidu": 3, "inp": 3, "oup": 3, "expand_ratio": 3, "assert": [3, 566], "hidden_dim": 3, "use_res_connect": 3, "pw": 3, "extend": [3, 87], "dw": 3, "skip_add": 3, "forward": [3, 4, 44, 216, 277, 279, 572, 573, 577], "x": [3, 44, 196, 214, 234, 250, 273, 277, 279, 337, 550, 552, 565, 569, 573, 577, 578], "els": [3, 44, 87, 88, 166, 195, 233, 338, 500, 515, 577], "num_class": [3, 265, 307], "1000": [3, 272, 513, 580], "width_mult": 3, "inverted_residual_set": 3, "round_nearest": 3, "v2": [3, 6, 168, 340, 552, 579, 581], "arg": [3, 44, 70, 78, 128, 197, 198, 199, 235, 236, 237, 256, 257, 267, 279, 289, 292, 297, 298, 309, 310, 311, 316, 317, 318, 330, 337, 350, 365, 367, 369, 370, 371, 372, 382, 384, 385, 387, 389, 392, 393, 398, 500, 508, 528, 547, 548, 550, 552, 565, 569, 573, 577, 578], "width": [3, 210, 214, 247, 250, 273, 292, 322, 552, 573, 578, 580], "multipli": [3, 553], "adjust": [3, 4, 273, 322, 573], "each": [3, 4, 7, 39, 42, 45, 46, 70, 71, 72, 77, 78, 79, 80, 83, 84, 89, 90, 91, 94, 96, 97, 98, 100, 102, 103, 105, 107, 108, 109, 112, 114, 115, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 136, 161, 165, 168, 195, 199, 202, 210, 214, 233, 237, 240, 247, 250, 259, 261, 262, 263, 272, 273, 279, 294, 301, 303, 304, 305, 316, 317, 318, 322, 329, 342, 354, 355, 544, 547, 548, 550, 553, 557, 566, 567, 569, 570, 576, 577, 578, 579], "amount": 3, "structur": [3, 131, 294, 329, 349, 440, 560, 569, 570, 573, 577, 581], "multipl": [3, 87, 136, 188, 189, 197, 198, 200, 201, 202, 203, 204, 208, 211, 214, 221, 226, 227, 229, 235, 236, 238, 239, 240, 241, 242, 246, 248, 250, 266, 294, 329, 336, 500, 548, 555, 567, 576, 579], "turn": [3, 563], "off": [3, 92, 93, 95, 574], "block": [3, 257, 270, 279, 284, 289, 292, 295, 322, 330, 532, 560, 566, 569, 570], "input_channel": 3, "32": [3, 168, 261, 303, 552, 558, 569, 581], "last_channel": 3, "1280": 3, "c": [3, 95, 99, 199, 237, 544, 548, 556, 561, 579], "n": [3, 95, 198, 214, 236, 250, 259, 292, 301, 322, 503, 548, 550, 569, 570, 578], "16": [3, 32, 569, 581], "6": [3, 6, 42, 544, 557, 573, 579, 581], "24": [3, 32, 579, 581], "96": [3, 261, 303, 581], "160": 3, "320": 3, "onli": [3, 7, 39, 42, 45, 46, 70, 72, 78, 81, 82, 83, 84, 85, 86, 87, 88, 95, 98, 99, 103, 105, 106, 107, 108, 109, 112, 115, 116, 125, 126, 129, 130, 136, 161, 176, 197, 215, 217, 218, 221, 235, 257, 267, 279, 292, 294, 322, 329, 343, 515, 525, 527, 528, 545, 547, 552, 555, 557, 561, 564, 570, 572, 577, 579, 580], "check": [3, 4, 6, 44, 70, 87, 88, 131, 136, 143, 166, 172, 186, 199, 237, 253, 257, 267, 293, 298, 322, 329, 333, 337, 338, 345, 360, 402, 407, 444, 447, 449, 450, 452, 454, 455, 456, 457, 463, 466, 484, 500, 501, 503, 508, 515, 517, 544, 546, 552, 561], "element": [3, 46, 195, 233, 257, 261, 277, 279, 284, 289, 292, 295, 303, 322, 330, 378, 548, 560, 563, 569], "assum": [3, 7, 213, 249, 261, 282, 303, 557], "know": [3, 131, 217, 218, 251, 257, 284, 289, 501, 552, 575], "len": [3, 168, 214, 250, 337, 548, 552, 569, 578], "rais": [3, 12, 87, 92, 93, 95, 106, 131, 216, 258, 261, 264, 265, 292, 293, 294, 300, 303, 306, 307, 322, 329, 333, 337, 515, 528, 569, 570], "valueerror": [3, 12, 87, 92, 93, 95, 106, 131, 258, 261, 265, 300, 303, 307, 556], "empti": [3, 136, 261, 303, 337], "got": [3, 166, 556, 577], "format": [3, 37, 39, 42, 45, 46, 69, 70, 72, 78, 166, 197, 198, 199, 203, 208, 235, 236, 237, 241, 246, 252, 254, 257, 261, 267, 270, 281, 303, 342, 466, 505, 523, 548, 550, 552, 555, 563, 564, 565, 573], "build": [3, 6, 7, 44, 136, 143, 153, 254, 255, 268, 270, 280, 281, 311, 313, 316, 317, 380, 381, 383, 394, 395, 397, 400, 424, 484, 493, 515, 532, 544, 561, 565, 571, 576, 579], "featur": [3, 131, 182, 197, 198, 210, 214, 216, 235, 236, 247, 250, 279, 299, 545, 546, 547, 549, 550, 564, 565, 571, 575, 578], "invert": 3, "residu": [3, 279], "output_channel": 3, "last": [3, 70, 72, 118, 172, 185, 187, 225, 279, 292, 319, 322, 345, 484, 544, 564, 573], "classifi": [3, 197, 235, 265, 307, 338, 548, 550], "dropout": [3, 277, 279], "m": [3, 69, 95, 292, 322, 550, 581], "isinst": 3, "init": [3, 216, 320, 345, 548, 563, 566], "kaiming_normal_": 3, "mode": [3, 7, 36, 37, 39, 42, 45, 69, 70, 72, 131, 206, 215, 244, 257, 261, 303, 316, 329, 345, 360, 380, 507, 544, 545, 560, 573, 574, 579], "fan_out": 3, "zeros_": 3, "elif": 3, "ones_": 3, "normal_": 3, "01": [3, 553, 572, 579, 580, 581], "bn": [3, 37, 87, 106, 581], "prior": [3, 44, 114, 337, 579], "chang": [3, 106, 122, 161, 176, 294, 296, 329, 332, 337, 340, 360, 375, 381, 484, 506, 513, 546, 547, 552, 556, 563, 570, 577, 578, 579], "numer": [3, 4, 265, 307, 543, 564, 571], "fuse_model": [3, 4], "type": [3, 7, 12, 37, 39, 42, 44, 45, 46, 69, 70, 71, 72, 82, 85, 86, 87, 88, 95, 99, 110, 111, 117, 118, 119, 122, 131, 134, 136, 137, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159, 160, 166, 168, 172, 173, 175, 179, 186, 187, 195, 197, 199, 203, 206, 207, 208, 211, 214, 216, 221, 225, 233, 235, 237, 241, 244, 245, 246, 248, 250, 252, 254, 255, 257, 258, 259, 261, 264, 265, 267, 270, 272, 279, 282, 285, 286, 287, 292, 294, 296, 298, 300, 301, 303, 306, 307, 309, 310, 311, 315, 316, 317, 318, 322, 328, 329, 331, 332, 333, 335, 336, 337, 338, 342, 345, 346, 349, 350, 353, 359, 373, 378, 392, 393, 402, 403, 405, 407, 445, 500, 503, 505, 507, 510, 511, 544, 548, 552, 557, 560, 564, 569, 573, 576, 578, 579, 580], "fuse_modul": 3, "true": [3, 4, 44, 70, 72, 87, 88, 110, 131, 134, 136, 164, 166, 168, 186, 187, 195, 197, 199, 200, 213, 214, 215, 225, 233, 235, 237, 238, 249, 250, 252, 254, 259, 261, 265, 270, 277, 279, 287, 292, 301, 303, 307, 322, 345, 461, 500, 503, 508, 509, 515, 548, 552, 557, 563, 566, 572, 573, 574, 577, 578, 579, 580], "idx": [3, 282, 548], "str": [3, 12, 37, 39, 44, 45, 70, 131, 160, 168, 173, 175, 187, 197, 198, 199, 203, 206, 207, 208, 210, 211, 214, 216, 221, 225, 235, 236, 237, 241, 244, 245, 246, 247, 248, 250, 252, 254, 255, 258, 259, 261, 263, 264, 265, 270, 272, 273, 282, 287, 300, 301, 303, 305, 306, 307, 309, 310, 311, 317, 322, 342, 350, 353, 361, 362, 363, 366, 373, 374, 375, 377, 379, 380, 383, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 399, 402, 403, 404, 406, 407, 412, 413, 414, 415, 420, 421, 424, 426, 427, 428, 429, 430, 432, 441, 442, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 463, 465, 466, 468, 470, 473, 474, 477, 479, 480, 482, 483, 484, 485, 488, 489, 490, 493, 500, 502, 503, 505, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 531, 532, 539, 540, 548, 563, 572, 577, 578], "help": [3, 6, 81, 223, 267, 315, 377, 515, 547, 565, 579], "averagemet": 3, "store": [3, 46, 199, 237, 261, 279, 285, 286, 287, 292, 294, 303, 319, 322, 329, 331, 332, 337, 558], "averag": [3, 168, 261, 262, 263, 265, 303, 304, 305, 307, 550, 563, 566, 569, 579], "fmt": 3, "f": [3, 95, 550, 552, 573], "reset": [3, 12, 258, 264, 265, 300, 306, 307, 318, 528, 563], "val": [3, 72, 166, 199, 202, 237, 240, 293, 333, 566], "avg": [3, 4, 573], "sum": [3, 265, 307, 550], "updat": [3, 12, 32, 87, 99, 131, 136, 143, 254, 258, 264, 265, 273, 292, 294, 300, 306, 307, 317, 319, 322, 329, 332, 333, 345, 363, 380, 381, 382, 383, 391, 394, 396, 397, 399, 401, 407, 409, 410, 411, 414, 484, 507, 511, 516, 519, 521, 525, 544, 547, 555, 563, 568, 569, 570, 579], "__str__": 3, "fmtstr": 3, "__dict__": 3, "target": [3, 4, 44, 69, 70, 115, 116, 131, 160, 216, 270, 293, 296, 322, 332, 333, 335, 337, 428, 429, 547, 548, 550, 552, 564, 569, 570, 577, 578, 579, 580], "topk": [3, 545, 547, 552, 563], "over": [3, 4, 6, 199, 203, 208, 237, 241, 246, 261, 265, 303, 307, 337, 560, 563, 572, 579], "k": [3, 265, 307, 563, 569], "top": [3, 131, 214, 250, 256, 257, 265, 284, 289, 297, 307, 563, 578, 581], "specifi": [3, 39, 42, 45, 46, 70, 71, 72, 131, 160, 185, 186, 214, 215, 250, 256, 257, 261, 264, 265, 268, 271, 273, 280, 281, 284, 289, 297, 298, 303, 306, 307, 334, 359, 360, 377, 380, 383, 390, 391, 392, 394, 395, 396, 401, 402, 404, 405, 407, 409, 410, 414, 415, 416, 429, 461, 465, 466, 467, 486, 491, 507, 511, 515, 528, 532, 544, 551, 552, 553, 557, 563, 566, 572, 573, 578, 579, 580], "no_grad": 3, "maxk": 3, "pred": [3, 166, 264, 265, 306, 307, 563], "eq": 3, "view": [3, 6, 544, 546, 554, 575], "expand_a": 3, "re": [3, 70, 72, 337], "correct_k": 3, "keepdim": 3, "mul_": 3, "100": [3, 199, 237, 261, 270, 303, 547, 548, 552, 558, 572, 573, 578, 579, 580, 581], "criterion": [3, 4, 10, 70, 168, 182, 218, 221, 251, 257, 299, 319, 322, 329, 483, 523, 550, 555, 569, 570, 573, 579, 580], "data_load": [3, 4, 7, 45, 72], "neval_batch": [3, 4], "top1": [3, 4, 273, 573], "2f": [3, 4], "top5": [3, 4], "5": [3, 7, 46, 201, 210, 216, 239, 247, 261, 265, 303, 307, 338, 544, 548, 557, 563, 568, 572, 578, 579, 580, 581], "cnt": [3, 4, 322, 550], "imag": [3, 4, 198, 199, 202, 204, 210, 214, 236, 237, 240, 242, 247, 250, 261, 273, 303, 513, 544, 548, 552, 572, 577, 578, 581], "loss": [3, 4, 6, 70, 143, 182, 216, 224, 256, 257, 265, 284, 289, 297, 299, 307, 350, 550, 551, 552, 553, 563, 564, 569, 570, 573, 579, 580], "acc1": 3, "acc5": 3, "print": [3, 4, 168, 265, 307, 544, 550, 552, 563, 579], "load_model": 3, "model_fil": 3, "state_dict": [3, 168, 279, 552, 577], "load": [3, 37, 39, 197, 199, 213, 214, 235, 237, 249, 250, 261, 271, 281, 303, 316, 334, 359, 360, 407, 409, 488, 515, 516, 547, 572, 573], "load_state_dict": 3, "cpu": [3, 4, 117, 118, 119, 120, 128, 131, 160, 273, 546, 560, 564, 568, 571, 572, 574, 577], "print_size_of_model": 3, "temp": 3, "p": [3, 261, 303, 544], "mb": [3, 515], "o": [3, 6, 95, 424, 546, 568], "getsiz": 3, "1e6": 3, "num_calibration_batch": 3, "mymodel": 3, "saved_model_dir": [3, 316], "float_model_fil": 3, "start": [3, 72, 214, 250, 258, 261, 272, 300, 303, 318, 329, 335, 338, 508, 528, 561, 578, 579], "min": [3, 46, 72, 161, 176, 543, 544, 573, 578, 579], "estim": [3, 4, 168, 265, 268, 269, 273, 280, 281, 307, 316, 579], "per": [3, 7, 39, 42, 45, 70, 71, 72, 187, 196, 215, 225, 234, 261, 273, 303, 322, 354, 355, 380, 544, 568, 574, 581], "qconfig": [3, 4, 44, 577], "default_qconfig": 3, "calibr": [3, 7, 37, 39, 42, 44, 45, 70, 172, 177, 185, 186, 256, 257, 297, 298, 299, 334, 354, 355, 524, 547, 558, 560, 573, 579, 580], "data_loader_test": [3, 4], "num_eval_batch": [3, 4], "d": [3, 4, 95, 99, 270, 550, 558], "eval_batch_s": [3, 4], "functool": 3, "partial": [3, 507, 573], "minmaxobserv": 3, "reduce_rang": [3, 46, 572], "dtype": [3, 69, 131, 160, 200, 201, 210, 214, 238, 239, 247, 250, 252, 254, 255, 547, 548, 555, 557, 572, 577, 578, 580], "qint8": 3, "qscheme": 3, "per_tensor_symmetr": 3, "convrelu2d": 3, "activation_post_process": [3, 577], "min_val": [3, 354, 355], "max_val": [3, 354, 355], "quantizedconvrelu2d": 3, "scale": [3, 4, 37, 39, 46, 69, 72, 87, 161, 176, 210, 214, 247, 250, 254, 315, 543, 553, 555, 573, 576, 578], "15583468973636627": 3, "zero_point": [3, 46, 69, 254, 315, 322], "quantizedconv2d": [3, 72], "19358506798744202": 3, "74": [3, 581], "631847": 3, "300": [3, 547], "67": [3, 581], "significantli": [3, 564, 569, 570], "lower": [3, 213, 214, 249, 250, 263, 305, 338, 515, 543, 551, 569, 570, 571, 573, 578, 579], "62": [3, 581], "same": [3, 7, 72, 81, 166, 197, 214, 235, 250, 261, 284, 289, 303, 322, 338, 342, 360, 545, 547, 548, 550, 552, 557, 568, 572, 573, 577, 578, 579], "nevertheless": [3, 4], "did": 3, "reduc": [3, 7, 87, 287, 322, 547, 551, 564, 570, 571, 573, 574, 579, 580], "almost": 3, "decreas": [3, 124], "improv": [3, 329, 337, 546, 569, 570, 573, 574, 579, 581], "repeat": [3, 288, 579], "exercis": 3, "recommend": [3, 7, 218, 219, 306, 307, 547, 555, 557, 569, 572, 579], "x86": [3, 564], "basi": 3, "histogram": [3, 351, 354, 360, 404, 407, 415, 577], "collect": [3, 44, 72, 208, 211, 212, 214, 217, 218, 219, 220, 222, 246, 248, 250, 258, 263, 264, 265, 300, 305, 306, 307, 351, 354, 360, 361, 466, 490, 501, 503, 515, 516, 555, 573, 577, 579], "pick": 3, "manner": [3, 550, 565], "per_channel_quantized_model": 3, "get_default_qconfig": 3, "fbgemm": [3, 4, 543], "jit": [3, 577], "script": [3, 36, 258, 259, 262, 263, 300, 301, 304, 305, 362, 363, 449, 466, 468, 470, 473, 474, 476, 477, 479, 480, 482, 483, 488, 552, 560, 571], "scripted_quantized_model_fil": 3, "histogramobserv": 3, "perchannelminmaxobserv": 3, "per_channel_symmetr": 3, "76": [3, 581], "increas": [3, 549, 560, 579], "resnet50": [3, 6, 273, 552, 573, 576, 581], "qat": [4, 70, 254, 257, 267, 551, 552, 555, 560, 573], "simul": 4, "low": [4, 6, 7, 42, 71, 72, 185, 186, 200, 201, 238, 239, 256, 257, 266, 297, 545, 548, 552, 564, 571, 573, 579], "precis": [4, 6, 7, 37, 39, 42, 45, 70, 71, 72, 185, 186, 256, 257, 261, 263, 265, 266, 297, 303, 305, 307, 318, 335, 338, 345, 377, 388, 391, 392, 402, 403, 404, 405, 406, 407, 412, 436, 465, 470, 472, 473, 474, 497, 516, 519, 521, 543, 544, 545, 551, 552, 557, 560, 571, 572, 573, 579], "fake": [4, 72, 134, 573], "dure": [4, 44, 72, 87, 143, 270, 273, 279, 292, 296, 298, 315, 322, 332, 509, 564, 565, 566, 567, 569, 570, 573, 577, 580], "backward": [4, 261, 303, 350, 550, 552, 569, 573, 575], "mimic": [4, 573], "still": [4, 257, 284, 289, 295, 330, 573, 574], "thu": [4, 261, 303, 573], "made": [4, 7, 95, 271, 273, 340, 573, 575, 579], "while": [4, 6, 7, 39, 72, 279, 294, 329, 337, 544, 547, 560, 564, 572, 573], "fact": [4, 573], "ultim": [4, 573], "usual": [4, 37, 39, 42, 45, 70, 72, 197, 235, 257, 284, 289, 547, 550, 567, 573], "yield": [4, 185, 186, 195, 217, 218, 233, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 573, 579], "either": [4, 186, 261, 303, 345, 564, 567, 572, 573], "dynam": [4, 7, 87, 187, 225, 252, 254, 298, 368, 547, 550, 555, 560, 571, 579, 581], "training_func_for_nc": 4, "epoch": [4, 224, 251, 257, 284, 289, 294, 295, 329, 330, 350, 550, 552, 569, 580], "30": [4, 6, 214, 250, 545, 547, 560, 578, 581], "sgd": [4, 182, 221, 299, 572, 580], "lr": [4, 552], "0001": [4, 182, 299, 572], "nepoch": [4, 550], "train_load": [4, 552], "zero_grad": [4, 550, 552, 569], "break": [4, 550, 552], "freez": [4, 114, 569, 570], "disable_observ": 4, "norm": [4, 279], "varianc": [4, 161, 176], "intrins": 4, "freeze_bn_stat": 4, "get_default_qat_qconfig": 4, "final": [4, 87, 294, 322, 329, 507, 566, 569, 570, 573, 575, 579], "alreadi": [4, 7, 199, 213, 215, 237, 249, 501, 528, 544, 548, 560, 579], "implement": [4, 6, 12, 39, 42, 45, 70, 71, 72, 77, 78, 79, 80, 83, 84, 89, 90, 91, 94, 96, 97, 98, 100, 102, 103, 105, 107, 108, 109, 112, 114, 115, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 165, 185, 186, 192, 195, 196, 197, 199, 203, 208, 230, 233, 234, 235, 237, 241, 246, 258, 264, 265, 287, 292, 296, 300, 306, 307, 322, 329, 330, 331, 332, 334, 340, 345, 545, 547, 548, 570, 575, 577, 579, 580], "hook": [4, 70, 185, 216, 223, 224, 251, 257, 284, 289, 345, 353, 550, 569, 577], "prepare_qat": [4, 224, 257], "high": [4, 200, 201, 238, 239, 548, 561, 571, 579], "accur": 4, "inc": [4, 6, 70, 214, 250, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 523, 571, 572, 575], "switch": [4, 70, 110, 577], "run": [4, 6, 7, 36, 37, 39, 42, 44, 46, 70, 131, 166, 185, 186, 196, 213, 215, 234, 249, 257, 270, 273, 293, 294, 329, 333, 334, 337, 338, 462, 508, 530, 531, 532, 544, 546, 552, 556, 557, 564, 569, 571, 573, 575, 576, 577, 579, 580], "better": [4, 72, 122, 185, 186, 282, 334, 551, 563, 564, 569, 570, 571, 573, 576, 579], "match": [4, 131, 143, 213, 249, 261, 262, 303, 304, 550, 553], "zero": [4, 46, 69, 214, 250, 257, 265, 284, 289, 292, 294, 295, 307, 322, 329, 330, 543, 569, 570, 578, 579], "fine": [4, 6, 197, 235, 329, 548, 571, 573], "tune": [4, 6, 7, 37, 39, 42, 44, 45, 70, 72, 177, 185, 186, 197, 199, 235, 237, 256, 257, 297, 299, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 360, 372, 391, 399, 400, 407, 409, 413, 436, 466, 471, 484, 496, 504, 516, 520, 544, 547, 548, 552, 553, 560, 562, 564, 566, 571, 574, 575, 576, 577, 580], "num_train_batch": 4, "20": [4, 6, 214, 250, 272, 568, 578, 580, 581], "train_one_epoch": 4, "qat_model": 4, "devic": [4, 115, 116, 117, 118, 119, 120, 123, 128, 131, 152, 157, 160, 165, 216, 273, 550, 569, 572], "quantized_model": 4, "yaml": [4, 7, 70, 71, 72, 177, 178, 179, 185, 186, 197, 199, 215, 224, 235, 237, 251, 256, 257, 267, 268, 269, 280, 281, 284, 289, 297, 298, 299, 333, 334, 359, 360, 361, 365, 366, 367, 368, 369, 371, 372, 374, 375, 459, 461, 468, 473, 477, 480, 483, 515, 526, 548, 550, 553, 558, 563, 566, 569, 572, 577, 578], "q_func": [4, 7, 37, 39, 42, 45, 70, 72, 185, 186, 257, 297, 298, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 579], "eval_dataload": [4, 6, 185, 186, 224, 256, 257, 267, 298, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 547, 558, 579], "val_load": [4, 573], "timeout": [4, 186, 345, 525, 553, 572, 579, 580], "constrain": 4, "71": [4, 581], "close": [4, 161, 176], "debug": [4, 417, 418, 422, 544, 579], "analyz": [4, 131, 160, 316, 569, 570, 576, 577], "limit": [4, 337, 546, 550, 569, 577], "sinc": [4, 12, 256, 257, 258, 284, 289, 297, 300, 484, 550, 553, 555, 563, 567], "actual": [4, 72, 265, 307, 552], "arithmet": [4, 557], "easili": [4, 7, 566, 569, 570], "relat": [4, 251, 257, 261, 275, 276, 284, 289, 292, 303, 331, 353, 443, 446, 448, 453, 533, 536, 537, 538, 541, 580], "center": [5, 6, 214, 250, 578, 579], "work": [5, 256, 257, 284, 289, 297, 547, 550, 569, 570, 574, 575, 577], "guidelin": [5, 6, 559], "librari": [6, 218, 257, 543, 561, 571], "popular": [6, 7, 257, 548, 550, 555, 569, 573, 579], "compress": [6, 224, 257, 284, 289, 350, 550, 560, 566, 567, 569, 570, 571, 573], "mainstream": 6, "deep": [6, 7, 179, 543, 547, 560, 561, 564, 571, 573, 579], "learn": [6, 7, 279, 543, 547, 548, 555, 558, 560, 561, 564, 569, 570, 571, 573, 577, 579], "frameworkmxnet": [6, 7, 44, 192, 196, 199, 202, 203, 206, 207, 208, 211, 214, 230, 234, 237, 240, 241, 244, 245, 246, 248, 250, 256, 257, 264, 265, 297, 306, 307, 313, 334, 554, 557, 560, 564, 565, 572, 579, 580], "formerli": 6, "known": [6, 217, 218, 337, 555, 569, 577, 579], "tool": [6, 7, 166, 360, 547, 562, 571, 573], "deliv": [6, 571], "unifi": [6, 7, 188, 191, 208, 256, 257, 297, 507, 547, 558, 560, 565], "interfac": [6, 39, 42, 45, 70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 98, 100, 102, 103, 105, 106, 107, 108, 109, 112, 114, 115, 116, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 134, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 165, 178, 182, 188, 191, 208, 256, 257, 272, 273, 284, 289, 297, 298, 299, 318, 345, 353, 354, 355, 361, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 477, 483, 490, 502, 560, 573, 575], "across": [6, 46, 256, 257, 266, 297, 549, 569, 570], "technologi": [6, 199, 237, 568], "prune": [6, 21, 160, 224, 257, 285, 286, 287, 289, 290, 292, 293, 294, 296, 298, 299, 317, 319, 320, 322, 329, 331, 332, 333, 350, 371, 378, 391, 397, 407, 409, 436, 444, 456, 471, 496, 504, 515, 520, 552, 557, 560, 567, 571, 573, 580], "knowledg": [6, 216, 251, 257, 551, 560, 565, 580], "distil": [6, 21, 182, 216, 223, 224, 257, 299, 350, 560, 567, 580], "driven": [6, 564, 566, 577], "strategi": [6, 7, 9, 37, 39, 42, 44, 45, 70, 72, 172, 199, 237, 257, 297, 299, 377, 399, 497, 515, 525, 552, 560, 571, 572, 573, 574, 575, 580], "quickli": [6, 579], "find": [6, 7, 69, 92, 93, 95, 166, 265, 281, 282, 307, 315, 337, 360, 461, 531, 544, 569, 576, 577, 579], "predefin": [6, 366, 402, 406, 407, 515], "sparsiti": [6, 257, 284, 288, 289, 292, 294, 295, 296, 316, 317, 322, 329, 330, 332, 548, 560, 569, 570, 581], "goal": [6, 177, 186, 251, 256, 257, 284, 289, 297, 299, 334, 345, 516, 567, 573, 579], "teacher": [6, 182, 216, 251, 257, 279, 299, 550, 551, 581], "student": [6, 197, 216, 223, 235, 251, 257, 548, 550, 551, 581], "ai": [6, 571, 574], "oneapi": [6, 561, 571], "analyt": [6, 561, 571], "visit": [6, 581], "websit": [6, 561], "io": [6, 547], "7": [6, 545, 547, 556, 557, 561, 573, 575, 579], "releas": [6, 502, 515, 559, 561], "binari": [6, 166, 265, 277, 279, 307, 556, 563], "stabl": [6, 544, 561, 571], "basic": [6, 213, 249, 268, 280, 292, 299, 322, 341, 345, 560, 561, 572, 576], "pip": [6, 544, 552, 556, 561, 575], "Or": [6, 294], "full": [6, 69, 72, 197, 198, 199, 215, 235, 236, 237, 257, 544, 548, 556, 561, 562], "nightli": [6, 544, 561], "git": [6, 544, 561], "clone": [6, 544, 561], "cd": [6, 544, 552, 561], "r": [6, 69, 95, 161, 176, 273, 544, 561, 568, 573, 581], "txt": [6, 202, 240, 508, 544, 548, 561], "test": [6, 46, 214, 250, 270, 544, 546, 561, 581], "pypi": [6, 544, 561], "found": [6, 251, 257, 268, 269, 280, 281, 315, 337, 343, 499, 515, 532, 544, 564, 579], "fp32": [6, 7, 37, 39, 42, 70, 71, 72, 117, 119, 161, 168, 176, 185, 186, 252, 254, 265, 307, 338, 342, 359, 415, 544, 557, 563, 564, 572, 573, 574, 575, 576, 577, 579, 580, 581], "wget": 6, "storag": [6, 261, 303, 563], "googleapi": 6, "v1_6": 6, "mobilenet_v1_1": 6, "0_224_frozen": 6, "pb": [6, 72, 316, 334, 452, 455, 466, 552, 565, 577, 581], "dummi": [6, 200, 201, 238, 239, 255, 265, 307, 407, 411, 517, 544, 548, 563], "shape": [6, 131, 143, 160, 200, 201, 210, 214, 238, 239, 247, 250, 261, 277, 279, 292, 303, 322, 436, 443, 444, 447, 456, 458, 496, 544, 548, 557, 578], "224": [6, 210, 247, 273, 545, 547, 548, 552, 555, 578, 580], "search": [6, 12, 21, 95, 178, 185, 186, 256, 257, 258, 268, 269, 270, 272, 273, 280, 281, 282, 283, 297, 300, 337, 339, 340, 344, 402, 403, 430, 560, 563, 571, 577, 579], "jupyt": 6, "lab": 6, "manag": [6, 270, 271, 272, 273, 379, 412, 414, 437, 498, 514], "click": [6, 544, 560, 571, 577], "12": [6, 31, 544], "onnxruntim": [6, 7, 45, 193, 231, 257, 266, 419, 423, 553, 560, 572], "raw": [6, 198, 202, 205, 236, 240, 243, 342, 563, 579], "vision": 6, "classif": [6, 197, 214, 235, 250, 265, 295, 307, 330, 550, 563, 571], "resnet": [6, 552, 581], "v1": [6, 32, 33, 34, 72, 166, 209, 210, 247, 262, 263, 265, 304, 305, 307, 316, 552, 563, 565, 575, 576, 581], "inc_bench": [6, 299, 496, 544], "xeon": [6, 562, 564, 568, 571, 573, 574, 581], "scalabl": [6, 564, 568, 571, 573, 574, 581], "skylak": 6, "cascad": 6, "lake": [6, 564, 571], "cooper": [6, 564, 571], "icelak": 6, "futur": [6, 87, 185, 186, 217, 218, 560, 564], "sapphir": 6, "rapid": 6, "flex": 6, "seri": [6, 210, 247, 578], "amd": [6, 560, 581], "arm": [6, 560, 581], "nvidia": [6, 560, 569, 573, 581], "cento": [6, 508], "ubuntu": [6, 568], "04": [6, 505, 568, 581], "11": [6, 34, 505, 544, 563, 564], "variabl": [6, 143, 199, 215, 237, 257, 266, 272, 331, 337, 503, 528, 544, 570, 579], "tf_enable_onednn_opt": [6, 544], "onednn": [6, 543], "420": [6, 560], "speedup": [6, 560, 573], "geomean": [6, 560], "2x": [6, 560, 568], "vnni": [6, 560, 572, 573], "minim": [6, 161, 176, 337, 550, 563, 569, 570, 573, 579], "overview": 6, "dive": [6, 557], "mix": [6, 7, 72, 335, 472, 473, 474, 521, 560], "orchestr": [6, 350, 560], "benchmark": [6, 10, 37, 39, 42, 72, 217, 218, 257, 298, 299, 318, 381, 388, 391, 401, 407, 409, 412, 413, 436, 496, 497, 507, 513, 530, 535, 547, 565, 579, 580, 581], "tensorboard": [6, 7, 37, 39, 42, 45, 70, 72, 350, 353], "coder": [6, 560, 571], "topic": 6, "adaptor": [6, 9, 224, 257, 353, 560, 574, 575, 577], "togeth": [6, 214, 250, 292, 298, 322, 547, 550, 561, 571, 577, 578], "tencent": [6, 571], "deepen": [6, 571], "cloud": [6, 571], "foundat": [6, 571], "digit": [6, 258, 300, 571], "intellig": [6, 571], "industri": [6, 548, 563, 571], "dec": [6, 571], "2022": [6, 31, 32, 33, 34, 581], "fast": [6, 571], "achiev": [6, 256, 257, 297, 555, 563, 567, 569, 570, 571, 573, 577, 579], "sota": [6, 571], "nov": [6, 571], "virtual": [6, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 165, 571], "applianc": [6, 571], "packag": [6, 7, 337, 368, 376, 382, 384, 385, 387, 388, 389, 392, 393, 396, 398, 417, 418, 422, 425, 431, 433, 436, 437, 443, 462, 464, 469, 472, 475, 476, 478, 481, 487, 492, 496, 530, 544, 556, 561, 571, 575, 579], "bitnami": [6, 571], "diffus": [6, 571], "few": [6, 544, 571, 579], "distilbert": [6, 197, 235, 548, 571, 581], "oct": [6, 571], "innov": [6, 571], "acceler": [6, 550, 569, 570, 571, 574, 579], "legal": [6, 559], "secur": [6, 568, 571], "send": [6, 484, 527, 532, 546], "your": [6, 195, 197, 233, 235, 261, 303, 544, 545, 546, 548, 552, 555, 562, 576, 577, 579], "resum": [6, 185, 186, 335, 336, 339, 340, 343, 344, 345, 350], "neural": [7, 21, 44, 70, 168, 209, 210, 211, 214, 215, 218, 221, 224, 247, 248, 250, 252, 257, 264, 265, 267, 284, 289, 292, 295, 297, 298, 306, 307, 312, 322, 330, 340, 341, 346, 419, 423, 447, 456, 495, 502, 515, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 571, 573, 575, 577, 578, 579, 580], "solut": [7, 161, 176, 270, 556, 571, 579], "onnx": [7, 45, 46, 69, 193, 231, 252, 253, 254, 255, 309, 310, 311, 315, 317, 350, 363, 466, 554, 555, 557, 560, 564, 565, 571, 572, 573, 579], "runtim": [7, 508, 553, 554, 557, 560, 572, 573], "bridg": [7, 560], "vanilla": [7, 560], "complet": [7, 88, 544, 579, 580, 581], "subclass": [7, 37, 63, 173, 175, 192, 196, 199, 203, 206, 207, 208, 211, 214, 221, 230, 234, 237, 241, 244, 245, 246, 248, 250, 264, 265, 282, 285, 286, 287, 292, 294, 296, 306, 307, 318, 322, 328, 329, 332, 345], "adaptor_registri": [7, 37], "abc": [7, 134, 263, 305, 444, 507, 577, 579], "abcadaptor": 7, "framework_specific_info": [7, 37, 39, 42, 45, 70, 72], "tune_cfg": [7, 37, 39, 42, 44, 45, 70, 72, 172, 338, 579], "postprocess": [7, 37, 39, 42, 45, 70, 72, 208, 211, 214, 215, 218, 246, 248, 250, 256, 257, 267, 279, 297, 298, 299, 518, 523, 545, 547, 577, 578], "query_fw_cap": [7, 37, 39, 42, 45, 70, 72], "query_fused_pattern": [7, 37], "awar": [7, 37, 39, 42, 45, 70, 72, 168, 188, 191, 208, 224, 257, 267, 292, 297, 298, 340, 345, 551, 552, 555, 560, 564, 567, 579, 581], "convers": [7, 79, 106, 257, 267, 564, 573, 574], "he": 7, "intersect": [7, 265, 307, 563], "decid": [7, 72, 136, 137, 259, 294, 301, 424, 553, 575, 579], "besid": [7, 546, 550, 567], "introduc": [7, 99, 555, 557, 569, 570, 573, 575, 579], "describ": [7, 39, 45, 70, 72, 273, 544, 557, 577], "op": [7, 37, 39, 42, 45, 46, 70, 71, 72, 81, 85, 87, 90, 91, 94, 95, 96, 97, 99, 106, 110, 111, 114, 117, 118, 119, 120, 122, 128, 131, 160, 161, 164, 166, 252, 254, 335, 336, 338, 340, 342, 343, 346, 349, 354, 355, 404, 407, 415, 420, 421, 429, 531, 544, 557, 564, 573, 574, 575, 577, 579, 580], "sequenc": [7, 12, 72, 88, 197, 213, 214, 235, 249, 250, 258, 259, 263, 292, 300, 301, 305, 322, 548, 557, 570, 578], "past": 7, "abov": [7, 78, 261, 303, 545, 569], "wa": [7, 160, 484, 544, 571, 579], "hidden": [7, 292, 322, 515, 569], "corner": [7, 214, 250, 578], "effect": [7, 569, 570], "mainten": 7, "difficult": 7, "correspond": [7, 12, 72, 143, 168, 197, 235, 258, 261, 265, 292, 294, 298, 300, 303, 307, 329, 337, 345, 557, 569, 572, 573, 576, 579], "abil": [7, 547, 557], "clear": [7, 12, 136, 195, 233, 258, 264, 265, 273, 300, 306, 307, 557, 563], "fragment": 7, "enumer": [7, 44, 69, 282, 350, 360, 364, 465, 471, 497, 552, 569, 577], "scenario": [7, 36, 377, 544, 545, 550, 569, 570], "hardwar": [7, 42, 71, 503, 550, 560, 564, 568, 569, 570, 571, 572], "doesn": [7, 131, 214, 250, 298, 514, 545, 547, 552, 580], "bf16": [7, 42, 71, 106, 117, 119, 338, 557, 564, 574, 579], "granular": [7, 42, 71, 557, 560, 569, 580], "scheme": [7, 42, 46, 69, 71, 532, 547, 557, 579, 580], "semant": [7, 557], "pattern": [7, 37, 42, 71, 72, 86, 87, 95, 118, 122, 128, 131, 156, 178, 182, 199, 237, 257, 285, 290, 294, 299, 320, 329, 331, 404, 407, 420, 429, 430, 507, 531, 548, 557, 560, 567, 572, 581], "abstract": [7, 37, 42, 71, 81, 82, 83, 84, 85, 86, 87, 88, 98, 103, 105, 106, 107, 108, 109, 112, 115, 116, 125, 126, 129, 130, 134, 143, 214, 216, 250, 251, 256, 257, 264, 265, 281, 283, 287, 292, 296, 297, 306, 307, 309, 310, 311, 313, 315, 316, 317, 318, 322, 332, 345, 366, 378, 444, 455, 456, 477, 489, 507, 531, 558], "querybackendcap": [7, 39, 42, 45, 70, 71, 72], "tensorflowqueri": [7, 72], "look": [7, 557, 563, 566, 580], "microsoft": 7, "mla": [7, 543], "kernel": [7, 503, 568, 569, 579], "becom": [7, 87, 555, 570], "integr": [7, 166, 216, 544], "explor": 7, "attribut": [7, 69, 87, 131, 143, 160, 172, 178, 179, 224, 297, 431, 432, 436, 496, 513, 557, 558, 564, 572, 580], "whether": [7, 44, 45, 46, 70, 72, 136, 137, 166, 187, 195, 197, 210, 214, 225, 233, 235, 247, 250, 251, 257, 259, 261, 265, 279, 284, 289, 292, 294, 301, 303, 307, 322, 338, 360, 466, 548, 563, 578], "qlinear": [7, 199, 206, 237, 244, 265, 307, 555, 581], "qdq": [7, 134, 172, 252, 253, 254, 555, 560, 573], "integ": [7, 143, 251, 257, 261, 265, 282, 292, 294, 296, 303, 307, 322, 329, 332, 354, 355, 573, 579], "qtype": [7, 46, 69], "choic": [7, 197, 235, 544, 548, 563], "float32": [7, 46, 200, 201, 214, 238, 239, 250, 261, 303, 513, 545, 548, 573, 578], "uint8": [7, 69, 210, 247, 261, 303, 354, 355, 543, 548, 557, 572, 573, 578, 580], "node": [7, 44, 46, 69, 72, 75, 78, 79, 80, 81, 87, 88, 89, 92, 93, 95, 99, 111, 124, 131, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159, 160, 166, 252, 253, 254, 309, 310, 311, 315, 316, 317, 413, 426, 427, 428, 429, 430, 431, 436, 444, 447, 454, 455, 456, 493, 494, 496, 544, 552, 577], "exclud": [7, 111, 277, 279], "onnxrt": [7, 197, 199, 206, 207, 208, 211, 214, 235, 237, 244, 245, 246, 248, 250, 264, 265, 306, 307, 418, 419, 434, 436, 443, 496], "onnxrt_qlinearopsadaptor": [7, 45], "dump_elapsed_tim": [7, 360], "recov": [7, 42, 45, 72, 360, 551], "q_config": [7, 42, 45, 46, 71, 72, 252, 254], "inspect_tensor": [7, 37, 39, 42, 45, 70, 72], "op_list": [7, 37, 39, 42, 45, 70, 72, 342, 577], "iteration_list": [7, 37, 39, 42, 45, 70, 72], "inspect_typ": [7, 37, 39, 42, 45, 70, 72, 415], "save_to_disk": [7, 37, 39, 42, 45, 70, 72], "save_path": [7, 42, 45, 72, 252, 254, 309, 310, 311, 315, 317, 350, 565], "quantization_cfg": [7, 42, 45, 72], "set_tensor": [7, 37, 39, 42, 45, 70, 72], "tensor_dict": [7, 37, 39, 42, 45, 70, 72], "input_graph": [7, 45, 152, 153, 157, 160, 161, 362, 470, 474, 479, 482, 489], "fp32_baselin": [7, 39, 42, 45, 70, 72, 353], "diagnosis_help": 7, "fp32_model": [7, 70, 72, 168, 252, 254, 317, 342, 360, 547], "int8_model": [7, 252, 254], "experiement": 9, "deprec": [9, 251, 257, 515, 578], "bilingu": [12, 258, 300], "understudi": [12, 258, 300], "qualiti": [12, 258, 300], "text": [12, 213, 214, 249, 250, 258, 263, 295, 300, 305, 330, 562, 571, 578, 581], "machin": [12, 258, 276, 300, 375, 544, 555, 561, 571, 577], "translat": [12, 72, 258, 259, 270, 273, 276, 278, 300, 301], "natur": [12, 258, 300], "anoth": [12, 37, 39, 72, 131, 214, 250, 257, 258, 267, 300, 350, 547, 550, 578, 579], "approxim": [12, 258, 259, 300, 301, 563], "glue": [12, 258, 265, 300, 307, 548, 563], "word": [12, 213, 249, 258, 300, 563, 581], "piec": [12, 213, 249, 258, 300, 555, 563], "decod": [12, 209, 210, 247, 258, 279, 300, 563, 578], "id": [12, 31, 32, 33, 34, 213, 215, 249, 258, 260, 261, 262, 263, 300, 302, 303, 304, 305, 380, 381, 383, 384, 385, 387, 390, 391, 392, 393, 394, 396, 397, 399, 400, 428, 429, 432, 500, 563, 576, 579], "token": [12, 197, 208, 211, 214, 235, 246, 248, 250, 257, 258, 259, 279, 299, 300, 301, 528, 532, 544, 548, 563, 576, 578, 579], "By": [12, 36, 258, 300, 563, 565, 579], "ngram": [12, 258, 300, 563], "breviti": [12, 258, 259, 300, 301, 563], "penalti": [12, 258, 259, 300, 301, 563], "beam": [12, 258, 300, 563], "cach": [12, 197, 235, 258, 300, 445, 532, 556, 573], "error": [12, 70, 168, 258, 265, 271, 298, 300, 307, 342, 499, 527, 563, 579], "occur": [12, 258, 300], "length": [12, 197, 214, 235, 250, 258, 261, 279, 300, 303, 548, 563, 573, 578], "bleu_scor": [12, 258, 259, 300, 301], "schedul": [21, 257, 290, 294, 299, 320, 329, 331, 350, 567], "mixedprecis": [21, 257, 266, 369, 473, 521, 564], "architectur": [21, 215, 268, 269, 279, 280, 281, 283, 550, 561, 569, 570, 571], "na": [21, 178, 257, 299, 312, 560], "pruning_support": 31, "revis": [31, 32, 33, 34], "644ec953a7dc": 31, "6ece06672ed3": [31, 32], "date": [31, 32, 33, 34, 335, 484], "09": [31, 581], "17": [31, 581], "22": [31, 34, 505, 508, 581], "310141": 31, "14": [32, 33, 252, 254, 555, 581], "6f0d0f71d92e": [32, 33], "08": [32, 214, 250, 578, 581], "31": [32, 581], "07": [32, 33, 580, 581], "229939": 32, "update_dataload": 32, "db_session": [32, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 406, 407, 409, 411, 414], "sqlalchemi": [32, 379, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 406, 407, 409, 411, 412, 414, 556, 561], "orm": [32, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 406, 407, 409, 411, 414], "session": [32, 166, 196, 234, 316, 379, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 406, 407, 409, 411, 412, 414, 577, 579], "exist": [32, 78, 160, 179, 215, 216, 261, 281, 303, 315, 316, 381, 401, 407, 409, 410, 447, 498, 514, 515, 563, 569, 579], "databas": [32, 199, 237, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 408, 409, 410, 411, 412, 484, 498, 514], "update_transform": 32, "13": [33, 34, 334, 544, 581], "9e89549a08c8": [33, 34], "29": [33, 581], "41": [33, 581], "291905": 33, "03": [34, 505, 581], "34": [34, 581], "52": [34, 581], "916541": 34, "run_migrations_offlin": 36, "migrat": [36, 498], "context": [36, 572], "url": [36, 199, 237, 461, 528, 562], "engin": [36, 272, 379, 391, 412], "though": [36, 279], "skip": [36, 318, 577, 579], "creation": [36, 376], "even": [36, 87, 544, 569], "dbapi": 36, "execut": [36, 39, 42, 45, 70, 72, 75, 78, 164, 224, 251, 257, 268, 269, 280, 284, 289, 294, 297, 298, 329, 334, 353, 359, 361, 362, 363, 380, 391, 394, 401, 407, 409, 410, 466, 468, 470, 473, 474, 477, 478, 479, 480, 482, 483, 485, 490, 493, 497, 500, 508, 509, 531, 544, 550, 564, 567, 569, 570, 573, 576, 579, 581], "emit": 36, "string": [36, 37, 39, 42, 45, 70, 71, 72, 81, 88, 131, 136, 137, 160, 166, 177, 178, 197, 199, 216, 221, 235, 237, 251, 254, 256, 257, 258, 261, 267, 268, 269, 272, 280, 281, 282, 284, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 311, 316, 317, 322, 329, 330, 331, 332, 333, 334, 353, 354, 355, 360, 373, 493, 515, 539, 563, 578], "run_migrations_onlin": 36, "associ": [36, 261, 303, 402, 403], "connect": [36, 294, 319, 391, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 544, 569, 570, 576], "cl": [37, 63, 70, 173, 175, 199, 203, 206, 207, 208, 211, 214, 216, 221, 237, 241, 244, 245, 246, 248, 250, 282, 287, 292, 294, 296, 318, 322, 328, 329, 331, 332, 345], "quanit": [37, 42, 45], "chosen": [37, 39, 544], "option": [37, 39, 42, 45, 70, 72, 131, 160, 182, 185, 186, 187, 197, 214, 216, 225, 235, 250, 252, 254, 257, 261, 267, 272, 273, 279, 292, 298, 299, 303, 322, 334, 350, 360, 366, 379, 380, 381, 383, 390, 391, 394, 396, 397, 399, 400, 402, 407, 412, 415, 444, 451, 454, 455, 456, 461, 470, 474, 483, 484, 486, 491, 500, 501, 505, 508, 513, 515, 516, 518, 521, 523, 524, 525, 534, 540, 545, 547, 548, 553, 557, 564, 576, 578, 579, 580], "depend": [37, 39, 44, 72, 87, 185, 186, 215, 257, 268, 280, 281, 334, 546, 556, 557, 572, 579], "categori": [37, 39, 72, 199, 237, 260, 261, 302, 303, 548], "mini": [37, 39, 42, 72, 581], "boolean": [37, 39, 42, 44, 72, 81, 272, 329, 515], "inspect": [37, 39, 42, 45, 70, 72, 544, 575, 577], "capabl": [37, 39, 42, 45, 70, 71, 72, 345, 557, 564, 572, 573, 579, 580], "queri": [37, 39, 42, 44, 45, 70, 72, 131, 136, 143, 166, 277, 279, 338, 382, 389, 398, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 573], "dump": [37, 39, 42, 45, 46, 70, 72, 131, 252, 254, 360, 370, 484, 505, 516, 528, 573, 577], "contain": [37, 39, 42, 45, 46, 70, 72, 81, 92, 93, 95, 99, 131, 134, 160, 166, 168, 177, 185, 186, 197, 198, 199, 235, 236, 237, 251, 252, 254, 256, 257, 261, 262, 263, 267, 270, 275, 276, 284, 285, 286, 287, 289, 292, 293, 294, 295, 296, 297, 299, 303, 304, 305, 322, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 359, 364, 368, 376, 382, 384, 385, 387, 388, 389, 392, 393, 396, 398, 402, 407, 412, 417, 418, 422, 425, 431, 436, 437, 443, 462, 469, 471, 472, 475, 476, 478, 481, 487, 492, 496, 500, 508, 547, 548, 550, 560, 563, 569, 570, 577, 579], "bool": [37, 39, 44, 45, 46, 70, 87, 88, 131, 136, 160, 166, 168, 172, 186, 197, 199, 210, 214, 235, 237, 247, 250, 252, 254, 259, 261, 265, 270, 272, 273, 279, 292, 301, 303, 307, 322, 338, 345, 390, 424, 429, 432, 444, 447, 449, 450, 451, 452, 454, 455, 456, 457, 461, 463, 466, 484, 500, 501, 503, 508, 509, 515, 517, 518, 528, 534, 540, 548, 563, 572, 578], "disk": [37, 39, 70, 72], "memori": [37, 39, 70, 99, 256, 257, 284, 289, 297, 547, 551, 564, 566, 569, 570, 573, 579], "numpi": [37, 39, 42, 45, 70, 72, 92, 93, 95, 131, 166, 214, 250, 255, 261, 265, 270, 272, 282, 303, 307, 354, 355, 556, 578], "arrai": [37, 39, 42, 45, 70, 72, 131, 160, 166, 214, 250, 261, 265, 270, 272, 282, 303, 307, 317, 337, 354, 355, 578], "node0_nam": [37, 39, 70, 72], "weight0_nam": [37, 39, 42, 45, 70, 72], "bias0_nam": [37, 39, 42, 45, 70, 72], "node1_nam": [37, 39, 70, 72], "weight1_nam": [37, 39, 70, 72], "bias1_nam": [37, 39, 70, 72], "output0_nam": [37, 39, 70, 72], "output1_nam": [37, 39, 70, 72], "respons": [37, 39, 42, 45, 70, 72, 503, 507, 514, 527, 531, 532, 536, 538, 540, 541, 573], "int32": [37, 39, 42, 45, 70, 72, 252, 254, 548], "someth": [37, 39, 42, 45, 70, 72, 185, 186, 199, 237, 334], "quantize_input": [37, 39, 72], "abl": [37, 39, 72, 106, 185, 186, 213, 249, 334, 569, 573], "where": [37, 39, 42, 46, 69, 70, 72, 143, 261, 265, 277, 279, 281, 283, 292, 303, 307, 322, 550, 553, 569, 577], "destinatin": [37, 39], "destin": [37, 39, 46, 72, 252, 253, 257, 267], "kerasadaptor": 39, "boolen": [39, 45, 70, 72], "compare_label": [39, 42, 45, 70, 72, 265, 307, 563], "pipelin": [39, 42, 45, 70, 72, 251, 257, 268, 269, 280, 295, 298, 551, 567], "get_optype_wise_": [39, 72], "quantizable_op_detail": 39, "get": [39, 42, 45, 70, 71, 72, 92, 93, 95, 131, 136, 143, 160, 166, 172, 177, 179, 187, 190, 208, 211, 214, 215, 221, 223, 224, 225, 228, 246, 248, 250, 254, 255, 256, 257, 266, 273, 277, 283, 284, 289, 292, 294, 296, 297, 298, 299, 315, 316, 317, 318, 319, 322, 329, 331, 332, 337, 342, 354, 355, 360, 361, 366, 373, 374, 375, 377, 380, 383, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 401, 402, 404, 406, 407, 408, 409, 410, 411, 414, 415, 416, 419, 423, 424, 429, 441, 444, 445, 447, 449, 450, 454, 455, 456, 458, 461, 463, 465, 466, 467, 468, 473, 477, 480, 483, 484, 486, 490, 491, 493, 495, 502, 503, 507, 511, 513, 515, 516, 518, 522, 525, 527, 528, 531, 532, 536, 538, 539, 540, 541, 544, 545, 547, 548, 560, 561, 579], "wise": [39, 72, 161, 176, 292, 322, 336, 337, 338, 342, 404, 407, 515, 544, 547, 560, 569, 570, 577, 579, 580], "union": [39, 72, 259, 261, 265, 301, 303, 307, 350, 373, 375, 391, 413, 451, 500, 503, 505, 507, 508, 515, 518, 519, 521, 523, 527, 563], "kei": [39, 45, 70, 72, 131, 136, 160, 166, 168, 179, 257, 261, 277, 279, 282, 284, 289, 293, 295, 303, 316, 322, 330, 333, 337, 345, 351, 353, 354, 360, 507, 523, 544, 555, 577], "kerasqueri": 39, "local_config_fil": [39, 42, 45, 70, 72], "get_vers": [39, 42, 45, 71, 72], "infom": [39, 45, 72, 217, 218, 254], "get_precis": [39, 42, 45, 71, 72, 377], "get_op_typ": [39, 42, 45, 70, 71, 72], "compos": [39, 45, 70, 72, 160, 214, 250, 547, 578], "dictionari": [39, 45, 46, 70, 72, 92, 93, 95, 143, 168, 172, 178, 179, 182, 213, 249, 261, 268, 270, 273, 279, 280, 281, 283, 299, 303, 382, 384, 385, 387, 389, 392, 393, 398, 402, 403, 405], "get_quantization_cap": [39, 42, 45, 70, 71, 72], "get_op_types_by_precis": [39, 45, 70, 72], "mxnetadaptor": 42, "nc_model": [42, 44, 284, 289], "unimpl": [42, 45], "mxnetmodel": [42, 313], "data_x": [42, 44], "loader": [42, 44, 185, 186, 298, 334], "modelwis": 42, "opwis": 42, "recover_tuned_model": [42, 72], "mxnetqueri": 42, "g": [42, 45, 71, 270, 272, 298, 322, 507, 550, 569, 570, 575, 579], "fully_connect": 42, "get_fuse_pattern": [42, 71, 72], "etc": [42, 71, 177, 213, 224, 249, 251, 256, 257, 263, 271, 272, 284, 289, 297, 299, 305, 334, 359, 550, 560, 576, 579], "get_mixed_precision_combin": [42, 71, 72], "optyp": [44, 253], "enum": [44, 69, 360, 465, 497], "deriv": [44, 69, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 224, 251, 257, 292, 294, 296, 319, 322, 329, 331, 332, 360], "new": [44, 69, 81, 131, 153, 166, 187, 199, 208, 211, 214, 215, 225, 237, 246, 248, 250, 279, 292, 293, 296, 298, 315, 322, 332, 360, 406, 407, 411, 527, 545, 546, 552, 564, 571, 573, 575, 576, 578, 580], "isiter": 44, "obj": [44, 177, 196, 234, 251, 256, 257, 267, 268, 269, 280, 281, 284, 289, 293, 297, 298, 299, 333, 334, 353, 360], "ensure_list": 44, "check_mx_vers": 44, "mx": [44, 547], "__version__": 44, "make_nc_model": 44, "sym_model": 44, "ctx": [44, 547], "input_desc": 44, "tupl": [44, 70, 131, 143, 185, 186, 210, 214, 216, 247, 250, 252, 254, 261, 270, 273, 279, 303, 322, 334, 342, 430, 461, 515, 534, 548, 563, 569, 578], "symnet": 44, "aux": 44, "ncmodel": 44, "suppli": [44, 277], "prepare_model_data": 44, "dataloaderwrap": 44, "is_model_quant": 44, "query_quantizable_nod": 44, "map": [44, 46, 72, 153, 214, 250, 252, 253, 254, 256, 257, 260, 261, 262, 263, 265, 270, 284, 289, 292, 294, 297, 302, 303, 304, 305, 307, 322, 331, 465, 545, 548, 552, 563, 569, 570, 573], "quantize_sym_model": 44, "run_forward": 44, "b_filter": 44, "collector": 44, "pre_batch": 44, "post_batch": 44, "propag": [44, 143], "filter": [44, 197, 198, 199, 200, 201, 202, 204, 208, 235, 236, 237, 238, 239, 240, 242, 246, 257, 299, 383, 424, 447, 517, 548, 560, 569, 570, 577], "make_symbol_block": 44, "gluon": [44, 334, 565], "symbolblock": 44, "make_modul": 44, "parse_tune_config": 44, "quantizable_nod": 44, "distribute_calib_tensor": 44, "calib_tensor": 44, "calib_cfg": 44, "tensor_to_nod": 44, "kl": [44, 351, 354, 355, 557, 579, 580], "minmax": [44, 557, 580], "calib_model": 44, "qsym_model": 44, "calib_data": [44, 547], "gather": [44, 46, 292, 322, 503], "calibdata": 44, "threshold": [44, 46, 174, 261, 292, 303, 322, 351, 354, 355, 563], "calibcollector": 44, "include_tensors_kl": 44, "include_tensors_minmax": 44, "num_bin": [44, 351, 354, 355], "8001": [44, 351, 354], "collectorbas": 44, "tensorcollector": 44, "include_nod": 44, "qtensor_to_tensor": 44, "onnxruntimeadaptor": 45, "rt": 45, "todo": [45, 197, 200, 235, 238, 261, 303, 354, 355, 513], "func": [45, 216, 298, 515, 532, 580], "onnxdataload": 45, "evalut": 45, "onnxtransform": 45, "onnxmetr": 45, "evaluaton": 45, "visualizaton": 45, "f1": [45, 257, 262, 264, 265, 299, 304, 306, 307, 545, 552, 563, 576, 581], "modelproto": [45, 252, 253, 254, 565], "onnxrt_integeropsadaptor": 45, "onnxrt_qdqadaptor": 45, "onnxrtqueri": 45, "get_graph_optim": 45, "onnxrtaug": 46, "model_wrapp": 46, "dump_op_typ": 46, "black_nod": 46, "white_nod": 46, "cpuexecutionprovid": 46, "augment": 46, "augment_graph": 46, "activation_onli": 46, "weight_onli": 46, "quantization_candid": 46, "get_intermediate_output": 46, "calib_mod": 46, "dump_calibr": 46, "naiv": 46, "give": [46, 547, 579], "pair": [46, 128, 136, 564], "minimum": [46, 69, 322, 337, 579], "second": [46, 89, 197, 235, 338, 424, 507, 544, 553, 566, 579, 580], "maximum": [46, 69, 79, 197, 214, 235, 250, 259, 279, 292, 294, 301, 322, 329, 337, 548, 573, 578], "ad": [46, 143, 197, 235, 258, 300, 322, 329, 337, 380, 381, 383, 390, 391, 392, 393, 394, 397, 399, 400, 544, 564, 577], "reducemin": 46, "reducemax": 46, "calculate_quantization_param": 46, "quantization_threshold": 46, "calcul": [46, 70, 72, 168, 200, 201, 216, 238, 239, 257, 262, 263, 273, 278, 279, 284, 288, 289, 292, 294, 295, 304, 305, 318, 319, 322, 330, 331, 342, 351, 354, 415, 507, 513, 548, 563, 566, 569, 573, 576, 579, 580], "matmul": [46, 71, 77, 90, 110, 111, 120, 149, 254, 292, 322, 555, 557], "param_nam": [46, 373], "conv_3": 46, "np": [46, 131, 160, 214, 250, 337, 552, 578], "conv_4": 46, "calculate_scale_zeropoint": 46, "last_nod": 46, "next_nod": 46, "rmin": [46, 69, 543], "rmax": [46, 69, 543], "quantize_rang": [46, 69], "op_registri": 63, "op_typ": [63, 70, 338, 342, 345, 346, 349], "qop_registri": 63, "qoper": 63, "quanttyp": 69, "cast_tensor": 69, "tensorproto": 69, "tensor_target_dtyp": 69, "quantize_data_with_scale_zero": 69, "sym": [69, 557, 580], "asym": [69, 557, 580], "To": [69, 261, 287, 292, 296, 303, 322, 332, 505, 544, 546, 552, 555, 564, 572, 574, 575, 579, 580], "pack": [69, 86], "b": [69, 95, 99, 197, 235, 254, 548, 563, 579], "ab": [69, 279, 294, 319, 543, 573], "quantize_data": 69, "trasnform": 69, "equat": [69, 263, 265, 305, 307, 573], "q": [69, 128], "z": [69, 550], "real": [69, 70, 200, 217, 218, 238, 552, 571, 573], "quantizedvalu": 69, "new_quantized_nam": 69, "scale_nam": 69, "zero_point_nam": 69, "quantized_value_typ": 69, "axi": [69, 322], "quint8": 69, "linearli": 69, "inputoutputinti": 69, "quantizediniti": 69, "quantized_data": 69, "quantizationmod": 69, "quantizedvaluetyp": 69, "quantformat": [69, 254], "attribute_to_kwarg": 69, "kwarg": [69, 70, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159, 182, 199, 208, 211, 212, 214, 218, 219, 222, 237, 250, 256, 257, 267, 273, 279, 284, 289, 295, 297, 298, 299, 306, 307, 309, 310, 311, 313, 315, 316, 317, 330, 334, 346, 349, 350, 359, 360, 365, 367, 369, 370, 371, 372, 382, 384, 385, 387, 389, 392, 393, 398], "helper": [69, 70, 168, 172, 197, 198, 199, 213, 235, 236, 237, 249, 253, 254, 277, 509], "make_nod": 69, "find_by_nam": 69, "item_list": 69, "item": [69, 179, 213, 249, 293, 333, 345, 413, 501, 534, 552, 579], "get_ops_recurs": 70, "prefix": [70, 166, 215, 257, 258, 300, 528, 577], "graph_info": [70, 72, 309, 310, 311, 315, 316, 317], "templateadaptor": 70, "tampl": 70, "is_fused_modul": [70, 168, 172], "_propagate_qconfig_help": [70, 168, 172], "calculate_hessian_trac": 70, "enable_act": [70, 168], "hessian": [70, 168, 340, 579], "gradient": [70, 143, 294, 317, 319, 560, 569, 570, 581], "amap": 70, "op_nam": [70, 178, 182, 299, 338, 342, 345, 346, 349, 415, 420, 421, 429, 430, 577], "hessian_trac": [70, 168], "pytorchadaptor": 70, "objext": 70, "summari": [70, 123, 124, 215, 257, 544, 546, 568, 577], "optimizer_tupl": 70, "criterion_tupl": 70, "is_fused_child": 70, "_post_eval_hook": [70, 577], "is_fused_op": 70, "is_last_fused_child": 70, "q_capabl": 70, "get_non_quant_modul": 70, "model_kwarg": 70, "non_quant_modul": 70, "custom": [70, 136, 177, 270, 298, 359, 402, 407, 550, 569, 576], "keyword": 70, "custom_non_quant_dict": 70, "pytorch_ipexadaptor": 70, "ipex": [70, 560, 573, 581], "unspport": 70, "No": [70, 556, 568, 571], "pytorch_fxadaptor": 70, "fx": [70, 172, 334, 343, 560, 571, 573, 574, 581], "prepare_sub_graph": 70, "sub_module_list": 70, "fx_op_cfg": 70, "is_qat": 70, "example_input": [70, 252, 254, 555], "recurs": [70, 360], "qconfigmap": 70, "prepare_fx": 70, "dir": [70, 172, 197, 235, 359, 548, 556, 558], "convert_sub_graph": 70, "fuse_fx_model": 70, "fused_model": 70, "calculate_op_sensit": [70, 72], "output_op_nam": [70, 72], "confidence_batch": [70, 72, 579], "fallback": [70, 72, 172, 335, 336, 340, 342, 343, 564, 574, 579], "requantize_cfg": [70, 72], "stage": [70, 72, 118, 335, 343, 508, 550, 577, 579], "sort": [70, 72, 160, 342, 424, 579], "sensit": [70, 72, 294, 319, 560, 569, 570], "ops_lst": 70, "pytorchqueri": 70, "set_quantization_config": 71, "organ": [71, 544, 580], "unsupported_precis": 71, "tensorflowadaptor": 72, "graphdef": [72, 81, 82, 85, 86, 88, 95, 99, 110, 111, 117, 118, 119, 120, 131, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159, 160, 166, 316, 493, 565], "graph_def": [72, 78, 166, 316, 334, 458, 493, 494], "frozen": [72, 81, 316, 334, 452, 455, 544, 565], "ckpt": [72, 166, 316, 334, 581], "savedmodel": [72, 316, 334, 581], "folder": [72, 166, 199, 204, 237, 242, 334, 359, 548, 577], "larger": [72, 322], "tuning_cfg_to_fw": 72, "tuning_cfg": 72, "pars": [72, 160, 197, 198, 210, 214, 235, 236, 247, 250, 279, 362, 373, 378, 401, 402, 404, 407, 408, 409, 410, 413, 466, 470, 474, 479, 482, 488, 507, 515, 523, 534, 578], "compat": [72, 106, 166, 261, 270, 303, 316, 552, 565, 575], "definit": [72, 131, 190, 195, 228, 233, 429, 442, 451, 500, 531], "inspect_weight_and_bia": 72, "node_list": 72, "graph_node_name_map": [72, 166], "fused_node_map": 72, "pattern_map": 72, "seq": 72, "fused_mapping_revers": 72, "fused_map": 72, "inspect_activ": 72, "local": [72, 292, 322, 329, 345, 360, 375, 407, 412, 425, 445, 544, 576], "tensorflowbasemodel": [72, 316, 456], "quantizedv2": 72, "qat_convert": 72, "quantize_recip": [72, 136, 137], "kera": [72, 95, 137, 143, 221, 311, 316, 436, 443, 453, 552, 565], "converted_model": [72, 564], "mse": [72, 172, 265, 299, 307, 341, 415, 421, 544, 563, 572, 575], "backup": 72, "cfg": [72, 96, 97, 178], "fallen": 72, "previou": [72, 279, 281, 322, 343, 544, 575, 577, 579], "denot": 72, "tensorflow_itexadaptor": 72, "performance_onli": [72, 128, 152, 157, 165, 525], "get_eightbit_pattern": 72, "qdq_enabl": 72, "eightbit": [72, 577], "generate_internal_pattern": 72, "intern": [72, 131, 168, 277, 499, 547, 570], "bf16convert": [75, 574], "fp32_op": [75, 128], "bf16_op": [75, 128, 574], "graph_bas": [75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130], "graphrewriterbas": [75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130], "do_transform": [75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 145, 152, 153, 157, 161, 164, 165], "convertaddtobiasaddoptim": 77, "addv2": [77, 94, 95, 557], "biasadd": [77, 89, 91, 149, 156, 557], "convertlayoutoptim": 78, "layout": 78, "nchw": 78, "nhwc": 78, "convertleakyreluoptim": 79, "subgraph": [79, 87, 91, 95, 555], "leakyrelu": 79, "mul": [79, 90, 91, 94, 95, 149, 555], "coeffici": [79, 271], "less": [79, 550, 569], "convertnantorandom": 80, "const": [80, 88, 89, 92, 93, 95, 110, 111, 124, 131, 299, 380, 391, 394, 401, 407, 409, 410, 414, 496, 504, 514], "nan": 80, "convertplaceholdertoconst": 81, "rewrit": [81, 82, 83, 84, 85, 86, 87, 88, 98, 103, 105, 106, 107, 108, 109, 112, 115, 116, 125, 126, 129, 130], "renam": [81, 106, 279, 575], "placeholderwithdefault": 81, "constant": [81, 87, 131, 160, 252, 254, 337, 497, 547, 557, 578], "simplifi": 81, "input_graph_def": [81, 82, 85, 86, 88, 95, 99, 110, 111, 131, 160], "nodes_to_convert": 81, "placehold": [81, 195, 233], "strtobool": 81, "val_str": 81, "equival": [81, 270], "dequantizecastoptim": 82, "dilatedcontract": 83, "injectdummybiasaddoptim": 84, "expanddimsoptim": 85, "expanddim": 85, "whose": [85, 110, 111, 293, 322, 558, 569, 579], "fetchweightfromreshapeoptim": 86, "fetch": [86, 190, 228, 261, 303, 547], "reshap": [86, 95, 287, 322], "foldbatchnormnodesoptim": 87, "scale_after_norm": 87, "batchnormwithglobalnorm": 87, "nodedef": [87, 92, 93, 95, 131, 160, 493], "normal": [87, 95, 214, 250, 263, 305, 515, 545, 547, 566, 578], "fold": [87, 88, 252, 254, 557], "convolut": [87, 550, 569, 571], "onc": [87, 131, 166, 221, 296, 332, 544, 547, 569, 570, 571, 579, 581], "That": [87, 544, 547], "opportun": 87, "rather": [87, 558], "expens": [87, 550, 579], "bake": 87, "identifi": [87, 92, 93, 95, 261, 303, 316], "simpler": 87, "form": [87, 95, 106, 261, 263, 303, 305, 407, 409, 508, 544, 550], "spot": 87, "fusedbatchnorm": [87, 106], "fusedbatchnormv3": 87, "_fusedbatchnormex": 87, "newer": 87, "style": [87, 190, 204, 228, 242, 546, 548, 558], "badli": [87, 95, 106], "duplic": [87, 95, 124, 337], "graphfoldconstantoptim": 88, "check_all_fold": 88, "check_const_input": 88, "node_nam": [88, 92, 93, 95, 131, 160, 166, 254, 315, 316, 395, 493], "supported_op_typ": 88, "fusebiasaddandaddoptim": 89, "fusecolumnwisemuloptim": 90, "depthwiseconv2dn": [90, 557], "fuseconvwithmathoptim": 91, "elimin": 91, "math": [91, 573], "realdiv": [91, 94], "node_name_from_input": [92, 93, 95, 131, 160], "strip": [92, 93, 95, 166, 577], "port": [92, 93, 95, 160, 528, 532, 544], "underli": [92, 93, 95, 271], "node_from_map": [92, 93, 95], "node_map": [92, 93, 95], "pull": [92, 93, 95, 508], "entri": [92, 93, 95, 168, 221, 256, 298, 378, 421, 424, 507, 515, 562], "index": [92, 93, 95, 136, 143, 190, 195, 199, 203, 208, 215, 228, 233, 237, 241, 246, 257, 282, 318, 360, 532, 547, 563], "isn": [92, 93, 95, 131], "present": [92, 93, 95, 544, 571], "values_from_const": [92, 93, 95, 131], "node_def": [92, 93, 95, 131], "extract": [92, 93, 95, 131, 199, 237, 534, 548], "ndarrai": [92, 93, 95, 131, 214, 250, 270, 272, 317, 337, 351, 354, 556, 578], "access": [92, 93, 95, 131, 143, 178, 179, 499, 515, 528, 532, 544], "get_const_dim_count": [92, 93], "dimens": [92, 93, 189, 214, 227, 250, 273, 288, 322, 337, 548, 550, 569, 578], "fusegeluoptim": 94, "sqrt": 94, "erf": 94, "gelu": 94, "fuselayernormoptim": 95, "remap": 95, "smaller": [95, 214, 250, 550, 569, 570, 578], "layernorm": [95, 279], "case": [95, 99, 196, 213, 214, 215, 234, 249, 250, 256, 257, 265, 284, 289, 297, 298, 307, 505, 509, 515, 544, 545, 547, 550, 552, 557, 558, 563, 566, 569, 571, 573, 578, 580], "fusedbatcnormv3": 95, "restrict": [95, 569, 570, 576], "2d": 95, "3d": [95, 571, 581], "contraint": 95, "fusedop": 95, "fill": [95, 382, 384, 385, 387, 389, 392, 393, 398, 544, 576, 578], "gamma": 95, "beta": [95, 319], "h": [95, 214, 250, 552, 578], "_mkllayernorm": 95, "fusepadwithconv2doptim": 96, "excluded_op_nam": [96, 97, 178, 182, 299], "new_api": [96, 97, 102, 118, 125, 152, 157, 161], "itex_qdq_mod": [96, 97], "fusepadwithfp32conv2doptim": 97, "fusetransposereshapeoptim": 98, "graphcseoptim": 99, "cse": 99, "those": [99, 342, 360, 550, 558, 567, 569, 570, 573, 579], "child": [99, 577], "b1": 99, "c1c2": 99, "d1": [99, 360], "c1": 99, "c2": 99, "bound": [99, 214, 215, 250, 257, 261, 270, 303, 337, 563, 578], "elim": 99, "grappleroptim": 100, "input_output_nam": 100, "opt_cfg": 100, "wrapper": [100, 143, 196, 208, 211, 214, 216, 217, 218, 219, 220, 234, 246, 248, 250, 261, 265, 303, 306, 307, 310, 312, 532, 540, 574], "grappler": [100, 557], "insertprintminmaxnod": 102, "pre_node_nam": 102, "post_node_nam": 102, "movesqueezeafterreluoptim": 103, "removetrainingnodesoptim": 105, "protected_nod": [105, 160], "types_to_splic": [105, 160], "checknumer": [105, 160], "stopgradi": 105, "renamebatchnormoptim": 106, "fusedbatchnormv2": 106, "due": [106, 569, 570, 573, 577], "histor": 106, "latter": [106, 136], "former": 106, "platform": [106, 503, 560, 571, 573, 581], "vnni_bf16": 106, "amx": 106, "instruct": [106, 544, 550, 561, 564, 571, 572, 573], "splitsharedinputoptim": 107, "stripequivalentnodesoptim": 108, "output_node_nam": [108, 109, 152, 153, 157, 160, 166], "stripunusednodesoptim": 109, "input_node_nam": [109, 152, 157, 160, 166], "switchoptim": 110, "condit": [110, 197, 198, 199, 214, 235, 236, 237, 250, 548, 562, 578, 579], "enter": [110, 111], "updateenteroptim": 111, "workaround": 111, "freezefakequantopoptim": 114, "fake_qu": [114, 128, 152, 157], "freezevaluetransform": 115, "max_min_data": [115, 116], "postfix": [115, 116], "tensor_data": 115, "th": [115, 116], "gpu": [115, 116, 128, 131, 160, 560, 569, 572, 573], "itex_mod": [115, 128, 152, 157], "generate_output_graph": [115, 116], "max_name_valu": [115, 116], "freeze_max": [115, 116], "freeze_min": [115, 116], "generate_output_graph_rang": [115, 116], "freezevaluewithoutcalibtransform": 116, "95": [116, 261, 265, 303, 307, 563, 581], "fuseconvredundantdequantizetransform": 117, "_quantizedconv": 117, "_quantizeddeconv": 117, "successor": [117, 118, 119, 120], "fuseconvrequantizetransform": 118, "requant": [118, 120, 577], "fuse_pattern": 118, "sum_pattern": 118, "fusematmulredundantdequantizetransform": 119, "_quantizedmatmul": [119, 120], "fusematmulrequantizedequantizetransform": 120, "quantizedmatmul": 120, "quantizedmatmulwithbiasanddequant": 120, "fusematmulrequantizetransform": 120, "rtype": [120, 509], "fusematmulrequantizedequantizenewapitransform": 120, "fusematmulrequantizenewapitransform": 120, "newapi": 120, "metainfochangingmemopoptim": 122, "metaop": 122, "posthostconstconvert": 123, "hostconst": 123, "postcseoptim": 124, "share": [124, 160, 556, 557, 579], "quantizev2": [124, 149], "quantizedrnnconvert": 125, "calibration_data": [125, 128], "rnn_detail": 125, "scalepropagationtransform": 126, "direct": [126, 292, 322, 465], "generategraphwithqdqpattern": 128, "op_wise_config": [128, 152, 157], "quantized_nod": 128, "dq": 128, "befor": [128, 143, 197, 224, 235, 251, 252, 254, 257, 284, 289, 292, 294, 295, 296, 322, 329, 330, 331, 332, 342, 401, 544, 546, 547, 548, 550, 552, 556, 557, 566, 569, 573, 576, 577, 579], "mergeduplicatedqdqoptim": 129, "shareqdqforitexypatternoptim": 130, "graphanalyz": 131, "extend_engin": 131, "singleton": [131, 299, 496, 504], "properti": [131, 143, 187, 189, 197, 199, 215, 216, 224, 225, 227, 235, 237, 251, 256, 257, 264, 265, 266, 267, 281, 284, 289, 297, 298, 306, 307, 309, 310, 311, 313, 315, 316, 317, 330, 337, 345, 361, 379, 412, 419, 423, 428, 429, 432, 444, 447, 452, 456, 465, 468, 473, 477, 480, 483, 490, 500, 507, 508, 509, 513, 518, 522, 525, 527, 528, 562, 568], "getter": [131, 224, 251, 257, 281, 284, 289, 297, 298, 316, 317, 445], "_graph": 131, "has_positive_input": 131, "retrun": 131, "neg": 131, "get_graph_input_output": 131, "clearli": 131, "similar": [131, 279, 572, 579, 580], "summarize_graph": 131, "writtern": 131, "googl": [131, 564, 571], "query_fusion_pattern_nod": 131, "aggreg": [131, 509], "_search_pattern": 131, "remove_node_with_single_input_output": 131, "rebuild": 131, "except": [131, 299, 360, 496, 504, 505, 515, 530, 540], "remove_nod": 131, "replace_const_nod": 131, "new_const_nod": 131, "target_nod": 131, "old_constant_node_nam": 131, "replace_al": 131, "outdat": 131, "replace_constant_graph_with_constant_nod": 131, "new_nod": 131, "old_end_node_nam": 131, "replace_single_nod": 131, "old_output_node_nam": 131, "old_output_nam": 131, "old_input_node_nam": 131, "old_input_nam": 131, "bottom": [131, 544], "replace_nod": 131, "old_node_nam": 131, "output_nodes_nam": 131, "node_name_detail": 131, "parent": [131, 288, 294, 296, 329, 332, 577], "add_nod": [131, 429], "start_node_nam": 131, "end_node_nam": 131, "dump_graph": 131, "parse_graph": 131, "graphrewriterhelp": 131, "encapsul": [131, 185, 186, 334, 565], "compare_node_attr": 131, "node_a": 131, "node_b": 131, "compar": [131, 168, 265, 307, 544, 547, 551, 563, 570, 573, 576, 577, 579], "create_nod": [131, 160], "create_constant_nod": [131, 160], "datatyp": [131, 160, 574, 579], "set_attr_dtyp": [131, 160], "set_attr_tensor": [131, 160], "set_attr_type_list": [131, 160], "attr": [131, 160, 166], "set_attr_string_list": [131, 160], "set_attr_str": [131, 160], "set_attr_int_list": 131, "set_attr_int": [131, 160], "set_attr_float": [131, 160], "set_attr_bool": [131, 160], "fakequantizebas": 134, "get_config": [134, 143, 541], "serial": [134, 197, 235, 413, 420, 421, 451, 503, 505, 517, 518, 522, 523, 547], "fakequant": 134, "classmethod": [134, 143, 285, 286, 287, 346, 349, 502, 536, 538, 541], "from_config": [134, 143], "instanti": [134, 567], "per_channel": [134, 557, 580], "num_bit": 134, "channel_axi": [134, 174, 176], "symmetr": [134, 543, 573, 578, 579], "narrow_rang": 134, "quantizeconfig": [136, 137, 143], "There": [136, 265, 298, 307, 544, 550, 557, 560, 563, 564, 579, 580], "add_quantize_recip": 136, "recip": [136, 252, 254, 256, 257, 297, 555, 579], "layer_nam": [136, 292, 322], "some": [136, 185, 197, 224, 235, 257, 293, 345, 515, 544, 553, 561, 563, 566, 569, 570, 573, 574, 577, 579], "conv5_block3_3_conv": 136, "flase": 136, "conv5_block3_3_add": 136, "query_lay": 136, "layer_recip": 136, "remove_lay": 136, "layers_nam": 136, "get_quantize_recip": 136, "is_empti": 136, "clear_quantize_recip": 136, "init_quantize_config": 137, "model_nam": [137, 273, 390, 396, 515], "qat_clone_funct": 137, "leav": 137, "quantizewrapp": [137, 143], "wrapped_lay": 137, "quantizelayeradd": 140, "quantize_layer_bas": [140, 142], "quantizelayerbas": [140, 142], "quantizelayerbatchnorm": 142, "quantizewrapperbas": 143, "trainabl": 143, "sublay": 143, "trainable_weight": 143, "track": [143, 345, 576], "descent": 143, "non_trainable_weight": 143, "manual": [143, 199, 237, 548], "add_loss": 143, "regular": [143, 258, 293, 300, 331, 569], "eager": [143, 295, 330, 362, 470, 474, 482, 552, 560, 573, 574, 577, 581], "safe": [143, 354, 355, 546], "gradienttap": 143, "input_shap": [143, 201, 239, 444, 447, 456, 548], "tensorshap": 143, "compute_output_shap": 143, "caus": [143, 569, 570], "state": [143, 168, 264, 265, 277, 279, 306, 307, 346, 349, 569, 570], "happen": 143, "later": [143, 360, 577], "output_shap": 143, "query_input_index": 143, "logic": [143, 185, 186, 345, 527, 580], "live": 143, "output_obj": 143, "fusenodestartwithfusedbatchnormv3": [144, 154], "quantize_graph_bas": [144, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159], "quantizenodebas": [144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159], "get_longest_fus": [144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159], "apply_the_transform": [144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159], "fusenodestartwithconcatv2": [145, 155], "fusenodestartwithconv2d": [146, 156], "fusenodestartwithdeconv2d": 147, "fusenodestartwithfusedinstancenorm": 148, "fusenodestartwithmatmul": [149, 158], "apply_matmul_biasadd_relu_fus": 149, "match_node_nam": [149, 156], "apply_matmul_biasadd_fus": 149, "apply_batchmatmulv2_fus": 149, "batchmatmul": 149, "batchmatmulv2": 149, "apply_batchmatmulv2_mul_add_fus": 149, "fusenodestartwithpool": [150, 159], "optimizeqdqgraph": 152, "op_wise_sequ": [152, 157], "quantizegraphbas": [152, 153, 157], "remove_dead_nod": 153, "output_nam": [153, 252, 254, 555], "longer": [153, 197, 214, 235, 250, 548, 578], "add_output_graph_nod": 153, "output_nod": [153, 390], "create_nodes_map": 153, "apply_conv_biasadd_relu_fus": 156, "quantizegraphforintel": 157, "quantizegraphhelp": 160, "staticmethod": 160, "get_sorted_graph": 160, "reorder": [160, 277, 279], "easier": [160, 544, 571], "split_shared_input": 160, "in_graph": [160, 166], "ouput": 160, "remove_training_nod": 160, "aren": 160, "uncondition": 160, "copy_attr": 160, "attr_valu": 160, "copi": [160, 293], "unique_node_name_from_input": 160, "ensure_tensor_name_has_port": 160, "biascorrect": 161, "fp32_graph": 161, "weight_empir": 161, "graph_transform_bas": [161, 164, 165], "graphtransformbas": [161, 164, 165], "Will": [161, 188, 191, 208, 528, 550, 560], "task": [161, 197, 204, 235, 242, 265, 279, 307, 548, 550, 560, 563, 569, 570], "w_int8": [161, 176], "w_fp32": [161, 176], "ratio": [161, 176, 210, 214, 247, 250, 257, 284, 289, 292, 294, 295, 296, 322, 329, 330, 332, 548, 569, 570, 578, 581], "equal": [161, 176, 563], "scale_c": [161, 176], "shift": [161, 176, 210, 247, 578], "notic": [161, 176, 215, 257, 562], "empir": [161, 176], "insertlog": 164, "input_pb": [164, 165], "node_name_list": 164, "show_nam": 164, "show_op": 164, "first_n": 164, "summar": [164, 550], "1024": [164, 199, 237], "messag": [164, 515, 527, 532, 579], "dump_fp32": 164, "rerangequantizedconcat": 165, "rerange_quant": 165, "concat": [165, 500], "disable_random": 166, "seed": [166, 270, 272, 283, 525, 547, 553, 580], "read_graph": 166, "in_graph_is_binari": 166, "read": [166, 199, 202, 214, 237, 240, 250, 257, 284, 289, 293, 295, 330, 430, 434, 435, 548, 574, 576], "write_graph": 166, "out_graph_def": 166, "out_graph_fil": 166, "write": [166, 206, 207, 208, 244, 245, 246, 261, 303, 360, 552, 558, 577], "is_ckpt_format": 166, "model_path": [166, 430, 445, 450, 515], "is_saved_model_format": 166, "saved_model": [166, 257, 267, 436, 443, 453], "get_tensor_by_nam": 166, "try_cnt": 166, "scope": [166, 224, 257], "tensor_nam": [166, 317], "suffix": 166, "iterator_sess_run": 166, "sess": [166, 316], "iter_op": 166, "feed_dict": [166, 196, 234], "output_tensor": [166, 316], "makeiter": 166, "strip_unused_nod": 166, "strip_unused_lib": 166, "r1": 166, "15": [166, 272, 557, 581], "branch": 166, "strip_equivalent_nod": 166, "get_tensor_val_from_graph_nod": 166, "tensor_v": 166, "hessiantrac": 168, "yao": 168, "zhewei": 168, "et": [168, 279], "al": [168, 279], "pyhessian": 168, "2020": [168, 562], "ieee": [168, 564], "confer": [168, 570], "big": 168, "dong": 168, "zhen": 168, "hawq": [168, 340, 579], "system": [168, 215, 360, 503, 530, 531, 569], "33": [168, 270, 581], "18518": 168, "18529": 168, "openvinotoolkit": 168, "nncf": 168, "mse_metric_gap": [168, 415], "fp32_tensor": [168, 415], "dequantize_tensor": [168, 415], "euclidean": [168, 415, 550], "distanc": [168, 415, 550], "get_act_gap": 168, "gap": [168, 555, 565], "get_avg_trac": 168, "num_sampl": [168, 265, 307], "compare_weight": 168, "float_dict": 168, "quantized_dict": 168, "being": [168, 261, 273, 298, 303, 354, 355, 432], "usag": [168, 196, 234, 257, 261, 267, 298, 303, 515, 544, 548, 552, 554, 563, 566, 572, 578], "wt_compare_dict": 168, "float_model": 168, "qmodel": 168, "compute_error": 168, "weight_dict": 168, "get_embedding_contigu": 172, "embed": [172, 279], "contigu": [172, 569], "append_attr": 172, "fx_model": 172, "get_mse_order_per_fp32": 172, "example_inp": 172, "influenc": 172, "fallback_ord": 172, "algorithm_registri": [173, 175], "algorithm_typ": [173, 175], "registr": [173, 175, 199, 203, 206, 207, 208, 211, 214, 221, 237, 241, 244, 245, 246, 248, 250, 287], "algorithmschedul": [173, 175], "fastbiascorrect": 174, "weightcorrect": 176, "ep": 176, "1e": [176, 580], "05": [176, 261, 265, 303, 307, 508, 563, 581], "conf_fname_or_obj": [177, 215, 224, 251, 256, 257, 266, 267, 268, 269, 280, 281, 284, 289, 297, 298, 299], "benchmark_conf": [177, 178, 299], "prefer": [177, 256, 257, 297, 299, 334], "b_dataload": [177, 215, 257, 545], "b_func": [177, 215, 257], "benchmarkconfig": 177, "prunerv2": 178, "target_spars": [178, 182, 299, 322, 572, 580], "pruning_typ": [178, 182, 299], "start_step": [178, 182, 294, 299, 329, 572], "end_step": [178, 182, 294, 299, 329, 572], "pruning_scop": [178, 182, 299], "pruning_frequ": [178, 182, 299, 329], "min_sparsity_ratio_per_op": [178, 182, 299, 322], "max_sparsity_ratio_per_op": [178, 182, 299, 322, 329], "sparsity_decay_typ": [178, 182, 299], "pruning_op_typ": [178, 182, 299], "reg_typ": 178, "criterion_reduce_typ": 178, "resume_from_pruned_checkpoint": 178, "similiar": [178, 182, 299], "cfg_fname": 178, "parser": [178, 299, 373, 378, 496, 500, 504, 534], "quantization_conf": 178, "dotdict": 178, "pruning_conf": 178, "graph_optimization_conf": [178, 256, 257], "mixedprecision_conf": 178, "distillation_conf": [178, 251, 257], "search_spac": [178, 268, 280, 281, 282, 283], "defaultconf": 178, "notat": [178, 179], "deep_get": 179, "dot": [179, 515, 564, 573], "nest": 179, "eg": [179, 199, 203, 208, 237, 241, 246, 548, 572], "john": 179, "deep_set": 179, "male": 179, "weightpruningconfig": [182, 299], "pruning_config": [182, 299], "snip_momentum": [182, 299, 319], "4x1": [182, 288, 299, 322, 581], "98": [182, 299, 572, 581], "exp": [182, 299], "distillationconfig": [182, 299], "teacher_model": [182, 216, 251, 257, 299, 550], "learning_r": [182, 299, 572, 580], "callabl": [182, 263, 299, 305, 350, 511, 515, 531, 532], "altern": [182, 299], "sigopttunestrategi": 185, "q_dataload": [185, 186, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 558, 579], "q_hook": [185, 186, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345], "tunestrategi": [185, 186, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 579], "hpo": 185, "mandatori": [185, 186, 334, 553, 580], "reserv": [185, 186, 224, 257, 298], "tuner": [185, 186, 256, 257, 297, 334], "scalar": [185, 186, 334, 354, 355, 563, 564, 573], "pseudo": [185, 186, 334, 577], "next_tune_cfg": [185, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 579], "travers": [185, 186, 335, 338, 339, 345], "concret": [185, 345, 579], "overrid": [185, 224, 257, 297, 345, 360, 505], "constraint": [185, 256, 257, 297, 547, 576, 579, 580], "tpetunestrategi": 186, "stop": [186, 338, 345, 484, 508, 553, 579, 580], "trials_count": [186, 338, 345], "reach": [186, 292, 296, 322, 332, 345, 546, 569, 570, 579], "basedatalod": [187, 225], "basedataload": [187, 189, 192, 193, 194, 196, 225, 227, 230, 231, 232, 234], "last_batch": [187, 189, 192, 193, 194, 196, 217, 218, 225, 227, 230, 231, 232, 234], "rollov": [187, 189, 192, 193, 194, 196, 217, 218, 225, 227, 230, 231, 232, 234], "collate_fn": [187, 189, 190, 192, 193, 194, 196, 217, 218, 225, 227, 228, 230, 231, 232, 234, 548], "sampler": [187, 189, 191, 192, 193, 194, 196, 217, 218, 225, 227, 229, 230, 231, 232, 234, 246, 257, 347, 552], "batch_sampl": [187, 189, 192, 193, 194, 196, 217, 218, 225, 227, 230, 231, 232, 234], "num_work": [187, 189, 192, 193, 194, 196, 217, 218, 225, 227, 230, 231, 232, 234, 573], "pin_memori": [187, 189, 192, 193, 194, 196, 217, 218, 225, 227, 230, 231, 232, 234], "shuffl": [187, 189, 192, 193, 194, 196, 217, 218, 225, 227, 230, 231, 232, 234, 547, 573], "_generate_dataload": [187, 225], "drop": [187, 225, 261, 293, 303, 564, 569, 570, 581], "incomplet": [187, 225], "discard": [187, 225], "entranc": [188, 191, 208], "dispatch": [188, 191, 208, 560], "default_col": [189, 227], "merg": [189, 227, 577, 579], "outer": [189, 227], "defaultdataload": [189, 193, 196, 227, 231, 234], "base_dataload": [189, 191, 192, 193, 194, 196, 227, 229, 230, 231, 232, 234, 246, 257], "drop_last": [190, 195, 228, 233], "iterablefetch": [190, 228], "indexfetch": [190, 228], "default_dataload": [191, 193, 196, 229, 231, 234, 246, 257], "fetcher": [191, 229, 246, 257], "mxnet_dataload": [191, 229, 246, 257], "onnxrt_dataload": [191, 229, 246, 257], "pytorch_dataload": [191, 229, 246, 257], "tensorflow_dataload": [191, 229, 246, 257, 493], "mxnetdataload": [192, 230], "onnxrtbertdataload": [193, 231], "bert": [193, 196, 197, 214, 231, 234, 235, 250, 548, 550, 553, 563, 569, 578, 581], "varient": [193, 231], "onnxrtdataload": [193, 231], "pytorchdataload": [194, 232], "data_sourc": [195, 233], "__iter__": [195, 199, 203, 208, 233, 237, 241, 246, 545, 547], "matter": [195, 233, 574], "iterablesampl": [195, 233], "squential": [195, 233], "iterabledataset": [195, 198, 199, 201, 202, 203, 208, 233, 236, 237, 239, 240, 241, 246], "indexdataset": [195, 233], "__getitem__": [195, 199, 203, 208, 211, 214, 233, 237, 241, 246, 248, 250, 545, 547, 548], "__len__": [195, 199, 203, 208, 233, 237, 241, 246, 547, 548], "inter": [195, 199, 203, 208, 233, 237, 241, 246], "retriev": [195, 233, 509], "sequentialsampl": [195, 233], "batchsampl": [195, 233], "tfdatadataload": [196, 234], "tensorflow1": [196, 234], "coupl": [196, 234], "satisfi": [196, 234, 561], "tf1": [196, 234, 565], "although": [196, 234, 576], "tensorflowbertdataload": [196, 234], "tensorflowmodelzoobertdataload": [196, 234], "zoo": [196, 214, 234, 250, 581], "tensorflowdataload": [196, 234, 493], "directli": [196, 234, 261, 265, 293, 303, 307, 555, 563, 572, 573, 577], "pytorchbertdataset": [197, 235], "model_typ": [197, 235, 415, 445, 548], "tensordataset": [197, 235, 548], "link": [197, 235, 544, 548, 581], "huggingfac": [197, 235, 548], "easi": [197, 235, 257, 297, 544, 547, 555, 571, 573, 576], "squad": [197, 214, 235, 250, 262, 263, 265, 304, 305, 307, 548, 563, 578, 581], "xlnet": [197, 235, 548], "xlm": [197, 235, 548, 581], "101": [197, 235, 265, 307, 563, 581], "2043": [197, 235], "2001": [197, 235], "preprocess": [197, 208, 211, 214, 235, 246, 248, 250, 251, 257, 279, 547, 552, 578], "onnxrtbertdataset": [197, 235], "data_dir": [197, 235, 548], "model_name_or_path": [197, 235, 548], "max_seq_length": [197, 214, 235, 250, 548, 578], "128": [197, 200, 201, 214, 235, 238, 239, 250, 548, 573, 578, 581], "do_lower_cas": [197, 213, 214, 235, 249, 250, 548, 578], "mrpc": [197, 235, 265, 307, 548, 563, 581], "dynamic_length": [197, 235, 548], "shortcut": [197, 235, 548], "truncat": [197, 214, 235, 250, 548, 578], "shorter": [197, 214, 235, 250, 548, 578], "lowercas": [197, 235, 548], "qqp": [197, 235, 548, 563, 581], "qnli": [197, 235, 548, 563, 581], "rte": [197, 235, 548, 563, 581], "st": [197, 235, 548, 563], "cola": [197, 235, 548, 563, 581], "mnli": [197, 235, 548, 563, 581], "wnli": [197, 235, 548, 563, 581], "mobilebert": [197, 235, 548, 550, 581], "roberta": [197, 235, 548, 581], "fix": [197, 235, 294, 329, 546, 548, 570, 579], "uncas": [197, 214, 235, 250, 548, 578, 581], "load_and_cache_exampl": [197, 235], "convert_examples_to_featur": [197, 214, 235, 250], "max_length": [197, 235], "label_list": [197, 235, 265, 307], "output_mod": [197, 235], "pad_token": [197, 235], "pad_token_segment_id": [197, 235], "mask_padding_with_zero": [197, 235], "inputfeatur": [197, 214, 235, 250], "input_id": [197, 214, 235, 250, 550, 569], "vocabulari": [197, 213, 214, 235, 249, 250, 279, 578], "attention_mask": [197, 235, 569], "mask": [197, 235, 261, 277, 279, 288, 292, 294, 296, 303, 317, 322, 329, 332, 569, 570, 581], "NOT": [197, 235, 557], "token_type_id": [197, 235, 569], "segment": [197, 235, 259, 261, 301, 303], "portion": [197, 235], "problem": [197, 235, 265, 272, 307, 563, 564], "regress": [197, 235, 546], "seq_length": [197, 235], "to_json_str": [197, 235], "json": [197, 198, 214, 235, 236, 250, 370, 488, 490, 498, 505, 515, 548, 565, 578], "tensorflowbertdataset": [197, 235], "root": [197, 198, 199, 202, 235, 236, 237, 240, 265, 271, 307, 309, 310, 311, 313, 315, 316, 317, 350, 532, 545, 547, 548, 552, 563, 580], "label_fil": [197, 214, 235, 250, 548, 578], "tfrecord": [197, 198, 199, 203, 208, 235, 236, 237, 241, 246, 548], "parsedecodebert": [197, 235], "tensorflowmodelzoobertdataset": [197, 198, 235, 236], "num_cor": [197, 198, 202, 235, 236, 240, 548], "28": [197, 198, 202, 235, 236, 240, 548, 581], "resiz": [197, 198, 210, 214, 235, 236, 247, 250, 545, 547, 548, 578], "coco": [198, 205, 209, 236, 243, 261, 265, 303, 307, 563], "parsedecodecoco": [198, 236], "cocorecorddataset": [198, 236], "directori": [198, 199, 236, 237, 316, 359, 360, 424, 477, 498, 515, 528, 548, 552, 556, 577], "interleav": [198, 236, 548], "parallel": [198, 236, 548, 569], "cocoraw": [198, 236, 548], "img_dir": [198, 236, 548], "val2017": [198, 236, 548], "anno_dir": [198, 236, 548], "annot": [198, 236, 261, 303, 548, 563], "instances_val2017": [198, 236, 548], "arrang": [198, 199, 202, 236, 237, 240, 329, 548, 569], "jpg": [198, 202, 204, 236, 240, 242, 548], "coconpi": [198, 236, 548], "npy_dir": [198, 236, 548], "npy": [198, 236, 548], "tensorflowdataset": [199, 237], "pytorchdataset": [199, 237], "mxnetdataset": [199, 237], "onnxrtqldataset": [199, 237], "onnxrtitdataset": [199, 237], "IT": [199, 206, 237, 244], "pytorchmxnetwrapdataset": [199, 237], "datafunc": [199, 237], "pytorchmxnetwrapfunct": [199, 214, 237, 250], "framework_dataset": [199, 237], "convent": [199, 237, 261, 303, 550], "imageclassifi": [199, 237], "choos": [199, 237, 344, 544, 560, 575, 579, 580], "tensorflow_itex": [199, 202, 203, 204, 206, 207, 208, 237, 240, 241, 242, 244, 245, 246, 572], "onnxrt_qdq": [199, 203, 206, 207, 208, 237, 241, 244, 245, 246, 572], "onnxrt_qlinearop": [199, 203, 206, 207, 208, 214, 237, 241, 244, 245, 246, 250, 572], "onnxrt_integerop": [199, 203, 206, 207, 208, 214, 237, 241, 244, 245, 246, 250, 553, 572], "pytorch_ipex": [199, 203, 206, 207, 208, 237, 241, 244, 245, 246, 572, 580], "pytorch_fx": [199, 203, 206, 207, 208, 237, 241, 244, 245, 246, 572], "onnxrt_qoper": [199, 203, 206, 207, 208, 237, 241, 244, 245, 246, 572], "dataset_registri": [199, 203, 208, 237, 241, 246], "dataset_typ": [199, 203, 208, 237, 241, 246, 256, 257, 267, 297, 383], "dataset_format": [199, 203, 208, 237, 241, 246], "data_format": [199, 203, 208, 210, 237, 241, 246, 247], "raw_imag": [199, 203, 208, 237, 241, 246], "overwrit": [199, 203, 208, 237, 241, 246], "download_url": [199, 237], "filenam": [199, 237, 271, 360, 361, 461, 477, 484, 490, 500, 508, 548], "md5": [199, 237], "download": [199, 237, 436, 459, 460, 462, 463, 496, 544, 548, 561, 575], "gen_bar_updat": [199, 237], "progress": [199, 237, 296, 322, 329, 332, 570], "bar": [199, 237, 544], "check_integr": [199, 237], "fpath": [199, 237], "checksum": [199, 237], "calculate_md5": [199, 237], "chunk_siz": [199, 237], "cifar10": [199, 237, 548], "cifar100": [199, 237, 548], "toronto": [199, 237, 548], "edu": [199, 237, 548], "kriz": [199, 237, 548], "cifar": [199, 237, 548, 581], "tar": [199, 237, 548], "gz": [199, 237, 548], "subset": [199, 202, 237, 240, 548], "internet": [199, 237, 544, 548], "put": [199, 237, 548, 550, 569], "again": [199, 237, 548, 574], "load_meta": [199, 237], "meta": [199, 237], "pytorchcifar10": [199, 237], "mxnetcifar10": [199, 237], "tensorflowcifar10": [199, 237], "pytorchcifar100": [199, 237], "mxnetcifar100": [199, 237], "tensorflowcifar100": [199, 237], "mnist": [199, 237, 548, 552], "institut": [199, 237], "standard": [199, 214, 237, 250, 555, 563, 578, 579], "fashionmnist": [199, 237, 548], "npz": [199, 237, 548], "idx1": [199, 237, 548], "ubyt": [199, 237, 548], "idx3": [199, 237, 548], "t10k": [199, 237, 548], "class_to_idx": [199, 237], "read_data": [199, 237], "pytorchmnist": [199, 237], "mxnetmnist": [199, 237], "tensorflowmnist": [199, 237], "pytorchfashionmnist": [199, 237], "mxnetfashionmnist": [199, 237], "tensorflowfashionmnist": [199, 237], "imagefold": [199, 237, 545, 547, 548, 552], "subfold": [199, 237], "belong": [199, 237, 254, 312, 573], "class_1": [199, 237, 548], "xxx": [199, 237, 548, 550], "png": [199, 237, 548], "xxy": [199, 237, 548], "xxz": [199, 237, 548], "class_n": [199, 237, 548], "123": [199, 237, 548, 578], "nsdf3": [199, 237, 548], "asd932_": [199, 237, 548], "mxnetimagefold": [199, 237], "tensorflowimagefold": [199, 237], "tensorflowtfrecorddataset": [199, 237], "tensorflowimagerecord": [199, 237], "000": [199, 237, 548], "001": [199, 237, 548, 552, 580], "099": [199, 237, 548], "tensorflowvocrecord": [199, 237], "pascal": [199, 237], "voc": [199, 237, 265, 307], "2012": [199, 237], "00000": [199, 237], "00004": [199, 237], "00001": [199, 237], "00003": [199, 237], "dummydataset": [200, 201, 238, 239], "127": [200, 201, 238, 239, 548, 573, 581], "stand_norm": [200, 201, 238, 239, 548], "dummy_v2": [201, 239, 548], "sparse_dummy_v2": [201, 239, 548], "label_shap": [201, 239, 548], "sparsedummydataset": [201, 239], "dense_shap": [201, 239, 548], "sparse_ratio": [201, 239, 548], "imagenetraw": [202, 240, 548], "data_path": [202, 240, 548], "image_list": [202, 240, 548], "img1": [202, 240, 548], "img2": [202, 240, 548], "imgx": [202, 240, 548], "val_map": [202, 240, 548], "pytorchimagenetraw": [202, 240], "mxnetimagenetraw": [202, 240], "tensorflowimagenetraw": [202, 240], "inteltensorflow": [202, 204, 240, 242], "tensorflowimagenetdataset": [202, 240], "onnxrtimagenetdataset": [202, 240], "bert_dataset": [203, 208, 241, 246, 257, 299], "coco_dataset": [203, 208, 241, 246, 257, 299], "dummy_dataset": [203, 208, 241, 246, 257, 299], "dummy_dataset_v2": [203, 208, 241, 246, 257, 299], "imagenet_dataset": [203, 208, 241, 246, 257, 299], "style_transfer_dataset": [203, 208, 241, 246, 257, 299], "transfer": [204, 242, 251, 257, 548, 550, 551], "styletransferdataset": [204, 242], "content_fold": [204, 242, 548], "style_fold": [204, 242, 548], "crop_ratio": [204, 242, 548], "resize_shap": [204, 242, 548], "image_format": [204, 242, 548], "holder": [204, 242, 548], "labelbalancecocorecordfilt": [205, 243], "balanc": [205, 243, 568], "labelbalancecocorawfilt": [205, 243], "tensorflowfilt": [206, 244], "onnxrtqlfilt": [206, 244], "onnxrtitfilt": [206, 244], "pytorchfilt": [206, 244], "mxnetfilt": [206, 244], "filter_registri": [206, 207, 208, 244, 245, 246], "filter_typ": [206, 207, 208, 244, 245, 246], "__call__": [206, 207, 208, 244, 245, 246, 547], "coco_filt": [207, 208, 245, 246, 257, 299], "imagenet_transform": [208, 211, 246, 248, 257, 299], "transform_cl": [208, 211, 214, 246, 248, 250], "basetransform": [208, 209, 210, 211, 214, 246, 247, 248, 250], "transform_registri": [208, 211, 214, 246, 248, 250], "transform_typ": [208, 211, 214, 246, 248, 250], "postprocess_cl": [208, 211, 212, 218, 222, 545], "user_postprocess": [208, 211, 212, 218, 222], "parsedecodecocotransform": 209, "quantizedinput": [210, 247, 578], "desir": [210, 214, 247, 250, 279, 578], "labelshift": [210, 247, 518, 578], "label_shift": [210, 247, 578], "parsedecodeimagenet": [210, 247, 578], "proto": [210, 214, 247, 250, 578], "parsedecodeimagenettransform": [210, 247], "tensorflowresizecropimagenettransform": [210, 247], "height": [210, 214, 247, 250, 273, 292, 322, 552, 569, 578, 580], "random_crop": [210, 247, 578], "resize_sid": [210, 247, 578], "resize_method": [210, 247], "bilinear": [210, 214, 247, 250, 578], "random_flip_left_right": [210, 247, 578], "mean_valu": [210, 247, 578], "channels_last": [210, 247], "subpixel": [210, 247], "rgb": [210, 247], "applic": [210, 247, 499, 528, 530, 532, 544, 555, 571, 577, 578], "crop": [210, 214, 247, 250, 548, 578], "flip": [210, 214, 247, 250, 578], "left": [210, 214, 247, 250, 322, 544, 578], "std": [210, 214, 247, 250, 273, 545, 547, 578], "bilinearimagenettransform": [210, 247], "central_fract": [210, 247, 578], "875": [210, 247, 578], "fraction": [210, 247, 578], "onnxbilinearimagenettransform": [210, 247], "onnxresizecropimagenettransform": [210, 247], "std_valu": [210, 247], "229": [210, 247, 545, 547], "225": [210, 247, 545, 547], "resizewithaspectratio": [210, 247], "87": [210, 247, 581], "inter_pol": [210, 247], "cv2": [210, 247], "inter_area": [210, 247], "aspect": [210, 214, 247, 250, 578], "convert_to_unicod": [213, 249], "unicod": [213, 249, 258, 300], "utf": [213, 249], "load_vocab": [213, 249], "vocab_fil": [213, 214, 249, 250, 578], "convert_by_vocab": [213, 249], "vocab": [213, 249, 279], "whitespace_token": [213, 249], "whitespac": [213, 249, 263, 305], "clean": [213, 216, 249, 380, 391, 394, 401, 402, 407, 409, 410, 411, 498, 514, 546], "fulltoken": [213, 249], "tokenzi": [213, 249], "convert_tokens_to_id": [213, 249], "convert_ids_to_token": [213, 249], "basictoken": [213, 249], "punctuat": [213, 249, 258, 263, 300, 305], "wordpiecetoken": [213, 249], "unk_token": [213, 249], "unk": [213, 249], "max_input_chars_per_word": [213, 249], "wordpiec": [213, 214, 249, 250, 578], "greedi": [213, 249], "longest": [213, 214, 249, 250, 578], "unaff": [213, 249], "un": [213, 249], "aff": [213, 249], "concat_gener": [214, 250], "tensorflowtransform": [214, 250], "mxnettransform": [214, 250], "pytorchtransform": [214, 250], "onnxrtqltransform": [214, 250], "onnxrtittransform": [214, 250], "tensorflowwrapfunct": [214, 250], "transform_func": [214, 250], "pytorchmxnettransform": [214, 250], "get_torchvision_map": [214, 250], "interpol": [214, 250, 329, 563, 570, 578], "torchvis": [214, 250, 273], "composetransform": [214, 250], "transform_list": [214, 250, 578], "croptoboundingbox": [214, 250, 578], "offset_height": [214, 250, 578], "offset_width": [214, 250, 578], "target_height": [214, 250, 578], "target_width": [214, 250, 578], "vertic": [214, 250, 292, 322, 578], "coordin": [214, 250, 337, 578], "horizont": [214, 250, 578], "mxnetcroptoboundingbox": [214, 250], "onnxrtcroptoboundingbox": [214, 250], "tensorflowcroptoboundingbox": [214, 250], "resizewithratio": [214, 250, 578], "min_dim": [214, 250, 578], "800": [214, 250, 578], "max_dim": [214, 250, 578], "1365": [214, 250, 578], "constant_valu": [214, 250], "side": [214, 250, 279, 544, 548, 578], "exce": [214, 250, 578], "tensorflowresizewithratio": [214, 250], "transpos": [214, 250, 292, 322, 578], "perm": [214, 250, 578], "permut": [214, 250, 322, 578], "tensorflowtranspos": [214, 250], "mxnettranspos": [214, 250], "pytorchtranspos": [214, 250], "randomverticalflip": [214, 250, 578], "tensorflowrandomverticalflip": [214, 250], "randomhorizontalflip": [214, 250, 547, 578], "tensorflowrandomhorizontalflip": [214, 250], "toarrai": [214, 250, 578], "pil": [214, 250, 578], "casttftransform": [214, 250], "castonnxtransform": [214, 250], "castpytorchtransform": [214, 250], "centercroptftransform": [214, 250], "paddedcentercroptransform": [214, 250], "crop_pad": [214, 250], "resizetftransform": [214, 250], "nearest": [214, 250, 578], "bicub": [214, 250, 578], "resizepytorchtransform": [214, 250], "randomcroptftransform": [214, 250], "locat": [214, 250, 545, 552, 573, 575, 578, 580], "randomresizedcroppytorchtransform": [214, 250], "randomresizedcropmxnettransform": [214, 250], "randomresizedcroptftransform": [214, 250], "get_param": [214, 250], "pramet": [214, 250], "normalizetftransform": [214, 250], "rescal": [214, 250, 578], "deviat": [214, 250, 578], "broadcast": [214, 250, 552, 578], "rescalekeraspretraintransform": [214, 250], "rescaletftransform": [214, 250], "rescaletransform": [214, 250], "alignimagechanneltransform": [214, 250], "dim": [214, 250, 287, 322, 337, 578], "w": [214, 250, 273, 569, 570, 578], "pytorchalignimagechannel": [214, 250], "tondarraytransform": [214, 250], "resizemxnettransform": [214, 250], "resizetransform": [214, 250], "cropresizetftransform": [214, 250], "y": [214, 250, 337, 578], "boundari": [214, 250, 413, 578], "area": [214, 250, 261, 303, 563, 578], "pytorchcropresizetransform": [214, 250], "mxnetcropresizetransform": [214, 250], "cropresizetransform": [214, 250], "centercroptransform": [214, 250], "mxnetnormalizetransform": [214, 250], "pytorchnormalizetransform": [214, 250], "normalizetransform": [214, 250], "randomcroptransform": [214, 250], "randomresizedcroptransform": [214, 250], "get_final_text": [214, 250], "pred_text": [214, 250], "orig_text": [214, 250], "squadexampl": [214, 250], "qas_id": [214, 250], "question_text": [214, 250], "doc_token": [214, 250], "orig_answer_text": [214, 250], "start_posit": [214, 250], "end_posit": [214, 250], "is_imposs": [214, 250], "unique_id": [214, 250], "example_index": [214, 250], "doc_span_index": [214, 250], "token_to_orig_map": [214, 250], "token_is_max_context": [214, 250], "input_mask": [214, 250, 329, 550], "segment_id": [214, 250, 550], "read_squad_exampl": [214, 250], "input_fil": [214, 250], "doc_strid": [214, 250, 578], "max_query_length": [214, 250, 578], "output_fn": [214, 250], "inputbatch": [214, 250], "collecttransform": [214, 250], "10833": [214, 250], "tfsquadv1posttransform": [214, 250], "n_best_siz": [214, 250, 578], "384": [214, 250, 578], "max_answer_length": [214, 250, 578], "total": [214, 250, 265, 294, 296, 307, 316, 317, 318, 322, 329, 332, 338, 548, 578], "nbest_predict": [214, 250, 578], "long": [214, 250, 556, 578], "document": [214, 250, 543, 552, 553, 564, 575, 578], "chunk": [214, 250, 578], "much": [214, 250, 251, 257, 319, 550, 553, 569, 570, 578], "process_result": [214, 250], "get_postprocess_result": [214, 250], "tfmodelzoocollecttransform": [214, 250], "tfsquadv1modelzooposttransform": [214, 250], "squadv1": [214, 250, 578], "parsedecodevoctransform": [214, 250], "set_env_var": 215, "env_var": 215, "overwrite_exist": 215, "env": [215, 500, 508], "set_all_env_var": 215, "core": [215, 257, 272, 380, 544, 562, 568, 581], "get_architectur": 215, "get_threads_per_cor": 215, "thread": [215, 531, 544, 547, 568], "get_thread": 215, "get_physical_id": 215, "socket": [215, 503, 532, 568, 581], "get_core_id": 215, "get_bounded_thread": 215, "core_id": 215, "bind": 215, "command": [215, 257, 279, 380, 391, 394, 401, 407, 409, 410, 477, 500, 508, 528, 544, 552], "possibl": [215, 257, 270, 335, 339, 377, 444, 544, 553, 567, 574, 579], "unnecessari": [215, 257], "summary_benchmark": [215, 257], "config_inst": [215, 257], "trigger": [215, 257, 294, 329], "generate_prefix": [215, 257], "core_list": [215, 257], "numactl": [215, 257], "run_inst": [215, 257], "critet": 216, "tensorflowcrossentropyloss": 216, "pytorchcrossentropyloss": 216, "tensorflowknowledgedistillationloss": 216, "pytorchknowledgedistillationloss": [216, 550], "pytorchintermediatelayersknowledgedistillationloss": 216, "tensorflowcriterion": 216, "pytorchcriterion": 216, "criterion_cl": 216, "criterion_registri": 216, "criterion_typ": 216, "registry_criterion": 216, "param_dict": [216, 221, 270], "crossentropyloss": 216, "tensorflowsparsecategoricalcrossentropi": 216, "sparsecategoricalcrossentropyloss": 216, "knowledgedistillationframework": 216, "student_model": [216, 251, 257, 550], "knowledgedistillationloss": [216, 580], "temperatur": [216, 580], "loss_typ": [216, 580], "ce": [216, 580], "loss_weight": [216, 580], "teacher_model_forward": 216, "notimplementederror": [216, 264, 265, 306, 307], "teacher_student_loss_c": 216, "student_output": [216, 224, 257, 550], "teacher_output": [216, 224, 251, 257], "student_targets_loss_c": 216, "groud": 216, "truth": [216, 262, 263, 304, 305], "loss_cal": 216, "loss_cal_sloss": 216, "student_loss": [216, 224, 257, 550], "softcrossentropi": 216, "logit": [216, 550], "ground": [216, 262, 263, 304, 305], "kullbackleiblerdiverg": 216, "pytorchknowledgedistillationlosswrapp": 216, "tensorflowknowledgedistillationlosswrapp": 216, "tensorflowknowledgedistillationlossextern": 216, "intermediatelayersknowledgedistillationloss": [216, 523], "layer_map": 216, "add_origin_loss": 216, "init_loss_func": 216, "init_feature_match": 216, "student_featur": 216, "teacher_featur": 216, "matcher": 216, "clear_featur": 216, "register_hooks_for_model": 216, "attributeerror": 216, "remove_all_hook": 216, "pytorch_linear_feature_match": 216, "pytorchintermediatelayersknowledgedistillationlosswrapp": 216, "selfknowledgedistillationloss": [216, 523], "selfknowledg": 216, "pytorchselfknowledgedistillationloss": 216, "l2diverg": 216, "feature1": 216, "feature2": 216, "pytorchselfknowledgedistillationlosswrapp": 216, "setter": [217, 218], "torch_util": [218, 257, 299], "metric_cl": [218, 219, 264, 265, 306, 307, 545], "user_metr": [218, 219, 306, 307], "alwai": [218, 219, 261, 303, 306, 307, 545, 563, 569], "tensorflowoptim": 221, "pytorchoptim": 221, "optimizer_cl": 221, "optimizer_registri": 221, "optimizer_typ": 221, "cross": [221, 264, 265, 306, 307, 558, 579], "tensorflowsgd": 221, "tensorflowadamw": 221, "tensorflow_addon": 221, "adamw": 221, "tensorflowadam": 221, "adam": [221, 580], "pytorchsgd": 221, "util": [223, 252, 257, 259, 293, 299, 301, 320, 341, 343, 365, 366, 367, 369, 371, 372, 375, 380, 391, 394, 397, 401, 402, 407, 409, 410, 412, 420, 421, 426, 428, 429, 432, 436, 442, 443, 451, 453, 477, 483, 487, 492, 496, 529, 552, 569, 573, 579], "record_output": 223, "output_process": 223, "get_activ": 223, "mainli": [224, 257, 296, 322, 332, 570, 573], "train_func": [224, 257, 298, 550, 552, 569], "train_dataload": [224, 257, 550, 569], "pre_process": [224, 251, 257, 268, 280, 284, 289, 297, 552], "post_process": [224, 257], "Be": [224, 257, 261, 303], "on_train_end": [224, 257, 284, 289, 294, 295, 329, 330, 350], "pre_epoch_begin": [224, 257, 284, 289], "post_epoch_end": [224, 257, 284, 289], "on_epoch_begin": [224, 257, 284, 289, 294, 295, 329, 330, 350, 353, 569], "on_step_begin": [224, 257, 284, 289, 294, 295, 319, 329, 330, 353, 569], "batch_id": [224, 257], "on_batch_begin": [224, 257, 284, 289], "on_after_compute_loss": [224, 257, 284, 289, 350, 550], "on_before_optimizer_step": [224, 257, 294, 295, 329, 330, 331, 350, 569], "on_after_optimizer_step": [224, 257, 294, 295, 319, 329, 330, 331], "on_before_ev": [224, 257, 294, 295, 329, 330], "on_after_ev": [224, 257, 294, 295, 329, 330], "on_post_grad": [224, 257], "on_step_end": [224, 257, 284, 289, 294, 295, 329, 330, 350, 353, 569], "on_batch_end": [224, 257, 284, 289], "on_epoch_end": [224, 257, 284, 289, 294, 295, 329, 330, 350, 353, 550, 569], "register_hook": [224, 257], "input_arg": [224, 257], "input_kwarg": [224, 257], "_epoch_ran": [251, 257], "ran": [251, 257], "eval_frequ": [251, 257], "frequenc": [251, 257, 294, 329, 568, 580], "term": [251, 257, 329, 331, 550, 562, 563, 566, 567, 579], "best_scor": [251, 257], "best_model": [251, 257], "train_cfg": [251, 257, 353], "evaluation_distribut": [251, 257, 284, 289], "train_distribut": [251, 257, 284, 289], "on_post_forward": [251, 257], "init_train_cfg": [251, 257], "create_criterion": [251, 257], "create_optim": [251, 257], "disil": [251, 257], "generate_hook": [251, 257, 284, 289], "qlinear2qdq": [252, 257, 299], "torch2onnx": [252, 257, 299], "torch_to_fp32_onnx": [252, 254], "opset_vers": [252, 254, 555], "dynamic_ax": [252, 254, 555], "input_nam": [252, 254, 317, 555], "do_constant_fold": [252, 254], "verbos": [252, 254, 270, 271, 272, 337], "opset": [252, 254], "ax": [252, 254], "torch_to_int8_onnx": [252, 254], "quant_format": [252, 254, 555], "u8s8": [252, 254], "qdq_op_fp32_bia": [252, 254, 555], "optionl": [252, 254], "qdq_op_int32_bia": [252, 254, 555], "qdq_op_fp32_bias_qdq": [252, 254, 555], "onnx_qlinear_to_qdq": [252, 253], "input_name_to_nod": [252, 253], "qlinearop": [252, 253, 560, 573], "check_model": 253, "update_weight_bia": 254, "fp32_onnx_path": [254, 255], "wegiht": 254, "set_data_typ": 254, "weight_typ": 254, "activation_typ": 254, "get_node_map": 254, "module_node_map": 254, "get_quantizable_onnx_op": 254, "quantize_nod": 254, "build_scale_map": 254, "int8_scale_info": 254, "scale_zp_dict": 254, "set_scale_info": 254, "int8_onnx_model": 254, "int8_onnx_path": 254, "recalculate_bia": 254, "recalcul": [254, 322], "remove_nodes_by_nam": 254, "sub_graph_with_int32_bia": 254, "a_info": 254, "b_info": 254, "bias_nam": 254, "nodeproto": 254, "_type_": 254, "qdq_fp32_bia": 254, "excut": 254, "qdq_int32_bia": 254, "qdq_fp32_bias_qdq": 254, "onnx2numpy_dtyp": 255, "onnx_node_typ": 255, "dummydataread": 255, "ortq": 255, "dataread": 255, "get_next": 255, "variou": [256, 257, 266, 297, 560, 570, 572], "bring": [256, 257, 297, 546, 573], "vari": [256, 257, 284, 289, 297, 568, 581], "roc": [256, 257, 265, 284, 289, 297, 307], "footprint": [256, 257, 284, 289, 297, 318, 551, 566, 569, 570, 572], "flexibl": [256, 257, 284, 289, 297, 545, 550, 569, 570], "set_config_by_model": [256, 257, 266], "model_obj": [256, 257, 266], "export": [257, 261, 299, 303, 309, 310, 311, 315, 317, 350, 515, 577], "bleu": [257, 259, 264, 278, 299, 301, 306, 563], "bleu_util": [257, 264, 299, 306], "coco_label_map": [257, 264, 299, 306], "coco_tool": [257, 264, 299, 306], "evaluate_squad": [257, 264, 299, 306], "dynast": [257, 280, 299], "supernetwork": [257, 270, 273, 274, 280], "dynas_manag": [257, 273, 274, 280], "dynas_predictor": [257, 273, 274, 280], "dynas_search": [257, 274, 280], "dynas_util": [257, 272, 274, 280], "basic_na": [257, 280, 299], "nas_util": [257, 280, 299], "pruning_recip": [257, 299], "tile_pattern": [257, 285, 286], "pytorch_prun": [257, 299, 330], "logger": [257, 290, 299, 320, 351, 354, 496, 500, 504], "prune_util": [257, 290, 299], "pruner": [257, 284, 289, 290, 292, 295, 299, 523, 526, 580], "graph_optim": [257, 266, 299, 367, 436, 471, 475, 476, 496, 504, 520], "mixed_precis": [257, 299, 369, 436, 471, 496, 504, 520], "model_convers": [257, 299], "pruning_v2": [257, 299], "quantconf": [257, 297, 334], "qfunc": [257, 297], "routinu": [257, 297], "pruningconf": [257, 284, 289], "pruning_func": [257, 284, 289, 569], "update_items_for_all_prun": [257, 284, 295], "howev": [257, 284, 289, 295, 330, 555, 569], "analys": [257, 284, 289, 295], "generate_prun": [257, 284, 289], "dens": [257, 284, 289, 296, 332, 569, 570, 581], "spars": [257, 284, 289, 294, 329, 548, 569, 570, 571], "get_sparsity_ratio": [257, 284, 289, 292, 295, 322, 330], "elementwise_over_matmul_gemm_conv": [257, 284, 289, 295, 330], "elementwise_over_al": [257, 284, 289, 295, 330], "blockwise_over_matmul_gemm_conv": [257, 284, 289, 295, 330], "graphoptim": [257, 266, 367, 468, 519], "modelconvers": [257, 267], "unicoderegex": [258, 300], "hoc": [258, 300], "hack": [258, 300], "recogn": [258, 300], "nondigit_punct_r": [258, 300], "compil": [258, 300, 568], "preced": [258, 300], "punct_nondigit_r": [258, 300], "symbol_r": [258, 300], "property_char": [258, 300], "join": [258, 300], "bleu_token": [258, 300], "mose": [258, 300], "smt": [258, 300], "mosesdecod": [258, 300], "mteval": [258, 300], "v14": [258, 300], "pl": [258, 300], "l954": [258, 300], "l983": [258, 300], "tensor2tensor": [259, 279, 301], "bleu_hook": [259, 301], "compute_bleu": [259, 278, 301], "reference_corpu": [259, 301], "translation_corpu": [259, 301], "max_ord": [259, 301], "use_bp": [259, 301], "against": [259, 301], "gram": [259, 301], "flag": [259, 301, 350, 525], "third": [261, 303, 547], "parti": [261, 303, 573], "pycocotool": [261, 303, 556, 561], "object_detect": [261, 303], "noth": [261, 303, 508, 579], "jonathanhuang": [261, 303], "image_id": [261, 303, 563], "encod": [261, 270, 279, 303, 578], "groundtruth": [261, 303], "invok": [261, 303], "groundtruth_dict": [261, 303], "exportgroundtruthtococo": [261, 303], "groundtruth_boxes_list": [261, 303], "groundtruth_classes_list": [261, 303], "max_num_class": [261, 303], "output_path": [261, 303, 315, 508, 564], "detections_list": [261, 303], "exportdetectionstococo": [261, 303], "detection_boxes_list": [261, 303], "detection_scores_list": [261, 303], "detection_classes_list": [261, 303], "cocowrapp": [261, 303], "loadannot": [261, 303], "cocoevalwrapp": [261, 303], "agnostic_mod": [261, 303], "computemetr": [261, 303], "detection_typ": [261, 303], "hold": [261, 303, 337, 547], "datastructur": [261, 303], "mscoco": [261, 303], "replic": [261, 303], "extern": [261, 303, 315, 544], "category_id": [261, 303], "iou_typ": [261, 303], "iou_thr": [261, 265, 303, 307, 563], "map_point": [261, 265, 303, 307, 563], "cocoev": [261, 303], "Then": [261, 303, 544, 579], "getcategori": [261, 303], "getagnosticmod": [261, 303], "agnost": [261, 303, 550], "getcategoryidlist": [261, 303], "accumul": [261, 303, 336, 579], "include_metrics_per_categori": [261, 303], "all_metrics_per_categori": [261, 303], "summeri": [261, 303], "per_category_ap": [261, 303], "care": [261, 303], "pollut": [261, 303], "mldash": [261, 303], "summary_metr": [261, 303], "iou": [261, 265, 303, 307], "increment": [261, 277, 279, 303, 579], "50iou": [261, 303], "75iou": [261, 303], "75": [261, 303, 581], "pixel": [261, 303, 578], "medium": [261, 303], "larg": [261, 303, 547, 550, 569, 570, 581], "10000": [261, 303, 337], "recal": [261, 263, 265, 303, 305, 307], "bycategori": [261, 303], "supercategori": [261, 303], "performancebycategori": [261, 303], "category_stat": [261, 303], "exportsingleimagegroundtruthtococo": [261, 303], "next_annotation_id": [261, 303], "category_id_set": [261, 303], "groundtruth_box": [261, 303], "groundtruth_class": [261, 303], "groundtruth_mask": [261, 303], "groundtruth_is_crowd": [261, 303], "ingest": [261, 303], "ones": [261, 303, 570], "exportsingleimagedetectionstococo": [261, 303], "uniqu": [261, 273, 298, 303, 337, 402, 403, 573], "assign": [261, 303, 360, 401, 402, 407, 408, 409, 410, 544, 552, 564, 572], "num_gt_box": [261, 303], "num_detect": [261, 265, 303, 307, 563, 580], "image_height": [261, 303], "image_width": [261, 303], "detection_mask": [261, 303], "crowd": [261, 303], "insid": [261, 303, 550, 569, 579], "exportsingleimagedetectionboxestococo": [261, 303], "detection_box": [261, 303, 580], "detection_scor": [261, 303, 580], "detection_class": [261, 303, 580], "exporsingleimagedetectionboxestococo": [261, 303], "exportsingleimagedetectionmaskstococo": [261, 303], "allenai": [262, 263, 304, 305], "bi": [262, 263, 304, 305], "att": [262, 263, 304, 305], "f1_score": [262, 263, 304, 305], "ground_truth": [262, 263, 304, 305], "metric_max_over_ground_truth": [262, 263, 304, 305], "metric_fn": [262, 263, 304, 305], "exact_match_scor": [262, 304], "exact": [262, 304], "articl": [262, 263, 304, 305], "paragraph": [262, 263, 304, 305], "qa": [262, 263, 304, 305], "cantain": [262, 263, 304, 305], "normalize_answ": [263, 305], "extra": [263, 305], "newlin": [263, 305], "tab": [263, 305, 404, 407, 413, 531, 577], "harmon": [263, 265, 305, 307], "answer_start": [263, 305], "177": [263, 305], "denver": [263, 305], "bronco": [263, 305], "nfl": [263, 305], "afc": [263, 305], "bowl": [263, 305], "56be4db0acb8001400a502ec": [263, 305], "percentag": [263, 271, 305, 580], "basemetr": [264, 265, 306, 307], "single_output": [264, 265, 306, 307], "hvd": [264, 265, 306, 307, 552], "sample_weight": [264, 265, 306, 307], "metric_registri": [264, 265, 306, 307], "metric_typ": [264, 265, 306, 307], "decorator_metr": [264, 265, 306, 307], "tensorflowmetr": [265, 307], "pytorchmetr": [265, 307], "mxnetmetr": [265, 307], "onnxrtqlmetr": [265, 307], "onnxrtitmetr": [265, 307], "wrappytorchmetr": [265, 307], "wrapmxnetmetr": [265, 307], "wraponnxrtmetr": [265, 307], "proport": [265, 307], "were": [265, 307], "pred_list": [265, 307], "pytorchloss": [265, 307], "least": [265, 295, 307, 322, 330, 509, 569, 570, 579], "mae": [265, 307, 563], "absolut": [265, 271, 307, 319, 508, 553, 563, 568, 569, 570, 573, 579], "magnitud": [265, 307, 319, 560, 569, 570, 581], "rmse": [265, 271, 307, 563, 579], "squar": [265, 271, 307, 342, 563, 579], "tensorflowtopk": [265, 307], "among": [265, 307], "most": [265, 307, 337, 544, 564, 569, 573, 579], "outcom": [265, 307], "num_correct": [265, 307], "generaltopk": [265, 307], "cocomapv2": [265, 307, 563], "anno_path": [265, 307, 563], "map_kei": [265, 307], "detectionboxes_precis": [265, 307], "output_index_map": [265, 307, 563], "tensorflowmap": [265, 307], "tensorflowcocomap": [265, 307], "tensorflowvocmap": [265, 307], "squadf1": [265, 307, 563], "miou": [265, 307], "21": [265, 307, 581], "hist": [265, 307, 354, 355], "onnxrtglu": [265, 307], "dlrm": [265, 307, 581], "basicna": [268, 280], "model_build": [268, 280, 281], "conf_fnam": [268, 280], "init_by_cfg": [268, 280], "init_for_search": [269, 280], "select_model_arch": [269, 280, 281], "create_acc_predictor": [269, 280], "create_macs_predictor": [269, 280], "create_latency_predictor": [269, 280], "latenc": [269, 270, 271, 273, 278, 280, 513, 576, 579], "init_cfg": [269, 280], "parametermanag": [270, 273], "hot": 270, "pymoo": [270, 272, 273], "process_param_dict": 270, "upper": [270, 272], "vector": [270, 281, 283], "onehot_gener": 270, "in_arrai": 270, "onehot": 270, "unus": [270, 279], "depth": [270, 550, 574], "input_arrai": 270, "elast": 270, "mapper": [270, 401, 464, 465], "random_sampl": [270, 337], "subnetwork": [270, 273], "trial_limit": 270, "100000": 270, "translate2param": 270, "pymoo_vector": 270, "translate2pymoo": 270, "import_csv": 270, "filepath": 270, "column_nam": 270, "drop_dupl": 270, "panda": 270, "datafram": [270, 316, 317], "purpos": [270, 557, 564, 572], "subnet": [270, 273], "column": [270, 544, 569, 570], "df": [270, 316, 317], "set_se": 270, "create_training_set": 270, "train_with_al": 270, "sklearn": 270, "transformerltencod": 270, "alpha": [271, 319, 331], "default_alpha": 271, "cost_factor": 271, "default_cost_factor": 271, "max_iter": 271, "default_max_iter": 271, "regressor": 271, "get_paramet": 271, "get_metr": [271, 377], "mape": 271, "kendal": 271, "rank": [271, 552], "correl": 271, "spearman": 271, "searcher": [271, 283], "searchalgomanag": 272, "optuna": 272, "configure_nsga2": 272, "warm_pop": 272, "crossover_prob": 272, "crossover_eta": 272, "mutation_prob": 272, "02": [272, 581], "mutation_eta": 272, "configure_ag": 272, "run_search": 272, "save_histori": 272, "previous": [272, 547], "problemmultiobject": 272, "evaluation_interfac": 272, "evaluationinterfac": [272, 273], "param_count": 272, "param_upperbound": 272, "ofa": [272, 273], "mani": [272, 273, 318, 335, 547, 561, 579, 580], "get_mac": 273, "input_s": 273, "measure_lat": 273, "warmup_step": 273, "measure_step": 273, "resolut": 273, "warm": [273, 318], "runner": 273, "ofarunn": 273, "acc_predictor": 273, "macs_predictor": 273, "latency_predictor": 273, "datasetpath": 273, "w1": 273, "estimate_accuracy_top1": 273, "subnet_cfg": 273, "estimate_mac": 273, "estimate_lat": 273, "validate_top1": 273, "validate_mac": 273, "flop": 273, "fvcore": 273, "get_subnet": 273, "transformerltrunn": 273, "checkpoint_path": [273, 278], "predictor_mod": 273, "csv_path": 273, "written": 273, "eval_subnet": 273, "clear_csv": 273, "evaluationinterfaceresnet50": 273, "evaluationinterfacemobilenetv3": 273, "evaluationinterfacetransformerlt": 273, "get_torchvision_model": 273, "torchvisionrefer": 273, "baselin": [273, 345, 576, 577], "machine_transl": [274, 275, 280], "transformer_interfac": [274, 275, 276], "get_incremental_st": 277, "incremental_st": [277, 279], "set_incremental_st": 277, "multiheadattentionsup": 277, "super_embed_dim": 277, "num_head": 277, "is_encod": 277, "super_kdim": 277, "super_vdim": 277, "add_bias_kv": [277, 279], "add_zero_attn": [277, 279], "self_attent": 277, "encoder_decoder_attent": 277, "out_dim": 277, "qkv_dim": 277, "head": [277, 279, 569], "key_padding_mask": 277, "need_weight": 277, "static_kv": 277, "attn_mask": [277, 279], "timestep": 277, "bytetensor": [277, 279], "src_len": [277, 279], "reorder_incremental_st": 277, "new_ord": [277, 279], "buffer": 277, "compute_lat": 278, "get_model_paramet": 278, "compute_mac": 278, "transformersupernetwork": 279, "fairseq": 279, "vaswani": 279, "2017": 279, "arxiv": [279, 294, 319], "1706": 279, "03762": 279, "transformerencod": 279, "transformerdecod": 279, "line": [279, 507, 508, 528, 544, 552, 560, 577], "encoder_config": 279, "embed_token": 279, "encoder_lay": 279, "transformerencoderlay": 279, "argpars": 279, "namespac": 279, "src_token": 279, "src_length": 279, "longtensor": 279, "sentenc": 279, "encoder_out": 279, "embed_dim": 279, "encoder_padding_mask": 279, "reorder_encoder_out": 279, "rearrang": 279, "max_posit": 279, "upgrade_state_dict_nam": 279, "upgrad": 279, "possibli": 279, "old": [279, 295, 360, 575], "decoder_config": 279, "no_encoder_attn": 279, "decoder_lay": 279, "transformerdecoderlay": 279, "attend": 279, "prev_output_token": 279, "tgt_len": 279, "forc": [279, 564, 574], "extract_featur": 279, "output_lay": 279, "layer_idx": 279, "paper": [279, 550, 569, 570], "ffn": 279, "robust": 279, "encoder_normalize_befor": 279, "layer_norm": 279, "self_attn_layer_norm": 279, "final_layer_norm": 279, "seq_len": 279, "t_tgt": 279, "t_src": 279, "decoder_normalize_befor": 279, "prev_self_attn_st": 279, "prev_attn_st": 279, "self_attn_mask": 279, "self_attn_padding_mask": 279, "builder": 281, "res_save_path": 281, "count_model_paramet": 281, "load_search_result": 281, "dump_search_result": 281, "params_vec2params_dict": [281, 283], "paras_vec": 281, "find_best_model_arch": 281, "metrics_convers": 281, "init_search_cfg": 281, "nas_registri": 282, "nas_method": 282, "create_search_space_pool": 282, "find_pareto_front": 282, "n_point": 282, "n_metric": 282, "n_pareto_point": 282, "get_feedback": 283, "feedback": 283, "para_vec": 283, "gridsearch": 283, "whole": [283, 530, 544, 553, 573, 581], "exhaust": [283, 299, 341, 572], "randomsearch": 283, "42": [283, 568, 581], "bayesianoptimizationsearch": 283, "indices2params_vec": 283, "tfpruningcallback": [284, 289], "input_model": [284, 289, 565, 577], "pure": [284, 289], "s_output": [284, 289], "s_loss": [284, 289], "t_output": [284, 289], "support_pattern": [285, 286, 287], "pattern_registri": 287, "pattern_typ": 287, "patternbas": [287, 288], "mask_shap": [287, 288], "is_contigu": 287, "compute_spars": [287, 288], "abs_sum": 287, "abs_max": 287, "tile": 288, "tilepatternbas": 288, "nxm": [288, 292, 322, 329, 570], "matrix": [288, 570], "repeat_mask": 288, "ori_shap": 288, "tilepattern_1x1": 288, "1x1": [288, 550], "unstructur": [288, 560, 569, 570, 581], "tilepattern_2x2": 288, "2x2": 288, "tilepattern_1x16": 288, "1x16": 288, "tilepattern_4x1": 288, "tilepattern_1x2": 288, "1x2": 288, "update_config": [289, 330], "register_pattern": [292, 322], "get_pattern": [292, 322], "assertionerror": [292, 293, 294, 322, 329, 333], "unit": [292, 322, 507, 515, 546], "is_glob": [292, 322], "contrast": [292, 322, 578], "get_mask": [292, 322], "target_sparsity_ratio": [292, 294, 322, 329], "pre_mask": [292, 322], "max_sparsity_ratio_per_lay": [292, 294, 572], "get_masks_glob": [292, 322], "get_mask_singl": 292, "exact_sparsity_ratio": [292, 322], "get_block_size_dict": [292, 322], "get_masks_loc": [292, 322], "calul": [292, 322], "ration": [292, 322], "get_pattern_lock_mask": [292, 322], "lock": [292, 322, 560, 567, 569, 570], "patternnxm": [292, 322], "kept": [292, 322], "block_siz": [292, 322], "block_size_1": [292, 322], "block_size_2": [292, 322], "keep_pre_mask": [292, 322], "unchang": [292, 322], "patternninm": [292, 322], "doc": [292, 322, 563, 569], "md": [292, 322, 552], "check_config": [293, 333], "prune_config": [293, 333], "everyth": [293, 333], "reset_non_value_to_default": 293, "undefin": [293, 333], "process_and_check_config": [293, 333], "obejct": 293, "process_config": [293, 333], "parse_to_prun": [293, 333], "parse_not_to_prun": 293, "register_prun": [294, 329], "get_prun": [294, 329], "module_nam": [294, 296, 319, 329, 331, 332, 360, 515], "cuurent": [294, 329], "current_sparsity_ratio": [294, 329], "global_step": [294, 329], "update_frequency_on_step": [294, 572], "mask_weight": [294, 329], "formal": [294, 329], "local_step": [294, 295, 329, 330], "judg": 294, "check_is_pruned_step": [294, 329], "update_scor": 294, "magnitudeprun": 294, "snipprun": 294, "snip": [294, 319, 560, 569, 570, 581], "1810": [294, 319], "02340": [294, 319], "snipmomentumprun": 294, "moreoev": 294, "patternlockprun": [294, 329], "templat": [295, 299, 330, 383, 402, 407, 496, 504, 541, 544], "tree": [295, 330, 378, 407, 409], "nlp": [295, 330, 553, 569, 570, 573], "huggingface_model": [295, 330], "config_file_path": [295, 330], "pruner_info": [295, 330], "register_schedul": [296, 332], "get_schedul": [296, 332], "gradual": [296, 332, 569, 570], "update_sparsity_ratio": [296, 332], "aggressive_ratio": 296, "current_prune_step": [296, 332], "total_prune_step": [296, 332], "oneshotschedul": [296, 332], "aggress": 296, "iterativeschedul": [296, 332], "target_ratio": [296, 332], "server": [298, 299, 436, 443, 495, 496, 503, 504, 512, 515, 526, 528, 530, 544], "seper": 298, "opt_model": [298, 567], "fulli": [298, 573], "saniti": 298, "illeg": 298, "sync": 298, "accordingli": 298, "reg": [299, 320, 329], "tuning_sampl": [299, 341, 346], "tuning_spac": [299, 341, 346, 349], "tuning_struct": [299, 341, 346], "auto_mixed_precis": [299, 341], "conserv": [299, 341], "hawq_v2": [299, 341], "mse_v2": [299, 341], "ux": 299, "config_gener": [299, 436, 496], "configuration_wizard": [299, 436, 496], "db_manag": [299, 436, 496, 534], "diagnosi": [299, 404, 407, 413, 436, 496, 525, 531], "file_brows": [299, 436, 496], "jobs_manag": [299, 436, 496], "model_zoo": [299, 436, 496], "names_mapp": [299, 436, 496], "profil": [299, 370, 388, 395, 397, 407, 410, 412, 413, 436, 444, 452, 496, 497, 507, 513, 530, 535], "manage_workspac": [299, 436, 496], "workload": [299, 365, 366, 367, 369, 371, 372, 375, 397, 402, 407, 467, 484, 491, 496, 498, 504, 514, 515, 530, 533, 535, 536, 537, 538, 571], "executor": [299, 363, 496, 504], "expiring_dict": [299, 496, 504], "github_info": [299, 496, 504], "hw_info": [299, 496, 504], "json_seri": [299, 366, 420, 421, 426, 428, 429, 432, 442, 451, 477, 483, 496, 503, 504, 513, 516, 517, 518, 519, 521, 522, 523, 524, 525], "proc": [299, 496, 504], "status_upd": [299, 496, 504], "yaml_util": [299, 496, 504], "web": [299, 495, 496, 544, 577], "servic": [299, 496, 529, 530, 568], "router": [299, 496, 530], "basemodel": [309, 310, 311, 313, 315, 316, 317], "plai": [309, 310, 315, 317, 569, 571], "role": [309, 310, 315, 317, 569], "itself": [309, 310, 311, 313, 315, 316], "node_typ": [309, 310, 311, 315, 316, 317], "conv0": [309, 310, 311, 315, 316, 317, 577], "kerasmodel": [311, 454], "base_model": [311, 313, 315, 316, 317], "get_model_fwk_nam": 312, "fwk": 312, "onnxmodel": [315, 447], "find_node_by_nam": 315, "new_nodes_list": 315, "find_nodes_by_initi": 315, "get_scale_zero": 315, "save_model_to_fil": 315, "use_external_data_format": 315, "2gb": 315, "get_model_typ": [316, 445], "validate_graph_nod": 316, "validate_and_inference_input_output": 316, "input_tensor_nam": 316, "output_tensor_nam": 316, "graph_sess": 316, "graph_def_sess": 316, "frozen_pb_sess": 316, "load_saved_model": 316, "saved_model_tag": 316, "serv": [316, 532, 540], "signatur": 316, "tag": [316, 502, 515, 577], "metagraphdef": 316, "input_tensor": [316, 317], "keras_sess": 316, "slim_sess": 316, "checkpoint_sess": 316, "estimator_sess": 316, "input_fn": 316, "saved_model_sess": 316, "tensorflowsavedmodelmodel": 316, "report_spars": [316, 317], "total_spars": [316, 317], "tensorflowqatmodel": 316, "tensorflowcheckpointmodel": 316, "pytorchbasemodel": 317, "get_all_weight_nam": 317, "get_weight": 317, "update_weight": 317, "new_tensor": 317, "update_gradi": 317, "grad_nam": 317, "new_grad": 317, "grad": 317, "prune_weights_": 317, "place": [317, 561, 577], "get_input": 317, "get_gradi": 317, "pytorchmodel": 317, "pytorchfxmodel": 317, "ipexmodel": 317, "objective_registri": 318, "sart": 318, "result_list": 318, "models": [318, 566, 572], "register_criterion": 319, "get_criterion": 319, "pruningcriterion": 319, "magnitudecriterion": 319, "criterion_class": 319, "magtinud": 319, "gradientcriterion": 319, "snipcriterion": 319, "product": [319, 560, 564, 568, 571, 573, 576, 579], "snipmomentumcriterion": 319, "mechan": [319, 576], "preserv": [319, 553], "basepattern": [322, 331], "keep_mask_lay": 322, "invalid_lay": 322, "reduce_tensor": 322, "along": [322, 508, 561], "unprun": 322, "get_single_mask_per_target_ratio": 322, "return_dict": 322, "zero_cnt": 322, "total_cnt": 322, "check_layer_valid": 322, "get_reduced_masks_from_data": 322, "update_residual_cnt": 322, "get_sparsity_ratio_each_lay": 322, "sparsity_ratio": 322, "sparsityinfo": 322, "adjust_ratio": 322, "key_new_spars": 322, "max_sparsity_ratio": 322, "min_sparsity_ratio": 322, "final_target_sparsity_ratio": 322, "examin": [322, 569], "adjust_sparsity_ratio": 322, "block_wis": 322, "get_sparsity_ratio_progress": 322, "reshape_orig_to_pattern": 322, "s1": 322, "s2": 322, "reshape_reduced_to_orig": 322, "orig_shap": 322, "reduce_scor": 322, "get_mask_per_threshold": 322, "cur_target_sparsity_ratio": 322, "keep_exact_sparsity_ratio": 322, "remain": 322, "count_new_masked_cnt": 322, "new_added_mask": 322, "update_new_added_mask": 322, "cur_mask": 322, "bacaus": 322, "update_progressive_mask": 322, "progressive_step": 322, "progressive_config": 322, "update_progressive_masks_linear": 322, "update_progressive_masks_scor": 322, "update_progressive_masks_loc": 322, "domain": [322, 377, 385, 388, 405, 407, 412, 436, 443, 444, 447, 465, 496, 497, 499, 515, 527, 532, 544, 569, 570, 579], "update_progressive_masks_glob": 322, "get_least_ninm_mask_from_data": 322, "elementwis": 322, "sparisti": 322, "get_ele_mask_per_threshold": 322, "least_ninm_mask": 322, "least_m_in_m_mask": 322, "pruner_registri": 328, "parse_valid_pruner_typ": 329, "baseprun": 329, "mask_weights_gener": 329, "update_mask": 329, "basicprun": 329, "proce": 329, "regul": 329, "set_global_step": 329, "progressiveprun": 329, "grain": [329, 571], "interv": [329, 570], "check_progressive_valid": 329, "check_is_pruned_progressive_step": 329, "update_masks_progress": 329, "print_progressive_spars": 329, "register_reg": 331, "regulariz": 331, "get_reg_typ": 331, "get_reg": 331, "basereg": 331, "grouplasso": 331, "coeff": 331, "lasso": [331, 560, 569, 570], "reg_term": 331, "coeffient": 331, "pruningschedul": 332, "init_ratio": 332, "init_sparsity_ratio": 332, "reset_none_to_default": 333, "update_param": [333, 382], "process_weight_config": 333, "global_config": 333, "local_config": 333, "default_config": 333, "pruners_info": 333, "process_yaml_config": 333, "calib_func": 334, "eval_metr": 334, "hybirdblock": 334, "paramt": 334, "automixedprecisiontunestrategi": 335, "rule": [335, 569], "tri": [335, 528, 579], "tune_config": [335, 336, 337, 338, 339, 340, 342, 343, 344, 345], "basictunestrategi": 336, "One": [336, 544, 547, 552, 560, 569, 570, 571, 579], "bayesiantunestrategi": 337, "come": [337, 579], "discret": [337, 579], "gaussian": [337, 579], "posterior": [337, 579], "black": [337, 579], "histori": [337, 345, 359, 400, 407, 409, 413, 466, 484, 534, 579], "maxim": [337, 569, 570, 579], "acq_max": 337, "ac": 337, "gp": 337, "y_max": 337, "random_se": [337, 350, 399, 525, 553, 580], "n_warmup": 337, "n_iter": 337, "acquisit": 337, "relev": 337, "acq": 337, "randomst": 337, "scipi": 337, "x_max": 337, "targetspac": 337, "pbound": 337, "9527": [337, 553, 580], "params_to_arrai": 337, "array_to_param": 337, "amort": 337, "keyerror": 337, "get_target": 337, "num": [337, 360, 563], "_kei": 337, "bayesianoptim": 337, "promis": [337, 551, 569, 570], "gen_next_param": 337, "conservativetunestrategi": 338, "o0": 338, "quantifi": 338, "quant_queu": 338, "prioriti": [338, 579], "fp16": [338, 564, 573], "trail": 338, "exhaustivetunestrategi": 339, "hawq_v2tunestrategi": 340, "impact": [340, 342, 343, 575, 579], "msetunestrategi": 342, "mse_impact_lst": 342, "best_qmodel": 342, "current_best_model": 342, "ordered_op_name_typ": 342, "mse_v2tunestrategi": 343, "highest": [343, 579], "revert": [343, 579], "lowest": [343, 569, 570, 579], "randomtunestrategi": 344, "strategy_registri": [345, 579], "evaluation_result": [345, 552], "initial_tuning_cfg": 345, "quant_mode_wise_item": 345, "ordereddict": [345, 402, 407, 516], "quant_mod": 345, "initial_op_tuning_cfg": 345, "op_item_dtype_dict": 345, "show_baseline_info": 345, "displai": [345, 431, 444], "durat": [345, 380, 391, 394, 401, 407, 409, 410, 500, 566, 576], "initial_best_acc": 345, "set_tuning_spac": 345, "setup_resum": 345, "set_q_func": 345, "update_best_op_tuning_cfg": 345, "op_tuning_cfg": 345, "deploy_config": 345, "deploy": [345, 549], "optuningconfig": [346, 349], "op_quant_mod": [346, 349], "get_stat": [346, 349], "from_stat": [346, 349], "compressionmanag": 350, "uesd": 350, "deal": 350, "commpon": 350, "train_loop": 350, "path_to_sav": 350, "_summary_": 350, "workspac": [350, 359, 401, 402, 407, 409, 410, 411, 441, 514, 516, 525, 565], "layerhistogramcollector": [351, 354], "layer_tensor": [351, 354], "include_lay": [351, 354], "diverg": [351, 354, 355, 550, 579], "create_eval_func": 353, "postprocess_cfg": 353, "create_train_func": 353, "Their": 353, "kl_diverg": 354, "expand_quantized_bin": [354, 355], "quantized_bin": [354, 355], "reference_bin": [354, 355], "expand": [354, 355], "bin": [354, 355], "safe_entropi": [354, 355], "reference_distr_p": [354, 355], "p_sum": [354, 355], "candidate_distr_q": [354, 355], "q_sum": [354, 355], "entropi": [354, 355, 579], "get_threshold": [354, 355], "hist_edg": [354, 355], "quantized_typ": [354, 355], "num_quantized_bin": [354, 355], "255": [354, 355, 573], "historgram": [354, 355], "number_bin": [354, 355], "checkpoint_dir": 359, "history_cfg": 359, "checkpoint": [359, 565], "best_configur": 359, "best_model_weight": 359, "pt": [359, 565, 571, 574], "snapshot": [359, 413, 534], "cfg_from_fil": 360, "yaml_fil": [360, 548, 552, 563, 566], "lazyimport": 360, "lazi": 360, "till": [360, 579], "get_siz": [360, 515], "equal_dict": 360, "d2": 360, "compare_kei": 360, "ignore_kei": 360, "ignor": [360, 548], "customized_msg": 360, "elaps": 360, "combine_histogram": 360, "old_hist": 360, "arr": 360, "get_tuning_histori": 360, "tuning_history_path": [360, 484], "load_data_from_pkl": 360, "pkl": 360, "dump_data_to_loc": 360, "project_data": [361, 467, 468, 473, 477, 480, 483, 490], "benchmark_data": 361, "workdir": [361, 477, 490, 496, 500, 504, 512], "config_filenam": [361, 477, 490], "configuration_data": [361, 468, 473, 477, 480, 483], "generate_config": [361, 468, 473, 477, 480, 483, 490], "dataloaderinterfac": [361, 477, 490], "dataloader_data": [361, 373, 402, 407, 477, 490], "parse_arg": [362, 470, 474, 479, 482, 488], "benchmark_mod": [362, 507], "set_eager_execut": [362, 470, 474, 482], "request_id": [363, 466, 484, 485, 500, 508], "asd": [363, 485], "benchmark_id": [363, 380, 381, 391], "benchmark_result_upd": 363, "benchmark_result_update_pytorch_script": 363, "neural_coder_perform": 363, "neural_coder_tim": 363, "pytorch_script_bench_optim": 363, "command_line_of_script": 363, "pytorch_script_bench_original_model": 363, "execute_real_benchmark": 363, "project_detail": [363, 396, 466, 485], "benchmark_detail": 363, "benchmark_model": [364, 436, 496], "execute_benchmark": [364, 436, 496], "benchmarkconfiggener": 365, "configgener": [365, 366, 367, 369, 370, 371, 372], "generate_evaluation_config": [365, 367, 369, 371, 372], "generate_accuracy_config": 365, "generate_performance_config": 365, "workload_directori": 366, "configuration_path": 366, "jsonseri": [366, 420, 421, 426, 428, 429, 432, 442, 451, 477, 483, 503, 505, 513, 516, 517, 518, 519, 521, 522, 523, 524, 525], "get_predefined_config_path": [366, 515], "generate_model_config": 366, "generate_dataloader_config": 366, "graphoptimizationconfiggener": 367, "generate_graph_optimization_config": 367, "benchmark_config_gener": [368, 436, 496], "graph_optimization_config_gener": [368, 436, 496], "mixed_precision_config_gener": [368, 436, 496], "profiling_config_gener": [368, 436, 496], "pruning_config_gener": [368, 436, 496], "quantization_config_gener": [368, 436, 496], "mixedprecisionconfiggener": 369, "generate_mixed_precision_config": 369, "profilingconfiggener": 370, "pruningconfiggener": 371, "generate_pruning_config": 371, "quantizationconfiggener": 372, "generate_tuning_config": 372, "generate_quantization_config": 372, "configurationpars": 373, "input_data": [373, 378], "parse_evaluation_data": 373, "evaluation_data": 373, "parse_transform": 373, "transforms_data": [373, 402, 407], "parse_dataload": 373, "parse_metr": 373, "metric_data": 373, "get_param_typ": 373, "param_group": 373, "parse_valu": 373, "required_typ": 373, "parse_list_valu": 373, "parse_multidim_list": 373, "dimension": 373, "normalize_string_list": 373, "string_list": 373, "bracket": 373, "miss": [373, 573], "get_predefined_configur": 375, "update_config_to_machine_specif": 375, "configuration_pars": [376, 436, 496], "get_boundary_nod": [376, 436, 496], "get_configur": [376, 436, 496], "params_feed": [376, 436, 496], "pruning_config_pars": [376, 436, 496], "feeder": 377, "get_framework": [377, 450], "get_domain": 377, "get_model": [377, 450, 536], "get_dataload": 377, "get_transform": 377, "get_object": 377, "get_strategi": 377, "get_quantization_approach": 377, "get_possible_valu": 377, "pruningconfigpars": 378, "generate_tre": 378, "parse_entri": 378, "bench": [379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 466, 495], "dbmanag": [379, 412], "database_loc": [379, 412], "log_level": [379, 412, 506], "initialize_databas": [379, 412], "create_sqlalchemy_engin": [379, 412], "create_al": [379, 412], "tabl": [379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 402, 403, 412], "project_id": [380, 383, 390, 391, 394, 396, 402, 406, 407], "model_id": [380, 390, 391, 394], "dataset_id": [380, 383, 391, 394, 402, 406, 407], "warmup_iter": 380, "number_of_inst": 380, "cores_per_inst": [380, 516, 545, 547, 572], "execution_command": [380, 391, 394], "benchark": 380, "delete_benchmark": [380, 401, 407], "benchmark_nam": 380, "update_statu": [380, 391, 394], "execution_statu": [380, 391, 394], "executionstatu": [380, 391, 394, 401, 407, 409, 410, 497, 514], "update_dur": [380, 391, 394], "update_execution_command": [380, 391, 394, 401, 407, 409, 410], "update_log_path": [380, 391, 394, 407, 410], "update_config_path": [380, 391], "update_dataset": [380, 391, 394], "update_batch_s": [380, 391], "update_mod": 380, "update_cores_per_inst": 380, "update_number_of_inst": 380, "clean_statu": [380, 391, 394, 401, 407, 409, 410, 514], "status_to_clean": [380, 391, 394, 401, 407, 409, 410, 514], "build_info": [380, 381, 383, 390, 391, 394, 395, 397, 400], "benchmark_result": [380, 388, 412, 436], "benchmarkresult": [380, 381], "update_accuraci": 381, "update_perform": 381, "list_by_framework": [382, 389, 398], "framework_id": [382, 389, 390, 398, 414], "query_to_list": [382, 389, 398], "dataloaders_queri": 382, "dataloader_id": 382, "fill_dictionari": [382, 384, 385, 387, 389, 392, 393, 398], "dataset_nam": [383, 402, 407], "template_path": 383, "delete_dataset": [383, 402, 407], "update_template_path": 383, "get_domain_id": 384, "domain_nam": 384, "domainflavour": [385, 497], "db": [385, 392, 393, 413, 414], "get_domain_flavour_id": 385, "domain_flavour_nam": 385, "flavour": [385, 405, 407, 465, 497], "get_framework_id": 387, "framework_nam": [387, 463, 503], "domain_flavour": [388, 412, 436, 442, 515], "optimization_typ": [388, 391, 412, 436], "profiling_result": [388, 394, 412, 436], "pruning_detail": [388, 391, 412, 436], "tuning_detail": [388, 391, 412, 436], "tuning_histori": [388, 391, 407, 409, 412, 436, 471, 496], "metrics_queri": 389, "input_nod": 390, "precision_id": [390, 391, 392, 393], "domain_id": [390, 398], "domain_flavour_id": 390, "supports_profil": [390, 444, 452], "supports_graph": [390, 444], "supports_prun": [390, 444, 456], "delete_model": [390, 407, 408], "optimization_type_id": 391, "sampling_s": [391, 516, 547, 580], "tuning_details_id": [391, 399], "pruning_details_id": [391, 397], "diagnosis_config": 391, "delete_optim": [391, 407, 409], "optimization_id": [391, 392, 407, 409, 466], "optimization_nam": [391, 392, 406, 407], "update_optimized_model": [391, 407, 409], "optimized_model_id": 391, "update_sampling_s": 391, "update_precis": 391, "update_tuning_detail": 391, "update_pruning_detail": 391, "pin_accuracy_benchmark": [391, 407, 409], "pin": [391, 407, 409], "pin_performance_benchmark": [391, 407, 409], "get_optimization_by_project_and_model": 391, "unpin_benchmark": 391, "db_connect": 391, "unpin": 391, "optimizationtyp": [391, 392, 497], "tuningdetail": [391, 399, 483], "tuninghistori": [391, 400, 484], "pruningdetail": [391, 397], "optimized_model": 391, "get_pinned_benchmark": 391, "list_for_precis": 392, "precision_nam": [392, 393], "get_optimization_type_for_precis": 392, "get_optimization_type_id": 392, "get_optimization_type_by_nam": 392, "get_optimization_type_by_id": 392, "get_precision_id": 393, "get_precision_by_nam": 393, "get_precision_by_id": 393, "num_thread": 394, "delete_profil": [394, 407, 410], "profiling_id": [394, 395, 407, 410, 485], "profiling_nam": 394, "update_num_thread": 394, "profilingresult": [394, 395], "total_execution_tim": 395, "accelerator_execution_tim": 395, "cpu_execution_tim": 395, "op_run": 395, "op_defin": 395, "get_result": 395, "bulk_add": 395, "params_interfac": [395, 401, 402, 404, 406, 407, 408, 409, 410, 412, 436, 496, 534], "profilingresultaddparamsinterfac": [395, 407, 410, 413], "bulk": [395, 407, 410], "delete_result": 395, "delet": [395, 401, 402, 407, 408, 409, 410, 411, 569, 570], "create_project": [396, 406, 407, 411], "delete_project": [396, 407, 411], "project_nam": [396, 402, 407], "get_model_by_nam": 396, "list_project": [396, 407, 411], "update_not": 396, "pruning_details_data": 397, "delete_pruning_detail": 397, "list_by_domain": 398, "transforms_queri": 398, "accuracy_criterion_typ": 399, "accuracy_criterion_threshold": 399, "exit_polici": [399, 553, 580], "tuning_details_data": 399, "delete_tuning_detail": 399, "update_tuning_histori": 399, "tuning_history_id": 399, "minimal_accuraci": 400, "baseline_accuraci": 400, "baseline_perform": 400, "last_tune_accuraci": 400, "last_tune_perform": 400, "best_tune_accuraci": 400, "best_tune_perform": 400, "benchmarkapiinterfac": [401, 407], "get_benchmark_detail": [401, 407], "list_benchmark": [401, 407], "update_benchmark_accuraci": [401, 407], "update_benchmark_perform": [401, 407], "update_benchmark_statu": [401, 407], "update_benchmark_dur": [401, 407], "update_path": [401, 407, 409], "add_benchmark": [401, 407], "add_result": [401, 407, 410], "edit_benchmark": [401, 407], "parse_benchmark_data": [401, 407], "benchmarkaddparamsinterfac": [401, 407, 413], "parse_benchmark_edit_data": [401, 407], "benchmarkeditparamsinterfac": [401, 407, 413], "before_delete_benchmark_entri": 401, "sqlite3": 401, "db_model": [401, 412, 436, 496], "datasetapiinterfac": [402, 407], "get_dataset_detail": [402, 407], "list_dataset": [402, 407], "add_dataset": [402, 407], "set_template_path": [402, 407], "parsed_dataset_data": [402, 407], "datasetaddparamsinterfac": [402, 407, 413], "check_if_custom_metric_or_dataload": [402, 407], "dataset_data": [402, 407, 467, 468, 473, 477, 480, 483, 517], "generate_custom_templ": [402, 407], "dataloader_path": [402, 407], "generate_templ": [402, 407], "template_typ": [402, 407], "parse_dataset_data": [402, 407], "get_predefined_dataset": [402, 407], "prepare_predefined_dataload": [402, 407], "prepare_predefined_transform": [402, 407], "set_database_vers": [402, 403], "version_num": [402, 403], "alembic_vers": [402, 403], "initialize_associ": [402, 403], "initialize_precision_optimization_types_associ": [402, 403], "search_in_list_of_dict_for_unique_valu": [402, 403], "list_of_dict": [402, 403], "search_in_list_of_dict": [402, 403], "diagnosisapiinterfac": [404, 407], "get_op_list": [404, 407, 415], "get_op_detail": [404, 407, 415], "generate_optim": [404, 407], "model_wise_param": [404, 407], "parse_optimization_data": [404, 407, 409], "diagnosisoptimizationparamsinterfac": [404, 407, 413], "parse_op_wise_config": [404, 407], "op_wise_param": [404, 407], "parse_wise_paramet": [404, 407], "params_per_typ": [404, 407], "set_op_wise_pattern_precis": [404, 407], "parse_model_wise_config": [404, 407], "dictionariesapiinterfac": [405, 407], "dictonari": [405, 407], "list_domain": [405, 407], "list_domain_flavour": [405, 407], "list_optimization_typ": [405, 407], "list_optimization_types_for_precis": [405, 407], "list_precis": [405, 407], "list_dataload": [405, 407], "list_dataloaders_by_framework": [405, 407], "list_transform": [405, 407], "list_transforms_by_framework": [405, 407], "list_transforms_by_domain": [405, 407], "list_metr": [405, 407], "list_metrics_by_framework": [405, 407], "examplesapiinterfac": [406, 407], "get_optimization_data": [406, 407], "optimizationaddparamsinterfac": [406, 407, 409, 413], "benchmark_api_interfac": [407, 412, 436], "dataset_api_interfac": [407, 412, 436], "diagnosis_api_interfac": [407, 412, 436], "dictionaries_api_interfac": [407, 412, 436], "examples_api_interfac": [407, 412, 436], "model_api_interfac": [407, 412, 436], "optimization_api_interfac": [407, 412, 436], "profiling_api_interfac": [407, 412, 436], "project_api_interfac": [407, 412, 436], "modelapiinterfac": [407, 408], "add_model": [407, 408, 411], "get_model_detail": [407, 408], "list_model": [407, 408, 436, 462, 496], "parse_model_data": [407, 408], "modeladdparamsinterfac": [407, 408, 413], "optimizationapiinterfac": [407, 409], "get_optimization_detail": [407, 409], "list_optim": [407, 409], "update_optimization_statu": [407, 409], "update_optimization_dur": [407, 409], "add_optim": [407, 409], "add_quantization_optim": [407, 409], "optimization_data": [407, 409, 467, 468, 473, 477, 480, 483], "add_pruning_optim": [407, 409], "add_standard_optim": [407, 409], "edit_optim": [407, 409], "get_pruning_detail": [407, 409], "gat": [407, 409], "edit_tuning_detail": [407, 409], "parsed_optimization_data": [407, 409], "optimizationeditparamsinterfac": [407, 409, 413], "edit_pruning_detail": [407, 409], "pruning_data": [407, 409], "add_tuning_histori": [407, 409], "parse_tuning_histori": [407, 409], "tuninghistoryinterfac": [407, 409, 413, 534], "parse_optimization_edit_data": [407, 409], "load_pruning_details_config": [407, 409, 515], "profilingapiinterfac": [407, 410], "get_profiling_detail": [407, 410], "list_profil": [407, 410], "update_profiling_statu": [407, 410], "update_profiling_dur": [407, 410], "add_profil": [407, 410], "edit_profil": [407, 410], "bulk_add_result": [407, 410], "parse_profiling_data": [407, 410], "profilingaddparamsinterfac": [407, 410, 413], "parse_profiling_result_data": [407, 410], "parse_profiling_edit_data": [407, 410], "profilingeditparamsinterfac": [407, 410, 413], "projectapiinterfac": [407, 411], "get_project_detail": [407, 411], "add_dummy_dataset": [407, 411], "update_project_not": [407, 411], "db_oper": [412, 436, 496], "parse_nod": 413, "tuninghistoryiteminterfac": [413, 534], "update_dataloaders_param": 414, "dataloaders_to_upd": 414, "framework_dataloaders_config": 414, "get_framework_dataloaders_config": 414, "get_framework_transforms_config": 414, "get_tensors_info": [415, 444], "load_quantization_config": 415, "calculate_ms": 415, "input_model_tensor": 415, "optimized_model_tensor": 415, "op_detail": [415, 417, 436, 496], "opdetail": [415, 420], "get_histogram_data": 415, "draw": [415, 576, 579], "diagnosisfactori": 416, "get_diagnosi": 416, "onnx_diagnosi": [417, 436, 496], "onnxrt_diagnosi": [417, 418, 436], "tensorflow_diagnosi": [417, 436, 496], "factori": [417, 436, 471, 487, 492, 496, 507, 511], "op_entri": [417, 436, 496], "onnxrtdiagnosi": 419, "onnxrtmodel": [419, 447], "serialization_typ": [420, 421, 451, 503, 505, 517, 518, 522, 523], "oppattern": 420, "pattern_data": 420, "opweight": 420, "weights_data": 420, "opactiv": 420, "op_activ": 420, "opentri": 421, "activation_min": 421, "activation_max": 421, "tensorflowdiagnosi": 423, "tensorflowmodel": [423, 452, 454, 455, 456, 457], "browser": [424, 544], "get_directory_entri": 424, "get_requested_path": 424, "request": [424, 436, 437, 438, 459, 460, 463, 484, 496, 500, 527, 529, 531, 532, 536, 538, 539, 541, 544, 547, 573], "get_non_hidden_directory_entri": 424, "create_dir_entri": 424, "direntri": 424, "create_file_entri": 424, "create_entri": 424, "is_directori": 424, "sort_entri": 424, "should_show_fil": 424, "should_show_only_model_fil": 424, "get_setting_valu": 424, "get_filter_valu": 424, "filter_requested_entri": 424, "filter_nam": 424, "is_directory_entri": 424, "is_model_or_directory_entri": 424, "is_dataset_or_directory_entri": 424, "brows": 425, "filesystem": [425, 515, 540], "attribute_typ": 426, "expanded_group": [427, 430], "edg": [429, 431, 436, 496, 578], "add_edg": 429, "source_id": 429, "target_id": 429, "get_nod": 429, "highlight_pattern": 429, "get_target_nod": 429, "reader": [430, 431, 436, 496], "graphread": 430, "find_pattern_in_graph": [430, 531], "onnxrt_read": [431, 433, 436], "tensorflow_read": [431, 433, 436], "collaps": [431, 436, 496, 544], "graph_read": [431, 436, 496], "groupnod": 432, "group_nam": 432, "onnxrtread": 434, "tensorflowread": 435, "jobs_control_queu": [436, 437, 496], "frozen_pb": [436, 443, 453], "meta_graph": [436, 443, 453], "model_type_gett": [436, 443, 496], "repositori": [436, 441, 443, 496, 502, 559], "download_config": [436, 461, 462, 496], "download_model": [436, 461, 462, 496], "optimize_model": [436, 469, 471, 472, 475, 478], "neural_coder_optim": [436, 471, 496], "tune_model": [436, 471, 481], "execute_optim": [436, 471, 496], "tensorflow_profil": [436, 487, 496], "execute_profil": [436, 487, 496], "profile_model": [436, 487, 489, 493, 496], "job": [437, 511], "_jobscontrolqueu": 438, "queu": 438, "jobsmanag": 438, "_jobsmmanag": 439, "_job": 439, "get_default_path": 441, "shape_elements_ord": [444, 447, 456, 515], "get_input_nod": [444, 454, 455, 456], "get_output_nod": [444, 454, 455, 456], "ensure_supported_path": 444, "get_model_graph": [444, 447, 455, 456, 531], "get_framework_nam": [444, 447, 449, 456], "supports_path": [444, 447, 449, 452, 454, 455, 457], "guard_requirements_instal": [444, 447, 449, 456], "instal": [444, 447, 449, 456, 463, 552, 556, 568], "nc_model_inst": [447, 456], "onnx_model": 447, "filtered_input_nod": 447, "remove_number_of_samples_from_shap": 447, "pytorchscriptmodel": 449, "modelrepositori": 450, "get_framework_from_path": [450, 515], "get_supported_framework": 450, "is_model_path": 450, "trust": [451, 544], "frozenpbmodel": 452, "metagraphmodel": 455, "metagraph": 455, "savedmodelmodel": 457, "get_input_shap": 458, "fix_dynamic_shap": 458, "resourc": [461, 550, 569], "download_yaml_config": 461, "model_info": 461, "download_fil": 461, "download_path": 461, "header": [461, 540, 556], "report_progress": 461, "unpack_arch": 461, "archive_path": 461, "unpack": 461, "archiv": 461, "get_yaml_url": 461, "model_src_dir": 461, "yaml_relative_loc": 461, "get_available_model": 463, "check_vers": 463, "framework_vers": 463, "supported_vers": 463, "validate_model_list": 463, "model_list": 463, "get_framework_module_nam": 463, "get_installed_framework": 463, "mappingdirect": 465, "namesmapp": 465, "framework_map": 465, "domain_map": 465, "domain_flavour_map": 465, "precision_map": 465, "map_nam": 465, "parameter_typ": 465, "execute_optimization_pytorch_script": 466, "execute_optimization_regular": 466, "parse_model_data_to_bench_nam": 466, "parse_log": 466, "optimization_detail": 466, "check_if_collect_tuning_histori": 466, "optimizationfactori": 467, "get_optim": 467, "optimization_script": [468, 473, 477, 480, 483], "optimize_graph": [470, 474], "output_graph": [470, 474, 479, 482], "optimize_graph_config": [470, 474], "optimize_pt_script": 476, "output_model_nam": 477, "output_model_dir": 477, "optimizationinterfac": 477, "accuracycriterion": [483, 579], "optimization_workdir": 484, "watcher": 484, "process_succeed": 484, "signal": [484, 515, 553], "was_history_file_chang": 484, "history_file_modification_tim": 484, "send_history_snapshot": 484, "execute_real_profil": 485, "profiling_detail": 485, "profilerfactori": [486, 491], "get_profil": [486, 491], "profiling_data": [486, 490, 491, 493, 513], "load_profiling_detail": 488, "json_path": 488, "config_path": 490, "initialize_graph": 493, "tf_modul": 493, "create_tf_config": 493, "num_warmup": 493, "get_node_by_nam": 493, "convert_nodes_to_list": 493, "build_dataload": 493, "delete_assign": 494, "wsgi": 495, "prepare_environ": 495, "app": [496, 530], "history_snapshot_pars": [496, 530, 535], "request_data_processor": [496, 530, 535], "response_gener": [496, 530, 535, 536, 538, 541], "status": [497, 509, 514], "ensure_workdir_exists_and_writ": 498, "clean_workloads_wip_statu": 498, "wip": [498, 581], "workloads_list": 498, "migrate_databas": 498, "latest": [498, 508, 561, 571, 575], "alemb": [498, 556, 561], "notfoundexcept": [499, 528, 529], "accessdeniedexcept": 499, "deni": 499, "clienterrorexcept": 499, "internalexcept": 499, "workspace_path": [500, 515], "subject": [500, 527, 562], "send_respons": 500, "log_nam": 500, "additional_log_nam": [500, 508], "shell": [500, 508, 577], "process_dur": 500, "call_on": 500, "cwd": [500, 508], "universal_newlin": [500, 508], "startupinfo": [500, 508], "creationflag": [500, 508], "ignore_exit_cod": [500, 508], "pid": [500, 508], "env_arg": 500, "ncprocess": [500, 509], "refresh_workdir": 500, "is_multi_command": 500, "expir": 501, "expiringdictitem": 501, "expires_at": 501, "is_expir": 501, "expiringdict": 501, "initial_valu": 501, "ttl": 501, "120": 501, "userdict": 501, "githubinfo": 502, "hw": 503, "hwinfo": 503, "get_number_of_socket": 503, "get_distribut": 503, "distibut": 503, "get_bios_vers": 503, "bio": [503, 568], "is_turbo_boost_en": 503, "turbo": [503, 568], "boost": [503, 564, 571], "get_kernel_vers": 503, "get_framework_info": 503, "get_framework_dependency_info": 503, "subdepend": 503, "serializ": 505, "serialize_item": 505, "datetim": 505, "throw": 505, "typeerror": 505, "2016": 505, "84913": 505, "08t11": 505, "084913": 505, "change_log_level": 506, "optimizationpars": 507, "performancepars": 507, "update_parti": 507, "parsed_result": 507, "summarize_parti": 507, "summarize_valu": 507, "accuracypars": 507, "benchmarkparserfactori": 507, "get_pars": 507, "profilingpars": 507, "unify_tim": 507, "string_valu": 507, "micro": 507, "125": [507, 581], "6m": 507, "microsecond": 507, "output_dir": 508, "cmd": 508, "docker": 508, "hub": 508, "aibt_tensorflow": 508, "7_3_mkldnn_tensorflow": 508, "111224": 508, "pull_imag": 508, "0c750a01": 508, "90e0": 508, "4aa8": 508, "99fe": 508, "a194d55a2046": 508, "time_start": 508, "2018": 508, "17t14": 508, "47": [508, 581], "352502": 508, "time_stop": 508, "25": [508, 581], "110410": 508, "info_path": 508, "tail": 508, "is_ok": [508, 509], "subprocess": [508, 531], "popen": 508, "remove_log": 508, "properli": 509, "return_code_al": 509, "remove_successful_log": 509, "success": [509, 527, 561], "get_status_update_funct": 511, "job_typ": 511, "sent": 513, "throughput": 513, "acc_input_model": 513, "acc_optimized_model": 513, "size_input_model": 513, "size_optimized_model": 513, "path_optimized_model": 513, "optimization_tim": 513, "insert_data": 513, "calculate_throughput": 513, "readi": 513, "ensure_working_path_exist": 514, "clean_log": 514, "workdir_path": 514, "is_hidden": 515, "get_dataset_path": 515, "get_file_extens": 515, "lead": [515, 550, 564, 569, 570], "is_dataset_fil": 515, "normalize_domain": 515, "underscor": 515, "normalize_framework": 515, "normalize_str": 515, "string_to_norm": 515, "get_model_zoo_config_path": 515, "model_dict": 515, "get_model_zoo_model_path": 515, "check_modul": 515, "get_module_vers": 515, "add_unit": 515, "load_model_config": 515, "load_dataloader_config": 515, "load_transforms_config": 515, "load_transforms_filter_config": 515, "meaning": [515, 567], "load_precisions_config": 515, "get_default_pruning_config_path": 515, "load_model_wise_param": 515, "load_metrics_config": 515, "get_metrics_dict": 515, "load_help_nc_param": 515, "replace_with_valu": 515, "file_path": 515, "verify_file_path": 515, "determine_ip": 515, "ip": 515, "is_development_env": 515, "nc_mode": 515, "filter_transform": 515, "parse_bool_valu": 515, "release_tag": 515, "get_shape_from_transform": 515, "get_height_width_from_s": 515, "parse_to_string_list": 515, "parse_to_float_list": 515, "export_to_csv": 515, "parse_vers": 515, "string_vers": 515, "remove_dataload": 516, "datalad": 516, "remove_accuracy_metr": 516, "set_evaluation_dataload": 516, "udpat": 516, "set_evaluation_dataset_path": 516, "get_performance_config": 516, "set_performance_cores_per_inst": 516, "get_performance_cores_per_inst": 516, "set_performance_num_of_inst": 516, "num_of_inst": [516, 545, 547, 572], "get_performance_num_of_inst": 516, "set_accuracy_and_performance_batch_s": 516, "set_quantization_dataload": 516, "set_quantization_dataset_path": 516, "set_quantization_batch_s": 516, "set_workspac": [516, 525], "set_accuracy_go": 516, "accuracy_go": 516, "set_accuracy_metr": 516, "set_transform": 516, "process_transform": 516, "set_quantization_approach": 516, "set_input": 516, "set_output": 516, "set_quantization_sampling_s": 516, "set_performance_warmup": 516, "warmup": [516, 572], "set_performance_iter": 516, "set_optimization_precis": 516, "yaml_path": 516, "is_dummi": 517, "labelbal": 517, "set_transforms_from_list": 517, "transforms_list": 517, "set_dataset": 517, "postprocessschema": 518, "get_label_shift_valu": 518, "set_accuracy_postprocess_transform": 518, "set_precis": [519, 521], "sgdoptim": 523, "adamwoptim": 523, "adamoptim": 523, "crossentropylosscriterion": 523, "sparsecategoricalcrossentropycriterion": 523, "knowledgedistillationlosscriterion": 523, "set_postprocess_transform": 523, "weightcompressionapproach": 523, "initialize_prun": 523, "pruner_dict_list": 523, "serialize_prun": 523, "parse_dict_value_to_float": 523, "parse_dict_value_to_int": 523, "wiseconfigdetail": 524, "wiseconfig": 524, "multiobject": 525, "acccriterion": 525, "exitpolici": 525, "set_timeout": 525, "set_max_tri": 525, "max_trial": [525, 553, 579], "trial": [525, 579], "set_performance_onli": 525, "set_random_se": 525, "float_represent": 526, "dumper": 526, "pruner_represent": 526, "outsid": 527, "create_simple_respons": 527, "gui": [527, 528, 532, 544, 560, 561], "messagequeu": 527, "queue": [527, 532], "post_failur": 527, "post_success": 527, "post_error": 527, "wait": 527, "global_config_directori": 528, "set_up": 528, "determine_values_from_environ": 528, "get_command_line_arg": 528, "determine_server_port": 528, "max_ports_tri": 528, "port_default": 528, "determine_gui_port": 528, "client": [528, 544], "server_port": 528, "unless": [528, 557], "is_port_taken": 528, "determine_log_level": 528, "determine_url_prefix": 528, "get_url": 528, "dump_token_to_fil": 528, "servicenotfoundexcept": 529, "unknown": 529, "connector": 531, "routingdefinit": 531, "rout": 531, "realtimeroutingdefinit": 531, "realtim": 531, "deferredroutingdefinit": 531, "deferredsubprocessroutingdefinit": 531, "spawn": 531, "get_system_info": 531, "endpoint": 532, "run_serv": 532, "webserv": 532, "get_tls_arg": 532, "tl": [532, 544], "block_ifram": 532, "werkzeug": [532, 540], "ifram": 532, "csp": 532, "block_snif": 532, "mime": 532, "snif": 532, "require_api_token": 532, "author": [532, 562], "j": 532, "handle_api_cal": 532, "subpath": 532, "allow_api_cal": 532, "page_not_found": 532, "disable_cach": 532, "build_paramet": 532, "flask": [532, 544], "web_socket_publish": 532, "web_socket": 532, "flask_socketio": 532, "socketio": [532, 544], "benchmarkservic": 533, "workloadservic": [533, 537, 538, 541], "historysnapshotpars": 534, "history_snapshot": 534, "provide_perform": 534, "parse_history_snapshot": 534, "parse_history_item": 534, "history_item": 534, "extract_accuraci": 534, "extract_perform": 534, "modelservic": 536, "optimizationservic": 537, "profilingservic": 538, "generate_csv": 538, "processor": [539, 564, 568, 571, 573, 574, 581], "requestdataprocessor": 539, "get_string_valu": 539, "responsegener": 540, "serve_from_filesystem": 540, "mimetyp": 540, "as_attach": 540, "add_refresh": 540, "refresh_tim": 540, "refresh": 540, "from_except": 540, "get_status_code_for_except": 540, "get_code_templ": 541, "get_output": 541, "asymmetr": [543, 573, 579], "conda": [544, 556, 561, 575], "forg": [544, 556, 561], "setup": [544, 557, 561], "sign": [544, 573, 576], "certif": 544, "ui": 544, "5000": 544, "338174d13706855fc6924cec7b3a8ae8": 544, "listen": 544, "firewal": 544, "8080": 544, "cert": 544, "path_to_cert": 544, "crt": 544, "path_to_private_kei": 544, "encrypt": 544, "insecur": 544, "expos": 544, "forfeit": 544, "threat": 544, "button": [544, 560], "pop": 544, "recognit": [544, 552, 577], "finish": 544, "synthet": 544, "plu": 544, "icon": 544, "section": [544, 550, 569, 572, 580], "unfold": 544, "On": [544, 573], "panel": 544, "navig": 544, "trash": 544, "visibl": 544, "cursor": 544, "prompt": [544, 552], "confirm": 544, "revers": 544, "exit": [544, 553, 564, 580], "pencil": 544, "light": [544, 551], "blue": 544, "color": 544, "row": [544, 569, 570], "arrow": 544, "checkbox": 544, "chart": [544, 573, 576, 577], "offer": [544, 548], "conveni": 544, "variat": 544, "yellow": 544, "warn": 544, "remind": 544, "dialog": 544, "cryptographi": 544, "centercrop": [545, 547, 578], "totensor": [545, 547, 578], "485": [545, 547, 581], "456": [545, 547], "406": [545, 547], "enough": [545, 573], "benchmarkconf": 545, "lpot": [545, 571, 575], "pylint": 546, "flake8": 546, "autopep8": 546, "cover": [546, 558, 571], "motiv": 546, "explan": 546, "bug": 546, "reproduc": 546, "submit": 546, "page": 546, "intend": 546, "collabor": 546, "adher": 546, "often": [547, 550, 567, 569, 570], "encount": 547, "consum": 547, "lack": 547, "faster": [547, 549, 571, 581], "dataloadermodul": 547, "hard": 547, "treat": 547, "eas": [547, 561, 571], "advantag": [547, 572], "life": 547, "launch": [547, 564], "__next__": 547, "randomresizedcrop": [547, 578], "imagerecordit": 547, "path_imgrec": 547, "label_width": 547, "preprocess_thread": 547, "data_nthread": 547, "data_shap": 547, "label_nam": 547, "rand_crop": 547, "rand_mirror": 547, "shuffle_dataset": 547, "shuffle_chunk_se": 547, "shuffle_se": 547, "data_layer_typ": 547, "combine_mean_std": 547, "helloworld": [548, 578], "ensp": [548, 563, 578], "imagerecord": [548, 552, 580], "image_nam": 548, "cocorecord": 548, "gt": [548, 555, 578], "float16": 548, "int64": 548, "style_transf": 548, "content": 548, "tfrecorddataset": 548, "aid": 549, "infrastructur": 549, "deploi": [550, 579], "power": [550, 568], "mobil": [550, 581], "workflow": [550, 561, 564, 577], "produc": 550, "softmax": 550, "l": [550, 577, 579], "kd": 550, "kullback": 550, "leibler": 550, "patient": 550, "compact": [550, 569, 570], "ia": 550, "attach": 550, "shallow": 550, "deepest": 550, "deeper": 550, "10006": 550, "distillationconf": 550, "blendcnn": [550, 581], "loss_sum": 550, "iter_bar": 550, "tqdm": 550, "desc": [550, 569], "teacher_logit": 550, "huge": [551, 570], "bit": [551, 564, 571, 573], "heavi": 551, "booster": 551, "degrad": 551, "retrain": [551, 569, 570], "incorpor": [551, 579], "novel": 551, "horovod": 552, "builtin": 552, "program": [552, 564], "addition": [552, 579], "enable_eager_execut": 552, "yaml_file_path": 552, "evaluation_time_cost": 552, "partit": 552, "distributedsampl": 552, "train_sampl": 552, "train_dataset": 552, "num_replica": 552, "train_kwarg": 552, "adadelta": 552, "distributedoptim": 552, "named_paramet": 552, "broadcast_paramet": 552, "root_rank": 552, "broadcast_optimizer_st": 552, "set_epoch": 552, "batch_idx": 552, "nll_loss": 552, "log_interv": 552, "0f": 552, "tloss": 552, "6f": 552, "dry_run": 552, "test_func": 552, "host": 552, "num_of_process": 552, "002": 552, "ssh": 552, "readm": 552, "exactli": 552, "resnet50_v1": 552, "resizecropimagenet": [552, 578], "realiz": [552, 563, 566, 574, 576], "tow": 552, "situat": 552, "node1": 552, "node2": 552, "TO": 552, "your_node1_nam": 552, "your_node2_nam": 552, "resnet50_fp32_pretrained_model": 552, "nc_resnet50_v1": 552, "factor": [553, 568, 581], "oppos": 553, "entail": 553, "post_training_dynamic_qu": [553, 572, 579], "post_training_static_qu": [553, 572, 579], "accuracy_criterion": [553, 566, 572, 579, 580], "rel": [553, 572, 579, 580, 581], "earli": [553, 573, 579, 580], "determinist": 553, "wide": [554, 564, 570, 573], "varieti": [554, 572, 579], "demonstr": [554, 569, 577], "exchang": 555, "hope": 555, "briefli": [555, 569], "matur": 555, "major": [555, 558, 573], "reus": 555, "torch2onnxconfig": 555, "inc_model": [555, 565], "fp32_onnx_config": 555, "randn": 555, "int8_onnx_config": 555, "quantizelinear": 555, "dequantizelinear": 555, "matmulintegertofloat": 555, "matmulinteg": 555, "cast": [555, 574, 578], "incompat": 556, "88": [556, 576, 581], "80": [556, 577, 581], "pyobject": 556, "reinstal": 556, "importerror": 556, "libgl": 556, "apt": [556, 561], "yum": [556, 561], "opencv": 556, "conflict": 556, "pend": 556, "27": [556, 561, 581], "quick": [557, 580], "friendli": [557, 580], "let": [557, 572, 580], "syntax": 557, "up1": 557, "up2": 557, "valid_mixed_precis": 557, "concatv2": 557, "maxpool": 557, "avgpool": 557, "per_tensor": [557, 580], "addn": 557, "grappler_optim": 557, "constfold": 557, "debug_stripp": 557, "concept": [558, 576], "custom_metr": 558, "explicitli": 558, "refin": 558, "broad": 560, "snippet": 560, "upload": 560, "qintegerop": [560, 573], "plan": [560, 564], "frequent": 561, "ask": 561, "consolid": 561, "streamlin": 561, "scienc": 561, "anaconda": 561, "suit": [561, 577], "esri": 561, "apach": 562, "softwar": [562, 564, 568, 571, 575], "copyright": 562, "mit": 562, "accompani": 562, "wish": 562, "bibtex": 562, "misc": 562, "feng": 562, "tian": 562, "chuanqi": 562, "wang": 562, "guom": 562, "zhang": 562, "penghui": 562, "cheng": 562, "pengxin": 562, "yuan": 562, "haihao": 562, "shen": 562, "jiong": 562, "gong": 562, "titl": 562, "howpublish": 562, "year": 562, "logo": [562, 568], "atom": 562, "phi": 562, "pentium": 562, "vtune": 562, "corpor": [562, 568], "subsidiari": [562, 568], "brand": [562, 568], "claim": [562, 568], "popularli": 563, "label_map": 563, "decis": 563, "ap": 563, "pr": 563, "curv": 563, "target_boxes_num": 563, "str_label": 563, "int_label": 563, "inturn": 563, "cocomap": 563, "vocmap": 563, "categor": 563, "multiclass": 563, "multilabel": 563, "multi_metr": 563, "higher_is_bett": [563, 566, 579, 580], "newmetr": 563, "reflect": [563, 568, 578], "recent": 564, "growth": 564, "complex": [564, 570], "bfloat16": [564, 574], "half": 564, "sixteen": 564, "bandwidth": 564, "3rd": [564, 571, 573, 574], "gen": [564, 571, 574], "codenam": 564, "avx512": [564, 573], "vcvtne2ps2bf16": 564, "vcvtneps2bf16": 564, "vdpbf16p": 564, "user_defined_funct": 564, "avx512_bf16": 564, "consequ": 564, "persist": 565, "brought": [565, 573], "tf2": 565, "h5": 565, "onnx_ml_pb2": 565, "hybridblock": 565, "0000": 565, "saved_result": 565, "multi_object": 566, "peak": 566, "start_tim": 566, "_result_list": 566, "customobj": 566, "simultan": [567, 572], "arbitrari": 567, "gain": [567, 571], "benefit": [567, 569], "Of": 567, "cours": 567, "prune_conf": 567, "post_training_quantization_conf": 567, "quantization_aware_training_conf": 567, "configurationintel": 568, "platinum": [568, 581], "8380": [568, 581], "manufactur": 568, "m50cyp2sbstd": 568, "se5c6200": 568, "86b": 568, "0022": 568, "d64": 568, "2105220049": 568, "microcod": 568, "0xd0002b1": 568, "30ghz": 568, "3ghz": 568, "40": [568, 580, 581], "perf": 568, "256gb": 568, "16x16gb": 568, "ddr4": 568, "3200mt": 568, "nic": 568, "ethernet": 568, "10g": 568, "x550t": 568, "drive": 568, "1x": 568, "intel_ssdsc2kw01": 568, "953": 568, "9g": 568, "ct1000mx500ssd1": 568, "931": 568, "5g": 568, "publicli": 568, "degre": 568, "mark": 568, "trademark": 568, "art": [569, 570], "increasingli": [569, 570], "crucial": [569, 570], "salient": [569, 570], "nonzero": [569, 570], "irregular": [569, 570], "anywher": [569, 570], "2in4": 569, "amper": 569, "gemm": 569, "ic": [569, 571], "oc": 569, "kh": 569, "kw": 569, "fastform": 569, "finetun": [569, 570, 581], "downstream": [569, 570], "formula": [569, 570], "num_train_epoch": 569, "pbar": 569, "progressbar": 569, "n_total": 569, "n_gpu": 569, "gradient_accumulation_step": 569, "clip_grad_norm_": 569, "max_grad_norm": 569, "rate": [569, 573], "cv": [569, 570], "grown": 570, "unpreced": 570, "smooth": 570, "discourag": 570, "namhoon": 570, "lee": 570, "thalaiyasingam": 570, "ajanthan": 570, "philip": 570, "torr": 570, "2019": 570, "plug": 571, "twitter": 571, "linkedin": 571, "zone": 571, "hug": 571, "land": 571, "gcp": 571, "aw": [571, 581], "azur": 571, "marketplac": 571, "pat": 571, "keynot": 571, "intelon": 571, "sep": 571, "alibaba": 571, "chines": 571, "aug": 571, "purif": 571, "sacrif": 571, "jun": 571, "partner": 571, "democrat": 571, "apr": 571, "ecosystem": 571, "mar": 571, "feb": 571, "sigopt": 571, "jan": 571, "bilibili": 571, "ml": 571, "doubl": 571, "mlperf": 571, "reconstruct": 571, "abound": 571, "cern": 571, "gan": 571, "3dgan": 571, "4th": 571, "iml": 571, "workshop": 571, "highli": 571, "intelcaff": 571, "aris": 572, "tell": 572, "henc": 572, "quant_aware_train": 572, "op_type_list": [572, 579], "use_bf16": [572, 574], "weight_compress": [572, 580], "initial_spars": [572, 580], "prune_typ": [572, 580], "basic_magnitud": [572, 580], "start_epoch": [572, 580], "end_epoch": [572, 580], "update_frequ": 572, "prune_domain": 572, "tile_pattern_1x1": 572, "inter_num_of_thread": 572, "intra_num_of_thread": 572, "graph_optimization_level": 572, "disable_al": 572, "veri": [573, 579], "invent": 573, "int4": 573, "cost": 573, "theoret": 573, "affin": 573, "zeropoint": 573, "overflow": 573, "solv": [573, 575], "unseen": 573, "peopl": 573, "emul": 573, "pain": 573, "lossi": 573, "understand": [573, 577], "philosophi": 573, "val_dataset": 573, "val_dataload": 573, "worker": 573, "ping_memori": 573, "enhanc": 574, "bf16wrapper": 574, "retrac": 574, "site": 575, "assist": 575, "comparison": [575, 577], "sed": 575, "your_script": 575, "visual": [576, 577, 579], "hyperparamet": [576, 579], "backbon": 576, "interact": 576, "sigopt_api_token": [576, 579], "sigopt_project_id": [576, 579], "sigopt_experiment_id": 576, "nc": [576, 579], "login": 576, "certain": 576, "suffici": 576, "ordinari": 576, "capac": 576, "sigopt_experiment_nam": [576, 579], "receiv": 576, "tuning_criterion": [576, 579], "tuningcriterion": [576, 579], "strategy_kwarg": [576, 579], "analysi": 576, "8266": 576, "8372": 576, "2132": 576, "83": [576, 581], "7495": 576, "8299": 576, "8294": 576, "85": [576, 581], "0837": 576, "8291": 576, "4469": 576, "discov": 577, "why": 577, "valuabl": 577, "instrument": 577, "writer": 577, "_pre_eval_hook": 577, "submodul": 577, "whitelist": 577, "_recordingobserv": 577, "output_tensors_dict": 577, "current_it": 577, "get_tensor_valu": 577, "_observer_forward_hook": 577, "_add_observer_": 577, "named_children": 577, "leaf": 577, "add_modul": 577, "register_forward_hook": 577, "dump_tim": 577, "summarywrit": 577, "_acc": 577, "tune_": 577, "add_graph": 577, "get_observer_dict": 577, "observer_dict": 577, "is_quant": 577, "add_histogram": 577, "bind_al": 577, "logdir_spec": 577, "tune_0_acc0": 577, "tune_1": 577, "tune_1_acc0": 577, "79": [577, 581], "four": 577, "baseline_acc_0": 577, "776": 577, "tune_1_acc_0": 577, "095": 577, "runs_v3": 577, "image_recognit": 577, "run_tuning_dump_tensor": 577, "sh": 577, "inceptionv3": 577, "v0": 577, "cg": 577, "op_wis": [577, 580], "bash": 577, "run_tun": 577, "topologi": 577, "inception_v3": 577, "dataset_loc": 577, "inceptionv3_fp32_pretrained_model": 577, "output_model": 577, "nc_inceptionv3": 577, "inceptionv3_dump_tensor": 577, "poor": 577, "disappear": 577, "randomcrop": 578, "cropres": 578, "decodeimag": 578, "jpeg": 578, "encodejp": 578, "alignimagechannel": 578, "68": [578, 581], "116": 578, "78": [578, 581], "103": 578, "94": [578, 581], "017": 578, "bilinearimagenet": [578, 580], "topilimag": 578, "padding_mod": 578, "border": 578, "colorjitt": 578, "bright": 578, "satur": 578, "hue": 578, "jitter": 578, "tondarrai": 578, "human": 579, "op_name_list": 579, "tolerable_loss": 579, "quant_level": 579, "post_training_auto_qu": 579, "ii": 579, "iii": 579, "classic": 579, "idea": 579, "primari": 579, "spent": 579, "hawq_v2_loss": 579, "model_loss": 579, "compli": 579, "focu": 579, "short": 579, "never": 579, "loglevel": 579, "endlessli": 579, "perspect": 579, "smbo": 579, "appl": 579, "surrog": 579, "quantil": 579, "x1": 579, "x2": 579, "densiti": 579, "parzen": 579, "greatest": 579, "hour": 579, "dai": 579, "abctunestrategi": 579, "overridden": 579, "mobilenet_v1": 580, "onnxrt_integ": 580, "onnxrt_qlinear": 580, "image_tensor": 580, "subsect": 580, "model_wis": 580, "conv1": 580, "hyper": 580, "06": [580, 581], "beta_1": 580, "beta_2": 580, "999": 580, "epsilon": 580, "sparsecategoricalcrossentropi": 580, "reduct": 580, "sum_over_batch_s": 580, "from_logit": 580, "54": [580, 581], "19": [580, 581], "90": [580, 581], "nesterov": 580, "weight_decai": 580, "overal": 580, "ye": 581, "rnn": 581, "unet": 581, "performancethroughput": 581, "sec": 581, "efficientnet": 581, "91": 581, "43": 581, "69": 581, "32x": 581, "cnn": 581, "incept": 581, "37": 581, "65": 581, "38": 581, "77": 581, "53": 581, "57x": 581, "46": 581, "61": 581, "58x": 581, "resnet101": 581, "39": 581, "63": 581, "11x": 581, "51x": 581, "26": 581, "59": 581, "23": 581, "06x": 581, "25x": 581, "70": 581, "44": 581, "00": 581, "163": 581, "133": 581, "22x": 581, "73": 581, "97": 581, "49": 581, "111": 581, "20x": 581, "v3": 581, "43x": 581, "v4": 581, "18": 581, "56": 581, "53x": 581, "36": 581, "33x": 581, "44x": 581, "374": 581, "226": 581, "66x": 581, "92": 581, "41x": 581, "fashion": 581, "359": 581, "244": 581, "47x": 581, "172": 581, "66": 581, "98x": 581, "153": 581, "76x": 581, "151": 581, "112": 581, "35x": 581, "26x": 581, "72": 581, "99": 581, "56x": 581, "82": 581, "93x": 581, "vgg16": 581, "89": 581, "178": 581, "14x": 581, "vgg19": 581, "156": 581, "18x": 581, "albert": 581, "23x": 581, "barthez": 581, "81": 581, "86": 581, "82x": 581, "203": 581, "01x": 581, "216": 581, "102": 581, "10x": 581, "sst2": 581, "218": 581, "stsb": 581, "57": 581, "48": 581, "49x": 581, "93": 581, "70x": 581, "50x": 581, "40x": 581, "3878": 581, "3717": 581, "04x": 581, "camembert": 581, "188": 581, "91x": 581, "ctrl": 581, "deberta": 581, "124": 581, "81x": 581, "347": 581, "73x": 581, "382": 581, "198": 581, "flaubert": 581, "561": 581, "35": 581, "370": 581, "52x": 581, "hubert": 581, "84": 581, "36x": 581, "409": 581, "181": 581, "longform": 581, "28x": 581, "mbart": 581, "16x": 581, "639": 581, "490": 581, "31x": 581, "lvwerra": 581, "pegasu": 581, "samsum": 581, "19x": 581, "peleenet": 581, "419": 581, "316": 581, "resnet18": 581, "686": 581, "332": 581, "07x": 581, "611": 581, "333": 581, "83x": 581, "327": 581, "162": 581, "resnext101_32x8d": 581, "175": 581, "88x": 581, "197": 581, "99x": 581, "se_resnext50_32x4d": 581, "308": 581, "144": 581, "13x": 581, "squeezebert": 581, "186": 581, "155": 581, "78x": 581, "transfo": 581, "xl": 581, "37x": 581, "wave2vec2": 581, "60": 581, "58": 581, "21x": 581, "114": 581, "15x": 581, "yolo": 581, "29x": 581, "690": 581, "330": 581, "09x": 581, "614": 581, "334": 581, "84x": 581, "54x": 581, "410": 581, "168": 581, "resnext101_32x16d_wsl": 581, "1189": 581, "680": 581, "75x": 581, "677": 581, "381": 581, "59x": 581, "alexnet": 581, "960": 581, "469": 581, "05x": 581, "962": 581, "466": 581, "arcfac": 581, "235": 581, "130": 581, "294": 581, "34x": 581, "604": 581, "51": 581, "80x": 581, "caffenet": 581, "1501": 581, "536": 581, "1493": 581, "533": 581, "1372": 581, "541": 581, "480": 581, "1250": 581, "753": 581, "1130": 581, "748": 581, "emot": 581, "ferplu": 581, "336": 581, "65x": 581, "fcn": 581, "googlenet": 581, "740": 581, "587": 581, "770": 581, "567": 581, "824": 581, "601": 581, "819": 581, "597": 581, "45x": 581, "613": 581, "506": 581, "2454": 581, "1543": 581, "2164": 581, "1564": 581, "38x": 581, "2147": 581, "1046": 581, "1877": 581, "1054": 581, "mobilenetv2": 581, "2751": 581, "1797": 581, "2656": 581, "1835": 581, "7615": 581, "7646": 581, "764": 581, "901": 581, "434": 581, "141": 581, "7614": 581, "575": 581, "952": 581, "433": 581, "7226": 581, "7229": 581, "761": 581, "432": 581, "615": 581, "722": 581, "032": 581, "894": 581, "885": 581, "454": 581, "95x": 581, "603": 581, "455": 581, "644": 581, "636": 581, "254": 581, "791": 581, "shufflenet": 581, "2298": 581, "55": 581, "1480": 581, "55x": 581, "1951": 581, "1490": 581, "squeezenet": 581, "2588": 581, "1605": 581, "61x": 581, "2566": 581, "1936": 581, "725": 581, "570": 581, "27x": 581, "666": 581, "539": 581, "641": 581, "519": 581, "633": 581, "492": 581, "542": 581, "401": 581, "68x": 581, "tini": 581, "yolov3": 581, "648": 581, "518": 581, "221": 581, "319": 581, "307": 581, "30x": 581, "yolov4": 581, "zfnet": 581, "459": 581, "261": 581, "460": 581, "264": 581, "74x": 581, "441": 581, "337": 581, "272": 581, "211": 581, "152": 581, "423": 581, "180": 581, "311": 581, "69x": 581, "taskdataset": 581, "accuracyspars": 581, "ratiospars": 581, "commentsbalanc": 581, "unbalanc": 581, "classificationimagenet": 581, "76top": 581, "13top": 581, "magnitudepost": 581, "magnitudequant": 581, "answeringsquad": 581, "34f1": 581, "2x1": 581, "lassounbalanc": 581, "classificationmnli": 581, "mm": 581, "allbalanc": 581, "classificationsst": 581, "32accuraci": 581, "sensitivitybalanc": 581, "classificationqqp": 581, "classificationqnli": 581, "54accuraci": 581, "em": 581, "87f1": 581, "momentumunbalanc": 581, "momentumbalanc": 581, "classificationmrpc": 581, "52f1": 581, "61accuraci": 581, "7965": 581, "wideresnet40": 581, "9522": 581, "8178": 581, "0213": 581, "8235": 581, "027": 581, "5494": 581, "7153": 581, "5540": 581, "0046": 581, "5523": 581, "0029": 581, "vgg": 581, "7022": 581, "7415": 581, "7025": 581, "0003": 581, "6739": 581, "7399": 581, "6845": 581, "0106": 581, "7034": 581, "8382": 581, "bilstm": 581, "sst": 581, "8314": 581, "9403": 581, "9048": 581, "0734": 581, "7323": 581, "8256": 581, "8084": 581, "8814": 581, "7442": 581, "8371": 581, "0119": 581, "0115": 581, "tinybert": 581, "8018": 581, "8044": 581, "8363": 581, "8411": 581, "8025": 581, "8074": 581, "0007": 581, "0030": 581, "8626": 581, "8213": 581, "9091": 581, "8782": 581, "8684": 581, "8259": 581, "0058": 581, "distilroberta": 581, "6057": 581, "6455": 581, "6187": 581, "0130": 581, "c6i": 581, "2xlarg": 581, "c6a": 581, "c6g": 581, "a100cuda": 581}, "objects": {"": [[31, 0, 0, "-", "644ec953a7dc_pruning_support"], [32, 0, 0, "-", "6ece06672ed3_v1_14"], [33, 0, 0, "-", "6f0d0f71d92e_v1_13"], [34, 0, 0, "-", "9e89549a08c8_v1_11"], [35, 0, 0, "-", "block_mask"], [36, 0, 0, "-", "env"], [299, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[32, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [32, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[36, 1, 1, "", "run_migrations_offline"], [36, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[299, 2, 1, "", "Benchmark"], [299, 2, 1, "", "DistillationConfig"], [299, 2, 1, "", "WeightPruningConfig"], [38, 0, 0, "-", "adaptor"], [175, 0, 0, "-", "algorithm"], [177, 0, 0, "-", "benchmark"], [180, 0, 0, "-", "conf"], [182, 0, 0, "-", "config"], [183, 0, 0, "-", "contrib"], [208, 0, 0, "-", "data"], [257, 0, 0, "-", "experimental"], [306, 0, 0, "-", "metric"], [308, 0, 0, "-", "mix_precision"], [310, 0, 0, "-", "model"], [318, 0, 0, "-", "objective"], [320, 0, 0, "-", "pruner"], [334, 0, 0, "-", "quantization"], [341, 0, 0, "-", "strategy"], [350, 0, 0, "-", "training"], [354, 0, 0, "-", "utils"], [496, 0, 0, "-", "ux"], [542, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[37, 0, 0, "-", "adaptor"], [39, 0, 0, "-", "keras"], [40, 0, 0, "-", "keras_utils"], [42, 0, 0, "-", "mxnet"], [43, 0, 0, "-", "mxnet_utils"], [45, 0, 0, "-", "onnxrt"], [47, 0, 0, "-", "ox_utils"], [70, 0, 0, "-", "pytorch"], [71, 0, 0, "-", "query"], [72, 0, 0, "-", "tensorflow"], [132, 0, 0, "-", "tf_utils"], [169, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[37, 2, 1, "", "Adaptor"], [37, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[37, 3, 1, "", "convert"], [37, 3, 1, "", "evaluate"], [37, 3, 1, "", "inspect_tensor"], [37, 3, 1, "", "quantize"], [37, 3, 1, "", "quantize_input"], [37, 3, 1, "", "query_fused_patterns"], [37, 3, 1, "", "query_fw_capability"], [37, 3, 1, "", "save"], [37, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[39, 2, 1, "", "KerasAdaptor"], [39, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[39, 3, 1, "", "convert"], [39, 3, 1, "", "evaluate"], [39, 3, 1, "", "get_optype_wise_ability"], [39, 3, 1, "", "inspect_tensor"], [39, 3, 1, "", "quantize"], [39, 3, 1, "", "quantize_input"], [39, 3, 1, "", "query_fw_capability"], [39, 3, 1, "", "save"], [39, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[39, 3, 1, "", "get_op_types"], [39, 3, 1, "", "get_op_types_by_precision"], [39, 3, 1, "", "get_precisions"], [39, 3, 1, "", "get_quantization_capability"], [39, 3, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[41, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[42, 2, 1, "", "MXNetQuery"], [42, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MXNetQuery": [[42, 3, 1, "", "get_fuse_patterns"], [42, 3, 1, "", "get_mixed_precision_combination"], [42, 3, 1, "", "get_op_types"], [42, 3, 1, "", "get_precisions"], [42, 3, 1, "", "get_quantization_capability"], [42, 3, 1, "", "get_version"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[42, 3, 1, "", "evaluate"], [42, 3, 1, "", "inspect_tensor"], [42, 3, 1, "", "quantize"], [42, 3, 1, "", "query_fw_capability"], [42, 3, 1, "", "recover_tuned_model"], [42, 3, 1, "", "save"], [42, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[44, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[44, 2, 1, "", "CalibCollector"], [44, 2, 1, "", "OpType"], [44, 2, 1, "", "TensorCollector"], [44, 1, 1, "", "calib_model"], [44, 1, 1, "", "check_mx_version"], [44, 1, 1, "", "distribute_calib_tensors"], [44, 1, 1, "", "ensure_list"], [44, 1, 1, "", "fuse"], [44, 1, 1, "", "is_model_quantized"], [44, 1, 1, "", "isiterable"], [44, 1, 1, "", "make_module"], [44, 1, 1, "", "make_nc_model"], [44, 1, 1, "", "make_symbol_block"], [44, 1, 1, "", "parse_tune_config"], [44, 1, 1, "", "prepare_model_data"], [44, 1, 1, "", "quantize_sym_model"], [44, 1, 1, "", "query_quantizable_nodes"], [44, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[45, 2, 1, "", "ONNXRTQuery"], [45, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [45, 2, 1, "", "ONNXRT_QDQAdaptor"], [45, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [45, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[45, 3, 1, "", "get_graph_optimization"], [45, 3, 1, "", "get_op_types"], [45, 3, 1, "", "get_op_types_by_precision"], [45, 3, 1, "", "get_precisions"], [45, 3, 1, "", "get_quantization_capability"], [45, 3, 1, "", "get_version"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[45, 3, 1, "", "evaluate"], [45, 3, 1, "", "inspect_tensor"], [45, 3, 1, "", "quantize"], [45, 3, 1, "", "query_fw_capability"], [45, 3, 1, "", "recover"], [45, 3, 1, "", "save"], [45, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.ox_utils": [[46, 0, 0, "-", "calibration"], [59, 0, 0, "-", "operators"], [68, 0, 0, "-", "quantizer"], [69, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[46, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[46, 3, 1, "", "augment_graph"], [46, 3, 1, "", "calculate_quantization_params"], [46, 3, 1, "", "calculate_scale_zeropoint"], [46, 3, 1, "", "dump_calibration"], [46, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[48, 0, 0, "-", "activation"], [49, 0, 0, "-", "argmax"], [50, 0, 0, "-", "attention"], [51, 0, 0, "-", "binary_op"], [52, 0, 0, "-", "concat"], [53, 0, 0, "-", "conv"], [54, 0, 0, "-", "direct_q8"], [55, 0, 0, "-", "embed_layernorm"], [56, 0, 0, "-", "gather"], [57, 0, 0, "-", "gavgpool"], [58, 0, 0, "-", "gemm"], [60, 0, 0, "-", "lstm"], [61, 0, 0, "-", "matmul"], [62, 0, 0, "-", "maxpool"], [63, 0, 0, "-", "ops"], [64, 0, 0, "-", "pad"], [65, 0, 0, "-", "pooling"], [66, 0, 0, "-", "resize"], [67, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[63, 1, 1, "", "op_registry"], [63, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.util": [[69, 2, 1, "", "QuantFormat"], [69, 2, 1, "", "QuantType"], [69, 2, 1, "", "QuantizationMode"], [69, 2, 1, "", "QuantizedInitializer"], [69, 2, 1, "", "QuantizedValue"], [69, 2, 1, "", "QuantizedValueType"], [69, 1, 1, "", "attribute_to_kwarg"], [69, 1, 1, "", "cast_tensor"], [69, 1, 1, "", "find_by_name"], [69, 1, 1, "", "quantize_data"], [69, 1, 1, "", "quantize_data_with_scale_zero"]], "neural_compressor.adaptor.pytorch": [[70, 2, 1, "", "PyTorchAdaptor"], [70, 2, 1, "", "PyTorchQuery"], [70, 2, 1, "", "PyTorch_FXAdaptor"], [70, 2, 1, "", "PyTorch_IPEXAdaptor"], [70, 2, 1, "", "TemplateAdaptor"], [70, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[70, 3, 1, "", "evaluate"], [70, 3, 1, "", "get_non_quant_modules"], [70, 3, 1, "", "inspect_tensor"], [70, 3, 1, "", "is_fused_child"], [70, 3, 1, "", "is_fused_op"], [70, 3, 1, "", "is_last_fused_child"], [70, 3, 1, "", "quantize"], [70, 3, 1, "", "query_fw_capability"], [70, 3, 1, "", "save"], [70, 3, 1, "", "set_tensor"], [70, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[70, 3, 1, "", "get_op_types"], [70, 3, 1, "", "get_op_types_by_precision"], [70, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[70, 3, 1, "", "calculate_op_sensitivity"], [70, 3, 1, "", "convert_sub_graph"], [70, 3, 1, "", "evaluate"], [70, 3, 1, "", "fuse_fx_model"], [70, 3, 1, "", "prepare_sub_graph"], [70, 3, 1, "", "quantize"], [70, 3, 1, "", "query_fw_capability"], [70, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[70, 3, 1, "", "evaluate"], [70, 3, 1, "", "inspect_tensor"], [70, 3, 1, "", "quantize"], [70, 3, 1, "", "query_fw_capability"], [70, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[70, 3, 1, "", "calculate_hessian_trace"], [70, 3, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[71, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[71, 3, 1, "", "get_fuse_patterns"], [71, 3, 1, "", "get_mixed_precision_combination"], [71, 3, 1, "", "get_op_types"], [71, 3, 1, "", "get_precisions"], [71, 3, 1, "", "get_quantization_capability"], [71, 3, 1, "", "get_version"], [71, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[72, 2, 1, "", "TensorFlowAdaptor"], [72, 2, 1, "", "TensorflowQuery"], [72, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[72, 3, 1, "", "calculate_op_sensitivity"], [72, 3, 1, "", "convert"], [72, 3, 1, "", "evaluate"], [72, 3, 1, "", "fused_node_mapping"], [72, 3, 1, "", "get_optype_wise_ability"], [72, 3, 1, "", "inspect_activation"], [72, 3, 1, "", "inspect_tensor"], [72, 3, 1, "", "inspect_weight_and_bias"], [72, 3, 1, "", "qat_convert"], [72, 3, 1, "", "quantize"], [72, 3, 1, "", "quantize_input"], [72, 3, 1, "", "query_fw_capability"], [72, 3, 1, "", "recover_tuned_model"], [72, 3, 1, "", "save"], [72, 3, 1, "", "set_tensor"], [72, 3, 1, "", "tuning_cfg_to_fw"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[72, 3, 1, "", "generate_internal_patterns"], [72, 3, 1, "", "get_eightbit_patterns"], [72, 3, 1, "", "get_fuse_patterns"], [72, 3, 1, "", "get_mixed_precision_combination"], [72, 3, 1, "", "get_op_types"], [72, 3, 1, "", "get_op_types_by_precision"], [72, 3, 1, "", "get_precisions"], [72, 3, 1, "", "get_quantization_capability"], [72, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[72, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[73, 0, 0, "-", "graph_converter"], [74, 0, 0, "-", "graph_converter_without_calib"], [113, 0, 0, "-", "graph_rewriter"], [131, 0, 0, "-", "graph_util"], [133, 0, 0, "-", "quantize_graph"], [160, 0, 0, "-", "quantize_graph_common"], [163, 0, 0, "-", "transform_graph"], [166, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[76, 0, 0, "-", "bf16"], [101, 0, 0, "-", "generic"], [112, 0, 0, "-", "graph_base"], [121, 0, 0, "-", "int8"], [127, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[75, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[75, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[75, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[77, 0, 0, "-", "convert_add_to_biasadd"], [78, 0, 0, "-", "convert_layout"], [79, 0, 0, "-", "convert_leakyrelu"], [80, 0, 0, "-", "convert_nan_to_random"], [81, 0, 0, "-", "convert_placeholder_to_const"], [82, 0, 0, "-", "dequantize_cast_optimizer"], [83, 0, 0, "-", "dilated_contraction"], [84, 0, 0, "-", "dummy_biasadd"], [85, 0, 0, "-", "expanddims_optimizer"], [86, 0, 0, "-", "fetch_weight_from_reshape"], [87, 0, 0, "-", "fold_batch_norm"], [88, 0, 0, "-", "fold_constant"], [89, 0, 0, "-", "fuse_biasadd_add"], [90, 0, 0, "-", "fuse_column_wise_mul"], [91, 0, 0, "-", "fuse_conv_with_math"], [92, 0, 0, "-", "fuse_decomposed_bn"], [93, 0, 0, "-", "fuse_decomposed_in"], [94, 0, 0, "-", "fuse_gelu"], [95, 0, 0, "-", "fuse_layer_norm"], [96, 0, 0, "-", "fuse_pad_with_conv"], [97, 0, 0, "-", "fuse_pad_with_fp32_conv"], [98, 0, 0, "-", "fuse_reshape_transpose"], [99, 0, 0, "-", "graph_cse_optimizer"], [100, 0, 0, "-", "grappler_pass"], [102, 0, 0, "-", "insert_print_node"], [103, 0, 0, "-", "move_squeeze_after_relu"], [104, 0, 0, "-", "pre_optimize"], [105, 0, 0, "-", "remove_training_nodes"], [106, 0, 0, "-", "rename_batch_norm"], [107, 0, 0, "-", "split_shared_input"], [108, 0, 0, "-", "strip_equivalent_nodes"], [109, 0, 0, "-", "strip_unused_nodes"], [110, 0, 0, "-", "switch_optimizer"], [111, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[77, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[77, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[78, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[78, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[79, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[79, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[80, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[80, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[81, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[81, 3, 1, "", "do_transformation"], [81, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[82, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[82, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[83, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[83, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[84, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[84, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[85, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[85, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[86, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[86, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[87, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[87, 3, 1, "", "do_transformation"], [87, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[88, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[88, 3, 1, "", "check_all_folded"], [88, 3, 1, "", "check_const_inputs"], [88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[89, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[89, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[90, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[90, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[91, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[91, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[92, 1, 1, "", "get_const_dim_count"], [92, 1, 1, "", "node_from_map"], [92, 1, 1, "", "node_name_from_input"], [92, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[93, 1, 1, "", "get_const_dim_count"], [93, 1, 1, "", "node_from_map"], [93, 1, 1, "", "node_name_from_input"], [93, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[94, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[94, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[95, 2, 1, "", "FuseLayerNormOptimizer"], [95, 1, 1, "", "node_from_map"], [95, 1, 1, "", "node_name_from_input"], [95, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[95, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[96, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[96, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[97, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[97, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[98, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[98, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[99, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[99, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[100, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[100, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[102, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[102, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[103, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[103, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[105, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[105, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[106, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[106, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[107, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[107, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[108, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[108, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[109, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[109, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[110, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[110, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[111, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[111, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[112, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[112, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[114, 0, 0, "-", "freeze_fake_quant"], [115, 0, 0, "-", "freeze_value"], [116, 0, 0, "-", "freeze_value_without_calib"], [117, 0, 0, "-", "fuse_conv_redundant_dequantize"], [118, 0, 0, "-", "fuse_conv_requantize"], [119, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [120, 0, 0, "-", "fuse_matmul_requantize"], [122, 0, 0, "-", "meta_op_optimizer"], [123, 0, 0, "-", "post_hostconst_converter"], [124, 0, 0, "-", "post_quantized_op_cse"], [125, 0, 0, "-", "rnn_convert"], [126, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[114, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[114, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[115, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[115, 3, 1, "", "do_transformation"], [115, 3, 1, "", "generate_output_graph"], [115, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[116, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[116, 3, 1, "", "generate_output_graph"], [116, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[117, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[117, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[118, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[118, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[119, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[119, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[120, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [120, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [120, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [120, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[120, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[120, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[120, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[120, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[122, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[122, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[123, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[123, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[124, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[124, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[125, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[125, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[126, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[126, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[128, 0, 0, "-", "insert_qdq_pattern"], [129, 0, 0, "-", "merge_duplicated_qdq"], [130, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[128, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[128, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[129, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[129, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[130, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[130, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[131, 2, 1, "", "GraphAnalyzer"], [131, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[131, 3, 1, "", "add_node"], [131, 3, 1, "", "dump_graph"], [131, 3, 1, "", "get_graph_input_output"], [131, 4, 1, "", "graph"], [131, 3, 1, "", "has_positive_input"], [131, 3, 1, "", "parse_graph"], [131, 3, 1, "", "query_fusion_pattern_nodes"], [131, 3, 1, "", "remove_node"], [131, 3, 1, "", "remove_node_with_single_input_output"], [131, 3, 1, "", "replace_const_node"], [131, 3, 1, "", "replace_constant_graph_with_constant_node"], [131, 3, 1, "", "replace_node"], [131, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[131, 3, 1, "", "compare_node_attr"], [131, 3, 1, "", "create_constant_node"], [131, 3, 1, "", "create_node"], [131, 3, 1, "", "node_name_from_input"], [131, 3, 1, "", "set_attr_bool"], [131, 3, 1, "", "set_attr_dtype"], [131, 3, 1, "", "set_attr_float"], [131, 3, 1, "", "set_attr_int"], [131, 3, 1, "", "set_attr_int_list"], [131, 3, 1, "", "set_attr_string"], [131, 3, 1, "", "set_attr_string_list"], [131, 3, 1, "", "set_attr_tensor"], [131, 3, 1, "", "set_attr_type_list"], [131, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[135, 0, 0, "-", "qat"], [151, 0, 0, "-", "qdq"], [153, 0, 0, "-", "quantize_graph_base"], [154, 0, 0, "-", "quantize_graph_bn"], [155, 0, 0, "-", "quantize_graph_concatv2"], [156, 0, 0, "-", "quantize_graph_conv"], [157, 0, 0, "-", "quantize_graph_for_intel_cpu"], [158, 0, 0, "-", "quantize_graph_matmul"], [159, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[134, 0, 0, "-", "fake_quantize"], [136, 0, 0, "-", "quantize_config"], [137, 0, 0, "-", "quantize_helper"], [138, 0, 0, "-", "quantize_layers"], [143, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[134, 2, 1, "", "FakeQuantize"], [134, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[134, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[134, 3, 1, "", "from_config"], [134, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[136, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[136, 3, 1, "", "add_quantize_recipe"], [136, 3, 1, "", "clear_quantize_recipe"], [136, 3, 1, "", "get_quantize_recipe"], [136, 3, 1, "", "is_empty"], [136, 3, 1, "", "query_layer"], [136, 3, 1, "", "remove_layer"], [136, 3, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[137, 1, 1, "", "init_quantize_config"], [137, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[139, 0, 0, "-", "optimize_layer"], [140, 0, 0, "-", "quantize_layer_add"], [141, 0, 0, "-", "quantize_layer_base"], [142, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[140, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[142, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[143, 2, 1, "", "QuantizeWrapper"], [143, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[143, 3, 1, "", "build"], [143, 3, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[143, 3, 1, "", "build"], [143, 3, 1, "", "call"], [143, 3, 1, "", "compute_output_shape"], [143, 3, 1, "", "from_config"], [143, 3, 1, "", "get_config"], [143, 4, 1, "", "losses"], [143, 4, 1, "", "non_trainable_weights"], [143, 3, 1, "", "query_input_index"], [143, 4, 1, "", "trainable"], [143, 4, 1, "", "trainable_weights"], [143, 4, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[144, 0, 0, "-", "fuse_qdq_bn"], [145, 0, 0, "-", "fuse_qdq_concatv2"], [146, 0, 0, "-", "fuse_qdq_conv"], [147, 0, 0, "-", "fuse_qdq_deconv"], [148, 0, 0, "-", "fuse_qdq_in"], [149, 0, 0, "-", "fuse_qdq_matmul"], [150, 0, 0, "-", "fuse_qdq_pooling"], [152, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[144, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[144, 3, 1, "", "apply_the_transform"], [144, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[145, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[145, 3, 1, "", "apply_the_transform"], [145, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[146, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[146, 3, 1, "", "apply_the_transform"], [146, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[147, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[147, 3, 1, "", "apply_the_transform"], [147, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[148, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[148, 3, 1, "", "apply_the_transform"], [148, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[149, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[149, 3, 1, "", "apply_batchmatmulv2_fusion"], [149, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [149, 3, 1, "", "apply_matmul_biasadd_fusion"], [149, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [149, 3, 1, "", "apply_the_transform"], [149, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[150, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[150, 3, 1, "", "apply_the_transform"], [150, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[152, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[152, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[153, 2, 1, "", "QuantizeGraphBase"], [153, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[153, 3, 1, "", "do_transform"], [153, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[153, 3, 1, "", "add_output_graph_node"], [153, 3, 1, "", "apply_the_transform"], [153, 3, 1, "", "create_nodes_map"], [153, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[154, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[154, 3, 1, "", "apply_the_transform"], [154, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[155, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[155, 3, 1, "", "apply_the_transform"], [155, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[156, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[156, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [156, 3, 1, "", "apply_the_transform"], [156, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[157, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[157, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[158, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[158, 3, 1, "", "apply_the_transform"], [158, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[159, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[159, 3, 1, "", "apply_the_transform"], [159, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[160, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[160, 3, 1, "", "copy_attr"], [160, 3, 1, "", "create_constant_node"], [160, 3, 1, "", "create_node"], [160, 3, 1, "", "ensure_tensor_name_has_port"], [160, 3, 1, "", "get_sorted_graph"], [160, 3, 1, "", "node_name_from_input"], [160, 3, 1, "", "remove_training_nodes"], [160, 3, 1, "", "set_attr_bool"], [160, 3, 1, "", "set_attr_dtype"], [160, 3, 1, "", "set_attr_float"], [160, 3, 1, "", "set_attr_int"], [160, 3, 1, "", "set_attr_string"], [160, 3, 1, "", "set_attr_string_list"], [160, 3, 1, "", "set_attr_tensor"], [160, 3, 1, "", "set_attr_type_list"], [160, 3, 1, "", "split_shared_inputs"], [160, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[161, 0, 0, "-", "bias_correction"], [162, 0, 0, "-", "graph_transform_base"], [164, 0, 0, "-", "insert_logging"], [165, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[161, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[161, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[164, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[164, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[165, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[165, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[166, 1, 1, "", "disable_random"], [166, 1, 1, "", "get_tensor_by_name"], [166, 1, 1, "", "get_tensor_val_from_graph_node"], [166, 1, 1, "", "is_ckpt_format"], [166, 1, 1, "", "is_saved_model_format"], [166, 1, 1, "", "iterator_sess_run"], [166, 1, 1, "", "read_graph"], [166, 1, 1, "", "strip_equivalent_nodes"], [166, 1, 1, "", "strip_unused_nodes"], [166, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[167, 0, 0, "-", "bf16_convert"], [168, 0, 0, "-", "hawq_metric"], [170, 0, 0, "-", "onnx"], [171, 0, 0, "-", "symbolic_trace"], [172, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[168, 2, 1, "", "HessianTrace"], [168, 1, 1, "", "compare_weights"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[168, 3, 1, "", "get_act_gap"], [168, 3, 1, "", "get_avg_traces"], [168, 3, 1, "", "is_fused_module"], [168, 3, 1, "", "mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.util": [[172, 1, 1, "", "append_attr"], [172, 1, 1, "", "get_embedding_contiguous"], [172, 1, 1, "", "get_mse_order_per_fp32"], [172, 1, 1, "", "is_fused_module"]], "neural_compressor.algorithm": [[175, 2, 1, "", "Algorithm"], [175, 2, 1, "", "AlgorithmScheduler"], [173, 0, 0, "-", "algorithm"], [175, 1, 1, "", "algorithm_registry"], [174, 0, 0, "-", "fast_bias_correction"], [176, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[173, 2, 1, "", "Algorithm"], [173, 2, 1, "", "AlgorithmScheduler"], [173, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[174, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[176, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[177, 2, 1, "", "Benchmark"], [177, 1, 1, "", "fit"]], "neural_compressor.conf": [[178, 0, 0, "-", "config"], [179, 0, 0, "-", "dotdict"], [181, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[178, 2, 1, "", "Benchmark_Conf"], [178, 2, 1, "", "Conf"], [178, 2, 1, "", "DefaultConf"], [178, 2, 1, "", "Distillation_Conf"], [178, 2, 1, "", "Graph_Optimization_Conf"], [178, 2, 1, "", "MixedPrecision_Conf"], [178, 2, 1, "", "NASConfig"], [178, 2, 1, "", "PrunerV2"], [178, 2, 1, "", "Pruning_Conf"], [178, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[179, 2, 1, "", "DotDict"], [179, 1, 1, "", "deep_get"], [179, 1, 1, "", "deep_set"]], "neural_compressor.config": [[182, 2, 1, "", "DistillationConfig"], [182, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[184, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[185, 0, 0, "-", "sigopt"], [186, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[185, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[185, 3, 1, "", "next_tune_cfg"], [185, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[186, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[186, 3, 1, "", "stop"], [186, 3, 1, "", "traverse"]], "neural_compressor.data": [[208, 2, 1, "", "BaseTransform"], [208, 2, 1, "", "DataLoader"], [208, 2, 1, "", "Dataset"], [208, 2, 1, "", "Datasets"], [208, 2, 1, "", "FILTERS"], [208, 2, 1, "", "Filter"], [208, 2, 1, "", "IterableDataset"], [208, 2, 1, "", "Postprocess"], [208, 2, 1, "", "TRANSFORMS"], [191, 0, 0, "-", "dataloaders"], [208, 1, 1, "", "dataset_registry"], [203, 0, 0, "-", "datasets"], [208, 1, 1, "", "filter_registry"], [207, 0, 0, "-", "filters"], [208, 1, 1, "", "transform_registry"], [211, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[208, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[191, 2, 1, "", "DataLoader"], [187, 0, 0, "-", "base_dataloader"], [188, 0, 0, "-", "dataloader"], [189, 0, 0, "-", "default_dataloader"], [190, 0, 0, "-", "fetcher"], [192, 0, 0, "-", "mxnet_dataloader"], [193, 0, 0, "-", "onnxrt_dataloader"], [194, 0, 0, "-", "pytorch_dataloader"], [195, 0, 0, "-", "sampler"], [196, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[187, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[187, 3, 1, "", "batch"], [187, 4, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[188, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[189, 2, 1, "", "DefaultDataLoader"], [189, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[189, 3, 1, "", "batch"], [189, 4, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[190, 2, 1, "", "Fetcher"], [190, 2, 1, "", "IndexFetcher"], [190, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[192, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[193, 2, 1, "", "ONNXRTBertDataLoader"], [193, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[194, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[195, 2, 1, "", "BatchSampler"], [195, 2, 1, "", "IterableSampler"], [195, 2, 1, "", "Sampler"], [195, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[196, 2, 1, "", "TFDataDataLoader"], [196, 2, 1, "", "TensorflowBertDataLoader"], [196, 2, 1, "", "TensorflowDataLoader"], [196, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[196, 3, 1, "", "batch"]], "neural_compressor.data.datasets": [[203, 2, 1, "", "Dataset"], [203, 2, 1, "", "Datasets"], [203, 2, 1, "", "IterableDataset"], [197, 0, 0, "-", "bert_dataset"], [198, 0, 0, "-", "coco_dataset"], [199, 0, 0, "-", "dataset"], [203, 1, 1, "", "dataset_registry"], [200, 0, 0, "-", "dummy_dataset"], [201, 0, 0, "-", "dummy_dataset_v2"], [202, 0, 0, "-", "imagenet_dataset"], [204, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[197, 2, 1, "", "InputFeatures"], [197, 2, 1, "", "ONNXRTBertDataset"], [197, 2, 1, "", "ParseDecodeBert"], [197, 2, 1, "", "PytorchBertDataset"], [197, 2, 1, "", "TensorflowBertDataset"], [197, 2, 1, "", "TensorflowModelZooBertDataset"], [197, 1, 1, "", "convert_examples_to_features"], [197, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[197, 3, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[198, 2, 1, "", "COCONpy"], [198, 2, 1, "", "COCORaw"], [198, 2, 1, "", "COCORecordDataset"], [198, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[199, 2, 1, "", "CIFAR10"], [199, 2, 1, "", "CIFAR100"], [199, 2, 1, "", "Dataset"], [199, 2, 1, "", "Datasets"], [199, 2, 1, "", "FashionMNIST"], [199, 2, 1, "", "ImageFolder"], [199, 2, 1, "", "IterableDataset"], [199, 2, 1, "", "MNIST"], [199, 2, 1, "", "MXNetCIFAR10"], [199, 2, 1, "", "MXNetCIFAR100"], [199, 2, 1, "", "MXNetDatasets"], [199, 2, 1, "", "MXNetFashionMNIST"], [199, 2, 1, "", "MXNetImageFolder"], [199, 2, 1, "", "MXNetMNIST"], [199, 2, 1, "", "ONNXRTITDatasets"], [199, 2, 1, "", "ONNXRTQLDatasets"], [199, 2, 1, "", "PyTorchDatasets"], [199, 2, 1, "", "PytorchCIFAR10"], [199, 2, 1, "", "PytorchCIFAR100"], [199, 2, 1, "", "PytorchFashionMNIST"], [199, 2, 1, "", "PytorchMNIST"], [199, 2, 1, "", "PytorchMxnetWrapDataset"], [199, 2, 1, "", "PytorchMxnetWrapFunction"], [199, 2, 1, "", "TensorflowCIFAR10"], [199, 2, 1, "", "TensorflowCIFAR100"], [199, 2, 1, "", "TensorflowDatasets"], [199, 2, 1, "", "TensorflowFashionMNIST"], [199, 2, 1, "", "TensorflowImageFolder"], [199, 2, 1, "", "TensorflowImageRecord"], [199, 2, 1, "", "TensorflowMNIST"], [199, 2, 1, "", "TensorflowTFRecordDataset"], [199, 2, 1, "", "TensorflowVOCRecord"], [199, 1, 1, "", "calculate_md5"], [199, 1, 1, "", "check_integrity"], [199, 1, 1, "", "dataset_registry"], [199, 1, 1, "", "download_url"], [199, 5, 1, "", "framework_datasets"], [199, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[199, 3, 1, "", "download"], [199, 3, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[199, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[199, 4, 1, "", "class_to_idx"], [199, 3, 1, "", "download"], [199, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[200, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[201, 2, 1, "", "DummyDataset"], [201, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[202, 2, 1, "", "ImagenetRaw"], [202, 2, 1, "", "MXNetImagenetRaw"], [202, 2, 1, "", "ONNXRTImagenetDataset"], [202, 2, 1, "", "PytorchImagenetRaw"], [202, 2, 1, "", "TensorflowImagenetDataset"], [202, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[204, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[207, 2, 1, "", "FILTERS"], [207, 2, 1, "", "Filter"], [205, 0, 0, "-", "coco_filter"], [206, 0, 0, "-", "filter"], [207, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[205, 2, 1, "", "LabelBalanceCOCORawFilter"], [205, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[206, 2, 1, "", "FILTERS"], [206, 2, 1, "", "Filter"], [206, 2, 1, "", "MXNetFilters"], [206, 2, 1, "", "ONNXRTITFilters"], [206, 2, 1, "", "ONNXRTQLFilters"], [206, 2, 1, "", "PyTorchFilters"], [206, 2, 1, "", "TensorflowFilters"], [206, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[211, 2, 1, "", "BaseTransform"], [211, 2, 1, "", "Postprocess"], [211, 2, 1, "", "TRANSFORMS"], [209, 0, 0, "-", "coco_transform"], [210, 0, 0, "-", "imagenet_transform"], [212, 0, 0, "-", "postprocess"], [213, 0, 0, "-", "tokenization"], [214, 0, 0, "-", "transform"], [211, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TRANSFORMS": [[211, 3, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[209, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[210, 2, 1, "", "BilinearImagenetTransform"], [210, 2, 1, "", "LabelShift"], [210, 2, 1, "", "ONNXResizeCropImagenetTransform"], [210, 2, 1, "", "OnnxBilinearImagenetTransform"], [210, 2, 1, "", "ParseDecodeImagenet"], [210, 2, 1, "", "ParseDecodeImagenetTransform"], [210, 2, 1, "", "QuantizedInput"], [210, 2, 1, "", "ResizeWithAspectRatio"], [210, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[212, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[213, 2, 1, "", "BasicTokenizer"], [213, 2, 1, "", "FullTokenizer"], [213, 2, 1, "", "WordpieceTokenizer"], [213, 1, 1, "", "convert_by_vocab"], [213, 1, 1, "", "convert_to_unicode"], [213, 1, 1, "", "load_vocab"], [213, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[213, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[213, 3, 1, "", "convert_ids_to_tokens"], [213, 3, 1, "", "convert_tokens_to_ids"], [213, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[213, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[214, 2, 1, "", "AlignImageChannelTransform"], [214, 2, 1, "", "BaseTransform"], [214, 2, 1, "", "CastONNXTransform"], [214, 2, 1, "", "CastPyTorchTransform"], [214, 2, 1, "", "CastTFTransform"], [214, 2, 1, "", "CenterCropTFTransform"], [214, 2, 1, "", "CenterCropTransform"], [214, 2, 1, "", "CollectTransform"], [214, 2, 1, "", "ComposeTransform"], [214, 2, 1, "", "CropResizeTFTransform"], [214, 2, 1, "", "CropResizeTransform"], [214, 2, 1, "", "CropToBoundingBox"], [214, 2, 1, "", "InputFeatures"], [214, 2, 1, "", "MXNetCropResizeTransform"], [214, 2, 1, "", "MXNetCropToBoundingBox"], [214, 2, 1, "", "MXNetNormalizeTransform"], [214, 2, 1, "", "MXNetTransforms"], [214, 2, 1, "", "MXNetTranspose"], [214, 2, 1, "", "NormalizeTFTransform"], [214, 2, 1, "", "NormalizeTransform"], [214, 2, 1, "", "ONNXRTCropToBoundingBox"], [214, 2, 1, "", "ONNXRTITTransforms"], [214, 2, 1, "", "ONNXRTQLTransforms"], [214, 2, 1, "", "PaddedCenterCropTransform"], [214, 2, 1, "", "ParseDecodeVocTransform"], [214, 2, 1, "", "PyTorchAlignImageChannel"], [214, 2, 1, "", "PyTorchCropResizeTransform"], [214, 2, 1, "", "PyTorchNormalizeTransform"], [214, 2, 1, "", "PyTorchTransforms"], [214, 2, 1, "", "PyTorchTranspose"], [214, 2, 1, "", "PytorchMxnetTransform"], [214, 2, 1, "", "PytorchMxnetWrapFunction"], [214, 2, 1, "", "RandomCropTFTransform"], [214, 2, 1, "", "RandomCropTransform"], [214, 2, 1, "", "RandomHorizontalFlip"], [214, 2, 1, "", "RandomResizedCropMXNetTransform"], [214, 2, 1, "", "RandomResizedCropPytorchTransform"], [214, 2, 1, "", "RandomResizedCropTFTransform"], [214, 2, 1, "", "RandomResizedCropTransform"], [214, 2, 1, "", "RandomVerticalFlip"], [214, 2, 1, "", "RescaleKerasPretrainTransform"], [214, 2, 1, "", "RescaleTFTransform"], [214, 2, 1, "", "RescaleTransform"], [214, 2, 1, "", "ResizeMXNetTransform"], [214, 2, 1, "", "ResizePytorchTransform"], [214, 2, 1, "", "ResizeTFTransform"], [214, 2, 1, "", "ResizeTransform"], [214, 2, 1, "", "ResizeWithRatio"], [214, 2, 1, "", "SquadExample"], [214, 2, 1, "", "TFModelZooCollectTransform"], [214, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [214, 2, 1, "", "TFSquadV1PostTransform"], [214, 2, 1, "", "TRANSFORMS"], [214, 2, 1, "", "TensorflowCropToBoundingBox"], [214, 2, 1, "", "TensorflowRandomHorizontalFlip"], [214, 2, 1, "", "TensorflowRandomVerticalFlip"], [214, 2, 1, "", "TensorflowResizeWithRatio"], [214, 2, 1, "", "TensorflowTransform"], [214, 2, 1, "", "TensorflowTransforms"], [214, 2, 1, "", "TensorflowTranspose"], [214, 2, 1, "", "TensorflowWrapFunction"], [214, 2, 1, "", "ToArray"], [214, 2, 1, "", "ToNDArrayTransform"], [214, 2, 1, "", "Transforms"], [214, 2, 1, "", "Transpose"], [214, 1, 1, "", "convert_examples_to_features"], [214, 1, 1, "", "get_final_text"], [214, 1, 1, "", "get_torchvision_map"], [214, 1, 1, "", "read_squad_examples"], [214, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[214, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[214, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[214, 3, 1, "", "get_postprocess_result"], [214, 3, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[214, 3, 1, "", "register"]], "neural_compressor.experimental": [[257, 2, 1, "", "Benchmark"], [257, 2, 1, "", "Component"], [257, 2, 1, "", "Distillation"], [257, 2, 1, "", "Graph_Optimization"], [257, 2, 1, "", "MixedPrecision"], [257, 2, 1, "", "ModelConversion"], [257, 2, 1, "", "NAS"], [257, 2, 1, "", "Pruning"], [257, 2, 1, "", "Quantization"], [215, 0, 0, "-", "benchmark"], [218, 0, 0, "-", "common"], [224, 0, 0, "-", "component"], [246, 0, 0, "-", "data"], [251, 0, 0, "-", "distillation"], [252, 0, 0, "-", "export"], [256, 0, 0, "-", "graph_optimization"], [264, 0, 0, "-", "metric"], [266, 0, 0, "-", "mixed_precision"], [267, 0, 0, "-", "model_conversion"], [280, 0, 0, "-", "nas"], [284, 0, 0, "-", "pruning"], [285, 0, 0, "-", "pruning_recipes"], [289, 0, 0, "-", "pruning_v2"], [290, 0, 0, "-", "pytorch_pruner"], [297, 0, 0, "-", "quantization"], [298, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[257, 4, 1, "", "b_dataloader"], [257, 4, 1, "", "b_func"], [257, 3, 1, "", "config_instance"], [257, 3, 1, "", "generate_prefix"], [257, 4, 1, "", "metric"], [257, 4, 1, "", "model"], [257, 4, 1, "", "postprocess"], [257, 4, 1, "", "results"], [257, 3, 1, "", "run_instance"], [257, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[257, 4, 1, "", "eval_dataloader"], [257, 4, 1, "", "eval_func"], [257, 3, 1, "", "execute"], [257, 4, 1, "", "model"], [257, 3, 1, "", "on_after_compute_loss"], [257, 3, 1, "", "on_after_eval"], [257, 3, 1, "", "on_after_optimizer_step"], [257, 3, 1, "", "on_batch_begin"], [257, 3, 1, "", "on_batch_end"], [257, 3, 1, "", "on_before_eval"], [257, 3, 1, "", "on_before_optimizer_step"], [257, 3, 1, "", "on_epoch_begin"], [257, 3, 1, "", "on_epoch_end"], [257, 3, 1, "", "on_post_grad"], [257, 3, 1, "", "on_step_begin"], [257, 3, 1, "", "on_step_end"], [257, 3, 1, "", "on_train_begin"], [257, 3, 1, "", "on_train_end"], [257, 3, 1, "", "post_epoch_end"], [257, 3, 1, "", "post_process"], [257, 3, 1, "", "pre_epoch_begin"], [257, 3, 1, "", "pre_process"], [257, 3, 1, "", "prepare"], [257, 3, 1, "", "prepare_qat"], [257, 3, 1, "", "register_hook"], [257, 4, 1, "", "train_dataloader"], [257, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[257, 6, 1, "", "_epoch_ran"], [257, 6, 1, "", "best_model"], [257, 6, 1, "", "best_score"], [257, 3, 1, "", "create_criterion"], [257, 3, 1, "", "create_optimizer"], [257, 4, 1, "", "criterion"], [257, 6, 1, "", "eval_frequency"], [257, 4, 1, "", "evaluation_distributed"], [257, 3, 1, "", "execute"], [257, 3, 1, "", "generate_hooks"], [257, 3, 1, "", "init_train_cfg"], [257, 3, 1, "", "on_post_forward"], [257, 4, 1, "", "optimizer"], [257, 3, 1, "", "pre_process"], [257, 3, 1, "", "prepare"], [257, 4, 1, "", "student_model"], [257, 4, 1, "", "teacher_model"], [257, 4, 1, "", "train_cfg"], [257, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[257, 3, 1, "", "dataset"], [257, 4, 1, "", "eval_dataloader"], [257, 4, 1, "", "eval_func"], [257, 4, 1, "", "input"], [257, 4, 1, "", "metric"], [257, 4, 1, "", "model"], [257, 4, 1, "", "output"], [257, 4, 1, "", "postprocess"], [257, 4, 1, "", "precisions"], [257, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[257, 4, 1, "", "precisions"], [257, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[257, 3, 1, "", "dataset"], [257, 4, 1, "", "destination"], [257, 4, 1, "", "eval_dataloader"], [257, 4, 1, "", "eval_func"], [257, 4, 1, "", "metric"], [257, 4, 1, "", "model"], [257, 4, 1, "", "postprocess"], [257, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[257, 6, 1, "", "conf"], [257, 4, 1, "", "evaluation_distributed"], [257, 3, 1, "", "execute"], [257, 3, 1, "", "generate_hooks"], [257, 3, 1, "", "generate_pruners"], [257, 3, 1, "", "get_sparsity_ratio"], [257, 3, 1, "", "pre_process"], [257, 3, 1, "", "prepare"], [257, 6, 1, "", "pruners"], [257, 4, 1, "", "pruning_func"], [257, 4, 1, "", "train_distributed"], [257, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.Quantization": [[257, 4, 1, "", "calib_dataloader"], [257, 3, 1, "", "dataset"], [257, 3, 1, "", "execute"], [257, 4, 1, "", "metric"], [257, 4, 1, "", "model"], [257, 4, 1, "", "objective"], [257, 4, 1, "", "postprocess"], [257, 3, 1, "", "pre_process"], [257, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[215, 2, 1, "", "Benchmark"], [215, 1, 1, "", "get_architecture"], [215, 1, 1, "", "get_bounded_threads"], [215, 1, 1, "", "get_core_ids"], [215, 1, 1, "", "get_physical_ids"], [215, 1, 1, "", "get_threads"], [215, 1, 1, "", "get_threads_per_core"], [215, 1, 1, "", "set_all_env_var"], [215, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[215, 4, 1, "", "b_dataloader"], [215, 4, 1, "", "b_func"], [215, 3, 1, "", "config_instance"], [215, 3, 1, "", "generate_prefix"], [215, 4, 1, "", "metric"], [215, 4, 1, "", "model"], [215, 4, 1, "", "postprocess"], [215, 4, 1, "", "results"], [215, 3, 1, "", "run_instance"], [215, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[218, 2, 1, "", "DataLoader"], [218, 2, 1, "", "Metric"], [218, 2, 1, "", "Model"], [218, 2, 1, "", "Postprocess"], [216, 0, 0, "-", "criterion"], [217, 0, 0, "-", "dataloader"], [219, 0, 0, "-", "metric"], [220, 0, 0, "-", "model"], [221, 0, 0, "-", "optimizer"], [222, 0, 0, "-", "postprocess"], [223, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[216, 2, 1, "", "Criterions"], [216, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [216, 2, 1, "", "KnowledgeDistillationFramework"], [216, 2, 1, "", "KnowledgeDistillationLoss"], [216, 2, 1, "", "PyTorchCriterions"], [216, 2, 1, "", "PyTorchCrossEntropyLoss"], [216, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [216, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [216, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [216, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [216, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [216, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [216, 2, 1, "", "SelfKnowledgeDistillationLoss"], [216, 2, 1, "", "TensorFlowCrossEntropyLoss"], [216, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [216, 2, 1, "", "TensorflowCriterions"], [216, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [216, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [216, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [216, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[216, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[216, 3, 1, "", "clear_features"], [216, 3, 1, "", "init_feature_matcher"], [216, 3, 1, "", "init_loss_funcs"], [216, 3, 1, "", "loss_cal"], [216, 3, 1, "", "loss_cal_sloss"], [216, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[216, 4, 1, "", "student_model"], [216, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[216, 3, 1, "", "loss_cal"], [216, 3, 1, "", "loss_cal_sloss"], [216, 3, 1, "", "student_targets_loss_cal"], [216, 3, 1, "", "teacher_model_forward"], [216, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[216, 3, 1, "", "init_feature_matcher"], [216, 3, 1, "", "init_loss_funcs"], [216, 3, 1, "", "loss_cal"], [216, 3, 1, "", "loss_cal_sloss"], [216, 3, 1, "", "register_hooks_for_models"], [216, 3, 1, "", "remove_all_hooks"], [216, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[216, 3, 1, "", "KullbackLeiblerDivergence"], [216, 3, 1, "", "SoftCrossEntropy"], [216, 3, 1, "", "student_targets_loss_cal"], [216, 3, 1, "", "teacher_model_forward"], [216, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[216, 3, 1, "", "KullbackLeiblerDivergence"], [216, 3, 1, "", "L2Divergence"], [216, 3, 1, "", "SoftCrossEntropy"], [216, 3, 1, "", "init_loss_funcs"], [216, 3, 1, "", "loss_cal"], [216, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[216, 3, 1, "", "init_loss_funcs"], [216, 3, 1, "", "loss_cal"], [216, 3, 1, "", "loss_cal_sloss"], [216, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[216, 3, 1, "", "SoftCrossEntropy"], [216, 3, 1, "", "student_targets_loss_cal"], [216, 3, 1, "", "teacher_model_forward"], [216, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[216, 3, 1, "", "student_targets_loss_cal"], [216, 3, 1, "", "teacher_model_forward"], [216, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[217, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[219, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[220, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[221, 2, 1, "", "Optimizers"], [221, 2, 1, "", "PyTorchOptimizers"], [221, 2, 1, "", "PyTorchSGD"], [221, 2, 1, "", "TensorFlowAdam"], [221, 2, 1, "", "TensorFlowAdamW"], [221, 2, 1, "", "TensorFlowSGD"], [221, 2, 1, "", "TensorflowOptimizers"], [221, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[221, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[222, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[223, 1, 1, "", "get_activation"], [223, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[224, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[224, 4, 1, "", "eval_dataloader"], [224, 4, 1, "", "eval_func"], [224, 3, 1, "", "execute"], [224, 4, 1, "", "model"], [224, 3, 1, "", "on_after_compute_loss"], [224, 3, 1, "", "on_after_eval"], [224, 3, 1, "", "on_after_optimizer_step"], [224, 3, 1, "", "on_batch_begin"], [224, 3, 1, "", "on_batch_end"], [224, 3, 1, "", "on_before_eval"], [224, 3, 1, "", "on_before_optimizer_step"], [224, 3, 1, "", "on_epoch_begin"], [224, 3, 1, "", "on_epoch_end"], [224, 3, 1, "", "on_post_grad"], [224, 3, 1, "", "on_step_begin"], [224, 3, 1, "", "on_step_end"], [224, 3, 1, "", "on_train_begin"], [224, 3, 1, "", "on_train_end"], [224, 3, 1, "", "post_epoch_end"], [224, 3, 1, "", "post_process"], [224, 3, 1, "", "pre_epoch_begin"], [224, 3, 1, "", "pre_process"], [224, 3, 1, "", "prepare"], [224, 3, 1, "", "prepare_qat"], [224, 3, 1, "", "register_hook"], [224, 4, 1, "", "train_dataloader"], [224, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[246, 2, 1, "", "BaseTransform"], [246, 2, 1, "", "Dataset"], [246, 2, 1, "", "Datasets"], [246, 2, 1, "", "FILTERS"], [246, 2, 1, "", "Filter"], [246, 2, 1, "", "IterableDataset"], [246, 2, 1, "", "TRANSFORMS"], [229, 0, 0, "-", "dataloaders"], [246, 1, 1, "", "dataset_registry"], [241, 0, 0, "-", "datasets"], [246, 1, 1, "", "filter_registry"], [245, 0, 0, "-", "filters"], [246, 1, 1, "", "transform_registry"], [248, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[246, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[225, 0, 0, "-", "base_dataloader"], [226, 0, 0, "-", "dataloader"], [227, 0, 0, "-", "default_dataloader"], [228, 0, 0, "-", "fetcher"], [230, 0, 0, "-", "mxnet_dataloader"], [231, 0, 0, "-", "onnxrt_dataloader"], [232, 0, 0, "-", "pytorch_dataloader"], [233, 0, 0, "-", "sampler"], [234, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[225, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[225, 3, 1, "", "batch"], [225, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[227, 2, 1, "", "DefaultDataLoader"], [227, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[227, 3, 1, "", "batch"], [227, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[228, 2, 1, "", "Fetcher"], [228, 2, 1, "", "IndexFetcher"], [228, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[230, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[231, 2, 1, "", "ONNXRTBertDataLoader"], [231, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[232, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[233, 2, 1, "", "BatchSampler"], [233, 2, 1, "", "IterableSampler"], [233, 2, 1, "", "Sampler"], [233, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[234, 2, 1, "", "TFDataDataLoader"], [234, 2, 1, "", "TensorflowBertDataLoader"], [234, 2, 1, "", "TensorflowDataLoader"], [234, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[234, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[241, 2, 1, "", "Dataset"], [241, 2, 1, "", "Datasets"], [241, 2, 1, "", "IterableDataset"], [235, 0, 0, "-", "bert_dataset"], [236, 0, 0, "-", "coco_dataset"], [237, 0, 0, "-", "dataset"], [241, 1, 1, "", "dataset_registry"], [238, 0, 0, "-", "dummy_dataset"], [239, 0, 0, "-", "dummy_dataset_v2"], [240, 0, 0, "-", "imagenet_dataset"], [242, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[235, 2, 1, "", "InputFeatures"], [235, 2, 1, "", "ONNXRTBertDataset"], [235, 2, 1, "", "ParseDecodeBert"], [235, 2, 1, "", "PytorchBertDataset"], [235, 2, 1, "", "TensorflowBertDataset"], [235, 2, 1, "", "TensorflowModelZooBertDataset"], [235, 1, 1, "", "convert_examples_to_features"], [235, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[235, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[236, 2, 1, "", "COCONpy"], [236, 2, 1, "", "COCORaw"], [236, 2, 1, "", "COCORecordDataset"], [236, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[237, 2, 1, "", "CIFAR10"], [237, 2, 1, "", "CIFAR100"], [237, 2, 1, "", "Dataset"], [237, 2, 1, "", "Datasets"], [237, 2, 1, "", "FashionMNIST"], [237, 2, 1, "", "ImageFolder"], [237, 2, 1, "", "IterableDataset"], [237, 2, 1, "", "MNIST"], [237, 2, 1, "", "MXNetCIFAR10"], [237, 2, 1, "", "MXNetCIFAR100"], [237, 2, 1, "", "MXNetDatasets"], [237, 2, 1, "", "MXNetFashionMNIST"], [237, 2, 1, "", "MXNetImageFolder"], [237, 2, 1, "", "MXNetMNIST"], [237, 2, 1, "", "ONNXRTITDatasets"], [237, 2, 1, "", "ONNXRTQLDatasets"], [237, 2, 1, "", "PyTorchDatasets"], [237, 2, 1, "", "PytorchCIFAR10"], [237, 2, 1, "", "PytorchCIFAR100"], [237, 2, 1, "", "PytorchFashionMNIST"], [237, 2, 1, "", "PytorchMNIST"], [237, 2, 1, "", "PytorchMxnetWrapDataset"], [237, 2, 1, "", "PytorchMxnetWrapFunction"], [237, 2, 1, "", "TensorflowCIFAR10"], [237, 2, 1, "", "TensorflowCIFAR100"], [237, 2, 1, "", "TensorflowDatasets"], [237, 2, 1, "", "TensorflowFashionMNIST"], [237, 2, 1, "", "TensorflowImageFolder"], [237, 2, 1, "", "TensorflowImageRecord"], [237, 2, 1, "", "TensorflowMNIST"], [237, 2, 1, "", "TensorflowTFRecordDataset"], [237, 2, 1, "", "TensorflowVOCRecord"], [237, 1, 1, "", "calculate_md5"], [237, 1, 1, "", "check_integrity"], [237, 1, 1, "", "dataset_registry"], [237, 1, 1, "", "download_url"], [237, 5, 1, "", "framework_datasets"], [237, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[237, 3, 1, "", "download"], [237, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[237, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[237, 4, 1, "", "class_to_idx"], [237, 3, 1, "", "download"], [237, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[238, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[239, 2, 1, "", "DummyDataset"], [239, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[240, 2, 1, "", "ImagenetRaw"], [240, 2, 1, "", "MXNetImagenetRaw"], [240, 2, 1, "", "ONNXRTImagenetDataset"], [240, 2, 1, "", "PytorchImagenetRaw"], [240, 2, 1, "", "TensorflowImagenetDataset"], [240, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[242, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[245, 2, 1, "", "FILTERS"], [245, 2, 1, "", "Filter"], [243, 0, 0, "-", "coco_filter"], [244, 0, 0, "-", "filter"], [245, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[243, 2, 1, "", "LabelBalanceCOCORawFilter"], [243, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[244, 2, 1, "", "FILTERS"], [244, 2, 1, "", "Filter"], [244, 2, 1, "", "MXNetFilters"], [244, 2, 1, "", "ONNXRTITFilters"], [244, 2, 1, "", "ONNXRTQLFilters"], [244, 2, 1, "", "PyTorchFilters"], [244, 2, 1, "", "TensorflowFilters"], [244, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[248, 2, 1, "", "BaseTransform"], [248, 2, 1, "", "TRANSFORMS"], [247, 0, 0, "-", "imagenet_transform"], [249, 0, 0, "-", "tokenization"], [250, 0, 0, "-", "transform"], [248, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[248, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[247, 2, 1, "", "BilinearImagenetTransform"], [247, 2, 1, "", "LabelShift"], [247, 2, 1, "", "ONNXResizeCropImagenetTransform"], [247, 2, 1, "", "OnnxBilinearImagenetTransform"], [247, 2, 1, "", "ParseDecodeImagenet"], [247, 2, 1, "", "ParseDecodeImagenetTransform"], [247, 2, 1, "", "QuantizedInput"], [247, 2, 1, "", "ResizeWithAspectRatio"], [247, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[249, 2, 1, "", "BasicTokenizer"], [249, 2, 1, "", "FullTokenizer"], [249, 2, 1, "", "WordpieceTokenizer"], [249, 1, 1, "", "convert_by_vocab"], [249, 1, 1, "", "convert_to_unicode"], [249, 1, 1, "", "load_vocab"], [249, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[249, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[249, 3, 1, "", "convert_ids_to_tokens"], [249, 3, 1, "", "convert_tokens_to_ids"], [249, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[249, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[250, 2, 1, "", "AlignImageChannelTransform"], [250, 2, 1, "", "BaseTransform"], [250, 2, 1, "", "CastONNXTransform"], [250, 2, 1, "", "CastPyTorchTransform"], [250, 2, 1, "", "CastTFTransform"], [250, 2, 1, "", "CenterCropTFTransform"], [250, 2, 1, "", "CenterCropTransform"], [250, 2, 1, "", "CollectTransform"], [250, 2, 1, "", "ComposeTransform"], [250, 2, 1, "", "CropResizeTFTransform"], [250, 2, 1, "", "CropResizeTransform"], [250, 2, 1, "", "CropToBoundingBox"], [250, 2, 1, "", "InputFeatures"], [250, 2, 1, "", "MXNetCropResizeTransform"], [250, 2, 1, "", "MXNetCropToBoundingBox"], [250, 2, 1, "", "MXNetNormalizeTransform"], [250, 2, 1, "", "MXNetTransforms"], [250, 2, 1, "", "MXNetTranspose"], [250, 2, 1, "", "NormalizeTFTransform"], [250, 2, 1, "", "NormalizeTransform"], [250, 2, 1, "", "ONNXRTCropToBoundingBox"], [250, 2, 1, "", "ONNXRTITTransforms"], [250, 2, 1, "", "ONNXRTQLTransforms"], [250, 2, 1, "", "PaddedCenterCropTransform"], [250, 2, 1, "", "ParseDecodeVocTransform"], [250, 2, 1, "", "PyTorchAlignImageChannel"], [250, 2, 1, "", "PyTorchCropResizeTransform"], [250, 2, 1, "", "PyTorchNormalizeTransform"], [250, 2, 1, "", "PyTorchTransforms"], [250, 2, 1, "", "PyTorchTranspose"], [250, 2, 1, "", "PytorchMxnetTransform"], [250, 2, 1, "", "PytorchMxnetWrapFunction"], [250, 2, 1, "", "RandomCropTFTransform"], [250, 2, 1, "", "RandomCropTransform"], [250, 2, 1, "", "RandomHorizontalFlip"], [250, 2, 1, "", "RandomResizedCropMXNetTransform"], [250, 2, 1, "", "RandomResizedCropPytorchTransform"], [250, 2, 1, "", "RandomResizedCropTFTransform"], [250, 2, 1, "", "RandomResizedCropTransform"], [250, 2, 1, "", "RandomVerticalFlip"], [250, 2, 1, "", "RescaleKerasPretrainTransform"], [250, 2, 1, "", "RescaleTFTransform"], [250, 2, 1, "", "RescaleTransform"], [250, 2, 1, "", "ResizeMXNetTransform"], [250, 2, 1, "", "ResizePytorchTransform"], [250, 2, 1, "", "ResizeTFTransform"], [250, 2, 1, "", "ResizeTransform"], [250, 2, 1, "", "ResizeWithRatio"], [250, 2, 1, "", "SquadExample"], [250, 2, 1, "", "TFModelZooCollectTransform"], [250, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [250, 2, 1, "", "TFSquadV1PostTransform"], [250, 2, 1, "", "TRANSFORMS"], [250, 2, 1, "", "TensorflowCropToBoundingBox"], [250, 2, 1, "", "TensorflowRandomHorizontalFlip"], [250, 2, 1, "", "TensorflowRandomVerticalFlip"], [250, 2, 1, "", "TensorflowResizeWithRatio"], [250, 2, 1, "", "TensorflowTransform"], [250, 2, 1, "", "TensorflowTransforms"], [250, 2, 1, "", "TensorflowTranspose"], [250, 2, 1, "", "TensorflowWrapFunction"], [250, 2, 1, "", "ToArray"], [250, 2, 1, "", "ToNDArrayTransform"], [250, 2, 1, "", "Transforms"], [250, 2, 1, "", "Transpose"], [250, 1, 1, "", "convert_examples_to_features"], [250, 1, 1, "", "get_final_text"], [250, 1, 1, "", "get_torchvision_map"], [250, 1, 1, "", "read_squad_examples"], [250, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[250, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[250, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[250, 3, 1, "", "get_postprocess_result"], [250, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[250, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[251, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[251, 6, 1, "", "_epoch_ran"], [251, 6, 1, "", "best_model"], [251, 6, 1, "", "best_score"], [251, 3, 1, "", "create_criterion"], [251, 3, 1, "", "create_optimizer"], [251, 4, 1, "", "criterion"], [251, 6, 1, "", "eval_frequency"], [251, 4, 1, "", "evaluation_distributed"], [251, 3, 1, "", "execute"], [251, 3, 1, "", "generate_hooks"], [251, 3, 1, "", "init_train_cfg"], [251, 3, 1, "", "on_post_forward"], [251, 4, 1, "", "optimizer"], [251, 3, 1, "", "pre_process"], [251, 3, 1, "", "prepare"], [251, 4, 1, "", "student_model"], [251, 4, 1, "", "teacher_model"], [251, 4, 1, "", "train_cfg"], [251, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[252, 1, 1, "", "onnx_qlinear_to_qdq"], [253, 0, 0, "-", "qlinear2qdq"], [254, 0, 0, "-", "torch2onnx"], [252, 1, 1, "", "torch_to_fp32_onnx"], [252, 1, 1, "", "torch_to_int8_onnx"], [255, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[253, 1, 1, "", "check_model"], [253, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.torch2onnx": [[254, 1, 1, "", "build_scale_mapping"], [254, 1, 1, "", "get_node_mapping"], [254, 1, 1, "", "get_quantizable_onnx_ops"], [254, 1, 1, "", "qdq_fp32_bias"], [254, 1, 1, "", "qdq_fp32_bias_qdq"], [254, 1, 1, "", "qdq_int32_bias"], [254, 1, 1, "", "recalculate_bias"], [254, 1, 1, "", "remove_nodes_by_name"], [254, 1, 1, "", "set_data_type"], [254, 1, 1, "", "set_scale_info"], [254, 1, 1, "", "sub_graph_with_int32_bias"], [254, 1, 1, "", "torch_to_fp32_onnx"], [254, 1, 1, "", "torch_to_int8_onnx"], [254, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[255, 2, 1, "", "DummyDataReader"], [255, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[255, 3, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[256, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[256, 3, 1, "", "dataset"], [256, 4, 1, "", "eval_dataloader"], [256, 4, 1, "", "eval_func"], [256, 4, 1, "", "input"], [256, 4, 1, "", "metric"], [256, 4, 1, "", "model"], [256, 4, 1, "", "output"], [256, 4, 1, "", "postprocess"], [256, 4, 1, "", "precisions"], [256, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[264, 2, 1, "", "BaseMetric"], [264, 2, 1, "", "METRICS"], [258, 0, 0, "-", "bleu"], [259, 0, 0, "-", "bleu_util"], [260, 0, 0, "-", "coco_label_map"], [261, 0, 0, "-", "coco_tools"], [262, 0, 0, "-", "evaluate_squad"], [263, 0, 0, "-", "f1"], [265, 0, 0, "-", "metric"], [264, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[264, 4, 1, "", "hvd"], [264, 4, 1, "", "metric"], [264, 3, 1, "", "reset"], [264, 3, 1, "", "result"], [264, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[264, 6, 1, "", "metrics"], [264, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[258, 2, 1, "", "BLEU"], [258, 2, 1, "", "UnicodeRegex"], [258, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[258, 6, 1, "", "labels"], [258, 6, 1, "", "predictions"], [258, 3, 1, "", "reset"], [258, 3, 1, "", "result"], [258, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[258, 6, 1, "", "nondigit_punct_re"], [258, 3, 1, "", "property_chars"], [258, 6, 1, "", "punct_nondigit_re"], [258, 6, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[259, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[261, 2, 1, "", "COCOEvalWrapper"], [261, 2, 1, "", "COCOWrapper"], [261, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [261, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [261, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[261, 3, 1, "", "ComputeMetrics"], [261, 3, 1, "", "GetAgnosticMode"], [261, 3, 1, "", "GetCategory"], [261, 3, 1, "", "GetCategoryIdList"], [261, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[261, 3, 1, "", "LoadAnnotations"], [261, 6, 1, "", "dataset"], [261, 6, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[262, 1, 1, "", "evaluate"], [262, 1, 1, "", "exact_match_score"], [262, 1, 1, "", "f1_score"], [262, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[263, 1, 1, "", "evaluate"], [263, 1, 1, "", "f1_score"], [263, 1, 1, "", "metric_max_over_ground_truths"], [263, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[265, 2, 1, "", "Accuracy"], [265, 2, 1, "", "BaseMetric"], [265, 2, 1, "", "COCOmAPv2"], [265, 2, 1, "", "F1"], [265, 2, 1, "", "GeneralTopK"], [265, 2, 1, "", "Loss"], [265, 2, 1, "", "MAE"], [265, 2, 1, "", "METRICS"], [265, 2, 1, "", "MSE"], [265, 2, 1, "", "MXNetMetrics"], [265, 2, 1, "", "ONNXRTGLUE"], [265, 2, 1, "", "ONNXRTITMetrics"], [265, 2, 1, "", "ONNXRTQLMetrics"], [265, 2, 1, "", "PyTorchLoss"], [265, 2, 1, "", "PyTorchMetrics"], [265, 2, 1, "", "RMSE"], [265, 2, 1, "", "ROC"], [265, 2, 1, "", "SquadF1"], [265, 2, 1, "", "TensorflowCOCOMAP"], [265, 2, 1, "", "TensorflowMAP"], [265, 2, 1, "", "TensorflowMetrics"], [265, 2, 1, "", "TensorflowTopK"], [265, 2, 1, "", "TensorflowVOCMAP"], [265, 2, 1, "", "WrapMXNetMetric"], [265, 2, 1, "", "WrapONNXRTMetric"], [265, 2, 1, "", "WrapPyTorchMetric"], [265, 2, 1, "", "mIOU"], [265, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[265, 6, 1, "", "label_list"], [265, 6, 1, "", "pred_list"], [265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 6, 1, "", "sample"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[265, 4, 1, "", "hvd"], [265, 4, 1, "", "metric"], [265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[265, 6, 1, "", "k"], [265, 6, 1, "", "num_correct"], [265, 6, 1, "", "num_sample"], [265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 6, 1, "", "sample"], [265, 6, 1, "", "sum"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[265, 6, 1, "", "compare_label"], [265, 6, 1, "", "label_list"], [265, 6, 1, "", "pred_list"], [265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[265, 6, 1, "", "metrics"], [265, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[265, 6, 1, "", "compare_label"], [265, 6, 1, "", "label_list"], [265, 6, 1, "", "pred_list"], [265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[265, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[265, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[265, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[265, 3, 1, "", "compute"], [265, 3, 1, "", "reset"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[265, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[265, 6, 1, "", "mse"], [265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[265, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[265, 6, 1, "", "k"], [265, 6, 1, "", "num_correct"], [265, 6, 1, "", "num_sample"], [265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[266, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[266, 4, 1, "", "precisions"], [266, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[267, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[267, 3, 1, "", "dataset"], [267, 4, 1, "", "destination"], [267, 4, 1, "", "eval_dataloader"], [267, 4, 1, "", "eval_func"], [267, 4, 1, "", "metric"], [267, 4, 1, "", "model"], [267, 4, 1, "", "postprocess"], [267, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[280, 2, 1, "", "BasicNAS"], [280, 2, 1, "", "DyNAS"], [280, 2, 1, "", "NAS"], [268, 0, 0, "-", "basic_nas"], [269, 0, 0, "-", "dynas"], [274, 0, 0, "-", "dynast"], [281, 0, 0, "-", "nas"], [282, 0, 0, "-", "nas_utils"], [283, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[280, 3, 1, "", "estimate"], [280, 3, 1, "", "execute"], [280, 3, 1, "", "init_by_cfg"], [280, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[280, 3, 1, "", "create_acc_predictor"], [280, 3, 1, "", "create_latency_predictor"], [280, 3, 1, "", "create_macs_predictor"], [280, 3, 1, "", "estimate"], [280, 3, 1, "", "init_cfg"], [280, 3, 1, "", "init_for_search"], [280, 3, 1, "", "search"], [280, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[268, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[268, 3, 1, "", "estimate"], [268, 3, 1, "", "execute"], [268, 3, 1, "", "init_by_cfg"], [268, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[269, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[269, 3, 1, "", "create_acc_predictor"], [269, 3, 1, "", "create_latency_predictor"], [269, 3, 1, "", "create_macs_predictor"], [269, 3, 1, "", "estimate"], [269, 3, 1, "", "init_cfg"], [269, 3, 1, "", "init_for_search"], [269, 3, 1, "", "search"], [269, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[270, 0, 0, "-", "dynas_manager"], [271, 0, 0, "-", "dynas_predictor"], [272, 0, 0, "-", "dynas_search"], [273, 0, 0, "-", "dynas_utils"], [275, 0, 0, "-", "supernetwork"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[270, 2, 1, "", "ParameterManager"], [270, 2, 1, "", "TransformerLTEncoding"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[270, 3, 1, "", "create_training_set"], [270, 3, 1, "", "import_csv"], [270, 3, 1, "", "onehot_generic"], [270, 3, 1, "", "process_param_dict"], [270, 3, 1, "", "random_sample"], [270, 3, 1, "", "random_samples"], [270, 3, 1, "", "set_seed"], [270, 3, 1, "", "translate2param"], [270, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding": [[270, 3, 1, "", "create_training_set"], [270, 3, 1, "", "import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[271, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[271, 3, 1, "", "get_metrics"], [271, 3, 1, "", "get_parameters"], [271, 3, 1, "", "load"], [271, 3, 1, "", "predict"], [271, 3, 1, "", "save"], [271, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[272, 2, 1, "", "ProblemMultiObjective"], [272, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[272, 3, 1, "", "configure_age"], [272, 3, 1, "", "configure_nsga2"], [272, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[273, 2, 1, "", "EvaluationInterface"], [273, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [273, 2, 1, "", "EvaluationInterfaceResNet50"], [273, 2, 1, "", "EvaluationInterfaceTransformerLT"], [273, 2, 1, "", "OFARunner"], [273, 2, 1, "", "Runner"], [273, 2, 1, "", "TorchVisionReference"], [273, 2, 1, "", "TransformerLTRunner"], [273, 1, 1, "", "get_macs"], [273, 1, 1, "", "get_torchvision_model"], [273, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[273, 3, 1, "", "clear_csv"], [273, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[273, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[273, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT": [[273, 3, 1, "", "clear_csv"], [273, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[273, 3, 1, "", "estimate_accuracy_top1"], [273, 3, 1, "", "estimate_latency"], [273, 3, 1, "", "estimate_macs"], [273, 3, 1, "", "get_subnet"], [273, 3, 1, "", "measure_latency"], [273, 3, 1, "", "validate_macs"], [273, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[273, 3, 1, "", "measure_latency"], [273, 3, 1, "", "validate_macs"], [273, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner": [[273, 3, 1, "", "measure_latency"], [273, 3, 1, "", "validate_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[276, 0, 0, "-", "machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[277, 0, 0, "-", "modules_supernetwork"], [278, 0, 0, "-", "transformer_interface"], [279, 0, 0, "-", "transformer_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[277, 2, 1, "", "MultiheadAttentionSuper"], [277, 1, 1, "", "get_incremental_state"], [277, 1, 1, "", "set_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper": [[277, 3, 1, "", "forward"], [277, 3, 1, "", "reorder_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[278, 1, 1, "", "compute_bleu"], [278, 1, 1, "", "compute_latency"], [278, 1, 1, "", "compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[279, 2, 1, "", "TransformerDecoder"], [279, 2, 1, "", "TransformerDecoderLayer"], [279, 2, 1, "", "TransformerEncoder"], [279, 2, 1, "", "TransformerEncoderLayer"], [279, 2, 1, "", "TransformerSuperNetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder": [[279, 3, 1, "", "extract_features"], [279, 3, 1, "", "forward"], [279, 3, 1, "", "max_positions"], [279, 3, 1, "", "output_layer"], [279, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer": [[279, 3, 1, "", "forward"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder": [[279, 3, 1, "", "forward"], [279, 3, 1, "", "max_positions"], [279, 3, 1, "", "reorder_encoder_out"], [279, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer": [[279, 3, 1, "", "forward"], [279, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.nas": [[281, 2, 1, "", "NAS"], [281, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[281, 3, 1, "", "count_model_parameters"], [281, 3, 1, "", "dump_search_results"], [281, 3, 1, "", "estimate"], [281, 3, 1, "", "find_best_model_archs"], [281, 3, 1, "", "init_search_cfg"], [281, 3, 1, "", "load_search_results"], [281, 3, 1, "", "metrics_conversion"], [281, 4, 1, "", "model_builder"], [281, 3, 1, "", "params_vec2params_dict"], [281, 3, 1, "", "search"], [281, 4, 1, "", "search_algorithm"], [281, 4, 1, "", "search_space"], [281, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[282, 1, 1, "", "create_search_space_pool"], [282, 1, 1, "", "find_pareto_front"], [282, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[283, 2, 1, "", "BayesianOptimizationSearcher"], [283, 2, 1, "", "GridSearcher"], [283, 2, 1, "", "RandomSearcher"], [283, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[283, 3, 1, "", "get_feedback"], [283, 3, 1, "", "indices2params_vec"], [283, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[283, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[283, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[283, 3, 1, "", "get_feedback"], [283, 3, 1, "", "params_vec2params_dict"], [283, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[284, 2, 1, "", "Pruning"], [284, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[284, 6, 1, "", "conf"], [284, 4, 1, "", "evaluation_distributed"], [284, 3, 1, "", "execute"], [284, 3, 1, "", "generate_hooks"], [284, 3, 1, "", "generate_pruners"], [284, 3, 1, "", "get_sparsity_ratio"], [284, 3, 1, "", "pre_process"], [284, 3, 1, "", "prepare"], [284, 6, 1, "", "pruners"], [284, 4, 1, "", "pruning_func"], [284, 4, 1, "", "train_distributed"], [284, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[284, 3, 1, "", "on_after_compute_loss"], [284, 3, 1, "", "on_batch_begin"], [284, 3, 1, "", "on_batch_end"], [284, 3, 1, "", "on_epoch_begin"], [284, 3, 1, "", "on_epoch_end"], [284, 3, 1, "", "on_step_begin"], [284, 3, 1, "", "on_step_end"], [284, 3, 1, "", "on_train_begin"], [284, 3, 1, "", "on_train_end"], [284, 3, 1, "", "post_epoch_end"], [284, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[285, 2, 1, "", "PATTERNS"], [286, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[285, 6, 1, "", "patterns"], [285, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[286, 2, 1, "", "PATTERNS"], [287, 0, 0, "-", "pattern"], [288, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[286, 6, 1, "", "patterns"], [286, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[287, 2, 1, "", "PATTERNS"], [287, 2, 1, "", "PatternBase"], [287, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[287, 6, 1, "", "patterns"], [287, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[287, 3, 1, "", "compute_sparsity"], [287, 3, 1, "", "reduce"], [287, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[288, 2, 1, "", "TilePatternBase"], [288, 2, 1, "", "TilePattern_1x1"], [288, 2, 1, "", "TilePattern_1x16"], [288, 2, 1, "", "TilePattern_1x2"], [288, 2, 1, "", "TilePattern_2x2"], [288, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[288, 3, 1, "", "compute_sparsity"], [288, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pruning_v2": [[289, 2, 1, "", "Pruning"], [289, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[289, 6, 1, "", "conf"], [289, 4, 1, "", "evaluation_distributed"], [289, 3, 1, "", "execute"], [289, 3, 1, "", "generate_hooks"], [289, 3, 1, "", "get_sparsity_ratio"], [289, 3, 1, "", "pre_process"], [289, 3, 1, "", "prepare"], [289, 6, 1, "", "pruners"], [289, 4, 1, "", "pruning_func"], [289, 4, 1, "", "train_distributed"], [289, 3, 1, "", "update_config"]], "neural_compressor.experimental.pruning_v2.TfPruningCallback": [[289, 3, 1, "", "on_after_compute_loss"], [289, 3, 1, "", "on_batch_begin"], [289, 3, 1, "", "on_batch_end"], [289, 3, 1, "", "on_epoch_begin"], [289, 3, 1, "", "on_epoch_end"], [289, 3, 1, "", "on_step_begin"], [289, 3, 1, "", "on_step_end"], [289, 3, 1, "", "on_train_begin"], [289, 3, 1, "", "on_train_end"], [289, 3, 1, "", "post_epoch_end"], [289, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pytorch_pruner": [[291, 0, 0, "-", "logger"], [292, 0, 0, "-", "patterns"], [293, 0, 0, "-", "prune_utils"], [294, 0, 0, "-", "pruner"], [295, 0, 0, "-", "pruning"], [296, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[292, 2, 1, "", "Pattern"], [292, 2, 1, "", "PatternNInM"], [292, 2, 1, "", "PatternNxM"], [292, 1, 1, "", "get_pattern"], [292, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[292, 3, 1, "", "get_block_size_dict"], [292, 3, 1, "", "get_mask_single"], [292, 3, 1, "", "get_masks"], [292, 3, 1, "", "get_masks_global"], [292, 3, 1, "", "get_masks_local"], [292, 3, 1, "", "get_pattern_lock_masks"], [292, 3, 1, "", "get_sparsity_ratio"], [292, 6, 1, "", "is_global"], [292, 6, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[292, 6, 1, "", "M"], [292, 6, 1, "", "N"], [292, 3, 1, "", "get_masks_global"], [292, 3, 1, "", "get_pattern_lock_masks"], [292, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[292, 6, 1, "", "block_size"], [292, 3, 1, "", "get_block_size_dict"], [292, 3, 1, "", "get_masks_global"], [292, 3, 1, "", "get_pattern_lock_masks"], [292, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[293, 1, 1, "", "check_config"], [293, 1, 1, "", "parse_not_to_prune"], [293, 1, 1, "", "parse_to_prune"], [293, 1, 1, "", "process_and_check_config"], [293, 1, 1, "", "process_config"], [293, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[294, 2, 1, "", "MagnitudePruner"], [294, 2, 1, "", "PatternLockPruner"], [294, 2, 1, "", "Pruner"], [294, 2, 1, "", "SnipMomentumPruner"], [294, 2, 1, "", "SnipPruner"], [294, 1, 1, "", "get_pruner"], [294, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[294, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[294, 3, 1, "", "on_after_optimizer_step"], [294, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[294, 3, 1, "", "check_is_pruned_step"], [294, 6, 1, "", "config"], [294, 6, 1, "", "current_sparsity_ratio"], [294, 6, 1, "", "end_step"], [294, 6, 1, "", "global_step"], [294, 3, 1, "", "mask_weights"], [294, 6, 1, "", "masks"], [294, 6, 1, "", "max_sparsity_ratio_per_layer"], [294, 6, 1, "", "modules"], [294, 3, 1, "", "on_after_eval"], [294, 3, 1, "", "on_after_optimizer_step"], [294, 3, 1, "", "on_before_eval"], [294, 3, 1, "", "on_before_optimizer_step"], [294, 3, 1, "", "on_epoch_begin"], [294, 3, 1, "", "on_epoch_end"], [294, 3, 1, "", "on_step_begin"], [294, 3, 1, "", "on_step_end"], [294, 3, 1, "", "on_train_begin"], [294, 3, 1, "", "on_train_end"], [294, 6, 1, "", "pattern"], [294, 6, 1, "", "scheduler"], [294, 6, 1, "", "scores"], [294, 6, 1, "", "start_step"], [294, 6, 1, "", "target_sparsity_ratio"], [294, 6, 1, "", "update_frequency_on_step"], [294, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[294, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[294, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[295, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[295, 6, 1, "", "config_file_path"], [295, 3, 1, "", "get_sparsity_ratio"], [295, 6, 1, "", "model"], [295, 3, 1, "", "on_after_eval"], [295, 3, 1, "", "on_after_optimizer_step"], [295, 3, 1, "", "on_before_eval"], [295, 3, 1, "", "on_before_optimizer_step"], [295, 3, 1, "", "on_epoch_begin"], [295, 3, 1, "", "on_epoch_end"], [295, 3, 1, "", "on_step_begin"], [295, 3, 1, "", "on_step_end"], [295, 3, 1, "", "on_train_begin"], [295, 3, 1, "", "on_train_end"], [295, 3, 1, "", "prepare"], [295, 6, 1, "", "pruner_info"], [295, 6, 1, "", "pruners"], [295, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[296, 2, 1, "", "IterativeScheduler"], [296, 2, 1, "", "OneshotScheduler"], [296, 2, 1, "", "Scheduler"], [296, 1, 1, "", "get_scheduler"], [296, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[296, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[296, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[296, 6, 1, "", "config"], [296, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[297, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[297, 4, 1, "", "calib_dataloader"], [297, 3, 1, "", "dataset"], [297, 3, 1, "", "execute"], [297, 4, 1, "", "metric"], [297, 4, 1, "", "model"], [297, 4, 1, "", "objective"], [297, 4, 1, "", "postprocess"], [297, 3, 1, "", "pre_process"], [297, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[298, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[298, 3, 1, "", "append"], [298, 3, 1, "", "combine"], [298, 4, 1, "", "eval_func"], [298, 4, 1, "", "model"], [298, 4, 1, "", "train_func"]], "neural_compressor.metric": [[306, 2, 1, "", "BaseMetric"], [306, 2, 1, "", "METRICS"], [306, 2, 1, "", "Metric"], [300, 0, 0, "-", "bleu"], [301, 0, 0, "-", "bleu_util"], [302, 0, 0, "-", "coco_label_map"], [303, 0, 0, "-", "coco_tools"], [304, 0, 0, "-", "evaluate_squad"], [305, 0, 0, "-", "f1"], [307, 0, 0, "-", "metric"], [306, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[306, 4, 1, "", "hvd"], [306, 4, 1, "", "metric"], [306, 3, 1, "", "reset"], [306, 3, 1, "", "result"], [306, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[306, 6, 1, "", "metrics"], [306, 3, 1, "", "register"]], "neural_compressor.metric.bleu": [[300, 2, 1, "", "BLEU"], [300, 2, 1, "", "UnicodeRegex"], [300, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[300, 6, 1, "", "labels"], [300, 6, 1, "", "predictions"], [300, 3, 1, "", "reset"], [300, 3, 1, "", "result"], [300, 3, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[300, 6, 1, "", "nondigit_punct_re"], [300, 3, 1, "", "property_chars"], [300, 6, 1, "", "punct_nondigit_re"], [300, 6, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[301, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[303, 2, 1, "", "COCOEvalWrapper"], [303, 2, 1, "", "COCOWrapper"], [303, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [303, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [303, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[303, 3, 1, "", "ComputeMetrics"], [303, 3, 1, "", "GetAgnosticMode"], [303, 3, 1, "", "GetCategory"], [303, 3, 1, "", "GetCategoryIdList"], [303, 3, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[303, 3, 1, "", "LoadAnnotations"], [303, 6, 1, "", "dataset"], [303, 6, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[304, 1, 1, "", "evaluate"], [304, 1, 1, "", "exact_match_score"], [304, 1, 1, "", "f1_score"], [304, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[305, 1, 1, "", "evaluate"], [305, 1, 1, "", "f1_score"], [305, 1, 1, "", "metric_max_over_ground_truths"], [305, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[307, 2, 1, "", "Accuracy"], [307, 2, 1, "", "BaseMetric"], [307, 2, 1, "", "COCOmAPv2"], [307, 2, 1, "", "F1"], [307, 2, 1, "", "GeneralTopK"], [307, 2, 1, "", "Loss"], [307, 2, 1, "", "MAE"], [307, 2, 1, "", "METRICS"], [307, 2, 1, "", "MSE"], [307, 2, 1, "", "MXNetMetrics"], [307, 2, 1, "", "Metric"], [307, 2, 1, "", "ONNXRTGLUE"], [307, 2, 1, "", "ONNXRTITMetrics"], [307, 2, 1, "", "ONNXRTQLMetrics"], [307, 2, 1, "", "PyTorchLoss"], [307, 2, 1, "", "PyTorchMetrics"], [307, 2, 1, "", "RMSE"], [307, 2, 1, "", "ROC"], [307, 2, 1, "", "SquadF1"], [307, 2, 1, "", "TensorflowCOCOMAP"], [307, 2, 1, "", "TensorflowMAP"], [307, 2, 1, "", "TensorflowMetrics"], [307, 2, 1, "", "TensorflowTopK"], [307, 2, 1, "", "TensorflowVOCMAP"], [307, 2, 1, "", "WrapMXNetMetric"], [307, 2, 1, "", "WrapONNXRTMetric"], [307, 2, 1, "", "WrapPyTorchMetric"], [307, 2, 1, "", "mIOU"], [307, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[307, 6, 1, "", "label_list"], [307, 6, 1, "", "pred_list"], [307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 6, 1, "", "sample"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[307, 4, 1, "", "hvd"], [307, 4, 1, "", "metric"], [307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[307, 6, 1, "", "k"], [307, 6, 1, "", "num_correct"], [307, 6, 1, "", "num_sample"], [307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 6, 1, "", "sample"], [307, 6, 1, "", "sum"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[307, 6, 1, "", "compare_label"], [307, 6, 1, "", "label_list"], [307, 6, 1, "", "pred_list"], [307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[307, 6, 1, "", "metrics"], [307, 3, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[307, 6, 1, "", "compare_label"], [307, 6, 1, "", "label_list"], [307, 6, 1, "", "pred_list"], [307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[307, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[307, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[307, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[307, 3, 1, "", "compute"], [307, 3, 1, "", "reset"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[307, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[307, 6, 1, "", "mse"], [307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[307, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[307, 6, 1, "", "k"], [307, 6, 1, "", "num_correct"], [307, 6, 1, "", "num_sample"], [307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.model": [[310, 2, 1, "", "BaseModel"], [310, 2, 1, "", "Model"], [309, 0, 0, "-", "base_model"], [311, 0, 0, "-", "keras_model"], [312, 0, 0, "-", "model"], [313, 0, 0, "-", "mxnet_model"], [314, 0, 0, "-", "nets_factory"], [315, 0, 0, "-", "onnx_model"], [316, 0, 0, "-", "tensorflow_model"], [317, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[310, 3, 1, "", "export"], [310, 3, 1, "", "framework"], [310, 4, 1, "", "graph_info"], [310, 4, 1, "", "model"], [310, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[309, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[309, 3, 1, "", "export"], [309, 3, 1, "", "framework"], [309, 4, 1, "", "graph_info"], [309, 4, 1, "", "model"], [309, 3, 1, "", "save"]], "neural_compressor.model.keras_model": [[311, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[311, 3, 1, "", "export"], [311, 3, 1, "", "framework"], [311, 4, 1, "", "graph_info"], [311, 4, 1, "", "model"], [311, 3, 1, "", "save"]], "neural_compressor.model.model": [[312, 2, 1, "", "Model"], [312, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[313, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[313, 3, 1, "", "framework"], [313, 4, 1, "", "model"], [313, 3, 1, "", "save"]], "neural_compressor.model.onnx_model": [[315, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[315, 3, 1, "", "export"], [315, 3, 1, "", "find_node_by_name"], [315, 3, 1, "", "find_nodes_by_initializer"], [315, 3, 1, "", "framework"], [315, 3, 1, "", "get_scale_zero"], [315, 4, 1, "", "graph_info"], [315, 4, 1, "", "model"], [315, 3, 1, "", "save"], [315, 3, 1, "", "save_model_to_file"]], "neural_compressor.model.tensorflow_model": [[316, 2, 1, "", "TensorflowBaseModel"], [316, 2, 1, "", "TensorflowCheckpointModel"], [316, 2, 1, "", "TensorflowQATModel"], [316, 2, 1, "", "TensorflowSavedModelModel"], [316, 1, 1, "", "checkpoint_session"], [316, 1, 1, "", "estimator_session"], [316, 1, 1, "", "frozen_pb_session"], [316, 1, 1, "", "get_model_type"], [316, 1, 1, "", "graph_def_session"], [316, 1, 1, "", "graph_session"], [316, 1, 1, "", "keras_session"], [316, 1, 1, "", "load_saved_model"], [316, 1, 1, "", "saved_model_session"], [316, 1, 1, "", "slim_session"], [316, 1, 1, "", "validate_and_inference_input_output"], [316, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[316, 3, 1, "", "framework"], [316, 4, 1, "", "graph_info"], [316, 4, 1, "", "model"], [316, 3, 1, "", "save"], [316, 4, 1, "", "weights"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[316, 4, 1, "", "model"], [316, 3, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[316, 4, 1, "", "model"], [316, 3, 1, "", "report_sparsity"], [316, 3, 1, "", "save"]], "neural_compressor.model.torch_model": [[317, 2, 1, "", "IPEXModel"], [317, 2, 1, "", "PyTorchBaseModel"], [317, 2, 1, "", "PyTorchFXModel"], [317, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[317, 4, 1, "", "graph_info"], [317, 3, 1, "", "save"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[317, 4, 1, "", "fp32_model"], [317, 3, 1, "", "framework"], [317, 3, 1, "", "get_all_weight_names"], [317, 3, 1, "", "get_gradient"], [317, 3, 1, "", "get_inputs"], [317, 3, 1, "", "get_weight"], [317, 4, 1, "", "model"], [317, 3, 1, "", "prune_weights_"], [317, 3, 1, "", "report_sparsity"], [317, 3, 1, "", "update_gradient"], [317, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[317, 3, 1, "", "export"], [317, 4, 1, "", "graph_info"], [317, 3, 1, "", "save"]], "neural_compressor.objective": [[318, 2, 1, "", "Accuracy"], [318, 2, 1, "", "Footprint"], [318, 2, 1, "", "ModelSize"], [318, 2, 1, "", "Objective"], [318, 2, 1, "", "Performance"], [318, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[318, 3, 1, "", "end"], [318, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[318, 3, 1, "", "end"], [318, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[318, 3, 1, "", "end"], [318, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[318, 3, 1, "", "end"], [318, 3, 1, "", "reset"], [318, 3, 1, "", "result"], [318, 3, 1, "", "result_list"], [318, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[318, 3, 1, "", "end"], [318, 3, 1, "", "start"]], "neural_compressor.pruner": [[319, 0, 0, "-", "criteria"], [321, 0, 0, "-", "logger"], [322, 0, 0, "-", "patterns"], [325, 0, 0, "-", "pruner_legacy"], [329, 0, 0, "-", "pruners"], [330, 0, 0, "-", "pruning"], [331, 0, 0, "-", "regs"], [332, 0, 0, "-", "schedulers"], [333, 0, 0, "-", "utils"]], "neural_compressor.pruner.criteria": [[319, 2, 1, "", "GradientCriterion"], [319, 2, 1, "", "MagnitudeCriterion"], [319, 2, 1, "", "PruningCriterion"], [319, 2, 1, "", "SnipCriterion"], [319, 2, 1, "", "SnipMomentumCriterion"], [319, 1, 1, "", "get_criterion"], [319, 1, 1, "", "register_criterion"]], "neural_compressor.pruner.criteria.GradientCriterion": [[319, 3, 1, "", "on_after_optimizer_step"], [319, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.MagnitudeCriterion": [[319, 3, 1, "", "on_step_begin"], [319, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.PruningCriterion": [[319, 3, 1, "", "on_after_optimizer_step"], [319, 3, 1, "", "on_step_begin"], [319, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipCriterion": [[319, 3, 1, "", "on_after_optimizer_step"], [319, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipMomentumCriterion": [[319, 3, 1, "", "on_after_optimizer_step"], [319, 6, 1, "", "scores"]], "neural_compressor.pruner.patterns": [[322, 2, 1, "", "BasePattern"], [322, 2, 1, "", "PatternNInM"], [322, 2, 1, "", "PatternNxM"], [322, 1, 1, "", "get_pattern"], [322, 1, 1, "", "register_pattern"]], "neural_compressor.pruner.patterns.BasePattern": [[322, 3, 1, "", "adjust_ratio"], [322, 3, 1, "", "check_layer_validity"], [322, 6, 1, "", "config"], [322, 3, 1, "", "get_block_size_dict"], [322, 3, 1, "", "get_masks"], [322, 3, 1, "", "get_masks_global"], [322, 3, 1, "", "get_masks_local"], [322, 3, 1, "", "get_pattern_lock_masks"], [322, 3, 1, "", "get_reduced_masks_from_data"], [322, 3, 1, "", "get_single_mask_per_target_ratio"], [322, 3, 1, "", "get_sparsity_ratio"], [322, 3, 1, "", "get_sparsity_ratio_each_layer"], [322, 6, 1, "", "invalid_layers"], [322, 6, 1, "", "is_global"], [322, 6, 1, "", "keep_mask_layers"], [322, 6, 1, "", "max_sparsity_ratio_per_op"], [322, 6, 1, "", "min_sparsity_ratio_per_op"], [322, 6, 1, "", "modules"], [322, 6, 1, "", "pattern"], [322, 3, 1, "", "reduce_tensor"], [322, 6, 1, "", "target_sparsity"], [322, 3, 1, "", "update_residual_cnt"]], "neural_compressor.pruner.patterns.PatternNInM": [[322, 6, 1, "", "M"], [322, 6, 1, "", "N"], [322, 3, 1, "", "check_layer_validity"], [322, 3, 1, "", "get_ele_mask_per_threshold"], [322, 3, 1, "", "get_least_ninm_mask_from_data"], [322, 3, 1, "", "get_masks_global"], [322, 3, 1, "", "get_pattern_lock_masks"], [322, 3, 1, "", "get_reduced_masks_from_data"], [322, 3, 1, "", "get_sparsity_ratio"], [322, 3, 1, "", "reduce_scores"], [322, 3, 1, "", "reshape_orig_to_pattern"], [322, 3, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.pruner.patterns.PatternNxM": [[322, 6, 1, "", "block_size"], [322, 3, 1, "", "check_layer_validity"], [322, 3, 1, "", "count_new_masked_cnts"], [322, 3, 1, "", "get_block_size_dict"], [322, 3, 1, "", "get_mask_per_threshold"], [322, 3, 1, "", "get_masks_global"], [322, 3, 1, "", "get_pattern_lock_masks"], [322, 3, 1, "", "get_reduced_masks_from_data"], [322, 3, 1, "", "get_sparsity_ratio"], [322, 3, 1, "", "get_sparsity_ratio_progressive"], [322, 3, 1, "", "reduce_scores"], [322, 3, 1, "", "reshape_orig_to_pattern"], [322, 3, 1, "", "reshape_reduced_to_orig"], [322, 3, 1, "", "update_new_added_masks"], [322, 3, 1, "", "update_progressive_masks"], [322, 3, 1, "", "update_progressive_masks_global"], [322, 3, 1, "", "update_progressive_masks_linear"], [322, 3, 1, "", "update_progressive_masks_local"], [322, 3, 1, "", "update_progressive_masks_scores"]], "neural_compressor.pruner.pruner_legacy": [[323, 0, 0, "-", "gradient_sensitivity"], [324, 0, 0, "-", "group_lasso"], [326, 0, 0, "-", "magnitude"], [327, 0, 0, "-", "pattern_lock"], [328, 0, 0, "-", "pruner"]], "neural_compressor.pruner.pruner_legacy.pruner": [[328, 1, 1, "", "pruner_registry"]], "neural_compressor.pruner.pruners": [[329, 2, 1, "", "BasePruner"], [329, 2, 1, "", "BasicPruner"], [329, 2, 1, "", "PatternLockPruner"], [329, 2, 1, "", "ProgressivePruner"], [329, 1, 1, "", "get_pruner"], [329, 1, 1, "", "parse_valid_pruner_types"], [329, 1, 1, "", "register_pruner"]], "neural_compressor.pruner.pruners.BasePruner": [[329, 3, 1, "", "check_is_pruned_step"], [329, 6, 1, "", "config"], [329, 6, 1, "", "current_sparsity_ratio"], [329, 6, 1, "", "end_step"], [329, 6, 1, "", "global_step"], [329, 3, 1, "", "mask_weights"], [329, 3, 1, "", "mask_weights_general"], [329, 6, 1, "", "masks"], [329, 6, 1, "", "max_sparsity_ratio_per_op"], [329, 6, 1, "", "modules"], [329, 3, 1, "", "on_after_eval"], [329, 3, 1, "", "on_after_optimizer_step"], [329, 3, 1, "", "on_before_eval"], [329, 3, 1, "", "on_before_optimizer_step"], [329, 3, 1, "", "on_epoch_begin"], [329, 3, 1, "", "on_epoch_end"], [329, 3, 1, "", "on_step_begin"], [329, 3, 1, "", "on_step_end"], [329, 3, 1, "", "on_train_begin"], [329, 3, 1, "", "on_train_end"], [329, 6, 1, "", "pattern"], [329, 6, 1, "", "pruning_frequency"], [329, 6, 1, "", "scheduler"], [329, 6, 1, "", "scores"], [329, 6, 1, "", "start_step"], [329, 6, 1, "", "target_sparsity_ratio"], [329, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.BasicPruner": [[329, 6, 1, "", "criterion"], [329, 3, 1, "", "on_after_optimizer_step"], [329, 3, 1, "", "on_before_optimizer_step"], [329, 6, 1, "", "pattern"], [329, 6, 1, "", "reg"], [329, 6, 1, "", "scheduler"], [329, 3, 1, "", "set_global_step"], [329, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.PatternLockPruner": [[329, 3, 1, "", "on_after_optimizer_step"], [329, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.ProgressivePruner": [[329, 3, 1, "", "check_is_pruned_progressive_step"], [329, 3, 1, "", "check_progressive_validity"], [329, 3, 1, "", "on_after_optimizer_step"], [329, 3, 1, "", "on_before_optimizer_step"], [329, 3, 1, "", "on_step_begin"], [329, 3, 1, "", "print_progressive_sparsity"], [329, 3, 1, "", "update_masks_progressive"]], "neural_compressor.pruner.pruning": [[330, 2, 1, "", "Pruning"]], "neural_compressor.pruner.pruning.Pruning": [[330, 6, 1, "", "config_file_path"], [330, 3, 1, "", "get_sparsity_ratio"], [330, 4, 1, "id0", "model"], [330, 3, 1, "", "on_after_eval"], [330, 3, 1, "", "on_after_optimizer_step"], [330, 3, 1, "", "on_before_eval"], [330, 3, 1, "", "on_before_optimizer_step"], [330, 3, 1, "", "on_epoch_begin"], [330, 3, 1, "", "on_epoch_end"], [330, 3, 1, "", "on_step_begin"], [330, 3, 1, "", "on_step_end"], [330, 3, 1, "", "on_train_begin"], [330, 3, 1, "", "on_train_end"], [330, 6, 1, "", "pruner_info"], [330, 6, 1, "", "pruners"], [330, 3, 1, "", "update_config"]], "neural_compressor.pruner.regs": [[331, 2, 1, "", "BaseReg"], [331, 2, 1, "", "GroupLasso"], [331, 1, 1, "", "get_reg"], [331, 1, 1, "", "get_reg_type"], [331, 1, 1, "", "register_reg"]], "neural_compressor.pruner.regs.BaseReg": [[331, 3, 1, "", "on_after_optimizer_step"], [331, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.regs.GroupLasso": [[331, 6, 1, "", "alpha"], [331, 3, 1, "", "on_after_optimizer_step"], [331, 3, 1, "", "on_before_optimizer_step"], [331, 6, 1, "", "reg_terms"]], "neural_compressor.pruner.schedulers": [[332, 2, 1, "", "IterativeScheduler"], [332, 2, 1, "", "OneshotScheduler"], [332, 2, 1, "", "PruningScheduler"], [332, 1, 1, "", "get_scheduler"], [332, 1, 1, "", "register_scheduler"]], "neural_compressor.pruner.schedulers.IterativeScheduler": [[332, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.OneshotScheduler": [[332, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.PruningScheduler": [[332, 6, 1, "", "config"], [332, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.utils": [[333, 1, 1, "", "check_config"], [333, 1, 1, "", "parse_to_prune"], [333, 1, 1, "", "process_and_check_config"], [333, 1, 1, "", "process_config"], [333, 1, 1, "", "process_weight_config"], [333, 1, 1, "", "process_yaml_config"], [333, 1, 1, "", "reset_none_to_default"], [333, 1, 1, "", "update_params"]], "neural_compressor.quantization": [[334, 1, 1, "", "fit"]], "neural_compressor.strategy": [[335, 0, 0, "-", "auto_mixed_precision"], [336, 0, 0, "-", "basic"], [337, 0, 0, "-", "bayesian"], [338, 0, 0, "-", "conservative"], [339, 0, 0, "-", "exhaustive"], [340, 0, 0, "-", "hawq_v2"], [342, 0, 0, "-", "mse"], [343, 0, 0, "-", "mse_v2"], [344, 0, 0, "-", "random"], [345, 0, 0, "-", "strategy"], [346, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[335, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[335, 3, 1, "", "next_tune_cfg"], [335, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[336, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[336, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[337, 2, 1, "", "BayesianOptimization"], [337, 2, 1, "", "BayesianTuneStrategy"], [337, 2, 1, "", "TargetSpace"], [337, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianOptimization": [[337, 3, 1, "", "gen_next_params"], [337, 4, 1, "", "max"], [337, 4, 1, "", "res"], [337, 4, 1, "", "space"], [337, 3, 1, "", "suggest"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[337, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[337, 3, 1, "", "array_to_params"], [337, 4, 1, "", "bounds"], [337, 4, 1, "", "dim"], [337, 4, 1, "", "empty"], [337, 3, 1, "", "get_target"], [337, 4, 1, "", "keys"], [337, 3, 1, "", "max"], [337, 4, 1, "", "params"], [337, 3, 1, "", "params_to_array"], [337, 3, 1, "", "random_sample"], [337, 3, 1, "", "register"], [337, 3, 1, "", "res"], [337, 4, 1, "", "target"]], "neural_compressor.strategy.conservative": [[338, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[338, 3, 1, "", "next_tune_cfg"], [338, 3, 1, "", "stop"], [338, 3, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[339, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[339, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[340, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[340, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[342, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[342, 3, 1, "", "mse_impact_lst"], [342, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[343, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[343, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[344, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[344, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[345, 2, 1, "", "TuneStrategy"], [345, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[345, 3, 1, "", "deploy_config"], [345, 4, 1, "", "evaluation_result"], [345, 3, 1, "", "initial_best_acc"], [345, 3, 1, "", "initial_tuning_cfg"], [345, 3, 1, "", "next_tune_cfg"], [345, 3, 1, "", "set_q_func"], [345, 3, 1, "", "set_tuning_space"], [345, 3, 1, "", "setup_resume"], [345, 3, 1, "", "show_baseline_info"], [345, 3, 1, "", "stop"], [345, 3, 1, "", "traverse"], [345, 3, 1, "", "update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils": [[346, 2, 1, "", "OpTuningConfig"], [347, 0, 0, "-", "tuning_sampler"], [348, 0, 0, "-", "tuning_space"], [349, 0, 0, "-", "tuning_structs"]], "neural_compressor.strategy.utils.OpTuningConfig": [[346, 3, 1, "", "from_state"], [346, 3, 1, "", "get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[349, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig": [[349, 3, 1, "", "from_state"], [349, 3, 1, "", "get_state"]], "neural_compressor.training": [[350, 2, 1, "", "CompressionManager"], [350, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[350, 3, 1, "", "export"], [350, 3, 1, "", "save"]], "neural_compressor.utils": [[354, 2, 1, "", "KL_Divergence"], [354, 2, 1, "", "LayerHistogramCollector"], [351, 0, 0, "-", "collect_layer_histogram"], [352, 0, 0, "-", "constant"], [353, 0, 0, "-", "create_obj_from_config"], [355, 0, 0, "-", "kl_divergence"], [356, 0, 0, "-", "load_huggingface"], [357, 0, 0, "-", "logger"], [358, 0, 0, "-", "options"], [359, 0, 0, "-", "pytorch"], [360, 0, 0, "-", "utility"]], "neural_compressor.utils.KL_Divergence": [[354, 3, 1, "", "expand_quantized_bins"], [354, 3, 1, "", "get_threshold"], [354, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.LayerHistogramCollector": [[354, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[351, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[351, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[353, 1, 1, "", "create_eval_func"], [353, 1, 1, "", "create_train_func"]], "neural_compressor.utils.kl_divergence": [[355, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[355, 3, 1, "", "expand_quantized_bins"], [355, 3, 1, "", "get_threshold"], [355, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.pytorch": [[359, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[360, 2, 1, "", "LazyImport"], [360, 2, 1, "", "MODE"], [360, 1, 1, "", "combine_histogram"], [360, 1, 1, "", "dump_data_to_local"], [360, 1, 1, "", "dump_elapsed_time"], [360, 1, 1, "", "equal_dicts"], [360, 1, 1, "", "get_size"], [360, 1, 1, "", "get_tuning_history"], [360, 1, 1, "", "load_data_from_pkl"], [360, 1, 1, "", "recover"]], "neural_compressor.ux": [[436, 0, 0, "-", "components"], [495, 0, 0, "-", "inc_bench"], [504, 0, 0, "-", "utils"], [530, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[364, 0, 0, "-", "benchmark"], [368, 0, 0, "-", "config_generator"], [376, 0, 0, "-", "configuration_wizard"], [412, 0, 0, "-", "db_manager"], [417, 0, 0, "-", "diagnosis"], [425, 0, 0, "-", "file_browser"], [431, 0, 0, "-", "graph"], [437, 0, 0, "-", "jobs_management"], [441, 0, 0, "-", "manage_workspace"], [443, 0, 0, "-", "model"], [462, 0, 0, "-", "model_zoo"], [464, 0, 0, "-", "names_mapper"], [471, 0, 0, "-", "optimization"], [487, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[364, 2, 1, "", "Benchmarks"], [361, 0, 0, "-", "benchmark"], [362, 0, 0, "-", "benchmark_model"], [363, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[361, 2, 1, "", "Benchmark"], [361, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[361, 4, 1, "", "config_filename"], [361, 4, 1, "", "configuration_data"], [361, 3, 1, "", "execute"], [361, 3, 1, "", "generate_config"], [361, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[362, 1, 1, "", "benchmark_model"], [362, 1, 1, "", "parse_args"], [362, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[363, 1, 1, "", "benchmark_result_update"], [363, 1, 1, "", "benchmark_result_update_pytorch_script"], [363, 1, 1, "", "execute_benchmark"], [363, 1, 1, "", "execute_real_benchmark"], [363, 1, 1, "", "pytorch_script_bench_optimizations"], [363, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[365, 0, 0, "-", "benchmark_config_generator"], [366, 0, 0, "-", "config_generator"], [367, 0, 0, "-", "graph_optimization_config_generator"], [369, 0, 0, "-", "mixed_precision_config_generator"], [370, 0, 0, "-", "profiling_config_generator"], [371, 0, 0, "-", "pruning_config_generator"], [372, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[365, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[365, 3, 1, "", "generate"], [365, 3, 1, "", "generate_accuracy_config"], [365, 3, 1, "", "generate_evaluation_config"], [365, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[366, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[366, 3, 1, "", "generate"], [366, 3, 1, "", "generate_dataloader_config"], [366, 3, 1, "", "generate_model_config"], [366, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[367, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[367, 3, 1, "", "generate"], [367, 3, 1, "", "generate_evaluation_config"], [367, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[369, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[369, 3, 1, "", "generate"], [369, 3, 1, "", "generate_evaluation_config"], [369, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[370, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[370, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[371, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator": [[371, 3, 1, "", "generate"], [371, 3, 1, "", "generate_evaluation_config"], [371, 3, 1, "", "generate_pruning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[372, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[372, 3, 1, "", "generate"], [372, 3, 1, "", "generate_evaluation_config"], [372, 3, 1, "", "generate_quantization_config"], [372, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[373, 0, 0, "-", "configuration_parser"], [374, 0, 0, "-", "get_boundary_nodes"], [375, 0, 0, "-", "get_configuration"], [377, 0, 0, "-", "params_feeder"], [378, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[373, 2, 1, "", "ConfigurationParser"], [373, 1, 1, "", "normalize_string_list"], [373, 1, 1, "", "parse_list_value"], [373, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[373, 3, 1, "", "get_param_type"], [373, 3, 1, "", "parse"], [373, 3, 1, "", "parse_dataloader"], [373, 3, 1, "", "parse_evaluation_data"], [373, 3, 1, "", "parse_metric"], [373, 3, 1, "", "parse_transforms"], [373, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[374, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[375, 1, 1, "", "get_predefined_configuration"], [375, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[377, 2, 1, "", "Feeder"], [377, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[377, 3, 1, "", "feed"], [377, 3, 1, "", "get_dataloaders"], [377, 3, 1, "", "get_domains"], [377, 3, 1, "", "get_frameworks"], [377, 3, 1, "", "get_metrics"], [377, 3, 1, "", "get_models"], [377, 3, 1, "", "get_objectives"], [377, 3, 1, "", "get_precisions"], [377, 3, 1, "", "get_quantization_approaches"], [377, 3, 1, "", "get_strategies"], [377, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[378, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser": [[378, 3, 1, "", "generate_tree"], [378, 3, 1, "", "parse"], [378, 3, 1, "", "parse_entry"]], "neural_compressor.ux.components.db_manager": [[412, 2, 1, "", "DBManager"], [379, 0, 0, "-", "db_manager"], [388, 0, 0, "-", "db_models"], [407, 0, 0, "-", "db_operations"], [413, 0, 0, "-", "params_interfaces"], [414, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[412, 3, 1, "", "create_all"], [412, 3, 1, "", "create_sqlalchemy_engine"], [412, 4, 1, "", "engine"], [412, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[379, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[379, 3, 1, "", "create_all"], [379, 3, 1, "", "create_sqlalchemy_engine"], [379, 4, 1, "", "engine"], [379, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[380, 0, 0, "-", "benchmark"], [381, 0, 0, "-", "benchmark_result"], [382, 0, 0, "-", "dataloader"], [383, 0, 0, "-", "dataset"], [384, 0, 0, "-", "domain"], [385, 0, 0, "-", "domain_flavour"], [386, 0, 0, "-", "example"], [387, 0, 0, "-", "framework"], [389, 0, 0, "-", "metric"], [390, 0, 0, "-", "model"], [391, 0, 0, "-", "optimization"], [392, 0, 0, "-", "optimization_type"], [393, 0, 0, "-", "precision"], [394, 0, 0, "-", "profiling"], [395, 0, 0, "-", "profiling_result"], [396, 0, 0, "-", "project"], [397, 0, 0, "-", "pruning_details"], [398, 0, 0, "-", "transform"], [399, 0, 0, "-", "tuning_details"], [400, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[380, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[380, 3, 1, "", "add"], [380, 3, 1, "", "build_info"], [380, 3, 1, "", "clean_status"], [380, 3, 1, "", "delete_benchmark"], [380, 3, 1, "", "details"], [380, 3, 1, "", "list"], [380, 3, 1, "", "update_batch_size"], [380, 3, 1, "", "update_config_path"], [380, 3, 1, "", "update_cores_per_instance"], [380, 3, 1, "", "update_dataset"], [380, 3, 1, "", "update_duration"], [380, 3, 1, "", "update_execution_command"], [380, 3, 1, "", "update_log_path"], [380, 3, 1, "", "update_mode"], [380, 3, 1, "", "update_number_of_instance"], [380, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[381, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[381, 3, 1, "", "add"], [381, 3, 1, "", "build_info"], [381, 3, 1, "", "update_accuracy"], [381, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[382, 2, 1, "", "Dataloader"], [382, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[382, 3, 1, "", "list"], [382, 3, 1, "", "list_by_framework"], [382, 3, 1, "", "query_to_list"], [382, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[383, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[383, 3, 1, "", "add"], [383, 3, 1, "", "build_info"], [383, 3, 1, "", "delete_dataset"], [383, 3, 1, "", "details"], [383, 3, 1, "", "list"], [383, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[384, 2, 1, "", "Domain"], [384, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[384, 3, 1, "", "get_domain_id"], [384, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[385, 2, 1, "", "DomainFlavour"], [385, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[385, 3, 1, "", "get_domain_flavour_id"], [385, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[386, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[387, 2, 1, "", "Framework"], [387, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[387, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[389, 2, 1, "", "Metric"], [389, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[389, 3, 1, "", "list"], [389, 3, 1, "", "list_by_framework"], [389, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[390, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[390, 3, 1, "", "add"], [390, 3, 1, "", "build_info"], [390, 3, 1, "", "delete_model"], [390, 3, 1, "", "details"], [390, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[391, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[391, 3, 1, "", "add"], [391, 3, 1, "", "build_info"], [391, 3, 1, "", "clean_status"], [391, 3, 1, "", "delete_optimization"], [391, 3, 1, "", "details"], [391, 3, 1, "", "get_optimization_by_project_and_model"], [391, 3, 1, "", "get_pinned_benchmarks"], [391, 3, 1, "", "list"], [391, 3, 1, "", "pin_accuracy_benchmark"], [391, 3, 1, "", "pin_performance_benchmark"], [391, 3, 1, "", "unpin_benchmark"], [391, 3, 1, "", "update_batch_size"], [391, 3, 1, "", "update_config_path"], [391, 3, 1, "", "update_dataset"], [391, 3, 1, "", "update_duration"], [391, 3, 1, "", "update_execution_command"], [391, 3, 1, "", "update_log_path"], [391, 3, 1, "", "update_optimized_model"], [391, 3, 1, "", "update_precision"], [391, 3, 1, "", "update_pruning_details"], [391, 3, 1, "", "update_sampling_size"], [391, 3, 1, "", "update_status"], [391, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[392, 2, 1, "", "OptimizationType"], [392, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[392, 3, 1, "", "add"], [392, 3, 1, "", "get_optimization_type_by_id"], [392, 3, 1, "", "get_optimization_type_by_name"], [392, 3, 1, "", "get_optimization_type_for_precision"], [392, 3, 1, "", "get_optimization_type_id"], [392, 3, 1, "", "list"], [392, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[393, 2, 1, "", "Precision"], [393, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[393, 3, 1, "", "add"], [393, 3, 1, "", "get_precision_by_id"], [393, 3, 1, "", "get_precision_by_name"], [393, 3, 1, "", "get_precision_id"], [393, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[394, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[394, 3, 1, "", "add"], [394, 3, 1, "", "build_info"], [394, 3, 1, "", "clean_status"], [394, 3, 1, "", "delete_profiling"], [394, 3, 1, "", "details"], [394, 3, 1, "", "list"], [394, 3, 1, "", "update_dataset"], [394, 3, 1, "", "update_duration"], [394, 3, 1, "", "update_execution_command"], [394, 3, 1, "", "update_log_path"], [394, 3, 1, "", "update_num_threads"], [394, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[395, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[395, 3, 1, "", "add"], [395, 3, 1, "", "build_info"], [395, 3, 1, "", "bulk_add"], [395, 3, 1, "", "delete_results"], [395, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[396, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[396, 3, 1, "", "create_project"], [396, 3, 1, "", "delete_project"], [396, 3, 1, "", "get_model_by_name"], [396, 3, 1, "", "list_projects"], [396, 3, 1, "", "project_details"], [396, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[397, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails": [[397, 3, 1, "", "add"], [397, 3, 1, "", "build_info"], [397, 3, 1, "", "delete_pruning_details"], [397, 3, 1, "", "update"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[398, 2, 1, "", "Transform"], [398, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[398, 3, 1, "", "list"], [398, 3, 1, "", "list_by_domain"], [398, 3, 1, "", "list_by_framework"], [398, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[399, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[399, 3, 1, "", "add"], [399, 3, 1, "", "delete_tuning_details"], [399, 3, 1, "", "update"], [399, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[400, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[400, 3, 1, "", "add"], [400, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[407, 2, 1, "", "BenchmarkAPIInterface"], [407, 2, 1, "", "DatasetAPIInterface"], [407, 2, 1, "", "DiagnosisAPIInterface"], [407, 2, 1, "", "DictionariesAPIInterface"], [407, 2, 1, "", "ExamplesAPIInterface"], [407, 2, 1, "", "ModelAPIInterface"], [407, 2, 1, "", "OptimizationAPIInterface"], [407, 2, 1, "", "ProfilingAPIInterface"], [407, 2, 1, "", "ProjectAPIInterface"], [401, 0, 0, "-", "benchmark_api_interface"], [402, 0, 0, "-", "dataset_api_interface"], [403, 0, 0, "-", "db_operations"], [404, 0, 0, "-", "diagnosis_api_interface"], [405, 0, 0, "-", "dictionaries_api_interface"], [406, 0, 0, "-", "examples_api_interface"], [408, 0, 0, "-", "model_api_interface"], [409, 0, 0, "-", "optimization_api_interface"], [410, 0, 0, "-", "profiling_api_interface"], [411, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[407, 3, 1, "", "add_benchmark"], [407, 3, 1, "", "add_result"], [407, 3, 1, "", "clean_status"], [407, 3, 1, "", "delete_benchmark"], [407, 3, 1, "", "edit_benchmark"], [407, 3, 1, "", "get_benchmark_details"], [407, 3, 1, "", "list_benchmarks"], [407, 3, 1, "", "parse_benchmark_data"], [407, 3, 1, "", "parse_benchmark_edit_data"], [407, 3, 1, "", "update_benchmark_accuracy"], [407, 3, 1, "", "update_benchmark_duration"], [407, 3, 1, "", "update_benchmark_performance"], [407, 3, 1, "", "update_benchmark_status"], [407, 3, 1, "", "update_execution_command"], [407, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[407, 3, 1, "", "add_dataset"], [407, 3, 1, "", "check_if_custom_metric_or_dataloader"], [407, 3, 1, "", "dataloader_path"], [407, 3, 1, "", "delete_dataset"], [407, 3, 1, "", "generate_custom_template"], [407, 3, 1, "", "generate_template"], [407, 3, 1, "", "get_dataset_details"], [407, 3, 1, "", "get_predefined_dataset"], [407, 3, 1, "", "list_datasets"], [407, 3, 1, "", "parse_dataset_data"], [407, 3, 1, "", "prepare_predefined_dataloader"], [407, 3, 1, "", "prepare_predefined_transform"], [407, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[407, 3, 1, "", "generate_optimization"], [407, 3, 1, "", "get_op_details"], [407, 3, 1, "", "get_op_list"], [407, 3, 1, "", "histogram"], [407, 3, 1, "", "model_wise_params"], [407, 3, 1, "", "parse_model_wise_config"], [407, 3, 1, "", "parse_op_wise_config"], [407, 3, 1, "", "parse_optimization_data"], [407, 3, 1, "", "parse_wise_parameters"], [407, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[407, 3, 1, "", "list_dataloaders"], [407, 3, 1, "", "list_dataloaders_by_framework"], [407, 3, 1, "", "list_domain_flavours"], [407, 3, 1, "", "list_domains"], [407, 3, 1, "", "list_metrics"], [407, 3, 1, "", "list_metrics_by_framework"], [407, 3, 1, "", "list_optimization_types"], [407, 3, 1, "", "list_optimization_types_for_precision"], [407, 3, 1, "", "list_precisions"], [407, 3, 1, "", "list_transforms"], [407, 3, 1, "", "list_transforms_by_domain"], [407, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[407, 3, 1, "", "create_project"], [407, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[407, 3, 1, "", "add_model"], [407, 3, 1, "", "delete_model"], [407, 3, 1, "", "get_model_details"], [407, 3, 1, "", "list_models"], [407, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[407, 3, 1, "", "add_optimization"], [407, 3, 1, "", "add_pruning_optimization"], [407, 3, 1, "", "add_quantization_optimization"], [407, 3, 1, "", "add_standard_optimization"], [407, 3, 1, "", "add_tuning_history"], [407, 3, 1, "", "clean_status"], [407, 3, 1, "", "delete_optimization"], [407, 3, 1, "", "edit_optimization"], [407, 3, 1, "", "edit_pruning_details"], [407, 3, 1, "", "edit_tuning_details"], [407, 3, 1, "", "get_optimization_details"], [407, 3, 1, "", "get_pruning_details"], [407, 3, 1, "", "list_optimizations"], [407, 3, 1, "", "load_pruning_details_config"], [407, 3, 1, "", "parse_optimization_data"], [407, 3, 1, "", "parse_optimization_edit_data"], [407, 3, 1, "", "parse_tuning_history"], [407, 3, 1, "", "pin_accuracy_benchmark"], [407, 3, 1, "", "pin_performance_benchmark"], [407, 3, 1, "", "update_execution_command"], [407, 3, 1, "", "update_optimization_duration"], [407, 3, 1, "", "update_optimization_status"], [407, 3, 1, "", "update_optimized_model"], [407, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[407, 3, 1, "", "add_profiling"], [407, 3, 1, "", "add_result"], [407, 3, 1, "", "bulk_add_results"], [407, 3, 1, "", "clean_status"], [407, 3, 1, "", "delete_profiling"], [407, 3, 1, "", "edit_profiling"], [407, 3, 1, "", "get_profiling_details"], [407, 3, 1, "", "list_profilings"], [407, 3, 1, "", "parse_profiling_data"], [407, 3, 1, "", "parse_profiling_edit_data"], [407, 3, 1, "", "parse_profiling_result_data"], [407, 3, 1, "", "update_execution_command"], [407, 3, 1, "", "update_log_path"], [407, 3, 1, "", "update_profiling_duration"], [407, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[407, 3, 1, "", "add_dummy_dataset"], [407, 3, 1, "", "add_model"], [407, 3, 1, "", "create_project"], [407, 3, 1, "", "delete_project"], [407, 3, 1, "", "get_project_details"], [407, 3, 1, "", "list_projects"], [407, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[401, 2, 1, "", "BenchmarkAPIInterface"], [401, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[401, 3, 1, "", "add_benchmark"], [401, 3, 1, "", "add_result"], [401, 3, 1, "", "clean_status"], [401, 3, 1, "", "delete_benchmark"], [401, 3, 1, "", "edit_benchmark"], [401, 3, 1, "", "get_benchmark_details"], [401, 3, 1, "", "list_benchmarks"], [401, 3, 1, "", "parse_benchmark_data"], [401, 3, 1, "", "parse_benchmark_edit_data"], [401, 3, 1, "", "update_benchmark_accuracy"], [401, 3, 1, "", "update_benchmark_duration"], [401, 3, 1, "", "update_benchmark_performance"], [401, 3, 1, "", "update_benchmark_status"], [401, 3, 1, "", "update_execution_command"], [401, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[402, 2, 1, "", "DatasetAPIInterface"], [402, 1, 1, "", "initialize_associations"], [402, 1, 1, "", "initialize_precision_optimization_types_association"], [402, 1, 1, "", "search_in_list_of_dict"], [402, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [402, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[402, 3, 1, "", "add_dataset"], [402, 3, 1, "", "check_if_custom_metric_or_dataloader"], [402, 3, 1, "", "dataloader_path"], [402, 3, 1, "", "delete_dataset"], [402, 3, 1, "", "generate_custom_template"], [402, 3, 1, "", "generate_template"], [402, 3, 1, "", "get_dataset_details"], [402, 3, 1, "", "get_predefined_dataset"], [402, 3, 1, "", "list_datasets"], [402, 3, 1, "", "parse_dataset_data"], [402, 3, 1, "", "prepare_predefined_dataloader"], [402, 3, 1, "", "prepare_predefined_transform"], [402, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[403, 1, 1, "", "initialize_associations"], [403, 1, 1, "", "initialize_precision_optimization_types_association"], [403, 1, 1, "", "search_in_list_of_dict"], [403, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [403, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[404, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[404, 3, 1, "", "generate_optimization"], [404, 3, 1, "", "get_op_details"], [404, 3, 1, "", "get_op_list"], [404, 3, 1, "", "histogram"], [404, 3, 1, "", "model_wise_params"], [404, 3, 1, "", "parse_model_wise_config"], [404, 3, 1, "", "parse_op_wise_config"], [404, 3, 1, "", "parse_optimization_data"], [404, 3, 1, "", "parse_wise_parameters"], [404, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[405, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[405, 3, 1, "", "list_dataloaders"], [405, 3, 1, "", "list_dataloaders_by_framework"], [405, 3, 1, "", "list_domain_flavours"], [405, 3, 1, "", "list_domains"], [405, 3, 1, "", "list_metrics"], [405, 3, 1, "", "list_metrics_by_framework"], [405, 3, 1, "", "list_optimization_types"], [405, 3, 1, "", "list_optimization_types_for_precision"], [405, 3, 1, "", "list_precisions"], [405, 3, 1, "", "list_transforms"], [405, 3, 1, "", "list_transforms_by_domain"], [405, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[406, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[406, 3, 1, "", "create_project"], [406, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[408, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[408, 3, 1, "", "add_model"], [408, 3, 1, "", "delete_model"], [408, 3, 1, "", "get_model_details"], [408, 3, 1, "", "list_models"], [408, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[409, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[409, 3, 1, "", "add_optimization"], [409, 3, 1, "", "add_pruning_optimization"], [409, 3, 1, "", "add_quantization_optimization"], [409, 3, 1, "", "add_standard_optimization"], [409, 3, 1, "", "add_tuning_history"], [409, 3, 1, "", "clean_status"], [409, 3, 1, "", "delete_optimization"], [409, 3, 1, "", "edit_optimization"], [409, 3, 1, "", "edit_pruning_details"], [409, 3, 1, "", "edit_tuning_details"], [409, 3, 1, "", "get_optimization_details"], [409, 3, 1, "", "get_pruning_details"], [409, 3, 1, "", "list_optimizations"], [409, 3, 1, "", "load_pruning_details_config"], [409, 3, 1, "", "parse_optimization_data"], [409, 3, 1, "", "parse_optimization_edit_data"], [409, 3, 1, "", "parse_tuning_history"], [409, 3, 1, "", "pin_accuracy_benchmark"], [409, 3, 1, "", "pin_performance_benchmark"], [409, 3, 1, "", "update_execution_command"], [409, 3, 1, "", "update_optimization_duration"], [409, 3, 1, "", "update_optimization_status"], [409, 3, 1, "", "update_optimized_model"], [409, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[410, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[410, 3, 1, "", "add_profiling"], [410, 3, 1, "", "add_result"], [410, 3, 1, "", "bulk_add_results"], [410, 3, 1, "", "clean_status"], [410, 3, 1, "", "delete_profiling"], [410, 3, 1, "", "edit_profiling"], [410, 3, 1, "", "get_profiling_details"], [410, 3, 1, "", "list_profilings"], [410, 3, 1, "", "parse_profiling_data"], [410, 3, 1, "", "parse_profiling_edit_data"], [410, 3, 1, "", "parse_profiling_result_data"], [410, 3, 1, "", "update_execution_command"], [410, 3, 1, "", "update_log_path"], [410, 3, 1, "", "update_profiling_duration"], [410, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[411, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[411, 3, 1, "", "add_dummy_dataset"], [411, 3, 1, "", "add_model"], [411, 3, 1, "", "create_project"], [411, 3, 1, "", "delete_project"], [411, 3, 1, "", "get_project_details"], [411, 3, 1, "", "list_projects"], [411, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[413, 2, 1, "", "BenchmarkAddParamsInterface"], [413, 2, 1, "", "BenchmarkEditParamsInterface"], [413, 2, 1, "", "DatasetAddParamsInterface"], [413, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [413, 2, 1, "", "ModelAddParamsInterface"], [413, 2, 1, "", "OptimizationAddParamsInterface"], [413, 2, 1, "", "OptimizationEditParamsInterface"], [413, 2, 1, "", "ProfilingAddParamsInterface"], [413, 2, 1, "", "ProfilingEditParamsInterface"], [413, 2, 1, "", "ProfilingResultAddParamsInterface"], [413, 2, 1, "", "TuningHistoryInterface"], [413, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[413, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[413, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[413, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[414, 1, 1, "", "get_framework_dataloaders_config"], [414, 1, 1, "", "get_framework_transforms_config"], [414, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[415, 0, 0, "-", "diagnosis"], [416, 0, 0, "-", "factory"], [418, 0, 0, "-", "onnx_diagnosis"], [420, 0, 0, "-", "op_details"], [421, 0, 0, "-", "op_entry"], [422, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[415, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[415, 3, 1, "", "calculate_mse"], [415, 3, 1, "", "get_histogram_data"], [415, 3, 1, "", "get_op_details"], [415, 3, 1, "", "get_op_list"], [415, 3, 1, "", "get_tensors_info"], [415, 3, 1, "", "load_quantization_config"], [415, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[416, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[416, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[419, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[419, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[419, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[420, 2, 1, "", "OpActivation"], [420, 2, 1, "", "OpDetails"], [420, 2, 1, "", "OpPattern"], [420, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[420, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[421, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[421, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[423, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[423, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[423, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[424, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[424, 1, 1, "", "create_dir_entry"], [424, 1, 1, "", "create_entry"], [424, 1, 1, "", "create_file_entry"], [424, 1, 1, "", "filter_requested_entries"], [424, 1, 1, "", "get_directory_entries"], [424, 1, 1, "", "get_filter_value"], [424, 1, 1, "", "get_non_hidden_directory_entries"], [424, 1, 1, "", "get_requested_path"], [424, 1, 1, "", "get_setting_value"], [424, 1, 1, "", "is_dataset_or_directory_entry"], [424, 1, 1, "", "is_directory_entry"], [424, 1, 1, "", "is_model_or_directory_entry"], [424, 1, 1, "", "should_show_files"], [424, 1, 1, "", "should_show_only_model_files"], [424, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[426, 0, 0, "-", "attribute"], [427, 0, 0, "-", "collapser"], [428, 0, 0, "-", "edge"], [429, 0, 0, "-", "graph"], [430, 0, 0, "-", "graph_reader"], [432, 0, 0, "-", "node"], [433, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[426, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[427, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[427, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[428, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[428, 4, 1, "", "source"], [428, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[429, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[429, 3, 1, "", "add_edge"], [429, 3, 1, "", "add_node"], [429, 4, 1, "", "edges"], [429, 3, 1, "", "get_node"], [429, 3, 1, "", "get_target_nodes"], [429, 3, 1, "", "highlight_pattern"], [429, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[430, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[430, 3, 1, "", "find_pattern_in_graph"], [430, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[432, 2, 1, "", "GroupNode"], [432, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[434, 0, 0, "-", "onnxrt_reader"], [435, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[434, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[434, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[435, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[435, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[438, 0, 0, "-", "jobs_control_queue"], [439, 0, 0, "-", "jobs_manager"], [440, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[441, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[442, 0, 0, "-", "domain"], [444, 0, 0, "-", "model"], [445, 0, 0, "-", "model_type_getter"], [446, 0, 0, "-", "onnxrt"], [448, 0, 0, "-", "pytorch"], [450, 0, 0, "-", "repository"], [451, 0, 0, "-", "shape"], [453, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[442, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[444, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[444, 4, 1, "", "domain"], [444, 3, 1, "", "ensure_supported_path"], [444, 3, 1, "", "get_framework_name"], [444, 3, 1, "", "get_input_nodes"], [444, 3, 1, "", "get_model_graph"], [444, 3, 1, "", "get_output_nodes"], [444, 3, 1, "", "get_tensors_info"], [444, 3, 1, "", "guard_requirements_installed"], [444, 4, 1, "", "input_shape"], [444, 4, 1, "", "shape_elements_order"], [444, 4, 1, "", "supports_graph"], [444, 3, 1, "", "supports_path"], [444, 4, 1, "", "supports_profiling"], [444, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.model_type_getter": [[445, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[447, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[447, 2, 1, "", "OnnxrtModel"], [447, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[447, 4, 1, "", "domain"], [447, 4, 1, "", "filtered_input_nodes"], [447, 3, 1, "", "get_framework_name"], [447, 3, 1, "", "get_model_graph"], [447, 3, 1, "", "guard_requirements_installed"], [447, 4, 1, "", "input_shape"], [447, 4, 1, "", "nc_model_instance"], [447, 4, 1, "", "shape_elements_order"], [447, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[449, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[449, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[449, 3, 1, "", "get_framework_name"], [449, 3, 1, "", "guard_requirements_installed"], [449, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[450, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[450, 3, 1, "", "get_framework_from_path"], [450, 3, 1, "", "get_frameworks"], [450, 3, 1, "", "get_model"], [450, 3, 1, "", "get_supported_frameworks"], [450, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[451, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[451, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[452, 0, 0, "-", "frozen_pb"], [454, 0, 0, "-", "keras"], [455, 0, 0, "-", "meta_graph"], [456, 0, 0, "-", "model"], [457, 0, 0, "-", "saved_model"], [458, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[452, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[452, 3, 1, "", "supports_path"], [452, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[454, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[454, 3, 1, "", "get_input_nodes"], [454, 3, 1, "", "get_output_nodes"], [454, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[455, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[455, 3, 1, "", "get_input_nodes"], [455, 3, 1, "", "get_model_graph"], [455, 3, 1, "", "get_output_nodes"], [455, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[456, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[456, 3, 1, "", "get_framework_name"], [456, 3, 1, "", "get_input_nodes"], [456, 3, 1, "", "get_model_graph"], [456, 3, 1, "", "get_output_nodes"], [456, 3, 1, "", "guard_requirements_installed"], [456, 4, 1, "", "input_shape"], [456, 4, 1, "", "nc_model_instance"], [456, 4, 1, "", "shape_elements_order"], [456, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[457, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[457, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[458, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[459, 0, 0, "-", "download_config"], [460, 0, 0, "-", "download_model"], [461, 0, 0, "-", "downloader"], [463, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[459, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[460, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[461, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[461, 3, 1, "", "download"], [461, 3, 1, "", "download_config"], [461, 3, 1, "", "download_file"], [461, 3, 1, "", "download_model"], [461, 3, 1, "", "download_yaml_config"], [461, 3, 1, "", "get_yaml_url"], [461, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[463, 1, 1, "", "check_version"], [463, 1, 1, "", "get_available_models"], [463, 1, 1, "", "get_framework_module_name"], [463, 1, 1, "", "get_installed_frameworks"], [463, 1, 1, "", "list_models"], [463, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[465, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[465, 2, 1, "", "MappingDirection"], [465, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[465, 4, 1, "", "domain_flavour_mappings"], [465, 4, 1, "", "domain_mappings"], [465, 4, 1, "", "framework_mappings"], [465, 3, 1, "", "map_name"], [465, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[471, 2, 1, "", "Optimizations"], [466, 0, 0, "-", "execute_optimization"], [467, 0, 0, "-", "factory"], [469, 0, 0, "-", "graph_optimizer"], [472, 0, 0, "-", "mixed_precision"], [475, 0, 0, "-", "neural_coder_optimization"], [477, 0, 0, "-", "optimization"], [478, 0, 0, "-", "pruning"], [481, 0, 0, "-", "tune"], [484, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[466, 1, 1, "", "check_if_collect_tuning_history"], [466, 1, 1, "", "execute_optimization"], [466, 1, 1, "", "execute_optimization_pytorch_script"], [466, 1, 1, "", "execute_optimization_regular"], [466, 1, 1, "", "parse_logs"], [466, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[467, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[467, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[468, 0, 0, "-", "graph_optimization"], [470, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[468, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[468, 4, 1, "", "configuration_data"], [468, 3, 1, "", "execute"], [468, 3, 1, "", "generate_config"], [468, 4, 1, "", "optimization_script"], [468, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[470, 1, 1, "", "optimize_graph"], [470, 1, 1, "", "optimize_graph_config"], [470, 1, 1, "", "parse_args"], [470, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[473, 0, 0, "-", "mixed_precision"], [474, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[473, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[473, 4, 1, "", "configuration_data"], [473, 3, 1, "", "execute"], [473, 3, 1, "", "generate_config"], [473, 4, 1, "", "optimization_script"], [473, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[474, 1, 1, "", "optimize_graph"], [474, 1, 1, "", "optimize_graph_config"], [474, 1, 1, "", "parse_args"], [474, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[476, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[476, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[477, 2, 1, "", "DataloaderInterface"], [477, 2, 1, "", "Optimization"], [477, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[477, 4, 1, "", "command"], [477, 4, 1, "", "config_filename"], [477, 4, 1, "", "configuration_data"], [477, 3, 1, "", "execute"], [477, 3, 1, "", "generate_config"], [477, 4, 1, "", "optimization_script"], [477, 4, 1, "", "output_model_dir"], [477, 4, 1, "", "output_model_name"], [477, 4, 1, "", "parameters"], [477, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.pruning": [[479, 0, 0, "-", "optimize_model"], [480, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[479, 1, 1, "", "optimize_model"], [479, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[480, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning.Pruning": [[480, 4, 1, "", "configuration_data"], [480, 3, 1, "", "execute"], [480, 3, 1, "", "generate_config"], [480, 4, 1, "", "optimization_script"], [480, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tune": [[482, 0, 0, "-", "tune_model"], [483, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[482, 1, 1, "", "parse_args"], [482, 1, 1, "", "set_eager_execution"], [482, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[483, 2, 1, "", "AccuracyCriterion"], [483, 2, 1, "", "Tuning"], [483, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[483, 4, 1, "", "configuration_data"], [483, 3, 1, "", "execute"], [483, 3, 1, "", "generate_config"], [483, 4, 1, "", "optimization_script"], [483, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[484, 2, 1, "", "TuningHistory"], [484, 2, 1, "", "Watcher"], [484, 1, 1, "", "tuning_history"], [484, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[484, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[484, 3, 1, "", "history_file_modification_time"], [484, 3, 1, "", "stop"], [484, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[485, 0, 0, "-", "execute_profiling"], [486, 0, 0, "-", "factory"], [488, 0, 0, "-", "profile_model"], [489, 0, 0, "-", "profiler"], [490, 0, 0, "-", "profiling"], [492, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[485, 1, 1, "", "execute_profiling"], [485, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[486, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[486, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[488, 1, 1, "", "load_profiling_details"], [488, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[489, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[489, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[490, 2, 1, "", "DataloaderInterface"], [490, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[490, 4, 1, "", "config_filename"], [490, 4, 1, "", "config_path"], [490, 3, 1, "", "execute"], [490, 3, 1, "", "generate_config"], [490, 4, 1, "", "profiling_data"], [490, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[491, 0, 0, "-", "factory"], [493, 0, 0, "-", "profiler"], [494, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[491, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[491, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[493, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[493, 3, 1, "", "build_dataloader"], [493, 3, 1, "", "convert_nodes_to_list"], [493, 3, 1, "", "create_tf_config"], [493, 3, 1, "", "get_node_by_name"], [493, 3, 1, "", "initialize_graph"], [493, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[494, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[495, 1, 1, "", "main"], [495, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[497, 0, 0, "-", "consts"], [498, 0, 0, "-", "environment"], [499, 0, 0, "-", "exceptions"], [500, 0, 0, "-", "executor"], [501, 0, 0, "-", "expiring_dict"], [502, 0, 0, "-", "github_info"], [503, 0, 0, "-", "hw_info"], [505, 0, 0, "-", "json_serializer"], [506, 0, 0, "-", "logger"], [507, 0, 0, "-", "parser"], [508, 0, 0, "-", "proc"], [509, 0, 0, "-", "processes"], [510, 0, 0, "-", "singleton"], [511, 0, 0, "-", "status_updates"], [512, 0, 0, "-", "templates"], [515, 0, 0, "-", "utils"], [520, 0, 0, "-", "workload"], [526, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[497, 2, 1, "", "DomainFlavours"], [497, 2, 1, "", "Domains"], [497, 2, 1, "", "ExecutionStatus"], [497, 2, 1, "", "Frameworks"], [497, 2, 1, "", "OptimizationTypes"], [497, 2, 1, "", "Precisions"], [497, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[498, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[498, 3, 1, "", "clean_workloads_wip_status"], [498, 3, 1, "", "ensure_workdir_exists_and_writeable"], [498, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[499, 7, 1, "", "AccessDeniedException"], [499, 7, 1, "", "ClientErrorException"], [499, 7, 1, "", "InternalException"], [499, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[500, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[500, 4, 1, "", "additional_log_names"], [500, 3, 1, "", "call"], [500, 3, 1, "", "call_one"], [500, 3, 1, "", "is_multi_commands"], [500, 4, 1, "", "log_name"], [500, 4, 1, "", "process_duration"], [500, 3, 1, "", "refresh_workdir"], [500, 4, 1, "", "request_id"], [500, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[501, 2, 1, "", "ExpiringDict"], [501, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[501, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[502, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[502, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[503, 2, 1, "", "HWInfo"], [503, 1, 1, "", "get_bios_version"], [503, 1, 1, "", "get_distribution"], [503, 1, 1, "", "get_framework_dependency_info"], [503, 1, 1, "", "get_framework_info"], [503, 1, 1, "", "get_kernel_version"], [503, 1, 1, "", "get_number_of_sockets"], [503, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[503, 3, 1, "", "initialize"], [503, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[505, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[505, 3, 1, "", "serialize"], [505, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[506, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[507, 2, 1, "", "AccuracyParser"], [507, 2, 1, "", "BenchmarkParserFactory"], [507, 2, 1, "", "OptimizationParser"], [507, 2, 1, "", "Parser"], [507, 2, 1, "", "PerformanceParser"], [507, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[507, 4, 1, "", "patterns"], [507, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[507, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[507, 4, 1, "", "patterns"], [507, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[507, 4, 1, "", "patterns"], [507, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[507, 4, 1, "", "patterns"], [507, 3, 1, "", "process"], [507, 3, 1, "", "summarize_partial"], [507, 3, 1, "", "summarize_value"], [507, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[507, 4, 1, "", "patterns"], [507, 3, 1, "", "process"], [507, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[508, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[508, 4, 1, "", "info"], [508, 4, 1, "", "info_path"], [508, 4, 1, "", "is_ok"], [508, 4, 1, "", "output"], [508, 4, 1, "", "output_path"], [508, 3, 1, "", "remove_logs"], [508, 3, 1, "", "run"], [508, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[509, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[509, 4, 1, "", "is_ok"], [509, 3, 1, "", "remove_successful_logs"], [509, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[510, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[511, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[513, 0, 0, "-", "metric"], [514, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[513, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[513, 4, 1, "", "acc_input_model"], [513, 4, 1, "", "acc_optimized_model"], [513, 4, 1, "", "accuracy"], [513, 3, 1, "", "calculate_throughput"], [513, 3, 1, "", "insert_data"], [513, 4, 1, "", "latency"], [513, 4, 1, "", "optimization_time"], [513, 4, 1, "", "path_optimized_model"], [513, 4, 1, "", "profiling_data"], [513, 4, 1, "", "size_input_model"], [513, 4, 1, "", "size_optimized_model"], [513, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[514, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[514, 3, 1, "", "clean_logs"], [514, 3, 1, "", "clean_status"], [514, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[515, 1, 1, "", "check_module"], [515, 1, 1, "", "deprecated"], [515, 1, 1, "", "determine_ip"], [515, 1, 1, "", "export_to_csv"], [515, 1, 1, "", "filter_transforms"], [515, 1, 1, "", "get_dataset_path"], [515, 1, 1, "", "get_default_pruning_config_path"], [515, 1, 1, "", "get_file_extension"], [515, 1, 1, "", "get_framework_from_path"], [515, 1, 1, "", "get_height_width_from_size"], [515, 1, 1, "", "get_metrics_dict"], [515, 1, 1, "", "get_model_zoo_config_path"], [515, 1, 1, "", "get_model_zoo_model_path"], [515, 1, 1, "", "get_module_version"], [515, 1, 1, "", "get_predefined_config_path"], [515, 1, 1, "", "get_shape_from_transforms"], [515, 1, 1, "", "get_size"], [515, 1, 1, "", "is_dataset_file"], [515, 1, 1, "", "is_development_env"], [515, 1, 1, "", "is_hidden"], [515, 1, 1, "", "load_dataloader_config"], [515, 1, 1, "", "load_help_nc_params"], [515, 1, 1, "", "load_metrics_config"], [515, 1, 1, "", "load_model_config"], [515, 1, 1, "", "load_model_wise_params"], [515, 1, 1, "", "load_precisions_config"], [515, 1, 1, "", "load_pruning_details_config"], [515, 1, 1, "", "load_transforms_config"], [515, 1, 1, "", "load_transforms_filter_config"], [515, 1, 1, "", "normalize_domain"], [515, 1, 1, "", "normalize_framework"], [515, 1, 1, "", "normalize_string"], [515, 1, 1, "", "parse_bool_value"], [515, 1, 1, "", "parse_to_float_list"], [515, 1, 1, "", "parse_to_string_list"], [515, 1, 1, "", "parse_version"], [515, 1, 1, "", "release_tag"], [515, 1, 1, "", "replace_with_values"], [515, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[516, 0, 0, "-", "config"], [517, 0, 0, "-", "dataloader"], [518, 0, 0, "-", "evaluation"], [519, 0, 0, "-", "graph_optimization"], [521, 0, 0, "-", "mixed_precision"], [522, 0, 0, "-", "model"], [523, 0, 0, "-", "pruning"], [524, 0, 0, "-", "quantization"], [525, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[516, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[516, 3, 1, "", "dump"], [516, 3, 1, "", "get_performance_configs"], [516, 3, 1, "", "get_performance_cores_per_instance"], [516, 3, 1, "", "get_performance_num_of_instance"], [516, 3, 1, "", "initialize"], [516, 3, 1, "", "load"], [516, 3, 1, "", "process_transform"], [516, 3, 1, "", "remove_accuracy_metric"], [516, 3, 1, "", "remove_dataloader"], [516, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [516, 3, 1, "", "set_accuracy_goal"], [516, 3, 1, "", "set_accuracy_metric"], [516, 3, 1, "", "set_evaluation_dataloader"], [516, 3, 1, "", "set_evaluation_dataset_path"], [516, 3, 1, "", "set_inputs"], [516, 3, 1, "", "set_optimization_precision"], [516, 3, 1, "", "set_outputs"], [516, 3, 1, "", "set_performance_cores_per_instance"], [516, 3, 1, "", "set_performance_iterations"], [516, 3, 1, "", "set_performance_num_of_instance"], [516, 3, 1, "", "set_performance_warmup"], [516, 3, 1, "", "set_quantization_approach"], [516, 3, 1, "", "set_quantization_batch_size"], [516, 3, 1, "", "set_quantization_dataloader"], [516, 3, 1, "", "set_quantization_dataset_path"], [516, 3, 1, "", "set_quantization_sampling_size"], [516, 3, 1, "", "set_transform"], [516, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[517, 2, 1, "", "Dataloader"], [517, 2, 1, "", "Dataset"], [517, 2, 1, "", "Filter"], [517, 2, 1, "", "LabelBalance"], [517, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[517, 3, 1, "", "serialize"], [517, 3, 1, "", "set_dataset"], [517, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[517, 3, 1, "", "is_dummy"], [517, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[517, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[518, 2, 1, "", "Accuracy"], [518, 2, 1, "", "Configs"], [518, 2, 1, "", "Evaluation"], [518, 2, 1, "", "Metric"], [518, 2, 1, "", "Performance"], [518, 2, 1, "", "Postprocess"], [518, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[518, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[518, 4, 1, "", "name"], [518, 4, 1, "", "param"], [518, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema": [[518, 3, 1, "", "get_label_shift_value"]], "neural_compressor.ux.utils.workload.graph_optimization": [[519, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[519, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[521, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[521, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[522, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[522, 4, 1, "", "inputs"], [522, 4, 1, "", "outputs"], [522, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[523, 2, 1, "", "AdamOptimizer"], [523, 2, 1, "", "AdamWOptimizer"], [523, 2, 1, "", "Approach"], [523, 2, 1, "", "Criterion"], [523, 2, 1, "", "CrossEntropyLossCriterion"], [523, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [523, 2, 1, "", "KnowledgeDistillationLossCriterion"], [523, 2, 1, "", "Optimizer"], [523, 2, 1, "", "Pruning"], [523, 2, 1, "", "SGDOptimizer"], [523, 2, 1, "", "SelfKnowledgeDistillationLoss"], [523, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [523, 2, 1, "", "Train"], [523, 2, 1, "", "WeightCompressionApproach"], [523, 1, 1, "", "parse_dict_value_to_float"], [523, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[523, 3, 1, "", "serialize"], [523, 3, 1, "", "set_postprocess_transforms"]], "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach": [[523, 3, 1, "", "initialize_pruners"], [523, 3, 1, "", "serialize"], [523, 3, 1, "", "serialize_pruner"]], "neural_compressor.ux.utils.workload.quantization": [[524, 2, 1, "", "Advance"], [524, 2, 1, "", "Calibration"], [524, 2, 1, "", "Quantization"], [524, 2, 1, "", "WiseConfig"], [524, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[525, 2, 1, "", "AccCriterion"], [525, 2, 1, "", "Diagnosis"], [525, 2, 1, "", "ExitPolicy"], [525, 2, 1, "", "MultiObjectives"], [525, 2, 1, "", "Strategy"], [525, 2, 1, "", "Tuning"], [525, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[525, 4, 1, "", "objective"], [525, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[525, 3, 1, "", "set_max_trials"], [525, 3, 1, "", "set_performance_only"], [525, 3, 1, "", "set_random_seed"], [525, 3, 1, "", "set_timeout"], [525, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[526, 1, 1, "", "float_representer"], [526, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[527, 0, 0, "-", "communication"], [528, 0, 0, "-", "configuration"], [529, 0, 0, "-", "exceptions"], [531, 0, 0, "-", "router"], [532, 0, 0, "-", "server"], [535, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[527, 2, 1, "", "Message"], [527, 2, 1, "", "MessageQueue"], [527, 2, 1, "", "Request"], [527, 2, 1, "", "Response"], [527, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[527, 4, 1, "", "data"], [527, 4, 1, "", "status"], [527, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[527, 3, 1, "", "get"], [527, 3, 1, "", "post_error"], [527, 3, 1, "", "post_failure"], [527, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[528, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[528, 3, 1, "", "determine_gui_port"], [528, 3, 1, "", "determine_log_level"], [528, 3, 1, "", "determine_server_port"], [528, 3, 1, "", "determine_url_prefix"], [528, 3, 1, "", "determine_values_from_environment"], [528, 3, 1, "", "dump_token_to_file"], [528, 3, 1, "", "get_command_line_args"], [528, 3, 1, "", "get_url"], [528, 4, 1, "", "global_config_directory"], [528, 3, 1, "", "is_port_taken"], [528, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[529, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[531, 2, 1, "", "DeferredRoutingDefinition"], [531, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [531, 2, 1, "", "RealtimeRoutingDefinition"], [531, 2, 1, "", "Router"], [531, 2, 1, "", "RoutingDefinition"], [531, 1, 1, "", "find_pattern_in_graph"], [531, 1, 1, "", "get_model_graph"], [531, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[531, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[532, 1, 1, "", "allow_api_call"], [532, 1, 1, "", "block_iframe"], [532, 1, 1, "", "block_sniffing"], [532, 1, 1, "", "build_parameters"], [532, 1, 1, "", "disable_cache"], [532, 1, 1, "", "get_tls_args"], [532, 1, 1, "", "handle_api_call"], [532, 1, 1, "", "page_not_found"], [532, 1, 1, "", "require_api_token"], [532, 1, 1, "", "root"], [532, 1, 1, "", "run_server"], [532, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[533, 0, 0, "-", "benchmark"], [534, 0, 0, "-", "history_snapshot_parser"], [536, 0, 0, "-", "model"], [537, 0, 0, "-", "optimization"], [538, 0, 0, "-", "profiling"], [539, 0, 0, "-", "request_data_processor"], [540, 0, 0, "-", "response_generator"], [541, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[533, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[534, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[534, 3, 1, "", "extract_accuracy"], [534, 3, 1, "", "extract_performance"], [534, 3, 1, "", "parse_history_item"], [534, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[536, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[536, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[537, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[538, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[538, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[539, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[539, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[540, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[540, 3, 1, "", "add_refresh"], [540, 3, 1, "", "from_exception"], [540, 3, 1, "", "get_status_code_for_exception"], [540, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[541, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[541, 3, 1, "", "get_code_template"], [541, 3, 1, "", "get_config"], [541, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data", "6": "py:attribute", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contributor": [0, 546], "coven": [0, 546], "code": [0, 2, 546], "conduct": [0, 546], "our": [0, 546], "pledg": [0, 546], "standard": [0, 546], "respons": [0, 546], "scope": [0, 546], "enforc": [0, 546], "attribut": [0, 191, 199, 208, 237, 246, 257, 285, 310, 426, 546], "fx": 1, "introduct": [1, 2, 7, 544, 550, 551, 552, 555, 557, 560, 563, 564, 565, 566, 567, 569, 570, 572, 573, 576, 577, 579, 580], "mode": [1, 581], "support": [1, 2, 6, 7, 543, 546, 548, 550, 552, 555, 557, 560, 563, 564, 565, 566, 567, 569, 572, 573, 577, 578, 580], "matrix": [1, 2, 7, 543, 550, 552, 555, 557, 560, 563, 564, 565, 566, 567, 569, 572, 573, 577, 580], "neural": [1, 2, 6, 24, 544, 559, 560, 569, 570, 576], "compressor": [1, 6, 544, 559, 560, 576], "get": [1, 2, 6, 7, 550, 552, 557, 563, 564, 566, 567, 569, 572, 573, 577, 580], "start": [1, 2, 6, 7, 544, 550, 552, 557, 563, 564, 566, 567, 569, 572, 573, 577, 580], "post": [1, 573], "train": [1, 4, 350, 552, 573], "static": [1, 573], "quantiz": [1, 4, 6, 26, 41, 68, 297, 334, 524, 543, 551, 553, 572, 573, 574, 581], "dynam": [1, 2, 553, 573], "awar": [1, 4, 573], "exampl": [1, 2, 3, 4, 7, 386, 545, 550, 551, 552, 554, 555, 564, 565, 566, 567, 569, 570, 573, 577, 581], "note": 1, "detail": [1, 544], "common": [1, 10, 216, 217, 218, 219, 220, 221, 222, 223, 556], "problem": 1, "architectur": [2, 3, 6, 24, 549, 560], "search": [2, 24], "basic": [2, 336, 579], "na": [2, 24, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 572], "api": [2, 6, 7, 9, 21, 550, 552, 558, 563, 564, 566, 567, 569, 572], "usag": [2, 3, 4, 577, 579], "1": [2, 544, 552, 556, 558, 561, 581], "python": [2, 6, 28, 563, 572], "yaml": [2, 545, 547, 551, 552, 557, 580], "2": [2, 21, 544, 552, 556, 558, 561, 581], "onli": 2, "advanc": 2, "custom": [2, 544, 563, 566, 579], "ptq": [3, 581], "design": [3, 4, 549, 579], "pytorch": [3, 70, 359, 448, 449, 543, 548, 552, 563, 574, 577, 578, 581], "mobilenetv2": 3, "model": [3, 6, 19, 220, 309, 310, 311, 312, 313, 314, 315, 316, 317, 390, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 522, 536, 544, 555, 565, 581], "helper": 3, "function": [3, 32, 36, 37, 44, 63, 69, 70, 92, 93, 95, 137, 166, 168, 172, 173, 175, 177, 179, 189, 197, 199, 203, 206, 207, 208, 211, 213, 214, 215, 216, 218, 221, 223, 227, 235, 237, 241, 244, 245, 246, 248, 249, 250, 252, 253, 254, 255, 258, 259, 261, 262, 263, 264, 265, 273, 277, 278, 282, 287, 292, 293, 294, 296, 300, 301, 303, 304, 305, 306, 307, 312, 316, 318, 319, 322, 328, 329, 331, 332, 333, 334, 337, 345, 350, 353, 359, 360, 362, 363, 373, 374, 375, 377, 382, 384, 385, 387, 389, 392, 393, 398, 401, 402, 403, 414, 424, 441, 445, 447, 458, 459, 460, 463, 466, 470, 474, 476, 479, 482, 484, 485, 488, 494, 495, 503, 506, 511, 515, 523, 526, 527, 531, 532, 552], "secur": [5, 544, 552], "polici": [5, 579], "report": 5, "vulner": 5, "intel": [6, 544, 559, 560, 581], "instal": [6, 544, 561], "prerequisit": [6, 561], "linux": [6, 561], "jupyterlab": 6, "extens": [6, 581], "gui": 6, "system": [6, 544, 568], "requir": 6, "valid": [6, 581], "hardwar": [6, 581], "environ": [6, 498], "cpu": [6, 581], "base": 6, "64": 6, "compat": 6, "processor": 6, "gpu": 6, "built": [6, 548, 558, 563], "": 6, "xe": 6, "onnx": [6, 170, 543, 581], "multipl": [6, 566, 581], "vendor": 6, "through": [6, 581], "runtim": [6, 543, 581], "softwar": 6, "document": [6, 559], "select": 6, "public": [6, 571], "event": [6, 571], "addit": 6, "content": [6, 12, 24, 32, 36, 37, 38, 39, 42, 44, 45, 46, 59, 63, 69, 70, 71, 72, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 134, 136, 137, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 168, 172, 173, 174, 175, 176, 177, 178, 179, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 353, 354, 355, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 426, 427, 428, 429, 430, 432, 434, 435, 441, 442, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 466, 467, 468, 470, 471, 473, 474, 476, 477, 479, 480, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 544], "hire": 6, "adaptor": [7, 8, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172], "work": [7, 573], "flow": [7, 573], "queri": [7, 71], "background": 7, "ad": 7, "new": [7, 544, 579], "backend": 7, "capabl": 7, "implement": 7, "onnxrtadaptor": 7, "class": [7, 12, 24, 37, 39, 42, 44, 45, 46, 69, 70, 71, 72, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 134, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 168, 173, 174, 175, 176, 177, 178, 179, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 258, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 277, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 303, 306, 307, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 322, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 349, 350, 351, 354, 355, 360, 361, 364, 365, 366, 367, 369, 370, 371, 372, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 419, 420, 421, 423, 426, 427, 428, 429, 430, 432, 434, 435, 442, 444, 447, 449, 450, 451, 452, 454, 455, 456, 457, 461, 465, 467, 468, 471, 473, 477, 480, 483, 484, 486, 489, 490, 491, 493, 497, 498, 500, 501, 502, 503, 505, 507, 508, 509, 510, 513, 514, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 531, 533, 534, 536, 537, 538, 539, 540, 541], "benchmark": [11, 177, 215, 361, 362, 363, 364, 380, 533, 544, 545, 572], "bleu": [12, 258, 300], "modul": [12, 32, 36, 37, 39, 42, 44, 45, 46, 63, 69, 70, 71, 72, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 134, 136, 137, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 168, 172, 173, 174, 176, 177, 178, 179, 182, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 247, 249, 250, 251, 253, 254, 255, 256, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 277, 278, 279, 281, 282, 283, 284, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 300, 301, 303, 304, 305, 307, 309, 311, 312, 313, 315, 316, 317, 318, 319, 322, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 349, 350, 351, 353, 355, 359, 360, 361, 362, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 419, 420, 421, 423, 424, 426, 427, 428, 429, 430, 432, 434, 435, 441, 442, 444, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 466, 467, 468, 470, 473, 474, 476, 477, 479, 480, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541], "criterion": [13, 216], "data": [14, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], "dataload": [15, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 217, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 382, 517, 545, 547], "basedataload": 15, "dataset": [16, 197, 198, 199, 200, 201, 202, 203, 204, 235, 236, 237, 238, 239, 240, 241, 242, 383, 544, 548, 558], "transform": [17, 209, 210, 211, 212, 213, 214, 247, 248, 249, 250, 398, 558, 578], "metric": [18, 219, 258, 259, 260, 261, 262, 263, 264, 265, 300, 301, 302, 303, 304, 305, 306, 307, 389, 513, 558, 563], "optim": [20, 221, 391, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 537, 544, 567], "compon": [21, 224, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494], "experiement": 21, "deprec": 21, "0": [21, 581], "distil": [22, 251, 550, 551, 572, 581], "mixedprecis": 23, "packag": [24, 38, 59, 175, 191, 203, 207, 208, 211, 218, 229, 241, 245, 246, 248, 252, 257, 264, 280, 285, 286, 299, 306, 310, 325, 341, 346, 354, 364, 407, 412, 471], "prune": [25, 284, 295, 330, 478, 479, 480, 523, 544, 569, 570, 572, 581], "schedul": [27, 296, 298, 332, 569, 570], "strategi": [29, 30, 184, 185, 186, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 576, 579], "644ec953a7dc_pruning_support": 31, "6ece06672ed3_v1_14": 32, "6f0d0f71d92e_v1_13": 33, "9e89549a08c8_v1_11": 34, "block_mask": 35, "env": 36, "neural_compressor": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542], "kera": [39, 454], "keras_util": [40, 41], "mxnet": [42, 543, 548, 563, 578, 581], "mxnet_util": [43, 44], "util": [44, 69, 166, 172, 255, 333, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 414, 458, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526], "onnxrt": [45, 446, 447, 548, 563, 578], "ox_util": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], "calibr": 46, "oper": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67], "activ": 48, "argmax": 49, "attent": 50, "binary_op": 51, "concat": 52, "conv": 53, "direct_q8": 54, "embed_layernorm": 55, "gather": 56, "gavgpool": 57, "gemm": 58, "lstm": 60, "matmul": 61, "maxpool": 62, "op": 63, "pad": 64, "pool": 65, "resiz": 66, "split": 67, "tensorflow": [72, 452, 453, 454, 455, 456, 457, 458, 543, 548, 552, 563, 574, 577, 578, 581], "tf_util": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166], "graph_convert": 73, "graph_converter_without_calib": 74, "graph_rewrit": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], "bf16": [75, 76], "bf16_convert": [75, 167], "gener": [77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "convert_add_to_biasadd": 77, "convert_layout": 78, "convert_leakyrelu": 79, "convert_nan_to_random": 80, "convert_placeholder_to_const": 81, "dequantize_cast_optim": 82, "dilated_contract": 83, "dummy_biasadd": 84, "expanddims_optim": 85, "fetch_weight_from_reshap": 86, "fold_batch_norm": 87, "fold_const": 88, "fuse_biasadd_add": 89, "fuse_column_wise_mul": 90, "fuse_conv_with_math": 91, "fuse_decomposed_bn": 92, "fuse_decomposed_in": 93, "fuse_gelu": 94, "fuse_layer_norm": 95, "fuse_pad_with_conv": 96, "fuse_pad_with_fp32_conv": 97, "fuse_reshape_transpos": 98, "graph_cse_optim": 99, "grappler_pass": 100, "insert_print_nod": 102, "move_squeeze_after_relu": 103, "pre_optim": 104, "remove_training_nod": 105, "rename_batch_norm": 106, "split_shared_input": 107, "strip_equivalent_nod": 108, "strip_unused_nod": 109, "switch_optim": 110, "update_ent": 111, "graph_bas": 112, "int8": [114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 555, 581], "freeze_fake_qu": 114, "freeze_valu": 115, "freeze_value_without_calib": 116, "fuse_conv_redundant_dequant": 117, "fuse_conv_requant": 118, "fuse_matmul_redundant_dequant": 119, "fuse_matmul_requant": 120, "meta_op_optim": 122, "post_hostconst_convert": 123, "post_quantized_op_cs": 124, "rnn_convert": 125, "scale_propag": 126, "qdq": [127, 128, 129, 130, 144, 145, 146, 147, 148, 149, 150, 151, 152, 581], "insert_qdq_pattern": 128, "merge_duplicated_qdq": 129, "share_qdq_y_pattern": 130, "graph_util": 131, "quantize_graph": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], "qat": [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 581], "fake_quant": 134, "quantize_config": 136, "quantize_help": 137, "quantize_lay": [138, 139, 140, 141, 142], "optimize_lay": 139, "quantize_layer_add": 140, "quantize_layer_bas": 141, "quantize_layer_bn": 142, "quantize_wrapp": 143, "fuse_qdq_bn": 144, "fuse_qdq_concatv2": 145, "fuse_qdq_conv": 146, "fuse_qdq_deconv": 147, "fuse_qdq_in": 148, "fuse_qdq_matmul": 149, "fuse_qdq_pool": 150, "optimize_qdq": 152, "quantize_graph_bas": 153, "quantize_graph_bn": 154, "quantize_graph_concatv2": 155, "quantize_graph_conv": 156, "quantize_graph_for_intel_cpu": 157, "quantize_graph_matmul": 158, "quantize_graph_pool": 159, "quantize_graph_common": 160, "transform_graph": [161, 162, 163, 164, 165], "bias_correct": 161, "graph_transform_bas": 162, "insert_log": 164, "rerange_quantized_concat": 165, "torch_util": [167, 168, 169, 170, 171, 172, 223], "hawq_metr": 168, "symbolic_trac": 171, "algorithm": [173, 174, 175, 176], "fast_bias_correct": 174, "weight_correct": 176, "conf": [178, 179, 180, 181], "config": [178, 182, 516, 545, 547, 566], "dotdict": 179, "pythonic_config": 181, "contrib": [183, 184, 185, 186], "sigopt": [185, 576, 579], "tpe": [186, 579], "base_dataload": [187, 225], "default_dataload": [189, 227], "fetcher": [190, 228], "submodul": [191, 203, 207, 211, 218, 229, 241, 245, 248, 252, 257, 264, 274, 276, 280, 286, 290, 306, 320, 341, 346, 354, 364, 368, 376, 388, 407, 412, 417, 418, 422, 425, 431, 433, 436, 437, 443, 446, 448, 453, 462, 464, 469, 471, 472, 475, 478, 481, 487, 492, 496, 504, 512, 520, 530, 535], "mxnet_dataload": [192, 230], "onnxrt_dataload": [193, 231], "pytorch_dataload": [194, 232], "sampler": [195, 233], "tensorflow_dataload": [196, 234], "bert_dataset": [197, 235], "coco_dataset": [198, 236], "dummy_dataset": [200, 238], "dummy_dataset_v2": [201, 239], "imagenet_dataset": [202, 240], "style_transfer_dataset": [204, 242], "filter": [205, 206, 207, 243, 244, 245], "coco_filt": [205, 243], "subpackag": [208, 246, 257, 274, 275, 280, 285, 299, 341, 412, 417, 431, 436, 443, 471, 487, 496, 504, 530], "coco_transform": 209, "imagenet_transform": [210, 247], "postprocess": [212, 222], "token": [213, 249], "experiment": [215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "export": [252, 253, 254, 255, 555], "qlinear2qdq": 253, "torch2onnx": 254, "graph_optim": [256, 468, 469, 470, 519], "bleu_util": [259, 301], "coco_label_map": [260, 302], "coco_tool": [261, 303], "evaluate_squad": [262, 304], "f1": [263, 305], "mixed_precis": [266, 472, 473, 474, 521], "model_convers": 267, "basic_na": 268, "dyna": 269, "dynast": [270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "dynas_manag": 270, "dynas_predictor": 271, "dynas_search": 272, "dynas_util": 273, "supernetwork": [275, 276, 277, 278, 279], "machine_transl": [276, 277, 278, 279], "modules_supernetwork": 277, "transformer_interfac": 278, "transformer_supernetwork": 279, "nas_util": 282, "search_algorithm": 283, "pruning_recip": [285, 286, 287, 288], "pattern": [286, 287, 288, 292, 322, 569, 570], "tile_pattern": 288, "pruning_v2": 289, "pytorch_prun": [290, 291, 292, 293, 294, 295, 296], "logger": [291, 321, 357, 506], "prune_util": 293, "pruner": [294, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "mix_precis": 308, "base_model": 309, "keras_model": 311, "mxnet_model": 313, "nets_factori": 314, "onnx_model": 315, "tensorflow_model": 316, "torch_model": 317, "object": [318, 566], "criteria": [319, 569, 570, 579], "pruner_legaci": [323, 324, 325, 326, 327, 328], "gradient_sensit": 323, "group_lasso": 324, "magnitud": 326, "pattern_lock": 327, "reg": 331, "auto_mixed_precis": 335, "bayesian": [337, 579], "conserv": 338, "exhaust": [339, 579], "hawq_v2": [340, 579], "mse": [342, 579], "mse_v2": [343, 579], "random": [344, 579], "tuning_sampl": 347, "tuning_spac": 348, "tuning_struct": 349, "collect_layer_histogram": 351, "constant": 352, "create_obj_from_config": 353, "kl_diverg": 355, "load_huggingfac": 356, "option": [358, 544, 552, 561], "ux": [361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541], "benchmark_model": 362, "execute_benchmark": 363, "config_gener": [365, 366, 367, 368, 369, 370, 371, 372], "benchmark_config_gener": 365, "graph_optimization_config_gener": 367, "mixed_precision_config_gener": 369, "profiling_config_gener": 370, "pruning_config_gener": 371, "quantization_config_gener": 372, "configuration_wizard": [373, 374, 375, 376, 377, 378], "configuration_pars": 373, "get_boundary_nod": 374, "get_configur": 375, "params_feed": 377, "pruning_config_pars": 378, "db_manag": [379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414], "db_model": [380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400], "benchmark_result": 381, "domain": [384, 442], "domain_flavour": 385, "framework": [387, 555, 557, 565, 572], "optimization_typ": 392, "precis": [393, 564, 574], "profil": [394, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 538, 544], "profiling_result": 395, "project": [396, 544], "pruning_detail": 397, "tuning_detail": 399, "tuning_histori": [400, 484], "db_oper": [401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], "benchmark_api_interfac": 401, "dataset_api_interfac": 402, "diagnosis_api_interfac": 404, "dictionaries_api_interfac": 405, "examples_api_interfac": 406, "model_api_interfac": 408, "optimization_api_interfac": 409, "profiling_api_interfac": 410, "project_api_interfac": 411, "params_interfac": 413, "diagnosi": [415, 416, 417, 418, 419, 420, 421, 422, 423, 544], "factori": [416, 467, 486, 491], "onnx_diagnosi": [418, 419], "onnxrt_diagnosi": 419, "op_detail": 420, "op_entri": 421, "tensorflow_diagnosi": [422, 423], "file_brows": [424, 425], "graph": [426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 544], "collaps": 427, "edg": 428, "graph_read": 430, "node": 432, "reader": [433, 434, 435], "onnxrt_read": 434, "tensorflow_read": 435, "jobs_manag": [437, 438, 439, 440], "jobs_control_queu": 438, "request": [440, 546], "manage_workspac": 441, "model_type_gett": 445, "repositori": 450, "shape": 451, "frozen_pb": 452, "meta_graph": 455, "saved_model": 457, "model_zoo": [459, 460, 461, 462, 463], "download_config": 459, "download_model": 460, "download": 461, "list_model": 463, "names_mapp": [464, 465], "execute_optim": 466, "optimize_model": [470, 474, 476, 479], "neural_coder_optim": [475, 476], "tune": [481, 482, 483, 525, 573, 579], "tune_model": 482, "execute_profil": 485, "profile_model": 488, "tensorflow_profil": [491, 492, 493, 494], "inc_bench": 495, "const": 497, "except": [499, 529], "executor": 500, "expiring_dict": 501, "github_info": 502, "hw_info": 503, "json_seri": 505, "parser": 507, "proc": 508, "process": 509, "singleton": 510, "status_upd": 511, "templat": [512, 513, 514, 546], "workdir": 514, "workload": [516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 541], "evalu": [518, 545, 552], "yaml_util": 526, "web": [527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541], "commun": 527, "configur": [528, 552, 557, 568, 572, 576, 580], "router": 531, "server": 532, "servic": [533, 534, 535, 536, 537, 538, 539, 540, 541], "history_snapshot_pars": 534, "request_data_processor": 539, "response_gener": 540, "version": 542, "ipex": 543, "refer": [543, 570], "bench": 544, "tabl": 544, "from": [544, 561], "binari": [544, 561], "sourc": [544, 561], "home": 544, "screen": 544, "creat": [544, 547], "predefin": 544, "displai": 544, "list": [544, 548, 578], "remov": 544, "develop": 544, "tab": 544, "wizard": 544, "edit": 544, "entri": 544, "inform": [544, 562], "file": [545, 547, 557, 580], "us": [545, 547], "user": [545, 547, 548, 551, 552, 558, 572, 580], "specif": [545, 547, 548], "run": 545, "contribut": 546, "guidelin": 546, "pull": 546, "checklist": 546, "how": 547, "workflow": 549, "knowledg": [550, 581], "intermedi": 550, "layer": 550, "self": 550, "defin": [551, 552], "distribut": 552, "infer": 552, "featur": [552, 557, 560, 572, 573, 577, 580], "pure": 552, "horovodrun": 552, "execut": 552, "fp32": 555, "appendix": 555, "frequent": 556, "ask": 556, "question": 556, "build": [556, 563], "issu": [556, 575], "3": [556, 561], "incompat": [558, 575], "chang": [558, 575], "between": 558, "v1": 558, "face": 558, "section": 559, "infrastructur": 560, "ai": 561, "kit": 561, "window": 561, "legal": 562, "licens": 562, "citat": 562, "trademark": 562, "singl": [563, 566], "multi": [563, 567], "mix": [564, 574], "orchestr": 567, "One": 567, "shot": 567, "network": [569, 570], "type": 570, "regular": 570, "full": 571, "49": 571, "2022": 571, "31": 571, "2021": 571, "14": 571, "2018": 571, "2020": 571, "4": 571, "style": 572, "access": 572, "fundament": 573, "approach": 573, "accuraci": [573, 579], "turn": 574, "ON": 574, "auto": 574, "dure": 574, "releas": 575, "known": 575, "prepar": 576, "platform": 576, "perform": 576, "benefit": 576, "comparison": 576, "differ": 576, "tensorboard": 577, "space": 579, "exit": 579, "travers": 579, "logic": 579, "o0": 579, "mlperf": 581, "10": 581, "torch": 581, "12": 581, "11": 581, "7": 581}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributor Covenant Code of Conduct": [[0, "contributor-covenant-code-of-conduct"], [546, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[0, "our-pledge"], [546, "our-pledge"]], "Our Standards": [[0, "our-standards"], [546, "our-standards"]], "Our Responsibilities": [[0, "our-responsibilities"], [546, "our-responsibilities"]], "Scope": [[0, "scope"], [546, "scope"]], "Enforcement": [[0, "enforcement"], [546, "enforcement"]], "Attribution": [[0, "attribution"], [546, "attribution"]], "FX": [[1, "fx"]], "Introduction": [[1, "introduction"], [2, "introduction"], [7, "introduction"], [544, "introduction"], [550, "introduction"], [551, "introduction"], [552, "introduction"], [555, "introduction"], [557, "introduction"], [560, "introduction"], [563, "introduction"], [564, "introduction"], [565, "introduction"], [566, "introduction"], [567, "introduction"], [569, "introduction"], [570, "introduction"], [572, "introduction"], [576, "introduction"], [577, "introduction"], [579, "introduction"], [580, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[1, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[1, "get-start"]], "Post Training Static Quantization": [[1, "post-training-static-quantization"], [573, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[1, "post-training-dynamic-quantization"], [573, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[1, "quantization-aware-training"]], "Examples": [[1, "examples"], [2, "examples"], [4, "examples"], [545, "examples"], [550, "examples"], [551, "examples"], [552, "examples"], [554, "examples"], [555, "examples"], [564, "examples"], [565, "examples"], [567, "examples"], [569, "examples"], [573, "examples"], [577, "examples"]], "Note": [[1, "note"]], "Details": [[1, "details"]], "Common Problem": [[1, "common-problem"]], "Dynamic Quantization": [[1, "dynamic-quantization"], [553, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[1, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[2, "neural-architecture-search"]], "Basic NAS": [[2, "basic-nas"]], "Dynamic NAS": [[2, "dynamic-nas"]], "NAS Support Matrix": [[2, "nas-support-matrix"]], "Get Started with NAS API": [[2, "get-started-with-nas-api"]], "Basic Usage": [[2, "basic-usage"]], "1. Python code + YAML": [[2, "python-code-yaml"]], "2. Python code only": [[2, "python-code-only"]], "Advanced Usage (Custom NAS)": [[2, "advanced-usage-custom-nas"]], "PTQ": [[3, "ptq"], [3, "id1"]], "Design": [[3, "design"], [4, "design"], [549, "design"], [579, "design"], [579, "id1"], [579, "id3"], [579, "id5"], [579, "id7"], [579, "id9"], [579, "id11"], [579, "id13"], [579, "id15"], [579, "id17"]], "PyTorch Usage": [[3, "pytorch-usage"]], "MobileNetV2 Model Architecture": [[3, "mobilenetv2-model-architecture"]], "Helper Functions": [[3, "helper-functions"]], "Example": [[3, "example"], [566, "example"]], "Quantization-aware Training": [[4, "quantization-aware-training"]], "Usage": [[4, "usage"], [577, "usage"], [577, "id1"], [579, "usage"], [579, "id2"], [579, "id4"], [579, "id6"], [579, "id8"], [579, "id10"], [579, "id12"], [579, "id14"], [579, "id16"], [579, "id18"]], "Security Policy": [[5, "security-policy"]], "Report a Vulnerability": [[5, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[6, "intel-neural-compressor"]], "Installation": [[6, "installation"], [561, "installation"]], "Prerequisites": [[6, "prerequisites"], [561, "prerequisites"], [561, "id1"]], "Install on Linux": [[6, "install-on-linux"]], "Getting Started": [[6, "getting-started"]], "Quantization with Python API": [[6, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[6, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[6, "quantization-with-gui"]], "System Requirements": [[6, "system-requirements"]], "Validated Hardware Environment": [[6, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[6, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[6, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[6, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[6, "validated-software-environment"]], "Validated Models": [[6, "validated-models"], [581, "validated-models"]], "Documentation": [[6, "documentation"]], "Selected Publications/Events": [[6, "selected-publications-events"]], "Additional Content": [[6, "additional-content"]], "Hiring": [[6, "hiring"]], "Adaptor": [[7, "adaptor"], [8, "adaptor"]], "Adaptor Support Matrix": [[7, "adaptor-support-matrix"]], "Working Flow": [[7, "working-flow"], [573, "working-flow"]], "Get Start with Adaptor API": [[7, "get-start-with-adaptor-api"]], "Query API": [[7, "query-api"]], "Background": [[7, "background"]], "Query API Introduction": [[7, "query-api-introduction"]], "Example of Adding a New Backend Support": [[7, "example-of-adding-a-new-backend-support"]], "Capability": [[7, "capability"]], "Implement ONNXRTAdaptor Class": [[7, "implement-onnxrtadaptor-class"]], "APIs": [[9, "apis"]], "Common": [[10, "common"]], "Benchmark": [[11, "benchmark"], [572, "benchmark"]], "BLEU": [[12, "module-neural_compressor.experimental.metric.bleu"]], "Module Contents": [[12, "module-contents"], [32, "module-contents"], [36, "module-contents"], [37, "module-contents"], [39, "module-contents"], [42, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [63, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [134, "module-contents"], [136, "module-contents"], [137, "module-contents"], [140, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [168, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [182, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [209, "module-contents"], [210, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [227, "module-contents"], [228, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [247, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [258, "module-contents"], [259, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [300, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [307, "module-contents"], [309, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [322, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [353, "module-contents"], [355, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [423, "module-contents"], [424, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [432, "module-contents"], [434, "module-contents"], [435, "module-contents"], [441, "module-contents"], [442, "module-contents"], [444, "module-contents"], [445, "module-contents"], [447, "module-contents"], [449, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [454, "module-contents"], [455, "module-contents"], [456, "module-contents"], [457, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [463, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [470, "module-contents"], [473, "module-contents"], [474, "module-contents"], [476, "module-contents"], [477, "module-contents"], [479, "module-contents"], [480, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [524, "module-contents"], [525, "module-contents"], [526, "module-contents"], [527, "module-contents"], [528, "module-contents"], [529, "module-contents"], [531, "module-contents"], [532, "module-contents"], [533, "module-contents"], [534, "module-contents"], [536, "module-contents"], [537, "module-contents"], [538, "module-contents"], [539, "module-contents"], [540, "module-contents"], [541, "module-contents"]], "Classes": [[12, "classes"], [24, "classes"], [37, "classes"], [39, "classes"], [42, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [134, "classes"], [136, "classes"], [140, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [164, "classes"], [165, "classes"], [168, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [182, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [224, "classes"], [225, "classes"], [227, "classes"], [228, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [261, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [277, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [292, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [303, "classes"], [306, "classes"], [307, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [322, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [354, "classes"], [355, "classes"], [360, "classes"], [361, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [415, "classes"], [416, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [423, "classes"], [426, "classes"], [427, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [432, "classes"], [434, "classes"], [435, "classes"], [442, "classes"], [444, "classes"], [447, "classes"], [449, "classes"], [450, "classes"], [451, "classes"], [452, "classes"], [454, "classes"], [455, "classes"], [456, "classes"], [457, "classes"], [461, "classes"], [465, "classes"], [467, "classes"], [468, "classes"], [471, "classes"], [473, "classes"], [477, "classes"], [480, "classes"], [483, "classes"], [484, "classes"], [486, "classes"], [489, "classes"], [490, "classes"], [491, "classes"], [493, "classes"], [497, "classes"], [498, "classes"], [500, "classes"], [501, "classes"], [502, "classes"], [503, "classes"], [505, "classes"], [507, "classes"], [508, "classes"], [509, "classes"], [510, "classes"], [513, "classes"], [514, "classes"], [516, "classes"], [517, "classes"], [518, "classes"], [519, "classes"], [521, "classes"], [522, "classes"], [523, "classes"], [524, "classes"], [525, "classes"], [527, "classes"], [528, "classes"], [531, "classes"], [533, "classes"], [534, "classes"], [536, "classes"], [537, "classes"], [538, "classes"], [539, "classes"], [540, "classes"], [541, "classes"]], "Criterion": [[13, "criterion"]], "Data": [[14, "data"]], "Dataloader": [[15, "dataloader"]], "BaseDataLoader": [[15, "basedataloader"]], "dataloaders": [[15, "dataloaders"]], "Datasets": [[16, "datasets"]], "Transforms": [[17, "transforms"]], "Metric": [[18, "metric"]], "Model": [[19, "model"], [565, "model"]], "Optimizer": [[20, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[21, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[22, "distillation"], [550, "distillation"], [572, "distillation"]], "MixedPrecision": [[23, "mixedprecision"]], "Neural architecture search (NAS)": [[24, "neural-architecture-search-nas"]], "Package Contents": [[24, "package-contents"], [38, "package-contents"], [59, "package-contents"], [175, "package-contents"], [191, "package-contents"], [203, "package-contents"], [207, "package-contents"], [208, "package-contents"], [211, "package-contents"], [218, "package-contents"], [229, "package-contents"], [241, "package-contents"], [245, "package-contents"], [246, "package-contents"], [248, "package-contents"], [252, "package-contents"], [257, "package-contents"], [264, "package-contents"], [280, "package-contents"], [285, "package-contents"], [286, "package-contents"], [299, "package-contents"], [306, "package-contents"], [310, "package-contents"], [325, "package-contents"], [341, "package-contents"], [346, "package-contents"], [354, "package-contents"], [364, "package-contents"], [407, "package-contents"], [412, "package-contents"], [471, "package-contents"]], "Pruning": [[25, "pruning"], [544, "pruning"], [569, "pruning"], [572, "pruning"]], "Quantization": [[26, "quantization"], [572, "quantization"], [573, "quantization"]], "Scheduler": [[27, "scheduler"]], "Pythonic": [[28, "pythonic"]], "Strategy": [[29, "strategy"]], "Strategies": [[30, "strategies"]], "644ec953a7dc_pruning_support": [[31, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[32, "module-6ece06672ed3_v1_14"]], "Functions": [[32, "functions"], [36, "functions"], [37, "functions"], [44, "functions"], [63, "functions"], [69, "functions"], [70, "functions"], [92, "functions"], [93, "functions"], [95, "functions"], [137, "functions"], [166, "functions"], [168, "functions"], [172, "functions"], [173, "functions"], [175, "functions"], [177, "functions"], [179, "functions"], [189, "functions"], [197, "functions"], [199, "functions"], [203, "functions"], [206, "functions"], [207, "functions"], [208, "functions"], [211, "functions"], [213, "functions"], [214, "functions"], [215, "functions"], [216, "functions"], [218, "functions"], [221, "functions"], [223, "functions"], [227, "functions"], [235, "functions"], [237, "functions"], [241, "functions"], [244, "functions"], [245, "functions"], [246, "functions"], [248, "functions"], [249, "functions"], [250, "functions"], [252, "functions"], [253, "functions"], [254, "functions"], [255, "functions"], [258, "functions"], [259, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [265, "functions"], [273, "functions"], [277, "functions"], [278, "functions"], [282, "functions"], [287, "functions"], [292, "functions"], [293, "functions"], [294, "functions"], [296, "functions"], [300, "functions"], [301, "functions"], [303, "functions"], [304, "functions"], [305, "functions"], [306, "functions"], [307, "functions"], [312, "functions"], [316, "functions"], [318, "functions"], [319, "functions"], [322, "functions"], [328, "functions"], [329, "functions"], [331, "functions"], [332, "functions"], [333, "functions"], [334, "functions"], [337, "functions"], [345, "functions"], [350, "functions"], [353, "functions"], [359, "functions"], [360, "functions"], [362, "functions"], [363, "functions"], [373, "functions"], [374, "functions"], [375, "functions"], [377, "functions"], [382, "functions"], [384, "functions"], [385, "functions"], [387, "functions"], [389, "functions"], [392, "functions"], [393, "functions"], [398, "functions"], [401, "functions"], [402, "functions"], [403, "functions"], [414, "functions"], [424, "functions"], [441, "functions"], [445, "functions"], [447, "functions"], [458, "functions"], [459, "functions"], [460, "functions"], [463, "functions"], [466, "functions"], [470, "functions"], [474, "functions"], [476, "functions"], [479, "functions"], [482, "functions"], [484, "functions"], [485, "functions"], [488, "functions"], [494, "functions"], [495, "functions"], [503, "functions"], [506, "functions"], [511, "functions"], [515, "functions"], [523, "functions"], [526, "functions"], [527, "functions"], [531, "functions"], [532, "functions"]], "6f0d0f71d92e_v1_13": [[33, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[34, "module-9e89549a08c8_v1_11"]], "block_mask": [[35, "module-block_mask"]], "env": [[36, "module-env"]], "neural_compressor.adaptor.adaptor": [[37, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[38, "module-neural_compressor.adaptor"]], "neural_compressor.adaptor.keras": [[39, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils": [[40, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[41, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[42, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[43, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[44, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[45, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[46, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[47, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[48, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[49, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[50, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[51, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[52, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[53, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[54, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[55, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[56, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[57, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[58, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[59, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[60, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[61, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[62, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[63, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[64, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[65, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[66, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[67, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[68, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[69, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[70, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[71, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[72, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[73, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[74, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[131, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[132, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[161, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[162, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[163, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[164, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[165, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[166, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[167, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[168, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[169, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[170, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[171, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[172, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[173, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[174, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[175, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[176, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[177, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[178, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[179, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[180, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[181, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[182, "module-neural_compressor.config"]], "neural_compressor.contrib": [[183, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[184, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[185, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[186, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[187, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[188, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[189, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[190, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[191, "module-neural_compressor.data.dataloaders"]], "Submodules": [[191, "submodules"], [203, "submodules"], [207, "submodules"], [211, "submodules"], [218, "submodules"], [229, "submodules"], [241, "submodules"], [245, "submodules"], [248, "submodules"], [252, "submodules"], [257, "submodules"], [264, "submodules"], [274, "submodules"], [276, "submodules"], [280, "submodules"], [286, "submodules"], [290, "submodules"], [306, "submodules"], [320, "submodules"], [341, "submodules"], [346, "submodules"], [354, "submodules"], [364, "submodules"], [368, "submodules"], [376, "submodules"], [388, "submodules"], [407, "submodules"], [412, "submodules"], [417, "submodules"], [418, "submodules"], [422, "submodules"], [425, "submodules"], [431, "submodules"], [433, "submodules"], [436, "submodules"], [437, "submodules"], [443, "submodules"], [446, "submodules"], [448, "submodules"], [453, "submodules"], [462, "submodules"], [464, "submodules"], [469, "submodules"], [471, "submodules"], [472, "submodules"], [475, "submodules"], [478, "submodules"], [481, "submodules"], [487, "submodules"], [492, "submodules"], [496, "submodules"], [504, "submodules"], [512, "submodules"], [520, "submodules"], [530, "submodules"], [535, "submodules"]], "Attributes": [[191, "attributes"], [199, "attributes"], [208, "attributes"], [237, "attributes"], [246, "attributes"], [257, "attributes"], [285, "attributes"], [310, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[192, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[193, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[194, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[195, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[196, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[197, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[198, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[199, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[200, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[201, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[202, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[203, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[204, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[205, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[206, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[207, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[208, "module-neural_compressor.data"]], "Subpackages": [[208, "subpackages"], [246, "subpackages"], [257, "subpackages"], [274, "subpackages"], [275, "subpackages"], [280, "subpackages"], [285, "subpackages"], [299, "subpackages"], [341, "subpackages"], [412, "subpackages"], [417, "subpackages"], [431, "subpackages"], [436, "subpackages"], [443, "subpackages"], [471, "subpackages"], [487, "subpackages"], [496, "subpackages"], [504, "subpackages"], [530, "subpackages"]], "neural_compressor.data.transforms.coco_transform": [[209, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[210, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[211, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[212, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[213, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[214, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[215, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[216, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[217, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[218, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[219, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[220, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[221, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[222, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[223, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[224, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[228, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[229, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[233, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[235, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[236, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[237, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[238, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[239, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[240, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[241, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[242, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[243, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[244, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[245, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[246, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[247, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[248, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[249, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[250, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[251, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[252, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[253, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.torch2onnx": [[254, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[255, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[256, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[257, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[258, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[259, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[260, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[261, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[262, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[263, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[264, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[265, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[266, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[267, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[268, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[269, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[270, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[271, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[272, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[273, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[274, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[275, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[276, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[277, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[278, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[279, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "neural_compressor.experimental.nas": [[280, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[281, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[282, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[283, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[284, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[285, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[286, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[289, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[290, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[291, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[292, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[293, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[294, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[295, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[296, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[297, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[298, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[299, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[300, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[301, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[302, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[303, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[304, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[305, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[306, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[307, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[308, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[309, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[310, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[311, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[312, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[313, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[314, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[315, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[316, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[317, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[318, "module-neural_compressor.objective"]], "neural_compressor.pruner.criteria": [[319, "module-neural_compressor.pruner.criteria"]], "neural_compressor.pruner": [[320, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[321, "module-neural_compressor.pruner.logger"]], "neural_compressor.pruner.patterns": [[322, "module-neural_compressor.pruner.patterns"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[323, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[324, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[325, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[326, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[327, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[328, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "neural_compressor.pruner.pruners": [[329, "module-neural_compressor.pruner.pruners"]], "neural_compressor.pruner.pruning": [[330, "module-neural_compressor.pruner.pruning"]], "neural_compressor.pruner.regs": [[331, "module-neural_compressor.pruner.regs"]], "neural_compressor.pruner.schedulers": [[332, "module-neural_compressor.pruner.schedulers"]], "neural_compressor.pruner.utils": [[333, "module-neural_compressor.pruner.utils"]], "neural_compressor.quantization": [[334, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[335, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[336, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[337, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[338, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[339, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[340, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[341, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[342, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[343, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[344, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[345, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils": [[346, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[347, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[348, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[349, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.training": [[350, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[351, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[352, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[353, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[354, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[355, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[356, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[357, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[358, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[359, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[360, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[361, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[362, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[363, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[364, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[365, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[366, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[367, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[368, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[369, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[370, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[371, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[372, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[373, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[374, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[375, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[376, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[377, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[378, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[379, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[380, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[381, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[382, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[383, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[384, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[385, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[386, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[387, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[388, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[389, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[390, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[391, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[392, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[393, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[394, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[395, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[396, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[397, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[398, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[399, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[400, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[401, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[402, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[403, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[404, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[405, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[407, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[408, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[409, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[412, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[413, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[414, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[415, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[416, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[417, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[418, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[419, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[420, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[421, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[422, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[423, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[424, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[425, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[426, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[427, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[428, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[429, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[430, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[431, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[432, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[433, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[434, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[435, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[436, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[437, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[438, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[439, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[440, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[441, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[442, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[443, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[444, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[445, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[446, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[447, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[448, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[449, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[450, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[451, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[452, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[453, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[454, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[455, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[456, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[457, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[458, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[459, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[460, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[461, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[462, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[463, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[464, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[465, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[466, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[467, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[468, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[469, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[470, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[471, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[472, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[473, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[474, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[475, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[476, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[477, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[478, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[479, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[480, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[481, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[482, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[483, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[484, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[485, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[486, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[487, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[488, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[489, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[490, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[491, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[492, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[493, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[494, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[495, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[496, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[497, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[498, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[499, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[500, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[501, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[502, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[503, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[504, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[505, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[506, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[507, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[508, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[509, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[510, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[511, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[512, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[513, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[514, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[515, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[516, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[517, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[518, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[519, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[520, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[521, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[522, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[523, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[524, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[525, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[526, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[527, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[528, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[529, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[530, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[531, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[532, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[533, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[534, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[535, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[536, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[537, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[538, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[539, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[540, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[541, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[542, "module-neural_compressor.version"]], "Quantization Support Matrix": [[543, "quantization-support-matrix"]], "TensorFlow": [[543, "tensorflow"], [548, "tensorflow"], [563, "tensorflow"], [578, "tensorflow"]], "PyTorch": [[543, "pytorch"], [548, "pytorch"], [563, "pytorch"], [574, "pytorch"]], "PyTorch IPEX": [[543, "pytorch-ipex"]], "MXNet": [[543, "mxnet"], [548, "mxnet"], [563, "mxnet"], [578, "mxnet"]], "ONNX Runtime": [[543, "onnx-runtime"]], "Reference": [[543, "reference"], [570, "reference"]], "Intel\u00ae Neural Compressor Bench": [[544, "intel-neural-compressor-bench"]], "Table of Contents": [[544, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[544, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[544, "option-1-install-from-binary"]], "Option 2: Install from Source": [[544, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[544, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[544, "home-screen"]], "Create New Project": [[544, "create-new-project"]], "Predefined Model": [[544, "predefined-model"]], "Custom Model": [[544, "custom-model"]], "Display Model Graph": [[544, "display-model-graph"]], "Project List": [[544, "project-list"]], "Remove Project": [[544, "remove-project"]], "Develop Project": [[544, "develop-project"]], "Optimization Tab": [[544, "optimization-tab"]], "Optimization Table": [[544, "optimization-table"]], "Optimization Wizard": [[544, "optimization-wizard"]], "Editing Optimization Entries": [[544, "editing-optimization-entries"]], "Optimization Details": [[544, "optimization-details"]], "Benchmark Tab": [[544, "benchmark-tab"]], "Benchmark Table": [[544, "benchmark-table"]], "Benchmark Wizard": [[544, "benchmark-wizard"]], "Editing Benchmark Entries": [[544, "editing-benchmark-entries"]], "Benchmark Details": [[544, "benchmark-details"]], "Profiling Tab": [[544, "profiling-tab"]], "Profiling Table": [[544, "profiling-table"]], "Profiling Wizard": [[544, "profiling-wizard"]], "Editing Profiling Entries": [[544, "editing-profiling-entries"]], "Profiling Details": [[544, "profiling-details"]], "Diagnosis Tab": [[544, "diagnosis-tab"]], "Dataset Tab": [[544, "dataset-tab"]], "Dataset List": [[544, "dataset-list"]], "Dataset Wizard": [[544, "dataset-wizard"]], "Dataset Details": [[544, "dataset-details"]], "Custom Dataset": [[544, "custom-dataset"]], "Project Information": [[544, "project-information"]], "System Information": [[544, "system-information"]], "Security": [[544, "security"], [552, "security"]], "Benchmarking": [[545, "benchmarking"]], "Config evaluation filed in a yaml file": [[545, "config-evaluation-filed-in-a-yaml-file"]], "Use a user-specific dataloader to run benchmark": [[545, "use-a-user-specific-dataloader-to-run-benchmark"]], "Contribution Guidelines": [[546, "contribution-guidelines"]], "Pull Request Checklist": [[546, "pull-request-checklist"]], "Pull Request Template": [[546, "pull-request-template"]], "Support": [[546, "support"]], "DataLoader": [[547, "dataloader"]], "How to use it": [[547, "how-to-use-it"]], "Config dataloader in a yaml file": [[547, "config-dataloader-in-a-yaml-file"]], "Create a user-specific dataloader": [[547, "create-a-user-specific-dataloader"]], "Dataset": [[548, "dataset"]], "Built-in dataset support list": [[548, "built-in-dataset-support-list"]], "ONNXRT": [[548, "onnxrt"], [563, "onnxrt"], [578, "onnxrt"]], "User-specific dataset": [[548, "user-specific-dataset"]], "Architecture": [[549, "architecture"], [560, "architecture"]], "Workflow": [[549, "workflow"]], "Knowledge Distillation": [[550, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[550, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[550, "self-distillation"]], "Distillation Support Matrix": [[550, "distillation-support-matrix"]], "Get Started with Distillation API": [[550, "get-started-with-distillation-api"]], "Distillation for Quantization": [[551, "distillation-for-quantization"]], "User-defined yaml": [[551, "user-defined-yaml"]], "Distributed Training and Inference (Evaluation)": [[552, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[552, "supported-feature-matrix"], [557, "supported-feature-matrix"], [560, "supported-feature-matrix"], [572, "supported-feature-matrix"], [573, "supported-feature-matrix"], [577, "supported-feature-matrix"], [580, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[552, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[552, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[552, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[552, "horovodrun-execution"]], "PyTorch Examples:": [[552, "pytorch-examples"]], "TensorFlow Examples:": [[552, "tensorflow-examples"]], "Export": [[555, "export"]], "Supported Framework Model Matrix": [[555, "supported-framework-model-matrix"], [565, "supported-framework-model-matrix"]], "FP32 Model Export": [[555, "fp32-model-export"]], "INT8 Model Export": [[555, "int8-model-export"]], "Appendix": [[555, "appendix"]], "Frequently Asked Questions": [[556, "frequently-asked-questions"]], "Common Build Issues": [[556, "common-build-issues"]], "Issue 1:": [[556, "issue-1"]], "Issue 2:": [[556, "issue-2"]], "Issue 3:": [[556, "issue-3"]], "Framework YAML Configuration Files": [[557, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[557, "get-started-with-framework-yaml-files"]], "Incompatible changes between v1.2 and v1.1": [[558, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[558, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[558, "built-in-transform-dataset-metric-apis"]], "Intel\u00ae Neural Compressor Documentation": [[559, "intel-neural-compressor-documentation"]], "Sections": [[559, "sections"]], "Infrastructure of Intel\u00ae Neural Compressor": [[560, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[561, "linux-installation"]], "Option 1 Install from binary": [[561, "option-1-install-from-binary"], [561, "id2"]], "Option 2 Install from source": [[561, "option-2-install-from-source"], [561, "id3"]], "Option 3 Install from AI Kit": [[561, "option-3-install-from-ai-kit"]], "Windows Installation": [[561, "windows-installation"]], "Legal Information": [[562, "legal-information"]], "License": [[562, "license"]], "Citation": [[562, "citation"]], "Trademarks": [[562, "trademarks"]], "Metrics": [[563, "metrics"]], "Supported Built-in Metric Matrix": [[563, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[563, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[563, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[563, "build-custom-metric-with-python-api"]], "Mixed Precision": [[564, "mixed-precision"]], "Mixed Precision Support Matrix": [[564, "mixed-precision-support-matrix"]], "Get start with Mixed Precision API": [[564, "get-start-with-mixed-precision-api"]], "Objective": [[566, "objective"]], "Single Objective": [[566, "single-objective"]], "Multiple Objectives": [[566, "multiple-objectives"]], "Objective Support Matrix": [[566, "objective-support-matrix"]], "Get Start with Objective API": [[566, "get-start-with-objective-api"]], "Config Single Objective": [[566, "config-single-objective"]], "Config Multiple Objectives": [[566, "config-multiple-objectives"]], "Config Custom Objective": [[566, "config-custom-objective"]], "Optimization Orchestration": [[567, "optimization-orchestration"]], "One-shot": [[567, "one-shot"]], "Multi-shot": [[567, "multi-shot"]], "Orchestration Support Matrix": [[567, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[567, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[568, "system-configuration"]], "Neural Network Pruning": [[569, "neural-network-pruning"], [570, "neural-network-pruning"]], "Pruning Patterns": [[569, "pruning-patterns"], [570, "pruning-patterns"]], "Pruning Criteria": [[569, "pruning-criteria"], [570, "pruning-criteria"]], "Pruning Schedule": [[569, "pruning-schedule"], [570, "pruning-schedule"]], "Pruning Support Matrix": [[569, "pruning-support-matrix"]], "Get Started with Pruning API": [[569, "get-started-with-pruning-api"]], "Pruning Type": [[570, "pruning-type"]], "Regularization": [[570, "regularization"]], "Pruning Examples": [[570, "pruning-examples"]], "Full Publications/Events (49)": [[571, "full-publications-events-49"]], "2022 (31)": [[571, "id1"]], "2021 (14)": [[571, "id2"]], "2018 - 2020 (4)": [[571, "id3"]], "Pythonic Style Access for Configurations": [[572, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[572, "pythonic-api-for-user-configurations"], [572, "id1"]], "Pythonic API for Framework Configurations": [[572, "pythonic-api-for-framework-configurations"], [572, "id2"]], "Get Started with Pythonic API for Configurations": [[572, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[572, "nas"]], "Quantization Introduction": [[573, "quantization-introduction"]], "Quantization Fundamentals": [[573, "quantization-fundamentals"]], "Quantization Approaches": [[573, "quantization-approaches"]], "Quantization Aware Training": [[573, "quantization-aware-training"]], "Accuracy Aware Tuning": [[573, "accuracy-aware-tuning"]], "Get Started": [[573, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[574, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[574, "tensorflow"]], "Release": [[575, "release"]], "Known Issues": [[575, "known-issues"]], "Incompatible Changes": [[575, "incompatible-changes"]], "SigOpt Strategy": [[576, "sigopt-strategy"]], "Preparation": [[576, "preparation"]], "SigOpt Platform": [[576, "sigopt-platform"]], "Neural Compressor Configuration": [[576, "neural-compressor-configuration"]], "Performance": [[576, "performance"]], "Benefit of SigOpt Strategy": [[576, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[576, "performance-comparison-of-different-strategies"]], "TensorBoard": [[577, "tensorboard"]], "Get Started with TensorBoard": [[577, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[577, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[577, "tensorflow-tensorboard"]], "PyTorch Examples": [[577, "pytorch-examples"]], "TensorFlow Examples": [[577, "tensorflow-examples"]], "Transform": [[578, "transform"]], "Transform support list": [[578, "transform-support-list"]], "Pytorch": [[578, "pytorch"]], "Tuning Strategies": [[579, "tuning-strategies"]], "Strategy Design": [[579, "strategy-design"]], "Tuning Space": [[579, "tuning-space"]], "Exit Policy": [[579, "exit-policy"]], "Accuracy Criteria": [[579, "accuracy-criteria"]], "Traverse": [[579, "traverse"]], "Traverse Logic": [[579, "traverse-logic"]], "O0": [[579, "o0"]], "Basic": [[579, "basic"]], "MSE": [[579, "mse"]], "MSE_V2": [[579, "mse-v2"]], "HAWQ_V2": [[579, "hawq-v2"]], "Bayesian": [[579, "bayesian"]], "Exhaustive": [[579, "exhaustive"]], "Random": [[579, "random"]], "SigOpt": [[579, "sigopt"]], "TPE": [[579, "tpe"]], "Customize a New Tuning Strategy": [[579, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[580, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[580, "get-started-with-user-yaml-files"]], "Validated MLPerf Models": [[581, "validated-mlperf-models"]], "Validated Quantization Examples": [[581, "validated-quantization-examples"]], "TensorFlow models with TensorFlow 2.10.0": [[581, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch models with Torch 1.12.1+cpu in PTQ mode": [[581, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch models with Torch 1.12.1+cpu in QAT mode": [[581, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[581, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[581, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet models with MXNet 1.7.0": [[581, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[581, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[581, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 models on multiple hardware through ONNX Runtime": [[581, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"bleu (class in neural_compressor.experimental.metric.bleu)": [[12, "neural_compressor.experimental.metric.bleu.BLEU"], [258, "neural_compressor.experimental.metric.bleu.BLEU"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [258, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "module": [[12, "module-neural_compressor.experimental.metric.bleu"], [31, "module-644ec953a7dc_pruning_support"], [32, "module-6ece06672ed3_v1_14"], [33, "module-6f0d0f71d92e_v1_13"], [34, "module-9e89549a08c8_v1_11"], [35, "module-block_mask"], [36, "module-env"], [37, "module-neural_compressor.adaptor.adaptor"], [38, "module-neural_compressor.adaptor"], [39, "module-neural_compressor.adaptor.keras"], [40, "module-neural_compressor.adaptor.keras_utils"], [41, "module-neural_compressor.adaptor.keras_utils.quantizer"], [42, "module-neural_compressor.adaptor.mxnet"], [43, "module-neural_compressor.adaptor.mxnet_utils"], [44, "module-neural_compressor.adaptor.mxnet_utils.util"], [45, "module-neural_compressor.adaptor.onnxrt"], [46, "module-neural_compressor.adaptor.ox_utils.calibration"], [47, "module-neural_compressor.adaptor.ox_utils"], [48, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [49, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [50, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [51, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [52, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [53, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [54, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [55, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [56, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [57, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [58, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [59, "module-neural_compressor.adaptor.ox_utils.operators"], [60, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [61, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [62, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [63, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [64, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [65, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [66, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [67, "module-neural_compressor.adaptor.ox_utils.operators.split"], [68, "module-neural_compressor.adaptor.ox_utils.quantizer"], [69, "module-neural_compressor.adaptor.ox_utils.util"], [70, "module-neural_compressor.adaptor.pytorch"], [71, "module-neural_compressor.adaptor.query"], [72, "module-neural_compressor.adaptor.tensorflow"], [73, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [74, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [131, "module-neural_compressor.adaptor.tf_utils.graph_util"], [132, "module-neural_compressor.adaptor.tf_utils"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [160, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [161, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [162, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [163, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [164, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [165, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [166, "module-neural_compressor.adaptor.tf_utils.util"], [167, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [168, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [169, "module-neural_compressor.adaptor.torch_utils"], [170, "module-neural_compressor.adaptor.torch_utils.onnx"], [171, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [172, "module-neural_compressor.adaptor.torch_utils.util"], [173, "module-neural_compressor.algorithm.algorithm"], [174, "module-neural_compressor.algorithm.fast_bias_correction"], [175, "module-neural_compressor.algorithm"], [176, "module-neural_compressor.algorithm.weight_correction"], [177, "module-neural_compressor.benchmark"], [178, "module-neural_compressor.conf.config"], [179, "module-neural_compressor.conf.dotdict"], [180, "module-neural_compressor.conf"], [181, "module-neural_compressor.conf.pythonic_config"], [182, "module-neural_compressor.config"], [183, "module-neural_compressor.contrib"], [184, "module-neural_compressor.contrib.strategy"], [185, "module-neural_compressor.contrib.strategy.sigopt"], [186, "module-neural_compressor.contrib.strategy.tpe"], [187, "module-neural_compressor.data.dataloaders.base_dataloader"], [188, "module-neural_compressor.data.dataloaders.dataloader"], [189, "module-neural_compressor.data.dataloaders.default_dataloader"], [190, "module-neural_compressor.data.dataloaders.fetcher"], [191, "module-neural_compressor.data.dataloaders"], [192, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [193, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [194, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [195, "module-neural_compressor.data.dataloaders.sampler"], [196, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [197, "module-neural_compressor.data.datasets.bert_dataset"], [198, "module-neural_compressor.data.datasets.coco_dataset"], [199, "module-neural_compressor.data.datasets.dataset"], [200, "module-neural_compressor.data.datasets.dummy_dataset"], [201, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [202, "module-neural_compressor.data.datasets.imagenet_dataset"], [203, "module-neural_compressor.data.datasets"], [204, "module-neural_compressor.data.datasets.style_transfer_dataset"], [205, "module-neural_compressor.data.filters.coco_filter"], [206, "module-neural_compressor.data.filters.filter"], [207, "module-neural_compressor.data.filters"], [208, "module-neural_compressor.data"], [209, "module-neural_compressor.data.transforms.coco_transform"], [210, "module-neural_compressor.data.transforms.imagenet_transform"], [211, "module-neural_compressor.data.transforms"], [212, "module-neural_compressor.data.transforms.postprocess"], [213, "module-neural_compressor.data.transforms.tokenization"], [214, "module-neural_compressor.data.transforms.transform"], [215, "module-neural_compressor.experimental.benchmark"], [216, "module-neural_compressor.experimental.common.criterion"], [217, "module-neural_compressor.experimental.common.dataloader"], [218, "module-neural_compressor.experimental.common"], [219, "module-neural_compressor.experimental.common.metric"], [220, "module-neural_compressor.experimental.common.model"], [221, "module-neural_compressor.experimental.common.optimizer"], [222, "module-neural_compressor.experimental.common.postprocess"], [223, "module-neural_compressor.experimental.common.torch_utils"], [224, "module-neural_compressor.experimental.component"], [225, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [226, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [227, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [228, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [229, "module-neural_compressor.experimental.data.dataloaders"], [230, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [231, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [232, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [233, "module-neural_compressor.experimental.data.dataloaders.sampler"], [234, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [235, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [236, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [237, "module-neural_compressor.experimental.data.datasets.dataset"], [238, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [239, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [240, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [241, "module-neural_compressor.experimental.data.datasets"], [242, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [243, "module-neural_compressor.experimental.data.filters.coco_filter"], [244, "module-neural_compressor.experimental.data.filters.filter"], [245, "module-neural_compressor.experimental.data.filters"], [246, "module-neural_compressor.experimental.data"], [247, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [248, "module-neural_compressor.experimental.data.transforms"], [249, "module-neural_compressor.experimental.data.transforms.tokenization"], [250, "module-neural_compressor.experimental.data.transforms.transform"], [251, "module-neural_compressor.experimental.distillation"], [252, "module-neural_compressor.experimental.export"], [253, "module-neural_compressor.experimental.export.qlinear2qdq"], [254, "module-neural_compressor.experimental.export.torch2onnx"], [255, "module-neural_compressor.experimental.export.utils"], [256, "module-neural_compressor.experimental.graph_optimization"], [257, "module-neural_compressor.experimental"], [258, "module-neural_compressor.experimental.metric.bleu"], [259, "module-neural_compressor.experimental.metric.bleu_util"], [260, "module-neural_compressor.experimental.metric.coco_label_map"], [261, "module-neural_compressor.experimental.metric.coco_tools"], [262, "module-neural_compressor.experimental.metric.evaluate_squad"], [263, "module-neural_compressor.experimental.metric.f1"], [264, "module-neural_compressor.experimental.metric"], [265, "module-neural_compressor.experimental.metric.metric"], [266, "module-neural_compressor.experimental.mixed_precision"], [267, "module-neural_compressor.experimental.model_conversion"], [268, "module-neural_compressor.experimental.nas.basic_nas"], [269, "module-neural_compressor.experimental.nas.dynas"], [270, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [271, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [272, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [273, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [274, "module-neural_compressor.experimental.nas.dynast"], [275, "module-neural_compressor.experimental.nas.dynast.supernetwork"], [276, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"], [277, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"], [278, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"], [279, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"], [280, "module-neural_compressor.experimental.nas"], [281, "module-neural_compressor.experimental.nas.nas"], [282, "module-neural_compressor.experimental.nas.nas_utils"], [283, "module-neural_compressor.experimental.nas.search_algorithms"], [284, "module-neural_compressor.experimental.pruning"], [285, "module-neural_compressor.experimental.pruning_recipes"], [286, "module-neural_compressor.experimental.pruning_recipes.patterns"], [287, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [288, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [289, "module-neural_compressor.experimental.pruning_v2"], [290, "module-neural_compressor.experimental.pytorch_pruner"], [291, "module-neural_compressor.experimental.pytorch_pruner.logger"], [292, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [293, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [294, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [295, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [296, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [297, "module-neural_compressor.experimental.quantization"], [298, "module-neural_compressor.experimental.scheduler"], [299, "module-neural_compressor"], [300, "module-neural_compressor.metric.bleu"], [301, "module-neural_compressor.metric.bleu_util"], [302, "module-neural_compressor.metric.coco_label_map"], [303, "module-neural_compressor.metric.coco_tools"], [304, "module-neural_compressor.metric.evaluate_squad"], [305, "module-neural_compressor.metric.f1"], [306, "module-neural_compressor.metric"], [307, "module-neural_compressor.metric.metric"], [308, "module-neural_compressor.mix_precision"], [309, "module-neural_compressor.model.base_model"], [310, "module-neural_compressor.model"], [311, "module-neural_compressor.model.keras_model"], [312, "module-neural_compressor.model.model"], [313, "module-neural_compressor.model.mxnet_model"], [314, "module-neural_compressor.model.nets_factory"], [315, "module-neural_compressor.model.onnx_model"], [316, "module-neural_compressor.model.tensorflow_model"], [317, "module-neural_compressor.model.torch_model"], [318, "module-neural_compressor.objective"], [319, "module-neural_compressor.pruner.criteria"], [320, "module-neural_compressor.pruner"], [321, "module-neural_compressor.pruner.logger"], [322, "module-neural_compressor.pruner.patterns"], [323, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"], [324, "module-neural_compressor.pruner.pruner_legacy.group_lasso"], [325, "module-neural_compressor.pruner.pruner_legacy"], [326, "module-neural_compressor.pruner.pruner_legacy.magnitude"], [327, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"], [328, "module-neural_compressor.pruner.pruner_legacy.pruner"], [329, "module-neural_compressor.pruner.pruners"], [330, "module-neural_compressor.pruner.pruning"], [331, "module-neural_compressor.pruner.regs"], [332, "module-neural_compressor.pruner.schedulers"], [333, "module-neural_compressor.pruner.utils"], [334, "module-neural_compressor.quantization"], [335, "module-neural_compressor.strategy.auto_mixed_precision"], [336, "module-neural_compressor.strategy.basic"], [337, "module-neural_compressor.strategy.bayesian"], [338, "module-neural_compressor.strategy.conservative"], [339, "module-neural_compressor.strategy.exhaustive"], [340, "module-neural_compressor.strategy.hawq_v2"], [341, "module-neural_compressor.strategy"], [342, "module-neural_compressor.strategy.mse"], [343, "module-neural_compressor.strategy.mse_v2"], [344, "module-neural_compressor.strategy.random"], [345, "module-neural_compressor.strategy.strategy"], [346, "module-neural_compressor.strategy.utils"], [347, "module-neural_compressor.strategy.utils.tuning_sampler"], [348, "module-neural_compressor.strategy.utils.tuning_space"], [349, "module-neural_compressor.strategy.utils.tuning_structs"], [350, "module-neural_compressor.training"], [351, "module-neural_compressor.utils.collect_layer_histogram"], [352, "module-neural_compressor.utils.constant"], [353, "module-neural_compressor.utils.create_obj_from_config"], [354, "module-neural_compressor.utils"], [355, "module-neural_compressor.utils.kl_divergence"], [356, "module-neural_compressor.utils.load_huggingface"], [357, "module-neural_compressor.utils.logger"], [358, "module-neural_compressor.utils.options"], [359, "module-neural_compressor.utils.pytorch"], [360, "module-neural_compressor.utils.utility"], [361, "module-neural_compressor.ux.components.benchmark.benchmark"], [362, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [363, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [364, "module-neural_compressor.ux.components.benchmark"], [365, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [366, "module-neural_compressor.ux.components.config_generator.config_generator"], [367, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [368, "module-neural_compressor.ux.components.config_generator"], [369, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [370, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [371, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [372, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [373, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [374, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [375, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [376, "module-neural_compressor.ux.components.configuration_wizard"], [377, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [378, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [379, "module-neural_compressor.ux.components.db_manager.db_manager"], [380, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [381, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [382, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [383, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [384, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [385, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [386, "module-neural_compressor.ux.components.db_manager.db_models.example"], [387, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [388, "module-neural_compressor.ux.components.db_manager.db_models"], [389, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [390, "module-neural_compressor.ux.components.db_manager.db_models.model"], [391, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [392, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [393, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [394, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [395, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [396, "module-neural_compressor.ux.components.db_manager.db_models.project"], [397, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [398, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [399, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [400, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [401, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [402, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [403, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [404, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [405, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [406, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [407, "module-neural_compressor.ux.components.db_manager.db_operations"], [408, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [409, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [410, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [411, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [412, "module-neural_compressor.ux.components.db_manager"], [413, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [414, "module-neural_compressor.ux.components.db_manager.utils"], [415, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [416, "module-neural_compressor.ux.components.diagnosis.factory"], [417, "module-neural_compressor.ux.components.diagnosis"], [418, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [419, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [420, "module-neural_compressor.ux.components.diagnosis.op_details"], [421, "module-neural_compressor.ux.components.diagnosis.op_entry"], [422, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [423, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [424, "module-neural_compressor.ux.components.file_browser.file_browser"], [425, "module-neural_compressor.ux.components.file_browser"], [426, "module-neural_compressor.ux.components.graph.attribute"], [427, "module-neural_compressor.ux.components.graph.collapser"], [428, "module-neural_compressor.ux.components.graph.edge"], [429, "module-neural_compressor.ux.components.graph.graph"], [430, "module-neural_compressor.ux.components.graph.graph_reader"], [431, "module-neural_compressor.ux.components.graph"], [432, "module-neural_compressor.ux.components.graph.node"], [433, "module-neural_compressor.ux.components.graph.reader"], [434, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [435, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [436, "module-neural_compressor.ux.components"], [437, "module-neural_compressor.ux.components.jobs_management"], [438, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [439, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [440, "module-neural_compressor.ux.components.jobs_management.request"], [441, "module-neural_compressor.ux.components.manage_workspace"], [442, "module-neural_compressor.ux.components.model.domain"], [443, "module-neural_compressor.ux.components.model"], [444, "module-neural_compressor.ux.components.model.model"], [445, "module-neural_compressor.ux.components.model.model_type_getter"], [446, "module-neural_compressor.ux.components.model.onnxrt"], [447, "module-neural_compressor.ux.components.model.onnxrt.model"], [448, "module-neural_compressor.ux.components.model.pytorch"], [449, "module-neural_compressor.ux.components.model.pytorch.model"], [450, "module-neural_compressor.ux.components.model.repository"], [451, "module-neural_compressor.ux.components.model.shape"], [452, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [453, "module-neural_compressor.ux.components.model.tensorflow"], [454, "module-neural_compressor.ux.components.model.tensorflow.keras"], [455, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [456, "module-neural_compressor.ux.components.model.tensorflow.model"], [457, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [458, "module-neural_compressor.ux.components.model.tensorflow.utils"], [459, "module-neural_compressor.ux.components.model_zoo.download_config"], [460, "module-neural_compressor.ux.components.model_zoo.download_model"], [461, "module-neural_compressor.ux.components.model_zoo.downloader"], [462, "module-neural_compressor.ux.components.model_zoo"], [463, "module-neural_compressor.ux.components.model_zoo.list_models"], [464, "module-neural_compressor.ux.components.names_mapper"], [465, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [466, "module-neural_compressor.ux.components.optimization.execute_optimization"], [467, "module-neural_compressor.ux.components.optimization.factory"], [468, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [469, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [470, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [471, "module-neural_compressor.ux.components.optimization"], [472, "module-neural_compressor.ux.components.optimization.mixed_precision"], [473, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [474, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [475, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [476, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [477, "module-neural_compressor.ux.components.optimization.optimization"], [478, "module-neural_compressor.ux.components.optimization.pruning"], [479, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [480, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [481, "module-neural_compressor.ux.components.optimization.tune"], [482, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [483, "module-neural_compressor.ux.components.optimization.tune.tuning"], [484, "module-neural_compressor.ux.components.optimization.tuning_history"], [485, "module-neural_compressor.ux.components.profiling.execute_profiling"], [486, "module-neural_compressor.ux.components.profiling.factory"], [487, "module-neural_compressor.ux.components.profiling"], [488, "module-neural_compressor.ux.components.profiling.profile_model"], [489, "module-neural_compressor.ux.components.profiling.profiler"], [490, "module-neural_compressor.ux.components.profiling.profiling"], [491, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [492, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [493, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [494, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [495, "module-neural_compressor.ux.inc_bench"], [496, "module-neural_compressor.ux"], [497, "module-neural_compressor.ux.utils.consts"], [498, "module-neural_compressor.ux.utils.environment"], [499, "module-neural_compressor.ux.utils.exceptions"], [500, "module-neural_compressor.ux.utils.executor"], [501, "module-neural_compressor.ux.utils.expiring_dict"], [502, "module-neural_compressor.ux.utils.github_info"], [503, "module-neural_compressor.ux.utils.hw_info"], [504, "module-neural_compressor.ux.utils"], [505, "module-neural_compressor.ux.utils.json_serializer"], [506, "module-neural_compressor.ux.utils.logger"], [507, "module-neural_compressor.ux.utils.parser"], [508, "module-neural_compressor.ux.utils.proc"], [509, "module-neural_compressor.ux.utils.processes"], [510, "module-neural_compressor.ux.utils.singleton"], [511, "module-neural_compressor.ux.utils.status_updates"], [512, "module-neural_compressor.ux.utils.templates"], [513, "module-neural_compressor.ux.utils.templates.metric"], [514, "module-neural_compressor.ux.utils.templates.workdir"], [515, "module-neural_compressor.ux.utils.utils"], [516, "module-neural_compressor.ux.utils.workload.config"], [517, "module-neural_compressor.ux.utils.workload.dataloader"], [518, "module-neural_compressor.ux.utils.workload.evaluation"], [519, "module-neural_compressor.ux.utils.workload.graph_optimization"], [520, "module-neural_compressor.ux.utils.workload"], [521, "module-neural_compressor.ux.utils.workload.mixed_precision"], [522, "module-neural_compressor.ux.utils.workload.model"], [523, "module-neural_compressor.ux.utils.workload.pruning"], [524, "module-neural_compressor.ux.utils.workload.quantization"], [525, "module-neural_compressor.ux.utils.workload.tuning"], [526, "module-neural_compressor.ux.utils.yaml_utils"], [527, "module-neural_compressor.ux.web.communication"], [528, "module-neural_compressor.ux.web.configuration"], [529, "module-neural_compressor.ux.web.exceptions"], [530, "module-neural_compressor.ux.web"], [531, "module-neural_compressor.ux.web.router"], [532, "module-neural_compressor.ux.web.server"], [533, "module-neural_compressor.ux.web.service.benchmark"], [534, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [535, "module-neural_compressor.ux.web.service"], [536, "module-neural_compressor.ux.web.service.model"], [537, "module-neural_compressor.ux.web.service.optimization"], [538, "module-neural_compressor.ux.web.service.profiling"], [539, "module-neural_compressor.ux.web.service.request_data_processor"], [540, "module-neural_compressor.ux.web.service.response_generator"], [541, "module-neural_compressor.ux.web.service.workload"], [542, "module-neural_compressor.version"]], "neural_compressor.experimental.metric.bleu": [[12, "module-neural_compressor.experimental.metric.bleu"], [258, "module-neural_compressor.experimental.metric.bleu"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [258, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [258, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.result"], [258, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[12, "neural_compressor.experimental.metric.bleu.BLEU.update"], [258, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "644ec953a7dc_pruning_support": [[31, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[32, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[32, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[32, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[33, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[34, "module-9e89549a08c8_v1_11"]], "block_mask": [[35, "module-block_mask"]], "env": [[36, "module-env"]], "run_migrations_offline() (in module env)": [[36, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[36, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[37, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[37, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[37, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[37, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[37, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[37, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[37, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[37, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[37, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[37, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[37, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[37, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[38, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[39, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[39, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[39, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[39, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[39, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[39, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[39, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[39, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[39, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[39, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[39, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[39, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[39, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[39, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[39, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[39, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[39, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils": [[40, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[41, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[42, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[42, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[42, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "get_fuse_patterns() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[42, "neural_compressor.adaptor.mxnet.MXNetQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[42, "neural_compressor.adaptor.mxnet.MXNetQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[42, "neural_compressor.adaptor.mxnet.MXNetQuery.get_op_types"]], "get_precisions() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[42, "neural_compressor.adaptor.mxnet.MXNetQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[42, "neural_compressor.adaptor.mxnet.MXNetQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[42, "neural_compressor.adaptor.mxnet.MXNetQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[42, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[42, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[42, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[42, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[42, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[42, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[42, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[43, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "neural_compressor.adaptor.mxnet_utils.util": [[44, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[44, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[45, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[45, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[46, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[46, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[46, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[46, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[46, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[46, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[46, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[47, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[48, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[49, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[50, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[51, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[52, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[53, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[54, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[55, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[56, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[57, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[58, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[59, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[60, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[61, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[62, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[63, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[63, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[63, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[64, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[65, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[66, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[67, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[68, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[69, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[69, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[69, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[69, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[69, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[69, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[69, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[69, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[69, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "neural_compressor.adaptor.ox_utils.util": [[69, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[69, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[69, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[70, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[70, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[70, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[70, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[70, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[70, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[70, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[70, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[71, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[71, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[71, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[71, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[71, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[71, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[71, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[71, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[71, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[72, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[72, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[72, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[72, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[72, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[72, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[72, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[72, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[72, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[72, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[72, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[72, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "tuning_cfg_to_fw() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[72, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.tuning_cfg_to_fw"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[73, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[74, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[130, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[131, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[131, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[132, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[140, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[161, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[161, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[161, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[162, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[163, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[164, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[164, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[164, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[165, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[165, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[165, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[166, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[166, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[166, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[166, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[166, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[166, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[166, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[166, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[166, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[166, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[166, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[167, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[168, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[168, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[168, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[168, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[168, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[168, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[168, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[169, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[170, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[171, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[172, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[172, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[172, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[172, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[172, "module-neural_compressor.adaptor.torch_utils.util"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[173, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[173, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[173, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[173, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[174, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[174, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithm (class in neural_compressor.algorithm)": [[175, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[175, "neural_compressor.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[175, "neural_compressor.algorithm.algorithm_registry"]], "neural_compressor.algorithm": [[175, "module-neural_compressor.algorithm"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[176, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[176, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.Benchmark"]], "fit() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.fit"]], "neural_compressor.benchmark": [[177, "module-neural_compressor.benchmark"]], "benchmark_conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[178, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[178, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[179, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[179, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[179, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[179, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[180, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[181, "module-neural_compressor.conf.pythonic_config"]], "distillationconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.DistillationConfig"]], "weightpruningconfig (class in neural_compressor.config)": [[182, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[182, "module-neural_compressor.config"]], "neural_compressor.contrib": [[183, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[184, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[185, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[185, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[185, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[185, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[186, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[186, "module-neural_compressor.contrib.strategy.tpe"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[186, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[186, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[187, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[187, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[187, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[187, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[188, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[188, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[189, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[189, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[189, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[189, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[189, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[190, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[190, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[190, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[190, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[191, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[191, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[192, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[192, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[193, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[193, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[193, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[194, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[194, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[195, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[195, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[195, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[195, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[195, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[196, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[196, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[196, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[196, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[196, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[196, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[197, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[197, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[197, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[198, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[198, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[198, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[198, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[198, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[199, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[199, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[199, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[199, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[199, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[199, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[199, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[199, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[200, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[200, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[201, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[201, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[201, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[202, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[202, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[202, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[202, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[202, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[202, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[202, "module-neural_compressor.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.data.datasets)": [[203, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[203, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[203, "neural_compressor.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[203, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[203, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[204, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[204, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[205, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[205, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[205, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[206, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[206, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[207, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[207, "neural_compressor.data.filters.Filter"]], "filter_registry() (in module neural_compressor.data.filters)": [[207, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[207, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[208, "neural_compressor.data.BaseTransform"]], "dataloader (class in neural_compressor.data)": [[208, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[208, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[208, "neural_compressor.data.Datasets"]], "filters (class in neural_compressor.data)": [[208, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[208, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[208, "neural_compressor.data.IterableDataset"]], "postprocess (class in neural_compressor.data)": [[208, "neural_compressor.data.Postprocess"]], "transforms (class in neural_compressor.data)": [[208, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[208, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[208, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[208, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[208, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[208, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[209, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[209, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[210, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[210, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[211, "neural_compressor.data.transforms.BaseTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[211, "neural_compressor.data.transforms.Postprocess"]], "transforms (class in neural_compressor.data.transforms)": [[211, "neural_compressor.data.transforms.TRANSFORMS"]], "neural_compressor.data.transforms": [[211, "module-neural_compressor.data.transforms"]], "register() (neural_compressor.data.transforms.transforms method)": [[211, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[211, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[212, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[212, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[213, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[213, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[213, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[213, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[213, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[213, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[213, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TRANSFORMS"], [214, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[214, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[214, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[214, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[214, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[214, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[214, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[214, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[215, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[215, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[215, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[215, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[215, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[215, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[215, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[215, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[215, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[215, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[215, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[215, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[216, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[216, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[216, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[216, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[216, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[216, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[216, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[216, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[216, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[217, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[217, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[218, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[218, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[218, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[218, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[218, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[219, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[219, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[220, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[220, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[221, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[221, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[221, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[222, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[222, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[223, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[223, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[223, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[224, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[224, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[224, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[224, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[224, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[224, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[224, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[224, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[225, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[225, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[225, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[227, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[227, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[227, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[227, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[228, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[228, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[228, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[228, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[229, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[233, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[233, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[233, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[233, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[233, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[234, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[235, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[235, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[235, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[235, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[235, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[235, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[235, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[235, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[235, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[235, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[236, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[236, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[236, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[236, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[236, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[237, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[237, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[237, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[237, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[237, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[237, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[237, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[237, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[238, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[238, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[239, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[239, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[239, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[240, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[240, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[240, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[240, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[240, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[240, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[240, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[241, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[241, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[241, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[241, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[241, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[242, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[242, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[243, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[243, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[243, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[244, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[244, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[244, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[244, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[244, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[244, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[244, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[244, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[244, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[245, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[245, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[245, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[245, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[246, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[246, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[246, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[246, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[246, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[246, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[246, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[246, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[246, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[246, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[246, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[246, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[247, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[247, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[247, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[247, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[247, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[247, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[247, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[247, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[247, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[247, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[248, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[248, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[248, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[248, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[248, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[249, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[249, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[249, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[249, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[249, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[249, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[249, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[249, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[249, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[249, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[249, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[249, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[249, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [250, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[250, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[250, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[250, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[250, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[250, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[250, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[250, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[251, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[251, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[251, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[251, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[251, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[251, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[251, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[251, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[251, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[251, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[251, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[251, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[251, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[251, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[251, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[251, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[251, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[251, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[251, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[251, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[251, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[252, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[252, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[252, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[252, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[253, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[253, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[253, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[254, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[255, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[255, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[255, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[255, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[256, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[256, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[256, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[256, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[256, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[256, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[256, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[256, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[256, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[256, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[256, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[256, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[257, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[257, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[257, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[257, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[257, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[257, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[257, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[257, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[257, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[257, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[257, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[257, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[257, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[257, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[257, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[257, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[257, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[257, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[257, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[257, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[257, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[257, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[257, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[257, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[257, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[257, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[257, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[257, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[257, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[257, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[257, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[257, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[257, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[257, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[257, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[257, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[257, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[257, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[257, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[257, "neural_compressor.experimental.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning method)": [[257, "neural_compressor.experimental.Pruning.get_sparsity_ratio"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[257, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[257, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[257, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[257, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[257, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[257, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[257, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[257, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[257, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[257, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[257, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[257, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[257, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[257, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[257, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[257, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[257, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[257, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[257, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[257, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[257, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[257, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[257, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[257, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[257, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[257, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[257, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[257, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[257, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[257, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[257, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[257, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[257, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[257, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[257, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[257, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[257, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[257, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[257, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[257, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[257, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[257, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[257, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[257, "neural_compressor.experimental.Component.train_func"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning method)": [[257, "neural_compressor.experimental.Pruning.update_items_for_all_pruners"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[258, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[258, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[258, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[258, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[258, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[258, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[259, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[259, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[260, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[261, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[261, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[261, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[261, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[262, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[262, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[262, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[262, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[262, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[263, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[263, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[263, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[263, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[263, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[264, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[264, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[264, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[264, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[264, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[264, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[264, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[264, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[264, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[264, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[264, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[265, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[265, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[265, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[265, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[265, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[265, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[265, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[265, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[265, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[265, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[265, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[265, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[265, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[265, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[265, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[265, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[265, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[265, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[265, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[265, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[265, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[265, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[265, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[265, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[265, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[265, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[265, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[265, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[265, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[265, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[265, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[265, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[265, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[265, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[265, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[265, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[265, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[265, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[265, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[265, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[265, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[265, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[265, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[265, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[265, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[265, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[265, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[265, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[265, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[265, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[265, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[265, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[265, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[265, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[265, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[265, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[265, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[265, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[265, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[265, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[265, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[265, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[265, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[265, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[265, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[265, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[265, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[265, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[265, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[265, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[265, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[265, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[265, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[265, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[265, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[265, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[265, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[265, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[265, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[265, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[265, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[265, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[265, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[265, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[265, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[266, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[266, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[266, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[266, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[267, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[267, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[267, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[267, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[267, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[267, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[267, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[267, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[267, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[267, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[268, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[268, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[268, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[268, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[268, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[268, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[269, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[269, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[269, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[269, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[269, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[269, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[269, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[269, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[269, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[269, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[270, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "transformerltencoding (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[270, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[270, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[270, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[271, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[271, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[272, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[272, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[272, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "evaluationinterfacetransformerlt (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "transformerltrunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[273, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[274, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[275, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[276, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "multiheadattentionsuper (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[277, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[277, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.forward"]], "get_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[277, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.get_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[277, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "reorder_incremental_state() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[277, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.reorder_incremental_state"]], "set_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[277, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.set_incremental_state"]], "compute_bleu() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_bleu"]], "compute_latency() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_latency"]], "compute_macs() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[278, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "transformerdecoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder"]], "transformerdecoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer"]], "transformerencoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder"]], "transformerencoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer"]], "transformersupernetwork (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerSuperNetwork"]], "extract_features() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.extract_features"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoderlayer method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.forward"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.max_positions"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.max_positions"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[279, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "output_layer() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.output_layer"]], "reorder_encoder_out() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.reorder_encoder_out"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.upgrade_state_dict_named"]], "basicnas (class in neural_compressor.experimental.nas)": [[280, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[280, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[280, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[280, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[280, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[280, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[280, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[280, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[280, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[280, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[280, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[280, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[280, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[280, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[280, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[280, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[281, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[281, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[281, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[281, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[281, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[281, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[281, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[281, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[281, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[281, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[281, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[281, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[281, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[281, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[281, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[281, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[282, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[282, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[282, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[282, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[283, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[283, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[283, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[283, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[283, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[283, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[283, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[283, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[283, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[283, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[283, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[283, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[283, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[284, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[284, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[284, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[284, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[284, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[284, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[284, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning.pruning method)": [[284, "neural_compressor.experimental.pruning.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning": [[284, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[284, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[284, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[284, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[284, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[284, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[284, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[284, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[284, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[284, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[284, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[284, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[284, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[284, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[284, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[284, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[284, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning.pruning method)": [[284, "neural_compressor.experimental.pruning.Pruning.update_items_for_all_pruners"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[285, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[285, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[285, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[285, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[286, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[289, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[289, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[289, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[289, "neural_compressor.experimental.pruning_v2.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning_v2.pruning method)": [[289, "neural_compressor.experimental.pruning_v2.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning_v2.pruning method)": [[289, "neural_compressor.experimental.pruning_v2.Pruning.generate_hooks"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning_v2.pruning method)": [[289, "neural_compressor.experimental.pruning_v2.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning_v2": [[289, "module-neural_compressor.experimental.pruning_v2"]], "on_after_compute_loss() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[289, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[289, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[289, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[289, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[289, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[289, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[289, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[289, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[289, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[289, "neural_compressor.experimental.pruning_v2.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[289, "neural_compressor.experimental.pruning_v2.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning_v2.pruning method)": [[289, "neural_compressor.experimental.pruning_v2.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning_v2.pruning method)": [[289, "neural_compressor.experimental.pruning_v2.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[289, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning_v2.pruning property)": [[289, "neural_compressor.experimental.pruning_v2.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[289, "neural_compressor.experimental.pruning_v2.Pruning.train_distributed"]], "update_config() (neural_compressor.experimental.pruning_v2.pruning method)": [[289, "neural_compressor.experimental.pruning_v2.Pruning.update_config"]], "neural_compressor.experimental.pytorch_pruner": [[290, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[291, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[292, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[293, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[293, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[293, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[293, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[293, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[293, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[293, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[294, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[295, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "prepare() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.prepare"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[296, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[297, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[297, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[297, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[297, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[297, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[297, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[297, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[297, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[297, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[297, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[297, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[298, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[298, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[298, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[298, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[298, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[298, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[298, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[299, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[299, "neural_compressor.DistillationConfig"]], "weightpruningconfig (class in neural_compressor)": [[299, "neural_compressor.WeightPruningConfig"]], "neural_compressor": [[299, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[300, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[300, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[300, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[300, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[300, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[300, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[300, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[300, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[300, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[300, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[300, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[300, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[300, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[301, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[301, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[302, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[303, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[303, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[303, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[303, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[303, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[303, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[303, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[303, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[303, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[303, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[303, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[303, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[303, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[303, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[304, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[304, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[304, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[304, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[304, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[305, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[305, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[305, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[305, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[305, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[306, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[306, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[306, "neural_compressor.metric.Metric"]], "hvd (neural_compressor.metric.basemetric property)": [[306, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[306, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[306, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[306, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[306, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[306, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[306, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[306, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[306, "neural_compressor.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[307, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[307, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[307, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[307, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[307, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[307, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[307, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[307, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[307, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[307, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[307, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[307, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[307, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[307, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[307, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[307, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[307, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[307, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[307, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[307, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[307, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[307, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[307, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[307, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[307, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[307, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[307, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[307, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[307, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[307, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[307, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[307, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[307, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[307, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[307, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[307, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[307, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[307, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[307, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[307, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[307, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[307, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[307, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[307, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[307, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[307, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[307, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[307, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[307, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[307, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[307, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[307, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[307, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[307, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[307, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[307, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[307, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[307, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[307, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[307, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[307, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[307, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[307, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[307, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[307, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[307, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[307, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[307, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[307, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[307, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[307, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[307, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[307, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[307, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[307, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[307, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[307, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[307, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[307, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[307, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[307, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[307, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[307, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[307, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[307, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[307, "neural_compressor.metric.metric.mIOU.update"]], "neural_compressor.mix_precision": [[308, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[309, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[309, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[309, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[309, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[309, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[309, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[309, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[310, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[310, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[310, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[310, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[310, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[310, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[310, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[310, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[311, "neural_compressor.model.keras_model.KerasModel"]], "export() (neural_compressor.model.keras_model.kerasmodel method)": [[311, "neural_compressor.model.keras_model.KerasModel.export"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[311, "neural_compressor.model.keras_model.KerasModel.framework"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[311, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[311, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[311, "module-neural_compressor.model.keras_model"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[311, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[312, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[312, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[312, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[313, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[313, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[313, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[313, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[313, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "neural_compressor.model.nets_factory": [[314, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[315, "neural_compressor.model.onnx_model.ONNXModel"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[315, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[315, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[315, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[315, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[315, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[315, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[315, "neural_compressor.model.onnx_model.ONNXModel.model"]], "neural_compressor.model.onnx_model": [[315, "module-neural_compressor.model.onnx_model"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[315, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[315, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.estimator_session"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[316, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[316, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[316, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[316, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[316, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "neural_compressor.model.tensorflow_model": [[316, "module-neural_compressor.model.tensorflow_model"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[316, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[316, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[316, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[316, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[316, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[316, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[317, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[317, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[317, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[317, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[317, "neural_compressor.model.torch_model.PyTorchModel.export"]], "fp32_model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[317, "neural_compressor.model.torch_model.PyTorchBaseModel.fp32_model"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[317, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[317, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[317, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[317, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[317, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.ipexmodel property)": [[317, "neural_compressor.model.torch_model.IPEXModel.graph_info"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[317, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[317, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[317, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[317, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[317, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[317, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[317, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[317, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[317, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "accuracy (class in neural_compressor.objective)": [[318, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[318, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[318, "neural_compressor.objective.ModelSize"]], "objective (class in neural_compressor.objective)": [[318, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[318, "neural_compressor.objective.Performance"]], "end() (neural_compressor.objective.accuracy method)": [[318, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[318, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[318, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.objective method)": [[318, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[318, "neural_compressor.objective.Performance.end"]], "neural_compressor.objective": [[318, "module-neural_compressor.objective"]], "objective_registry() (in module neural_compressor.objective)": [[318, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.objective method)": [[318, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.objective method)": [[318, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[318, "neural_compressor.objective.Objective.result_list"]], "start() (neural_compressor.objective.accuracy method)": [[318, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[318, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[318, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.objective method)": [[318, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[318, "neural_compressor.objective.Performance.start"]], "gradientcriterion (class in neural_compressor.pruner.criteria)": [[319, "neural_compressor.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.pruner.criteria)": [[319, "neural_compressor.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.pruner.criteria)": [[319, "neural_compressor.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.pruner.criteria)": [[319, "neural_compressor.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.pruner.criteria)": [[319, "neural_compressor.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.pruner.criteria)": [[319, "neural_compressor.pruner.criteria.get_criterion"]], "neural_compressor.pruner.criteria": [[319, "module-neural_compressor.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.gradientcriterion method)": [[319, "neural_compressor.pruner.criteria.GradientCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[319, "neural_compressor.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipcriterion method)": [[319, "neural_compressor.pruner.criteria.SnipCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipmomentumcriterion method)": [[319, "neural_compressor.pruner.criteria.SnipMomentumCriterion.on_after_optimizer_step"]], "on_step_begin() (neural_compressor.pruner.criteria.magnitudecriterion method)": [[319, "neural_compressor.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.criteria.pruningcriterion method)": [[319, "neural_compressor.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.pruner.criteria)": [[319, "neural_compressor.pruner.criteria.register_criterion"]], "scores (neural_compressor.pruner.criteria.gradientcriterion attribute)": [[319, "neural_compressor.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.pruner.criteria.magnitudecriterion attribute)": [[319, "neural_compressor.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.pruner.criteria.pruningcriterion attribute)": [[319, "neural_compressor.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipcriterion attribute)": [[319, "neural_compressor.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipmomentumcriterion attribute)": [[319, "neural_compressor.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.pruner": [[320, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[321, "module-neural_compressor.pruner.logger"]], "basepattern (class in neural_compressor.pruner.patterns)": [[322, "neural_compressor.pruner.patterns.BasePattern"]], "m (neural_compressor.pruner.patterns.patternninm attribute)": [[322, "neural_compressor.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.pruner.patterns.patternninm attribute)": [[322, "neural_compressor.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.pruner.patterns)": [[322, "neural_compressor.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.pruner.patterns)": [[322, "neural_compressor.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[322, "neural_compressor.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.pruner.patterns.patternnxm attribute)": [[322, "neural_compressor.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.pruner.patterns.basepattern method)": [[322, "neural_compressor.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternninm method)": [[322, "neural_compressor.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.pruner.patterns.basepattern attribute)": [[322, "neural_compressor.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.pruner.patterns.basepattern method)": [[322, "neural_compressor.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.pruner.patterns.patternninm method)": [[322, "neural_compressor.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[322, "neural_compressor.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.pruner.patterns.basepattern method)": [[322, "neural_compressor.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.pruner.patterns.basepattern method)": [[322, "neural_compressor.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternninm method)": [[322, "neural_compressor.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.pruner.patterns.basepattern method)": [[322, "neural_compressor.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.pruner.patterns)": [[322, "neural_compressor.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.basepattern method)": [[322, "neural_compressor.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternninm method)": [[322, "neural_compressor.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.basepattern method)": [[322, "neural_compressor.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[322, "neural_compressor.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[322, "neural_compressor.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[322, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternninm method)": [[322, "neural_compressor.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.pruner.patterns.basepattern method)": [[322, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[322, "neural_compressor.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.pruner.patterns.basepattern attribute)": [[322, "neural_compressor.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[322, "neural_compressor.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[322, "neural_compressor.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[322, "neural_compressor.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.patterns.basepattern attribute)": [[322, "neural_compressor.pruner.patterns.BasePattern.modules"]], "neural_compressor.pruner.patterns": [[322, "module-neural_compressor.pruner.patterns"]], "pattern (neural_compressor.pruner.patterns.basepattern attribute)": [[322, "neural_compressor.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.pruner.patterns.patternninm method)": [[322, "neural_compressor.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.pruner.patterns.basepattern method)": [[322, "neural_compressor.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.pruner.patterns)": [[322, "neural_compressor.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternninm method)": [[322, "neural_compressor.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternninm method)": [[322, "neural_compressor.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.pruner.patterns.basepattern attribute)": [[322, "neural_compressor.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[322, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.pruner.patterns.basepattern method)": [[322, "neural_compressor.pruner.patterns.BasePattern.update_residual_cnt"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[323, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[324, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[325, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[326, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[327, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[328, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.pruner.pruner_legacy.pruner)": [[328, "neural_compressor.pruner.pruner_legacy.pruner.pruner_registry"]], "basepruner (class in neural_compressor.pruner.pruners)": [[329, "neural_compressor.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.pruner.pruners)": [[329, "neural_compressor.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.pruner.pruners)": [[329, "neural_compressor.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.pruner.pruners)": [[329, "neural_compressor.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[329, "neural_compressor.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.pruner.pruners.progressivepruner method)": [[329, "neural_compressor.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.pruner.pruners.basepruner attribute)": [[329, "neural_compressor.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.pruner.pruners.basicpruner attribute)": [[329, "neural_compressor.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[329, "neural_compressor.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.pruner.pruners.basepruner attribute)": [[329, "neural_compressor.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.pruner.pruners)": [[329, "neural_compressor.pruner.pruners.get_pruner"]], "global_step (neural_compressor.pruner.pruners.basepruner attribute)": [[329, "neural_compressor.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.pruner.pruners.basepruner attribute)": [[329, "neural_compressor.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.pruners.basepruner attribute)": [[329, "neural_compressor.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.pruners.basepruner attribute)": [[329, "neural_compressor.pruner.pruners.BasePruner.modules"]], "neural_compressor.pruner.pruners": [[329, "module-neural_compressor.pruner.pruners"]], "on_after_eval() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[329, "neural_compressor.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.patternlockpruner method)": [[329, "neural_compressor.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[329, "neural_compressor.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[329, "neural_compressor.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[329, "neural_compressor.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.pruners.progressivepruner method)": [[329, "neural_compressor.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.on_train_end"]], "parse_valid_pruner_types() (in module neural_compressor.pruner.pruners)": [[329, "neural_compressor.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.pruner.pruners.basepruner attribute)": [[329, "neural_compressor.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.pruner.pruners.basicpruner attribute)": [[329, "neural_compressor.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.pruner.pruners.progressivepruner method)": [[329, "neural_compressor.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.pruner.pruners.basepruner attribute)": [[329, "neural_compressor.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.pruner.pruners.basicpruner attribute)": [[329, "neural_compressor.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.pruner.pruners)": [[329, "neural_compressor.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.pruner.pruners.basepruner attribute)": [[329, "neural_compressor.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.pruner.pruners.basicpruner attribute)": [[329, "neural_compressor.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.pruner.pruners.basepruner attribute)": [[329, "neural_compressor.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.pruner.pruners.basicpruner method)": [[329, "neural_compressor.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.pruner.pruners.basepruner attribute)": [[329, "neural_compressor.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[329, "neural_compressor.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.pruner.pruners.basepruner method)": [[329, "neural_compressor.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.basicpruner method)": [[329, "neural_compressor.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.patternlockpruner method)": [[329, "neural_compressor.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.pruner.pruners.progressivepruner method)": [[329, "neural_compressor.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "pruning (class in neural_compressor.pruner.pruning)": [[330, "neural_compressor.pruner.pruning.Pruning"]], "config_file_path (neural_compressor.pruner.pruning.pruning attribute)": [[330, "neural_compressor.pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.pruner.pruning.pruning method)": [[330, "neural_compressor.pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.pruner.pruning.pruning attribute)": [[330, "neural_compressor.pruner.pruning.Pruning.model"]], "model (neural_compressor.pruner.pruning.pruning property)": [[330, "id0"]], "neural_compressor.pruner.pruning": [[330, "module-neural_compressor.pruner.pruning"]], "on_after_eval() (neural_compressor.pruner.pruning.pruning method)": [[330, "neural_compressor.pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[330, "neural_compressor.pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruning.pruning method)": [[330, "neural_compressor.pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[330, "neural_compressor.pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruning.pruning method)": [[330, "neural_compressor.pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruning.pruning method)": [[330, "neural_compressor.pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruning.pruning method)": [[330, "neural_compressor.pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruning.pruning method)": [[330, "neural_compressor.pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruning.pruning method)": [[330, "neural_compressor.pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruning.pruning method)": [[330, "neural_compressor.pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.pruner.pruning.pruning attribute)": [[330, "neural_compressor.pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.pruner.pruning.pruning attribute)": [[330, "neural_compressor.pruner.pruning.Pruning.pruners"]], "update_config() (neural_compressor.pruner.pruning.pruning method)": [[330, "neural_compressor.pruner.pruning.Pruning.update_config"]], "basereg (class in neural_compressor.pruner.regs)": [[331, "neural_compressor.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.pruner.regs)": [[331, "neural_compressor.pruner.regs.GroupLasso"]], "alpha (neural_compressor.pruner.regs.grouplasso attribute)": [[331, "neural_compressor.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.pruner.regs)": [[331, "neural_compressor.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.pruner.regs)": [[331, "neural_compressor.pruner.regs.get_reg_type"]], "neural_compressor.pruner.regs": [[331, "module-neural_compressor.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[331, "neural_compressor.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[331, "neural_compressor.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[331, "neural_compressor.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[331, "neural_compressor.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.pruner.regs.grouplasso attribute)": [[331, "neural_compressor.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.pruner.regs)": [[331, "neural_compressor.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.pruner.schedulers)": [[332, "neural_compressor.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.pruner.schedulers)": [[332, "neural_compressor.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.pruner.schedulers)": [[332, "neural_compressor.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.pruner.schedulers.pruningscheduler attribute)": [[332, "neural_compressor.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.pruner.schedulers)": [[332, "neural_compressor.pruner.schedulers.get_scheduler"]], "neural_compressor.pruner.schedulers": [[332, "module-neural_compressor.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.pruner.schedulers)": [[332, "neural_compressor.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.iterativescheduler method)": [[332, "neural_compressor.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.oneshotscheduler method)": [[332, "neural_compressor.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.pruningscheduler method)": [[332, "neural_compressor.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "check_config() (in module neural_compressor.pruner.utils)": [[333, "neural_compressor.pruner.utils.check_config"]], "neural_compressor.pruner.utils": [[333, "module-neural_compressor.pruner.utils"]], "parse_to_prune() (in module neural_compressor.pruner.utils)": [[333, "neural_compressor.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.pruner.utils)": [[333, "neural_compressor.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.pruner.utils)": [[333, "neural_compressor.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.pruner.utils)": [[333, "neural_compressor.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.pruner.utils)": [[333, "neural_compressor.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.pruner.utils)": [[333, "neural_compressor.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.pruner.utils)": [[333, "neural_compressor.pruner.utils.update_params"]], "fit() (in module neural_compressor.quantization)": [[334, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[334, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[335, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[335, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[335, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[335, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[336, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[336, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[336, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[337, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[337, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[337, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[337, "neural_compressor.strategy.bayesian.acq_max"]], "array_to_params() (neural_compressor.strategy.bayesian.targetspace method)": [[337, "neural_compressor.strategy.bayesian.TargetSpace.array_to_params"]], "bounds (neural_compressor.strategy.bayesian.targetspace property)": [[337, "neural_compressor.strategy.bayesian.TargetSpace.bounds"]], "dim (neural_compressor.strategy.bayesian.targetspace property)": [[337, "neural_compressor.strategy.bayesian.TargetSpace.dim"]], "empty (neural_compressor.strategy.bayesian.targetspace property)": [[337, "neural_compressor.strategy.bayesian.TargetSpace.empty"]], "gen_next_params() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[337, "neural_compressor.strategy.bayesian.BayesianOptimization.gen_next_params"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[337, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "keys (neural_compressor.strategy.bayesian.targetspace property)": [[337, "neural_compressor.strategy.bayesian.TargetSpace.keys"]], "max (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[337, "neural_compressor.strategy.bayesian.BayesianOptimization.max"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[337, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[337, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[337, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "params (neural_compressor.strategy.bayesian.targetspace property)": [[337, "neural_compressor.strategy.bayesian.TargetSpace.params"]], "params_to_array() (neural_compressor.strategy.bayesian.targetspace method)": [[337, "neural_compressor.strategy.bayesian.TargetSpace.params_to_array"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[337, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[337, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[337, "neural_compressor.strategy.bayesian.BayesianOptimization.res"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[337, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "space (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[337, "neural_compressor.strategy.bayesian.BayesianOptimization.space"]], "suggest() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[337, "neural_compressor.strategy.bayesian.BayesianOptimization.suggest"]], "target (neural_compressor.strategy.bayesian.targetspace property)": [[337, "neural_compressor.strategy.bayesian.TargetSpace.target"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[338, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[338, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[338, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[338, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[338, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[339, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[339, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[339, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[340, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[340, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[340, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[341, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[342, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[342, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "neural_compressor.strategy.mse": [[342, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[342, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[343, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[343, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[343, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[344, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[344, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[344, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[345, "neural_compressor.strategy.strategy.TuneStrategy"]], "deploy_config() (neural_compressor.strategy.strategy.tunestrategy method)": [[345, "neural_compressor.strategy.strategy.TuneStrategy.deploy_config"]], "evaluation_result (neural_compressor.strategy.strategy.tunestrategy property)": [[345, "neural_compressor.strategy.strategy.TuneStrategy.evaluation_result"]], "initial_best_acc() (neural_compressor.strategy.strategy.tunestrategy method)": [[345, "neural_compressor.strategy.strategy.TuneStrategy.initial_best_acc"]], "initial_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[345, "neural_compressor.strategy.strategy.TuneStrategy.initial_tuning_cfg"]], "neural_compressor.strategy.strategy": [[345, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[345, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "set_q_func() (neural_compressor.strategy.strategy.tunestrategy method)": [[345, "neural_compressor.strategy.strategy.TuneStrategy.set_q_func"]], "set_tuning_space() (neural_compressor.strategy.strategy.tunestrategy method)": [[345, "neural_compressor.strategy.strategy.TuneStrategy.set_tuning_space"]], "setup_resume() (neural_compressor.strategy.strategy.tunestrategy method)": [[345, "neural_compressor.strategy.strategy.TuneStrategy.setup_resume"]], "show_baseline_info() (neural_compressor.strategy.strategy.tunestrategy method)": [[345, "neural_compressor.strategy.strategy.TuneStrategy.show_baseline_info"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[345, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[345, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[345, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "update_best_op_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[345, "neural_compressor.strategy.strategy.TuneStrategy.update_best_op_tuning_cfg"]], "optuningconfig (class in neural_compressor.strategy.utils)": [[346, "neural_compressor.strategy.utils.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.optuningconfig class method)": [[346, "neural_compressor.strategy.utils.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.optuningconfig method)": [[346, "neural_compressor.strategy.utils.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils": [[346, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[347, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[348, "module-neural_compressor.strategy.utils.tuning_space"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[349, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig class method)": [[349, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig method)": [[349, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[349, "module-neural_compressor.strategy.utils.tuning_structs"]], "compressionmanager (class in neural_compressor.training)": [[350, "neural_compressor.training.CompressionManager"]], "export() (neural_compressor.training.compressionmanager method)": [[350, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[350, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[350, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[350, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[351, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[351, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[351, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[352, "module-neural_compressor.utils.constant"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[353, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[353, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "neural_compressor.utils.create_obj_from_config": [[353, "module-neural_compressor.utils.create_obj_from_config"]], "kl_divergence (class in neural_compressor.utils)": [[354, "neural_compressor.utils.KL_Divergence"]], "layerhistogramcollector (class in neural_compressor.utils)": [[354, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[354, "neural_compressor.utils.LayerHistogramCollector.collect"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence method)": [[354, "neural_compressor.utils.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence method)": [[354, "neural_compressor.utils.KL_Divergence.get_threshold"]], "neural_compressor.utils": [[354, "module-neural_compressor.utils"]], "safe_entropy() (neural_compressor.utils.kl_divergence method)": [[354, "neural_compressor.utils.KL_Divergence.safe_entropy"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[355, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[355, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[355, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[355, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[355, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "neural_compressor.utils.load_huggingface": [[356, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[357, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[358, "module-neural_compressor.utils.options"]], "load() (in module neural_compressor.utils.pytorch)": [[359, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[359, "module-neural_compressor.utils.pytorch"]], "lazyimport (class in neural_compressor.utils.utility)": [[360, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[360, "neural_compressor.utils.utility.MODE"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[360, "neural_compressor.utils.utility.combine_histogram"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[360, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[360, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[360, "neural_compressor.utils.utility.equal_dicts"]], "get_size() (in module neural_compressor.utils.utility)": [[360, "neural_compressor.utils.utility.get_size"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[360, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[360, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[360, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[360, "neural_compressor.utils.utility.recover"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[361, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[361, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[361, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[361, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[361, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[361, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[361, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[361, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[362, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[362, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[362, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[362, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[363, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[363, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[363, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[363, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[363, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[363, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[363, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[364, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[364, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[365, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[365, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[365, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[365, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[365, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[365, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[366, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[366, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[366, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[366, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[366, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[366, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[367, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[367, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[367, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[367, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[367, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[368, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[369, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[369, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[369, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[369, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[369, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[370, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[370, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[370, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[371, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[371, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[371, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_evaluation_config"]], "generate_pruning_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[371, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_pruning_config"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[371, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[372, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[372, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[372, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[372, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[372, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[372, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[373, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[373, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[373, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[373, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[373, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[373, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[373, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[373, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[373, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[373, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[373, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[373, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[374, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[374, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[375, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[375, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[375, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[376, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[377, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[377, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[377, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[377, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[377, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[377, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[377, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[377, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[377, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[377, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[377, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[377, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[377, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[377, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[378, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "generate_tree() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[378, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.generate_tree"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[378, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "parse() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[378, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse"]], "parse_entry() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[378, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse_entry"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[379, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[379, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[379, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[379, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[379, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[379, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[380, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[381, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[382, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[382, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[382, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[383, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[383, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[384, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[384, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[384, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[385, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[385, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[385, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[386, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[386, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[387, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[387, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[387, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[387, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[388, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[389, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[389, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[389, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[390, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[390, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[391, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_pruning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_pruning_details"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[392, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[393, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[393, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[393, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[394, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[394, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[395, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[396, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[396, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[397, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.build_info"]], "delete_pruning_details() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.delete_pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[397, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.update"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[398, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[398, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[398, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[399, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[399, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[400, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[400, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[401, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[401, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[402, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[403, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[403, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[404, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[404, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[405, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[406, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_tuning_details"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_pruning_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.load_pruning_details_config"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[407, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[408, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[408, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_tuning_details"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_pruning_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.load_pruning_details_config"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[409, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[411, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[412, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[412, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[412, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[412, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[412, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[412, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[413, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[413, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[414, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[414, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[414, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[414, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[415, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[415, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[415, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[415, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[415, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[415, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[415, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[415, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[415, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[416, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[416, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[416, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[417, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[418, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[419, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[419, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[419, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[420, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[420, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[420, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[420, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[420, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[420, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[421, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[421, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[421, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[422, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[423, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[423, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[423, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[424, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[424, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[425, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[426, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[426, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[427, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[427, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[427, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[428, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[428, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[428, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[428, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[429, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[429, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[429, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[429, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[429, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[429, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[429, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[429, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[429, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[430, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[430, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[430, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[430, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[431, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[432, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[432, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[432, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[433, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[434, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[434, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[434, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[435, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[435, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[435, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[436, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[437, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[438, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[439, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[440, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[441, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[441, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[442, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[442, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[443, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[444, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[444, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[444, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[444, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[444, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[444, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[444, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[444, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[444, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[444, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[444, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[444, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[444, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[444, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[444, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "supports_pruning (neural_compressor.ux.components.model.model.model property)": [[444, "neural_compressor.ux.components.model.model.Model.supports_pruning"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[445, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[445, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[446, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[447, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[447, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[447, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[447, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[447, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[447, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[447, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[447, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[447, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[447, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[447, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[447, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[448, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[449, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[449, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[449, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[449, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[449, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[450, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[450, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[450, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[450, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[450, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[450, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[450, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[451, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[451, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[451, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[452, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[452, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[452, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[452, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[453, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[454, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[454, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[454, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[454, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[454, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[455, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[455, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[455, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[455, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[455, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[455, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[456, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[456, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[456, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[456, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[456, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[456, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[456, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[456, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[456, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[456, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "supports_pruning (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[456, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.supports_pruning"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[457, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[457, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[457, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[458, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[458, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[459, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[459, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[460, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[460, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[461, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[461, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[461, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[461, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[461, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[461, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[461, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[461, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[461, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[462, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[463, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[463, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[463, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[463, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[463, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[463, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[463, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[464, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[465, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[465, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[465, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[465, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[465, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[465, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[465, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[465, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[466, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[466, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[466, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[466, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[466, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[466, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[466, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[467, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[467, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[467, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[468, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[468, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[468, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[468, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[468, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[468, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[468, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[469, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[470, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[470, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[470, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[470, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[470, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[471, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[471, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[472, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[473, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[473, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[473, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[473, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[473, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[473, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[473, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[474, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[474, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[474, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[474, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[474, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[475, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[476, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[476, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[477, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[477, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[477, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[477, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[477, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[477, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[477, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[477, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[477, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[477, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[477, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[477, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[477, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[477, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.pruning": [[478, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[479, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[479, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[479, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[480, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "configuration_data (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[480, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[480, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[480, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.generate_config"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[480, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "optimization_script (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[480, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[480, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.parameters"]], "neural_compressor.ux.components.optimization.tune": [[481, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[482, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[482, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[482, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[482, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[483, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[483, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[483, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[483, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[483, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[483, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[483, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[483, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[483, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[484, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[484, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[484, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[484, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[484, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[484, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[484, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[484, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[484, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[485, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[485, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[485, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[486, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[486, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[486, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[487, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[488, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[488, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[488, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[489, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[489, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[489, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[490, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[490, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[490, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[490, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[490, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[490, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[490, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[490, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[490, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[491, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[491, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[491, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[492, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[493, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[493, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[493, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[493, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[493, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[493, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[493, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[493, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[494, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[494, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[495, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[495, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[495, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[496, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[497, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[497, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[497, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[497, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[497, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[497, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[497, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[497, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[498, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[498, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[498, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[498, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[498, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[499, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[499, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[499, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[499, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[499, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[500, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[500, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[500, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[500, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[500, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[500, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[500, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[500, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[500, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[500, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[500, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[501, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[501, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[501, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[501, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[502, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[502, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[502, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[503, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[503, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[503, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[503, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[503, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[503, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[503, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[503, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[503, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[503, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[503, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[504, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[505, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[505, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[505, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[505, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[506, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[506, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[507, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[507, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[507, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[507, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[507, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[507, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[507, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[507, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[507, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[507, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[507, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[507, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[507, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[507, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[507, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[507, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[507, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[507, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[507, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[507, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[507, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[507, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[508, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[508, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[508, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[508, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[508, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[508, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[508, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[508, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[508, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[508, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[509, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[509, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[509, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[509, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[509, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[510, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[510, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[511, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[511, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[512, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[513, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[513, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[513, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[513, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[513, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[513, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[513, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[513, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[513, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[513, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[513, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[513, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[513, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[513, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[514, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[514, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[514, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[514, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[514, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[515, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[515, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[516, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[516, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[516, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[516, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[517, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[517, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[517, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[517, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[517, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[517, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[517, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[517, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[517, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[517, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[517, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[517, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[518, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[518, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[518, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[518, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[518, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[518, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[518, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "get_label_shift_value() (neural_compressor.ux.utils.workload.evaluation.postprocessschema static method)": [[518, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema.get_label_shift_value"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[518, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[518, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[518, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[518, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[518, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[519, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[519, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[519, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[520, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[521, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[521, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[521, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[522, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[522, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[522, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[522, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[522, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "initialize_pruners() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[523, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.initialize_pruners"]], "neural_compressor.ux.utils.workload.pruning": [[523, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[523, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[523, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "serialize() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach method)": [[523, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize"]], "serialize_pruner() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[523, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize_pruner"]], "set_postprocess_transforms() (neural_compressor.ux.utils.workload.pruning.train method)": [[523, "neural_compressor.ux.utils.workload.pruning.Train.set_postprocess_transforms"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[524, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[524, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[524, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[524, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[524, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[524, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[525, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[525, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[525, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[525, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[525, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[525, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[525, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[525, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[525, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[525, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[525, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[525, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[525, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[525, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[525, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[526, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[526, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[526, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[527, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[527, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[527, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[527, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[527, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[527, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[527, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[527, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[527, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[527, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[527, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[527, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[527, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[528, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[528, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[528, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[528, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[528, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[528, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[528, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[528, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[528, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[528, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[528, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[528, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[528, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[529, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[529, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[530, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[531, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[531, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[531, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[531, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[531, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[531, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[531, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[531, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[531, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[531, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[532, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[532, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[532, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[532, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[532, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[532, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[532, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[532, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[532, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[532, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[532, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[532, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[532, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[533, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[533, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[534, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[534, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[534, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[534, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[534, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[534, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[535, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[536, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[536, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[536, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[537, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[537, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[538, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[538, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[538, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[539, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[539, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[539, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[540, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[540, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[540, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[540, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[540, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[540, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[541, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[541, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[541, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[541, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[541, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[542, "module-neural_compressor.version"]]}})