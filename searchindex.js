Search.setIndex({"docnames": ["CODE_OF_CONDUCT", "CONTRIBUTING", "FX", "NAS", "PTQ", "QAT", "SECURITY", "Welcome", "adaptor", "api-documentation/adaptor", "api-documentation/adaptor/onnxrt", "api-documentation/apis", "api-documentation/common", "api-documentation/common/benchmark", "api-documentation/common/bleu", "api-documentation/common/criterion", "api-documentation/common/data", "api-documentation/common/data/dataloader", "api-documentation/common/data/datasets", "api-documentation/common/data/transforms", "api-documentation/common/metric", "api-documentation/common/model", "api-documentation/common/optimizer", "api-documentation/component", "api-documentation/component/Distillation", "api-documentation/component/MixedPrecision", "api-documentation/component/Nas", "api-documentation/component/Pruning", "api-documentation/component/Quantization", "api-documentation/component/Scheduler", "api-documentation/model", "api-documentation/pythonic", "api-documentation/strategy", "api-documentation/strategy/strategy", "autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruner/criteria/index", "autoapi/neural_compressor/pruner/index", "autoapi/neural_compressor/pruner/logger/index", "autoapi/neural_compressor/pruner/patterns/index", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/pruner/pruner_legacy/index", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index", "autoapi/neural_compressor/pruner/pruners/index", "autoapi/neural_compressor/pruner/pruning/index", "autoapi/neural_compressor/pruner/regs/index", "autoapi/neural_compressor/pruner/schedulers/index", "autoapi/neural_compressor/pruner/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "backend_quant", "bench", "benchmark", "dataloader", "dataset", "design", "distillation", "distillation_quantization", "distributed", "dynamic_quantization", "examples_readme", "export", "faq", "framework_yaml", "incompatible_changes", "index", "infrastructure", "installation_guide", "legal_information", "metric", "mixed_precision", "model", "objective", "orchestration", "platform_configuration", "pruning", "pruning_details", "publication_list", "pythonic_style", "quantization", "quantization_mixed_precision", "releases_info", "sigopt_strategy", "tensorboard", "transform", "tuning_strategies", "user_yaml", "validated_model_list"], "filenames": ["CODE_OF_CONDUCT.md", "CONTRIBUTING.md", "FX.md", "NAS.md", "PTQ.md", "QAT.md", "SECURITY.md", "Welcome.md", "adaptor.md", "api-documentation/adaptor.rst", "api-documentation/adaptor/onnxrt.rst", "api-documentation/apis.rst", "api-documentation/common.rst", "api-documentation/common/benchmark.rst", "api-documentation/common/bleu.rst", "api-documentation/common/criterion.rst", "api-documentation/common/data.rst", "api-documentation/common/data/dataloader.rst", "api-documentation/common/data/datasets.rst", "api-documentation/common/data/transforms.rst", "api-documentation/common/metric.rst", "api-documentation/common/model.rst", "api-documentation/common/optimizer.rst", "api-documentation/component.rst", "api-documentation/component/Distillation.rst", "api-documentation/component/MixedPrecision.rst", "api-documentation/component/Nas.rst", "api-documentation/component/Pruning.rst", "api-documentation/component/Quantization.rst", "api-documentation/component/Scheduler.rst", "api-documentation/model.rst", "api-documentation/pythonic.rst", "api-documentation/strategy.rst", "api-documentation/strategy/strategy.rst", "autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruner/criteria/index.rst", "autoapi/neural_compressor/pruner/index.rst", "autoapi/neural_compressor/pruner/logger/index.rst", "autoapi/neural_compressor/pruner/patterns/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/pruner/pruners/index.rst", "autoapi/neural_compressor/pruner/pruning/index.rst", "autoapi/neural_compressor/pruner/regs/index.rst", "autoapi/neural_compressor/pruner/schedulers/index.rst", "autoapi/neural_compressor/pruner/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "backend_quant.md", "bench.md", "benchmark.md", "dataloader.md", "dataset.md", "design.md", "distillation.md", "distillation_quantization.md", "distributed.md", "dynamic_quantization.md", "examples_readme.md", "export.md", "faq.md", "framework_yaml.md", "incompatible_changes.md", "index.rst", "infrastructure.md", "installation_guide.md", "legal_information.md", "metric.md", "mixed_precision.md", "model.md", "objective.md", "orchestration.md", "platform_configuration.md", "pruning.md", "pruning_details.md", "publication_list.md", "pythonic_style.md", "quantization.md", "quantization_mixed_precision.md", "releases_info.md", "sigopt_strategy.md", "tensorboard.md", "transform.md", "tuning_strategies.md", "user_yaml.md", "validated_model_list.md"], "titles": ["Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "PTQ", "Quantization-aware Training", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNXRT", "APIs", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Model", "Pythonic", "Strategy", "Strategies", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Quantization Support Matrix", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Dynamic Quantization", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Incompatible changes between v1.2 and v1.1", "Intel\u00ae Neural Compressor Documentation", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Introduction", "Full Publications/Events (49)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models"], "terms": {"In": [0, 2, 3, 4, 8, 39, 84, 139, 199, 227, 237, 260, 264, 282, 295, 297, 306, 325, 332, 334, 346, 547, 548, 549, 550, 552, 554, 565, 568, 569, 571, 572, 575, 576, 578, 579, 580, 581], "interest": [0, 7, 579], "foster": 0, "an": [0, 2, 3, 4, 5, 7, 8, 14, 39, 47, 71, 90, 95, 96, 98, 139, 163, 164, 179, 193, 198, 202, 206, 211, 217, 221, 226, 227, 231, 236, 240, 244, 249, 253, 260, 261, 264, 265, 266, 273, 280, 283, 284, 285, 301, 303, 306, 307, 308, 318, 325, 332, 335, 340, 427, 432, 508, 548, 549, 550, 551, 555, 557, 565, 566, 568, 572, 573, 578, 579, 580, 581], "open": [0, 7, 221, 260, 511, 547, 557, 558, 573], "welcom": [0, 1, 561], "environ": [0, 218, 302, 466, 498, 499, 507, 531, 547, 563, 581], "we": [0, 2, 4, 5, 7, 8, 14, 39, 72, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 98, 101, 102, 106, 108, 109, 110, 111, 112, 115, 118, 119, 128, 129, 132, 133, 134, 163, 164, 179, 199, 218, 220, 221, 237, 261, 264, 271, 282, 283, 303, 306, 343, 549, 554, 557, 559, 565, 568, 569, 571, 572, 574, 575, 578, 579, 581], "maintain": [0, 1, 7, 268, 310, 567, 571, 577], "make": [0, 1, 4, 8, 72, 163, 164, 179, 198, 236, 295, 297, 299, 325, 332, 335, 382, 415, 447, 547, 549, 559, 565, 575, 576, 578, 581], "particip": 0, "project": [0, 1, 217, 253, 282, 383, 386, 391, 393, 394, 397, 404, 405, 409, 410, 411, 412, 413, 414, 415, 439, 561, 573, 578, 581], "commun": [0, 302, 499, 533, 534, 535, 547], "harass": 0, "free": [0, 188, 189, 337, 565, 568, 578], "experi": [0, 578, 581], "everyon": 0, "regardless": [0, 264, 306], "ag": [0, 275], "bodi": 0, "size": [0, 4, 127, 190, 192, 193, 199, 202, 206, 208, 211, 213, 217, 228, 230, 231, 237, 240, 244, 246, 249, 250, 253, 264, 273, 276, 282, 295, 306, 318, 325, 363, 383, 393, 394, 516, 518, 519, 547, 548, 549, 550, 554, 558, 568, 571, 572, 580, 582, 583], "disabl": [0, 169, 506, 535], "ethnic": 0, "sex": [0, 182], "characterist": 0, "gender": 0, "ident": [0, 4, 102, 108, 134, 163, 295, 325, 552], "express": [0, 75, 261, 303], "level": [0, 4, 45, 48, 341, 348, 509, 531, 581], "educ": 0, "socio": 0, "econom": 0, "statu": [0, 134, 383, 394, 397, 402, 404, 410, 412, 413, 501, 514, 530, 543, 549, 568], "nation": [0, 202, 240], "person": [0, 7, 182, 573], "appear": [0, 547], "race": 0, "religion": 0, "sexual": 0, "orient": 0, "exampl": [0, 1, 7, 47, 139, 171, 200, 201, 202, 213, 216, 217, 238, 239, 240, 250, 252, 253, 264, 265, 266, 268, 274, 298, 306, 307, 308, 310, 320, 333, 353, 391, 409, 415, 439, 463, 464, 465, 466, 511, 518, 547, 555, 560, 561, 562, 576, 577, 580, 581], "behavior": [0, 1, 8, 264, 306, 552, 559, 567, 579, 582], "contribut": [0, 7], "creat": [0, 3, 8, 34, 35, 36, 37, 39, 47, 75, 134, 146, 163, 190, 200, 202, 220, 221, 228, 238, 240, 254, 260, 264, 272, 273, 283, 284, 285, 301, 306, 340, 348, 349, 352, 356, 382, 399, 409, 410, 414, 415, 496, 517, 530, 543, 550, 555, 567, 575, 578, 579, 581], "posit": [0, 134, 217, 253, 282, 325, 547, 565], "includ": [0, 1, 7, 8, 45, 200, 202, 206, 209, 210, 211, 214, 217, 219, 238, 240, 244, 247, 248, 249, 251, 253, 259, 260, 264, 269, 282, 295, 299, 300, 306, 322, 325, 334, 335, 348, 349, 352, 357, 358, 547, 550, 563, 564, 565, 571, 572, 575, 576, 579, 581], "us": [0, 1, 2, 3, 4, 5, 7, 8, 14, 40, 42, 45, 47, 48, 66, 72, 73, 75, 98, 137, 139, 140, 146, 171, 180, 181, 182, 188, 189, 198, 199, 200, 201, 202, 203, 204, 207, 211, 214, 216, 217, 218, 219, 224, 236, 237, 238, 239, 240, 241, 242, 245, 249, 251, 252, 253, 254, 255, 257, 259, 260, 261, 262, 264, 268, 269, 270, 271, 274, 276, 282, 283, 285, 287, 290, 292, 295, 297, 298, 299, 300, 301, 302, 303, 304, 306, 310, 321, 322, 325, 331, 332, 335, 340, 342, 343, 345, 346, 347, 348, 354, 357, 358, 363, 410, 415, 420, 421, 425, 427, 439, 446, 448, 473, 477, 501, 518, 520, 530, 531, 547, 549, 550, 552, 553, 554, 555, 557, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "inclus": 0, "languag": [0, 14, 261, 282, 303, 573], "Being": 0, "respect": [0, 553, 559, 571, 572, 582], "differ": [0, 2, 3, 4, 7, 14, 164, 176, 178, 179, 193, 202, 217, 219, 231, 240, 253, 259, 260, 261, 267, 268, 275, 283, 284, 286, 289, 295, 300, 301, 303, 309, 310, 325, 547, 549, 550, 552, 554, 556, 557, 560, 562, 565, 567, 568, 571, 575, 579, 580, 581], "viewpoint": 0, "gracefulli": 0, "accept": [0, 39, 547, 566], "construct": [0, 200, 203, 204, 207, 211, 214, 215, 220, 221, 222, 223, 225, 238, 241, 242, 245, 309, 310, 313, 315, 319, 356, 548, 550, 554, 581], "critic": [0, 7], "focus": [0, 8], "what": [0, 180, 198, 236, 302, 332, 353, 547], "i": [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 14, 16, 23, 30, 31, 32, 39, 40, 42, 45, 47, 48, 49, 72, 73, 75, 81, 82, 88, 90, 92, 98, 109, 113, 114, 120, 121, 122, 134, 139, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 169, 171, 175, 179, 180, 188, 189, 190, 191, 194, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 213, 217, 218, 220, 221, 224, 226, 227, 228, 236, 237, 238, 239, 240, 241, 242, 245, 247, 248, 249, 250, 253, 260, 261, 264, 266, 267, 268, 270, 273, 276, 280, 282, 285, 287, 292, 296, 297, 298, 301, 303, 306, 308, 309, 310, 318, 322, 325, 332, 333, 334, 336, 337, 340, 341, 346, 347, 348, 353, 362, 382, 415, 427, 447, 450, 452, 453, 455, 457, 458, 459, 460, 466, 504, 506, 508, 510, 511, 516, 518, 520, 526, 531, 533, 547, 548, 549, 550, 552, 554, 555, 557, 559, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582], "best": [0, 3, 5, 7, 73, 217, 253, 254, 259, 260, 271, 272, 283, 284, 300, 345, 348, 563, 568, 575, 580, 581], "show": [0, 4, 332, 547, 548, 552, 554, 571, 581], "empathi": 0, "toward": [0, 5, 552], "other": [0, 1, 2, 73, 95, 96, 98, 163, 199, 237, 266, 301, 308, 319, 508, 512, 535, 547, 555, 559, 562, 563, 564, 567, 568, 570, 571, 575, 580, 581, 583], "member": [0, 8, 260, 269], "unaccept": 0, "The": [0, 2, 3, 4, 5, 8, 9, 11, 12, 14, 16, 23, 30, 31, 32, 40, 42, 45, 48, 66, 73, 75, 81, 98, 102, 120, 121, 122, 134, 137, 139, 143, 145, 169, 171, 175, 176, 178, 180, 181, 182, 188, 189, 190, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 214, 217, 219, 221, 222, 224, 227, 228, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 251, 253, 254, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 282, 283, 284, 285, 286, 287, 290, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 319, 321, 322, 325, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 352, 353, 354, 356, 357, 358, 362, 363, 383, 384, 386, 389, 393, 394, 397, 398, 400, 402, 403, 410, 415, 418, 420, 421, 422, 423, 424, 425, 426, 439, 446, 447, 499, 547, 548, 549, 550, 552, 553, 554, 555, 557, 559, 560, 562, 563, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582], "imageri": 0, "unwelcom": 0, "attent": [0, 41, 50, 62, 200, 238, 280, 282, 552], "advanc": [0, 7, 171, 527, 575, 582], "troll": 0, "insult": 0, "derogatori": 0, "comment": [0, 550, 565, 580], "polit": 0, "attack": 0, "public": [0, 134], "privat": [0, 260, 269], "publish": [0, 564, 566], "inform": [0, 1, 6, 7, 8, 9, 11, 12, 16, 23, 30, 31, 32, 47, 75, 137, 171, 188, 189, 220, 221, 222, 223, 264, 295, 297, 298, 299, 301, 306, 309, 310, 318, 322, 325, 332, 333, 334, 335, 348, 380, 418, 447, 505, 506, 511, 512, 552, 555, 557, 559, 561, 567, 571, 572, 576, 577, 579, 582, 583], "physic": [0, 218], "electron": 0, "address": [0, 202, 240, 535, 547, 566, 573], "without": [0, 134, 169, 217, 253, 264, 297, 306, 332, 518, 547, 549, 552, 554, 565, 571, 573, 574, 575, 581], "explicit": [0, 163], "permiss": 0, "which": [0, 2, 3, 5, 7, 8, 14, 42, 47, 48, 73, 75, 83, 134, 139, 163, 188, 200, 201, 202, 213, 218, 238, 239, 240, 250, 260, 261, 264, 266, 274, 276, 284, 285, 287, 288, 289, 290, 295, 296, 297, 298, 299, 303, 306, 308, 315, 318, 322, 325, 332, 335, 338, 340, 348, 516, 547, 548, 549, 550, 552, 554, 555, 559, 562, 565, 566, 567, 569, 571, 572, 574, 575, 576, 577, 579, 580, 581, 582], "could": [0, 2, 75, 188, 189, 202, 240, 301, 325, 333, 337, 348, 553, 569, 571, 572, 575], "reason": [0, 109, 220, 221, 549, 579, 581], "consid": [0, 169, 268, 310, 552, 581], "inappropri": 0, "profession": 0, "set": [0, 3, 4, 5, 7, 40, 42, 45, 47, 48, 49, 73, 74, 75, 125, 134, 139, 163, 169, 176, 178, 180, 182, 188, 189, 190, 192, 200, 202, 205, 217, 218, 224, 228, 230, 238, 240, 243, 253, 254, 257, 259, 260, 264, 269, 270, 271, 273, 280, 282, 283, 287, 292, 296, 301, 302, 306, 319, 321, 325, 332, 336, 337, 348, 365, 405, 406, 407, 410, 427, 473, 477, 485, 506, 510, 516, 517, 519, 520, 521, 526, 530, 531, 535, 547, 548, 550, 554, 559, 560, 562, 565, 566, 574, 575, 578, 581, 582], "ar": [0, 1, 2, 3, 4, 5, 7, 8, 14, 40, 42, 49, 73, 90, 102, 146, 156, 185, 200, 217, 227, 238, 253, 260, 261, 264, 268, 274, 276, 280, 282, 285, 287, 292, 295, 296, 297, 298, 301, 302, 303, 306, 310, 325, 332, 333, 338, 340, 356, 362, 363, 447, 450, 452, 459, 503, 512, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 559, 560, 562, 564, 565, 566, 568, 569, 570, 571, 572, 575, 576, 577, 578, 579, 580, 581, 582], "clarifi": 0, "expect": [0, 1, 75, 146, 202, 240, 340, 366, 488, 511, 558, 575, 581], "take": [0, 2, 3, 40, 42, 75, 188, 189, 193, 217, 221, 222, 231, 253, 295, 309, 310, 325, 337, 340, 549, 552, 559, 571, 575, 576, 580, 581, 582], "appropri": 0, "fair": 0, "correct": [0, 4, 164, 179, 264, 265, 266, 268, 296, 306, 307, 308, 310, 336, 468, 547], "action": 0, "ani": [0, 1, 98, 146, 163, 171, 254, 260, 264, 266, 282, 306, 308, 365, 366, 368, 370, 372, 373, 374, 375, 376, 377, 378, 380, 381, 383, 384, 386, 393, 394, 395, 396, 397, 398, 400, 403, 405, 406, 416, 418, 423, 424, 427, 429, 435, 444, 447, 450, 454, 457, 458, 459, 461, 464, 466, 469, 473, 477, 479, 482, 485, 488, 491, 496, 497, 503, 504, 506, 508, 510, 511, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 534, 535, 542, 543, 547, 549, 554, 578], "instanc": [0, 2, 8, 137, 139, 140, 146, 188, 189, 200, 218, 238, 260, 265, 266, 268, 271, 283, 284, 307, 308, 310, 337, 340, 348, 353, 383, 422, 426, 450, 459, 526, 547, 582, 583], "have": [0, 1, 4, 14, 102, 134, 169, 198, 216, 220, 221, 236, 252, 261, 264, 268, 275, 295, 297, 303, 306, 310, 325, 332, 547, 549, 550, 554, 559, 564, 565, 566, 568, 571, 572, 575, 581], "right": [0, 2, 213, 250, 264, 306, 516, 547, 580], "remov": [0, 1, 4, 51, 71, 72, 75, 90, 102, 113, 125, 127, 134, 139, 156, 163, 219, 257, 266, 308, 318, 320, 383, 386, 393, 394, 397, 399, 400, 402, 404, 450, 511, 512, 519, 548, 571, 572, 579], "edit": [0, 404, 410, 412, 413, 416], "reject": 0, "commit": [0, 1], "wiki": 0, "issu": [0, 1, 6, 547, 563, 575, 579], "align": [0, 217, 253, 298, 580], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 14, 39, 42, 71, 73, 75, 84, 85, 86, 87, 88, 89, 90, 91, 101, 106, 108, 109, 110, 111, 112, 114, 115, 118, 119, 128, 129, 132, 133, 134, 139, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 171, 175, 179, 188, 189, 199, 200, 201, 202, 203, 204, 205, 207, 216, 217, 220, 221, 226, 227, 237, 238, 239, 240, 241, 242, 243, 245, 252, 253, 260, 261, 264, 265, 266, 268, 273, 278, 279, 286, 287, 292, 295, 297, 298, 299, 300, 301, 303, 306, 307, 308, 310, 321, 325, 332, 333, 334, 335, 337, 340, 345, 362, 363, 546, 547, 548, 549, 550, 552, 554, 555, 559, 562, 564, 565, 566, 567, 571, 572, 575, 576, 577, 578, 579, 580, 581], "ban": 0, "temporarili": 0, "perman": 0, "thei": [0, 146, 180, 218, 260, 282, 302, 325, 548, 552, 559, 565, 568, 571, 572], "deem": 0, "threaten": 0, "offens": 0, "harm": 0, "appli": [0, 5, 137, 152, 227, 260, 262, 295, 297, 304, 320, 325, 332, 547, 569, 571, 572, 575, 576, 578, 581, 582], "both": [0, 3, 5, 8, 49, 169, 282, 284, 286, 553, 563, 574, 575, 581], "within": [0, 2, 259, 260, 264, 300, 306, 319, 332, 340, 566, 573], "space": [0, 1, 3, 8, 180, 188, 189, 259, 260, 266, 271, 273, 275, 283, 284, 285, 286, 300, 302, 308, 332, 337, 338, 340, 341, 342, 343, 345, 347, 348, 351, 518, 571, 575, 582], "when": [0, 3, 5, 14, 72, 81, 92, 98, 146, 169, 200, 201, 209, 210, 211, 217, 238, 239, 247, 248, 249, 253, 261, 262, 274, 282, 295, 296, 297, 303, 304, 325, 332, 336, 516, 518, 531, 535, 547, 549, 550, 555, 571, 572, 575, 580, 581], "individu": [0, 98, 272, 273, 283, 295, 325], "repres": [0, 72, 202, 207, 240, 245, 264, 266, 268, 306, 308, 310, 325, 332, 333, 334, 335, 336, 385, 387, 388, 390, 392, 395, 396, 399, 401, 516, 550, 557, 575, 581], "its": [0, 72, 75, 125, 134, 137, 146, 171, 196, 202, 216, 217, 234, 240, 252, 253, 255, 256, 262, 263, 267, 268, 297, 301, 304, 305, 309, 310, 325, 332, 340, 341, 345, 547, 550, 552, 564, 565, 566, 570, 571, 572, 578, 580, 581], "offici": [0, 169, 261, 265, 266, 303, 307, 308, 547, 565], "e": [0, 45, 48, 74, 98, 273, 275, 301, 325, 508, 510, 535, 552, 581], "mail": 0, "post": [0, 4, 5, 8, 40, 45, 48, 188, 189, 217, 227, 253, 257, 260, 301, 337, 530, 553, 554, 557, 562, 563, 569, 579, 581], "via": [0, 146, 259, 260, 287, 292, 300, 535, 554, 562], "social": 0, "media": 0, "account": [0, 273, 578, 581], "act": [0, 198, 236], "appoint": 0, "onlin": [0, 7, 39, 578], "offlin": [0, 39, 363, 575], "event": [0, 579], "represent": [0, 2, 72, 84, 273, 383, 384, 386, 389, 393, 394, 397, 398, 400, 402, 403, 529, 553, 568, 572, 575], "mai": [0, 1, 134, 163, 169, 321, 549, 558, 564, 566, 570, 573, 575, 581], "further": [0, 98, 566, 567], "defin": [0, 3, 4, 5, 8, 42, 45, 48, 73, 74, 75, 84, 85, 86, 87, 88, 89, 90, 91, 101, 106, 108, 109, 110, 111, 112, 115, 118, 119, 121, 128, 129, 132, 133, 134, 163, 188, 189, 219, 260, 271, 272, 275, 283, 284, 285, 286, 287, 292, 295, 296, 297, 298, 299, 319, 325, 332, 333, 334, 335, 337, 340, 362, 363, 441, 442, 443, 530, 547, 549, 550, 552, 559, 562, 565, 568, 569, 571, 572, 575, 578, 579, 581, 582], "abus": 0, "otherwis": [0, 189, 202, 217, 240, 253, 348, 550, 574, 580], "report": [0, 1, 547, 578], "contact": [0, 577, 578], "inc": [0, 5, 7, 73, 217, 253, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 526, 573, 574, 577], "intel": [0, 1, 3, 6, 8, 73, 221, 224, 255, 260, 267, 268, 295, 298, 309, 310, 325, 333, 344, 349, 498, 511, 549, 550, 551, 552, 553, 556, 557, 559, 563, 564, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 579, 581, 582], "com": [0, 4, 7, 171, 200, 238, 261, 262, 265, 266, 295, 298, 303, 304, 307, 308, 325, 333, 511, 547, 550, 563, 564, 577, 578, 583], "all": [0, 4, 5, 7, 8, 40, 42, 47, 48, 49, 66, 73, 75, 88, 91, 113, 114, 126, 146, 176, 178, 190, 191, 194, 198, 202, 206, 209, 210, 211, 214, 217, 218, 219, 224, 227, 228, 236, 240, 244, 247, 248, 249, 251, 253, 257, 260, 261, 264, 266, 267, 268, 278, 279, 280, 282, 285, 287, 288, 289, 290, 291, 292, 295, 298, 301, 303, 306, 308, 309, 310, 312, 313, 318, 321, 325, 331, 332, 333, 338, 340, 341, 342, 348, 357, 358, 367, 379, 382, 391, 408, 410, 415, 420, 421, 434, 436, 439, 440, 446, 447, 450, 452, 459, 465, 472, 474, 478, 479, 481, 484, 490, 495, 499, 508, 512, 535, 547, 549, 550, 554, 559, 563, 569, 570, 571, 572, 573, 575, 576, 580, 581], "complaint": 0, "review": [0, 1], "investig": 0, "result": [0, 3, 4, 14, 40, 42, 45, 48, 72, 73, 75, 169, 188, 213, 217, 218, 219, 250, 253, 260, 261, 264, 265, 266, 267, 268, 273, 275, 284, 303, 306, 307, 308, 309, 310, 321, 343, 348, 364, 366, 383, 384, 397, 398, 400, 404, 410, 413, 416, 493, 534, 537, 547, 548, 549, 552, 554, 555, 562, 564, 565, 568, 571, 572, 573, 575, 578, 579, 580, 581, 583], "necessari": [0, 3, 72, 254, 260, 567, 578, 581], "circumst": [0, 574], "team": [0, 266, 308, 576], "oblig": 0, "confidenti": [0, 547], "regard": [0, 576], "incid": 0, "detail": [0, 1, 7, 42, 75, 217, 253, 280, 383, 386, 393, 394, 397, 399, 400, 402, 404, 405, 407, 410, 411, 412, 413, 414, 418, 423, 486, 491, 505, 518, 559, 560, 565, 566, 571, 572, 577, 578, 579, 581, 583], "specif": [0, 3, 4, 8, 42, 45, 48, 73, 74, 75, 139, 140, 191, 194, 200, 201, 202, 203, 207, 209, 210, 211, 218, 224, 238, 239, 240, 241, 245, 247, 248, 249, 260, 261, 264, 270, 271, 282, 283, 284, 303, 306, 320, 336, 394, 405, 406, 407, 410, 418, 433, 547, 552, 555, 559, 560, 565, 566, 567, 568, 574, 581, 582], "polici": [0, 7, 345, 570, 582], "separ": [0, 216, 252, 534, 547, 560, 564, 569, 574], "who": [0, 341, 581], "do": [0, 14, 40, 42, 45, 48, 51, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 73, 199, 200, 237, 238, 254, 255, 257, 260, 261, 264, 298, 301, 303, 306, 333, 341, 362, 547, 550, 554, 559, 562, 563, 565, 568, 576, 577, 581], "follow": [0, 1, 2, 3, 4, 5, 8, 11, 49, 98, 114, 117, 120, 121, 122, 123, 134, 202, 240, 260, 261, 264, 282, 287, 292, 303, 306, 338, 546, 547, 548, 549, 550, 552, 554, 555, 557, 559, 563, 564, 565, 567, 569, 571, 572, 574, 575, 579, 581], "good": [0, 555, 575, 581], "faith": 0, "face": [0, 573, 577], "temporari": 0, "repercuss": 0, "determin": [0, 2, 4, 322, 325, 332, 531, 555, 572], "": [0, 3, 4, 45, 72, 74, 84, 90, 98, 134, 146, 163, 164, 179, 181, 182, 185, 190, 199, 202, 216, 217, 218, 220, 221, 222, 228, 237, 240, 252, 253, 260, 266, 274, 276, 282, 295, 297, 298, 302, 308, 309, 310, 315, 325, 332, 337, 341, 348, 357, 358, 416, 447, 503, 504, 548, 552, 554, 555, 559, 562, 563, 566, 569, 570, 571, 572, 573, 574, 575, 577, 578, 582], "leadership": 0, "adapt": [0, 42, 45, 48, 73, 74, 75, 550], "from": [0, 2, 3, 4, 5, 7, 8, 14, 40, 42, 45, 47, 49, 72, 73, 75, 89, 95, 96, 98, 134, 137, 139, 146, 156, 163, 169, 188, 189, 190, 193, 197, 200, 201, 202, 203, 204, 205, 207, 212, 213, 219, 220, 221, 227, 228, 231, 235, 238, 239, 240, 241, 242, 243, 245, 250, 254, 256, 257, 258, 260, 261, 264, 265, 266, 270, 273, 274, 275, 276, 280, 282, 285, 287, 292, 295, 296, 297, 298, 299, 301, 303, 306, 307, 308, 317, 318, 319, 321, 322, 325, 332, 333, 334, 335, 336, 340, 347, 348, 349, 352, 356, 362, 363, 381, 383, 386, 387, 388, 390, 393, 394, 395, 396, 397, 399, 400, 402, 404, 405, 407, 410, 411, 412, 413, 414, 416, 427, 432, 450, 453, 462, 463, 464, 466, 491, 496, 510, 511, 516, 518, 519, 520, 526, 535, 537, 542, 543, 548, 549, 550, 552, 553, 554, 556, 557, 558, 562, 565, 566, 567, 568, 569, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581], "version": [0, 2, 7, 8, 42, 45, 47, 48, 71, 74, 75, 81, 188, 255, 257, 282, 320, 340, 466, 501, 506, 518, 547, 559, 563, 564, 570, 573, 581], "1": [0, 2, 4, 5, 7, 8, 40, 42, 45, 48, 71, 72, 73, 75, 82, 102, 118, 137, 139, 167, 169, 177, 179, 185, 190, 192, 195, 196, 197, 199, 200, 201, 203, 204, 207, 208, 213, 217, 218, 219, 220, 221, 228, 230, 233, 234, 235, 237, 238, 239, 241, 242, 245, 246, 250, 253, 259, 260, 264, 265, 266, 268, 273, 276, 280, 282, 287, 292, 295, 297, 300, 301, 302, 306, 307, 308, 310, 320, 325, 332, 337, 338, 346, 356, 366, 488, 496, 546, 548, 549, 550, 552, 555, 557, 559, 565, 566, 568, 569, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582], "4": [0, 4, 7, 8, 14, 75, 81, 209, 210, 211, 212, 213, 214, 217, 247, 248, 249, 250, 251, 253, 261, 262, 264, 303, 304, 306, 325, 341, 508, 547, 548, 554, 558, 559, 562, 563, 565, 570, 571, 580, 581, 583], "For": [0, 2, 4, 5, 6, 8, 139, 202, 216, 217, 227, 240, 252, 253, 260, 264, 265, 266, 268, 273, 295, 298, 306, 307, 308, 310, 325, 333, 337, 341, 508, 547, 553, 554, 557, 559, 562, 571, 576, 579, 581, 582, 583], "answer": [0, 217, 253, 265, 266, 307, 308, 580, 583], "common": [0, 5, 11, 215, 260, 270, 276, 284, 285, 286, 295, 301, 302, 325, 356, 511, 512, 518, 548, 550, 552, 554, 557, 560, 563, 567, 571, 575], "question": [0, 1, 8, 217, 253, 265, 266, 307, 308, 563, 580, 583], "about": [0, 318, 322, 418, 447, 503, 505, 506, 511, 512, 547, 549, 555, 576, 583], "see": [0, 2, 4, 6, 217, 253, 261, 264, 280, 303, 306, 547, 564, 571, 579, 581, 583], "faq": [0, 7], "page": [0, 1], "If": [1, 2, 90, 95, 96, 98, 102, 109, 134, 188, 189, 202, 217, 240, 253, 264, 276, 295, 296, 297, 306, 337, 338, 547, 550, 554, 557, 563, 564, 565, 566, 568, 569, 575, 578, 579, 580, 581], "you": [1, 2, 5, 7, 198, 200, 236, 238, 264, 280, 282, 297, 306, 547, 548, 550, 554, 557, 563, 564, 565, 577, 578, 579], "improv": [1, 4, 332, 340, 571, 572, 575, 576, 581, 583], "neural": [1, 8, 23, 47, 73, 171, 212, 213, 214, 217, 218, 221, 224, 227, 250, 251, 253, 255, 260, 267, 268, 270, 287, 292, 295, 298, 300, 301, 309, 310, 313, 315, 325, 333, 343, 344, 349, 422, 426, 450, 459, 498, 505, 518, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 573, 575, 577, 579, 580, 581, 582], "compressor": [1, 3, 8, 47, 73, 212, 213, 214, 217, 218, 221, 224, 227, 250, 251, 253, 255, 260, 267, 268, 270, 295, 298, 300, 301, 309, 310, 313, 315, 325, 333, 344, 349, 422, 426, 450, 459, 498, 505, 518, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 571, 573, 575, 577, 579, 580, 581, 582], "send": [1, 7, 487, 530, 535], "your": [1, 7, 198, 200, 236, 238, 264, 306, 547, 548, 550, 554, 557, 563, 564, 578, 579, 581], "new": [1, 47, 84, 134, 156, 169, 190, 202, 211, 214, 217, 218, 228, 240, 249, 251, 253, 282, 295, 296, 299, 301, 325, 335, 363, 409, 410, 414, 530, 548, 554, 566, 573, 575, 577, 578, 580, 582], "github": [1, 4, 7, 171, 200, 238, 261, 262, 265, 266, 295, 298, 303, 304, 307, 308, 325, 333, 462, 464, 505, 547, 550, 556, 563, 564, 577], "view": [1, 4, 7, 547, 556, 577], "how": [1, 2, 4, 6, 8, 217, 253, 254, 260, 275, 276, 295, 322, 325, 332, 547, 548, 549, 550, 552, 554, 560, 571, 572, 575, 580, 581, 582], "To": [1, 72, 264, 290, 295, 299, 306, 325, 335, 508, 547, 550, 554, 557, 566, 574, 576, 577, 581, 582], "befor": [1, 131, 146, 200, 227, 238, 254, 255, 257, 260, 287, 292, 295, 297, 298, 299, 325, 332, 333, 334, 335, 345, 404, 547, 550, 552, 554, 558, 559, 568, 571, 575, 578, 579, 581], "below": [1, 2, 5, 8, 82, 94, 102, 301, 339, 341, 346, 546, 549, 552, 554, 560, 565, 568, 569, 571, 574, 575, 578, 579, 581], "chang": [1, 4, 109, 125, 164, 179, 297, 299, 332, 335, 340, 343, 363, 378, 384, 487, 509, 516, 549, 554, 558, 564, 565, 572, 579, 580, 581], "consist": [1, 2, 83, 91, 282, 547, 557, 581], "python": [1, 2, 11, 103, 146, 169, 202, 221, 240, 260, 264, 306, 363, 466, 547, 550, 554, 563, 573, 576, 580], "style": [1, 90, 193, 207, 231, 245, 550, 560], "pylint": 1, "check": [1, 4, 5, 7, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 90, 91, 134, 139, 146, 169, 175, 189, 202, 240, 256, 260, 270, 296, 301, 325, 332, 336, 340, 341, 348, 363, 405, 410, 447, 450, 452, 453, 455, 457, 458, 459, 460, 466, 469, 487, 503, 504, 506, 511, 518, 520, 547, 554, 563, 577], "flake8": 1, "autopep8": 1, "clean": [1, 216, 219, 252, 383, 394, 397, 404, 405, 410, 412, 413, 414, 501, 517], "add": [1, 2, 4, 14, 49, 71, 72, 80, 92, 134, 139, 143, 152, 169, 200, 202, 224, 238, 240, 260, 261, 268, 282, 287, 292, 296, 298, 301, 303, 310, 318, 333, 336, 341, 376, 383, 384, 386, 393, 394, 395, 396, 397, 398, 400, 402, 403, 404, 405, 409, 410, 411, 412, 413, 414, 416, 432, 518, 543, 547, 549, 550, 554, 557, 559, 565, 568, 578, 579, 581], "unit": [1, 295, 325, 510, 518], "test": [1, 7, 49, 217, 253, 273, 547, 563, 583], "cover": [1, 560, 573], "would": [1, 4, 134, 325, 566, 572, 575], "like": [1, 2, 3, 8, 40, 42, 45, 48, 73, 75, 102, 125, 127, 134, 163, 169, 188, 189, 190, 202, 206, 211, 228, 240, 244, 249, 259, 260, 268, 274, 297, 300, 301, 310, 319, 325, 337, 353, 547, 552, 555, 562, 569, 571, 575, 577, 581], "run": [1, 5, 7, 8, 39, 40, 42, 45, 47, 49, 73, 134, 169, 188, 189, 199, 216, 218, 237, 252, 260, 273, 276, 296, 297, 332, 336, 337, 340, 341, 465, 511, 533, 534, 535, 547, 554, 558, 559, 566, 571, 573, 575, 577, 578, 579, 581, 582], "ha": [1, 3, 8, 14, 40, 42, 45, 48, 73, 75, 90, 91, 95, 96, 98, 102, 121, 134, 146, 163, 218, 260, 261, 275, 295, 297, 303, 325, 332, 547, 549, 557, 562, 566, 572, 574, 575, 576, 578, 581], "adopt": 1, "develop": [1, 2, 171, 518, 563, 566, 573, 575, 576, 578], "certif": [1, 547], "origin": [1, 4, 72, 73, 175, 176, 178, 200, 217, 218, 238, 253, 260, 273, 282, 287, 292, 295, 296, 297, 298, 325, 332, 333, 336, 341, 345, 366, 550, 571, 572, 575, 580, 581, 582], "must": [1, 2, 217, 253, 264, 268, 306, 310, 549, 563, 580], "agre": 1, "term": [1, 254, 260, 332, 334, 552, 564, 565, 568, 569, 581], "sign": [1, 547, 575, 578], "off": [1, 4, 95, 96, 98, 576], "each": [1, 4, 5, 8, 42, 45, 48, 49, 73, 74, 75, 80, 81, 82, 83, 86, 87, 92, 93, 94, 97, 99, 100, 101, 103, 105, 106, 108, 110, 111, 112, 115, 117, 118, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134, 139, 164, 168, 171, 198, 202, 205, 213, 217, 236, 240, 243, 250, 253, 262, 264, 265, 266, 275, 276, 282, 297, 304, 306, 307, 308, 319, 320, 321, 325, 332, 345, 357, 358, 547, 550, 552, 555, 559, 568, 569, 571, 572, 578, 579, 580, 581], "random": [1, 3, 83, 163, 169, 213, 217, 250, 253, 273, 286, 302, 340, 344, 528, 555, 574, 580, 582], "j": [1, 535], "org": [1, 2, 7, 264, 282, 297, 306, 322, 547, 563], "type": [1, 4, 8, 14, 40, 42, 45, 47, 48, 49, 72, 73, 74, 75, 85, 88, 89, 90, 91, 98, 102, 113, 114, 120, 121, 122, 125, 134, 137, 139, 140, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 169, 171, 175, 176, 178, 182, 189, 190, 198, 200, 202, 206, 209, 210, 211, 214, 217, 219, 224, 228, 236, 238, 240, 244, 247, 248, 249, 251, 253, 255, 257, 258, 260, 261, 262, 264, 267, 268, 270, 273, 275, 282, 285, 288, 289, 290, 295, 297, 299, 301, 303, 304, 306, 309, 310, 312, 313, 319, 320, 321, 325, 331, 332, 334, 335, 336, 338, 339, 340, 341, 345, 348, 349, 352, 353, 356, 362, 376, 381, 395, 396, 405, 406, 408, 410, 448, 503, 506, 508, 510, 513, 514, 547, 550, 554, 559, 562, 566, 571, 575, 578, 580, 581, 582], "featur": [1, 4, 134, 185, 200, 201, 213, 217, 219, 238, 239, 250, 253, 282, 302, 548, 549, 551, 552, 566, 567, 573, 577, 580], "bug": 1, "fix": [1, 200, 238, 297, 332, 550, 572, 581], "document": [1, 217, 253, 546, 554, 555, 566, 577, 580], "valid": [1, 3, 8, 40, 42, 45, 73, 74, 75, 82, 134, 163, 202, 240, 264, 276, 296, 297, 306, 319, 325, 332, 336, 466, 535, 550, 552, 559, 562, 564, 571, 572, 575, 577], "api": [1, 2, 5, 9, 12, 16, 30, 31, 32, 47, 48, 73, 98, 103, 134, 146, 259, 260, 264, 298, 300, 306, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 534, 535, 557, 561, 562, 577, 578, 581], "descript": [1, 2, 47, 134, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 257, 258, 264, 284, 306, 320], "jira": 1, "ticket": 1, "xxx": [1, 202, 240, 550, 552], "potenti": [1, 3], "risk": 1, "trigger": [1, 218, 260, 297, 332], "pr": [1, 565, 577], "been": [1, 3, 14, 91, 216, 252, 261, 275, 295, 297, 303, 325, 332, 547, 552, 566], "reproduc": 1, "hardwar": [1, 8, 45, 74, 506, 552, 562, 566, 570, 571, 572, 573, 574], "depend": [1, 40, 42, 47, 75, 90, 188, 189, 218, 260, 271, 283, 284, 337, 558, 559, 574, 581], "librari": [1, 7, 221, 260, 546, 563, 573], "introduc": [1, 8, 102, 557, 559, 571, 572, 575, 577, 581], "submit": 1, "also": [1, 3, 4, 7, 8, 14, 199, 202, 206, 211, 217, 237, 240, 244, 249, 253, 261, 303, 325, 337, 346, 547, 548, 549, 552, 562, 565, 568, 569, 571, 575, 576, 581], "reach": [1, 189, 295, 299, 325, 335, 348, 549, 571, 572, 581], "out": [1, 2, 7, 163, 200, 201, 202, 238, 239, 240, 259, 260, 282, 295, 300, 318, 325, 550, 574, 575], "intend": 1, "safe": [1, 146, 357, 358], "collabor": 1, "adher": 1, "3": [2, 3, 4, 5, 7, 74, 75, 98, 139, 169, 202, 206, 211, 214, 217, 240, 244, 249, 251, 253, 264, 276, 306, 508, 547, 549, 550, 552, 554, 557, 559, 565, 566, 568, 571, 574, 575, 578, 580, 581, 583], "2": [2, 4, 5, 7, 8, 11, 72, 74, 75, 81, 102, 177, 201, 218, 239, 264, 266, 268, 276, 290, 291, 297, 306, 308, 310, 325, 332, 338, 340, 346, 546, 550, 552, 559, 562, 564, 565, 566, 568, 569, 570, 571, 575, 577, 578, 580, 581], "pytorch": [2, 3, 7, 8, 199, 200, 202, 205, 206, 209, 210, 211, 214, 217, 219, 224, 226, 237, 238, 240, 243, 244, 247, 248, 249, 251, 253, 255, 257, 258, 259, 260, 267, 268, 269, 293, 295, 298, 300, 309, 310, 320, 325, 333, 337, 346, 366, 439, 446, 469, 479, 499, 549, 552, 555, 556, 557, 559, 562, 563, 566, 567, 571, 573, 574, 575, 577, 581, 582], "toolkit": [2, 7, 563, 573], "transform": [2, 3, 7, 16, 35, 48, 72, 78, 90, 118, 119, 121, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162, 164, 167, 168, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 238, 239, 240, 241, 242, 243, 245, 247, 248, 249, 260, 279, 281, 282, 302, 376, 380, 386, 391, 405, 408, 410, 415, 417, 439, 518, 519, 520, 521, 526, 548, 549, 550, 552, 553, 554, 571, 573, 576, 579, 582], "nn": [2, 4, 5, 175, 219, 255, 257, 276, 280, 282, 320, 337, 557, 567, 571, 579], "modul": [2, 4, 5, 255, 260, 277, 278, 279, 283, 293, 294, 324, 507, 515, 523, 547, 548, 549, 552, 557, 562, 565, 567, 574, 576, 579], "three": [2, 8, 102, 200, 238, 260, 287, 292, 298, 333, 547, 549, 557, 563, 566, 569, 575, 576, 578, 579, 581], "main": [2, 4, 7, 188, 224, 298, 333, 348, 498, 535, 554, 575], "compon": [2, 7, 11, 254, 260, 271, 283, 287, 292, 300, 301, 302, 353, 499, 534, 537, 554, 563, 564, 569, 570], "symbol": [2, 47, 175, 261, 303, 337, 567], "tracer": 2, "intermedi": [2, 49, 72, 219, 562, 571, 575], "code": [2, 7, 8, 188, 189, 218, 260, 270, 278, 279, 282, 298, 301, 337, 405, 410, 428, 446, 511, 512, 543, 544, 549, 550, 552, 554, 560, 562, 564, 565, 568, 569, 571, 573, 574, 575, 578, 579, 580], "gener": [2, 7, 8, 40, 42, 47, 75, 118, 119, 146, 188, 189, 190, 199, 202, 203, 204, 205, 211, 214, 217, 218, 228, 237, 240, 241, 242, 243, 249, 251, 253, 257, 258, 260, 261, 269, 273, 280, 287, 295, 298, 301, 303, 320, 325, 333, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 381, 405, 410, 416, 471, 476, 480, 483, 485, 486, 491, 492, 493, 502, 511, 543, 547, 549, 552, 565, 566, 568, 570, 571, 572, 573, 575, 576, 579, 580, 581], "With": [2, 5, 8, 125, 549, 568, 571, 573, 575, 578, 581, 583], "convert": [2, 4, 5, 40, 42, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 101, 102, 106, 108, 109, 110, 111, 112, 115, 118, 119, 128, 129, 131, 132, 133, 200, 213, 216, 217, 238, 250, 252, 253, 260, 264, 268, 270, 284, 286, 296, 306, 310, 312, 313, 338, 353, 385, 392, 401, 496, 508, 566, 575, 576, 580], "torch": [2, 4, 5, 73, 171, 175, 181, 185, 219, 255, 257, 268, 276, 280, 282, 302, 310, 320, 325, 337, 554, 557, 566, 567, 571, 575, 579], "graphmodul": [2, 73, 175, 576], "can": [2, 3, 4, 5, 7, 8, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 84, 164, 171, 179, 180, 188, 189, 199, 202, 217, 218, 220, 221, 237, 240, 253, 260, 264, 266, 268, 280, 282, 287, 292, 295, 297, 298, 299, 302, 306, 308, 310, 321, 325, 332, 333, 335, 337, 469, 501, 508, 518, 547, 548, 549, 550, 552, 554, 555, 559, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582], "resolv": [2, 6], "automat": [2, 7, 202, 205, 212, 213, 240, 243, 250, 259, 260, 269, 276, 300, 547, 550, 562, 566, 569, 572, 580, 581], "insert": [2, 4, 71, 75, 131, 134, 137, 156, 167, 255, 257, 562, 575, 576, 579], "quant": [2, 4, 75, 175, 575], "dequant": [2, 4, 71, 72, 117, 120, 122, 123, 125, 152, 171, 175, 418, 579], "oper": [2, 4, 41, 50, 72, 134, 169, 213, 250, 282, 295, 325, 341, 530, 534, 547, 549, 557, 568, 575, 580, 581], "floatfunct": [2, 4], "wrap": [2, 47, 75, 140, 146, 219, 264, 306, 376, 554], "tensor": [2, 4, 40, 42, 45, 47, 48, 49, 71, 72, 73, 75, 98, 134, 146, 163, 169, 171, 217, 219, 253, 255, 256, 257, 282, 290, 291, 295, 297, 299, 317, 318, 319, 320, 322, 325, 332, 334, 335, 345, 357, 358, 407, 410, 418, 447, 550, 571, 572, 575, 577, 579, 580, 581], "requir": [2, 4, 5, 8, 137, 146, 227, 260, 264, 276, 301, 306, 319, 338, 341, 365, 367, 376, 379, 434, 440, 447, 450, 452, 459, 465, 472, 473, 474, 475, 477, 478, 479, 481, 484, 485, 490, 495, 499, 547, 548, 549, 553, 554, 559, 563, 566, 567, 570, 572, 575, 577, 578, 579, 581, 582], "special": [2, 140, 549, 565, 568], "handl": [2, 6, 71, 88, 90, 169, 260, 273, 274, 275, 300, 508, 534, 535, 549], "cat": 2, "output": [2, 4, 5, 8, 14, 39, 49, 71, 72, 73, 75, 81, 87, 88, 98, 102, 113, 114, 120, 122, 127, 134, 137, 146, 163, 169, 182, 188, 189, 216, 219, 221, 222, 226, 252, 254, 255, 257, 259, 260, 261, 264, 268, 273, 274, 282, 295, 303, 306, 309, 310, 318, 319, 320, 325, 332, 337, 353, 354, 357, 383, 394, 397, 404, 410, 412, 413, 447, 457, 458, 459, 473, 477, 480, 503, 511, 519, 525, 547, 552, 554, 557, 559, 560, 565, 567, 571, 574, 575, 579, 580, 581, 582], "paramet": [2, 4, 5, 14, 40, 42, 45, 47, 48, 49, 71, 72, 73, 75, 84, 85, 86, 87, 88, 89, 90, 91, 98, 101, 102, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 128, 129, 132, 133, 134, 137, 139, 140, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 169, 171, 175, 176, 178, 180, 181, 182, 185, 188, 189, 190, 199, 200, 202, 206, 209, 210, 211, 213, 214, 216, 217, 218, 219, 224, 228, 237, 238, 240, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 282, 283, 284, 285, 286, 287, 290, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 315, 317, 319, 320, 321, 322, 325, 331, 332, 333, 334, 335, 336, 337, 340, 341, 345, 348, 349, 352, 353, 356, 357, 358, 362, 363, 376, 380, 385, 386, 405, 406, 407, 410, 416, 418, 427, 453, 471, 476, 480, 483, 486, 498, 503, 508, 510, 511, 517, 518, 520, 530, 531, 547, 549, 550, 554, 555, 562, 565, 571, 572, 575, 578, 580, 581, 582], "fuse": [2, 4, 5, 40, 47, 73, 75, 92, 93, 97, 98, 99, 100, 120, 121, 122, 123, 125, 159, 171, 175, 579], "combin": [2, 8, 45, 47, 74, 188, 189, 213, 227, 250, 260, 301, 337, 363, 555, 562, 569, 573, 576, 580, 581], "singl": [2, 193, 200, 216, 217, 231, 238, 252, 253, 264, 273, 275, 297, 299, 306, 322, 335, 340, 399, 416, 435, 503, 537, 550, 563, 571, 572], "obtain": [2, 295, 296, 299, 325, 333, 334, 335, 336, 557, 578, 581], "higher": [2, 5, 188, 189, 285, 337, 338, 552, 557, 565, 566, 571, 572, 575, 578, 581], "accuraci": [2, 4, 5, 7, 73, 180, 188, 189, 218, 254, 259, 260, 268, 272, 273, 274, 276, 283, 287, 292, 300, 302, 310, 321, 337, 338, 341, 346, 348, 368, 384, 394, 404, 410, 412, 486, 510, 516, 519, 521, 537, 547, 548, 549, 550, 553, 554, 555, 557, 565, 566, 568, 569, 571, 572, 573, 574, 577, 578, 579, 582, 583], "perform": [2, 3, 5, 7, 8, 90, 125, 180, 200, 212, 213, 216, 218, 238, 250, 252, 259, 260, 271, 272, 274, 276, 283, 284, 287, 292, 300, 302, 321, 332, 334, 341, 345, 368, 384, 394, 404, 410, 412, 501, 510, 519, 521, 528, 537, 547, 548, 549, 550, 551, 553, 557, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 581, 582, 583], "done": [2, 4, 5, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 552, 571, 575], "_": [2, 3, 4, 5, 8, 47, 188, 189, 337, 546, 552, 554, 555, 559, 565, 566, 567, 568, 571, 572, 575, 576, 577, 578, 579, 581, 582], "list": [2, 4, 7, 8, 14, 40, 42, 45, 47, 48, 72, 73, 75, 81, 84, 134, 139, 146, 163, 169, 175, 188, 189, 193, 200, 213, 216, 217, 218, 219, 231, 238, 250, 252, 253, 255, 257, 260, 261, 262, 264, 265, 266, 268, 273, 275, 276, 285, 287, 292, 295, 298, 303, 304, 306, 307, 308, 310, 319, 320, 321, 325, 333, 337, 341, 345, 348, 353, 354, 357, 358, 376, 378, 380, 381, 383, 385, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 427, 430, 432, 433, 435, 447, 450, 453, 454, 457, 458, 459, 461, 466, 469, 471, 473, 476, 477, 480, 483, 486, 496, 503, 508, 510, 511, 512, 516, 518, 519, 520, 521, 522, 524, 525, 526, 528, 530, 537, 546, 550, 559, 568, 574, 576, 579, 581], "current": [2, 3, 4, 8, 42, 45, 47, 48, 71, 74, 75, 90, 98, 102, 134, 139, 260, 270, 276, 287, 292, 295, 297, 298, 299, 322, 325, 332, 333, 335, 340, 341, 345, 346, 348, 547, 554, 555, 559, 563, 565, 568, 571, 572, 575, 581], "fusion": [2, 4, 8, 45, 74, 98, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162, 559], "conv": [2, 4, 40, 41, 49, 50, 62, 71, 121, 159, 185, 302, 325, 574], "relu": [2, 4, 40, 102, 159, 559, 579], "batchnorm": [2, 145], "linear": [2, 4, 72, 185, 255, 257, 295, 302, 325, 552, 557], "pleas": [2, 3, 5, 6, 7, 8, 134, 171, 200, 201, 202, 205, 238, 239, 240, 243, 260, 287, 292, 295, 297, 298, 322, 325, 333, 547, 550, 553, 554, 563, 565, 566, 568, 571, 572, 576, 577, 578], "refer": [2, 5, 7, 8, 14, 171, 200, 238, 260, 261, 262, 267, 268, 287, 292, 295, 297, 298, 303, 304, 309, 310, 322, 325, 333, 548, 549, 550, 553, 554, 560, 564, 565, 566, 568, 571, 574, 575, 577, 580, 581], "graph": [2, 8, 48, 49, 73, 75, 78, 84, 85, 86, 87, 88, 89, 90, 91, 98, 101, 102, 103, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 128, 129, 132, 133, 134, 156, 163, 164, 167, 168, 169, 199, 237, 257, 259, 302, 312, 313, 314, 318, 319, 320, 370, 372, 374, 439, 447, 450, 458, 459, 461, 471, 472, 473, 478, 479, 483, 496, 497, 499, 519, 522, 534, 550, 552, 554, 560, 565, 567, 575, 576, 579], "10004": [2, 3, 8, 549, 552, 557, 559, 562, 566, 569, 574, 582], "backend": [2, 42, 45, 48, 49, 73, 74, 75, 191, 192, 196, 200, 201, 203, 204, 205, 206, 207, 211, 214, 217, 224, 229, 230, 232, 234, 238, 239, 241, 242, 243, 244, 245, 249, 251, 253, 269, 312, 313, 315, 318, 346, 546, 554, 555, 560, 562, 574, 575, 580, 582], "field": [2, 8, 134, 163, 202, 240, 264, 301, 306, 547, 548, 554, 555, 578, 581, 582], "indic": [2, 71, 193, 198, 200, 231, 236, 238, 254, 260, 264, 280, 282, 285, 286, 306, 325, 547, 548, 558, 579], "user": [2, 3, 4, 7, 8, 45, 74, 134, 180, 188, 189, 191, 194, 202, 205, 209, 210, 211, 217, 218, 224, 227, 240, 243, 247, 248, 249, 253, 259, 260, 273, 275, 287, 292, 298, 300, 301, 302, 332, 333, 337, 341, 348, 353, 363, 502, 552, 555, 559, 562, 565, 566, 567, 568, 569, 571, 573, 575, 576, 577, 579, 580, 581], "configur": [2, 3, 4, 8, 39, 40, 42, 45, 47, 48, 73, 74, 75, 134, 175, 180, 181, 185, 188, 189, 191, 194, 202, 205, 211, 218, 240, 243, 254, 255, 257, 259, 260, 264, 270, 271, 272, 273, 275, 283, 284, 287, 292, 296, 298, 300, 301, 302, 306, 320, 325, 333, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 352, 353, 362, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 383, 394, 405, 407, 410, 469, 471, 476, 480, 483, 486, 499, 501, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 533, 535, 547, 548, 550, 553, 565, 568, 577, 580, 581, 583], "And": [2, 98, 227, 260], "default": [2, 7, 8, 14, 40, 42, 49, 73, 75, 126, 134, 163, 169, 182, 185, 188, 189, 190, 192, 200, 201, 202, 213, 217, 219, 227, 228, 230, 238, 239, 240, 250, 253, 255, 257, 260, 261, 264, 267, 268, 270, 282, 296, 302, 303, 306, 309, 310, 319, 320, 336, 363, 385, 387, 388, 390, 392, 395, 396, 401, 423, 424, 427, 444, 454, 506, 508, 518, 520, 521, 525, 526, 547, 548, 550, 555, 557, 559, 562, 565, 568, 574, 576, 578, 580, 581, 582], "valu": [2, 4, 5, 40, 42, 45, 48, 49, 72, 73, 75, 83, 84, 90, 95, 96, 98, 118, 119, 134, 139, 163, 164, 169, 179, 181, 182, 188, 189, 200, 203, 204, 213, 217, 218, 219, 238, 241, 242, 250, 253, 260, 264, 268, 274, 275, 280, 287, 292, 295, 296, 298, 306, 310, 320, 321, 322, 325, 333, 336, 337, 340, 345, 348, 354, 356, 357, 363, 376, 378, 380, 385, 387, 388, 390, 392, 395, 396, 401, 405, 406, 427, 429, 468, 500, 503, 504, 508, 510, 516, 518, 521, 526, 528, 529, 531, 542, 547, 550, 555, 559, 565, 568, 571, 572, 574, 575, 580, 581, 582], "mean": [2, 4, 5, 90, 98, 190, 213, 217, 228, 250, 253, 264, 266, 268, 274, 276, 282, 295, 306, 308, 310, 321, 325, 345, 548, 549, 554, 555, 559, 565, 571, 572, 575, 580, 581, 582], "model": [2, 3, 5, 8, 11, 12, 40, 42, 45, 47, 48, 49, 62, 71, 72, 73, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134, 140, 163, 169, 171, 175, 176, 178, 180, 185, 188, 189, 196, 199, 200, 202, 217, 218, 219, 221, 222, 227, 234, 237, 238, 240, 253, 254, 255, 256, 257, 258, 259, 260, 268, 269, 270, 271, 272, 274, 276, 281, 282, 283, 284, 286, 287, 292, 295, 296, 297, 298, 299, 300, 301, 302, 309, 310, 325, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 353, 356, 362, 363, 365, 366, 367, 369, 380, 383, 391, 394, 397, 399, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 422, 426, 427, 432, 433, 434, 437, 438, 439, 463, 464, 466, 469, 472, 473, 474, 475, 477, 478, 479, 480, 484, 485, 490, 492, 495, 496, 499, 500, 507, 516, 518, 523, 533, 534, 538, 548, 549, 550, 552, 553, 554, 555, 560, 562, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582], "neural_compressor": [2, 3, 5, 7, 14, 548, 549, 550, 552, 554, 557, 560, 565, 566, 567, 568, 569, 571, 574, 575, 576, 577, 578, 580, 581, 582], "import": [2, 3, 4, 5, 7, 169, 260, 270, 273, 353, 363, 548, 549, 550, 552, 554, 557, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581], "posttrainingquantconfig": [2, 7, 549, 578, 581], "conf": [2, 3, 5, 7, 176, 178, 188, 189, 218, 260, 269, 270, 287, 292, 301, 312, 313, 318, 320, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 353, 526, 529, 548, 552, 560, 578, 581], "eval": [2, 4, 5, 48, 227, 260, 264, 270, 306, 549, 579], "q_model": [2, 5, 73, 171, 176, 178, 260, 270, 549, 550, 554, 557, 560, 565, 567, 568, 575], "fit": [2, 5, 7, 180, 325, 337, 340, 549, 550, 552, 554, 560, 565, 567, 568, 569, 571, 572, 575], "calib_dataload": [2, 7, 220, 221, 260, 300, 301, 320, 337, 549, 550, 560, 565, 575], "dataload": [2, 7, 8, 16, 35, 40, 42, 45, 47, 48, 49, 73, 75, 171, 175, 176, 178, 180, 188, 189, 200, 211, 218, 221, 227, 238, 249, 254, 260, 270, 287, 292, 297, 300, 301, 302, 320, 337, 353, 356, 364, 369, 376, 380, 391, 405, 408, 410, 415, 417, 439, 480, 493, 496, 499, 507, 518, 519, 523, 547, 554, 560, 565, 566, 575, 579, 580, 582], "eval_func": [2, 188, 189, 227, 259, 260, 270, 301, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 548, 549, 550, 554, 566, 575, 581, 582], "save": [2, 4, 8, 40, 42, 45, 48, 73, 75, 134, 202, 206, 211, 240, 244, 249, 255, 257, 274, 284, 301, 312, 313, 314, 316, 318, 319, 320, 341, 348, 353, 354, 357, 363, 549, 560, 566, 567, 571, 572, 575], "path": [2, 3, 4, 8, 40, 42, 45, 48, 73, 75, 163, 169, 180, 181, 200, 201, 202, 217, 238, 239, 240, 253, 254, 255, 257, 259, 260, 270, 271, 272, 273, 276, 283, 284, 287, 292, 296, 298, 300, 301, 302, 318, 319, 320, 333, 336, 337, 353, 363, 364, 369, 383, 386, 393, 394, 397, 404, 405, 410, 412, 413, 427, 433, 444, 447, 450, 452, 453, 455, 457, 458, 459, 460, 464, 471, 476, 480, 483, 486, 487, 493, 503, 511, 516, 518, 519, 528, 543, 547, 548, 549, 550, 552, 554, 560, 565, 567, 571, 580, 582], "approach": [2, 3, 7, 73, 181, 260, 271, 272, 273, 282, 283, 284, 348, 380, 519, 526, 549, 550, 552, 555, 562, 573, 574, 581, 582], "quantizationawaretrainingconfig": [2, 581], "prepare_compress": [2, 353], "compression_manag": [2, 353], "callback": [2, 287, 292, 353, 354, 356, 357, 534], "on_train_begin": [2, 227, 260, 287, 292, 297, 298, 332, 333, 353, 552], "loop": [2, 3, 5, 321, 353, 559, 578, 581], "now": [2, 3, 217, 253, 516, 550, 554, 574, 580, 581], "auto": [2, 338, 363], "method": [2, 3, 4, 5, 7, 73, 134, 146, 163, 164, 175, 193, 198, 199, 200, 202, 206, 209, 210, 211, 214, 217, 220, 221, 231, 236, 237, 238, 240, 244, 247, 248, 249, 251, 253, 260, 267, 268, 273, 276, 282, 284, 285, 286, 290, 300, 309, 310, 312, 313, 334, 503, 508, 512, 530, 548, 550, 552, 553, 555, 565, 569, 571, 572, 575, 576, 580, 581], "avoid": [2, 200, 238, 579], "log": [2, 167, 287, 292, 366, 383, 394, 397, 404, 410, 412, 413, 469, 503, 509, 510, 511, 512, 517, 531, 547, 578, 579, 581], "fail": [2, 134, 512], "trace": [2, 73, 171, 175, 255, 257, 337, 343, 581], "info": [2, 40, 42, 45, 48, 72, 73, 134, 211, 214, 215, 220, 221, 225, 257, 295, 301, 314, 315, 318, 319, 320, 325, 336, 383, 384, 386, 393, 394, 397, 398, 400, 403, 503, 506, 511, 518, 534, 547, 557, 567], "entir": [2, 4, 5, 337, 571, 572], "conduct": 2, "imper": 2, "control": [2, 40, 42, 45, 75, 114, 176, 178, 276, 410, 415, 547, 570, 581], "flow": [2, 3, 260, 265, 266, 287, 292, 307, 308], "therefor": [2, 5, 572, 575, 577], "int8": [2, 5, 8, 40, 42, 45, 48, 51, 52, 72, 73, 74, 75, 164, 171, 179, 213, 250, 255, 256, 257, 320, 341, 357, 358, 418, 546, 547, 550, 553, 559, 574, 575, 576, 577, 578, 579, 580, 582], "lot": [2, 555], "9": [2, 4, 5, 7, 185, 275, 302, 563, 571, 572, 574, 581, 582, 583], "between": [2, 4, 8, 75, 164, 171, 179, 217, 219, 253, 265, 267, 268, 273, 275, 276, 307, 309, 310, 332, 418, 530, 534, 548, 552, 557, 562, 565, 575, 577, 578, 580, 581], "don": [2, 39, 164, 179, 325, 508, 547, 581], "t": [2, 4, 8, 39, 95, 96, 98, 134, 163, 164, 179, 217, 220, 221, 253, 266, 275, 276, 280, 301, 308, 325, 508, 517, 547, 548, 552, 554, 566, 571, 581, 582, 583], "need": [2, 5, 8, 39, 40, 42, 45, 47, 48, 73, 75, 80, 81, 82, 83, 86, 87, 90, 92, 93, 94, 97, 99, 100, 101, 103, 105, 106, 108, 109, 110, 111, 112, 115, 117, 118, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134, 155, 156, 160, 163, 180, 188, 189, 190, 198, 199, 202, 209, 210, 211, 217, 220, 221, 222, 223, 228, 236, 237, 240, 247, 248, 249, 253, 254, 260, 267, 268, 273, 280, 282, 287, 292, 301, 309, 310, 317, 318, 325, 337, 341, 345, 348, 362, 363, 537, 547, 548, 549, 550, 552, 554, 562, 566, 568, 571, 574, 575, 576, 577, 580, 581, 582], "becaus": [2, 217, 253, 264, 295, 306, 325, 571, 575, 580, 581], "modifi": [2, 84, 90, 98, 109, 202, 240, 260, 287, 292, 298, 333, 497, 547, 548, 554, 559, 582], "sourc": [2, 7, 40, 42, 49, 75, 221, 260, 262, 270, 282, 304, 431, 564, 573], "8": [2, 4, 5, 7, 137, 216, 252, 508, 559, 563, 568, 573, 581, 583], "As": [2, 109, 264, 306, 547, 549, 552, 555, 571, 572, 581], "cannot": [2, 264, 306, 506, 557, 558, 579], "iter": [2, 3, 5, 8, 40, 42, 45, 47, 48, 49, 73, 75, 169, 176, 178, 188, 189, 193, 198, 202, 203, 206, 211, 220, 221, 231, 236, 240, 241, 244, 249, 284, 297, 299, 319, 332, 335, 337, 356, 357, 358, 383, 511, 519, 550, 552, 571, 572, 574, 579, 581, 582], "so": [2, 8, 146, 217, 253, 297, 353, 555, 558, 562, 565, 575, 576, 579, 580], "might": [2, 547, 581], "meet": [2, 7, 301, 338, 341, 346, 557, 568, 573, 574, 575, 579, 581], "failur": [2, 530], "sometim": [2, 134, 163, 571, 575], "order": [2, 14, 175, 261, 262, 282, 301, 303, 304, 320, 339, 340, 341, 345, 346, 447, 450, 459, 520, 565, 571, 574, 579, 581], "successfulli": [2, 554, 573], "suggest": [2, 282, 286, 340, 578], "two": [2, 3, 121, 134, 171, 202, 206, 207, 211, 218, 240, 244, 245, 249, 264, 295, 299, 301, 306, 325, 332, 335, 363, 547, 548, 550, 552, 554, 559, 565, 566, 569, 571, 575, 576, 578, 581, 582], "first": [2, 3, 4, 5, 8, 49, 75, 121, 164, 179, 182, 200, 216, 238, 252, 254, 260, 264, 306, 338, 341, 427, 547, 550, 557, 563, 566, 574, 575, 576, 578, 579, 581, 582], "pass": [2, 4, 5, 8, 105, 109, 169, 180, 216, 252, 260, 280, 282, 287, 292, 298, 301, 333, 363, 461, 517, 530, 531, 548, 550, 552, 554, 557, 560, 565, 568, 571, 574, 575, 576, 582], "non": [2, 4, 146, 224, 296, 570, 571, 581], "traceabl": [2, 73], "class": [2, 3, 4, 140, 285, 331, 337, 441, 442, 548, 549, 550, 552, 555, 565, 568, 569, 577, 579, 581, 582], "name": [2, 4, 7, 40, 42, 47, 48, 71, 72, 73, 75, 81, 90, 91, 95, 96, 98, 134, 139, 140, 156, 163, 169, 171, 176, 178, 182, 200, 201, 202, 205, 206, 209, 210, 211, 214, 215, 217, 218, 219, 221, 222, 224, 225, 226, 238, 239, 240, 243, 244, 247, 248, 249, 251, 253, 255, 256, 257, 263, 264, 267, 268, 273, 274, 276, 282, 287, 290, 292, 295, 297, 299, 301, 305, 306, 309, 310, 315, 317, 318, 319, 320, 322, 325, 332, 334, 335, 354, 357, 363, 383, 387, 388, 390, 393, 394, 395, 396, 397, 399, 418, 427, 429, 447, 450, 452, 453, 459, 466, 467, 468, 469, 480, 496, 503, 506, 518, 520, 521, 542, 547, 548, 550, 554, 555, 559, 564, 565, 567, 570, 577, 578, 579, 581, 582, 583], "select": [2, 3, 200, 238, 272, 276, 283, 334, 346, 547, 562, 563, 572, 575, 579, 581], "proxi": 2, "object": [2, 3, 4, 7, 14, 40, 42, 45, 47, 48, 66, 72, 73, 75, 84, 85, 86, 87, 88, 89, 90, 91, 101, 102, 106, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 128, 129, 132, 133, 134, 137, 140, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 171, 175, 176, 178, 180, 181, 182, 188, 189, 190, 191, 193, 194, 198, 200, 201, 202, 206, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 231, 236, 238, 239, 240, 244, 247, 248, 249, 251, 252, 253, 254, 257, 259, 260, 261, 264, 267, 268, 269, 272, 273, 275, 283, 284, 286, 287, 288, 289, 290, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 309, 310, 313, 315, 317, 318, 319, 320, 322, 325, 332, 333, 334, 335, 336, 337, 340, 348, 354, 356, 357, 358, 362, 363, 380, 395, 396, 399, 402, 443, 508, 511, 518, 528, 530, 531, 535, 547, 548, 549, 550, 558, 565, 566, 567, 569, 574, 575, 580, 581], "them": [2, 90, 134, 200, 238, 549, 559, 560, 569, 571, 581], "prepar": [2, 4, 5, 7, 47, 73, 227, 254, 260, 287, 292, 298, 300, 405, 410, 498, 550, 554, 575], "dict": [2, 40, 42, 45, 47, 48, 49, 73, 75, 137, 139, 140, 146, 169, 171, 175, 176, 178, 181, 182, 188, 189, 199, 202, 218, 219, 224, 237, 240, 255, 256, 257, 260, 263, 264, 265, 266, 268, 271, 273, 276, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 295, 296, 297, 298, 299, 305, 306, 307, 308, 310, 312, 313, 319, 320, 322, 325, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 352, 354, 356, 357, 362, 363, 364, 366, 369, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 423, 424, 427, 435, 444, 447, 454, 462, 463, 464, 466, 468, 469, 470, 471, 476, 480, 483, 486, 487, 488, 489, 491, 493, 494, 496, 503, 504, 506, 508, 510, 511, 514, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 530, 531, 534, 535, 537, 539, 541, 542, 544, 565, 574, 579, 581], "http": [2, 4, 7, 171, 200, 202, 238, 240, 261, 262, 264, 265, 266, 282, 295, 297, 298, 303, 304, 306, 307, 308, 322, 325, 333, 543, 547, 550, 563, 564, 577], "tutori": [2, 573], "prototyp": 2, "guid": [2, 7, 200, 238, 550, 552, 563], "html": 2, "highlight": [2, 432, 435, 547], "decor": [2, 3, 8, 40, 66, 95, 96, 98, 169, 176, 178, 211, 214, 217, 224, 249, 251, 253, 267, 268, 285, 290, 295, 297, 299, 309, 310, 321, 325, 331, 332, 335, 348, 363, 513, 581], "untrac": 2, "part": [2, 49, 254, 260, 264, 295, 297, 306, 332, 552, 563, 566, 571], "global": [2, 139, 185, 295, 302, 325, 332, 531, 574, 581], "function": [2, 3, 5, 8, 42, 45, 48, 71, 75, 90, 134, 163, 188, 189, 201, 227, 239, 259, 260, 271, 282, 283, 284, 287, 292, 298, 301, 318, 333, 354, 357, 547, 548, 549, 552, 560, 562, 563, 565, 566, 571, 572, 575, 578, 579, 581], "call": [2, 3, 8, 39, 47, 146, 227, 260, 264, 275, 276, 287, 292, 295, 297, 298, 306, 332, 382, 415, 503, 511, 512, 547, 549, 560, 571, 575, 579, 580], "want": [2, 8, 95, 96, 98, 134, 198, 200, 236, 238, 297, 341, 353, 547, 548, 550, 554, 563, 565, 568, 569, 578, 579, 581], "move": [2, 75, 574, 577], "keep": [2, 8, 295, 296, 336, 341, 577, 581], "should": [2, 3, 4, 8, 42, 45, 48, 49, 71, 73, 74, 75, 82, 102, 139, 140, 164, 168, 188, 189, 198, 200, 202, 206, 211, 216, 217, 221, 222, 236, 238, 240, 244, 249, 252, 253, 257, 262, 267, 268, 297, 301, 304, 309, 310, 325, 332, 337, 348, 363, 427, 508, 547, 550, 554, 565, 568, 572, 575, 580, 581, 582], "try": [2, 198, 236, 447, 450, 459, 531, 557, 575], "detect": [2, 73, 171, 175, 264, 268, 306, 310, 315, 447, 450, 459, 518, 547], "ssd": [2, 583], "resnet34": [2, 583], "ptq": [2, 554, 562, 575, 579, 581], "r34": 2, "py": [2, 4, 8, 134, 169, 171, 262, 264, 265, 266, 297, 304, 306, 307, 308, 332, 534, 547, 554, 563, 575, 577, 579], "def": [2, 4, 5, 8, 95, 96, 98, 156, 188, 189, 337, 549, 550, 552, 554, 565, 568, 571, 575, 579, 581], "bboxes_labels_scor": 2, "bbox": [2, 264, 306, 565], "prob": 2, "criteria": [2, 259, 260, 287, 292, 295, 297, 300, 302, 323, 346], "0": [2, 4, 5, 7, 11, 40, 42, 45, 71, 72, 73, 74, 81, 119, 163, 169, 177, 185, 190, 192, 195, 196, 197, 199, 200, 203, 204, 207, 213, 217, 219, 220, 221, 228, 230, 233, 234, 235, 237, 238, 241, 242, 245, 250, 253, 255, 257, 259, 260, 268, 273, 275, 276, 280, 282, 285, 287, 292, 295, 300, 302, 310, 320, 325, 335, 341, 503, 511, 547, 548, 550, 552, 554, 555, 557, 559, 564, 565, 566, 568, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582], "45": [2, 275, 583], "max_output": 2, "200": [2, 216, 252, 581, 583], "box": [2, 217, 253, 264, 268, 306, 310, 340, 547, 565, 579, 580, 581], "label": [2, 14, 40, 42, 75, 188, 189, 200, 202, 203, 204, 205, 208, 213, 217, 219, 221, 222, 238, 240, 241, 242, 243, 246, 250, 253, 261, 263, 267, 268, 273, 274, 303, 305, 309, 310, 337, 435, 549, 550, 565, 571, 580], "score": [2, 14, 261, 262, 264, 265, 266, 268, 281, 295, 297, 303, 304, 306, 307, 308, 310, 322, 325, 332, 334, 343, 346, 565, 568, 571, 572, 578, 581], "zip": 2, "split": [2, 41, 50, 62, 72, 163, 216, 217, 252, 253, 273, 580], "squeez": 2, "dbox": 2, "dlabel": 2, "dscore": 2, "decode_singl": 2, "append": [2, 4, 175, 301, 340, 568, 569], "return": [2, 3, 4, 5, 14, 40, 42, 45, 47, 48, 49, 73, 75, 78, 81, 84, 85, 88, 89, 90, 91, 95, 96, 98, 102, 109, 113, 114, 118, 119, 120, 121, 122, 123, 131, 134, 137, 139, 140, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 169, 171, 175, 176, 178, 182, 188, 189, 190, 192, 199, 202, 206, 209, 210, 211, 213, 214, 216, 217, 218, 219, 224, 228, 230, 237, 240, 244, 247, 248, 249, 250, 251, 252, 253, 254, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 282, 283, 284, 285, 286, 287, 290, 292, 295, 296, 297, 298, 299, 301, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 318, 319, 320, 321, 325, 331, 332, 333, 334, 335, 336, 337, 340, 341, 345, 348, 349, 352, 353, 356, 357, 358, 362, 363, 383, 384, 386, 393, 394, 395, 396, 397, 399, 400, 402, 403, 427, 430, 431, 432, 433, 464, 503, 506, 508, 510, 511, 512, 518, 521, 530, 531, 534, 550, 554, 565, 566, 567, 568, 575, 579, 581], "process": [3, 5, 8, 40, 42, 45, 48, 73, 75, 140, 171, 188, 189, 200, 201, 202, 211, 213, 214, 217, 218, 227, 238, 239, 240, 249, 250, 251, 253, 254, 255, 257, 260, 271, 272, 275, 281, 283, 284, 287, 292, 295, 297, 298, 299, 301, 302, 325, 332, 333, 335, 336, 337, 340, 362, 379, 462, 463, 466, 499, 503, 507, 510, 511, 519, 547, 548, 549, 550, 552, 553, 554, 557, 569, 571, 572, 575, 579, 580, 581, 582], "autom": 3, "design": [3, 146, 199, 221, 222, 227, 237, 260, 275, 300, 309, 310, 341, 571, 572, 575], "artifici": 3, "network": [3, 4, 7, 171, 273, 276, 297, 322, 325, 343, 547, 552, 553, 557, 573, 575, 581], "ann": 3, "par": 3, "outperform": 3, "hand": [3, 264, 306, 547], "our": [3, 4, 7, 164, 557, 578], "leverag": [3, 103, 552, 569, 575], "algorithm": [3, 7, 8, 14, 47, 181, 216, 252, 261, 268, 271, 275, 283, 284, 286, 302, 303, 310, 340, 357, 358, 552, 559, 562, 571, 572, 575, 579, 581, 582], "built": [3, 8, 103, 146, 191, 196, 200, 201, 206, 208, 210, 211, 213, 214, 217, 221, 222, 224, 229, 232, 234, 238, 239, 244, 246, 248, 249, 250, 251, 253, 301, 309, 310, 313, 317, 548, 550, 554, 568, 580, 581, 582], "grid": [3, 286], "bayesian": [3, 286, 302, 344, 574], "optim": [3, 4, 5, 7, 12, 48, 73, 81, 85, 88, 89, 91, 102, 103, 113, 114, 120, 121, 122, 123, 140, 163, 181, 185, 221, 227, 254, 259, 260, 274, 286, 297, 298, 300, 302, 320, 322, 332, 333, 334, 340, 353, 354, 357, 364, 366, 370, 372, 374, 391, 395, 396, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 415, 416, 418, 419, 420, 421, 422, 425, 426, 439, 493, 499, 500, 510, 516, 519, 522, 526, 533, 538, 552, 554, 559, 562, 563, 567, 570, 571, 573, 574, 575, 576, 578, 579, 581, 582], "propos": [3, 8, 284, 325, 552, 566, 571], "base": [3, 8, 14, 40, 42, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 137, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 176, 177, 178, 179, 180, 181, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 260, 261, 264, 267, 268, 269, 271, 272, 273, 275, 276, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 295, 297, 299, 300, 301, 302, 303, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 332, 334, 335, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 354, 357, 358, 363, 368, 369, 370, 372, 373, 374, 375, 378, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 422, 423, 424, 426, 429, 431, 432, 435, 445, 447, 450, 452, 454, 455, 457, 458, 459, 460, 468, 471, 476, 480, 483, 486, 496, 500, 502, 504, 506, 510, 511, 512, 513, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 531, 532, 534, 536, 540, 541, 550, 553, 554, 555, 559, 570, 572, 578, 579, 581, 583], "given": [3, 39, 47, 48, 49, 71, 75, 95, 96, 98, 139, 140, 169, 216, 217, 252, 253, 264, 306, 318, 319, 320, 325, 332, 337, 348, 427, 433, 447, 450, 452, 453, 455, 457, 458, 460, 504, 518, 531, 571, 572, 580], "train": [3, 4, 7, 8, 40, 42, 45, 48, 73, 75, 90, 146, 188, 189, 200, 202, 217, 227, 238, 240, 253, 254, 260, 270, 271, 273, 274, 281, 283, 287, 292, 297, 298, 300, 301, 332, 333, 337, 348, 356, 526, 546, 550, 552, 553, 557, 562, 566, 569, 571, 572, 573, 578, 581, 582, 583], "evalu": [3, 4, 5, 8, 14, 40, 42, 45, 48, 73, 75, 180, 188, 189, 200, 218, 227, 238, 254, 259, 260, 261, 264, 265, 266, 267, 268, 270, 271, 272, 275, 276, 283, 284, 287, 292, 297, 298, 301, 302, 303, 306, 307, 308, 309, 310, 325, 332, 333, 337, 348, 356, 368, 370, 372, 374, 375, 376, 499, 507, 519, 523, 549, 550, 552, 560, 562, 565, 566, 568, 571, 575, 578, 579, 581, 582], "after": [3, 4, 5, 47, 49, 73, 175, 200, 213, 217, 220, 221, 227, 238, 250, 253, 254, 255, 257, 260, 273, 295, 297, 298, 299, 322, 325, 332, 333, 334, 335, 341, 504, 547, 548, 549, 550, 552, 557, 562, 565, 568, 569, 571, 572, 575, 576, 578, 579, 580, 581], "sever": [3, 4, 163, 217, 253, 299, 335, 547, 552, 562, 566, 571, 572, 574, 580, 581, 582], "procedur": [3, 181, 325, 341], "lie": [3, 284], "pareto": [3, 284, 285], "front": [3, 284, 285], "dyna": [3, 260, 273, 274, 275, 276, 277, 283, 302, 562, 574], "super": [3, 4, 5, 266, 273, 276, 308, 568], "metric": [3, 7, 8, 12, 14, 40, 42, 45, 48, 73, 75, 188, 189, 218, 221, 254, 259, 260, 270, 271, 272, 274, 276, 283, 284, 285, 286, 287, 292, 300, 301, 302, 337, 356, 376, 380, 386, 391, 405, 408, 410, 415, 439, 499, 507, 510, 515, 518, 519, 521, 537, 547, 548, 549, 550, 554, 566, 578, 579, 581, 582, 583], "predictor": [3, 272, 273, 274, 276, 283], "predict": [3, 4, 14, 169, 217, 221, 222, 253, 261, 265, 266, 267, 268, 274, 276, 303, 307, 308, 309, 310, 552, 565, 579, 580], "4x": [3, 4, 575], "more": [3, 4, 5, 6, 7, 90, 163, 169, 188, 217, 253, 264, 280, 282, 295, 306, 325, 348, 547, 550, 552, 554, 562, 563, 565, 566, 568, 569, 571, 572, 576, 581, 583], "sampl": [3, 7, 105, 131, 190, 193, 198, 200, 201, 202, 206, 211, 213, 217, 228, 231, 236, 238, 239, 240, 244, 249, 250, 253, 267, 268, 285, 309, 310, 340, 394, 450, 519, 550, 562, 575, 580, 581, 582, 583], "effici": [3, 549, 552, 569, 573], "than": [3, 4, 5, 82, 90, 180, 200, 217, 238, 253, 264, 306, 550, 560, 565, 568, 569, 571, 575, 578, 580, 581], "typic": [3, 90, 139, 146, 260, 270, 301, 553, 571, 572], "one": [3, 7, 8, 14, 75, 134, 139, 156, 191, 194, 211, 217, 227, 253, 260, 261, 264, 267, 268, 270, 273, 295, 298, 299, 303, 306, 309, 310, 325, 333, 335, 353, 512, 547, 552, 553, 554, 559, 562, 563, 565, 566, 568, 569, 571, 572, 574, 575, 577, 580, 581], "shot": [3, 7, 227, 260, 297, 299, 322, 335, 562, 571, 572, 573], "shown": [3, 427, 547, 549, 552, 565, 568, 569, 581], "figur": [3, 571], "phase": [3, 176, 178, 301, 332, 333, 571, 572, 575, 576, 581], "small": [3, 5, 264, 306, 343, 547, 581], "popul": [3, 275], "sub": [3, 73, 80, 81, 82, 83, 86, 87, 92, 93, 94, 97, 99, 100, 101, 103, 105, 106, 108, 110, 111, 112, 115, 117, 118, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134, 218, 257, 260, 276, 348, 548, 581], "randomli": [3, 217, 253, 286, 340, 347, 580, 581], "measur": [3, 8, 40, 42, 45, 48, 73, 75, 169, 218, 275, 276, 281, 321, 537, 548, 552, 565, 579, 581], "provid": [3, 8, 134, 146, 188, 189, 211, 214, 217, 227, 249, 251, 253, 259, 260, 264, 273, 282, 287, 292, 300, 301, 306, 337, 427, 447, 453, 503, 512, 537, 546, 547, 548, 549, 553, 554, 555, 556, 557, 562, 563, 566, 567, 574, 575, 579, 581, 582, 583], "initi": [3, 4, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 140, 169, 188, 189, 197, 200, 219, 227, 235, 238, 254, 260, 271, 272, 283, 284, 296, 297, 301, 318, 332, 348, 382, 405, 406, 415, 464, 496, 498, 506, 519, 526, 549, 550, 565, 566, 571, 572, 581], "inner": 3, "multi": [3, 102, 218, 260, 264, 275, 280, 282, 306, 346, 376, 549, 550, 562, 568, 571, 581], "evolutionari": 3, "extens": [3, 8, 73, 301, 453, 518, 559, 562, 566, 567, 573, 581, 582], "next": [3, 188, 193, 231, 258, 284, 299, 335, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 547, 566, 574, 581], "cycl": 3, "continu": [3, 264, 295, 306, 325, 341, 571], "until": [3, 346, 581], "conclud": 3, "count": [3, 4, 47, 284, 325, 341, 550], "met": [3, 189, 348, 559, 566, 575, 579], "tensorflow": [3, 4, 7, 8, 81, 103, 105, 109, 134, 146, 169, 199, 200, 201, 202, 205, 206, 207, 209, 210, 211, 214, 217, 219, 224, 237, 238, 239, 240, 243, 244, 245, 247, 248, 249, 251, 253, 257, 258, 259, 260, 262, 264, 267, 268, 269, 270, 300, 304, 306, 309, 310, 319, 337, 346, 425, 426, 438, 439, 446, 495, 496, 497, 499, 547, 549, 552, 556, 557, 559, 562, 563, 566, 567, 571, 573, 574, 575, 578, 581, 582], "Not": [3, 218, 227, 260, 287, 292, 502], "yet": [3, 45, 48, 75, 325, 547], "simplest": [3, 552], "launcher": [3, 552, 571], "experiment": [3, 5, 14, 212, 302, 496, 548, 550, 552, 554, 557, 566, 567, 568, 569, 571, 574, 576, 577, 580], "agent": 3, "nasconfig": [3, 181, 260, 272, 283, 284], "argument": [3, 260, 280, 282, 287, 292, 298, 301, 333, 365, 473, 477, 482, 485, 491, 503, 511, 531, 548, 552], "config": [3, 7, 45, 47, 48, 49, 73, 74, 75, 137, 139, 140, 146, 180, 188, 189, 200, 218, 227, 238, 259, 260, 273, 281, 284, 287, 292, 295, 296, 297, 298, 299, 302, 322, 325, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 352, 353, 356, 362, 363, 364, 365, 368, 369, 370, 372, 374, 375, 378, 404, 410, 412, 413, 417, 418, 462, 464, 471, 473, 476, 477, 480, 482, 483, 485, 486, 493, 496, 499, 507, 518, 521, 522, 523, 524, 526, 528, 529, 531, 539, 541, 544, 547, 552, 554, 557, 562, 567, 571, 574, 576, 578, 579, 581], "search_algorithm": [3, 181, 260, 283, 284, 302], "nsga2": [3, 275], "supernet": [3, 275, 276, 278, 279], "ofa_mbv3_d234_e346_k357_w1": 3, "acc": [3, 4, 45, 48, 268, 276, 310, 321, 579, 583], "mac": [3, 272, 274, 276, 281, 283], "50": [3, 264, 266, 275, 306, 308, 583], "num_ev": [3, 275], "250": 3, "results_csv_path": 3, "search_result": 3, "csv": [3, 273, 276, 518, 547], "batch_siz": [3, 4, 190, 192, 195, 196, 197, 198, 199, 200, 201, 220, 221, 228, 230, 233, 234, 235, 236, 237, 238, 239, 255, 257, 276, 281, 320, 369, 383, 394, 496, 519, 548, 549, 550, 554, 557, 560, 575], "64": [3, 4, 217, 253, 580, 583], "dataset_path": [3, 276, 281, 519], "dataset": [3, 5, 7, 8, 16, 40, 42, 45, 48, 73, 75, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 211, 220, 221, 228, 230, 231, 233, 234, 235, 236, 237, 249, 259, 260, 264, 265, 266, 268, 270, 276, 300, 301, 302, 306, 307, 308, 310, 337, 383, 391, 394, 397, 405, 410, 414, 415, 416, 427, 439, 516, 518, 519, 520, 548, 549, 554, 555, 565, 571, 572, 575, 577, 581, 582, 583], "imagenet": [3, 5, 202, 205, 213, 240, 243, 250, 276, 579, 580, 582, 583], "ilsvrc2012": [3, 276], "under": [3, 4, 134, 146, 202, 240, 362, 547, 550, 564, 565, 569, 571, 572, 575, 579, 581], "file": [3, 8, 73, 163, 169, 178, 180, 181, 188, 189, 200, 201, 202, 205, 216, 217, 226, 238, 239, 240, 243, 252, 253, 254, 257, 259, 260, 264, 270, 271, 272, 273, 274, 276, 283, 284, 287, 292, 296, 298, 300, 301, 302, 306, 320, 333, 336, 337, 362, 363, 368, 369, 370, 371, 372, 373, 374, 375, 427, 464, 473, 477, 487, 503, 510, 511, 517, 518, 519, 531, 535, 539, 541, 543, 544, 547, 554, 558, 560, 564, 565, 567, 568, 571, 574, 579, 580], "input": [3, 8, 40, 42, 47, 49, 71, 72, 73, 75, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 115, 118, 119, 128, 129, 131, 132, 133, 134, 139, 140, 146, 163, 169, 171, 175, 188, 189, 200, 201, 202, 204, 213, 216, 217, 219, 221, 222, 227, 238, 239, 240, 242, 250, 252, 253, 254, 255, 256, 257, 259, 260, 264, 269, 276, 280, 282, 287, 292, 301, 306, 309, 310, 315, 317, 318, 319, 320, 325, 332, 337, 363, 365, 376, 399, 404, 405, 407, 410, 411, 412, 413, 414, 447, 450, 457, 458, 459, 461, 473, 477, 482, 485, 491, 516, 519, 525, 547, 549, 550, 552, 554, 557, 559, 560, 565, 566, 567, 571, 574, 575, 579, 580, 582], "aim": [3, 572, 581], "accord": [3, 8, 47, 75, 146, 188, 200, 201, 202, 211, 214, 217, 238, 239, 240, 249, 251, 253, 260, 282, 299, 300, 320, 325, 335, 338, 340, 341, 343, 345, 348, 517, 550, 554, 571, 572, 576, 580, 581], "note": [3, 4, 7, 40, 42, 45, 48, 73, 75, 82, 260, 264, 287, 292, 298, 306, 325, 333, 346, 399, 410, 414, 547, 548, 554, 555, 559, 563, 571, 575, 579, 581, 582], "regist": [3, 8, 40, 66, 176, 178, 202, 206, 209, 210, 211, 214, 217, 219, 224, 227, 240, 244, 247, 248, 249, 251, 253, 254, 260, 267, 268, 285, 286, 287, 288, 289, 290, 292, 295, 297, 299, 309, 310, 317, 320, 321, 322, 325, 331, 332, 334, 335, 340, 348, 548, 550, 554, 565, 568, 581], "inherit": [3, 8, 42, 45, 48, 73, 74, 75, 197, 217, 219, 227, 235, 253, 260, 297, 299, 332, 335, 550], "nasbas": [3, 271, 272, 283, 284], "own": [3, 42, 45, 48, 73, 74, 75, 102, 198, 217, 236, 253, 547, 549, 550, 562, 565, 568, 578], "just": [3, 4, 5, 39, 190, 211, 214, 215, 217, 220, 221, 222, 223, 225, 228, 253, 569, 575, 580, 581], "registri": [3, 295, 297, 299, 322, 325, 332, 334, 335], "well": [3, 4, 39, 188, 189, 337, 550, 575, 577, 582], "wai": [3, 201, 202, 205, 239, 240, 243, 547, 549, 550, 565, 569, 571, 572, 575, 581, 582], "mobilenetv3": [3, 275, 276], "lt": [3, 279, 550, 570], "wmt": 3, "en": 3, "de": 3, "static": [4, 5, 8, 71, 73, 134, 163, 258, 273, 301, 318, 337, 376, 380, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 419, 447, 450, 452, 453, 455, 457, 458, 459, 460, 470, 487, 489, 494, 496, 501, 503, 508, 510, 516, 517, 519, 521, 526, 531, 535, 542, 543, 557, 562, 581, 583], "quantiz": [4, 8, 23, 40, 41, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 117, 121, 123, 125, 131, 137, 139, 140, 143, 145, 146, 156, 171, 175, 176, 178, 180, 188, 189, 213, 220, 221, 227, 250, 255, 257, 258, 259, 260, 270, 301, 302, 320, 339, 340, 341, 342, 343, 345, 346, 347, 348, 353, 354, 357, 358, 362, 363, 375, 380, 410, 412, 418, 499, 507, 519, 523, 547, 548, 549, 550, 554, 557, 559, 560, 562, 565, 566, 567, 568, 569, 573, 577, 579, 580, 581, 582], "involv": 4, "weight": [4, 5, 7, 8, 40, 42, 49, 71, 72, 73, 75, 88, 89, 90, 146, 163, 164, 171, 179, 255, 257, 267, 268, 282, 291, 295, 297, 299, 309, 310, 319, 320, 322, 325, 332, 334, 335, 343, 423, 528, 546, 547, 553, 557, 559, 560, 565, 568, 571, 572, 574, 575, 579, 581, 582], "float": [4, 5, 14, 40, 42, 45, 48, 72, 73, 75, 134, 163, 171, 200, 213, 238, 250, 260, 261, 262, 264, 265, 266, 273, 275, 276, 287, 292, 295, 297, 298, 299, 303, 304, 306, 307, 308, 319, 320, 325, 332, 333, 334, 335, 340, 366, 384, 393, 402, 403, 418, 424, 479, 487, 503, 504, 508, 510, 516, 518, 519, 526, 528, 529, 537, 546, 550, 555, 565, 574, 575, 580], "int": [4, 40, 42, 45, 47, 48, 72, 73, 75, 134, 163, 169, 190, 199, 200, 201, 213, 217, 228, 237, 238, 239, 250, 253, 255, 257, 262, 264, 268, 273, 275, 276, 285, 304, 306, 310, 320, 321, 325, 341, 369, 382, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 409, 410, 411, 412, 413, 414, 415, 417, 461, 496, 503, 504, 506, 508, 509, 510, 511, 512, 518, 519, 521, 526, 528, 531, 543, 550, 565, 571, 574, 580], "feed": [4, 40, 42, 73, 169, 199, 237, 380, 552], "batch": [4, 5, 40, 42, 45, 47, 75, 90, 139, 190, 192, 193, 198, 199, 220, 221, 227, 228, 230, 231, 236, 237, 260, 276, 280, 282, 287, 292, 346, 353, 383, 394, 516, 547, 549, 552, 571, 580, 581, 583], "data": [4, 7, 8, 12, 40, 42, 45, 47, 48, 49, 72, 73, 75, 83, 131, 134, 163, 169, 171, 175, 180, 188, 189, 218, 219, 220, 221, 255, 257, 258, 260, 276, 281, 295, 301, 302, 318, 325, 337, 340, 346, 363, 364, 366, 369, 376, 377, 378, 380, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 427, 443, 444, 447, 450, 454, 459, 462, 463, 464, 466, 469, 471, 476, 480, 483, 486, 488, 493, 496, 503, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 530, 534, 539, 541, 542, 544, 547, 549, 550, 554, 555, 559, 563, 565, 566, 575, 576, 577, 578, 579, 580, 581], "through": [4, 171, 188, 189, 216, 252, 337, 341, 559, 560, 562, 563, 565, 568, 569, 574], "comput": [4, 5, 14, 72, 75, 90, 146, 171, 227, 254, 260, 261, 262, 264, 265, 266, 268, 274, 303, 304, 306, 307, 308, 310, 553, 565, 566, 571, 572, 575, 581], "distribut": [4, 7, 47, 164, 179, 190, 192, 193, 195, 196, 197, 198, 199, 220, 221, 228, 230, 231, 233, 234, 235, 236, 237, 254, 260, 287, 292, 340, 506, 552, 563, 575, 577, 581, 583], "activ": [4, 5, 7, 8, 40, 41, 42, 45, 48, 49, 50, 62, 73, 75, 152, 171, 226, 255, 257, 320, 423, 546, 547, 553, 555, 559, 570, 574, 575, 579, 582], "observ": [4, 555, 578, 579, 581], "point": [4, 5, 49, 71, 72, 213, 250, 265, 266, 285, 307, 308, 321, 340, 546, 555, 565, 575, 580, 581], "record": [4, 200, 201, 202, 208, 219, 226, 238, 239, 240, 246, 550, 578, 579, 581], "These": [4, 562], "infer": [4, 5, 7, 8, 47, 49, 156, 163, 259, 260, 300, 319, 337, 546, 552, 566, 568, 571, 572, 573, 575, 579, 581], "time": [4, 5, 169, 217, 253, 268, 280, 310, 321, 340, 363, 504, 510, 511, 516, 531, 554, 558, 568, 571, 572, 573, 575, 578, 579, 580, 581], "A": [4, 7, 42, 48, 73, 75, 82, 84, 98, 102, 103, 134, 137, 139, 140, 146, 163, 169, 175, 176, 178, 202, 206, 211, 216, 217, 220, 221, 222, 223, 240, 244, 249, 252, 253, 254, 260, 261, 264, 265, 266, 268, 271, 283, 284, 285, 286, 287, 288, 289, 290, 292, 295, 296, 297, 298, 299, 303, 306, 307, 308, 309, 310, 313, 315, 319, 322, 325, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 345, 346, 347, 349, 352, 550, 556, 559, 565, 567, 571, 573, 580, 581, 582], "simpl": [4, 7, 217, 253, 547, 563, 578, 581], "techniqu": [4, 5, 7, 260, 562, 569, 571, 572, 574, 575, 582], "simpli": [4, 297, 554, 567], "divid": [4, 581], "rang": [4, 5, 8, 203, 204, 217, 241, 242, 253, 264, 273, 306, 353, 550, 552, 554, 555, 571, 575, 580], "256": [4, 207, 213, 245, 250, 548, 550, 554, 580, 583], "support": [4, 42, 45, 47, 48, 72, 73, 74, 75, 102, 109, 126, 188, 189, 190, 199, 200, 202, 206, 209, 210, 211, 213, 214, 217, 218, 219, 220, 221, 224, 227, 228, 237, 238, 240, 244, 247, 248, 249, 250, 251, 253, 260, 267, 268, 270, 275, 276, 282, 285, 287, 288, 289, 290, 292, 295, 297, 301, 309, 310, 315, 321, 325, 332, 337, 346, 356, 357, 358, 380, 447, 450, 452, 453, 455, 457, 458, 459, 460, 466, 500, 508, 518, 547, 548, 555, 572, 573, 576, 578, 581, 583], "sophist": 4, "addit": [4, 90, 98, 175, 188, 353, 503, 547, 552, 577], "step": [4, 5, 40, 42, 45, 75, 121, 227, 260, 295, 297, 298, 299, 321, 322, 325, 332, 333, 334, 335, 353, 547, 552, 553, 554, 566, 571, 572, 574, 576, 578, 579, 581], "allow": [4, 5, 224, 340, 535, 547, 548, 552, 554, 555, 565, 566, 574, 582], "u": [4, 98, 164, 179], "instead": [4, 181, 182, 199, 237, 363], "back": [4, 40, 42, 45, 48, 73, 75, 146, 217, 253, 273], "everi": [4, 8, 45, 74, 95, 96, 98, 295, 297, 298, 325, 332, 333, 571, 581], "signific": [4, 7, 573, 575], "speed": [4, 7, 572, 573, 575], "up": [4, 7, 47, 98, 129, 217, 253, 260, 276, 287, 292, 296, 321, 404, 547, 554, 559, 562, 573, 574, 575, 578, 580, 582], "pre": [4, 140, 188, 189, 200, 238, 281, 320, 337, 550, 552, 566, 571, 573, 575, 579, 581], "notabl": 4, "modif": [4, 8, 487, 549, 559], "enabl": [4, 7, 73, 75, 282, 297, 332, 506, 547, 554, 566, 570, 571, 572, 573, 576, 581], "replac": [4, 48, 113, 114, 134, 266, 308, 318, 341, 518, 554, 577], "quantstub": 4, "dequantstub": 4, "begin": [4, 140, 227, 260, 287, 292, 297, 298, 322, 332, 333, 552, 571, 581], "end": [4, 5, 8, 134, 169, 200, 216, 217, 227, 238, 252, 253, 260, 273, 297, 298, 321, 332, 333, 552, 559, 563, 568, 571, 572, 579, 580, 581], "relu6": [4, 102, 559], "_make_divis": 4, "v": [4, 98, 582], "divisor": 4, "min_valu": 4, "none": [4, 8, 14, 40, 42, 45, 47, 48, 49, 71, 72, 73, 75, 91, 118, 134, 140, 146, 163, 169, 171, 175, 180, 181, 182, 185, 188, 189, 190, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 213, 217, 218, 219, 220, 221, 227, 228, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 250, 253, 254, 255, 257, 259, 260, 261, 264, 267, 268, 269, 270, 271, 273, 275, 276, 280, 282, 283, 284, 287, 291, 292, 296, 297, 300, 301, 302, 303, 306, 309, 310, 316, 318, 319, 320, 321, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 353, 354, 356, 357, 362, 363, 364, 365, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 382, 384, 385, 386, 387, 388, 390, 392, 394, 395, 396, 398, 401, 404, 405, 406, 409, 410, 413, 415, 416, 417, 432, 447, 450, 452, 459, 464, 466, 471, 473, 476, 477, 480, 482, 483, 485, 486, 487, 488, 492, 493, 496, 498, 501, 503, 504, 506, 509, 511, 512, 516, 517, 518, 519, 520, 521, 522, 524, 526, 527, 528, 530, 531, 535, 543, 550, 565, 575, 579, 580, 581], "taken": [4, 188, 189, 337], "tf": [4, 7, 75, 140, 146, 169, 199, 200, 201, 202, 217, 237, 238, 239, 240, 253, 317, 319, 366, 547, 554, 567, 573, 576, 580], "repo": [4, 200, 238, 550, 556], "It": [4, 7, 8, 73, 81, 90, 188, 189, 226, 260, 266, 268, 273, 274, 285, 295, 300, 301, 308, 310, 325, 337, 340, 341, 342, 345, 348, 547, 548, 552, 571, 572, 575, 578, 581, 582], "ensur": [4, 47, 49, 217, 253, 298, 333, 340, 382, 415, 447, 450, 452, 459, 501, 547, 554, 555, 557, 575, 580], "layer": [4, 8, 40, 42, 45, 48, 73, 74, 75, 98, 139, 140, 146, 219, 226, 260, 282, 287, 292, 295, 296, 298, 325, 333, 336, 354, 356, 357, 363, 530, 553, 562, 571, 572, 577], "channel": [4, 8, 71, 72, 164, 179, 213, 217, 250, 253, 276, 280, 295, 325, 447, 450, 459, 562, 563, 571, 572, 580, 583], "number": [4, 5, 73, 95, 96, 176, 178, 190, 198, 201, 213, 217, 228, 236, 239, 250, 253, 265, 266, 268, 275, 284, 295, 307, 308, 310, 325, 332, 335, 340, 357, 358, 450, 506, 516, 519, 547, 550, 554, 555, 565, 571, 575, 578, 580, 581], "divis": 4, "seen": [4, 8, 363], "here": [4, 5, 7, 39, 98, 146, 264, 271, 282, 283, 306, 547, 550, 554, 557, 559, 565, 568, 571, 575, 577, 578], "blob": [4, 171, 261, 262, 265, 266, 295, 303, 304, 307, 308, 325], "master": [4, 261, 262, 265, 266, 295, 298, 303, 304, 307, 308, 325, 333], "research": [4, 564], "slim": [4, 264, 306, 317, 319, 567], "net": [4, 317], "mobilenet": [4, 578, 583], "param": [4, 8, 49, 73, 74, 75, 89, 95, 96, 98, 118, 119, 134, 163, 169, 171, 175, 190, 218, 224, 228, 264, 267, 268, 282, 306, 309, 310, 337, 340, 363, 385, 417, 518, 521, 567, 581], "new_v": 4, "max": [4, 48, 49, 72, 75, 164, 179, 217, 253, 265, 266, 307, 308, 340, 528, 546, 547, 575, 580, 581], "sure": [4, 163, 295, 297, 299, 325, 332, 335, 447, 547], "round": [4, 5, 164, 179, 546, 555, 575], "down": [4, 90], "doe": [4, 5, 14, 261, 264, 273, 303, 306, 338, 550, 555, 565, 577, 580], "go": [4, 341, 559, 574, 580], "10": [4, 7, 202, 240, 264, 306, 340, 496, 547, 550, 563, 574, 580, 581], "convbnrelu": 4, "sequenti": [4, 75, 198, 236, 301, 342, 569, 581], "__init__": [4, 8, 549, 550, 565, 568, 581], "self": [4, 8, 91, 121, 260, 264, 287, 297, 306, 340, 531, 547, 549, 550, 562, 565, 568, 578, 579, 581], "in_plan": 4, "out_plan": 4, "kernel_s": 4, "stride": [4, 217, 253, 580], "group": [4, 334, 435, 562, 571, 572, 579, 580, 581, 583], "pad": [4, 41, 50, 62, 99, 100, 200, 217, 238, 253, 280, 282, 550, 580], "conv2d": [4, 45, 74, 88, 89, 93, 94, 99, 100, 164, 559, 579, 581], "bia": [4, 71, 75, 163, 164, 255, 257, 280, 579], "fals": [4, 5, 8, 40, 42, 45, 47, 48, 49, 71, 73, 75, 91, 99, 100, 118, 121, 128, 134, 137, 148, 155, 160, 164, 167, 168, 169, 189, 190, 192, 195, 196, 197, 199, 200, 202, 213, 217, 218, 219, 220, 221, 226, 228, 230, 233, 234, 235, 237, 238, 240, 250, 253, 264, 267, 268, 273, 274, 275, 276, 280, 281, 282, 295, 306, 309, 310, 318, 325, 348, 356, 435, 454, 503, 506, 511, 512, 518, 537, 543, 550, 559, 565, 568, 574, 575, 579, 580, 582], "batchnorm2d": 4, "momentum": [4, 297, 322, 562, 571, 572, 582], "inplac": [4, 5], "invertedresidu": 4, "inp": 4, "oup": 4, "expand_ratio": 4, "assert": [4, 568], "hidden_dim": 4, "use_res_connect": 4, "pw": 4, "extend": [4, 90], "dw": 4, "skip_add": 4, "forward": [4, 5, 47, 219, 280, 282, 320, 574, 575, 579], "x": [4, 47, 199, 217, 237, 253, 276, 280, 282, 340, 552, 554, 567, 571, 575, 579, 580], "els": [4, 47, 90, 91, 169, 198, 236, 341, 503, 518, 579], "num_class": [4, 268, 310], "1000": [4, 275, 516, 582], "width_mult": 4, "inverted_residual_set": 4, "round_nearest": 4, "v2": [4, 7, 171, 343, 554, 577, 581, 583], "arg": [4, 47, 73, 81, 131, 200, 201, 202, 238, 239, 240, 259, 260, 270, 282, 292, 295, 300, 301, 312, 313, 314, 317, 320, 321, 333, 340, 353, 368, 370, 372, 373, 374, 375, 385, 387, 388, 390, 392, 395, 396, 401, 503, 511, 531, 549, 550, 552, 554, 567, 571, 575, 579, 580], "width": [4, 213, 217, 250, 253, 276, 295, 325, 554, 575, 580, 582], "multipli": [4, 555], "adjust": [4, 5, 276, 325, 575], "amount": 4, "structur": [4, 134, 297, 332, 352, 443, 562, 571, 572, 575, 579, 583], "multipl": [4, 90, 139, 191, 192, 200, 201, 203, 204, 205, 206, 207, 211, 214, 217, 224, 229, 230, 232, 238, 239, 241, 242, 243, 244, 245, 249, 251, 253, 269, 297, 312, 313, 315, 332, 339, 503, 550, 557, 569, 578, 581], "turn": [4, 565], "block": [4, 260, 273, 282, 287, 292, 295, 298, 325, 333, 535, 562, 568, 571, 572], "input_channel": 4, "32": [4, 171, 264, 306, 554, 560, 571, 583], "last_channel": 4, "1280": 4, "c": [4, 98, 102, 202, 240, 547, 550, 558, 563, 581], "n": [4, 98, 201, 217, 239, 253, 262, 295, 304, 325, 506, 550, 552, 571, 572, 580], "16": [4, 35, 549, 550, 571, 583], "6": [4, 7, 45, 547, 559, 575, 581, 583], "24": [4, 35, 581, 583], "96": [4, 264, 306, 583], "160": 4, "320": 4, "onli": [4, 8, 42, 45, 48, 49, 73, 75, 81, 84, 85, 86, 87, 88, 89, 90, 91, 98, 101, 102, 106, 108, 109, 110, 111, 112, 115, 118, 119, 128, 129, 132, 133, 139, 164, 179, 200, 218, 220, 221, 224, 238, 260, 270, 282, 295, 297, 325, 332, 346, 518, 528, 530, 531, 548, 549, 554, 557, 559, 566, 572, 574, 579, 581, 582], "element": [4, 49, 198, 236, 260, 264, 280, 282, 287, 292, 295, 298, 306, 325, 333, 381, 550, 562, 565, 571], "assum": [4, 8, 216, 252, 264, 285, 306, 559], "know": [4, 134, 220, 221, 254, 260, 287, 292, 504, 554, 577], "len": [4, 171, 217, 253, 340, 550, 554, 571, 580], "rais": [4, 14, 90, 95, 96, 98, 109, 134, 219, 261, 264, 267, 268, 295, 296, 297, 303, 306, 309, 310, 325, 332, 336, 340, 518, 531, 571, 572], "valueerror": [4, 14, 90, 95, 96, 98, 109, 134, 261, 264, 268, 303, 306, 310, 558], "empti": [4, 139, 264, 306, 340], "got": [4, 169, 558, 579], "format": [4, 40, 42, 45, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 81, 169, 200, 201, 202, 206, 211, 238, 239, 240, 244, 249, 255, 257, 260, 264, 270, 273, 284, 306, 320, 345, 469, 508, 526, 550, 552, 554, 557, 565, 566, 567, 575], "build": [4, 7, 8, 47, 139, 146, 156, 176, 177, 178, 179, 257, 258, 271, 273, 283, 284, 314, 316, 318, 319, 320, 383, 384, 386, 397, 398, 400, 403, 427, 487, 496, 518, 535, 547, 563, 567, 573, 578, 581], "invert": 4, "residu": [4, 282], "output_channel": 4, "last": [4, 73, 75, 121, 175, 188, 190, 228, 282, 295, 322, 325, 348, 487, 547, 566, 575], "classifi": [4, 200, 238, 268, 310, 341, 550, 552], "dropout": [4, 280, 282], "m": [4, 47, 72, 98, 295, 325, 552, 583], "isinst": 4, "init": [4, 50, 178, 219, 323, 348, 550, 565, 568], "kaiming_normal_": 4, "mode": [4, 8, 39, 40, 42, 45, 48, 53, 71, 72, 73, 75, 134, 209, 218, 247, 260, 264, 306, 319, 332, 348, 363, 383, 510, 547, 548, 562, 563, 575, 576, 581], "fan_out": 4, "zeros_": 4, "elif": 4, "ones_": 4, "normal_": 4, "01": [4, 555, 574, 581, 582, 583], "bn": [4, 40, 90, 109, 583], "prior": [4, 47, 117, 340, 581], "numer": [4, 5, 268, 310, 546, 566, 573], "fuse_model": [4, 5], "fuse_modul": 4, "true": [4, 5, 47, 49, 71, 73, 75, 90, 91, 113, 134, 137, 139, 167, 169, 171, 189, 190, 198, 200, 202, 203, 216, 217, 218, 228, 236, 238, 240, 241, 252, 253, 255, 257, 262, 264, 268, 273, 280, 282, 290, 295, 304, 306, 310, 320, 325, 348, 464, 503, 506, 511, 512, 518, 550, 554, 559, 565, 568, 574, 575, 576, 579, 580, 581, 582], "idx": [4, 285, 318, 550], "str": [4, 14, 40, 42, 47, 48, 49, 73, 134, 163, 171, 176, 178, 190, 200, 201, 202, 206, 209, 210, 211, 213, 214, 217, 219, 224, 228, 238, 239, 240, 244, 247, 248, 249, 250, 251, 253, 255, 257, 258, 261, 262, 264, 266, 267, 268, 273, 275, 276, 285, 290, 303, 304, 306, 308, 309, 310, 312, 313, 317, 319, 320, 325, 345, 353, 356, 364, 365, 366, 369, 376, 377, 378, 380, 382, 383, 386, 387, 388, 390, 393, 394, 395, 396, 397, 398, 399, 402, 405, 406, 407, 409, 410, 415, 416, 417, 418, 423, 424, 427, 429, 430, 431, 432, 433, 435, 444, 445, 447, 448, 450, 452, 453, 454, 455, 457, 458, 459, 460, 462, 463, 464, 466, 468, 469, 471, 473, 476, 477, 480, 482, 483, 485, 486, 487, 488, 491, 492, 493, 496, 503, 505, 506, 508, 510, 511, 514, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 530, 531, 534, 535, 542, 543, 550, 565, 574, 579, 580], "help": [4, 7, 84, 226, 270, 318, 380, 518, 567, 581], "averagemet": 4, "store": [4, 49, 202, 240, 264, 282, 288, 289, 290, 295, 297, 306, 322, 325, 332, 334, 335, 340, 560], "averag": [4, 171, 264, 265, 266, 268, 306, 307, 308, 310, 552, 565, 568, 571, 581], "fmt": 4, "f": [4, 98, 552, 554, 575], "reset": [4, 14, 261, 267, 268, 303, 309, 310, 321, 531, 565], "val": [4, 75, 169, 202, 205, 240, 243, 296, 336, 568], "avg": [4, 5, 575], "sum": [4, 268, 310, 552], "updat": [4, 14, 35, 90, 102, 134, 139, 146, 257, 261, 267, 268, 276, 295, 297, 303, 309, 310, 318, 319, 320, 322, 325, 332, 335, 336, 348, 366, 383, 384, 385, 386, 394, 397, 399, 400, 402, 404, 410, 412, 413, 414, 417, 487, 510, 514, 519, 522, 524, 528, 547, 557, 565, 570, 571, 572, 581], "__str__": 4, "fmtstr": 4, "__dict__": 4, "target": [4, 5, 47, 72, 73, 118, 119, 134, 163, 219, 273, 296, 299, 325, 335, 336, 338, 340, 431, 432, 550, 552, 554, 566, 571, 572, 579, 580, 581, 582], "topk": [4, 548, 554, 565], "over": [4, 5, 7, 202, 206, 211, 240, 244, 249, 264, 268, 306, 310, 340, 562, 565, 574, 581], "k": [4, 268, 310, 565, 571], "top": [4, 134, 217, 253, 259, 260, 268, 287, 292, 300, 310, 565, 580, 583], "specifi": [4, 42, 45, 48, 49, 73, 74, 75, 134, 163, 188, 189, 217, 218, 253, 259, 260, 264, 267, 268, 271, 274, 276, 283, 284, 287, 292, 300, 301, 306, 309, 310, 320, 337, 362, 363, 380, 383, 386, 393, 394, 395, 397, 398, 399, 404, 405, 407, 408, 410, 412, 413, 417, 418, 419, 432, 464, 468, 469, 470, 489, 494, 510, 514, 518, 531, 535, 547, 553, 554, 555, 559, 565, 568, 574, 575, 580, 581, 582], "no_grad": 4, "maxk": 4, "pred": [4, 169, 267, 268, 309, 310, 565], "eq": 4, "expand_a": 4, "re": [4, 73, 75, 340, 563], "correct_k": 4, "keepdim": 4, "mul_": 4, "100": [4, 202, 240, 264, 273, 306, 550, 554, 560, 574, 575, 580, 581, 582, 583], "criterion": [4, 5, 12, 73, 171, 185, 221, 224, 254, 260, 302, 322, 325, 332, 486, 526, 552, 557, 571, 572, 575, 581, 582], "data_load": [4, 5, 8, 48, 75], "neval_batch": [4, 5], "top1": [4, 5, 276, 575], "2f": [4, 5], "top5": [4, 5], "5": [4, 8, 204, 213, 219, 242, 250, 264, 268, 306, 310, 341, 547, 550, 559, 565, 570, 574, 580, 581, 582, 583], "cnt": [4, 5, 325, 552], "imag": [4, 5, 201, 202, 205, 207, 213, 217, 239, 240, 243, 245, 250, 253, 264, 276, 306, 516, 547, 550, 554, 574, 579, 580, 583], "loss": [4, 5, 7, 73, 146, 185, 219, 227, 259, 260, 268, 287, 292, 300, 302, 310, 353, 552, 553, 554, 555, 565, 566, 571, 572, 575, 581, 582], "acc1": 4, "acc5": 4, "print": [4, 5, 171, 268, 310, 320, 547, 552, 554, 565, 581], "load_model": 4, "model_fil": 4, "state_dict": [4, 171, 282, 554, 579], "load": [4, 40, 42, 200, 202, 216, 217, 238, 240, 252, 253, 264, 274, 284, 306, 319, 320, 337, 362, 363, 410, 412, 491, 518, 519, 549, 574, 575], "load_state_dict": 4, "cpu": [4, 5, 120, 121, 122, 123, 131, 134, 163, 276, 562, 566, 570, 573, 574, 576, 579], "print_size_of_model": 4, "temp": 4, "p": [4, 264, 306, 547], "mb": [4, 518], "o": [4, 7, 47, 98, 427, 570], "getsiz": 4, "1e6": 4, "num_calibration_batch": 4, "mymodel": 4, "saved_model_dir": [4, 319], "float_model_fil": 4, "start": [4, 75, 217, 253, 261, 264, 275, 303, 306, 318, 321, 332, 338, 341, 511, 531, 563, 580, 581], "min": [4, 49, 75, 164, 179, 546, 547, 575, 580, 581], "estim": [4, 5, 171, 268, 271, 272, 276, 283, 284, 310, 319, 581], "per": [4, 8, 42, 45, 48, 71, 72, 73, 74, 75, 190, 199, 218, 228, 237, 264, 276, 306, 325, 357, 358, 383, 547, 570, 576, 583], "qconfig": [4, 5, 47, 579], "default_qconfig": 4, "calibr": [4, 8, 40, 41, 42, 45, 47, 48, 50, 73, 175, 176, 178, 180, 188, 189, 259, 260, 300, 301, 302, 320, 337, 357, 358, 527, 549, 550, 560, 562, 575, 581, 582], "data_loader_test": [4, 5], "num_eval_batch": [4, 5], "d": [4, 5, 98, 102, 273, 552, 560], "eval_batch_s": [4, 5], "functool": 4, "partial": [4, 510, 575], "minmaxobserv": 4, "reduce_rang": [4, 49, 71, 574], "dtype": [4, 71, 72, 134, 163, 203, 204, 213, 217, 241, 242, 250, 253, 255, 257, 258, 320, 550, 557, 559, 574, 579, 580, 582], "qint8": 4, "qscheme": 4, "per_tensor_symmetr": 4, "convrelu2d": 4, "activation_post_process": [4, 579], "min_val": [4, 357, 358], "max_val": [4, 357, 358], "quantizedconvrelu2d": 4, "scale": [4, 5, 40, 42, 49, 71, 72, 75, 90, 164, 179, 213, 217, 250, 253, 257, 318, 546, 555, 557, 575, 578, 580], "15583468973636627": 4, "zero_point": [4, 72, 257, 318, 325], "quantizedconv2d": [4, 75], "19358506798744202": 4, "74": [4, 583], "631847": 4, "300": [4, 549, 550], "67": [4, 583], "significantli": [4, 566, 571, 572], "lower": [4, 216, 217, 252, 253, 266, 308, 341, 518, 546, 553, 571, 572, 573, 575, 580, 581], "62": [4, 583], "same": [4, 8, 75, 84, 169, 200, 217, 238, 253, 264, 287, 292, 306, 325, 341, 345, 363, 548, 549, 550, 552, 554, 559, 570, 574, 575, 579, 580, 581], "nevertheless": [4, 5], "did": 4, "reduc": [4, 8, 90, 290, 325, 553, 566, 572, 573, 575, 576, 581, 582], "almost": 4, "decreas": [4, 127], "repeat": [4, 291, 581], "exercis": 4, "recommend": [4, 8, 221, 222, 309, 310, 550, 557, 559, 571, 574, 581], "x86": [4, 566], "basi": 4, "histogram": [4, 354, 357, 363, 407, 410, 418, 579], "collect": [4, 47, 72, 75, 211, 214, 215, 217, 220, 221, 222, 223, 225, 249, 251, 253, 261, 266, 267, 268, 303, 308, 309, 310, 354, 357, 363, 364, 469, 493, 504, 506, 518, 519, 557, 575, 579, 581], "pick": 4, "manner": [4, 549, 552, 567], "per_channel_quantized_model": 4, "get_default_qconfig": 4, "fbgemm": [4, 5, 546], "jit": [4, 320, 579], "script": [4, 39, 261, 262, 265, 266, 303, 304, 307, 308, 365, 366, 452, 469, 471, 473, 476, 477, 479, 480, 482, 483, 485, 486, 491, 554, 562, 573], "scripted_quantized_model_fil": 4, "histogramobserv": 4, "perchannelminmaxobserv": 4, "per_channel_symmetr": 4, "76": [4, 583], "increas": [4, 551, 562, 581], "resnet50": [4, 7, 276, 554, 575, 578, 583], "qat": [5, 73, 257, 260, 270, 319, 553, 554, 557, 562, 575], "simul": 5, "low": [5, 7, 8, 45, 72, 74, 75, 188, 189, 203, 204, 241, 242, 259, 260, 269, 300, 548, 550, 554, 566, 573, 575, 581], "precis": [5, 7, 8, 40, 42, 45, 48, 73, 74, 75, 188, 189, 259, 260, 264, 266, 268, 269, 300, 306, 308, 310, 321, 338, 341, 348, 380, 391, 394, 395, 405, 406, 407, 408, 409, 410, 415, 439, 468, 473, 475, 476, 477, 500, 519, 522, 524, 546, 547, 548, 553, 554, 559, 562, 573, 574, 575, 581], "fake": [5, 75, 137, 575], "dure": [5, 47, 75, 90, 146, 273, 276, 282, 295, 299, 301, 325, 335, 512, 566, 567, 568, 569, 571, 572, 575, 579, 582], "backward": [5, 264, 306, 353, 552, 554, 571, 575, 577], "mimic": [5, 575], "still": [5, 260, 287, 292, 298, 333, 575, 576], "thu": [5, 264, 306, 575], "made": [5, 8, 98, 274, 276, 343, 575, 577, 581], "while": [5, 7, 8, 42, 75, 282, 297, 332, 340, 547, 550, 562, 566, 574, 575], "fact": [5, 575], "ultim": [5, 575], "usual": [5, 40, 42, 45, 48, 73, 75, 200, 238, 260, 287, 292, 552, 569, 575], "yield": [5, 188, 189, 198, 220, 221, 236, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 549, 575, 581], "either": [5, 189, 264, 306, 348, 566, 569, 574, 575], "dynam": [5, 8, 90, 190, 228, 255, 257, 301, 320, 371, 549, 552, 557, 562, 573, 581, 583], "training_func_for_nc": 5, "epoch": [5, 227, 254, 260, 287, 292, 297, 298, 332, 333, 353, 552, 554, 571, 582], "30": [5, 7, 217, 253, 548, 562, 580, 583], "sgd": [5, 185, 224, 302, 574, 582], "lr": [5, 554], "0001": [5, 185, 302, 574], "nepoch": [5, 552], "train_load": [5, 554], "zero_grad": [5, 552, 554, 571], "break": [5, 552, 554], "freez": [5, 117, 571, 572], "disable_observ": 5, "norm": [5, 282], "varianc": [5, 164, 179], "intrins": 5, "freeze_bn_stat": 5, "get_default_qat_qconfig": 5, "final": [5, 90, 297, 325, 332, 510, 568, 571, 572, 575, 577, 581], "alreadi": [5, 8, 202, 216, 218, 240, 252, 504, 531, 547, 550, 562, 581], "implement": [5, 7, 14, 42, 45, 48, 73, 74, 75, 80, 81, 82, 83, 86, 87, 92, 93, 94, 97, 99, 100, 101, 103, 105, 106, 108, 110, 111, 112, 115, 117, 118, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 168, 188, 189, 195, 198, 199, 200, 202, 206, 211, 233, 236, 237, 238, 240, 244, 249, 261, 267, 268, 290, 295, 299, 303, 309, 310, 325, 332, 333, 334, 335, 337, 343, 348, 548, 549, 550, 572, 577, 579, 581, 582], "hook": [5, 73, 188, 219, 226, 227, 254, 260, 287, 292, 320, 348, 356, 552, 571, 579], "prepare_qat": [5, 227, 260], "high": [5, 72, 203, 204, 241, 242, 550, 563, 573, 581], "accur": 5, "switch": [5, 73, 113, 579], "better": [5, 75, 125, 188, 189, 285, 337, 553, 565, 566, 571, 572, 573, 575, 578, 581], "match": [5, 134, 146, 216, 252, 264, 265, 306, 307, 552, 555], "zero": [5, 49, 71, 72, 217, 253, 260, 268, 287, 292, 295, 297, 298, 310, 325, 332, 333, 546, 571, 572, 580, 581], "fine": [5, 7, 200, 238, 332, 550, 573, 575], "tune": [5, 7, 8, 40, 42, 45, 47, 48, 73, 75, 180, 188, 189, 200, 202, 238, 240, 259, 260, 300, 302, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 363, 375, 394, 402, 403, 410, 412, 416, 439, 469, 474, 487, 499, 507, 519, 523, 547, 549, 550, 554, 555, 562, 564, 566, 568, 573, 576, 577, 578, 579, 582], "num_train_batch": 5, "20": [5, 7, 217, 253, 275, 570, 580, 582, 583], "train_one_epoch": 5, "qat_model": 5, "devic": [5, 47, 118, 119, 120, 121, 122, 123, 126, 131, 134, 155, 160, 163, 168, 219, 276, 552, 571, 574], "quantized_model": 5, "yaml": [5, 8, 73, 74, 75, 180, 181, 182, 188, 189, 200, 202, 218, 227, 238, 240, 254, 259, 260, 270, 271, 272, 283, 284, 287, 292, 300, 301, 302, 336, 337, 362, 363, 364, 368, 369, 370, 371, 372, 374, 375, 377, 378, 462, 464, 471, 476, 480, 483, 486, 518, 529, 552, 555, 560, 565, 568, 571, 574, 579, 580], "q_func": [5, 8, 40, 42, 45, 48, 73, 75, 188, 189, 260, 300, 301, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 581], "eval_dataload": [5, 7, 188, 189, 227, 259, 260, 270, 301, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 560, 581], "val_load": [5, 575], "timeout": [5, 189, 348, 528, 555, 574, 581, 582], "constrain": 5, "71": [5, 583], "close": [5, 164, 179], "debug": [5, 420, 421, 425, 547, 581], "analyz": [5, 134, 163, 319, 571, 572, 578, 579], "limit": [5, 340, 552, 571, 579], "sinc": [5, 14, 259, 260, 261, 287, 292, 300, 303, 487, 552, 555, 557, 565, 569], "actual": [5, 75, 268, 310, 554], "arithmet": [5, 559], "easili": [5, 8, 568, 571, 572], "relat": [5, 254, 260, 264, 278, 279, 287, 292, 295, 306, 334, 356, 446, 449, 451, 456, 536, 539, 540, 541, 544, 582], "center": [6, 7, 217, 253, 580, 581], "work": [6, 259, 260, 287, 292, 300, 549, 552, 571, 572, 576, 577, 579], "guidelin": [6, 7], "popular": [7, 8, 260, 552, 557, 571, 575, 581], "compress": [7, 227, 260, 287, 292, 353, 552, 562, 568, 569, 571, 572, 573, 575], "mainstream": 7, "deep": [7, 8, 182, 546, 549, 562, 563, 566, 573, 575, 581], "learn": [7, 8, 282, 546, 549, 550, 557, 560, 562, 563, 566, 571, 572, 573, 575, 579, 581], "framework": [7, 8, 40, 42, 45, 47, 48, 73, 75, 180, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 214, 217, 219, 220, 221, 224, 229, 230, 232, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 253, 259, 260, 267, 268, 269, 276, 300, 301, 309, 310, 312, 313, 314, 315, 316, 318, 319, 320, 346, 348, 356, 365, 380, 391, 408, 410, 415, 417, 419, 439, 447, 450, 452, 453, 459, 466, 468, 473, 477, 482, 485, 489, 500, 506, 518, 519, 546, 547, 554, 555, 556, 560, 562, 563, 565, 566, 571, 573, 575, 579, 580, 581, 582, 583], "mxnet": [7, 8, 47, 195, 199, 202, 205, 206, 209, 210, 211, 214, 217, 233, 237, 240, 243, 244, 247, 248, 249, 251, 253, 259, 260, 267, 268, 300, 309, 310, 316, 337, 549, 556, 559, 562, 566, 567, 574, 581, 582], "formerli": 7, "known": [7, 220, 221, 340, 557, 571, 579, 581], "tool": [7, 8, 169, 363, 573, 575], "deliv": [7, 573], "unifi": [7, 8, 191, 194, 211, 259, 260, 300, 510, 549, 560, 562, 567], "interfac": [7, 42, 45, 48, 73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 103, 105, 106, 108, 109, 110, 111, 112, 115, 117, 118, 119, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 168, 181, 185, 191, 194, 211, 259, 260, 275, 276, 287, 292, 300, 301, 302, 321, 348, 356, 357, 358, 364, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 480, 486, 493, 505, 562, 575, 577], "across": [7, 49, 259, 260, 269, 300, 551, 571, 572], "technologi": [7, 202, 240, 570], "prune": [7, 23, 163, 227, 260, 288, 289, 290, 292, 293, 295, 296, 297, 299, 301, 302, 320, 322, 323, 325, 332, 334, 335, 336, 353, 374, 381, 394, 400, 410, 412, 439, 447, 459, 474, 499, 507, 518, 523, 554, 559, 562, 569, 573, 575, 582], "knowledg": [7, 219, 254, 260, 553, 562, 567, 582], "distil": [7, 23, 185, 219, 226, 227, 260, 302, 353, 562, 569, 582], "driven": [7, 566, 568, 579], "strategi": [7, 8, 11, 40, 42, 45, 47, 48, 73, 75, 175, 202, 240, 260, 300, 302, 380, 402, 500, 518, 528, 554, 562, 573, 574, 575, 576, 577, 582], "quickli": [7, 581], "find": [7, 8, 72, 95, 96, 98, 169, 268, 284, 285, 310, 318, 340, 363, 464, 534, 547, 571, 578, 579, 581], "predefin": [7, 369, 405, 409, 410, 518], "sparsiti": [7, 260, 287, 291, 292, 295, 297, 298, 299, 319, 320, 325, 332, 333, 335, 550, 562, 571, 572, 583], "goal": [7, 180, 189, 254, 259, 260, 287, 292, 300, 302, 337, 348, 519, 549, 569, 575, 581], "teacher": [7, 185, 219, 254, 260, 282, 302, 552, 553, 583], "student": [7, 200, 219, 226, 238, 254, 260, 550, 552, 553, 583], "ai": [7, 573, 576], "oneapi": [7, 563, 573], "analyt": [7, 563, 573], "visit": [7, 583], "websit": [7, 563], "io": [7, 47], "7": [7, 548, 558, 559, 563, 575, 577, 581], "releas": [7, 505, 518, 561, 563], "binari": [7, 54, 169, 268, 280, 282, 310, 558, 565], "stabl": [7, 547, 563, 573], "basic": [7, 216, 252, 271, 283, 295, 302, 325, 344, 348, 562, 563, 574, 578], "pypi": [7, 547, 563], "pip": [7, 547, 554, 558, 563, 577], "full": [7, 72, 75, 200, 201, 202, 218, 238, 239, 240, 260, 547, 550, 558, 563, 564], "nightli": [7, 547, 563], "git": [7, 547, 563], "clone": [7, 547, 563], "cd": [7, 547, 554, 563], "r": [7, 72, 98, 164, 179, 276, 547, 563, 570, 575, 583], "txt": [7, 205, 243, 511, 547, 550, 563], "found": [7, 254, 260, 271, 272, 283, 284, 340, 346, 502, 518, 535, 547, 566, 581], "fp32": [7, 8, 40, 42, 45, 71, 73, 74, 75, 120, 122, 164, 171, 179, 188, 189, 255, 257, 268, 310, 320, 341, 345, 362, 418, 547, 559, 565, 566, 574, 575, 576, 577, 578, 579, 581, 582, 583], "wget": 7, "storag": [7, 264, 306, 565], "googleapi": 7, "v1_6": 7, "mobilenet_v1_1": 7, "0_224_frozen": 7, "pb": [7, 75, 319, 337, 455, 458, 469, 554, 567, 579, 583], "dummi": [7, 203, 204, 241, 242, 258, 268, 310, 410, 414, 520, 547, 550, 565], "shape": [7, 134, 146, 163, 203, 204, 213, 217, 241, 242, 250, 253, 264, 280, 282, 295, 306, 317, 325, 439, 446, 447, 450, 459, 461, 499, 547, 550, 559, 580], "224": [7, 213, 250, 276, 548, 549, 550, 554, 557, 580, 582], "search": [7, 14, 23, 98, 181, 188, 189, 259, 260, 261, 271, 272, 273, 275, 276, 283, 284, 285, 286, 300, 303, 340, 342, 343, 347, 405, 406, 433, 562, 565, 573, 579, 581], "jupyt": 7, "lab": 7, "manag": [7, 273, 274, 275, 276, 382, 415, 417, 440, 501, 517], "click": [7, 547, 562, 573, 579], "12": [7, 34, 547], "onnxruntim": [7, 8, 48, 196, 234, 260, 269, 422, 426, 555, 562, 574], "raw": [7, 201, 205, 208, 239, 243, 246, 345, 565, 581], "vision": 7, "classif": [7, 200, 217, 238, 253, 268, 298, 310, 333, 552, 565, 573], "resnet": [7, 554, 583], "v1": [7, 35, 36, 37, 75, 169, 212, 213, 250, 265, 266, 268, 307, 308, 310, 319, 554, 565, 567, 577, 578, 583], "inc_bench": [7, 302, 499, 547], "xeon": [7, 564, 566, 570, 573, 575, 576, 583], "scalabl": [7, 566, 570, 573, 575, 576, 583], "skylak": 7, "cascad": 7, "lake": [7, 566, 573], "cooper": [7, 566, 573], "icelak": 7, "futur": [7, 90, 188, 189, 220, 221, 562, 566], "sapphir": 7, "rapid": 7, "flex": 7, "seri": [7, 213, 250, 580], "amd": [7, 562, 583], "arm": [7, 562, 583], "nvidia": [7, 562, 571, 575, 583], "cento": [7, 511], "ubuntu": [7, 570], "04": [7, 508, 570, 583], "11": [7, 37, 508, 547, 565, 566], "variabl": [7, 146, 202, 218, 240, 260, 269, 275, 319, 334, 340, 506, 531, 547, 572, 581], "tf_enable_onednn_opt": [7, 547], "onednn": [7, 546], "420": [7, 562], "speedup": [7, 562, 575], "geomean": [7, 562], "2x": [7, 562, 570], "vnni": [7, 562, 574, 575], "minim": [7, 164, 179, 340, 552, 565, 571, 572, 575, 581], "avail": [7, 9, 11, 12, 16, 23, 30, 31, 32, 39, 315, 380, 385, 387, 388, 392, 395, 396, 401, 466, 547, 562, 570, 581], "overview": 7, "dive": [7, 559], "mix": [7, 8, 75, 338, 475, 476, 477, 524, 562], "orchestr": [7, 353, 562], "benchmark": [7, 12, 40, 42, 45, 75, 220, 221, 260, 301, 302, 321, 384, 391, 394, 404, 410, 412, 415, 416, 439, 499, 500, 510, 516, 533, 538, 567, 581, 582, 583], "tensorboard": [7, 8, 40, 42, 45, 48, 73, 75, 353, 356], "coder": [7, 562, 573], "topic": 7, "adaptor": [7, 11, 176, 178, 227, 260, 356, 562, 576, 577, 579], "togeth": [7, 217, 253, 295, 301, 325, 552, 563, 573, 579, 580], "tencent": [7, 573], "deepen": [7, 573], "cloud": [7, 573], "foundat": [7, 573], "digit": [7, 261, 303, 573], "intellig": [7, 573], "industri": [7, 565, 573], "dec": [7, 573], "2022": [7, 34, 35, 36, 37, 564, 583], "fast": [7, 573], "achiev": [7, 259, 260, 300, 557, 565, 569, 571, 572, 573, 575, 579, 581], "sota": [7, 573], "nov": [7, 573], "virtual": [7, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 168, 573], "applianc": [7, 573], "packag": [7, 8, 340, 371, 379, 385, 387, 388, 390, 391, 392, 395, 396, 399, 401, 420, 421, 425, 428, 434, 436, 439, 440, 446, 465, 467, 472, 475, 478, 479, 481, 484, 490, 495, 499, 533, 547, 558, 563, 573, 577, 581], "bitnami": [7, 573], "diffus": [7, 573], "few": [7, 547, 573, 581], "distilbert": [7, 200, 238, 550, 573, 583], "oct": [7, 573], "innov": [7, 573], "acceler": [7, 552, 571, 572, 573, 576, 581], "legal": [7, 561], "secur": [7, 570, 573], "resum": [7, 188, 189, 338, 339, 342, 343, 346, 347, 348, 353], "solut": [8, 164, 179, 273, 558, 573, 581], "onnx": [8, 48, 49, 62, 71, 72, 196, 234, 255, 256, 257, 258, 312, 313, 318, 320, 353, 366, 469, 549, 556, 557, 559, 562, 566, 567, 573, 574, 575, 581], "runtim": [8, 511, 549, 555, 556, 559, 562, 574, 575], "bridg": [8, 562], "vanilla": [8, 562], "complet": [8, 91, 547, 581, 582, 583], "subclass": [8, 40, 66, 176, 178, 195, 199, 202, 206, 209, 210, 211, 214, 217, 224, 233, 237, 240, 244, 247, 248, 249, 251, 253, 267, 268, 285, 288, 289, 290, 295, 297, 299, 309, 310, 321, 325, 331, 332, 335, 348], "adaptor_registri": [8, 40], "abc": [8, 137, 266, 308, 447, 510, 579, 581], "abcadaptor": 8, "framework_specific_info": [8, 40, 42, 45, 48, 73, 75], "tune_cfg": [8, 40, 42, 45, 47, 48, 73, 75, 175, 341, 581], "postprocess": [8, 40, 42, 45, 48, 73, 75, 211, 214, 217, 218, 221, 249, 251, 253, 259, 260, 270, 282, 300, 301, 302, 521, 526, 548, 579, 580], "query_fw_cap": [8, 40, 42, 45, 48, 73, 75], "query_fused_pattern": [8, 40], "awar": [8, 40, 42, 45, 48, 73, 75, 171, 191, 194, 211, 227, 260, 270, 295, 300, 301, 343, 348, 553, 554, 557, 562, 566, 569, 581, 583], "convers": [8, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 82, 109, 260, 270, 566, 575, 576], "he": 8, "intersect": [8, 268, 310, 565], "decid": [8, 75, 139, 140, 262, 297, 304, 427, 555, 577, 581], "besid": [8, 552, 569], "describ": [8, 42, 48, 73, 75, 276, 547, 559, 579], "op": [8, 40, 41, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 84, 88, 90, 93, 94, 97, 98, 99, 100, 102, 109, 113, 114, 117, 120, 121, 122, 123, 125, 131, 134, 163, 164, 167, 169, 255, 257, 319, 338, 339, 341, 343, 345, 346, 349, 352, 357, 358, 407, 410, 418, 423, 424, 432, 534, 547, 559, 566, 575, 576, 577, 579, 581, 582], "sequenc": [8, 14, 75, 91, 200, 216, 217, 238, 252, 253, 261, 262, 266, 295, 303, 304, 308, 325, 550, 559, 572, 580], "past": 8, "abov": [8, 81, 264, 306, 548, 571], "wa": [8, 163, 487, 547, 573, 581], "hidden": [8, 295, 325, 518, 571], "corner": [8, 217, 253, 580], "effect": [8, 571, 572], "mainten": 8, "difficult": 8, "correspond": [8, 14, 75, 146, 171, 200, 238, 261, 264, 268, 295, 297, 301, 303, 306, 310, 332, 340, 348, 559, 571, 574, 575, 578, 581], "abil": [8, 550, 559], "clear": [8, 14, 139, 198, 236, 261, 267, 268, 276, 303, 309, 310, 559, 565], "fragment": 8, "enumer": [8, 285, 353, 363, 367, 468, 474, 500, 554, 571, 579], "scenario": [8, 39, 380, 547, 548, 552, 571, 572], "doesn": [8, 134, 217, 253, 301, 517, 548, 554, 582], "bf16": [8, 45, 74, 109, 120, 122, 320, 341, 559, 566, 576, 581], "granular": [8, 45, 74, 559, 562, 571, 582], "scheme": [8, 45, 49, 71, 72, 74, 535, 549, 559, 581, 582], "semant": [8, 559], "pattern": [8, 40, 45, 74, 75, 89, 90, 98, 121, 125, 131, 134, 159, 181, 185, 202, 240, 260, 288, 293, 297, 302, 323, 332, 334, 407, 410, 423, 432, 433, 510, 534, 550, 559, 562, 569, 574, 583], "abstract": [8, 40, 45, 47, 74, 84, 85, 86, 87, 88, 89, 90, 91, 101, 106, 108, 109, 110, 111, 112, 115, 118, 119, 128, 129, 132, 133, 137, 146, 217, 219, 253, 254, 259, 260, 267, 268, 284, 286, 290, 295, 299, 300, 309, 310, 312, 313, 314, 321, 325, 335, 348, 369, 381, 447, 458, 459, 480, 492, 510, 534, 560], "querybackendcap": [8, 42, 45, 48, 73, 74, 75], "tensorflowqueri": [8, 75], "look": [8, 559, 565, 568, 582], "microsoft": 8, "mla": [8, 546], "kernel": [8, 506, 570, 571, 581], "becom": [8, 90, 557, 572], "integr": [8, 169, 219, 547], "explor": 8, "attribut": [8, 72, 90, 134, 146, 163, 175, 181, 182, 227, 300, 434, 435, 439, 499, 516, 549, 559, 560, 566, 574, 582], "whether": [8, 47, 48, 49, 73, 75, 139, 140, 169, 190, 198, 200, 213, 217, 228, 236, 238, 250, 253, 254, 260, 262, 264, 268, 282, 287, 292, 295, 297, 304, 306, 310, 325, 341, 363, 469, 550, 565, 580], "qlinear": [8, 202, 209, 240, 247, 268, 310, 318, 557, 583], "qdq": [8, 51, 53, 54, 55, 56, 58, 60, 61, 64, 66, 68, 70, 71, 137, 175, 255, 256, 257, 318, 320, 557, 562, 575], "integ": [8, 146, 254, 260, 264, 268, 285, 295, 297, 299, 306, 310, 325, 332, 335, 357, 358, 575, 581], "qtype": [8, 49, 72], "choic": [8, 200, 238, 547, 550, 565], "float32": [8, 203, 204, 217, 241, 242, 253, 264, 306, 516, 548, 550, 575, 580], "uint8": [8, 72, 213, 250, 264, 306, 357, 358, 546, 550, 559, 574, 575, 580, 582], "node": [8, 47, 49, 55, 57, 66, 70, 71, 72, 75, 78, 81, 82, 83, 84, 90, 91, 92, 95, 96, 98, 102, 114, 127, 134, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 169, 255, 256, 257, 312, 313, 318, 319, 320, 416, 429, 430, 431, 432, 433, 434, 439, 447, 450, 457, 458, 459, 496, 497, 499, 547, 554, 579], "exclud": [8, 114, 280, 282], "onnxrt": [8, 9, 72, 200, 202, 209, 210, 211, 214, 217, 238, 240, 247, 248, 249, 251, 253, 267, 268, 309, 310, 421, 422, 437, 439, 446, 499], "onnxrt_qlinearopsadaptor": [8, 48], "dump_elapsed_tim": [8, 363], "recov": [8, 45, 48, 75, 363, 553], "q_config": [8, 45, 48, 49, 71, 74, 75, 255, 257, 314, 318, 319], "inspect_tensor": [8, 40, 42, 45, 48, 73, 75], "op_list": [8, 40, 42, 45, 48, 73, 75, 345, 579], "iteration_list": [8, 40, 42, 45, 48, 73, 75], "inspect_typ": [8, 40, 42, 45, 48, 73, 75, 418], "save_to_disk": [8, 40, 42, 45, 48, 73, 75], "save_path": [8, 45, 48, 75, 255, 257, 312, 313, 318, 320, 353, 567], "quantization_cfg": [8, 45, 48, 75], "set_tensor": [8, 40, 42, 45, 48, 73, 75], "tensor_dict": [8, 40, 42, 45, 48, 73, 75], "input_graph": [8, 48, 155, 156, 160, 163, 164, 365, 473, 477, 482, 485, 492], "fp32_baselin": [8, 42, 45, 48, 73, 75, 356], "diagnosis_help": 8, "fp32_model": [8, 73, 75, 171, 255, 257, 320, 345, 363], "int8_model": [8, 255, 257], "experiement": 11, "deprec": [11, 254, 260, 518, 580], "bilingu": [14, 261, 303], "understudi": [14, 261, 303], "qualiti": [14, 261, 303], "text": [14, 216, 217, 252, 253, 261, 266, 298, 303, 308, 333, 564, 573, 580, 583], "machin": [14, 261, 279, 303, 378, 547, 557, 563, 573, 579], "translat": [14, 75, 261, 262, 273, 276, 279, 281, 303, 304], "natur": [14, 261, 303], "anoth": [14, 40, 42, 75, 134, 217, 253, 260, 261, 270, 303, 353, 552, 580, 581], "approxim": [14, 261, 262, 303, 304, 565], "glue": [14, 261, 268, 303, 310, 550, 565], "word": [14, 216, 252, 261, 303, 565, 583], "piec": [14, 216, 252, 261, 303, 557, 565], "decod": [14, 212, 213, 250, 261, 282, 303, 565, 580], "id": [14, 34, 35, 36, 37, 216, 218, 252, 261, 263, 264, 265, 266, 303, 305, 306, 307, 308, 383, 384, 386, 387, 388, 390, 393, 394, 395, 396, 397, 399, 400, 402, 403, 431, 432, 435, 503, 565, 578, 581], "token": [14, 200, 211, 214, 217, 238, 249, 251, 253, 260, 261, 262, 282, 302, 303, 304, 531, 535, 547, 550, 565, 578, 580, 581], "By": [14, 39, 261, 303, 565, 567, 581], "ngram": [14, 261, 303, 565], "breviti": [14, 261, 262, 303, 304, 565], "penalti": [14, 261, 262, 303, 304, 565], "beam": [14, 261, 303, 565], "cach": [14, 200, 238, 261, 303, 448, 535, 558, 575], "error": [14, 73, 171, 261, 268, 274, 301, 303, 310, 345, 502, 530, 565, 581], "occur": [14, 261, 303], "length": [14, 200, 217, 238, 253, 261, 264, 282, 303, 306, 550, 565, 575, 580], "bleu_scor": [14, 261, 262, 303, 304], "schedul": [23, 260, 293, 297, 302, 323, 332, 334, 353, 569], "mixedprecis": [23, 260, 269, 372, 476, 524, 566], "architectur": [23, 218, 271, 272, 282, 283, 284, 286, 552, 563, 571, 572, 573], "na": [23, 181, 260, 302, 315, 562], "pruning_support": 34, "revis": [34, 35, 36, 37], "644ec953a7dc": 34, "6ece06672ed3": [34, 35], "date": [34, 35, 36, 37, 338, 487], "09": [34, 583], "17": [34, 583], "22": [34, 37, 508, 511, 583], "310141": 34, "14": [35, 36, 255, 257, 320, 557, 583], "6f0d0f71d92e": [35, 36], "08": [35, 217, 253, 580, 583], "31": [35, 583], "07": [35, 36, 582, 583], "229939": 35, "update_dataload": 35, "db_session": [35, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 410, 412, 414, 417], "sqlalchemi": [35, 382, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 409, 410, 412, 414, 415, 417, 558, 563], "orm": [35, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 409, 410, 412, 414, 417], "session": [35, 169, 199, 237, 319, 382, 383, 384, 385, 386, 387, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 410, 412, 414, 415, 417, 579, 581], "exist": [35, 81, 163, 182, 218, 219, 264, 284, 306, 319, 384, 404, 410, 412, 413, 450, 501, 517, 518, 565, 571, 581], "databas": [35, 202, 240, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 487, 501, 517], "update_transform": 35, "13": [36, 37, 337, 547, 583], "9e89549a08c8": [36, 37], "29": [36, 583], "41": [36, 583], "291905": 36, "03": [37, 508, 583], "34": [37, 583], "52": [37, 583], "916541": 37, "run_migrations_offlin": 39, "migrat": [39, 501], "context": [39, 47, 574], "url": [39, 202, 240, 464, 531, 564], "engin": [39, 275, 382, 394, 415], "though": [39, 282], "skip": [39, 321, 579, 581], "creation": [39, 379], "even": [39, 90, 547, 571], "dbapi": 39, "execut": [39, 42, 45, 48, 73, 75, 78, 81, 167, 227, 254, 260, 271, 272, 283, 287, 292, 297, 300, 301, 332, 337, 356, 362, 364, 365, 366, 383, 394, 397, 404, 410, 412, 413, 469, 471, 473, 476, 477, 480, 481, 482, 483, 485, 486, 488, 493, 496, 500, 503, 511, 512, 534, 547, 552, 566, 569, 571, 572, 575, 578, 581, 583], "emit": 39, "string": [39, 40, 42, 45, 48, 71, 72, 73, 74, 75, 84, 91, 134, 139, 140, 163, 169, 180, 181, 200, 202, 219, 224, 238, 240, 254, 257, 259, 260, 261, 264, 270, 271, 272, 275, 283, 284, 285, 287, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 315, 319, 320, 325, 332, 333, 334, 335, 336, 337, 356, 357, 358, 363, 376, 496, 518, 542, 565, 580], "run_migrations_onlin": 39, "associ": [39, 264, 306, 405, 406], "connect": [39, 297, 322, 394, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 547, 571, 572, 578], "cl": [40, 73, 176, 178, 202, 206, 209, 210, 211, 214, 217, 219, 224, 240, 244, 247, 248, 249, 251, 253, 285, 290, 295, 297, 299, 321, 325, 331, 332, 334, 335, 348], "quanit": [40, 45, 48], "chosen": [40, 42, 547], "option": [40, 42, 45, 48, 49, 73, 75, 134, 163, 185, 188, 189, 190, 200, 217, 219, 228, 238, 253, 255, 257, 260, 264, 270, 275, 276, 282, 295, 301, 302, 306, 319, 320, 325, 337, 353, 363, 369, 382, 383, 384, 386, 393, 394, 397, 399, 400, 402, 403, 405, 410, 415, 418, 447, 454, 457, 458, 459, 464, 473, 477, 486, 487, 489, 494, 503, 504, 508, 511, 516, 518, 519, 521, 524, 526, 527, 528, 537, 543, 548, 550, 555, 559, 566, 578, 580, 581, 582], "categori": [40, 42, 75, 202, 240, 263, 264, 305, 306, 550], "mini": [40, 42, 45, 75, 583], "boolean": [40, 42, 45, 47, 75, 84, 275, 332, 518], "inspect": [40, 42, 45, 48, 73, 75, 547, 577, 579], "capabl": [40, 42, 45, 47, 48, 73, 74, 75, 348, 559, 566, 574, 575, 581, 582], "queri": [40, 42, 45, 47, 48, 73, 75, 134, 139, 146, 169, 280, 282, 341, 385, 392, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 575], "dump": [40, 42, 45, 48, 49, 73, 75, 134, 255, 257, 363, 373, 487, 508, 519, 531, 575, 579], "contain": [40, 42, 45, 47, 48, 73, 75, 84, 95, 96, 98, 102, 134, 137, 163, 169, 171, 180, 188, 189, 200, 201, 202, 238, 239, 240, 254, 255, 257, 259, 260, 264, 265, 266, 270, 273, 278, 279, 287, 288, 289, 290, 292, 295, 296, 297, 298, 299, 300, 302, 306, 307, 308, 325, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 362, 367, 371, 379, 385, 387, 388, 390, 391, 392, 395, 396, 399, 401, 405, 410, 415, 420, 421, 425, 428, 434, 439, 440, 446, 465, 472, 474, 475, 478, 479, 481, 484, 490, 495, 499, 503, 511, 550, 552, 562, 565, 571, 572, 579, 581], "bool": [40, 42, 47, 48, 49, 73, 90, 91, 134, 139, 163, 169, 171, 175, 189, 200, 202, 213, 217, 238, 240, 250, 253, 255, 257, 262, 264, 268, 273, 275, 276, 282, 295, 304, 306, 310, 320, 325, 341, 348, 393, 427, 432, 435, 447, 450, 452, 453, 454, 455, 457, 458, 459, 460, 464, 466, 469, 487, 503, 504, 506, 511, 512, 518, 520, 521, 531, 537, 543, 550, 565, 574, 580], "disk": [40, 42, 73, 75], "memori": [40, 42, 73, 102, 259, 260, 287, 292, 300, 549, 553, 566, 568, 571, 572, 575, 581], "numpi": [40, 42, 45, 48, 72, 73, 75, 95, 96, 98, 134, 169, 217, 253, 258, 264, 268, 273, 275, 285, 306, 310, 357, 358, 558, 580], "arrai": [40, 42, 45, 48, 71, 72, 73, 75, 134, 163, 169, 217, 253, 264, 268, 273, 275, 285, 306, 310, 318, 320, 340, 357, 358, 580], "node0_nam": [40, 42, 73, 75], "weight0_nam": [40, 42, 45, 48, 73, 75], "bias0_nam": [40, 42, 45, 48, 73, 75], "node1_nam": [40, 42, 73, 75], "weight1_nam": [40, 42, 73, 75], "bias1_nam": [40, 42, 73, 75], "output0_nam": [40, 42, 73, 75], "output1_nam": [40, 42, 73, 75], "respons": [40, 42, 45, 48, 73, 75, 506, 510, 517, 530, 534, 535, 539, 541, 543, 544, 575], "int32": [40, 42, 45, 48, 73, 75, 255, 257, 550], "someth": [40, 42, 45, 48, 73, 75, 188, 189, 202, 240, 337], "quantize_input": [40, 42, 71, 75], "abl": [40, 42, 75, 109, 188, 189, 216, 252, 337, 571, 575], "where": [40, 42, 45, 49, 72, 73, 75, 146, 264, 268, 280, 282, 284, 286, 295, 306, 310, 325, 552, 555, 571, 579], "destinatin": [40, 42], "destin": [40, 42, 49, 75, 255, 256, 260, 270], "ox_util": 41, "argmax": [41, 50, 62], "binary_op": [41, 50, 62], "concat": [41, 50, 62, 168, 503], "direct_q8": [41, 50, 62], "embed_layernorm": [41, 50, 62], "gather": [41, 47, 49, 50, 62, 295, 325, 506], "gavgpool": [41, 50, 62], "gemm": [41, 50, 62, 571], "lstm": [41, 50, 62], "matmul": [41, 49, 50, 62, 74, 80, 93, 113, 114, 123, 152, 257, 295, 325, 557, 559], "maxpool": [41, 50, 62, 559], "pool": [41, 50, 62], "resiz": [41, 50, 62, 200, 201, 213, 217, 238, 239, 250, 253, 548, 549, 550, 580], "util": [41, 50, 226, 255, 260, 262, 296, 302, 304, 323, 344, 346, 368, 369, 370, 372, 374, 375, 378, 383, 394, 397, 400, 404, 405, 410, 412, 413, 415, 423, 424, 429, 431, 432, 435, 439, 445, 446, 454, 456, 480, 486, 490, 495, 499, 532, 554, 571, 575, 581], "kerasadaptor": 42, "boolen": [42, 48, 73, 75], "compare_label": [42, 45, 48, 73, 75, 268, 310, 565], "pipelin": [42, 45, 48, 73, 75, 254, 260, 271, 272, 283, 298, 301, 553, 569], "get_optype_wise_": [42, 75], "quantizable_op_detail": 42, "get": [42, 45, 47, 48, 49, 73, 74, 75, 95, 96, 98, 134, 139, 146, 163, 169, 175, 176, 178, 180, 182, 190, 193, 211, 214, 217, 218, 224, 226, 227, 228, 231, 249, 251, 253, 257, 258, 259, 260, 269, 276, 280, 286, 287, 292, 295, 297, 299, 300, 301, 302, 318, 319, 320, 321, 322, 325, 332, 334, 335, 340, 345, 357, 358, 363, 364, 369, 376, 377, 378, 380, 383, 386, 387, 388, 390, 393, 394, 395, 396, 397, 398, 399, 404, 405, 407, 409, 410, 411, 412, 413, 414, 417, 418, 419, 422, 426, 427, 432, 444, 447, 448, 450, 452, 453, 457, 458, 459, 461, 464, 466, 468, 469, 470, 471, 476, 480, 483, 486, 487, 489, 493, 494, 496, 498, 505, 506, 510, 514, 516, 518, 519, 521, 525, 528, 530, 531, 534, 535, 539, 541, 542, 543, 544, 547, 548, 562, 563, 581], "wise": [42, 49, 75, 164, 179, 295, 325, 339, 340, 341, 345, 407, 410, 518, 547, 562, 571, 572, 579, 581, 582], "union": [42, 75, 262, 264, 268, 304, 306, 310, 353, 376, 378, 394, 416, 454, 503, 506, 508, 510, 511, 518, 521, 522, 524, 526, 530, 565], "kei": [42, 48, 73, 75, 134, 139, 163, 169, 171, 182, 260, 264, 280, 282, 285, 287, 292, 296, 298, 306, 319, 325, 333, 336, 340, 348, 354, 356, 357, 363, 510, 526, 547, 557, 579], "kerasqueri": 42, "local_config_fil": [42, 45, 48, 73, 75], "get_vers": [42, 45, 48, 74, 75], "infom": [42, 48, 75, 220, 221, 257], "get_precis": [42, 45, 48, 74, 75, 380], "get_op_typ": [42, 45, 48, 73, 74, 75], "compos": [42, 48, 73, 75, 163, 217, 253, 580], "dictionari": [42, 48, 49, 73, 75, 95, 96, 98, 146, 171, 175, 181, 182, 185, 216, 252, 264, 271, 273, 276, 282, 283, 284, 286, 302, 306, 385, 387, 388, 390, 392, 395, 396, 401, 405, 406, 408], "get_quantization_cap": [42, 45, 48, 73, 74, 75], "get_op_types_by_precis": [42, 48, 73, 75], "mxnetadaptor": 45, "nc_model": [45, 47, 287, 292], "unimpl": [45, 48], "mxnetmodel": [45, 316], "data_x": [45, 47], "loader": [45, 47, 188, 189, 301, 337], "modelwis": 45, "opwis": 45, "recover_tuned_model": [45, 75], "mxnetqueri": 45, "g": [45, 48, 74, 273, 275, 301, 325, 510, 552, 571, 572, 577, 581], "fully_connect": 45, "get_fuse_pattern": [45, 74, 75], "etc": [45, 74, 180, 216, 227, 252, 254, 259, 260, 266, 274, 275, 287, 292, 300, 302, 308, 337, 362, 552, 562, 578, 581], "get_mixed_precision_combin": [45, 74, 75], "optyp": [47, 256], "enum": [47, 72, 363, 468, 500], "isiter": 47, "obj": [47, 180, 199, 237, 254, 259, 260, 270, 271, 272, 283, 284, 287, 292, 296, 300, 301, 302, 336, 337, 356, 363], "ensure_list": 47, "check_mx_vers": 47, "mx": 47, "__version__": 47, "combine_cap": 47, "make_nc_model": 47, "sym_model": 47, "ctx": 47, "input_desc": 47, "tupl": [47, 73, 134, 146, 188, 189, 213, 217, 219, 250, 253, 255, 257, 264, 273, 276, 282, 306, 325, 337, 345, 433, 464, 518, 537, 550, 565, 571, 580], "symnet": 47, "aux": 47, "ncmodel": 47, "suppli": [47, 280], "get_framework_nam": [47, 447, 450, 452, 459], "prepare_model_data": 47, "dataloaderwrap": 47, "prepare_model": 47, "create_data_exampl": 47, "prepare_dataload": 47, "ndarray_to_devic": 47, "ndarrai": [47, 95, 96, 98, 134, 217, 253, 273, 275, 320, 340, 354, 357, 558, 580], "is_model_quant": 47, "query_quantizable_nod": 47, "map": [47, 72, 75, 156, 217, 253, 255, 256, 257, 259, 260, 263, 264, 265, 266, 268, 273, 287, 292, 295, 297, 300, 305, 306, 307, 308, 310, 325, 334, 468, 548, 550, 554, 565, 571, 572, 575], "quantize_sym_model": 47, "run_forward": 47, "b_filter": 47, "collector": 47, "pre_batch": 47, "post_batch": 47, "propag": [47, 146], "filter": [47, 200, 201, 202, 203, 204, 205, 207, 211, 238, 239, 240, 241, 242, 243, 245, 249, 260, 302, 386, 427, 450, 520, 549, 550, 562, 571, 572, 579], "make_symbol_block": 47, "gluon": [47, 337, 567], "symbolblock": 47, "make_modul": 47, "parse_tune_config": 47, "quantizable_nod": 47, "distribute_calib_tensor": 47, "calib_tensor": 47, "calib_cfg": 47, "tensor_to_nod": 47, "kl": [47, 354, 357, 358, 559, 581, 582], "minmax": [47, 559, 582], "calib_model": 47, "qsym_model": 47, "calib_data": 47, "calibdata": 47, "threshold": [47, 49, 177, 264, 295, 306, 325, 354, 357, 358, 565], "amp_convert": 47, "amp_cfg": 47, "amp": 47, "dataiterload": 47, "data_it": 47, "collectorbas": 47, "collect_gluon": 47, "arr": [47, 72, 363], "collect_modul": 47, "b": [47, 72, 98, 102, 200, 238, 257, 550, 565, 581], "calibcollector": 47, "include_tensors_kl": 47, "include_tensors_minmax": 47, "num_bin": [47, 354, 357, 358], "8001": [47, 354, 357], "calc_kl_th_dict": 47, "quantized_dtyp": 47, "calcul": [47, 49, 72, 73, 75, 171, 203, 204, 219, 241, 242, 260, 265, 266, 276, 281, 282, 287, 291, 292, 295, 297, 298, 307, 308, 321, 322, 325, 333, 334, 345, 354, 357, 418, 510, 516, 550, 565, 568, 571, 575, 578, 581, 582], "tensorcollector": 47, "include_nod": 47, "qtensor_to_tensor": 47, "preprocess": [47, 200, 211, 214, 217, 238, 249, 251, 253, 254, 260, 282, 554, 580], "namecollector": 47, "onnxruntimeadaptor": 48, "rt": 48, "todo": [48, 200, 203, 238, 241, 264, 306, 357, 358, 516], "func": [48, 219, 301, 320, 518, 535, 582], "onnxdataload": 48, "evalut": 48, "onnxtransform": 48, "onnxmetr": 48, "evaluaton": 48, "visualizaton": 48, "f1": [48, 260, 265, 267, 268, 302, 307, 309, 310, 548, 554, 565, 578, 583], "modelproto": [48, 255, 256, 257, 567], "onnxrt_integeropsadaptor": 48, "onnxrt_qdqadaptor": 48, "onnxrtqueri": 48, "get_graph_optim": 48, "onnxrtaug": 49, "model_wrapp": 49, "dump_op_typ": 49, "black_nod": 49, "white_nod": 49, "cpuexecutionprovid": 49, "augment": 49, "augment_graph": 49, "activation_onli": 49, "weight_onli": 49, "quantization_candid": 49, "get_intermediate_output": 49, "calib_mod": 49, "dump_minmax": 49, "naiv": 49, "dump_calibr": 49, "give": [49, 581], "pair": [49, 71, 131, 139, 549, 566], "minimum": [49, 325, 340, 581], "second": [49, 92, 200, 238, 341, 427, 510, 547, 555, 568, 581, 582], "maximum": [49, 82, 200, 217, 238, 253, 262, 282, 295, 297, 304, 325, 332, 340, 550, 575, 580], "calculate_quantization_param": 49, "quantization_threshold": 49, "param_nam": [49, 376], "dump_tensor": 49, "calculate_scale_zeropoint": 49, "last_nod": 49, "next_nod": 49, "rmin": [49, 72, 546], "rmax": [49, 72, 546], "quantize_rang": [49, 72], "activationoper": 51, "onnx_quant": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70], "onnx_nod": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70], "quantize_check": [51, 54, 55, 57, 59, 61, 65, 66, 67, 68, 69], "quantizaion": [51, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70], "convert_check": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70], "convert_format": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70], "qoper": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71], "removableactivationoper": 51, "qactivationoper": 51, "children": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 318], "argmaxoper": 52, "qargmaxoper": 52, "attentionoper": 53, "qattentionoper": 53, "qattent": 53, "binaryoper": 54, "qbinaryoper": 54, "qbinari": 54, "concatoper": 55, "cast": [55, 57, 66, 70, 71, 72, 557, 576, 580], "qconcatoper": 55, "qconcat": 55, "convoper": 56, "qconvoper": 56, "qlinearconv": 56, "direct8bit": 57, "direct8bitoper": 57, "directcastoper": 57, "qdirectoper": 57, "qdirect": 57, "embedlayernorm": 58, "embedlayernormalizationoper": 58, "qembedlayernormalizationoper": 58, "qembedlayernorm": 58, "gatheroper": 59, "qgatheroper": 59, "qgather": 59, "globalaveragepool": 60, "globalaveragepooloper": 60, "qglobalaveragepooloper": 60, "qlinearglobalaveragepool": 60, "gemmoper": 61, "qgemmoper": 61, "qgemm": 61, "lstmoper": 63, "matmuloper": 64, "qmatmuloper": 64, "qlinearmatmul": 64, "maxpooloper": 65, "qmaxpooloper": 65, "qmaxpool": 65, "op_registri": 66, "op_typ": [66, 73, 341, 345, 348, 349, 352], "qop_registri": 66, "padoper": 67, "qpadoper": 67, "qpad": 67, "averagepool": 68, "pooloper": 68, "qpooloper": 68, "qlinearaveragepool": 68, "resizeoper": 69, "qresizeoper": 69, "qresiz": 69, "splitoper": 70, "qsplitoper": 70, "qsplit": 70, "quantization_param": 71, "op_types_to_quant": 71, "fallback_list": 71, "check_opset_vers": 71, "opset": [71, 255, 257, 320], "should_quant": 71, "quantize_model": 71, "merge_dedicated_qdq_pair": 71, "merg": [71, 192, 230, 579, 581], "dedic": 71, "q": [71, 72, 131], "dq": [71, 131], "should_cast": 71, "insert_qdq": 71, "should_convert": 71, "convert_qdq_to_operator_ori": 71, "remove_redundant_pair": 71, "redud": 71, "dtype_cast": 71, "cfg": [71, 75, 99, 100, 181], "keep_io_typ": 71, "quantize_output": 71, "initializer_use_weight_qtyp": 71, "direct_int8": 71, "quantize_bias_tensor": 71, "quantize_bia": 71, "bias_nam": [71, 257], "input_nam": [71, 255, 257, 320, 557], "weight_nam": 71, "beta": [71, 98, 322], "input_scal": 71, "weight_scal": 71, "quantize_weights_per_channel": 71, "weight_qtyp": 71, "axi": [71, 72, 325], "quantize_weight_per_channel": 71, "channel_axi": [71, 137, 177, 179], "tensor_proto_to_arrai": 71, "tensorproto": [71, 72], "get_bias_add_nod": 71, "last_output": 71, "quantized_bias_nam": 71, "ad": [71, 146, 200, 238, 261, 303, 325, 332, 340, 383, 384, 386, 393, 394, 395, 396, 397, 400, 402, 403, 547, 566, 579], "reshap": [71, 89, 98, 290, 325], "nodeproto": [71, 257], "_type_": [71, 257, 317], "previou": [71, 75, 282, 284, 325, 346, 547, 577, 579, 581], "is_valid_quantize_weight": 71, "dequantize_tensor": [71, 171, 418], "value_nam": 71, "helper": [72, 73, 171, 175, 200, 201, 202, 216, 238, 239, 240, 252, 256, 257, 280, 319, 512], "dtype_to_nam": 72, "dtype_map": 72, "quanttyp": 72, "make_quant_nod": 72, "quantizelinear": [72, 557], "make_dquant_nod": 72, "dequantizelinear": [72, 557], "is_b_transpos": 72, "wheter": 72, "inuput": 72, "transpos": [72, 217, 253, 295, 325, 580], "split_shared_bia": 72, "share": [72, 127, 163, 558, 559, 581], "cast_tensor": 72, "remove_init_from_model_input": 72, "collate_pr": 72, "quantize_data_with_scale_zero": 72, "pack": [72, 89], "ab": [72, 282, 297, 322, 546, 575], "np": [72, 134, 163, 217, 253, 340, 554, 580], "sym": [72, 559, 582], "asym": [72, 559, 582], "calculate_scale_zp": 72, "quantize_data": 72, "trasnform": 72, "equat": [72, 266, 268, 308, 310, 575], "z": [72, 552], "real": [72, 73, 203, 220, 221, 241, 554, 573, 575], "quantize_data_per_channel": 72, "tensor_valu": 72, "scale_valu": 72, "zo_valu": 72, "dequantize_data_with_scale_zero": 72, "sacal": 72, "dequantize_data": 72, "valueinfo": 72, "tensor_nam": [72, 169, 319, 320], "new_dtyp": 72, "quantizedvalu": 72, "new_quantized_nam": 72, "scale_nam": 72, "zero_point_nam": 72, "quantized_value_typ": 72, "quint8": 72, "linearli": 72, "intial": 72, "quantizediniti": 72, "quantized_data": 72, "quantizationmod": 72, "quantizedvaluetyp": 72, "quantformat": [72, 257], "quantize_nparrai": 72, "attribute_to_kwarg": 72, "kwarg": [72, 73, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162, 185, 202, 211, 214, 215, 217, 221, 222, 225, 240, 253, 259, 260, 270, 276, 282, 287, 292, 298, 300, 301, 302, 309, 310, 312, 313, 314, 316, 317, 318, 319, 320, 333, 337, 349, 352, 353, 362, 363, 368, 370, 372, 373, 374, 375, 385, 387, 388, 390, 392, 395, 396, 401, 549], "make_nod": 72, "find_by_nam": 72, "item_list": 72, "item": [72, 182, 216, 252, 296, 336, 348, 416, 504, 537, 554, 581], "get_ops_recurs": 73, "prefix": [73, 169, 218, 260, 261, 303, 531, 579], "graph_info": [73, 75, 312, 313, 314, 318, 319, 320], "templateadaptor": 73, "tampl": 73, "is_fused_modul": [73, 171, 175], "_propagate_qconfig_help": [73, 171, 175], "calculate_hessian_trac": 73, "enable_act": [73, 171], "hessian": [73, 171, 343, 581], "gradient": [73, 146, 297, 320, 322, 562, 571, 572, 583], "amap": 73, "op_nam": [73, 181, 185, 302, 341, 345, 348, 349, 352, 418, 423, 424, 432, 433, 579], "hessian_trac": [73, 171], "pytorchadaptor": 73, "objext": 73, "summari": [73, 126, 127, 218, 260, 547, 570, 579], "optimizer_tupl": 73, "criterion_tupl": 73, "is_fused_child": 73, "_post_eval_hook": [73, 579], "is_fused_op": 73, "is_last_fused_child": 73, "q_capabl": 73, "get_non_quant_modul": 73, "model_kwarg": 73, "non_quant_modul": 73, "custom": [73, 139, 180, 273, 301, 362, 405, 410, 552, 571, 578], "keyword": 73, "custom_non_quant_dict": 73, "pytorch_ipexadaptor": 73, "ipex": [73, 320, 562, 575, 583], "unspport": 73, "No": [73, 558, 570, 573], "pytorch_fxadaptor": 73, "fx": [73, 175, 337, 346, 562, 573, 575, 576, 583], "prepare_sub_graph": 73, "sub_module_list": 73, "fx_op_cfg": 73, "is_qat": 73, "example_input": [73, 255, 257, 320, 557], "recurs": [73, 363], "qconfigmap": 73, "prepare_fx": 73, "dir": [73, 175, 200, 238, 362, 550, 558, 560], "convert_sub_graph": 73, "fuse_fx_model": 73, "fused_model": 73, "calculate_op_sensit": [73, 75], "output_op_nam": [73, 75], "confidence_batch": [73, 75, 581], "fallback": [73, 75, 175, 338, 339, 343, 345, 346, 566, 576, 581], "requantize_cfg": [73, 75], "stage": [73, 75, 121, 338, 346, 511, 552, 579, 581], "sort": [73, 75, 163, 318, 345, 427, 581], "sensit": [73, 75, 297, 322, 562, 571, 572], "ops_lst": 73, "pytorchqueri": 73, "set_quantization_config": 74, "organ": [74, 547, 582], "unsupported_precis": 74, "tensorflowadaptor": 75, "graphdef": [75, 84, 85, 88, 89, 91, 98, 102, 113, 114, 120, 121, 122, 123, 134, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 169, 319, 496, 567], "graph_def": [75, 81, 169, 319, 337, 461, 496, 497], "frozen": [75, 84, 319, 337, 455, 458, 547, 567], "ckpt": [75, 169, 319, 337, 583], "savedmodel": [75, 319, 337, 583], "folder": [75, 169, 202, 207, 240, 245, 337, 362, 550, 579], "larger": [75, 325], "tuning_cfg_to_fw": 75, "tuning_cfg": 75, "pars": [75, 163, 200, 201, 213, 217, 238, 239, 250, 253, 282, 365, 376, 381, 404, 405, 407, 410, 411, 412, 413, 416, 469, 473, 477, 482, 485, 491, 510, 518, 526, 537, 580], "compat": [75, 109, 169, 264, 273, 306, 319, 554, 567, 577], "definit": [75, 134, 193, 198, 231, 236, 432, 445, 454, 503, 534], "inspect_weight_and_bia": 75, "node_list": 75, "graph_node_name_map": [75, 169], "fused_node_map": 75, "pattern_map": 75, "seq": 75, "fused_mapping_revers": 75, "fused_map": 75, "inspect_activ": 75, "local": [75, 295, 325, 332, 348, 363, 378, 410, 415, 428, 448, 547, 578], "tensorflowbasemodel": [75, 319, 459], "quantizedv2": 75, "qat_convert": 75, "quantize_recip": [75, 139, 140], "kera": [75, 98, 140, 146, 224, 314, 319, 439, 446, 456, 554, 567], "converted_model": [75, 566], "mse": [75, 175, 268, 302, 310, 344, 418, 424, 547, 565, 574, 577], "backup": 75, "fallen": 75, "denot": 75, "tensorflow_itexadaptor": 75, "performance_onli": [75, 131, 155, 160, 168, 528], "get_eightbit_pattern": 75, "qdq_enabl": 75, "eightbit": [75, 579], "generate_internal_pattern": 75, "intern": [75, 134, 171, 280, 502, 549, 550, 572], "bf16convert": [78, 576], "fp32_op": [78, 131], "bf16_op": [78, 131, 576], "graph_bas": [78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133], "graphrewriterbas": [78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133], "do_transform": [78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 148, 155, 156, 160, 164, 167, 168], "convertaddtobiasaddoptim": 80, "addv2": [80, 97, 98, 559], "biasadd": [80, 92, 94, 152, 159, 559], "convertlayoutoptim": 81, "layout": 81, "nchw": 81, "nhwc": 81, "convertleakyreluoptim": 82, "subgraph": [82, 90, 94, 98, 557], "leakyrelu": 82, "mul": [82, 93, 94, 97, 98, 152, 557], "coeffici": [82, 274], "less": [82, 552, 571], "convertnantorandom": 83, "const": [83, 91, 92, 95, 96, 98, 113, 114, 127, 134, 302, 383, 394, 397, 404, 410, 412, 413, 417, 499, 507, 517], "nan": 83, "convertplaceholdertoconst": 84, "rewrit": [84, 85, 86, 87, 88, 89, 90, 91, 101, 106, 108, 109, 110, 111, 112, 115, 118, 119, 128, 129, 132, 133], "renam": [84, 109, 282, 577], "placeholderwithdefault": 84, "constant": [84, 90, 134, 163, 255, 257, 318, 320, 340, 500, 549, 559, 580], "simplifi": 84, "input_graph_def": [84, 85, 88, 89, 91, 98, 102, 113, 114, 134, 163], "nodes_to_convert": 84, "placehold": [84, 198, 236], "strtobool": 84, "val_str": 84, "equival": [84, 273], "dequantizecastoptim": 85, "dilatedcontract": 86, "injectdummybiasaddoptim": 87, "expanddimsoptim": 88, "expanddim": 88, "whose": [88, 113, 114, 296, 325, 560, 571, 581], "fetchweightfromreshapeoptim": 89, "fetch": [89, 178, 193, 231, 264, 306, 550], "foldbatchnormnodesoptim": 90, "scale_after_norm": 90, "batchnormwithglobalnorm": 90, "nodedef": [90, 95, 96, 98, 134, 163, 496], "normal": [90, 98, 217, 253, 266, 308, 518, 548, 568, 580], "fold": [90, 91, 255, 257, 320, 559], "convolut": [90, 552, 571, 573], "onc": [90, 134, 169, 224, 299, 335, 547, 549, 571, 572, 573, 581, 583], "That": [90, 547], "opportun": 90, "rather": [90, 560], "expens": [90, 552, 581], "bake": 90, "identifi": [90, 95, 96, 98, 264, 306, 319], "simpler": 90, "form": [90, 98, 109, 264, 266, 306, 308, 410, 412, 511, 547, 552], "spot": 90, "fusedbatchnorm": [90, 109], "fusedbatchnormv3": 90, "_fusedbatchnormex": 90, "newer": 90, "badli": [90, 98, 109], "duplic": [90, 98, 127, 340], "graphfoldconstantoptim": 91, "check_all_fold": 91, "check_const_input": 91, "node_nam": [91, 95, 96, 98, 134, 163, 169, 257, 318, 319, 398, 496], "supported_op_typ": 91, "fusebiasaddandaddoptim": 92, "fusecolumnwisemuloptim": 93, "depthwiseconv2dn": [93, 559], "fuseconvwithmathoptim": 94, "elimin": 94, "math": [94, 575], "realdiv": [94, 97], "node_name_from_input": [95, 96, 98, 134, 163], "strip": [95, 96, 98, 169, 579], "port": [95, 96, 98, 163, 531, 535, 547], "underli": [95, 96, 98, 274], "node_from_map": [95, 96, 98], "node_map": [95, 96, 98], "pull": [95, 96, 98, 511], "entri": [95, 96, 98, 171, 224, 259, 301, 381, 424, 427, 510, 518, 564], "index": [95, 96, 98, 139, 146, 193, 198, 202, 206, 211, 218, 231, 236, 240, 244, 249, 260, 285, 321, 363, 535, 550, 565], "isn": [95, 96, 98, 134], "present": [95, 96, 98, 547, 573], "values_from_const": [95, 96, 98, 134], "node_def": [95, 96, 98, 134], "extract": [95, 96, 98, 134, 202, 240, 537, 550], "access": [95, 96, 98, 134, 146, 181, 182, 502, 518, 531, 535, 547], "get_const_dim_count": [95, 96], "dimens": [95, 96, 192, 217, 230, 253, 276, 291, 325, 340, 550, 552, 571, 580], "fusegeluoptim": 97, "sqrt": 97, "erf": 97, "gelu": 97, "fuselayernormoptim": 98, "remap": 98, "smaller": [98, 217, 253, 552, 571, 572, 580], "layernorm": [98, 282], "case": [98, 102, 199, 216, 217, 218, 237, 252, 253, 259, 260, 268, 287, 292, 300, 301, 310, 508, 512, 518, 547, 548, 549, 552, 554, 559, 560, 565, 568, 571, 573, 575, 577, 580, 582], "fusedbatcnormv3": 98, "restrict": [98, 571, 572, 578], "2d": 98, "3d": [98, 573, 583], "contraint": 98, "fusedop": 98, "fill": [98, 385, 387, 388, 390, 392, 395, 396, 401, 547, 578, 580], "gamma": 98, "h": [98, 217, 253, 554, 580], "_mkllayernorm": 98, "fusepadwithconv2doptim": 99, "excluded_op_nam": [99, 100, 181, 185, 302], "new_api": [99, 100, 105, 121, 128, 155, 160, 164], "itex_qdq_mod": [99, 100], "fusepadwithfp32conv2doptim": 100, "fusetransposereshapeoptim": 101, "graphcseoptim": 102, "cse": 102, "those": [102, 345, 363, 552, 560, 569, 571, 572, 575, 581], "child": [102, 579], "b1": 102, "c1c2": 102, "d1": [102, 363], "c1": 102, "c2": 102, "bound": [102, 217, 218, 253, 260, 264, 273, 306, 340, 565, 580], "elim": 102, "grappleroptim": 103, "input_output_nam": 103, "opt_cfg": 103, "wrapper": [103, 146, 199, 211, 214, 217, 219, 220, 221, 222, 223, 237, 249, 251, 253, 264, 268, 306, 309, 310, 313, 315, 319, 535, 543, 576], "grappler": [103, 559], "insertprintminmaxnod": 105, "pre_node_nam": 105, "post_node_nam": 105, "movesqueezeafterreluoptim": 106, "removetrainingnodesoptim": 108, "protected_nod": [108, 163], "types_to_splic": [108, 163], "checknumer": [108, 163], "stopgradi": 108, "renamebatchnormoptim": 109, "fusedbatchnormv2": 109, "due": [109, 571, 572, 575, 579], "histor": 109, "latter": [109, 139], "former": 109, "platform": [109, 506, 562, 573, 575, 583], "vnni_bf16": 109, "amx": 109, "instruct": [109, 547, 552, 563, 566, 573, 574, 575], "splitsharedinputoptim": 110, "stripequivalentnodesoptim": 111, "output_node_nam": [111, 112, 155, 156, 160, 163, 169, 319], "stripunusednodesoptim": 112, "input_node_nam": [112, 155, 160, 163, 169, 319], "switchoptim": 113, "condit": [113, 200, 201, 202, 217, 238, 239, 240, 253, 550, 564, 580, 581], "enter": [113, 114], "updateenteroptim": 114, "workaround": 114, "freezefakequantopoptim": 117, "fake_qu": [117, 131, 155, 160], "freezevaluetransform": 118, "max_min_data": [118, 119], "postfix": [118, 119], "tensor_data": 118, "th": [118, 119], "gpu": [118, 119, 131, 134, 163, 562, 571, 574, 575], "itex_mod": [118, 131, 155, 160], "generate_output_graph": [118, 119], "max_name_valu": [118, 119], "freeze_max": [118, 119], "freeze_min": [118, 119], "generate_output_graph_rang": [118, 119], "freezevaluewithoutcalibtransform": 119, "95": [119, 264, 268, 306, 310, 565, 583], "fuseconvredundantdequantizetransform": 120, "_quantizedconv": 120, "_quantizeddeconv": 120, "successor": [120, 121, 122, 123], "fuseconvrequantizetransform": 121, "requant": [121, 123, 579], "fuse_pattern": 121, "sum_pattern": 121, "fusematmulredundantdequantizetransform": 122, "_quantizedmatmul": [122, 123], "fusematmulrequantizedequantizetransform": 123, "quantizedmatmul": 123, "quantizedmatmulwithbiasanddequant": 123, "fusematmulrequantizetransform": 123, "rtype": [123, 512], "fusematmulrequantizedequantizenewapitransform": 123, "fusematmulrequantizenewapitransform": 123, "newapi": 123, "metainfochangingmemopoptim": 125, "metaop": 125, "posthostconstconvert": 126, "hostconst": 126, "postcseoptim": 127, "quantizev2": [127, 152], "quantizedrnnconvert": 128, "calibration_data": [128, 131], "rnn_detail": 128, "scalepropagationtransform": 129, "direct": [129, 295, 325, 468], "generategraphwithqdqpattern": 131, "op_wise_config": [131, 155, 160], "quantized_nod": 131, "mergeduplicatedqdqoptim": 132, "shareqdqforitexypatternoptim": 133, "graphanalyz": 134, "extend_engin": 134, "singleton": [134, 302, 499, 507], "properti": [134, 146, 176, 178, 190, 192, 200, 202, 218, 219, 227, 228, 230, 238, 240, 254, 259, 260, 267, 268, 269, 270, 284, 287, 292, 300, 301, 309, 310, 312, 313, 314, 316, 318, 319, 320, 333, 340, 348, 364, 382, 415, 422, 426, 431, 432, 435, 447, 450, 455, 459, 468, 471, 476, 480, 483, 486, 493, 503, 510, 511, 512, 516, 521, 525, 528, 530, 531, 564, 570], "getter": [134, 227, 254, 260, 284, 287, 292, 300, 301, 320, 448], "_graph": 134, "has_positive_input": 134, "retrun": 134, "neg": 134, "get_graph_input_output": 134, "clearli": 134, "similar": [134, 282, 574, 581, 582], "summarize_graph": 134, "writtern": 134, "googl": [134, 566, 573], "query_fusion_pattern_nod": 134, "aggreg": [134, 512], "_search_pattern": 134, "remove_node_with_single_input_output": 134, "rebuild": 134, "except": [134, 302, 363, 499, 507, 508, 518, 533, 543], "remove_nod": [134, 318], "replace_const_nod": 134, "new_const_nod": 134, "target_nod": 134, "old_constant_node_nam": 134, "replace_al": 134, "outdat": 134, "replace_constant_graph_with_constant_nod": 134, "new_nod": 134, "old_end_node_nam": 134, "replace_single_nod": 134, "old_output_node_nam": 134, "old_output_nam": [134, 318], "old_input_node_nam": 134, "old_input_nam": [134, 318], "bottom": [134, 547], "replace_nod": 134, "old_node_nam": 134, "output_nodes_nam": 134, "node_name_detail": 134, "parent": [134, 291, 297, 299, 318, 332, 335, 579], "add_nod": [134, 318, 432], "start_node_nam": 134, "end_node_nam": 134, "dump_graph": 134, "parse_graph": 134, "graphrewriterhelp": 134, "encapsul": [134, 188, 189, 337, 567], "compare_node_attr": 134, "node_a": 134, "node_b": 134, "compar": [134, 171, 268, 310, 547, 553, 565, 572, 575, 578, 579, 581], "create_nod": [134, 163], "create_constant_nod": [134, 163], "datatyp": [134, 163, 576, 581], "set_attr_dtyp": [134, 163], "set_attr_tensor": [134, 163], "set_attr_type_list": [134, 163], "attr": [134, 163, 169], "set_attr_string_list": [134, 163], "set_attr_str": [134, 163], "set_attr_int_list": 134, "set_attr_int": [134, 163], "set_attr_float": [134, 163], "set_attr_bool": [134, 163], "fakequantizebas": 137, "get_config": [137, 146, 544], "serial": [137, 200, 238, 416, 423, 424, 454, 506, 508, 520, 521, 525, 526], "fakequant": 137, "classmethod": [137, 146, 176, 178, 288, 289, 290, 349, 352, 505, 539, 541, 544], "from_config": [137, 146], "instanti": [137, 569], "per_channel": [137, 559, 582], "num_bit": 137, "symmetr": [137, 546, 575, 580, 581], "narrow_rang": 137, "quantizeconfig": [139, 140, 146], "There": [139, 268, 301, 310, 547, 552, 559, 562, 565, 566, 581, 582], "add_quantize_recip": 139, "recip": [139, 255, 257, 259, 260, 300, 557, 581], "layer_nam": [139, 295, 325], "some": [139, 188, 200, 227, 238, 260, 296, 348, 518, 547, 550, 555, 563, 565, 568, 571, 572, 575, 576, 579, 581], "conv5_block3_3_conv": 139, "flase": 139, "conv5_block3_3_add": 139, "query_lay": 139, "layer_recip": 139, "remove_lay": 139, "layers_nam": 139, "get_quantize_recip": 139, "is_empti": 139, "clear_quantize_recip": 139, "init_quantize_config": 140, "model_nam": [140, 276, 393, 399, 518], "qat_clone_funct": 140, "leav": 140, "quantizewrapp": [140, 146], "wrapped_lay": 140, "quantizelayeradd": 143, "quantize_layer_bas": [143, 145], "quantizelayerbas": [143, 145], "quantizelayerbatchnorm": 145, "quantizewrapperbas": 146, "trainabl": 146, "sublay": 146, "trainable_weight": 146, "track": [146, 348, 578], "descent": 146, "non_trainable_weight": 146, "manual": [146, 202, 240, 550], "add_loss": 146, "regular": [146, 261, 296, 303, 334, 571], "eager": [146, 298, 333, 365, 473, 477, 485, 554, 562, 575, 576, 579, 583], "gradienttap": 146, "input_shap": [146, 204, 242, 317, 447, 450, 459, 549, 550], "tensorshap": 146, "compute_output_shap": 146, "caus": [146, 571, 572], "state": [146, 171, 267, 268, 280, 282, 309, 310, 320, 349, 352, 571, 572], "happen": 146, "later": [146, 363, 579], "output_shap": 146, "query_input_index": 146, "logic": [146, 188, 189, 348, 530, 582], "live": 146, "output_obj": 146, "fusenodestartwithfusedbatchnormv3": [147, 157], "quantize_graph_bas": [147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 162], "quantizenodebas": [147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162], "get_longest_fus": [147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162], "deriv": [147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 227, 254, 260, 295, 297, 299, 322, 325, 332, 334, 335, 363], "apply_the_transform": [147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162], "fusenodestartwithconcatv2": [148, 158], "fusenodestartwithconv2d": [149, 159], "fusenodestartwithdeconv2d": 150, "fusenodestartwithfusedinstancenorm": 151, "fusenodestartwithmatmul": [152, 161], "apply_matmul_biasadd_relu_fus": 152, "match_node_nam": [152, 159], "apply_matmul_biasadd_fus": 152, "apply_batchmatmulv2_fus": 152, "batchmatmul": 152, "batchmatmulv2": 152, "apply_batchmatmulv2_mul_add_fus": 152, "fusenodestartwithpool": [153, 162], "optimizeqdqgraph": 155, "op_wise_sequ": [155, 160], "quantizegraphbas": [155, 156, 160], "remove_dead_nod": 156, "output_nam": [156, 255, 257, 320, 557], "longer": [156, 200, 217, 238, 253, 550, 580], "add_output_graph_nod": 156, "output_nod": [156, 393], "create_nodes_map": 156, "apply_conv_biasadd_relu_fus": 159, "quantizegraphforintel": 160, "quantizegraphhelp": 163, "staticmethod": 163, "get_sorted_graph": 163, "reorder": [163, 280, 282], "easier": [163, 547, 573], "split_shared_input": 163, "in_graph": [163, 169], "ouput": 163, "remove_training_nod": 163, "aren": 163, "uncondition": 163, "copy_attr": 163, "attr_valu": 163, "copi": [163, 296], "unique_node_name_from_input": 163, "ensure_tensor_name_has_port": 163, "biascorrect": 164, "fp32_graph": 164, "weight_empir": 164, "graph_transform_bas": [164, 167, 168], "graphtransformbas": [164, 167, 168], "Will": [164, 191, 194, 211, 531, 552, 562], "task": [164, 200, 207, 238, 245, 268, 282, 310, 550, 552, 562, 565, 571, 572], "w_int8": [164, 179], "w_fp32": [164, 179], "ratio": [164, 179, 213, 217, 250, 253, 260, 287, 292, 295, 297, 298, 299, 325, 332, 333, 335, 550, 571, 572, 580, 583], "equal": [164, 179, 565], "scale_c": [164, 179], "shift": [164, 179, 213, 250, 580], "notic": [164, 179, 218, 260, 564, 577], "empir": [164, 179], "insertlog": 167, "input_pb": [167, 168], "node_name_list": 167, "show_nam": 167, "show_op": 167, "first_n": 167, "summar": [167, 552], "1024": [167, 202, 240], "messag": [167, 518, 530, 535, 581], "dump_fp32": 167, "rerangequantizedconcat": 168, "rerange_quant": 168, "disable_random": 169, "seed": [169, 273, 275, 286, 528, 555, 582], "read_graph": 169, "in_graph_is_binari": 169, "read": [169, 202, 205, 217, 240, 243, 253, 260, 287, 292, 296, 298, 333, 433, 437, 438, 550, 576, 578], "write_graph": 169, "out_graph_def": 169, "out_graph_fil": 169, "write": [169, 209, 210, 211, 247, 248, 249, 264, 306, 363, 554, 560, 579], "is_ckpt_format": 169, "model_path": [169, 318, 433, 448, 453, 518], "is_saved_model_format": 169, "saved_model": [169, 260, 270, 319, 439, 446, 456], "get_tensor_by_nam": 169, "try_cnt": 169, "scope": [169, 227, 260, 317], "suffix": 169, "iterator_sess_run": 169, "sess": [169, 319], "iter_op": [169, 319], "feed_dict": [169, 199, 237], "output_tensor": [169, 319], "makeiter": 169, "strip_unused_nod": 169, "strip_unused_lib": 169, "r1": 169, "15": [169, 275, 559, 583], "branch": 169, "strip_equivalent_nod": 169, "get_tensor_val_from_graph_nod": 169, "tensor_v": 169, "hessiantrac": 171, "yao": 171, "zhewei": 171, "et": [171, 282], "al": [171, 282], "pyhessian": 171, "2020": 171, "ieee": [171, 566], "confer": [171, 572], "big": 171, "dong": 171, "zhen": 171, "hawq": [171, 343, 581], "system": [171, 218, 363, 506, 533, 534, 571], "33": [171, 273, 583], "18518": 171, "18529": 171, "openvinotoolkit": 171, "nncf": 171, "mse_metric_gap": [171, 418], "fp32_tensor": [171, 418], "euclidean": [171, 418, 552], "distanc": [171, 418, 552], "get_act_gap": 171, "gap": [171, 557, 567], "get_avg_trac": 171, "num_sampl": [171, 268, 310], "compare_weight": 171, "float_dict": 171, "quantized_dict": 171, "being": [171, 264, 276, 301, 306, 320, 357, 358, 435], "usag": [171, 199, 237, 260, 264, 270, 301, 306, 518, 547, 550, 554, 556, 565, 568, 574, 580], "wt_compare_dict": 171, "float_model": 171, "qmodel": 171, "compute_error": 171, "weight_dict": 171, "get_embedding_contigu": 175, "embed": [175, 282], "contigu": [175, 571], "append_attr": 175, "fx_model": 175, "get_mse_order_per_fp32": 175, "example_inp": 175, "influenc": 175, "fallback_ord": 175, "algorithm_registri": [176, 178], "algorithm_typ": [176, 178], "registr": [176, 178, 202, 206, 209, 210, 211, 214, 217, 224, 240, 244, 247, 248, 249, 251, 253, 290], "support_algorithm": [176, 178], "algorithmschedul": [176, 178], "origin_model": [176, 178], "calib_it": [176, 178], "fastbiascorrect": [177, 179], "fast_bias_correct": [178, 302], "weight_correct": [178, 302], "weightcorrect": 179, "ep": 179, "1e": [179, 582], "05": [179, 264, 268, 306, 310, 511, 565, 583], "conf_fname_or_obj": [180, 218, 227, 254, 259, 260, 269, 270, 271, 272, 283, 284, 287, 292, 300, 301, 302], "benchmark_conf": [180, 181, 302], "prefer": [180, 259, 260, 300, 302, 337], "b_dataload": [180, 218, 260, 548], "b_func": [180, 218, 260], "benchmarkconfig": 180, "prunerv2": 181, "target_spars": [181, 185, 302, 325, 574, 582], "pruning_typ": [181, 185, 302], "start_step": [181, 185, 297, 302, 332, 574], "end_step": [181, 185, 297, 302, 332, 574], "pruning_scop": [181, 185, 302], "pruning_frequ": [181, 185, 302, 332], "min_sparsity_ratio_per_op": [181, 185, 302, 325], "max_sparsity_ratio_per_op": [181, 185, 302, 325, 332], "sparsity_decay_typ": [181, 185, 302], "pruning_op_typ": [181, 185, 302], "reg_typ": 181, "criterion_reduce_typ": 181, "resume_from_pruned_checkpoint": 181, "similiar": [181, 185, 302], "cfg_fname": 181, "parser": [181, 302, 376, 381, 499, 503, 507, 537], "quantization_conf": 181, "dotdict": 181, "pruning_conf": 181, "graph_optimization_conf": [181, 259, 260], "mixedprecision_conf": 181, "distillation_conf": [181, 254, 260], "search_spac": [181, 271, 283, 284, 285, 286], "defaultconf": 181, "notat": [181, 182], "deep_get": 182, "dot": [182, 518, 566, 575], "nest": 182, "eg": [182, 202, 206, 211, 240, 244, 249, 550, 574], "john": 182, "deep_set": 182, "male": 182, "weightpruningconfig": [185, 302], "pruning_config": [185, 302], "snip_momentum": [185, 302, 322], "4x1": [185, 291, 302, 325, 583], "98": [185, 302, 574, 583], "exp": [185, 302], "distillationconfig": [185, 302], "teacher_model": [185, 219, 254, 260, 302, 552], "learning_r": [185, 302, 574, 582], "callabl": [185, 266, 302, 308, 353, 514, 518, 534, 535], "altern": [185, 302], "sigopttunestrategi": 188, "q_dataload": [188, 189, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 560, 581], "q_hook": [188, 189, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348], "tunestrategi": [188, 189, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 581], "hpo": 188, "mandatori": [188, 189, 337, 555, 582], "reserv": [188, 189, 227, 260, 301], "tuner": [188, 189, 259, 260, 300, 337], "scalar": [188, 189, 337, 357, 358, 565, 566, 575], "pseudo": [188, 189, 337, 579], "next_tune_cfg": [188, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 581], "travers": [188, 189, 338, 341, 342, 348], "concret": [188, 348, 581], "overrid": [188, 227, 260, 300, 348, 363, 508], "constraint": [188, 259, 260, 300, 578, 581, 582], "tpetunestrategi": 189, "stop": [189, 318, 341, 348, 487, 511, 555, 581, 582], "trials_count": [189, 341, 348], "basedatalod": [190, 228], "basedataload": [190, 192, 195, 196, 197, 199, 228, 230, 233, 234, 235, 237], "last_batch": [190, 192, 195, 196, 197, 199, 220, 221, 228, 230, 233, 234, 235, 237], "rollov": [190, 192, 195, 196, 197, 199, 220, 221, 228, 230, 233, 234, 235, 237], "collate_fn": [190, 192, 193, 195, 196, 197, 199, 220, 221, 228, 230, 231, 233, 234, 235, 237, 550], "sampler": [190, 192, 194, 195, 196, 197, 199, 220, 221, 228, 230, 232, 233, 234, 235, 237, 249, 260, 350, 554], "batch_sampl": [190, 192, 195, 196, 197, 199, 220, 221, 228, 230, 233, 234, 235, 237], "num_work": [190, 192, 195, 196, 197, 199, 220, 221, 228, 230, 233, 234, 235, 237, 575], "pin_memori": [190, 192, 195, 196, 197, 199, 220, 221, 228, 230, 233, 234, 235, 237], "shuffl": [190, 192, 195, 196, 197, 199, 220, 221, 228, 230, 233, 234, 235, 237, 575], "_generate_dataload": [190, 228], "drop": [190, 228, 264, 296, 306, 566, 571, 572, 583], "incomplet": [190, 228], "discard": [190, 228], "entranc": [191, 194, 211], "dispatch": [191, 194, 211, 562], "default_col": [192, 230], "outer": [192, 230], "defaultdataload": [192, 196, 199, 230, 234, 237], "base_dataload": [192, 194, 195, 196, 197, 199, 230, 232, 233, 234, 235, 237, 249, 260], "drop_last": [193, 198, 231, 236], "iterablefetch": [193, 231], "indexfetch": [193, 231], "default_dataload": [194, 196, 199, 232, 234, 237, 249, 260], "fetcher": [194, 232, 249, 260], "mxnet_dataload": [194, 232, 249, 260], "onnxrt_dataload": [194, 232, 249, 260], "pytorch_dataload": [194, 232, 249, 260], "tensorflow_dataload": [194, 232, 249, 260, 496], "mxnetdataload": [195, 233], "onnxrtbertdataload": [196, 234], "bert": [196, 199, 200, 217, 234, 237, 238, 253, 550, 552, 555, 565, 571, 580, 583], "varient": [196, 234], "onnxrtdataload": [196, 234], "pytorchdataload": [197, 235], "data_sourc": [198, 236], "__iter__": [198, 202, 206, 211, 236, 240, 244, 249, 548, 549, 550], "matter": [198, 236, 576], "iterablesampl": [198, 236], "squential": [198, 236], "iterabledataset": [198, 201, 202, 204, 205, 206, 211, 236, 239, 240, 242, 243, 244, 249], "indexdataset": [198, 236], "__getitem__": [198, 202, 206, 211, 214, 217, 236, 240, 244, 249, 251, 253, 548, 550], "__len__": [198, 202, 206, 211, 236, 240, 244, 249, 550], "inter": [198, 202, 206, 211, 236, 240, 244, 249], "retriev": [198, 236, 512], "sequentialsampl": [198, 236], "batchsampl": [198, 236], "tfdatadataload": [199, 237], "tensorflow1": [199, 237], "coupl": [199, 237], "satisfi": [199, 237, 563], "tf1": [199, 237, 567], "although": [199, 237, 578], "tensorflowbertdataload": [199, 237], "tensorflowmodelzoobertdataload": [199, 237], "zoo": [199, 217, 237, 253, 583], "tensorflowdataload": [199, 237, 496], "directli": [199, 237, 264, 268, 296, 306, 310, 557, 565, 574, 575, 579], "pytorchbertdataset": [200, 238], "model_typ": [200, 238, 319, 418, 448, 550], "tensordataset": [200, 238, 550], "link": [200, 238, 547, 550, 583], "huggingfac": [200, 238, 550], "easi": [200, 238, 260, 300, 547, 549, 557, 573, 575, 578], "squad": [200, 217, 238, 253, 265, 266, 268, 307, 308, 310, 550, 565, 580, 583], "xlnet": [200, 238, 550], "xlm": [200, 238, 550, 583], "101": [200, 238, 268, 310, 565, 583], "2043": [200, 238], "2001": [200, 238], "onnxrtbertdataset": [200, 238], "data_dir": [200, 238, 550], "model_name_or_path": [200, 238, 550], "max_seq_length": [200, 217, 238, 253, 550, 580], "128": [200, 203, 204, 217, 238, 241, 242, 253, 550, 575, 580, 583], "do_lower_cas": [200, 216, 217, 238, 252, 253, 550, 580], "mrpc": [200, 238, 268, 310, 550, 565, 583], "dynamic_length": [200, 238, 550], "shortcut": [200, 238, 550], "truncat": [200, 217, 238, 253, 550, 580], "shorter": [200, 217, 238, 253, 550, 580], "lowercas": [200, 238, 550], "qqp": [200, 238, 550, 565, 583], "qnli": [200, 238, 550, 565, 583], "rte": [200, 238, 550, 565, 583], "st": [200, 238, 550, 565], "cola": [200, 238, 550, 565, 583], "mnli": [200, 238, 550, 565, 583], "wnli": [200, 238, 550, 565, 583], "mobilebert": [200, 238, 550, 552, 583], "roberta": [200, 238, 550, 583], "uncas": [200, 217, 238, 253, 550, 580, 583], "load_and_cache_exampl": [200, 238], "convert_examples_to_featur": [200, 217, 238, 253], "max_length": [200, 238], "label_list": [200, 238, 268, 310], "output_mod": [200, 238], "pad_token": [200, 238], "pad_token_segment_id": [200, 238], "mask_padding_with_zero": [200, 238], "inputfeatur": [200, 217, 238, 253], "input_id": [200, 217, 238, 253, 552, 571], "vocabulari": [200, 216, 217, 238, 252, 253, 282, 580], "attention_mask": [200, 238, 571], "mask": [200, 238, 264, 280, 282, 291, 295, 297, 299, 306, 320, 325, 332, 335, 571, 572, 583], "NOT": [200, 238, 559, 563], "token_type_id": [200, 238, 571], "segment": [200, 238, 262, 264, 304, 306], "portion": [200, 238], "problem": [200, 238, 268, 275, 310, 565, 566], "regress": [200, 238], "seq_length": [200, 238], "to_json_str": [200, 238], "json": [200, 201, 217, 238, 239, 253, 373, 491, 493, 501, 508, 518, 550, 567, 580], "tensorflowbertdataset": [200, 238], "root": [200, 201, 202, 205, 238, 239, 240, 243, 268, 274, 310, 312, 313, 314, 316, 318, 319, 320, 353, 535, 548, 549, 550, 554, 565, 582], "label_fil": [200, 217, 238, 253, 550, 580], "tfrecord": [200, 201, 202, 206, 211, 238, 239, 240, 244, 249, 550], "parsedecodebert": [200, 238], "tensorflowmodelzoobertdataset": [200, 201, 238, 239], "num_cor": [200, 201, 205, 238, 239, 243, 550], "28": [200, 201, 205, 238, 239, 243, 550, 583], "coco": [201, 208, 212, 239, 246, 264, 268, 306, 310, 565], "parsedecodecoco": [201, 239], "cocorecorddataset": [201, 239], "directori": [201, 202, 239, 240, 319, 362, 363, 427, 480, 501, 518, 531, 550, 554, 558, 579], "interleav": [201, 239, 550], "parallel": [201, 239, 550, 571], "cocoraw": [201, 239, 549, 550], "img_dir": [201, 239, 550], "val2017": [201, 239, 550], "anno_dir": [201, 239, 550], "annot": [201, 239, 264, 306, 550, 565], "instances_val2017": [201, 239, 550], "arrang": [201, 202, 205, 239, 240, 243, 332, 550, 571], "jpg": [201, 205, 207, 239, 243, 245, 550], "coconpi": [201, 239, 550], "npy_dir": [201, 239, 550], "npy": [201, 239, 550], "tensorflowdataset": [202, 240], "pytorchdataset": [202, 240], "mxnetdataset": [202, 240], "onnxrtqldataset": [202, 240], "onnxrtitdataset": [202, 240], "IT": [202, 209, 240, 247], "pytorchmxnetwrapdataset": [202, 240], "datafunc": [202, 240], "pytorchmxnetwrapfunct": [202, 217, 240, 253], "framework_dataset": [202, 240], "convent": [202, 240, 264, 306, 552], "imageclassifi": [202, 240], "choos": [202, 240, 347, 547, 562, 563, 577, 581, 582], "tensorflow_itex": [202, 205, 206, 207, 209, 210, 211, 240, 243, 244, 245, 247, 248, 249, 574], "onnxrt_qdq": [202, 206, 209, 210, 211, 240, 244, 247, 248, 249, 574], "onnxrt_qlinearop": [202, 206, 209, 210, 211, 217, 240, 244, 247, 248, 249, 253, 574], "onnxrt_integerop": [202, 206, 209, 210, 211, 217, 240, 244, 247, 248, 249, 253, 555, 574], "pytorch_ipex": [202, 206, 209, 210, 211, 240, 244, 247, 248, 249, 574, 582], "pytorch_fx": [202, 206, 209, 210, 211, 240, 244, 247, 248, 249, 574], "onnxrt_qoper": [202, 206, 209, 210, 211, 240, 244, 247, 248, 249, 574], "dataset_registri": [202, 206, 211, 240, 244, 249], "dataset_typ": [202, 206, 211, 240, 244, 249, 259, 260, 270, 300, 386], "dataset_format": [202, 206, 211, 240, 244, 249], "data_format": [202, 206, 211, 213, 240, 244, 249, 250], "raw_imag": [202, 206, 211, 240, 244, 249], "overwrit": [202, 206, 211, 240, 244, 249], "download_url": [202, 240], "filenam": [202, 240, 274, 363, 364, 464, 480, 487, 493, 503, 511, 550], "md5": [202, 240], "download": [202, 240, 439, 462, 463, 465, 466, 499, 547, 550, 563, 577], "gen_bar_updat": [202, 240], "progress": [202, 240, 299, 325, 332, 335, 572], "bar": [202, 240, 547], "check_integr": [202, 240], "fpath": [202, 240], "checksum": [202, 240], "calculate_md5": [202, 240], "chunk_siz": [202, 240], "cifar10": [202, 240, 550], "cifar100": [202, 240, 550], "www": [202, 240, 550, 583], "toronto": [202, 240, 550], "edu": [202, 240, 550], "kriz": [202, 240, 550], "cifar": [202, 240, 550, 583], "tar": [202, 240, 550], "gz": [202, 240, 550], "subset": [202, 205, 240, 243, 550], "internet": [202, 240, 547, 550], "put": [202, 240, 550, 552, 571], "again": [202, 240, 550, 576], "load_meta": [202, 240], "meta": [202, 240], "pytorchcifar10": [202, 240], "mxnetcifar10": [202, 240], "tensorflowcifar10": [202, 240], "pytorchcifar100": [202, 240], "mxnetcifar100": [202, 240], "tensorflowcifar100": [202, 240], "mnist": [202, 240, 550, 554], "institut": [202, 240], "standard": [202, 217, 240, 253, 557, 565, 580, 581], "fashionmnist": [202, 240, 550], "npz": [202, 240, 550], "idx1": [202, 240, 550], "ubyt": [202, 240, 550], "idx3": [202, 240, 550], "t10k": [202, 240, 550], "class_to_idx": [202, 240], "read_data": [202, 240], "pytorchmnist": [202, 240], "mxnetmnist": [202, 240], "tensorflowmnist": [202, 240], "pytorchfashionmnist": [202, 240], "mxnetfashionmnist": [202, 240], "tensorflowfashionmnist": [202, 240], "imagefold": [202, 240, 548, 550, 554], "subfold": [202, 240], "belong": [202, 240, 257, 315, 575], "class_1": [202, 240, 550], "png": [202, 240, 550], "xxy": [202, 240, 550], "xxz": [202, 240, 550], "class_n": [202, 240, 550], "123": [202, 240, 550, 580], "nsdf3": [202, 240, 550], "asd932_": [202, 240, 550], "mxnetimagefold": [202, 240], "tensorflowimagefold": [202, 240], "tensorflowtfrecorddataset": [202, 240], "tensorflowimagerecord": [202, 240], "000": [202, 240, 550], "001": [202, 240, 550, 554, 582], "099": [202, 240, 550], "tensorflowvocrecord": [202, 240], "pascal": [202, 240], "voc": [202, 240, 268, 310], "2012": [202, 240], "00000": [202, 240], "00004": [202, 240], "00001": [202, 240], "00003": [202, 240], "dummydataset": [203, 204, 241, 242], "127": [203, 204, 241, 242, 550, 575, 583], "stand_norm": [203, 204, 241, 242, 550], "dummy_v2": [204, 242, 549, 550], "sparse_dummy_v2": [204, 242, 550], "label_shap": [204, 242, 550], "sparsedummydataset": [204, 242], "dense_shap": [204, 242, 550], "sparse_ratio": [204, 242, 550], "imagenetraw": [205, 243, 550], "data_path": [205, 243, 550], "image_list": [205, 243, 550], "img1": [205, 243, 550], "img2": [205, 243, 550], "imgx": [205, 243, 550], "val_map": [205, 243, 550], "pytorchimagenetraw": [205, 243], "mxnetimagenetraw": [205, 243], "tensorflowimagenetraw": [205, 243], "inteltensorflow": [205, 207, 243, 245], "tensorflowimagenetdataset": [205, 243], "onnxrtimagenetdataset": [205, 243], "bert_dataset": [206, 211, 244, 249, 260, 302], "coco_dataset": [206, 211, 244, 249, 260, 302], "dummy_dataset": [206, 211, 244, 249, 260, 302], "dummy_dataset_v2": [206, 211, 244, 249, 260, 302], "imagenet_dataset": [206, 211, 244, 249, 260, 302], "style_transfer_dataset": [206, 211, 244, 249, 260, 302], "transfer": [207, 245, 254, 260, 550, 552, 553], "styletransferdataset": [207, 245], "content_fold": [207, 245, 550], "style_fold": [207, 245, 550], "crop_ratio": [207, 245, 550], "resize_shap": [207, 245, 550], "image_format": [207, 245, 550], "holder": [207, 245, 550], "labelbalancecocorecordfilt": [208, 246], "balanc": [208, 246, 570], "labelbalancecocorawfilt": [208, 246], "tensorflowfilt": [209, 247], "onnxrtqlfilt": [209, 247], "onnxrtitfilt": [209, 247], "pytorchfilt": [209, 247], "mxnetfilt": [209, 247], "filter_registri": [209, 210, 211, 247, 248, 249], "filter_typ": [209, 210, 211, 247, 248, 249], "__call__": [209, 210, 211, 247, 248, 249], "coco_filt": [210, 211, 248, 249, 260, 302], "imagenet_transform": [211, 214, 249, 251, 260, 302], "transform_cl": [211, 214, 217, 249, 251, 253], "basetransform": [211, 212, 213, 214, 217, 249, 250, 251, 253], "transform_registri": [211, 214, 217, 249, 251, 253], "transform_typ": [211, 214, 217, 249, 251, 253], "postprocess_cl": [211, 214, 215, 221, 225, 548], "user_postprocess": [211, 214, 215, 221, 225], "parsedecodecocotransform": 212, "quantizedinput": [213, 250, 580], "desir": [213, 217, 250, 253, 282, 580], "labelshift": [213, 250, 521, 580], "label_shift": [213, 250, 580], "parsedecodeimagenet": [213, 250, 580], "proto": [213, 217, 250, 253, 580], "parsedecodeimagenettransform": [213, 250], "tensorflowresizecropimagenettransform": [213, 250], "height": [213, 217, 250, 253, 276, 295, 325, 554, 571, 580, 582], "random_crop": [213, 250, 580], "resize_sid": [213, 250, 580], "resize_method": [213, 250], "bilinear": [213, 217, 250, 253, 580], "random_flip_left_right": [213, 250, 580], "mean_valu": [213, 250, 580], "channels_last": [213, 250], "subpixel": [213, 250], "rgb": [213, 250], "applic": [213, 250, 502, 531, 533, 535, 547, 557, 573, 579, 580], "crop": [213, 217, 250, 253, 550, 580], "flip": [213, 217, 250, 253, 580], "left": [213, 217, 250, 253, 325, 547, 580], "std": [213, 217, 250, 253, 276, 548, 580], "bilinearimagenettransform": [213, 250], "central_fract": [213, 250, 580], "875": [213, 250, 580], "fraction": [213, 250, 580], "onnxbilinearimagenettransform": [213, 250], "onnxresizecropimagenettransform": [213, 250], "std_valu": [213, 250], "229": [213, 250, 548], "225": [213, 250, 548], "resizewithaspectratio": [213, 250], "87": [213, 250, 583], "inter_pol": [213, 250], "cv2": [213, 250], "inter_area": [213, 250], "aspect": [213, 217, 250, 253, 580], "convert_to_unicod": [216, 252], "unicod": [216, 252, 261, 303], "utf": [216, 252], "load_vocab": [216, 252], "vocab_fil": [216, 217, 252, 253, 580], "convert_by_vocab": [216, 252], "vocab": [216, 252, 282], "whitespace_token": [216, 252], "whitespac": [216, 252, 266, 308], "fulltoken": [216, 252], "tokenzi": [216, 252], "convert_tokens_to_id": [216, 252], "convert_ids_to_token": [216, 252], "basictoken": [216, 252], "punctuat": [216, 252, 261, 266, 303, 308], "wordpiecetoken": [216, 252], "unk_token": [216, 252], "unk": [216, 252], "max_input_chars_per_word": [216, 252], "wordpiec": [216, 217, 252, 253, 580], "greedi": [216, 252], "longest": [216, 217, 252, 253, 580], "unaff": [216, 252], "un": [216, 252], "aff": [216, 252], "concat_gener": [217, 253], "tensorflowtransform": [217, 253], "mxnettransform": [217, 253], "pytorchtransform": [217, 253], "onnxrtqltransform": [217, 253], "onnxrtittransform": [217, 253], "tensorflowwrapfunct": [217, 253], "transform_func": [217, 253], "pytorchmxnettransform": [217, 253], "get_torchvision_map": [217, 253], "interpol": [217, 253, 332, 565, 572, 580], "torchvis": [217, 253, 276], "composetransform": [217, 253], "transform_list": [217, 253, 580], "croptoboundingbox": [217, 253, 580], "offset_height": [217, 253, 580], "offset_width": [217, 253, 580], "target_height": [217, 253, 580], "target_width": [217, 253, 580], "vertic": [217, 253, 295, 325, 580], "coordin": [217, 253, 340, 580], "horizont": [217, 253, 580], "mxnetcroptoboundingbox": [217, 253], "onnxrtcroptoboundingbox": [217, 253], "tensorflowcroptoboundingbox": [217, 253], "resizewithratio": [217, 253, 580], "min_dim": [217, 253, 580], "800": [217, 253, 580], "max_dim": [217, 253, 580], "1365": [217, 253, 580], "constant_valu": [217, 253], "side": [217, 253, 282, 547, 550, 580], "exce": [217, 253, 580], "tensorflowresizewithratio": [217, 253], "perm": [217, 253, 580], "permut": [217, 253, 325, 580], "tensorflowtranspos": [217, 253], "mxnettranspos": [217, 253], "pytorchtranspos": [217, 253], "randomverticalflip": [217, 253, 580], "tensorflowrandomverticalflip": [217, 253], "randomhorizontalflip": [217, 253, 580], "tensorflowrandomhorizontalflip": [217, 253], "toarrai": [217, 253, 580], "pil": [217, 253, 580], "casttftransform": [217, 253], "castonnxtransform": [217, 253], "castpytorchtransform": [217, 253], "centercroptftransform": [217, 253], "paddedcentercroptransform": [217, 253], "crop_pad": [217, 253], "resizetftransform": [217, 253], "nearest": [217, 253, 580], "bicub": [217, 253, 580], "resizepytorchtransform": [217, 253], "randomcroptftransform": [217, 253], "locat": [217, 253, 548, 554, 575, 577, 580, 582], "randomresizedcroppytorchtransform": [217, 253], "randomresizedcropmxnettransform": [217, 253], "randomresizedcroptftransform": [217, 253], "get_param": [217, 253], "pramet": [217, 253], "normalizetftransform": [217, 253], "rescal": [217, 253, 580], "deviat": [217, 253, 580], "broadcast": [217, 253, 554, 580], "rescalekeraspretraintransform": [217, 253], "rescaletftransform": [217, 253], "rescaletransform": [217, 253], "alignimagechanneltransform": [217, 253], "dim": [217, 253, 290, 325, 340, 580], "w": [217, 253, 276, 571, 572, 580], "pytorchalignimagechannel": [217, 253], "tondarraytransform": [217, 253], "resizemxnettransform": [217, 253], "resizetransform": [217, 253], "cropresizetftransform": [217, 253], "y": [217, 253, 340, 580], "boundari": [217, 253, 416, 580], "area": [217, 253, 264, 306, 565, 580], "pytorchcropresizetransform": [217, 253], "mxnetcropresizetransform": [217, 253], "cropresizetransform": [217, 253], "centercroptransform": [217, 253], "mxnetnormalizetransform": [217, 253], "pytorchnormalizetransform": [217, 253], "normalizetransform": [217, 253], "randomcroptransform": [217, 253], "randomresizedcroptransform": [217, 253], "get_final_text": [217, 253], "pred_text": [217, 253], "orig_text": [217, 253], "squadexampl": [217, 253], "qas_id": [217, 253], "question_text": [217, 253], "doc_token": [217, 253], "orig_answer_text": [217, 253], "start_posit": [217, 253], "end_posit": [217, 253], "is_imposs": [217, 253], "unique_id": [217, 253], "example_index": [217, 253], "doc_span_index": [217, 253], "token_to_orig_map": [217, 253], "token_is_max_context": [217, 253], "input_mask": [217, 253, 332, 552], "segment_id": [217, 253, 552], "read_squad_exampl": [217, 253], "input_fil": [217, 253], "doc_strid": [217, 253, 580], "max_query_length": [217, 253, 580], "output_fn": [217, 253], "inputbatch": [217, 253], "collecttransform": [217, 253], "10833": [217, 253], "tfsquadv1posttransform": [217, 253], "n_best_siz": [217, 253, 580], "384": [217, 253, 580], "max_answer_length": [217, 253, 580], "total": [217, 253, 268, 297, 299, 310, 319, 320, 321, 325, 332, 335, 341, 550, 580], "nbest_predict": [217, 253, 580], "long": [217, 253, 558, 580], "chunk": [217, 253, 580], "much": [217, 253, 254, 260, 322, 552, 555, 571, 572, 580], "process_result": [217, 253], "get_postprocess_result": [217, 253], "tfmodelzoocollecttransform": [217, 253], "tfsquadv1modelzooposttransform": [217, 253], "squadv1": [217, 253, 580], "parsedecodevoctransform": [217, 253], "set_env_var": 218, "env_var": 218, "overwrite_exist": 218, "env": [218, 503, 511], "set_all_env_var": 218, "core": [218, 260, 275, 383, 547, 564, 570, 583], "get_architectur": 218, "get_threads_per_cor": 218, "thread": [218, 534, 547, 549, 570], "get_thread": 218, "get_physical_id": 218, "socket": [218, 506, 535, 570, 583], "get_core_id": 218, "get_bounded_thread": 218, "core_id": 218, "bind": 218, "command": [218, 260, 282, 383, 394, 397, 404, 410, 412, 413, 480, 503, 511, 531, 547, 554], "possibl": [218, 260, 273, 338, 342, 380, 447, 547, 555, 569, 576, 581], "unnecessari": [218, 260], "summary_benchmark": [218, 260], "config_inst": [218, 260], "generate_prefix": [218, 260], "core_list": [218, 260], "numactl": [218, 260], "run_inst": [218, 260], "critet": 219, "tensorflowcrossentropyloss": 219, "pytorchcrossentropyloss": 219, "tensorflowknowledgedistillationloss": 219, "pytorchknowledgedistillationloss": [219, 552], "pytorchintermediatelayersknowledgedistillationloss": 219, "tensorflowcriterion": 219, "pytorchcriterion": 219, "criterion_cl": 219, "criterion_registri": 219, "criterion_typ": 219, "registry_criterion": 219, "param_dict": [219, 224, 273], "crossentropyloss": 219, "tensorflowsparsecategoricalcrossentropi": 219, "sparsecategoricalcrossentropyloss": 219, "knowledgedistillationframework": 219, "student_model": [219, 254, 260, 552], "knowledgedistillationloss": [219, 582], "temperatur": [219, 582], "loss_typ": [219, 582], "ce": [219, 582], "loss_weight": [219, 582], "teacher_model_forward": 219, "notimplementederror": [219, 267, 268, 309, 310], "teacher_student_loss_c": 219, "student_output": [219, 227, 260, 552], "teacher_output": [219, 227, 254, 260], "student_targets_loss_c": 219, "groud": 219, "truth": [219, 265, 266, 307, 308], "loss_cal": 219, "loss_cal_sloss": 219, "student_loss": [219, 227, 260, 552], "softcrossentropi": 219, "logit": [219, 552], "ground": [219, 265, 266, 307, 308], "kullbackleiblerdiverg": 219, "pytorchknowledgedistillationlosswrapp": 219, "tensorflowknowledgedistillationlosswrapp": 219, "tensorflowknowledgedistillationlossextern": 219, "intermediatelayersknowledgedistillationloss": [219, 526], "layer_map": 219, "add_origin_loss": 219, "init_loss_func": 219, "init_feature_match": 219, "student_featur": 219, "teacher_featur": 219, "matcher": 219, "clear_featur": 219, "register_hooks_for_model": 219, "attributeerror": 219, "remove_all_hook": 219, "pytorch_linear_feature_match": 219, "pytorchintermediatelayersknowledgedistillationlosswrapp": 219, "selfknowledgedistillationloss": [219, 526], "selfknowledg": 219, "pytorchselfknowledgedistillationloss": 219, "l2diverg": 219, "feature1": 219, "feature2": 219, "pytorchselfknowledgedistillationlosswrapp": 219, "setter": [220, 221], "torch_util": [221, 260, 302], "metric_cl": [221, 222, 267, 268, 309, 310, 548], "user_metr": [221, 222, 309, 310], "alwai": [221, 222, 264, 306, 309, 310, 548, 565, 571], "tensorflowoptim": 224, "pytorchoptim": 224, "optimizer_cl": 224, "optimizer_registri": 224, "optimizer_typ": 224, "cross": [224, 267, 268, 309, 310, 560, 581], "tensorflowsgd": 224, "tensorflowadamw": 224, "tensorflow_addon": 224, "adamw": 224, "tensorflowadam": 224, "adam": [224, 582], "pytorchsgd": 224, "record_output": 226, "output_process": 226, "get_activ": 226, "mainli": [227, 260, 299, 325, 335, 572, 575], "train_func": [227, 260, 301, 552, 554, 571], "train_dataload": [227, 260, 552, 571], "pre_process": [227, 254, 260, 271, 283, 287, 292, 300, 554], "post_process": [227, 260], "Be": [227, 260, 264, 306], "on_train_end": [227, 260, 287, 292, 297, 298, 332, 333, 353], "pre_epoch_begin": [227, 260, 287, 292], "post_epoch_end": [227, 260, 287, 292], "on_epoch_begin": [227, 260, 287, 292, 297, 298, 332, 333, 353, 356, 571], "on_step_begin": [227, 260, 287, 292, 297, 298, 322, 332, 333, 356, 571], "batch_id": [227, 260], "on_batch_begin": [227, 260, 287, 292], "on_after_compute_loss": [227, 260, 287, 292, 353, 552], "on_before_optimizer_step": [227, 260, 297, 298, 332, 333, 334, 353, 571], "on_after_optimizer_step": [227, 260, 297, 298, 322, 332, 333, 334], "on_before_ev": [227, 260, 297, 298, 332, 333], "on_after_ev": [227, 260, 297, 298, 332, 333], "on_post_grad": [227, 260], "on_step_end": [227, 260, 287, 292, 297, 298, 332, 333, 353, 356, 571], "on_batch_end": [227, 260, 287, 292], "on_epoch_end": [227, 260, 287, 292, 297, 298, 332, 333, 353, 356, 552, 571], "register_hook": [227, 260], "input_arg": [227, 260], "input_kwarg": [227, 260], "_epoch_ran": [254, 260], "ran": [254, 260], "eval_frequ": [254, 260], "frequenc": [254, 260, 297, 332, 570, 582], "best_scor": [254, 260], "best_model": [254, 260], "train_cfg": [254, 260, 356], "evaluation_distribut": [254, 260, 287, 292], "train_distribut": [254, 260, 287, 292], "on_post_forward": [254, 260], "init_train_cfg": [254, 260], "create_criterion": [254, 260], "create_optim": [254, 260], "disil": [254, 260], "generate_hook": [254, 260, 287, 292], "qlinear2qdq": [255, 260, 302], "torch2onnx": [255, 260, 302], "torch_to_fp32_onnx": [255, 257], "opset_vers": [255, 257, 320, 557], "dynamic_ax": [255, 257, 320, 557], "do_constant_fold": [255, 257, 320], "verbos": [255, 257, 273, 274, 275, 320, 340], "ax": [255, 257, 320], "torch_to_int8_onnx": [255, 257], "quant_format": [255, 257, 320, 557], "u8s8": [255, 257], "qdq_op_fp32_bia": [255, 257, 557], "optionl": [255, 257], "qdq_op_int32_bia": [255, 257, 557], "qdq_op_fp32_bias_qdq": [255, 257, 557], "onnx_qlinear_to_qdq": [255, 256], "input_name_to_nod": [255, 256, 318], "qlinearop": [255, 256, 562, 575], "check_model": 256, "update_weight_bia": 257, "fp32_onnx_path": [257, 258], "wegiht": 257, "set_data_typ": 257, "weight_typ": 257, "activation_typ": 257, "get_node_map": 257, "module_node_map": 257, "get_quantizable_onnx_op": 257, "quantize_nod": 257, "build_scale_map": 257, "int8_scale_info": 257, "scale_zp_dict": 257, "set_scale_info": 257, "int8_onnx_model": 257, "int8_onnx_path": 257, "recalculate_bia": 257, "recalcul": [257, 325], "remove_nodes_by_nam": 257, "sub_graph_with_int32_bia": 257, "a_info": 257, "b_info": 257, "qdq_fp32_bia": 257, "excut": 257, "qdq_int32_bia": 257, "qdq_fp32_bias_qdq": 257, "onnx2numpy_dtyp": 258, "onnx_node_typ": 258, "dummydataread": 258, "ortq": 258, "dataread": 258, "get_next": 258, "variou": [259, 260, 269, 300, 562, 572, 574], "dl": [259, 260, 269, 287, 292, 300, 560, 573], "bring": [259, 260, 300, 575], "vari": [259, 260, 287, 292, 300, 570, 583], "roc": [259, 260, 268, 287, 292, 300, 310], "footprint": [259, 260, 287, 292, 300, 321, 553, 568, 571, 572, 574], "flexibl": [259, 260, 287, 292, 300, 548, 552, 571, 572], "set_config_by_model": [259, 260, 269], "model_obj": [259, 260, 269], "export": [260, 264, 302, 306, 312, 313, 318, 320, 353, 518, 579], "bleu": [260, 262, 267, 281, 302, 304, 309, 565], "bleu_util": [260, 267, 302, 309], "coco_label_map": [260, 267, 302, 309], "coco_tool": [260, 267, 302, 309], "evaluate_squad": [260, 267, 302, 309], "dynast": [260, 283, 302], "supernetwork": [260, 273, 276, 277, 283], "dynas_manag": [260, 276, 277, 283], "dynas_predictor": [260, 276, 277, 283], "dynas_search": [260, 277, 283], "dynas_util": [260, 275, 277, 283], "basic_na": [260, 283, 302], "nas_util": [260, 283, 302], "pruning_recip": [260, 302], "tile_pattern": [260, 288, 289], "pytorch_prun": [260, 302, 333], "logger": [260, 293, 302, 323, 354, 357, 499, 503, 507], "prune_util": [260, 293, 302], "pruner": [260, 287, 292, 293, 295, 298, 302, 526, 529, 582], "graph_optim": [260, 269, 302, 370, 439, 474, 478, 479, 499, 507, 523], "mixed_precis": [260, 302, 372, 439, 474, 499, 507, 523], "model_convers": [260, 302], "pruning_v2": [260, 302], "quantconf": [260, 300, 337], "qfunc": [260, 300], "routinu": [260, 300], "pruningconf": [260, 287, 292], "pruning_func": [260, 287, 292, 571], "update_items_for_all_prun": [260, 287, 298], "howev": [260, 287, 292, 298, 333, 557, 571], "analys": [260, 287, 292, 298], "generate_prun": [260, 287, 292], "dens": [260, 287, 292, 299, 335, 571, 572, 583], "spars": [260, 287, 292, 297, 332, 550, 571, 572, 573], "get_sparsity_ratio": [260, 287, 292, 295, 298, 325, 333], "elementwise_over_matmul_gemm_conv": [260, 287, 292, 298, 333], "elementwise_over_al": [260, 287, 292, 298, 333], "blockwise_over_matmul_gemm_conv": [260, 287, 292, 298, 333], "graphoptim": [260, 269, 370, 471, 522], "modelconvers": [260, 270], "unicoderegex": [261, 303], "hoc": [261, 303], "hack": [261, 303], "recogn": [261, 303], "nondigit_punct_r": [261, 303], "compil": [261, 303, 570], "preced": [261, 303], "punct_nondigit_r": [261, 303], "symbol_r": [261, 303], "property_char": [261, 303], "join": [261, 303], "bleu_token": [261, 303], "mose": [261, 303], "smt": [261, 303], "mosesdecod": [261, 303], "mteval": [261, 303], "v14": [261, 303], "pl": [261, 303], "l954": [261, 303], "l983": [261, 303], "tensor2tensor": [262, 282, 304], "bleu_hook": [262, 304], "compute_bleu": [262, 281, 304], "reference_corpu": [262, 304], "translation_corpu": [262, 304], "max_ord": [262, 304], "use_bp": [262, 304], "against": [262, 304], "gram": [262, 304], "flag": [262, 304, 353, 528], "third": [264, 306, 564], "parti": [264, 306, 564, 575], "pycocotool": [264, 306, 558, 563], "object_detect": [264, 306], "noth": [264, 306, 511, 581], "jonathanhuang": [264, 306], "image_id": [264, 306, 565], "encod": [264, 273, 282, 306, 580], "groundtruth": [264, 306], "invok": [264, 306], "groundtruth_dict": [264, 306], "exportgroundtruthtococo": [264, 306], "groundtruth_boxes_list": [264, 306], "groundtruth_classes_list": [264, 306], "max_num_class": [264, 306], "output_path": [264, 306, 318, 511, 566], "detections_list": [264, 306], "exportdetectionstococo": [264, 306], "detection_boxes_list": [264, 306], "detection_scores_list": [264, 306], "detection_classes_list": [264, 306], "cocowrapp": [264, 306], "loadannot": [264, 306], "cocoevalwrapp": [264, 306], "agnostic_mod": [264, 306], "computemetr": [264, 306], "detection_typ": [264, 306], "hold": [264, 306, 318, 340, 550], "datastructur": [264, 306], "mscoco": [264, 306], "replic": [264, 306], "extern": [264, 306, 318, 547], "category_id": [264, 306], "iou_typ": [264, 306], "iou_thr": [264, 268, 306, 310, 565], "map_point": [264, 268, 306, 310, 565], "cocoev": [264, 306], "Then": [264, 306, 547, 581], "getcategori": [264, 306], "getagnosticmod": [264, 306], "agnost": [264, 306, 552], "getcategoryidlist": [264, 306], "accumul": [264, 306, 339, 581], "include_metrics_per_categori": [264, 306], "all_metrics_per_categori": [264, 306], "summeri": [264, 306], "per_category_ap": [264, 306], "care": [264, 306], "pollut": [264, 306], "mldash": [264, 306], "summary_metr": [264, 306], "iou": [264, 268, 306, 310], "increment": [264, 280, 282, 306, 581], "50iou": [264, 306], "75iou": [264, 306], "75": [264, 306, 583], "pixel": [264, 306, 580], "medium": [264, 306], "larg": [264, 306, 318, 549, 552, 571, 572, 583], "10000": [264, 306, 340], "recal": [264, 266, 268, 306, 308, 310], "bycategori": [264, 306], "supercategori": [264, 306], "performancebycategori": [264, 306], "category_stat": [264, 306], "exportsingleimagegroundtruthtococo": [264, 306], "next_annotation_id": [264, 306], "category_id_set": [264, 306], "groundtruth_box": [264, 306], "groundtruth_class": [264, 306], "groundtruth_mask": [264, 306], "groundtruth_is_crowd": [264, 306], "ingest": [264, 306], "ones": [264, 306, 572], "exportsingleimagedetectionstococo": [264, 306], "uniqu": [264, 276, 301, 306, 340, 405, 406, 575], "assign": [264, 306, 320, 363, 404, 405, 410, 411, 412, 413, 547, 554, 566, 574], "num_gt_box": [264, 306], "num_detect": [264, 268, 306, 310, 565, 582], "image_height": [264, 306], "image_width": [264, 306], "detection_mask": [264, 306], "crowd": [264, 306], "insid": [264, 306, 552, 571, 581], "exportsingleimagedetectionboxestococo": [264, 306], "detection_box": [264, 306, 582], "detection_scor": [264, 306, 582], "detection_class": [264, 306, 582], "exporsingleimagedetectionboxestococo": [264, 306], "exportsingleimagedetectionmaskstococo": [264, 306], "allenai": [265, 266, 307, 308], "bi": [265, 266, 307, 308], "att": [265, 266, 307, 308], "f1_score": [265, 266, 307, 308], "ground_truth": [265, 266, 307, 308], "metric_max_over_ground_truth": [265, 266, 307, 308], "metric_fn": [265, 266, 307, 308], "exact_match_scor": [265, 307], "exact": [265, 307], "articl": [265, 266, 307, 308], "paragraph": [265, 266, 307, 308], "qa": [265, 266, 307, 308], "cantain": [265, 266, 307, 308], "normalize_answ": [266, 308], "extra": [266, 308], "newlin": [266, 308], "tab": [266, 308, 407, 410, 416, 534, 579], "harmon": [266, 268, 308, 310], "answer_start": [266, 308], "177": [266, 308], "denver": [266, 308], "bronco": [266, 308], "nfl": [266, 308], "afc": [266, 308], "bowl": [266, 308], "56be4db0acb8001400a502ec": [266, 308], "percentag": [266, 274, 308, 582], "basemetr": [267, 268, 309, 310], "single_output": [267, 268, 309, 310], "hvd": [267, 268, 309, 310, 554], "sample_weight": [267, 268, 309, 310], "metric_registri": [267, 268, 309, 310], "metric_typ": [267, 268, 309, 310], "decorator_metr": [267, 268, 309, 310], "tensorflowmetr": [268, 310], "pytorchmetr": [268, 310], "mxnetmetr": [268, 310], "onnxrtqlmetr": [268, 310], "onnxrtitmetr": [268, 310], "wrappytorchmetr": [268, 310], "wrapmxnetmetr": [268, 310], "wraponnxrtmetr": [268, 310], "proport": [268, 310], "were": [268, 310], "pred_list": [268, 310], "pytorchloss": [268, 310], "least": [268, 298, 310, 325, 333, 512, 571, 572, 581], "mae": [268, 310, 565], "absolut": [268, 274, 310, 322, 511, 555, 565, 570, 571, 572, 575, 581], "magnitud": [268, 310, 322, 562, 571, 572, 583], "rmse": [268, 274, 310, 565, 581], "squar": [268, 274, 310, 345, 565, 581], "tensorflowtopk": [268, 310], "among": [268, 310], "most": [268, 310, 340, 547, 566, 571, 575, 581], "outcom": [268, 310], "num_correct": [268, 310], "generaltopk": [268, 310], "cocomapv2": [268, 310, 565], "anno_path": [268, 310, 565], "map_kei": [268, 310], "detectionboxes_precis": [268, 310], "output_index_map": [268, 310, 565], "tensorflowmap": [268, 310], "tensorflowcocomap": [268, 310], "tensorflowvocmap": [268, 310], "squadf1": [268, 310, 565], "miou": [268, 310], "21": [268, 310, 583], "hist": [268, 310, 357, 358], "onnxrtglu": [268, 310], "dlrm": [268, 310, 583], "basicna": [271, 283], "model_build": [271, 283, 284], "conf_fnam": [271, 283], "init_by_cfg": [271, 283], "init_for_search": [272, 283], "select_model_arch": [272, 283, 284], "create_acc_predictor": [272, 283], "create_macs_predictor": [272, 283], "create_latency_predictor": [272, 283], "latenc": [272, 273, 274, 276, 281, 283, 516, 578, 581], "init_cfg": [272, 283], "parametermanag": [273, 276], "hot": 273, "pymoo": [273, 275, 276], "process_param_dict": 273, "upper": [273, 275], "vector": [273, 284, 286], "onehot_gener": 273, "in_arrai": 273, "onehot": 273, "unus": [273, 282, 318], "depth": [273, 552, 576], "input_arrai": 273, "elast": 273, "mapper": [273, 404, 467, 468], "random_sampl": [273, 340], "subnetwork": [273, 276], "trial_limit": 273, "100000": 273, "translate2param": 273, "pymoo_vector": 273, "translate2pymoo": 273, "import_csv": 273, "filepath": 273, "column_nam": 273, "drop_dupl": 273, "panda": 273, "datafram": [273, 319, 320], "purpos": [273, 559, 566, 574], "subnet": [273, 276], "column": [273, 547, 571, 572], "df": [273, 319, 320], "set_se": 273, "create_training_set": 273, "train_with_al": 273, "sklearn": 273, "transformerltencod": 273, "alpha": [274, 322, 334], "default_alpha": 274, "cost_factor": 274, "default_cost_factor": 274, "max_iter": 274, "default_max_iter": 274, "regressor": 274, "get_paramet": 274, "get_metr": [274, 380], "mape": 274, "kendal": 274, "rank": [274, 554], "correl": 274, "spearman": 274, "searcher": [274, 286], "searchalgomanag": 275, "optuna": 275, "configure_nsga2": 275, "warm_pop": 275, "crossover_prob": 275, "crossover_eta": 275, "mutation_prob": 275, "02": [275, 583], "mutation_eta": 275, "configure_ag": 275, "run_search": 275, "save_histori": 275, "previous": [275, 549], "problemmultiobject": 275, "evaluation_interfac": 275, "evaluationinterfac": [275, 276], "param_count": 275, "param_upperbound": 275, "ofa": [275, 276], "mani": [275, 276, 321, 338, 563, 581, 582], "get_mac": 276, "input_s": 276, "measure_lat": 276, "warmup_step": 276, "measure_step": 276, "resolut": 276, "warm": [276, 321], "runner": 276, "ofarunn": 276, "acc_predictor": 276, "macs_predictor": 276, "latency_predictor": 276, "datasetpath": 276, "w1": 276, "estimate_accuracy_top1": 276, "subnet_cfg": 276, "estimate_mac": 276, "estimate_lat": 276, "validate_top1": 276, "validate_mac": 276, "flop": 276, "fvcore": 276, "get_subnet": 276, "transformerltrunn": 276, "checkpoint_path": [276, 281], "predictor_mod": 276, "csv_path": 276, "written": 276, "eval_subnet": 276, "clear_csv": 276, "evaluationinterfaceresnet50": 276, "evaluationinterfacemobilenetv3": 276, "evaluationinterfacetransformerlt": 276, "get_torchvision_model": 276, "torchvisionrefer": 276, "baselin": [276, 348, 578, 579], "machine_transl": [277, 278, 283], "transformer_interfac": [277, 278, 279], "get_incremental_st": 280, "incremental_st": [280, 282], "set_incremental_st": 280, "multiheadattentionsup": 280, "super_embed_dim": 280, "num_head": 280, "is_encod": 280, "super_kdim": 280, "super_vdim": 280, "add_bias_kv": [280, 282], "add_zero_attn": [280, 282], "self_attent": 280, "encoder_decoder_attent": 280, "out_dim": 280, "qkv_dim": 280, "head": [280, 282, 571], "key_padding_mask": 280, "need_weight": 280, "static_kv": 280, "attn_mask": [280, 282], "timestep": 280, "bytetensor": [280, 282], "src_len": [280, 282], "reorder_incremental_st": 280, "new_ord": [280, 282], "buffer": [280, 319], "compute_lat": 281, "get_model_paramet": 281, "compute_mac": 281, "transformersupernetwork": 282, "fairseq": 282, "vaswani": 282, "2017": 282, "arxiv": [282, 297, 322], "1706": 282, "03762": 282, "transformerencod": 282, "transformerdecod": 282, "line": [282, 510, 511, 531, 547, 554, 562, 579], "encoder_config": 282, "embed_token": 282, "encoder_lay": 282, "transformerencoderlay": 282, "argpars": 282, "namespac": 282, "src_token": 282, "src_length": 282, "longtensor": 282, "sentenc": 282, "encoder_out": 282, "embed_dim": 282, "encoder_padding_mask": 282, "reorder_encoder_out": 282, "rearrang": 282, "max_posit": 282, "upgrade_state_dict_nam": 282, "upgrad": 282, "possibli": 282, "old": [282, 298, 363, 577], "decoder_config": 282, "no_encoder_attn": 282, "decoder_lay": 282, "transformerdecoderlay": 282, "attend": 282, "prev_output_token": 282, "tgt_len": 282, "forc": [282, 566, 576], "extract_featur": 282, "output_lay": 282, "layer_idx": 282, "paper": [282, 552, 571, 572], "ffn": 282, "robust": 282, "encoder_normalize_befor": 282, "layer_norm": 282, "self_attn_layer_norm": 282, "final_layer_norm": 282, "seq_len": 282, "t_tgt": 282, "t_src": 282, "decoder_normalize_befor": 282, "prev_self_attn_st": 282, "prev_attn_st": 282, "self_attn_mask": 282, "self_attn_padding_mask": 282, "builder": [284, 319], "res_save_path": 284, "count_model_paramet": 284, "load_search_result": 284, "dump_search_result": 284, "params_vec2params_dict": [284, 286], "paras_vec": 284, "find_best_model_arch": 284, "metrics_convers": 284, "init_search_cfg": 284, "nas_registri": 285, "nas_method": 285, "create_search_space_pool": 285, "find_pareto_front": 285, "n_point": 285, "n_metric": 285, "n_pareto_point": 285, "get_feedback": 286, "feedback": 286, "para_vec": 286, "gridsearch": 286, "whole": [286, 533, 547, 555, 575, 583], "exhaust": [286, 302, 344, 574], "randomsearch": 286, "42": [286, 570, 583], "bayesianoptimizationsearch": 286, "indices2params_vec": 286, "tfpruningcallback": [287, 292], "input_model": [287, 292, 567, 579], "pure": [287, 292], "s_output": [287, 292], "s_loss": [287, 292], "t_output": [287, 292], "support_pattern": [288, 289, 290], "pattern_registri": 290, "pattern_typ": 290, "patternbas": [290, 291], "mask_shap": [290, 291], "is_contigu": 290, "compute_spars": [290, 291], "abs_sum": 290, "abs_max": 290, "tile": 291, "tilepatternbas": 291, "nxm": [291, 295, 325, 332, 572], "matrix": [291, 572], "repeat_mask": 291, "ori_shap": 291, "tilepattern_1x1": 291, "1x1": [291, 552], "unstructur": [291, 562, 571, 572, 583], "tilepattern_2x2": 291, "2x2": 291, "tilepattern_1x16": 291, "1x16": 291, "tilepattern_4x1": 291, "tilepattern_1x2": 291, "1x2": 291, "update_config": [292, 333], "register_pattern": [295, 325], "get_pattern": [295, 325], "assertionerror": [295, 296, 297, 325, 332, 336], "is_glob": [295, 325], "contrast": [295, 325, 580], "get_mask": [295, 325], "target_sparsity_ratio": [295, 297, 325, 332], "pre_mask": [295, 325], "max_sparsity_ratio_per_lay": [295, 297, 574], "get_masks_glob": [295, 325], "get_mask_singl": 295, "exact_sparsity_ratio": [295, 325], "get_block_size_dict": [295, 325], "get_masks_loc": [295, 325], "calul": [295, 325], "ration": [295, 325], "get_pattern_lock_mask": [295, 325], "lock": [295, 325, 562, 569, 571, 572], "patternnxm": [295, 325], "kept": [295, 325], "block_siz": [295, 325], "block_size_1": [295, 325], "block_size_2": [295, 325], "keep_pre_mask": [295, 325], "unchang": [295, 325], "patternninm": [295, 325], "doc": [295, 325, 565, 571], "md": [295, 325, 554], "check_config": [296, 336], "prune_config": [296, 336], "everyth": [296, 336], "reset_non_value_to_default": 296, "undefin": [296, 336], "process_and_check_config": [296, 336], "obejct": 296, "process_config": [296, 336], "parse_to_prun": [296, 336], "parse_not_to_prun": 296, "register_prun": [297, 332], "get_prun": [297, 332], "module_nam": [297, 299, 322, 332, 334, 335, 363, 518], "cuurent": [297, 332], "current_sparsity_ratio": [297, 332], "global_step": [297, 332], "update_frequency_on_step": [297, 574], "mask_weight": [297, 332], "formal": [297, 332], "local_step": [297, 298, 332, 333], "judg": 297, "Or": 297, "check_is_pruned_step": [297, 332], "update_scor": 297, "magnitudeprun": 297, "snipprun": 297, "snip": [297, 322, 562, 571, 572, 583], "1810": [297, 322], "02340": [297, 322], "snipmomentumprun": 297, "moreoev": 297, "patternlockprun": [297, 332], "templat": [298, 302, 333, 386, 405, 410, 499, 507, 544, 547], "tree": [298, 333, 381, 410, 412], "nlp": [298, 333, 555, 571, 572, 575], "huggingface_model": [298, 333], "config_file_path": [298, 333], "pruner_info": [298, 333], "register_schedul": [299, 335], "get_schedul": [299, 335], "gradual": [299, 335, 571, 572], "update_sparsity_ratio": [299, 335], "aggressive_ratio": 299, "current_prune_step": [299, 335], "total_prune_step": [299, 335], "oneshotschedul": [299, 335], "aggress": 299, "iterativeschedul": [299, 335], "target_ratio": [299, 335], "server": [301, 302, 439, 446, 498, 499, 506, 507, 515, 518, 529, 531, 533, 547], "seper": 301, "opt_model": [301, 569], "fulli": [301, 575], "saniti": 301, "illeg": 301, "sync": 301, "accordingli": 301, "base_model": [302, 313, 314, 316, 318, 319, 320], "keras_model": [302, 313], "mxnet_model": [302, 313], "nets_factori": [302, 313], "onnx_model": [302, 313, 450], "tensorflow_model": [302, 313], "torch_model": [302, 313], "reg": [302, 323, 332], "tuning_sampl": [302, 344, 349], "tuning_spac": [302, 344, 349, 352], "tuning_struct": [302, 344, 349], "auto_mixed_precis": [302, 344], "conserv": [302, 344], "hawq_v2": [302, 344], "mse_v2": [302, 344], "ux": 302, "config_gener": [302, 439, 499], "configuration_wizard": [302, 439, 499], "db_manag": [302, 439, 499, 537], "diagnosi": [302, 407, 410, 416, 439, 499, 528, 534], "file_brows": [302, 439, 499], "jobs_manag": [302, 439, 499], "model_zoo": [302, 439, 499], "names_mapp": [302, 439, 499], "profil": [302, 373, 391, 398, 400, 410, 413, 415, 416, 439, 447, 455, 499, 500, 510, 516, 533, 538], "manage_workspac": [302, 439, 499], "workload": [302, 368, 369, 370, 372, 374, 375, 378, 400, 405, 410, 470, 487, 494, 499, 501, 507, 517, 518, 533, 536, 538, 539, 540, 541, 573], "executor": [302, 366, 499, 507], "expiring_dict": [302, 499, 507], "github_info": [302, 499, 507], "hw_info": [302, 499, 507], "json_seri": [302, 369, 423, 424, 429, 431, 432, 435, 445, 454, 480, 486, 499, 506, 507, 516, 519, 520, 521, 522, 524, 525, 526, 527, 528], "proc": [302, 499, 507], "status_upd": [302, 499, 507], "yaml_util": [302, 499, 507], "web": [302, 498, 499, 547, 579], "servic": [302, 499, 532, 533, 570], "router": [302, 499, 533], "basemodel": [312, 313, 314, 316, 318, 319, 320], "plai": [312, 313, 571, 573], "role": [312, 313, 571], "itself": [312, 313, 314, 316, 318, 319], "node_typ": [312, 313], "kerasmodel": [314, 457], "get_model_fwk_nam": 315, "fwk": 315, "factori": [317, 420, 439, 474, 490, 495, 499, 510, 514], "tfslimnetsfactori": 317, "model_func": 317, "arg_scop": 317, "onnxmodel": [318, 450], "large_s": 318, "ort": 318, "output_name_to_nod": 318, "ir_vers": 318, "opset_import": 318, "nodes_to_remov": 318, "nodes_to_add": 318, "add_initi": 318, "get_initi": 318, "remove_initi": 318, "init_to_remov": 318, "set_initi": 318, "get_children": 318, "get_par": 318, "find_node_by_nam": 318, "new_nodes_list": 318, "find_nodes_by_initi": 318, "get_scale_zero": 318, "save_model_to_fil": 318, "use_external_data_format": 318, "2gb": 318, "replace_node_input": 318, "new_input_nam": 318, "replace_input_of_all_nod": 318, "white_optyp": 318, "black_optyp": 318, "replace_node_output": 318, "new_output_nam": 318, "replace_output_of_all_nod": 318, "remove_unused_const": 318, "topological_sort": 318, "enable_subgraph": 318, "topolog": 318, "get_nodes_chain": 318, "start_nod": 318, "stop_nod": 318, "result_chain": 318, "chain": 318, "get_model_typ": [319, 448], "validate_graph_nod": 319, "validate_and_inference_input_output": 319, "input_tensor_nam": 319, "output_tensor_nam": 319, "graph_sess": 319, "graph_def_sess": 319, "frozen_pb_sess": 319, "load_saved_model": 319, "saved_model_tag": 319, "serv": [319, 535, 543], "signatur": 319, "tag": [319, 505, 518, 579], "metagraphdef": 319, "input_tensor": [319, 320], "keras_sess": 319, "slim_sess": 319, "checkpoint_sess": 319, "estimator_sess": 319, "input_fn": 319, "saved_model_sess": 319, "renturn": 319, "workspace_path": [319, 320, 503, 518], "workspac": [319, 320, 353, 362, 404, 405, 410, 412, 413, 414, 444, 517, 519, 528, 567], "tensorflowsavedmodelmodel": 319, "get_all_weight_nam": [319, 320], "update_weight": [319, 320], "new_tensor": [319, 320], "get_weight": [319, 320], "wight": 319, "report_spars": [319, 320], "total_spars": [319, 320], "build_saved_model": 319, "savedmodelbuild": 319, "protocol": 319, "asset": 319, "tensorflowqatmodel": 319, "tensorflowcheckpointmodel": 319, "checkpoint": [319, 362, 567], "tensorflowmodel": [319, 426, 455, 457, 458, 459, 460], "pytorchbasemodel": 320, "register_forward_pre_hook": 320, "remove_hook": 320, "generate_forward_pre_hook": 320, "update_gradi": 320, "grad_nam": 320, "new_grad": 320, "grad": 320, "prune_weights_": 320, "place": [320, 563, 579], "get_input": 320, "get_gradi": 320, "pytorchmodel": 320, "quantized_state_dict": 320, "load_quantized_state_dict": 320, "stat_dict": 320, "export_to_jit": 320, "export_to_fp32_onnx": 320, "rand": 320, "stdout": 320, "export_to_bf16_onnx": 320, "export_to_int8_onnx": 320, "s8s8": 320, "pytorchfxmodel": 320, "ipexmodel": 320, "objective_registri": 321, "sart": 321, "result_list": 321, "models": [321, 568, 574], "register_criterion": 322, "get_criterion": 322, "pruningcriterion": 322, "magnitudecriterion": 322, "criterion_class": 322, "magtinud": 322, "gradientcriterion": 322, "snipcriterion": 322, "product": [322, 562, 566, 570, 573, 575, 578, 581], "snipmomentumcriterion": 322, "mechan": [322, 578], "preserv": [322, 555], "basepattern": [325, 334], "keep_mask_lay": 325, "invalid_lay": 325, "reduce_tensor": 325, "along": [325, 511, 563], "unprun": 325, "get_single_mask_per_target_ratio": 325, "return_dict": 325, "zero_cnt": 325, "total_cnt": 325, "check_layer_valid": 325, "get_reduced_masks_from_data": 325, "update_residual_cnt": 325, "get_sparsity_ratio_each_lay": 325, "sparsity_ratio": 325, "sparsityinfo": 325, "adjust_ratio": 325, "key_new_spars": 325, "max_sparsity_ratio": 325, "min_sparsity_ratio": 325, "final_target_sparsity_ratio": 325, "examin": [325, 571], "adjust_sparsity_ratio": 325, "block_wis": 325, "get_sparsity_ratio_progress": 325, "reshape_orig_to_pattern": 325, "s1": 325, "s2": 325, "reshape_reduced_to_orig": 325, "orig_shap": 325, "reduce_scor": 325, "get_mask_per_threshold": 325, "cur_target_sparsity_ratio": 325, "keep_exact_sparsity_ratio": 325, "remain": 325, "count_new_masked_cnt": 325, "new_added_mask": 325, "update_new_added_mask": 325, "cur_mask": 325, "bacaus": 325, "update_progressive_mask": 325, "progressive_step": 325, "progressive_config": 325, "update_progressive_masks_linear": 325, "update_progressive_masks_scor": 325, "update_progressive_masks_loc": 325, "domain": [325, 380, 388, 391, 408, 410, 415, 439, 446, 447, 450, 468, 499, 500, 502, 518, 530, 535, 547, 571, 572, 581], "update_progressive_masks_glob": 325, "get_least_ninm_mask_from_data": 325, "elementwis": 325, "sparisti": 325, "get_ele_mask_per_threshold": 325, "least_ninm_mask": 325, "least_m_in_m_mask": 325, "pruner_registri": 331, "parse_valid_pruner_typ": 332, "baseprun": 332, "mask_weights_gener": 332, "update_mask": 332, "basicprun": 332, "proce": 332, "regul": 332, "set_global_step": 332, "progressiveprun": 332, "grain": [332, 573], "interv": [332, 572], "check_progressive_valid": 332, "check_is_pruned_progressive_step": 332, "update_masks_progress": 332, "print_progressive_spars": 332, "register_reg": 334, "regulariz": 334, "get_reg_typ": 334, "get_reg": 334, "basereg": 334, "grouplasso": 334, "coeff": 334, "lasso": [334, 562, 571, 572], "reg_term": 334, "coeffient": 334, "pruningschedul": 335, "init_ratio": 335, "init_sparsity_ratio": 335, "reset_none_to_default": 336, "update_param": [336, 385], "process_weight_config": 336, "global_config": 336, "local_config": 336, "default_config": 336, "pruners_info": 336, "process_yaml_config": 336, "calib_func": 337, "eval_metr": 337, "hybirdblock": 337, "paramt": 337, "automixedprecisiontunestrategi": 338, "rule": [338, 571], "tri": [338, 531, 581], "tune_config": [338, 339, 340, 341, 342, 343, 345, 346, 347, 348], "basictunestrategi": 339, "One": [339, 547, 550, 554, 562, 571, 572, 573, 581], "bayesiantunestrategi": 340, "come": [340, 581], "discret": [340, 581], "gaussian": [340, 581], "posterior": [340, 581], "black": [340, 581], "histori": [340, 348, 362, 403, 410, 412, 416, 469, 487, 537, 581], "maxim": [340, 571, 572, 581], "acq_max": 340, "ac": 340, "gp": 340, "y_max": 340, "random_se": [340, 353, 402, 528, 555, 582], "n_warmup": 340, "n_iter": 340, "acquisit": 340, "relev": 340, "acq": 340, "randomst": 340, "scipi": 340, "x_max": 340, "targetspac": 340, "pbound": 340, "9527": [340, 555, 582], "params_to_arrai": 340, "array_to_param": 340, "amort": 340, "keyerror": 340, "get_target": 340, "num": [340, 363, 565], "_kei": 340, "bayesianoptim": 340, "promis": [340, 553, 571, 572], "gen_next_param": 340, "conservativetunestrategi": 341, "o0": 341, "quantifi": 341, "quant_queu": 341, "prioriti": [341, 581], "fp16": [341, 566, 575], "trail": 341, "exhaustivetunestrategi": 342, "hawq_v2tunestrategi": 343, "impact": [343, 345, 346, 577, 581], "msetunestrategi": 345, "mse_impact_lst": 345, "best_qmodel": 345, "current_best_model": 345, "ordered_op_name_typ": 345, "mse_v2tunestrategi": 346, "highest": [346, 581], "revert": [346, 581], "lowest": [346, 571, 572, 581], "randomtunestrategi": 347, "strategy_registri": [348, 581], "evaluation_result": [348, 554], "initial_tuning_cfg": 348, "quant_mode_wise_item": 348, "ordereddict": [348, 405, 410, 519], "quant_mod": 348, "initial_op_tuning_cfg": 348, "op_item_dtype_dict": 348, "show_baseline_info": 348, "displai": [348, 434, 447], "durat": [348, 383, 394, 397, 404, 410, 412, 413, 503, 568, 578], "initial_best_acc": 348, "set_tuning_spac": 348, "setup_resum": 348, "set_q_func": 348, "update_best_op_tuning_cfg": 348, "op_tuning_cfg": 348, "deploy_config": 348, "deploy": [348, 551], "optuningconfig": [349, 352], "op_quant_mod": [349, 352], "get_stat": [349, 352], "from_stat": [349, 352], "compressionmanag": 353, "uesd": 353, "deal": 353, "commpon": 353, "train_loop": 353, "path_to_sav": 353, "_summary_": 353, "layerhistogramcollector": [354, 357], "layer_tensor": [354, 357], "include_lay": [354, 357], "diverg": [354, 357, 358, 552, 581], "create_eval_func": 356, "postprocess_cfg": 356, "create_train_func": 356, "Their": 356, "kl_diverg": 357, "expand_quantized_bin": [357, 358], "quantized_bin": [357, 358], "reference_bin": [357, 358], "expand": [357, 358], "bin": [357, 358], "safe_entropi": [357, 358], "reference_distr_p": [357, 358], "p_sum": [357, 358], "candidate_distr_q": [357, 358], "q_sum": [357, 358], "entropi": [357, 358, 581], "get_threshold": [357, 358], "hist_edg": [357, 358], "quantized_typ": [357, 358], "num_quantized_bin": [357, 358], "255": [357, 358, 575], "historgram": [357, 358], "number_bin": [357, 358], "checkpoint_dir": 362, "history_cfg": 362, "best_configur": 362, "best_model_weight": 362, "pt": [362, 567, 573, 576], "snapshot": [362, 416, 537], "cfg_from_fil": 363, "yaml_fil": [363, 550, 554, 565, 568], "lazyimport": 363, "lazi": 363, "till": [363, 581], "get_siz": [363, 518], "equal_dict": 363, "d2": 363, "compare_kei": 363, "ignore_kei": 363, "ignor": [363, 550], "customized_msg": 363, "elaps": 363, "combine_histogram": 363, "old_hist": 363, "get_tuning_histori": 363, "tuning_history_path": [363, 487], "load_data_from_pkl": 363, "pkl": 363, "dump_data_to_loc": 363, "project_data": [364, 470, 471, 476, 480, 483, 486, 493], "benchmark_data": 364, "workdir": [364, 480, 493, 499, 503, 507, 515], "config_filenam": [364, 480, 493], "configuration_data": [364, 471, 476, 480, 483, 486], "generate_config": [364, 471, 476, 480, 483, 486, 493], "dataloaderinterfac": [364, 480, 493], "dataloader_data": [364, 376, 405, 410, 480, 493], "parse_arg": [365, 473, 477, 482, 485, 491], "benchmark_mod": [365, 510], "set_eager_execut": [365, 473, 477, 485], "request_id": [366, 469, 487, 488, 503, 511], "asd": [366, 488], "benchmark_id": [366, 383, 384, 394], "benchmark_result_upd": 366, "benchmark_result_update_pytorch_script": 366, "neural_coder_perform": 366, "neural_coder_tim": 366, "pytorch_script_bench_optim": 366, "command_line_of_script": 366, "pytorch_script_bench_original_model": 366, "execute_real_benchmark": 366, "project_detail": [366, 399, 469, 488], "benchmark_detail": 366, "benchmark_model": [367, 439, 499], "execute_benchmark": [367, 439, 499], "benchmarkconfiggener": 368, "configgener": [368, 369, 370, 372, 373, 374, 375], "generate_evaluation_config": [368, 370, 372, 374, 375], "generate_accuracy_config": 368, "generate_performance_config": 368, "workload_directori": 369, "configuration_path": 369, "jsonseri": [369, 423, 424, 429, 431, 432, 435, 445, 454, 480, 486, 506, 508, 516, 519, 520, 521, 522, 524, 525, 526, 527, 528], "get_predefined_config_path": [369, 518], "generate_model_config": 369, "generate_dataloader_config": 369, "graphoptimizationconfiggener": 370, "generate_graph_optimization_config": 370, "benchmark_config_gener": [371, 439, 499], "graph_optimization_config_gener": [371, 439, 499], "mixed_precision_config_gener": [371, 439, 499], "profiling_config_gener": [371, 439, 499], "pruning_config_gener": [371, 439, 499], "quantization_config_gener": [371, 439, 499], "mixedprecisionconfiggener": 372, "generate_mixed_precision_config": 372, "profilingconfiggener": 373, "pruningconfiggener": 374, "generate_pruning_config": 374, "quantizationconfiggener": 375, "generate_tuning_config": 375, "generate_quantization_config": 375, "configurationpars": 376, "input_data": [376, 381, 549], "parse_evaluation_data": 376, "evaluation_data": 376, "parse_transform": 376, "transforms_data": [376, 405, 410], "parse_dataload": 376, "parse_metr": 376, "metric_data": 376, "get_param_typ": 376, "param_group": 376, "parse_valu": 376, "required_typ": 376, "parse_list_valu": 376, "parse_multidim_list": 376, "dimension": 376, "normalize_string_list": 376, "string_list": 376, "bracket": 376, "miss": [376, 575], "get_predefined_configur": 378, "update_config_to_machine_specif": 378, "configuration_pars": [379, 439, 499], "get_boundary_nod": [379, 439, 499], "get_configur": [379, 439, 499], "params_feed": [379, 439, 499], "pruning_config_pars": [379, 439, 499], "feeder": 380, "get_framework": [380, 453], "get_domain": 380, "get_model": [380, 453, 539], "get_dataload": 380, "get_transform": 380, "get_object": 380, "get_strategi": 380, "get_quantization_approach": 380, "get_possible_valu": 380, "pruningconfigpars": 381, "generate_tre": 381, "parse_entri": 381, "bench": [382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 469, 498], "dbmanag": [382, 415], "database_loc": [382, 415], "log_level": [382, 415, 509], "initialize_databas": [382, 415], "create_sqlalchemy_engin": [382, 415], "create_al": [382, 415], "tabl": [382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 405, 406, 415], "project_id": [383, 386, 393, 394, 397, 399, 405, 409, 410], "model_id": [383, 393, 394, 397], "dataset_id": [383, 386, 394, 397, 405, 409, 410], "warmup_iter": 383, "number_of_inst": 383, "cores_per_inst": [383, 519, 548, 574], "execution_command": [383, 394, 397], "benchark": 383, "delete_benchmark": [383, 404, 410], "benchmark_nam": 383, "update_statu": [383, 394, 397], "execution_statu": [383, 394, 397], "executionstatu": [383, 394, 397, 404, 410, 412, 413, 500, 517], "update_dur": [383, 394, 397], "update_execution_command": [383, 394, 397, 404, 410, 412, 413], "update_log_path": [383, 394, 397, 410, 413], "update_config_path": [383, 394], "update_dataset": [383, 394, 397], "update_batch_s": [383, 394], "update_mod": 383, "update_cores_per_inst": 383, "update_number_of_inst": 383, "clean_statu": [383, 394, 397, 404, 410, 412, 413, 517], "status_to_clean": [383, 394, 397, 404, 410, 412, 413, 517], "build_info": [383, 384, 386, 393, 394, 397, 398, 400, 403], "benchmark_result": [383, 391, 415, 439], "benchmarkresult": [383, 384], "update_accuraci": 384, "update_perform": 384, "list_by_framework": [385, 392, 401], "framework_id": [385, 392, 393, 401, 417], "query_to_list": [385, 392, 401], "dataloaders_queri": 385, "dataloader_id": 385, "fill_dictionari": [385, 387, 388, 390, 392, 395, 396, 401], "dataset_nam": [386, 405, 410], "template_path": 386, "delete_dataset": [386, 405, 410], "update_template_path": 386, "get_domain_id": 387, "domain_nam": 387, "domainflavour": [388, 500], "db": [388, 395, 396, 416, 417], "get_domain_flavour_id": 388, "domain_flavour_nam": 388, "flavour": [388, 408, 410, 468, 500], "get_framework_id": 390, "framework_nam": [390, 466, 506], "domain_flavour": [391, 415, 439, 445, 518], "optimization_typ": [391, 394, 415, 439], "profiling_result": [391, 397, 415, 439], "pruning_detail": [391, 394, 415, 439], "tuning_detail": [391, 394, 415, 439], "tuning_histori": [391, 394, 410, 412, 415, 439, 474, 499], "metrics_queri": 392, "input_nod": 393, "precision_id": [393, 394, 395, 396], "domain_id": [393, 401], "domain_flavour_id": 393, "supports_profil": [393, 447, 455], "supports_graph": [393, 447], "supports_prun": [393, 447, 459], "delete_model": [393, 410, 411], "optimization_type_id": 394, "sampling_s": [394, 519, 582], "tuning_details_id": [394, 402], "pruning_details_id": [394, 400], "diagnosis_config": 394, "delete_optim": [394, 410, 412], "optimization_id": [394, 395, 410, 412, 469], "optimization_nam": [394, 395, 409, 410], "update_optimized_model": [394, 410, 412], "optimized_model_id": 394, "update_sampling_s": 394, "update_precis": 394, "update_tuning_detail": 394, "update_pruning_detail": 394, "pin_accuracy_benchmark": [394, 410, 412], "pin": [394, 410, 412], "pin_performance_benchmark": [394, 410, 412], "get_optimization_by_project_and_model": 394, "unpin_benchmark": 394, "db_connect": 394, "unpin": 394, "optimizationtyp": [394, 395, 500], "tuningdetail": [394, 402, 486], "tuninghistori": [394, 403, 487], "pruningdetail": [394, 400], "optimized_model": 394, "get_pinned_benchmark": 394, "list_for_precis": 395, "precision_nam": [395, 396], "get_optimization_type_for_precis": 395, "get_optimization_type_id": 395, "get_optimization_type_by_nam": 395, "get_optimization_type_by_id": 395, "get_precision_id": 396, "get_precision_by_nam": 396, "get_precision_by_id": 396, "num_thread": 397, "delete_profil": [397, 410, 413], "profiling_id": [397, 398, 410, 413, 488], "profiling_nam": 397, "update_num_thread": 397, "profilingresult": [397, 398], "total_execution_tim": 398, "accelerator_execution_tim": 398, "cpu_execution_tim": 398, "op_run": 398, "op_defin": 398, "get_result": 398, "bulk_add": 398, "params_interfac": [398, 404, 405, 407, 409, 410, 411, 412, 413, 415, 439, 499, 537], "profilingresultaddparamsinterfac": [398, 410, 413, 416], "bulk": [398, 410, 413], "delete_result": 398, "delet": [398, 404, 405, 410, 411, 412, 413, 414, 571, 572], "create_project": [399, 409, 410, 414], "delete_project": [399, 410, 414], "project_nam": [399, 405, 410], "get_model_by_nam": 399, "list_project": [399, 410, 414], "update_not": 399, "pruning_details_data": 400, "delete_pruning_detail": 400, "list_by_domain": 401, "transforms_queri": 401, "accuracy_criterion_typ": 402, "accuracy_criterion_threshold": 402, "exit_polici": [402, 555, 582], "tuning_details_data": 402, "delete_tuning_detail": 402, "update_tuning_histori": 402, "tuning_history_id": 402, "minimal_accuraci": 403, "baseline_accuraci": 403, "baseline_perform": 403, "last_tune_accuraci": 403, "last_tune_perform": 403, "best_tune_accuraci": 403, "best_tune_perform": 403, "benchmarkapiinterfac": [404, 410], "get_benchmark_detail": [404, 410], "list_benchmark": [404, 410], "update_benchmark_accuraci": [404, 410], "update_benchmark_perform": [404, 410], "update_benchmark_statu": [404, 410], "update_benchmark_dur": [404, 410], "update_path": [404, 410, 412], "add_benchmark": [404, 410], "add_result": [404, 410, 413], "edit_benchmark": [404, 410], "parse_benchmark_data": [404, 410], "benchmarkaddparamsinterfac": [404, 410, 416], "parse_benchmark_edit_data": [404, 410], "benchmarkeditparamsinterfac": [404, 410, 416], "before_delete_benchmark_entri": 404, "sqlite3": 404, "db_model": [404, 415, 439, 499], "datasetapiinterfac": [405, 410], "get_dataset_detail": [405, 410], "list_dataset": [405, 410], "add_dataset": [405, 410], "set_template_path": [405, 410], "parsed_dataset_data": [405, 410], "datasetaddparamsinterfac": [405, 410, 416], "check_if_custom_metric_or_dataload": [405, 410], "dataset_data": [405, 410, 470, 471, 476, 480, 483, 486, 520], "generate_custom_templ": [405, 410], "dataloader_path": [405, 410], "generate_templ": [405, 410], "template_typ": [405, 410], "parse_dataset_data": [405, 410], "get_predefined_dataset": [405, 410], "prepare_predefined_dataload": [405, 410], "prepare_predefined_transform": [405, 410], "set_database_vers": [405, 406], "version_num": [405, 406], "alembic_vers": [405, 406], "initialize_associ": [405, 406], "initialize_precision_optimization_types_associ": [405, 406], "search_in_list_of_dict_for_unique_valu": [405, 406], "list_of_dict": [405, 406], "search_in_list_of_dict": [405, 406], "diagnosisapiinterfac": [407, 410], "get_op_list": [407, 410, 418], "get_op_detail": [407, 410, 418], "generate_optim": [407, 410], "model_wise_param": [407, 410], "parse_optimization_data": [407, 410, 412], "diagnosisoptimizationparamsinterfac": [407, 410, 416], "parse_op_wise_config": [407, 410], "op_wise_param": [407, 410], "parse_wise_paramet": [407, 410], "params_per_typ": [407, 410], "set_op_wise_pattern_precis": [407, 410], "parse_model_wise_config": [407, 410], "dictionariesapiinterfac": [408, 410], "dictonari": [408, 410], "list_domain": [408, 410], "list_domain_flavour": [408, 410], "list_optimization_typ": [408, 410], "list_optimization_types_for_precis": [408, 410], "list_precis": [408, 410], "list_dataload": [408, 410], "list_dataloaders_by_framework": [408, 410], "list_transform": [408, 410], "list_transforms_by_framework": [408, 410], "list_transforms_by_domain": [408, 410], "list_metr": [408, 410], "list_metrics_by_framework": [408, 410], "examplesapiinterfac": [409, 410], "get_optimization_data": [409, 410], "optimizationaddparamsinterfac": [409, 410, 412, 416], "benchmark_api_interfac": [410, 415, 439], "dataset_api_interfac": [410, 415, 439], "diagnosis_api_interfac": [410, 415, 439], "dictionaries_api_interfac": [410, 415, 439], "examples_api_interfac": [410, 415, 439], "model_api_interfac": [410, 415, 439], "optimization_api_interfac": [410, 415, 439], "profiling_api_interfac": [410, 415, 439], "project_api_interfac": [410, 415, 439], "modelapiinterfac": [410, 411], "add_model": [410, 411, 414], "get_model_detail": [410, 411], "list_model": [410, 411, 439, 465, 499], "parse_model_data": [410, 411], "modeladdparamsinterfac": [410, 411, 416], "optimizationapiinterfac": [410, 412], "get_optimization_detail": [410, 412], "list_optim": [410, 412], "update_optimization_statu": [410, 412], "update_optimization_dur": [410, 412], "add_optim": [410, 412], "add_quantization_optim": [410, 412], "optimization_data": [410, 412, 470, 471, 476, 480, 483, 486], "add_pruning_optim": [410, 412], "add_standard_optim": [410, 412], "edit_optim": [410, 412], "get_pruning_detail": [410, 412], "gat": [410, 412], "edit_tuning_detail": [410, 412], "parsed_optimization_data": [410, 412], "optimizationeditparamsinterfac": [410, 412, 416], "edit_pruning_detail": [410, 412], "pruning_data": [410, 412], "add_tuning_histori": [410, 412], "parse_tuning_histori": [410, 412], "tuninghistoryinterfac": [410, 412, 416, 537], "parse_optimization_edit_data": [410, 412], "load_pruning_details_config": [410, 412, 518], "profilingapiinterfac": [410, 413], "get_profiling_detail": [410, 413], "list_profil": [410, 413], "update_profiling_statu": [410, 413], "update_profiling_dur": [410, 413], "add_profil": [410, 413], "edit_profil": [410, 413], "bulk_add_result": [410, 413], "parse_profiling_data": [410, 413], "profilingaddparamsinterfac": [410, 413, 416], "parse_profiling_result_data": [410, 413], "parse_profiling_edit_data": [410, 413], "profilingeditparamsinterfac": [410, 413, 416], "projectapiinterfac": [410, 414], "get_project_detail": [410, 414], "add_dummy_dataset": [410, 414], "update_project_not": [410, 414], "db_oper": [415, 439, 499], "parse_nod": 416, "tuninghistoryiteminterfac": [416, 537], "update_dataloaders_param": 417, "dataloaders_to_upd": 417, "framework_dataloaders_config": 417, "get_framework_dataloaders_config": 417, "get_framework_transforms_config": 417, "get_tensors_info": [418, 447], "load_quantization_config": 418, "calculate_ms": 418, "input_model_tensor": 418, "optimized_model_tensor": 418, "op_detail": [418, 420, 439, 499], "opdetail": [418, 423], "get_histogram_data": 418, "draw": [418, 578, 581], "diagnosisfactori": 419, "get_diagnosi": 419, "onnx_diagnosi": [420, 439, 499], "onnxrt_diagnosi": [420, 421, 439], "tensorflow_diagnosi": [420, 439, 499], "op_entri": [420, 439, 499], "onnxrtdiagnosi": 422, "onnxrtmodel": [422, 450], "serialization_typ": [423, 424, 454, 506, 508, 520, 521, 525, 526], "oppattern": 423, "pattern_data": 423, "opweight": 423, "weights_data": 423, "opactiv": 423, "op_activ": 423, "opentri": 424, "activation_min": 424, "activation_max": 424, "tensorflowdiagnosi": 426, "browser": [427, 547], "get_directory_entri": 427, "get_requested_path": 427, "request": [427, 439, 440, 441, 462, 463, 466, 487, 499, 503, 530, 532, 534, 535, 539, 541, 542, 544, 547, 575], "get_non_hidden_directory_entri": 427, "create_dir_entri": 427, "direntri": 427, "create_file_entri": 427, "create_entri": 427, "is_directori": 427, "sort_entri": 427, "should_show_fil": 427, "should_show_only_model_fil": 427, "get_setting_valu": 427, "get_filter_valu": 427, "filter_requested_entri": 427, "filter_nam": 427, "is_directory_entri": 427, "is_model_or_directory_entri": 427, "is_dataset_or_directory_entri": 427, "brows": 428, "filesystem": [428, 518, 543], "attribute_typ": 429, "expanded_group": [430, 433], "edg": [432, 434, 439, 499, 580], "add_edg": 432, "source_id": 432, "target_id": 432, "get_nod": 432, "highlight_pattern": 432, "get_target_nod": 432, "reader": [433, 434, 439, 499], "graphread": 433, "find_pattern_in_graph": [433, 534], "onnxrt_read": [434, 436, 439], "tensorflow_read": [434, 436, 439], "collaps": [434, 439, 499, 547], "graph_read": [434, 439, 499], "groupnod": 435, "group_nam": 435, "onnxrtread": 437, "tensorflowread": 438, "jobs_control_queu": [439, 440, 499], "frozen_pb": [439, 446, 456], "meta_graph": [439, 446, 456], "model_type_gett": [439, 446, 499], "repositori": [439, 444, 446, 499, 505, 561], "download_config": [439, 464, 465, 499], "download_model": [439, 464, 465, 499], "optimize_model": [439, 472, 474, 475, 478, 481], "neural_coder_optim": [439, 474, 499], "tune_model": [439, 474, 484], "execute_optim": [439, 474, 499], "tensorflow_profil": [439, 490, 499], "execute_profil": [439, 490, 499], "profile_model": [439, 490, 492, 496, 499], "job": [440, 514], "_jobscontrolqueu": 441, "queu": 441, "jobsmanag": 441, "_jobsmmanag": 442, "_job": 442, "get_default_path": 444, "shape_elements_ord": [447, 450, 459, 518], "get_input_nod": [447, 457, 458, 459], "get_output_nod": [447, 457, 458, 459], "ensure_supported_path": 447, "get_model_graph": [447, 450, 458, 459, 534], "supports_path": [447, 450, 452, 455, 457, 458, 460], "guard_requirements_instal": [447, 450, 452, 459], "instal": [447, 450, 452, 459, 466, 554, 558, 570], "nc_model_inst": [450, 459], "filtered_input_nod": 450, "remove_number_of_samples_from_shap": 450, "pytorchscriptmodel": 452, "modelrepositori": 453, "get_framework_from_path": [453, 518], "get_supported_framework": 453, "is_model_path": 453, "trust": [454, 547], "frozenpbmodel": 455, "metagraphmodel": 458, "metagraph": 458, "savedmodelmodel": 460, "get_input_shap": 461, "fix_dynamic_shap": 461, "resourc": [464, 552, 571], "download_yaml_config": 464, "model_info": 464, "download_fil": 464, "download_path": 464, "header": [464, 543, 558], "report_progress": 464, "unpack_arch": 464, "archive_path": 464, "unpack": 464, "archiv": 464, "get_yaml_url": 464, "model_src_dir": 464, "yaml_relative_loc": 464, "get_available_model": 466, "check_vers": 466, "framework_vers": 466, "supported_vers": 466, "validate_model_list": 466, "model_list": 466, "get_framework_module_nam": 466, "get_installed_framework": 466, "mappingdirect": 468, "namesmapp": 468, "framework_map": 468, "domain_map": 468, "domain_flavour_map": 468, "precision_map": 468, "map_nam": 468, "parameter_typ": 468, "execute_optimization_pytorch_script": 469, "execute_optimization_regular": 469, "parse_model_data_to_bench_nam": 469, "parse_log": 469, "optimization_detail": 469, "check_if_collect_tuning_histori": 469, "optimizationfactori": 470, "get_optim": 470, "optimization_script": [471, 476, 480, 483, 486], "optimize_graph": [473, 477], "output_graph": [473, 477, 482, 485], "optimize_graph_config": [473, 477], "optimize_pt_script": 479, "output_model_nam": 480, "output_model_dir": 480, "optimizationinterfac": 480, "accuracycriterion": [486, 581], "optimization_workdir": 487, "watcher": 487, "process_succeed": 487, "signal": [487, 518, 555], "was_history_file_chang": 487, "history_file_modification_tim": 487, "send_history_snapshot": 487, "execute_real_profil": 488, "profiling_detail": 488, "profilerfactori": [489, 494], "get_profil": [489, 494], "profiling_data": [489, 493, 494, 496, 516], "load_profiling_detail": 491, "json_path": 491, "config_path": 493, "initialize_graph": 496, "tf_modul": 496, "create_tf_config": 496, "num_warmup": 496, "get_node_by_nam": 496, "convert_nodes_to_list": 496, "build_dataload": 496, "delete_assign": 497, "wsgi": 498, "prepare_environ": 498, "app": [499, 533], "history_snapshot_pars": [499, 533, 538], "request_data_processor": [499, 533, 538], "response_gener": [499, 533, 538, 539, 541, 544], "status": [500, 512, 517], "ensure_workdir_exists_and_writ": 501, "clean_workloads_wip_statu": 501, "wip": [501, 583], "workloads_list": 501, "migrate_databas": 501, "latest": [501, 511, 563, 573, 577], "alemb": [501, 558, 563], "notfoundexcept": [502, 531, 532], "accessdeniedexcept": 502, "deni": 502, "clienterrorexcept": 502, "internalexcept": 502, "subject": [503, 530, 564], "send_respons": 503, "log_nam": 503, "additional_log_nam": [503, 511], "shell": [503, 511, 579], "process_dur": 503, "call_on": 503, "cwd": [503, 511], "universal_newlin": [503, 511], "startupinfo": [503, 511], "creationflag": [503, 511], "ignore_exit_cod": [503, 511], "pid": [503, 511], "env_arg": 503, "ncprocess": [503, 512], "refresh_workdir": 503, "is_multi_command": 503, "expir": 504, "expiringdictitem": 504, "expires_at": 504, "is_expir": 504, "expiringdict": 504, "initial_valu": 504, "ttl": 504, "120": 504, "userdict": 504, "githubinfo": 505, "hw": 506, "hwinfo": 506, "get_number_of_socket": 506, "get_distribut": 506, "distibut": 506, "get_bios_vers": 506, "bio": [506, 570], "is_turbo_boost_en": 506, "turbo": [506, 570], "boost": [506, 566, 573], "get_kernel_vers": 506, "get_framework_info": 506, "get_framework_dependency_info": 506, "subdepend": 506, "serializ": 508, "serialize_item": 508, "datetim": 508, "throw": 508, "typeerror": 508, "2016": 508, "84913": 508, "08t11": 508, "084913": 508, "change_log_level": 509, "optimizationpars": 510, "performancepars": 510, "update_parti": 510, "parsed_result": 510, "summarize_parti": 510, "summarize_valu": 510, "accuracypars": 510, "benchmarkparserfactori": 510, "get_pars": 510, "profilingpars": 510, "unify_tim": 510, "string_valu": 510, "micro": 510, "125": [510, 583], "6m": 510, "microsecond": 510, "output_dir": 511, "cmd": 511, "docker": 511, "hub": 511, "aibt_tensorflow": 511, "7_3_mkldnn_tensorflow": 511, "111224": 511, "pull_imag": 511, "0c750a01": 511, "90e0": 511, "4aa8": 511, "99fe": 511, "a194d55a2046": 511, "time_start": 511, "2018": 511, "17t14": 511, "47": [511, 583], "352502": 511, "time_stop": 511, "25": [511, 583], "110410": 511, "info_path": 511, "tail": 511, "is_ok": [511, 512], "subprocess": [511, 534], "popen": 511, "remove_log": 511, "properli": 512, "return_code_al": 512, "remove_successful_log": 512, "success": [512, 530, 563], "get_status_update_funct": 514, "job_typ": 514, "sent": 516, "throughput": 516, "acc_input_model": 516, "acc_optimized_model": 516, "size_input_model": 516, "size_optimized_model": 516, "path_optimized_model": 516, "optimization_tim": 516, "insert_data": 516, "calculate_throughput": 516, "readi": 516, "ensure_working_path_exist": 517, "clean_log": 517, "workdir_path": 517, "is_hidden": 518, "get_dataset_path": 518, "get_file_extens": 518, "lead": [518, 552, 566, 571, 572], "is_dataset_fil": 518, "normalize_domain": 518, "underscor": 518, "normalize_framework": 518, "normalize_str": 518, "string_to_norm": 518, "get_model_zoo_config_path": 518, "model_dict": 518, "get_model_zoo_model_path": 518, "check_modul": 518, "get_module_vers": 518, "add_unit": 518, "load_model_config": 518, "load_dataloader_config": 518, "load_transforms_config": 518, "load_transforms_filter_config": 518, "meaning": [518, 569], "load_precisions_config": 518, "get_default_pruning_config_path": 518, "load_model_wise_param": 518, "load_metrics_config": 518, "get_metrics_dict": 518, "load_help_nc_param": 518, "replace_with_valu": 518, "file_path": 518, "verify_file_path": 518, "determine_ip": 518, "ip": 518, "is_development_env": 518, "nc_mode": 518, "filter_transform": 518, "parse_bool_valu": 518, "release_tag": 518, "get_shape_from_transform": 518, "get_height_width_from_s": 518, "parse_to_string_list": 518, "parse_to_float_list": 518, "export_to_csv": 518, "parse_vers": 518, "string_vers": 518, "remove_dataload": 519, "datalad": 519, "remove_accuracy_metr": 519, "set_evaluation_dataload": 519, "udpat": 519, "set_evaluation_dataset_path": 519, "get_performance_config": 519, "set_performance_cores_per_inst": 519, "get_performance_cores_per_inst": 519, "set_performance_num_of_inst": 519, "num_of_inst": [519, 548, 574], "get_performance_num_of_inst": 519, "set_accuracy_and_performance_batch_s": 519, "set_quantization_dataload": 519, "set_quantization_dataset_path": 519, "set_quantization_batch_s": 519, "set_workspac": [519, 528], "set_accuracy_go": 519, "accuracy_go": 519, "set_accuracy_metr": 519, "set_transform": 519, "process_transform": 519, "set_quantization_approach": 519, "set_input": 519, "set_output": 519, "set_quantization_sampling_s": 519, "set_performance_warmup": 519, "warmup": [519, 574], "set_performance_iter": 519, "set_optimization_precis": 519, "yaml_path": 519, "is_dummi": 520, "labelbal": [520, 549, 550], "set_transforms_from_list": 520, "transforms_list": 520, "set_dataset": 520, "postprocessschema": 521, "get_label_shift_valu": 521, "set_accuracy_postprocess_transform": 521, "set_precis": [522, 524], "sgdoptim": 526, "adamwoptim": 526, "adamoptim": 526, "crossentropylosscriterion": 526, "sparsecategoricalcrossentropycriterion": 526, "knowledgedistillationlosscriterion": 526, "set_postprocess_transform": 526, "weightcompressionapproach": 526, "initialize_prun": 526, "pruner_dict_list": 526, "serialize_prun": 526, "parse_dict_value_to_float": 526, "parse_dict_value_to_int": 526, "wiseconfigdetail": 527, "wiseconfig": 527, "multiobject": 528, "acccriterion": 528, "exitpolici": 528, "set_timeout": 528, "set_max_tri": 528, "max_trial": [528, 555, 581], "trial": [528, 581], "set_performance_onli": 528, "set_random_se": 528, "float_represent": 529, "dumper": 529, "pruner_represent": 529, "outsid": 530, "create_simple_respons": 530, "gui": [530, 531, 535, 547, 562, 563], "messagequeu": 530, "queue": [530, 535], "post_failur": 530, "post_success": 530, "post_error": 530, "wait": 530, "global_config_directori": 531, "set_up": 531, "determine_values_from_environ": 531, "get_command_line_arg": 531, "determine_server_port": 531, "max_ports_tri": 531, "port_default": 531, "determine_gui_port": 531, "client": [531, 547], "server_port": 531, "unless": [531, 559], "is_port_taken": 531, "determine_log_level": 531, "determine_url_prefix": 531, "get_url": 531, "dump_token_to_fil": 531, "servicenotfoundexcept": 532, "unknown": 532, "connector": 534, "routingdefinit": 534, "rout": 534, "realtimeroutingdefinit": 534, "realtim": 534, "deferredroutingdefinit": 534, "deferredsubprocessroutingdefinit": 534, "spawn": 534, "get_system_info": 534, "endpoint": 535, "run_serv": 535, "webserv": 535, "get_tls_arg": 535, "tl": [535, 547], "block_ifram": 535, "werkzeug": [535, 543], "ifram": 535, "csp": 535, "block_snif": 535, "mime": 535, "snif": 535, "require_api_token": 535, "author": [535, 564], "handle_api_cal": 535, "subpath": 535, "allow_api_cal": 535, "page_not_found": 535, "disable_cach": 535, "build_paramet": 535, "flask": [535, 547], "web_socket_publish": 535, "web_socket": 535, "flask_socketio": 535, "socketio": [535, 547], "benchmarkservic": 536, "workloadservic": [536, 540, 541, 544], "historysnapshotpars": 537, "history_snapshot": 537, "provide_perform": 537, "parse_history_snapshot": 537, "parse_history_item": 537, "history_item": 537, "extract_accuraci": 537, "extract_perform": 537, "modelservic": 539, "optimizationservic": 540, "profilingservic": 541, "generate_csv": 541, "processor": [542, 566, 570, 573, 575, 576, 583], "requestdataprocessor": 542, "get_string_valu": 542, "responsegener": 543, "serve_from_filesystem": 543, "mimetyp": 543, "as_attach": 543, "add_refresh": 543, "refresh_tim": 543, "refresh": 543, "from_except": 543, "get_status_code_for_except": 543, "get_code_templ": 544, "get_output": 544, "asymmetr": [546, 575, 581], "conda": [547, 558, 563, 577], "forg": [547, 558, 563], "setup": [547, 559, 563], "ui": 547, "5000": 547, "338174d13706855fc6924cec7b3a8ae8": 547, "listen": 547, "firewal": 547, "8080": 547, "cert": 547, "path_to_cert": 547, "crt": 547, "path_to_private_kei": 547, "encrypt": 547, "insecur": 547, "expos": 547, "forfeit": 547, "threat": 547, "button": [547, 562], "pop": 547, "recognit": [547, 554, 579], "finish": 547, "synthet": 547, "plu": 547, "icon": 547, "section": [547, 552, 571, 574, 582], "unfold": 547, "On": [547, 575], "panel": 547, "navig": 547, "trash": 547, "visibl": 547, "cursor": 547, "prompt": [547, 554], "confirm": 547, "revers": 547, "exit": [547, 555, 566, 582], "pencil": 547, "light": [547, 553], "blue": 547, "color": 547, "row": [547, 571, 572], "arrow": 547, "checkbox": 547, "chart": [547, 575, 578, 579], "offer": [547, 550], "conveni": 547, "variat": 547, "yellow": 547, "warn": 547, "remind": 547, "dialog": 547, "cryptographi": 547, "centercrop": [548, 580], "totensor": [548, 580], "485": [548, 583], "456": 548, "406": 548, "enough": [548, 575], "benchmarkconf": 548, "lpot": [548, 573, 577], "often": [549, 552, 569, 571, 572], "encount": 549, "consum": 549, "lack": 549, "faster": [549, 551, 573, 583], "hard": 549, "treat": 549, "post_training_static_qu": [549, 550, 555, 574, 581], "output_model": [549, 579], "customis": [549, 550], "ensp": [550, 565, 580], "imagerecord": [550, 554, 582], "image_nam": 550, "cocorecord": 550, "gt": [550, 557, 580], "float16": 550, "int64": 550, "style_transf": 550, "content": 550, "tfrecorddataset": 550, "helloworld": [550, 580], "aid": 551, "infrastructur": 551, "deploi": [552, 581], "power": [552, 570], "mobil": [552, 583], "workflow": [552, 563, 566, 579], "produc": 552, "softmax": 552, "l": [552, 579, 581], "kd": 552, "kullback": 552, "leibler": 552, "patient": 552, "compact": [552, 571, 572], "ia": 552, "attach": 552, "shallow": 552, "deepest": 552, "deeper": 552, "10006": 552, "distillationconf": 552, "blendcnn": [552, 583], "loss_sum": 552, "iter_bar": 552, "tqdm": 552, "desc": [552, 571], "teacher_logit": 552, "huge": [553, 572], "bit": [553, 566, 573, 575], "heavi": 553, "booster": 553, "degrad": 553, "retrain": [553, 571, 572], "incorpor": [553, 581], "novel": 553, "horovod": 554, "builtin": 554, "program": [554, 564, 566], "addition": [554, 581], "enable_eager_execut": 554, "yaml_file_path": 554, "evaluation_time_cost": 554, "partit": 554, "distributedsampl": 554, "train_sampl": 554, "train_dataset": 554, "num_replica": 554, "train_kwarg": 554, "adadelta": 554, "distributedoptim": 554, "named_paramet": 554, "broadcast_paramet": 554, "root_rank": 554, "broadcast_optimizer_st": 554, "set_epoch": 554, "batch_idx": 554, "nll_loss": 554, "log_interv": 554, "0f": 554, "tloss": 554, "6f": 554, "dry_run": 554, "test_func": 554, "host": 554, "num_of_process": 554, "002": 554, "ssh": 554, "readm": 554, "exactli": 554, "resnet50_v1": 554, "resizecropimagenet": [554, 580], "realiz": [554, 565, 568, 576, 578], "tow": 554, "situat": 554, "node1": 554, "node2": 554, "TO": 554, "your_node1_nam": 554, "your_node2_nam": 554, "resnet50_fp32_pretrained_model": 554, "nc_resnet50_v1": 554, "factor": [555, 570, 583], "oppos": 555, "entail": 555, "post_training_dynamic_qu": [555, 574, 581], "accuracy_criterion": [555, 568, 574, 581, 582], "rel": [555, 574, 581, 582, 583], "earli": [555, 575, 581, 582], "determinist": 555, "wide": [556, 566, 572, 575], "varieti": [556, 574, 581], "demonstr": [556, 571, 579], "exchang": 557, "hope": 557, "briefli": [557, 571], "matur": 557, "major": [557, 560, 575], "reus": 557, "torch2onnxconfig": 557, "inc_model": [557, 567], "fp32_onnx_config": 557, "randn": 557, "int8_onnx_config": 557, "matmulintegertofloat": 557, "matmulinteg": 557, "incompat": 558, "88": [558, 578, 583], "80": [558, 579, 583], "pyobject": 558, "reinstal": 558, "importerror": 558, "libgl": 558, "apt": [558, 563], "yum": [558, 563], "opencv": 558, "conflict": 558, "pend": 558, "27": [558, 563, 583], "quick": [559, 582], "friendli": [559, 582], "let": [559, 574, 582], "syntax": 559, "up1": 559, "up2": 559, "valid_mixed_precis": 559, "concatv2": 559, "avgpool": 559, "per_tensor": [559, 582], "addn": 559, "grappler_optim": 559, "constfold": 559, "debug_stripp": 559, "concept": [560, 578], "custom_metr": 560, "explicitli": 560, "refin": 560, "broad": 562, "snippet": 562, "upload": 562, "qintegerop": [562, 575], "plan": [562, 566], "uninstal": 563, "frequent": 563, "ask": 563, "consolid": 563, "eas": [563, 573], "streamlin": 563, "scienc": 563, "anaconda": 563, "suit": [563, 579], "esri": 563, "apach": 564, "softwar": [564, 566, 570, 573, 577], "copyright": 564, "accompani": 564, "wish": 564, "bibtex": 564, "misc": 564, "feng": 564, "tian": 564, "hanwen": 564, "haihao": 564, "shen": 564, "suyu": 564, "chen": 564, "titl": 564, "howpublish": 564, "year": 564, "logo": [564, 570], "atom": 564, "phi": 564, "pentium": 564, "vtune": 564, "corpor": [564, 570], "subsidiari": [564, 570], "brand": [564, 570], "claim": [564, 570], "popularli": 565, "label_map": 565, "decis": 565, "ap": 565, "curv": 565, "target_boxes_num": 565, "str_label": 565, "int_label": 565, "inturn": 565, "cocomap": 565, "vocmap": 565, "categor": 565, "multiclass": 565, "multilabel": 565, "multi_metr": 565, "higher_is_bett": [565, 568, 581, 582], "newmetr": 565, "reflect": [565, 570, 580], "recent": 566, "growth": 566, "complex": [566, 572], "bfloat16": [566, 576], "half": 566, "sixteen": 566, "bandwidth": 566, "launch": 566, "3rd": [566, 573, 575, 576], "gen": [566, 573, 576], "codenam": 566, "avx512": [566, 575], "vcvtne2ps2bf16": 566, "vcvtneps2bf16": 566, "vdpbf16p": 566, "user_defined_funct": 566, "avx512_bf16": 566, "consequ": 566, "persist": 567, "brought": [567, 575], "tf2": 567, "h5": 567, "onnx_ml_pb2": 567, "hybridblock": 567, "0000": 567, "saved_result": 567, "multi_object": 568, "peak": 568, "start_tim": 568, "_result_list": 568, "customobj": 568, "simultan": [569, 574], "arbitrari": 569, "gain": [569, 573], "benefit": [569, 571], "Of": 569, "cours": 569, "prune_conf": 569, "post_training_quantization_conf": 569, "quantization_aware_training_conf": 569, "configurationintel": 570, "platinum": [570, 583], "8380": [570, 583], "manufactur": 570, "m50cyp2sbstd": 570, "se5c6200": 570, "86b": 570, "0022": 570, "d64": 570, "2105220049": 570, "microcod": 570, "0xd0002b1": 570, "30ghz": 570, "3ghz": 570, "40": [570, 582, 583], "perf": 570, "256gb": 570, "16x16gb": 570, "ddr4": 570, "3200mt": 570, "nic": 570, "ethernet": 570, "10g": 570, "x550t": 570, "drive": 570, "1x": 570, "intel_ssdsc2kw01": 570, "953": 570, "9g": 570, "ct1000mx500ssd1": 570, "931": 570, "5g": 570, "publicli": 570, "degre": 570, "mark": 570, "trademark": 570, "art": [571, 572], "increasingli": [571, 572], "crucial": [571, 572], "salient": [571, 572], "nonzero": [571, 572], "irregular": [571, 572], "anywher": [571, 572], "2in4": 571, "amper": 571, "ic": [571, 573], "oc": 571, "kh": 571, "kw": 571, "fastform": 571, "finetun": [571, 572, 583], "downstream": [571, 572], "formula": [571, 572], "num_train_epoch": 571, "pbar": 571, "progressbar": 571, "n_total": 571, "n_gpu": 571, "gradient_accumulation_step": 571, "clip_grad_norm_": 571, "max_grad_norm": 571, "rate": [571, 575], "cv": [571, 572], "grown": 572, "unpreced": 572, "smooth": 572, "discourag": 572, "namhoon": 572, "lee": 572, "thalaiyasingam": 572, "ajanthan": 572, "philip": 572, "torr": 572, "2019": 572, "plug": 573, "twitter": 573, "linkedin": 573, "zone": 573, "hug": 573, "land": 573, "gcp": 573, "aw": [573, 583], "azur": 573, "marketplac": 573, "pat": 573, "keynot": 573, "intelon": 573, "sep": 573, "alibaba": 573, "chines": 573, "aug": 573, "purif": 573, "sacrif": 573, "jun": 573, "partner": 573, "democrat": 573, "apr": 573, "ecosystem": 573, "mar": 573, "feb": 573, "sigopt": 573, "jan": 573, "bilibili": 573, "ml": 573, "doubl": 573, "mlperf": 573, "reconstruct": 573, "abound": 573, "cern": 573, "gan": 573, "3dgan": 573, "4th": 573, "iml": 573, "workshop": 573, "highli": 573, "intelcaff": 573, "aris": 574, "advantag": 574, "tell": 574, "henc": 574, "quant_aware_train": 574, "op_type_list": [574, 581], "use_bf16": [574, 576], "weight_compress": [574, 582], "initial_spars": [574, 582], "prune_typ": [574, 582], "basic_magnitud": [574, 582], "start_epoch": [574, 582], "end_epoch": [574, 582], "update_frequ": 574, "prune_domain": 574, "tile_pattern_1x1": 574, "inter_num_of_thread": 574, "intra_num_of_thread": 574, "graph_optimization_level": 574, "disable_al": 574, "veri": [575, 581], "invent": 575, "int4": 575, "cost": 575, "theoret": 575, "affin": 575, "zeropoint": 575, "overflow": 575, "solv": [575, 577], "unseen": 575, "peopl": 575, "emul": 575, "pain": 575, "lossi": 575, "understand": [575, 579], "philosophi": 575, "val_dataset": 575, "val_dataload": 575, "worker": 575, "ping_memori": 575, "enhanc": 576, "bf16wrapper": 576, "retrac": 576, "site": 577, "assist": 577, "comparison": [577, 579], "sed": 577, "your_script": 577, "visual": [578, 579, 581], "hyperparamet": [578, 581], "backbon": 578, "interact": 578, "sigopt_api_token": [578, 581], "sigopt_project_id": [578, 581], "sigopt_experiment_id": 578, "nc": [578, 581], "login": 578, "certain": 578, "suffici": 578, "ordinari": 578, "capac": 578, "sigopt_experiment_nam": [578, 581], "receiv": 578, "tuning_criterion": [578, 581], "tuningcriterion": [578, 581], "strategy_kwarg": [578, 581], "analysi": 578, "8266": 578, "8372": 578, "2132": 578, "83": [578, 583], "7495": 578, "8299": 578, "8294": 578, "85": [578, 583], "0837": 578, "8291": 578, "4469": 578, "discov": 579, "why": 579, "valuabl": 579, "instrument": 579, "writer": 579, "_pre_eval_hook": 579, "submodul": 579, "whitelist": 579, "_recordingobserv": 579, "output_tensors_dict": 579, "current_it": 579, "get_tensor_valu": 579, "_observer_forward_hook": 579, "_add_observer_": 579, "named_children": 579, "leaf": 579, "add_modul": 579, "register_forward_hook": 579, "dump_tim": 579, "summarywrit": 579, "_acc": 579, "tune_": 579, "add_graph": 579, "get_observer_dict": 579, "observer_dict": 579, "is_quant": 579, "add_histogram": 579, "bind_al": 579, "logdir_spec": 579, "tune_0_acc0": 579, "tune_1": 579, "tune_1_acc0": 579, "79": [579, 583], "four": 579, "baseline_acc_0": 579, "776": 579, "tune_1_acc_0": 579, "095": 579, "runs_v3": 579, "image_recognit": 579, "run_tuning_dump_tensor": 579, "sh": 579, "inceptionv3": 579, "v0": 579, "cg": 579, "conv0": 579, "op_wis": [579, 582], "bash": 579, "run_tun": 579, "topologi": 579, "inception_v3": 579, "dataset_loc": 579, "inceptionv3_fp32_pretrained_model": 579, "nc_inceptionv3": 579, "inceptionv3_dump_tensor": 579, "poor": 579, "disappear": 579, "randomresizedcrop": 580, "randomcrop": 580, "cropres": 580, "decodeimag": 580, "jpeg": 580, "encodejp": 580, "alignimagechannel": 580, "68": [580, 583], "116": 580, "78": [580, 583], "103": 580, "94": [580, 583], "017": 580, "bilinearimagenet": [580, 582], "topilimag": 580, "padding_mod": 580, "border": 580, "colorjitt": 580, "bright": 580, "satur": 580, "hue": 580, "jitter": 580, "tondarrai": 580, "human": 581, "op_name_list": 581, "tolerable_loss": 581, "quant_level": 581, "post_training_auto_qu": 581, "ii": 581, "iii": 581, "classic": 581, "idea": 581, "primari": 581, "spent": 581, "hawq_v2_loss": 581, "model_loss": 581, "compli": 581, "focu": 581, "short": 581, "never": 581, "loglevel": 581, "endlessli": 581, "perspect": 581, "smbo": 581, "appl": 581, "surrog": 581, "quantil": 581, "x1": 581, "x2": 581, "densiti": 581, "parzen": 581, "greatest": 581, "hour": 581, "dai": 581, "abctunestrategi": 581, "overridden": 581, "mobilenet_v1": 582, "onnxrt_integ": 582, "onnxrt_qlinear": 582, "image_tensor": 582, "subsect": 582, "model_wis": 582, "conv1": 582, "hyper": 582, "06": [582, 583], "beta_1": 582, "beta_2": 582, "999": 582, "epsilon": 582, "sparsecategoricalcrossentropi": 582, "reduct": 582, "sum_over_batch_s": 582, "from_logit": 582, "54": [582, 583], "19": [582, 583], "90": [582, 583], "nesterov": 582, "weight_decai": 582, "overal": 582, "ye": 583, "rnn": 583, "unet": 583, "performancethroughput": 583, "sec": 583, "efficientnet": 583, "91": 583, "43": 583, "69": 583, "32x": 583, "cnn": 583, "incept": 583, "37": 583, "65": 583, "38": 583, "77": 583, "53": 583, "57x": 583, "46": 583, "61": 583, "58x": 583, "resnet101": 583, "39": 583, "63": 583, "11x": 583, "51x": 583, "26": 583, "59": 583, "23": 583, "06x": 583, "25x": 583, "70": 583, "44": 583, "00": 583, "163": 583, "133": 583, "22x": 583, "73": 583, "97": 583, "49": 583, "111": 583, "20x": 583, "v3": 583, "43x": 583, "v4": 583, "18": 583, "56": 583, "53x": 583, "36": 583, "33x": 583, "44x": 583, "374": 583, "226": 583, "66x": 583, "92": 583, "41x": 583, "fashion": 583, "359": 583, "244": 583, "47x": 583, "172": 583, "66": 583, "98x": 583, "153": 583, "76x": 583, "151": 583, "112": 583, "35x": 583, "26x": 583, "72": 583, "99": 583, "56x": 583, "82": 583, "93x": 583, "vgg16": 583, "89": 583, "178": 583, "14x": 583, "vgg19": 583, "156": 583, "18x": 583, "albert": 583, "23x": 583, "barthez": 583, "81": 583, "86": 583, "82x": 583, "203": 583, "01x": 583, "216": 583, "102": 583, "10x": 583, "sst2": 583, "218": 583, "stsb": 583, "57": 583, "48": 583, "49x": 583, "93": 583, "70x": 583, "50x": 583, "40x": 583, "3878": 583, "3717": 583, "04x": 583, "camembert": 583, "188": 583, "91x": 583, "ctrl": 583, "deberta": 583, "124": 583, "81x": 583, "347": 583, "73x": 583, "382": 583, "198": 583, "flaubert": 583, "561": 583, "35": 583, "370": 583, "52x": 583, "hubert": 583, "84": 583, "36x": 583, "409": 583, "181": 583, "longform": 583, "28x": 583, "mbart": 583, "16x": 583, "639": 583, "490": 583, "31x": 583, "lvwerra": 583, "pegasu": 583, "samsum": 583, "19x": 583, "peleenet": 583, "419": 583, "316": 583, "resnet18": 583, "686": 583, "332": 583, "07x": 583, "611": 583, "333": 583, "83x": 583, "327": 583, "162": 583, "resnext101_32x8d": 583, "175": 583, "88x": 583, "197": 583, "99x": 583, "se_resnext50_32x4d": 583, "308": 583, "144": 583, "13x": 583, "squeezebert": 583, "186": 583, "155": 583, "78x": 583, "transfo": 583, "xl": 583, "37x": 583, "wave2vec2": 583, "60": 583, "58": 583, "21x": 583, "114": 583, "15x": 583, "yolo": 583, "29x": 583, "690": 583, "330": 583, "09x": 583, "614": 583, "334": 583, "84x": 583, "54x": 583, "410": 583, "168": 583, "resnext101_32x16d_wsl": 583, "1189": 583, "680": 583, "75x": 583, "677": 583, "381": 583, "59x": 583, "alexnet": 583, "960": 583, "469": 583, "05x": 583, "962": 583, "466": 583, "arcfac": 583, "235": 583, "130": 583, "294": 583, "34x": 583, "604": 583, "51": 583, "80x": 583, "caffenet": 583, "1501": 583, "536": 583, "1493": 583, "533": 583, "1372": 583, "541": 583, "480": 583, "1250": 583, "753": 583, "1130": 583, "748": 583, "emot": 583, "ferplu": 583, "336": 583, "65x": 583, "fcn": 583, "googlenet": 583, "740": 583, "587": 583, "770": 583, "567": 583, "824": 583, "601": 583, "819": 583, "597": 583, "45x": 583, "613": 583, "506": 583, "2454": 583, "1543": 583, "2164": 583, "1564": 583, "38x": 583, "2147": 583, "1046": 583, "1877": 583, "1054": 583, "mobilenetv2": 583, "2751": 583, "1797": 583, "2656": 583, "1835": 583, "7615": 583, "7646": 583, "764": 583, "901": 583, "434": 583, "141": 583, "7614": 583, "575": 583, "952": 583, "433": 583, "7226": 583, "7229": 583, "761": 583, "432": 583, "615": 583, "722": 583, "032": 583, "894": 583, "885": 583, "454": 583, "95x": 583, "603": 583, "455": 583, "644": 583, "636": 583, "254": 583, "791": 583, "shufflenet": 583, "2298": 583, "55": 583, "1480": 583, "55x": 583, "1951": 583, "1490": 583, "squeezenet": 583, "2588": 583, "1605": 583, "61x": 583, "2566": 583, "1936": 583, "725": 583, "570": 583, "27x": 583, "666": 583, "539": 583, "641": 583, "519": 583, "633": 583, "492": 583, "542": 583, "401": 583, "68x": 583, "tini": 583, "yolov3": 583, "648": 583, "518": 583, "221": 583, "319": 583, "307": 583, "30x": 583, "yolov4": 583, "zfnet": 583, "459": 583, "261": 583, "460": 583, "264": 583, "74x": 583, "441": 583, "337": 583, "272": 583, "211": 583, "152": 583, "423": 583, "180": 583, "311": 583, "69x": 583, "taskdataset": 583, "accuracyspars": 583, "ratiospars": 583, "commentsbalanc": 583, "unbalanc": 583, "classificationimagenet": 583, "76top": 583, "13top": 583, "magnitudepost": 583, "magnitudequant": 583, "answeringsquad": 583, "34f1": 583, "2x1": 583, "lassounbalanc": 583, "classificationmnli": 583, "mm": 583, "allbalanc": 583, "classificationsst": 583, "32accuraci": 583, "sensitivitybalanc": 583, "classificationqqp": 583, "classificationqnli": 583, "54accuraci": 583, "em": 583, "87f1": 583, "momentumunbalanc": 583, "momentumbalanc": 583, "classificationmrpc": 583, "52f1": 583, "61accuraci": 583, "7965": 583, "wideresnet40": 583, "9522": 583, "8178": 583, "0213": 583, "8235": 583, "027": 583, "5494": 583, "7153": 583, "5540": 583, "0046": 583, "5523": 583, "0029": 583, "vgg": 583, "7022": 583, "7415": 583, "7025": 583, "0003": 583, "6739": 583, "7399": 583, "6845": 583, "0106": 583, "7034": 583, "8382": 583, "bilstm": 583, "sst": 583, "8314": 583, "9403": 583, "9048": 583, "0734": 583, "7323": 583, "8256": 583, "8084": 583, "8814": 583, "7442": 583, "8371": 583, "0119": 583, "0115": 583, "tinybert": 583, "8018": 583, "8044": 583, "8363": 583, "8411": 583, "8025": 583, "8074": 583, "0007": 583, "0030": 583, "8626": 583, "8213": 583, "9091": 583, "8782": 583, "8684": 583, "8259": 583, "0058": 583, "distilroberta": 583, "6057": 583, "6455": 583, "6187": 583, "0130": 583, "c6i": 583, "2xlarg": 583, "c6a": 583, "c6g": 583, "a100cuda": 583}, "objects": {"": [[34, 0, 0, "-", "644ec953a7dc_pruning_support"], [35, 0, 0, "-", "6ece06672ed3_v1_14"], [36, 0, 0, "-", "6f0d0f71d92e_v1_13"], [37, 0, 0, "-", "9e89549a08c8_v1_11"], [38, 0, 0, "-", "block_mask"], [39, 0, 0, "-", "env"], [302, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[35, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [35, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[39, 1, 1, "", "run_migrations_offline"], [39, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[302, 2, 1, "", "Benchmark"], [302, 2, 1, "", "DistillationConfig"], [302, 2, 1, "", "WeightPruningConfig"], [41, 0, 0, "-", "adaptor"], [178, 0, 0, "-", "algorithm"], [180, 0, 0, "-", "benchmark"], [183, 0, 0, "-", "conf"], [185, 0, 0, "-", "config"], [186, 0, 0, "-", "contrib"], [211, 0, 0, "-", "data"], [260, 0, 0, "-", "experimental"], [309, 0, 0, "-", "metric"], [311, 0, 0, "-", "mix_precision"], [313, 0, 0, "-", "model"], [321, 0, 0, "-", "objective"], [323, 0, 0, "-", "pruner"], [337, 0, 0, "-", "quantization"], [344, 0, 0, "-", "strategy"], [353, 0, 0, "-", "training"], [357, 0, 0, "-", "utils"], [499, 0, 0, "-", "ux"], [545, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[40, 0, 0, "-", "adaptor"], [42, 0, 0, "-", "keras"], [43, 0, 0, "-", "keras_utils"], [45, 0, 0, "-", "mxnet"], [46, 0, 0, "-", "mxnet_utils"], [48, 0, 0, "-", "onnxrt"], [50, 0, 0, "-", "ox_utils"], [73, 0, 0, "-", "pytorch"], [74, 0, 0, "-", "query"], [75, 0, 0, "-", "tensorflow"], [135, 0, 0, "-", "tf_utils"], [172, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[40, 2, 1, "", "Adaptor"], [40, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[40, 3, 1, "", "convert"], [40, 3, 1, "", "evaluate"], [40, 3, 1, "", "inspect_tensor"], [40, 3, 1, "", "quantize"], [40, 3, 1, "", "quantize_input"], [40, 3, 1, "", "query_fused_patterns"], [40, 3, 1, "", "query_fw_capability"], [40, 3, 1, "", "save"], [40, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[42, 2, 1, "", "KerasAdaptor"], [42, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[42, 3, 1, "", "convert"], [42, 3, 1, "", "evaluate"], [42, 3, 1, "", "get_optype_wise_ability"], [42, 3, 1, "", "inspect_tensor"], [42, 3, 1, "", "quantize"], [42, 3, 1, "", "quantize_input"], [42, 3, 1, "", "query_fw_capability"], [42, 3, 1, "", "save"], [42, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[42, 3, 1, "", "get_op_types"], [42, 3, 1, "", "get_op_types_by_precision"], [42, 3, 1, "", "get_precisions"], [42, 3, 1, "", "get_quantization_capability"], [42, 3, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[44, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[45, 2, 1, "", "MXNetQuery"], [45, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MXNetQuery": [[45, 3, 1, "", "get_fuse_patterns"], [45, 3, 1, "", "get_mixed_precision_combination"], [45, 3, 1, "", "get_op_types"], [45, 3, 1, "", "get_precisions"], [45, 3, 1, "", "get_quantization_capability"], [45, 3, 1, "", "get_version"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[45, 3, 1, "", "evaluate"], [45, 3, 1, "", "inspect_tensor"], [45, 3, 1, "", "quantize"], [45, 3, 1, "", "query_fw_capability"], [45, 3, 1, "", "recover_tuned_model"], [45, 3, 1, "", "save"], [45, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[47, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[47, 2, 1, "", "CalibCollector"], [47, 2, 1, "", "CollectorBase"], [47, 2, 1, "", "DataIterLoader"], [47, 2, 1, "", "DataLoaderWrap"], [47, 2, 1, "", "NameCollector"], [47, 2, 1, "", "OpType"], [47, 2, 1, "", "TensorCollector"], [47, 1, 1, "", "amp_convert"], [47, 1, 1, "", "calib_model"], [47, 1, 1, "", "check_mx_version"], [47, 1, 1, "", "combine_capabilities"], [47, 1, 1, "", "create_data_example"], [47, 1, 1, "", "distribute_calib_tensors"], [47, 1, 1, "", "ensure_list"], [47, 1, 1, "", "fuse"], [47, 1, 1, "", "get_framework_name"], [47, 1, 1, "", "is_model_quantized"], [47, 1, 1, "", "isiterable"], [47, 1, 1, "", "make_module"], [47, 1, 1, "", "make_nc_model"], [47, 1, 1, "", "make_symbol_block"], [47, 1, 1, "", "ndarray_to_device"], [47, 1, 1, "", "parse_tune_config"], [47, 1, 1, "", "prepare_dataloader"], [47, 1, 1, "", "prepare_model"], [47, 1, 1, "", "prepare_model_data"], [47, 1, 1, "", "quantize_sym_model"], [47, 1, 1, "", "query_quantizable_nodes"], [47, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.mxnet_utils.util.CalibCollector": [[47, 3, 1, "", "calc_kl_th_dict"], [47, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.CollectorBase": [[47, 3, 1, "", "collect_gluon"], [47, 3, 1, "", "collect_module"], [47, 3, 1, "", "post_batch"], [47, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.mxnet_utils.util.NameCollector": [[47, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.TensorCollector": [[47, 3, 1, "", "collect_gluon"], [47, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.onnxrt": [[48, 2, 1, "", "ONNXRTQuery"], [48, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [48, 2, 1, "", "ONNXRT_QDQAdaptor"], [48, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [48, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[48, 3, 1, "", "get_graph_optimization"], [48, 3, 1, "", "get_op_types"], [48, 3, 1, "", "get_op_types_by_precision"], [48, 3, 1, "", "get_precisions"], [48, 3, 1, "", "get_quantization_capability"], [48, 3, 1, "", "get_version"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[48, 3, 1, "", "evaluate"], [48, 3, 1, "", "inspect_tensor"], [48, 3, 1, "", "quantize"], [48, 3, 1, "", "query_fw_capability"], [48, 3, 1, "", "recover"], [48, 3, 1, "", "save"], [48, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.ox_utils": [[49, 0, 0, "-", "calibration"], [62, 0, 0, "-", "operators"], [71, 0, 0, "-", "quantizer"], [72, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[49, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[49, 3, 1, "", "augment_graph"], [49, 3, 1, "", "calculate_quantization_params"], [49, 3, 1, "", "calculate_scale_zeropoint"], [49, 3, 1, "", "dump_calibration"], [49, 3, 1, "", "dump_minmax"], [49, 3, 1, "", "dump_tensor"], [49, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[51, 0, 0, "-", "activation"], [52, 0, 0, "-", "argmax"], [53, 0, 0, "-", "attention"], [54, 0, 0, "-", "binary_op"], [55, 0, 0, "-", "concat"], [56, 0, 0, "-", "conv"], [57, 0, 0, "-", "direct_q8"], [58, 0, 0, "-", "embed_layernorm"], [59, 0, 0, "-", "gather"], [60, 0, 0, "-", "gavgpool"], [61, 0, 0, "-", "gemm"], [63, 0, 0, "-", "lstm"], [64, 0, 0, "-", "matmul"], [65, 0, 0, "-", "maxpool"], [66, 0, 0, "-", "ops"], [67, 0, 0, "-", "pad"], [68, 0, 0, "-", "pooling"], [69, 0, 0, "-", "resize"], [70, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[51, 2, 1, "", "ActivationOperator"], [51, 2, 1, "", "QActivationOperator"], [51, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator": [[51, 3, 1, "", "convert"], [51, 3, 1, "", "convert_check"], [51, 3, 1, "", "quantize"], [51, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator": [[51, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator": [[51, 3, 1, "", "quantize"], [51, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[52, 2, 1, "", "ArgMaxOperator"], [52, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator": [[52, 3, 1, "", "convert"], [52, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[53, 2, 1, "", "AttentionOperator"], [53, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator": [[53, 3, 1, "", "convert"], [53, 3, 1, "", "convert_check"], [53, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator": [[53, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[54, 2, 1, "", "BinaryOperator"], [54, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator": [[54, 3, 1, "", "convert"], [54, 3, 1, "", "convert_check"], [54, 3, 1, "", "quantize"], [54, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator": [[54, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[55, 2, 1, "", "ConcatOperator"], [55, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator": [[55, 3, 1, "", "cast"], [55, 3, 1, "", "convert"], [55, 3, 1, "", "convert_check"], [55, 3, 1, "", "quantize"], [55, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator": [[55, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[56, 2, 1, "", "ConvOperator"], [56, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator": [[56, 3, 1, "", "convert"], [56, 3, 1, "", "convert_check"], [56, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator": [[56, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[57, 2, 1, "", "Direct8BitOperator"], [57, 2, 1, "", "DirectCastOperator"], [57, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator": [[57, 3, 1, "", "cast"], [57, 3, 1, "", "convert"], [57, 3, 1, "", "convert_check"], [57, 3, 1, "", "quantize"], [57, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator": [[57, 3, 1, "", "cast"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[58, 2, 1, "", "EmbedLayerNormalizationOperator"], [58, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator": [[58, 3, 1, "", "convert"], [58, 3, 1, "", "convert_check"], [58, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator": [[58, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[59, 2, 1, "", "GatherOperator"], [59, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator": [[59, 3, 1, "", "convert"], [59, 3, 1, "", "convert_check"], [59, 3, 1, "", "quantize"], [59, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[60, 2, 1, "", "GlobalAveragePoolOperator"], [60, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator": [[60, 3, 1, "", "convert"], [60, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator": [[60, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[61, 2, 1, "", "GemmOperator"], [61, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator": [[61, 3, 1, "", "convert"], [61, 3, 1, "", "convert_check"], [61, 3, 1, "", "quantize"], [61, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator": [[61, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[63, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator": [[63, 3, 1, "", "convert"], [63, 3, 1, "", "convert_check"], [63, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[64, 2, 1, "", "MatMulOperator"], [64, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator": [[64, 3, 1, "", "convert"], [64, 3, 1, "", "convert_check"], [64, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator": [[64, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[65, 2, 1, "", "MaxPoolOperator"], [65, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator": [[65, 3, 1, "", "convert"], [65, 3, 1, "", "convert_check"], [65, 3, 1, "", "quantize"], [65, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[66, 2, 1, "", "Operator"], [66, 2, 1, "", "QOperator"], [66, 1, 1, "", "op_registry"], [66, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.ops.Operator": [[66, 3, 1, "", "cast"], [66, 3, 1, "", "convert"], [66, 3, 1, "", "convert_check"], [66, 3, 1, "", "quantize"], [66, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops.QOperator": [[66, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[67, 2, 1, "", "PadOperator"], [67, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator": [[67, 3, 1, "", "convert"], [67, 3, 1, "", "convert_check"], [67, 3, 1, "", "quantize"], [67, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[68, 2, 1, "", "PoolOperator"], [68, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator": [[68, 3, 1, "", "convert"], [68, 3, 1, "", "convert_check"], [68, 3, 1, "", "quantize"], [68, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator": [[68, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[69, 2, 1, "", "QResizeOperator"], [69, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator": [[69, 3, 1, "", "convert"], [69, 3, 1, "", "convert_check"], [69, 3, 1, "", "quantize"], [69, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[70, 2, 1, "", "QSplitOperator"], [70, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator": [[70, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator": [[70, 3, 1, "", "cast"], [70, 3, 1, "", "convert"], [70, 3, 1, "", "convert_check"], [70, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.quantizer": [[71, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer.Quantizer": [[71, 3, 1, "", "check_opset_version"], [71, 3, 1, "", "convert_qdq_to_operator_oriented"], [71, 3, 1, "", "dequantize_tensor"], [71, 3, 1, "", "dtype_cast"], [71, 3, 1, "", "get_bias_add_nodes"], [71, 3, 1, "", "insert_qdq"], [71, 3, 1, "", "is_valid_quantize_weight"], [71, 3, 1, "", "merge_dedicated_qdq_pair"], [71, 3, 1, "", "quantize_bias"], [71, 3, 1, "", "quantize_bias_tensor"], [71, 3, 1, "", "quantize_inputs"], [71, 3, 1, "", "quantize_model"], [71, 3, 1, "", "quantize_outputs"], [71, 3, 1, "", "quantize_weight_per_channel"], [71, 3, 1, "", "quantize_weights_per_channel"], [71, 3, 1, "", "remove_redundant_pairs"], [71, 3, 1, "", "should_cast"], [71, 3, 1, "", "should_convert"], [71, 3, 1, "", "should_quantize"], [71, 3, 1, "", "tensor_proto_to_array"]], "neural_compressor.adaptor.ox_utils.util": [[72, 2, 1, "", "QuantFormat"], [72, 2, 1, "", "QuantType"], [72, 2, 1, "", "QuantizationMode"], [72, 2, 1, "", "QuantizedInitializer"], [72, 2, 1, "", "QuantizedValue"], [72, 2, 1, "", "QuantizedValueType"], [72, 2, 1, "", "ValueInfo"], [72, 1, 1, "", "attribute_to_kwarg"], [72, 1, 1, "", "calculate_scale_zp"], [72, 1, 1, "", "cast_tensor"], [72, 1, 1, "", "collate_preds"], [72, 1, 1, "", "dequantize_data"], [72, 1, 1, "", "dequantize_data_with_scale_zero"], [72, 1, 1, "", "dtype_to_name"], [72, 1, 1, "", "find_by_name"], [72, 1, 1, "", "is_B_transposed"], [72, 1, 1, "", "make_dquant_node"], [72, 1, 1, "", "make_quant_node"], [72, 1, 1, "", "quantize_data"], [72, 1, 1, "", "quantize_data_per_channel"], [72, 1, 1, "", "quantize_data_with_scale_zero"], [72, 1, 1, "", "quantize_nparray"], [72, 1, 1, "", "remove_init_from_model_input"], [72, 1, 1, "", "split_shared_bias"]], "neural_compressor.adaptor.pytorch": [[73, 2, 1, "", "PyTorchAdaptor"], [73, 2, 1, "", "PyTorchQuery"], [73, 2, 1, "", "PyTorch_FXAdaptor"], [73, 2, 1, "", "PyTorch_IPEXAdaptor"], [73, 2, 1, "", "TemplateAdaptor"], [73, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[73, 3, 1, "", "evaluate"], [73, 3, 1, "", "get_non_quant_modules"], [73, 3, 1, "", "inspect_tensor"], [73, 3, 1, "", "is_fused_child"], [73, 3, 1, "", "is_fused_op"], [73, 3, 1, "", "is_last_fused_child"], [73, 3, 1, "", "quantize"], [73, 3, 1, "", "query_fw_capability"], [73, 3, 1, "", "save"], [73, 3, 1, "", "set_tensor"], [73, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[73, 3, 1, "", "get_op_types"], [73, 3, 1, "", "get_op_types_by_precision"], [73, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[73, 3, 1, "", "calculate_op_sensitivity"], [73, 3, 1, "", "convert_sub_graph"], [73, 3, 1, "", "evaluate"], [73, 3, 1, "", "fuse_fx_model"], [73, 3, 1, "", "prepare_sub_graph"], [73, 3, 1, "", "quantize"], [73, 3, 1, "", "query_fw_capability"], [73, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[73, 3, 1, "", "evaluate"], [73, 3, 1, "", "inspect_tensor"], [73, 3, 1, "", "quantize"], [73, 3, 1, "", "query_fw_capability"], [73, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[73, 3, 1, "", "calculate_hessian_trace"], [73, 3, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[74, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[74, 3, 1, "", "get_fuse_patterns"], [74, 3, 1, "", "get_mixed_precision_combination"], [74, 3, 1, "", "get_op_types"], [74, 3, 1, "", "get_precisions"], [74, 3, 1, "", "get_quantization_capability"], [74, 3, 1, "", "get_version"], [74, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[75, 2, 1, "", "TensorFlowAdaptor"], [75, 2, 1, "", "TensorflowQuery"], [75, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[75, 3, 1, "", "calculate_op_sensitivity"], [75, 3, 1, "", "convert"], [75, 3, 1, "", "evaluate"], [75, 3, 1, "", "fused_node_mapping"], [75, 3, 1, "", "get_optype_wise_ability"], [75, 3, 1, "", "inspect_activation"], [75, 3, 1, "", "inspect_tensor"], [75, 3, 1, "", "inspect_weight_and_bias"], [75, 3, 1, "", "qat_convert"], [75, 3, 1, "", "quantize"], [75, 3, 1, "", "quantize_input"], [75, 3, 1, "", "query_fw_capability"], [75, 3, 1, "", "recover_tuned_model"], [75, 3, 1, "", "save"], [75, 3, 1, "", "set_tensor"], [75, 3, 1, "", "tuning_cfg_to_fw"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[75, 3, 1, "", "generate_internal_patterns"], [75, 3, 1, "", "get_eightbit_patterns"], [75, 3, 1, "", "get_fuse_patterns"], [75, 3, 1, "", "get_mixed_precision_combination"], [75, 3, 1, "", "get_op_types"], [75, 3, 1, "", "get_op_types_by_precision"], [75, 3, 1, "", "get_precisions"], [75, 3, 1, "", "get_quantization_capability"], [75, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[75, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[76, 0, 0, "-", "graph_converter"], [77, 0, 0, "-", "graph_converter_without_calib"], [116, 0, 0, "-", "graph_rewriter"], [134, 0, 0, "-", "graph_util"], [136, 0, 0, "-", "quantize_graph"], [163, 0, 0, "-", "quantize_graph_common"], [166, 0, 0, "-", "transform_graph"], [169, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[79, 0, 0, "-", "bf16"], [104, 0, 0, "-", "generic"], [115, 0, 0, "-", "graph_base"], [124, 0, 0, "-", "int8"], [130, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[78, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[78, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[78, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[80, 0, 0, "-", "convert_add_to_biasadd"], [81, 0, 0, "-", "convert_layout"], [82, 0, 0, "-", "convert_leakyrelu"], [83, 0, 0, "-", "convert_nan_to_random"], [84, 0, 0, "-", "convert_placeholder_to_const"], [85, 0, 0, "-", "dequantize_cast_optimizer"], [86, 0, 0, "-", "dilated_contraction"], [87, 0, 0, "-", "dummy_biasadd"], [88, 0, 0, "-", "expanddims_optimizer"], [89, 0, 0, "-", "fetch_weight_from_reshape"], [90, 0, 0, "-", "fold_batch_norm"], [91, 0, 0, "-", "fold_constant"], [92, 0, 0, "-", "fuse_biasadd_add"], [93, 0, 0, "-", "fuse_column_wise_mul"], [94, 0, 0, "-", "fuse_conv_with_math"], [95, 0, 0, "-", "fuse_decomposed_bn"], [96, 0, 0, "-", "fuse_decomposed_in"], [97, 0, 0, "-", "fuse_gelu"], [98, 0, 0, "-", "fuse_layer_norm"], [99, 0, 0, "-", "fuse_pad_with_conv"], [100, 0, 0, "-", "fuse_pad_with_fp32_conv"], [101, 0, 0, "-", "fuse_reshape_transpose"], [102, 0, 0, "-", "graph_cse_optimizer"], [103, 0, 0, "-", "grappler_pass"], [105, 0, 0, "-", "insert_print_node"], [106, 0, 0, "-", "move_squeeze_after_relu"], [107, 0, 0, "-", "pre_optimize"], [108, 0, 0, "-", "remove_training_nodes"], [109, 0, 0, "-", "rename_batch_norm"], [110, 0, 0, "-", "split_shared_input"], [111, 0, 0, "-", "strip_equivalent_nodes"], [112, 0, 0, "-", "strip_unused_nodes"], [113, 0, 0, "-", "switch_optimizer"], [114, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[80, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[80, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[81, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[81, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[82, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[82, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[83, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[83, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[84, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[84, 3, 1, "", "do_transformation"], [84, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[85, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[85, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[86, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[86, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[87, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[87, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[88, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[89, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[89, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[90, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[90, 3, 1, "", "do_transformation"], [90, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[91, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[91, 3, 1, "", "check_all_folded"], [91, 3, 1, "", "check_const_inputs"], [91, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[92, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[92, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[93, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[93, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[94, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[94, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[95, 1, 1, "", "get_const_dim_count"], [95, 1, 1, "", "node_from_map"], [95, 1, 1, "", "node_name_from_input"], [95, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[96, 1, 1, "", "get_const_dim_count"], [96, 1, 1, "", "node_from_map"], [96, 1, 1, "", "node_name_from_input"], [96, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[97, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[97, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[98, 2, 1, "", "FuseLayerNormOptimizer"], [98, 1, 1, "", "node_from_map"], [98, 1, 1, "", "node_name_from_input"], [98, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[98, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[99, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[99, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[100, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[100, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[101, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[101, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[102, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[102, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[103, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[103, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[105, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[105, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[106, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[106, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[108, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[108, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[109, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[109, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[110, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[110, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[111, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[111, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[112, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[112, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[113, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[113, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[114, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[114, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[115, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[115, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[117, 0, 0, "-", "freeze_fake_quant"], [118, 0, 0, "-", "freeze_value"], [119, 0, 0, "-", "freeze_value_without_calib"], [120, 0, 0, "-", "fuse_conv_redundant_dequantize"], [121, 0, 0, "-", "fuse_conv_requantize"], [122, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [123, 0, 0, "-", "fuse_matmul_requantize"], [125, 0, 0, "-", "meta_op_optimizer"], [126, 0, 0, "-", "post_hostconst_converter"], [127, 0, 0, "-", "post_quantized_op_cse"], [128, 0, 0, "-", "rnn_convert"], [129, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[117, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[117, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[118, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[118, 3, 1, "", "do_transformation"], [118, 3, 1, "", "generate_output_graph"], [118, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[119, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[119, 3, 1, "", "generate_output_graph"], [119, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[120, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[120, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[121, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[121, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[122, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[122, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[123, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [123, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [123, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [123, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[123, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[123, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[123, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[123, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[125, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[125, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[126, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[126, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[127, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[127, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[128, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[128, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[129, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[129, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[131, 0, 0, "-", "insert_qdq_pattern"], [132, 0, 0, "-", "merge_duplicated_qdq"], [133, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[131, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[131, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[132, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[132, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[133, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[133, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[134, 2, 1, "", "GraphAnalyzer"], [134, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[134, 3, 1, "", "add_node"], [134, 3, 1, "", "dump_graph"], [134, 3, 1, "", "get_graph_input_output"], [134, 4, 1, "", "graph"], [134, 3, 1, "", "has_positive_input"], [134, 3, 1, "", "parse_graph"], [134, 3, 1, "", "query_fusion_pattern_nodes"], [134, 3, 1, "", "remove_node"], [134, 3, 1, "", "remove_node_with_single_input_output"], [134, 3, 1, "", "replace_const_node"], [134, 3, 1, "", "replace_constant_graph_with_constant_node"], [134, 3, 1, "", "replace_node"], [134, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[134, 3, 1, "", "compare_node_attr"], [134, 3, 1, "", "create_constant_node"], [134, 3, 1, "", "create_node"], [134, 3, 1, "", "node_name_from_input"], [134, 3, 1, "", "set_attr_bool"], [134, 3, 1, "", "set_attr_dtype"], [134, 3, 1, "", "set_attr_float"], [134, 3, 1, "", "set_attr_int"], [134, 3, 1, "", "set_attr_int_list"], [134, 3, 1, "", "set_attr_string"], [134, 3, 1, "", "set_attr_string_list"], [134, 3, 1, "", "set_attr_tensor"], [134, 3, 1, "", "set_attr_type_list"], [134, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[138, 0, 0, "-", "qat"], [154, 0, 0, "-", "qdq"], [156, 0, 0, "-", "quantize_graph_base"], [157, 0, 0, "-", "quantize_graph_bn"], [158, 0, 0, "-", "quantize_graph_concatv2"], [159, 0, 0, "-", "quantize_graph_conv"], [160, 0, 0, "-", "quantize_graph_for_intel_cpu"], [161, 0, 0, "-", "quantize_graph_matmul"], [162, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[137, 0, 0, "-", "fake_quantize"], [139, 0, 0, "-", "quantize_config"], [140, 0, 0, "-", "quantize_helper"], [141, 0, 0, "-", "quantize_layers"], [146, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[137, 2, 1, "", "FakeQuantize"], [137, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[137, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[137, 3, 1, "", "from_config"], [137, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[139, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[139, 3, 1, "", "add_quantize_recipe"], [139, 3, 1, "", "clear_quantize_recipe"], [139, 3, 1, "", "get_quantize_recipe"], [139, 3, 1, "", "is_empty"], [139, 3, 1, "", "query_layer"], [139, 3, 1, "", "remove_layer"], [139, 3, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[140, 1, 1, "", "init_quantize_config"], [140, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[142, 0, 0, "-", "optimize_layer"], [143, 0, 0, "-", "quantize_layer_add"], [144, 0, 0, "-", "quantize_layer_base"], [145, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[143, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[145, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[146, 2, 1, "", "QuantizeWrapper"], [146, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[146, 3, 1, "", "build"], [146, 3, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[146, 3, 1, "", "build"], [146, 3, 1, "", "call"], [146, 3, 1, "", "compute_output_shape"], [146, 3, 1, "", "from_config"], [146, 3, 1, "", "get_config"], [146, 4, 1, "", "losses"], [146, 4, 1, "", "non_trainable_weights"], [146, 3, 1, "", "query_input_index"], [146, 4, 1, "", "trainable"], [146, 4, 1, "", "trainable_weights"], [146, 4, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[147, 0, 0, "-", "fuse_qdq_bn"], [148, 0, 0, "-", "fuse_qdq_concatv2"], [149, 0, 0, "-", "fuse_qdq_conv"], [150, 0, 0, "-", "fuse_qdq_deconv"], [151, 0, 0, "-", "fuse_qdq_in"], [152, 0, 0, "-", "fuse_qdq_matmul"], [153, 0, 0, "-", "fuse_qdq_pooling"], [155, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[147, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[147, 3, 1, "", "apply_the_transform"], [147, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[148, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[148, 3, 1, "", "apply_the_transform"], [148, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[149, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[149, 3, 1, "", "apply_the_transform"], [149, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[150, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[150, 3, 1, "", "apply_the_transform"], [150, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[151, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[151, 3, 1, "", "apply_the_transform"], [151, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[152, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[152, 3, 1, "", "apply_batchmatmulv2_fusion"], [152, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [152, 3, 1, "", "apply_matmul_biasadd_fusion"], [152, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [152, 3, 1, "", "apply_the_transform"], [152, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[153, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[153, 3, 1, "", "apply_the_transform"], [153, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[155, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[155, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[156, 2, 1, "", "QuantizeGraphBase"], [156, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[156, 3, 1, "", "do_transform"], [156, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[156, 3, 1, "", "add_output_graph_node"], [156, 3, 1, "", "apply_the_transform"], [156, 3, 1, "", "create_nodes_map"], [156, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[157, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[157, 3, 1, "", "apply_the_transform"], [157, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[158, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[158, 3, 1, "", "apply_the_transform"], [158, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[159, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[159, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [159, 3, 1, "", "apply_the_transform"], [159, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[160, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[160, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[161, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[161, 3, 1, "", "apply_the_transform"], [161, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[162, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[162, 3, 1, "", "apply_the_transform"], [162, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[163, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[163, 3, 1, "", "copy_attr"], [163, 3, 1, "", "create_constant_node"], [163, 3, 1, "", "create_node"], [163, 3, 1, "", "ensure_tensor_name_has_port"], [163, 3, 1, "", "get_sorted_graph"], [163, 3, 1, "", "node_name_from_input"], [163, 3, 1, "", "remove_training_nodes"], [163, 3, 1, "", "set_attr_bool"], [163, 3, 1, "", "set_attr_dtype"], [163, 3, 1, "", "set_attr_float"], [163, 3, 1, "", "set_attr_int"], [163, 3, 1, "", "set_attr_string"], [163, 3, 1, "", "set_attr_string_list"], [163, 3, 1, "", "set_attr_tensor"], [163, 3, 1, "", "set_attr_type_list"], [163, 3, 1, "", "split_shared_inputs"], [163, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[164, 0, 0, "-", "bias_correction"], [165, 0, 0, "-", "graph_transform_base"], [167, 0, 0, "-", "insert_logging"], [168, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[164, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[164, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[167, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[167, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[168, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[168, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[169, 1, 1, "", "disable_random"], [169, 1, 1, "", "get_tensor_by_name"], [169, 1, 1, "", "get_tensor_val_from_graph_node"], [169, 1, 1, "", "is_ckpt_format"], [169, 1, 1, "", "is_saved_model_format"], [169, 1, 1, "", "iterator_sess_run"], [169, 1, 1, "", "read_graph"], [169, 1, 1, "", "strip_equivalent_nodes"], [169, 1, 1, "", "strip_unused_nodes"], [169, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[170, 0, 0, "-", "bf16_convert"], [171, 0, 0, "-", "hawq_metric"], [173, 0, 0, "-", "onnx"], [174, 0, 0, "-", "symbolic_trace"], [175, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[171, 2, 1, "", "HessianTrace"], [171, 1, 1, "", "compare_weights"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[171, 3, 1, "", "get_act_gap"], [171, 3, 1, "", "get_avg_traces"], [171, 3, 1, "", "is_fused_module"], [171, 3, 1, "", "mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.util": [[175, 1, 1, "", "append_attr"], [175, 1, 1, "", "get_embedding_contiguous"], [175, 1, 1, "", "get_mse_order_per_fp32"], [175, 1, 1, "", "is_fused_module"]], "neural_compressor.algorithm": [[178, 2, 1, "", "ALGORITHMS"], [178, 2, 1, "", "Algorithm"], [178, 2, 1, "", "AlgorithmScheduler"], [176, 0, 0, "-", "algorithm"], [178, 1, 1, "", "algorithm_registry"], [177, 0, 0, "-", "fast_bias_correction"], [179, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.ALGORITHMS": [[178, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.AlgorithmScheduler": [[178, 4, 1, "", "adaptor"], [178, 4, 1, "", "calib_iter"], [178, 4, 1, "", "dataloader"], [178, 4, 1, "", "origin_model"], [178, 4, 1, "", "q_model"]], "neural_compressor.algorithm.algorithm": [[176, 2, 1, "", "ALGORITHMS"], [176, 2, 1, "", "Algorithm"], [176, 2, 1, "", "AlgorithmScheduler"], [176, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.algorithm.ALGORITHMS": [[176, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.algorithm.AlgorithmScheduler": [[176, 4, 1, "", "adaptor"], [176, 4, 1, "", "calib_iter"], [176, 4, 1, "", "dataloader"], [176, 4, 1, "", "origin_model"], [176, 4, 1, "", "q_model"]], "neural_compressor.algorithm.fast_bias_correction": [[177, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[179, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[180, 2, 1, "", "Benchmark"], [180, 1, 1, "", "fit"]], "neural_compressor.conf": [[181, 0, 0, "-", "config"], [182, 0, 0, "-", "dotdict"], [184, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[181, 2, 1, "", "Benchmark_Conf"], [181, 2, 1, "", "Conf"], [181, 2, 1, "", "DefaultConf"], [181, 2, 1, "", "Distillation_Conf"], [181, 2, 1, "", "Graph_Optimization_Conf"], [181, 2, 1, "", "MixedPrecision_Conf"], [181, 2, 1, "", "NASConfig"], [181, 2, 1, "", "PrunerV2"], [181, 2, 1, "", "Pruning_Conf"], [181, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[182, 2, 1, "", "DotDict"], [182, 1, 1, "", "deep_get"], [182, 1, 1, "", "deep_set"]], "neural_compressor.config": [[185, 2, 1, "", "DistillationConfig"], [185, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[187, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[188, 0, 0, "-", "sigopt"], [189, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[188, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[188, 3, 1, "", "next_tune_cfg"], [188, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[189, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[189, 3, 1, "", "stop"], [189, 3, 1, "", "traverse"]], "neural_compressor.data": [[211, 2, 1, "", "BaseTransform"], [211, 2, 1, "", "DataLoader"], [211, 2, 1, "", "Dataset"], [211, 2, 1, "", "Datasets"], [211, 2, 1, "", "FILTERS"], [211, 2, 1, "", "Filter"], [211, 2, 1, "", "IterableDataset"], [211, 2, 1, "", "Postprocess"], [211, 2, 1, "", "TRANSFORMS"], [194, 0, 0, "-", "dataloaders"], [211, 1, 1, "", "dataset_registry"], [206, 0, 0, "-", "datasets"], [211, 1, 1, "", "filter_registry"], [210, 0, 0, "-", "filters"], [211, 1, 1, "", "transform_registry"], [214, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[211, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[194, 2, 1, "", "DataLoader"], [190, 0, 0, "-", "base_dataloader"], [191, 0, 0, "-", "dataloader"], [192, 0, 0, "-", "default_dataloader"], [193, 0, 0, "-", "fetcher"], [195, 0, 0, "-", "mxnet_dataloader"], [196, 0, 0, "-", "onnxrt_dataloader"], [197, 0, 0, "-", "pytorch_dataloader"], [198, 0, 0, "-", "sampler"], [199, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[190, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[190, 3, 1, "", "batch"], [190, 4, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[191, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[192, 2, 1, "", "DefaultDataLoader"], [192, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[192, 3, 1, "", "batch"], [192, 4, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[193, 2, 1, "", "Fetcher"], [193, 2, 1, "", "IndexFetcher"], [193, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[195, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[196, 2, 1, "", "ONNXRTBertDataLoader"], [196, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[197, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[198, 2, 1, "", "BatchSampler"], [198, 2, 1, "", "IterableSampler"], [198, 2, 1, "", "Sampler"], [198, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[199, 2, 1, "", "TFDataDataLoader"], [199, 2, 1, "", "TensorflowBertDataLoader"], [199, 2, 1, "", "TensorflowDataLoader"], [199, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[199, 3, 1, "", "batch"]], "neural_compressor.data.datasets": [[206, 2, 1, "", "Dataset"], [206, 2, 1, "", "Datasets"], [206, 2, 1, "", "IterableDataset"], [200, 0, 0, "-", "bert_dataset"], [201, 0, 0, "-", "coco_dataset"], [202, 0, 0, "-", "dataset"], [206, 1, 1, "", "dataset_registry"], [203, 0, 0, "-", "dummy_dataset"], [204, 0, 0, "-", "dummy_dataset_v2"], [205, 0, 0, "-", "imagenet_dataset"], [207, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[200, 2, 1, "", "InputFeatures"], [200, 2, 1, "", "ONNXRTBertDataset"], [200, 2, 1, "", "ParseDecodeBert"], [200, 2, 1, "", "PytorchBertDataset"], [200, 2, 1, "", "TensorflowBertDataset"], [200, 2, 1, "", "TensorflowModelZooBertDataset"], [200, 1, 1, "", "convert_examples_to_features"], [200, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[200, 3, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[201, 2, 1, "", "COCONpy"], [201, 2, 1, "", "COCORaw"], [201, 2, 1, "", "COCORecordDataset"], [201, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[202, 2, 1, "", "CIFAR10"], [202, 2, 1, "", "CIFAR100"], [202, 2, 1, "", "Dataset"], [202, 2, 1, "", "Datasets"], [202, 2, 1, "", "FashionMNIST"], [202, 2, 1, "", "ImageFolder"], [202, 2, 1, "", "IterableDataset"], [202, 2, 1, "", "MNIST"], [202, 2, 1, "", "MXNetCIFAR10"], [202, 2, 1, "", "MXNetCIFAR100"], [202, 2, 1, "", "MXNetDatasets"], [202, 2, 1, "", "MXNetFashionMNIST"], [202, 2, 1, "", "MXNetImageFolder"], [202, 2, 1, "", "MXNetMNIST"], [202, 2, 1, "", "ONNXRTITDatasets"], [202, 2, 1, "", "ONNXRTQLDatasets"], [202, 2, 1, "", "PyTorchDatasets"], [202, 2, 1, "", "PytorchCIFAR10"], [202, 2, 1, "", "PytorchCIFAR100"], [202, 2, 1, "", "PytorchFashionMNIST"], [202, 2, 1, "", "PytorchMNIST"], [202, 2, 1, "", "PytorchMxnetWrapDataset"], [202, 2, 1, "", "PytorchMxnetWrapFunction"], [202, 2, 1, "", "TensorflowCIFAR10"], [202, 2, 1, "", "TensorflowCIFAR100"], [202, 2, 1, "", "TensorflowDatasets"], [202, 2, 1, "", "TensorflowFashionMNIST"], [202, 2, 1, "", "TensorflowImageFolder"], [202, 2, 1, "", "TensorflowImageRecord"], [202, 2, 1, "", "TensorflowMNIST"], [202, 2, 1, "", "TensorflowTFRecordDataset"], [202, 2, 1, "", "TensorflowVOCRecord"], [202, 1, 1, "", "calculate_md5"], [202, 1, 1, "", "check_integrity"], [202, 1, 1, "", "dataset_registry"], [202, 1, 1, "", "download_url"], [202, 5, 1, "", "framework_datasets"], [202, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[202, 3, 1, "", "download"], [202, 3, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[202, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[202, 4, 1, "", "class_to_idx"], [202, 3, 1, "", "download"], [202, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[203, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[204, 2, 1, "", "DummyDataset"], [204, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[205, 2, 1, "", "ImagenetRaw"], [205, 2, 1, "", "MXNetImagenetRaw"], [205, 2, 1, "", "ONNXRTImagenetDataset"], [205, 2, 1, "", "PytorchImagenetRaw"], [205, 2, 1, "", "TensorflowImagenetDataset"], [205, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[207, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[210, 2, 1, "", "FILTERS"], [210, 2, 1, "", "Filter"], [208, 0, 0, "-", "coco_filter"], [209, 0, 0, "-", "filter"], [210, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[208, 2, 1, "", "LabelBalanceCOCORawFilter"], [208, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[209, 2, 1, "", "FILTERS"], [209, 2, 1, "", "Filter"], [209, 2, 1, "", "MXNetFilters"], [209, 2, 1, "", "ONNXRTITFilters"], [209, 2, 1, "", "ONNXRTQLFilters"], [209, 2, 1, "", "PyTorchFilters"], [209, 2, 1, "", "TensorflowFilters"], [209, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[214, 2, 1, "", "BaseTransform"], [214, 2, 1, "", "Postprocess"], [214, 2, 1, "", "TRANSFORMS"], [212, 0, 0, "-", "coco_transform"], [213, 0, 0, "-", "imagenet_transform"], [215, 0, 0, "-", "postprocess"], [216, 0, 0, "-", "tokenization"], [217, 0, 0, "-", "transform"], [214, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TRANSFORMS": [[214, 3, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[212, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[213, 2, 1, "", "BilinearImagenetTransform"], [213, 2, 1, "", "LabelShift"], [213, 2, 1, "", "ONNXResizeCropImagenetTransform"], [213, 2, 1, "", "OnnxBilinearImagenetTransform"], [213, 2, 1, "", "ParseDecodeImagenet"], [213, 2, 1, "", "ParseDecodeImagenetTransform"], [213, 2, 1, "", "QuantizedInput"], [213, 2, 1, "", "ResizeWithAspectRatio"], [213, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[215, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[216, 2, 1, "", "BasicTokenizer"], [216, 2, 1, "", "FullTokenizer"], [216, 2, 1, "", "WordpieceTokenizer"], [216, 1, 1, "", "convert_by_vocab"], [216, 1, 1, "", "convert_to_unicode"], [216, 1, 1, "", "load_vocab"], [216, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[216, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[216, 3, 1, "", "convert_ids_to_tokens"], [216, 3, 1, "", "convert_tokens_to_ids"], [216, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[216, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[217, 2, 1, "", "AlignImageChannelTransform"], [217, 2, 1, "", "BaseTransform"], [217, 2, 1, "", "CastONNXTransform"], [217, 2, 1, "", "CastPyTorchTransform"], [217, 2, 1, "", "CastTFTransform"], [217, 2, 1, "", "CenterCropTFTransform"], [217, 2, 1, "", "CenterCropTransform"], [217, 2, 1, "", "CollectTransform"], [217, 2, 1, "", "ComposeTransform"], [217, 2, 1, "", "CropResizeTFTransform"], [217, 2, 1, "", "CropResizeTransform"], [217, 2, 1, "", "CropToBoundingBox"], [217, 2, 1, "", "InputFeatures"], [217, 2, 1, "", "MXNetCropResizeTransform"], [217, 2, 1, "", "MXNetCropToBoundingBox"], [217, 2, 1, "", "MXNetNormalizeTransform"], [217, 2, 1, "", "MXNetTransforms"], [217, 2, 1, "", "MXNetTranspose"], [217, 2, 1, "", "NormalizeTFTransform"], [217, 2, 1, "", "NormalizeTransform"], [217, 2, 1, "", "ONNXRTCropToBoundingBox"], [217, 2, 1, "", "ONNXRTITTransforms"], [217, 2, 1, "", "ONNXRTQLTransforms"], [217, 2, 1, "", "PaddedCenterCropTransform"], [217, 2, 1, "", "ParseDecodeVocTransform"], [217, 2, 1, "", "PyTorchAlignImageChannel"], [217, 2, 1, "", "PyTorchCropResizeTransform"], [217, 2, 1, "", "PyTorchNormalizeTransform"], [217, 2, 1, "", "PyTorchTransforms"], [217, 2, 1, "", "PyTorchTranspose"], [217, 2, 1, "", "PytorchMxnetTransform"], [217, 2, 1, "", "PytorchMxnetWrapFunction"], [217, 2, 1, "", "RandomCropTFTransform"], [217, 2, 1, "", "RandomCropTransform"], [217, 2, 1, "", "RandomHorizontalFlip"], [217, 2, 1, "", "RandomResizedCropMXNetTransform"], [217, 2, 1, "", "RandomResizedCropPytorchTransform"], [217, 2, 1, "", "RandomResizedCropTFTransform"], [217, 2, 1, "", "RandomResizedCropTransform"], [217, 2, 1, "", "RandomVerticalFlip"], [217, 2, 1, "", "RescaleKerasPretrainTransform"], [217, 2, 1, "", "RescaleTFTransform"], [217, 2, 1, "", "RescaleTransform"], [217, 2, 1, "", "ResizeMXNetTransform"], [217, 2, 1, "", "ResizePytorchTransform"], [217, 2, 1, "", "ResizeTFTransform"], [217, 2, 1, "", "ResizeTransform"], [217, 2, 1, "", "ResizeWithRatio"], [217, 2, 1, "", "SquadExample"], [217, 2, 1, "", "TFModelZooCollectTransform"], [217, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [217, 2, 1, "", "TFSquadV1PostTransform"], [217, 2, 1, "", "TRANSFORMS"], [217, 2, 1, "", "TensorflowCropToBoundingBox"], [217, 2, 1, "", "TensorflowRandomHorizontalFlip"], [217, 2, 1, "", "TensorflowRandomVerticalFlip"], [217, 2, 1, "", "TensorflowResizeWithRatio"], [217, 2, 1, "", "TensorflowTransform"], [217, 2, 1, "", "TensorflowTransforms"], [217, 2, 1, "", "TensorflowTranspose"], [217, 2, 1, "", "TensorflowWrapFunction"], [217, 2, 1, "", "ToArray"], [217, 2, 1, "", "ToNDArrayTransform"], [217, 2, 1, "", "Transforms"], [217, 2, 1, "", "Transpose"], [217, 1, 1, "", "convert_examples_to_features"], [217, 1, 1, "", "get_final_text"], [217, 1, 1, "", "get_torchvision_map"], [217, 1, 1, "", "read_squad_examples"], [217, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[217, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[217, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[217, 3, 1, "", "get_postprocess_result"], [217, 3, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[217, 3, 1, "", "register"]], "neural_compressor.experimental": [[260, 2, 1, "", "Benchmark"], [260, 2, 1, "", "Component"], [260, 2, 1, "", "Distillation"], [260, 2, 1, "", "Graph_Optimization"], [260, 2, 1, "", "MixedPrecision"], [260, 2, 1, "", "ModelConversion"], [260, 2, 1, "", "NAS"], [260, 2, 1, "", "Pruning"], [260, 2, 1, "", "Quantization"], [218, 0, 0, "-", "benchmark"], [221, 0, 0, "-", "common"], [227, 0, 0, "-", "component"], [249, 0, 0, "-", "data"], [254, 0, 0, "-", "distillation"], [255, 0, 0, "-", "export"], [259, 0, 0, "-", "graph_optimization"], [267, 0, 0, "-", "metric"], [269, 0, 0, "-", "mixed_precision"], [270, 0, 0, "-", "model_conversion"], [283, 0, 0, "-", "nas"], [287, 0, 0, "-", "pruning"], [288, 0, 0, "-", "pruning_recipes"], [292, 0, 0, "-", "pruning_v2"], [293, 0, 0, "-", "pytorch_pruner"], [300, 0, 0, "-", "quantization"], [301, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[260, 4, 1, "", "b_dataloader"], [260, 4, 1, "", "b_func"], [260, 3, 1, "", "config_instance"], [260, 3, 1, "", "generate_prefix"], [260, 4, 1, "", "metric"], [260, 4, 1, "", "model"], [260, 4, 1, "", "postprocess"], [260, 4, 1, "", "results"], [260, 3, 1, "", "run_instance"], [260, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[260, 4, 1, "", "eval_dataloader"], [260, 4, 1, "", "eval_func"], [260, 3, 1, "", "execute"], [260, 4, 1, "", "model"], [260, 3, 1, "", "on_after_compute_loss"], [260, 3, 1, "", "on_after_eval"], [260, 3, 1, "", "on_after_optimizer_step"], [260, 3, 1, "", "on_batch_begin"], [260, 3, 1, "", "on_batch_end"], [260, 3, 1, "", "on_before_eval"], [260, 3, 1, "", "on_before_optimizer_step"], [260, 3, 1, "", "on_epoch_begin"], [260, 3, 1, "", "on_epoch_end"], [260, 3, 1, "", "on_post_grad"], [260, 3, 1, "", "on_step_begin"], [260, 3, 1, "", "on_step_end"], [260, 3, 1, "", "on_train_begin"], [260, 3, 1, "", "on_train_end"], [260, 3, 1, "", "post_epoch_end"], [260, 3, 1, "", "post_process"], [260, 3, 1, "", "pre_epoch_begin"], [260, 3, 1, "", "pre_process"], [260, 3, 1, "", "prepare"], [260, 3, 1, "", "prepare_qat"], [260, 3, 1, "", "register_hook"], [260, 4, 1, "", "train_dataloader"], [260, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[260, 6, 1, "", "_epoch_ran"], [260, 6, 1, "", "best_model"], [260, 6, 1, "", "best_score"], [260, 3, 1, "", "create_criterion"], [260, 3, 1, "", "create_optimizer"], [260, 4, 1, "", "criterion"], [260, 6, 1, "", "eval_frequency"], [260, 4, 1, "", "evaluation_distributed"], [260, 3, 1, "", "execute"], [260, 3, 1, "", "generate_hooks"], [260, 3, 1, "", "init_train_cfg"], [260, 3, 1, "", "on_post_forward"], [260, 4, 1, "", "optimizer"], [260, 3, 1, "", "pre_process"], [260, 3, 1, "", "prepare"], [260, 4, 1, "", "student_model"], [260, 4, 1, "", "teacher_model"], [260, 4, 1, "", "train_cfg"], [260, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[260, 3, 1, "", "dataset"], [260, 4, 1, "", "eval_dataloader"], [260, 4, 1, "", "eval_func"], [260, 4, 1, "", "input"], [260, 4, 1, "", "metric"], [260, 4, 1, "", "model"], [260, 4, 1, "", "output"], [260, 4, 1, "", "postprocess"], [260, 4, 1, "", "precisions"], [260, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[260, 4, 1, "", "precisions"], [260, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[260, 3, 1, "", "dataset"], [260, 4, 1, "", "destination"], [260, 4, 1, "", "eval_dataloader"], [260, 4, 1, "", "eval_func"], [260, 4, 1, "", "metric"], [260, 4, 1, "", "model"], [260, 4, 1, "", "postprocess"], [260, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[260, 6, 1, "", "conf"], [260, 4, 1, "", "evaluation_distributed"], [260, 3, 1, "", "execute"], [260, 3, 1, "", "generate_hooks"], [260, 3, 1, "", "generate_pruners"], [260, 3, 1, "", "get_sparsity_ratio"], [260, 3, 1, "", "pre_process"], [260, 3, 1, "", "prepare"], [260, 6, 1, "", "pruners"], [260, 4, 1, "", "pruning_func"], [260, 4, 1, "", "train_distributed"], [260, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.Quantization": [[260, 4, 1, "", "calib_dataloader"], [260, 3, 1, "", "dataset"], [260, 3, 1, "", "execute"], [260, 4, 1, "", "metric"], [260, 4, 1, "", "model"], [260, 4, 1, "", "objective"], [260, 4, 1, "", "postprocess"], [260, 3, 1, "", "pre_process"], [260, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[218, 2, 1, "", "Benchmark"], [218, 1, 1, "", "get_architecture"], [218, 1, 1, "", "get_bounded_threads"], [218, 1, 1, "", "get_core_ids"], [218, 1, 1, "", "get_physical_ids"], [218, 1, 1, "", "get_threads"], [218, 1, 1, "", "get_threads_per_core"], [218, 1, 1, "", "set_all_env_var"], [218, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[218, 4, 1, "", "b_dataloader"], [218, 4, 1, "", "b_func"], [218, 3, 1, "", "config_instance"], [218, 3, 1, "", "generate_prefix"], [218, 4, 1, "", "metric"], [218, 4, 1, "", "model"], [218, 4, 1, "", "postprocess"], [218, 4, 1, "", "results"], [218, 3, 1, "", "run_instance"], [218, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[221, 2, 1, "", "DataLoader"], [221, 2, 1, "", "Metric"], [221, 2, 1, "", "Model"], [221, 2, 1, "", "Postprocess"], [219, 0, 0, "-", "criterion"], [220, 0, 0, "-", "dataloader"], [222, 0, 0, "-", "metric"], [223, 0, 0, "-", "model"], [224, 0, 0, "-", "optimizer"], [225, 0, 0, "-", "postprocess"], [226, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[219, 2, 1, "", "Criterions"], [219, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [219, 2, 1, "", "KnowledgeDistillationFramework"], [219, 2, 1, "", "KnowledgeDistillationLoss"], [219, 2, 1, "", "PyTorchCriterions"], [219, 2, 1, "", "PyTorchCrossEntropyLoss"], [219, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [219, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [219, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [219, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [219, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [219, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [219, 2, 1, "", "SelfKnowledgeDistillationLoss"], [219, 2, 1, "", "TensorFlowCrossEntropyLoss"], [219, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [219, 2, 1, "", "TensorflowCriterions"], [219, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [219, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [219, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [219, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[219, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[219, 3, 1, "", "clear_features"], [219, 3, 1, "", "init_feature_matcher"], [219, 3, 1, "", "init_loss_funcs"], [219, 3, 1, "", "loss_cal"], [219, 3, 1, "", "loss_cal_sloss"], [219, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[219, 4, 1, "", "student_model"], [219, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[219, 3, 1, "", "loss_cal"], [219, 3, 1, "", "loss_cal_sloss"], [219, 3, 1, "", "student_targets_loss_cal"], [219, 3, 1, "", "teacher_model_forward"], [219, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[219, 3, 1, "", "init_feature_matcher"], [219, 3, 1, "", "init_loss_funcs"], [219, 3, 1, "", "loss_cal"], [219, 3, 1, "", "loss_cal_sloss"], [219, 3, 1, "", "register_hooks_for_models"], [219, 3, 1, "", "remove_all_hooks"], [219, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[219, 3, 1, "", "KullbackLeiblerDivergence"], [219, 3, 1, "", "SoftCrossEntropy"], [219, 3, 1, "", "student_targets_loss_cal"], [219, 3, 1, "", "teacher_model_forward"], [219, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[219, 3, 1, "", "KullbackLeiblerDivergence"], [219, 3, 1, "", "L2Divergence"], [219, 3, 1, "", "SoftCrossEntropy"], [219, 3, 1, "", "init_loss_funcs"], [219, 3, 1, "", "loss_cal"], [219, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[219, 3, 1, "", "init_loss_funcs"], [219, 3, 1, "", "loss_cal"], [219, 3, 1, "", "loss_cal_sloss"], [219, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[219, 3, 1, "", "SoftCrossEntropy"], [219, 3, 1, "", "student_targets_loss_cal"], [219, 3, 1, "", "teacher_model_forward"], [219, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[219, 3, 1, "", "student_targets_loss_cal"], [219, 3, 1, "", "teacher_model_forward"], [219, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[220, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[222, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[223, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[224, 2, 1, "", "Optimizers"], [224, 2, 1, "", "PyTorchOptimizers"], [224, 2, 1, "", "PyTorchSGD"], [224, 2, 1, "", "TensorFlowAdam"], [224, 2, 1, "", "TensorFlowAdamW"], [224, 2, 1, "", "TensorFlowSGD"], [224, 2, 1, "", "TensorflowOptimizers"], [224, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[224, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[225, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[226, 1, 1, "", "get_activation"], [226, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[227, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[227, 4, 1, "", "eval_dataloader"], [227, 4, 1, "", "eval_func"], [227, 3, 1, "", "execute"], [227, 4, 1, "", "model"], [227, 3, 1, "", "on_after_compute_loss"], [227, 3, 1, "", "on_after_eval"], [227, 3, 1, "", "on_after_optimizer_step"], [227, 3, 1, "", "on_batch_begin"], [227, 3, 1, "", "on_batch_end"], [227, 3, 1, "", "on_before_eval"], [227, 3, 1, "", "on_before_optimizer_step"], [227, 3, 1, "", "on_epoch_begin"], [227, 3, 1, "", "on_epoch_end"], [227, 3, 1, "", "on_post_grad"], [227, 3, 1, "", "on_step_begin"], [227, 3, 1, "", "on_step_end"], [227, 3, 1, "", "on_train_begin"], [227, 3, 1, "", "on_train_end"], [227, 3, 1, "", "post_epoch_end"], [227, 3, 1, "", "post_process"], [227, 3, 1, "", "pre_epoch_begin"], [227, 3, 1, "", "pre_process"], [227, 3, 1, "", "prepare"], [227, 3, 1, "", "prepare_qat"], [227, 3, 1, "", "register_hook"], [227, 4, 1, "", "train_dataloader"], [227, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[249, 2, 1, "", "BaseTransform"], [249, 2, 1, "", "Dataset"], [249, 2, 1, "", "Datasets"], [249, 2, 1, "", "FILTERS"], [249, 2, 1, "", "Filter"], [249, 2, 1, "", "IterableDataset"], [249, 2, 1, "", "TRANSFORMS"], [232, 0, 0, "-", "dataloaders"], [249, 1, 1, "", "dataset_registry"], [244, 0, 0, "-", "datasets"], [249, 1, 1, "", "filter_registry"], [248, 0, 0, "-", "filters"], [249, 1, 1, "", "transform_registry"], [251, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[249, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[228, 0, 0, "-", "base_dataloader"], [229, 0, 0, "-", "dataloader"], [230, 0, 0, "-", "default_dataloader"], [231, 0, 0, "-", "fetcher"], [233, 0, 0, "-", "mxnet_dataloader"], [234, 0, 0, "-", "onnxrt_dataloader"], [235, 0, 0, "-", "pytorch_dataloader"], [236, 0, 0, "-", "sampler"], [237, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[228, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[228, 3, 1, "", "batch"], [228, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[230, 2, 1, "", "DefaultDataLoader"], [230, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[230, 3, 1, "", "batch"], [230, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[231, 2, 1, "", "Fetcher"], [231, 2, 1, "", "IndexFetcher"], [231, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[233, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[234, 2, 1, "", "ONNXRTBertDataLoader"], [234, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[235, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[236, 2, 1, "", "BatchSampler"], [236, 2, 1, "", "IterableSampler"], [236, 2, 1, "", "Sampler"], [236, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[237, 2, 1, "", "TFDataDataLoader"], [237, 2, 1, "", "TensorflowBertDataLoader"], [237, 2, 1, "", "TensorflowDataLoader"], [237, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[237, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[244, 2, 1, "", "Dataset"], [244, 2, 1, "", "Datasets"], [244, 2, 1, "", "IterableDataset"], [238, 0, 0, "-", "bert_dataset"], [239, 0, 0, "-", "coco_dataset"], [240, 0, 0, "-", "dataset"], [244, 1, 1, "", "dataset_registry"], [241, 0, 0, "-", "dummy_dataset"], [242, 0, 0, "-", "dummy_dataset_v2"], [243, 0, 0, "-", "imagenet_dataset"], [245, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[238, 2, 1, "", "InputFeatures"], [238, 2, 1, "", "ONNXRTBertDataset"], [238, 2, 1, "", "ParseDecodeBert"], [238, 2, 1, "", "PytorchBertDataset"], [238, 2, 1, "", "TensorflowBertDataset"], [238, 2, 1, "", "TensorflowModelZooBertDataset"], [238, 1, 1, "", "convert_examples_to_features"], [238, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[238, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[239, 2, 1, "", "COCONpy"], [239, 2, 1, "", "COCORaw"], [239, 2, 1, "", "COCORecordDataset"], [239, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[240, 2, 1, "", "CIFAR10"], [240, 2, 1, "", "CIFAR100"], [240, 2, 1, "", "Dataset"], [240, 2, 1, "", "Datasets"], [240, 2, 1, "", "FashionMNIST"], [240, 2, 1, "", "ImageFolder"], [240, 2, 1, "", "IterableDataset"], [240, 2, 1, "", "MNIST"], [240, 2, 1, "", "MXNetCIFAR10"], [240, 2, 1, "", "MXNetCIFAR100"], [240, 2, 1, "", "MXNetDatasets"], [240, 2, 1, "", "MXNetFashionMNIST"], [240, 2, 1, "", "MXNetImageFolder"], [240, 2, 1, "", "MXNetMNIST"], [240, 2, 1, "", "ONNXRTITDatasets"], [240, 2, 1, "", "ONNXRTQLDatasets"], [240, 2, 1, "", "PyTorchDatasets"], [240, 2, 1, "", "PytorchCIFAR10"], [240, 2, 1, "", "PytorchCIFAR100"], [240, 2, 1, "", "PytorchFashionMNIST"], [240, 2, 1, "", "PytorchMNIST"], [240, 2, 1, "", "PytorchMxnetWrapDataset"], [240, 2, 1, "", "PytorchMxnetWrapFunction"], [240, 2, 1, "", "TensorflowCIFAR10"], [240, 2, 1, "", "TensorflowCIFAR100"], [240, 2, 1, "", "TensorflowDatasets"], [240, 2, 1, "", "TensorflowFashionMNIST"], [240, 2, 1, "", "TensorflowImageFolder"], [240, 2, 1, "", "TensorflowImageRecord"], [240, 2, 1, "", "TensorflowMNIST"], [240, 2, 1, "", "TensorflowTFRecordDataset"], [240, 2, 1, "", "TensorflowVOCRecord"], [240, 1, 1, "", "calculate_md5"], [240, 1, 1, "", "check_integrity"], [240, 1, 1, "", "dataset_registry"], [240, 1, 1, "", "download_url"], [240, 5, 1, "", "framework_datasets"], [240, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[240, 3, 1, "", "download"], [240, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[240, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[240, 4, 1, "", "class_to_idx"], [240, 3, 1, "", "download"], [240, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[241, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[242, 2, 1, "", "DummyDataset"], [242, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[243, 2, 1, "", "ImagenetRaw"], [243, 2, 1, "", "MXNetImagenetRaw"], [243, 2, 1, "", "ONNXRTImagenetDataset"], [243, 2, 1, "", "PytorchImagenetRaw"], [243, 2, 1, "", "TensorflowImagenetDataset"], [243, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[245, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[248, 2, 1, "", "FILTERS"], [248, 2, 1, "", "Filter"], [246, 0, 0, "-", "coco_filter"], [247, 0, 0, "-", "filter"], [248, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[246, 2, 1, "", "LabelBalanceCOCORawFilter"], [246, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[247, 2, 1, "", "FILTERS"], [247, 2, 1, "", "Filter"], [247, 2, 1, "", "MXNetFilters"], [247, 2, 1, "", "ONNXRTITFilters"], [247, 2, 1, "", "ONNXRTQLFilters"], [247, 2, 1, "", "PyTorchFilters"], [247, 2, 1, "", "TensorflowFilters"], [247, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[251, 2, 1, "", "BaseTransform"], [251, 2, 1, "", "TRANSFORMS"], [250, 0, 0, "-", "imagenet_transform"], [252, 0, 0, "-", "tokenization"], [253, 0, 0, "-", "transform"], [251, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[251, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[250, 2, 1, "", "BilinearImagenetTransform"], [250, 2, 1, "", "LabelShift"], [250, 2, 1, "", "ONNXResizeCropImagenetTransform"], [250, 2, 1, "", "OnnxBilinearImagenetTransform"], [250, 2, 1, "", "ParseDecodeImagenet"], [250, 2, 1, "", "ParseDecodeImagenetTransform"], [250, 2, 1, "", "QuantizedInput"], [250, 2, 1, "", "ResizeWithAspectRatio"], [250, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[252, 2, 1, "", "BasicTokenizer"], [252, 2, 1, "", "FullTokenizer"], [252, 2, 1, "", "WordpieceTokenizer"], [252, 1, 1, "", "convert_by_vocab"], [252, 1, 1, "", "convert_to_unicode"], [252, 1, 1, "", "load_vocab"], [252, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[252, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[252, 3, 1, "", "convert_ids_to_tokens"], [252, 3, 1, "", "convert_tokens_to_ids"], [252, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[252, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[253, 2, 1, "", "AlignImageChannelTransform"], [253, 2, 1, "", "BaseTransform"], [253, 2, 1, "", "CastONNXTransform"], [253, 2, 1, "", "CastPyTorchTransform"], [253, 2, 1, "", "CastTFTransform"], [253, 2, 1, "", "CenterCropTFTransform"], [253, 2, 1, "", "CenterCropTransform"], [253, 2, 1, "", "CollectTransform"], [253, 2, 1, "", "ComposeTransform"], [253, 2, 1, "", "CropResizeTFTransform"], [253, 2, 1, "", "CropResizeTransform"], [253, 2, 1, "", "CropToBoundingBox"], [253, 2, 1, "", "InputFeatures"], [253, 2, 1, "", "MXNetCropResizeTransform"], [253, 2, 1, "", "MXNetCropToBoundingBox"], [253, 2, 1, "", "MXNetNormalizeTransform"], [253, 2, 1, "", "MXNetTransforms"], [253, 2, 1, "", "MXNetTranspose"], [253, 2, 1, "", "NormalizeTFTransform"], [253, 2, 1, "", "NormalizeTransform"], [253, 2, 1, "", "ONNXRTCropToBoundingBox"], [253, 2, 1, "", "ONNXRTITTransforms"], [253, 2, 1, "", "ONNXRTQLTransforms"], [253, 2, 1, "", "PaddedCenterCropTransform"], [253, 2, 1, "", "ParseDecodeVocTransform"], [253, 2, 1, "", "PyTorchAlignImageChannel"], [253, 2, 1, "", "PyTorchCropResizeTransform"], [253, 2, 1, "", "PyTorchNormalizeTransform"], [253, 2, 1, "", "PyTorchTransforms"], [253, 2, 1, "", "PyTorchTranspose"], [253, 2, 1, "", "PytorchMxnetTransform"], [253, 2, 1, "", "PytorchMxnetWrapFunction"], [253, 2, 1, "", "RandomCropTFTransform"], [253, 2, 1, "", "RandomCropTransform"], [253, 2, 1, "", "RandomHorizontalFlip"], [253, 2, 1, "", "RandomResizedCropMXNetTransform"], [253, 2, 1, "", "RandomResizedCropPytorchTransform"], [253, 2, 1, "", "RandomResizedCropTFTransform"], [253, 2, 1, "", "RandomResizedCropTransform"], [253, 2, 1, "", "RandomVerticalFlip"], [253, 2, 1, "", "RescaleKerasPretrainTransform"], [253, 2, 1, "", "RescaleTFTransform"], [253, 2, 1, "", "RescaleTransform"], [253, 2, 1, "", "ResizeMXNetTransform"], [253, 2, 1, "", "ResizePytorchTransform"], [253, 2, 1, "", "ResizeTFTransform"], [253, 2, 1, "", "ResizeTransform"], [253, 2, 1, "", "ResizeWithRatio"], [253, 2, 1, "", "SquadExample"], [253, 2, 1, "", "TFModelZooCollectTransform"], [253, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [253, 2, 1, "", "TFSquadV1PostTransform"], [253, 2, 1, "", "TRANSFORMS"], [253, 2, 1, "", "TensorflowCropToBoundingBox"], [253, 2, 1, "", "TensorflowRandomHorizontalFlip"], [253, 2, 1, "", "TensorflowRandomVerticalFlip"], [253, 2, 1, "", "TensorflowResizeWithRatio"], [253, 2, 1, "", "TensorflowTransform"], [253, 2, 1, "", "TensorflowTransforms"], [253, 2, 1, "", "TensorflowTranspose"], [253, 2, 1, "", "TensorflowWrapFunction"], [253, 2, 1, "", "ToArray"], [253, 2, 1, "", "ToNDArrayTransform"], [253, 2, 1, "", "Transforms"], [253, 2, 1, "", "Transpose"], [253, 1, 1, "", "convert_examples_to_features"], [253, 1, 1, "", "get_final_text"], [253, 1, 1, "", "get_torchvision_map"], [253, 1, 1, "", "read_squad_examples"], [253, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[253, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[253, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[253, 3, 1, "", "get_postprocess_result"], [253, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[253, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[254, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[254, 6, 1, "", "_epoch_ran"], [254, 6, 1, "", "best_model"], [254, 6, 1, "", "best_score"], [254, 3, 1, "", "create_criterion"], [254, 3, 1, "", "create_optimizer"], [254, 4, 1, "", "criterion"], [254, 6, 1, "", "eval_frequency"], [254, 4, 1, "", "evaluation_distributed"], [254, 3, 1, "", "execute"], [254, 3, 1, "", "generate_hooks"], [254, 3, 1, "", "init_train_cfg"], [254, 3, 1, "", "on_post_forward"], [254, 4, 1, "", "optimizer"], [254, 3, 1, "", "pre_process"], [254, 3, 1, "", "prepare"], [254, 4, 1, "", "student_model"], [254, 4, 1, "", "teacher_model"], [254, 4, 1, "", "train_cfg"], [254, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[255, 1, 1, "", "onnx_qlinear_to_qdq"], [256, 0, 0, "-", "qlinear2qdq"], [257, 0, 0, "-", "torch2onnx"], [255, 1, 1, "", "torch_to_fp32_onnx"], [255, 1, 1, "", "torch_to_int8_onnx"], [258, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[256, 1, 1, "", "check_model"], [256, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.torch2onnx": [[257, 1, 1, "", "build_scale_mapping"], [257, 1, 1, "", "get_node_mapping"], [257, 1, 1, "", "get_quantizable_onnx_ops"], [257, 1, 1, "", "qdq_fp32_bias"], [257, 1, 1, "", "qdq_fp32_bias_qdq"], [257, 1, 1, "", "qdq_int32_bias"], [257, 1, 1, "", "recalculate_bias"], [257, 1, 1, "", "remove_nodes_by_name"], [257, 1, 1, "", "set_data_type"], [257, 1, 1, "", "set_scale_info"], [257, 1, 1, "", "sub_graph_with_int32_bias"], [257, 1, 1, "", "torch_to_fp32_onnx"], [257, 1, 1, "", "torch_to_int8_onnx"], [257, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[258, 2, 1, "", "DummyDataReader"], [258, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[258, 3, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[259, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[259, 3, 1, "", "dataset"], [259, 4, 1, "", "eval_dataloader"], [259, 4, 1, "", "eval_func"], [259, 4, 1, "", "input"], [259, 4, 1, "", "metric"], [259, 4, 1, "", "model"], [259, 4, 1, "", "output"], [259, 4, 1, "", "postprocess"], [259, 4, 1, "", "precisions"], [259, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[267, 2, 1, "", "BaseMetric"], [267, 2, 1, "", "METRICS"], [261, 0, 0, "-", "bleu"], [262, 0, 0, "-", "bleu_util"], [263, 0, 0, "-", "coco_label_map"], [264, 0, 0, "-", "coco_tools"], [265, 0, 0, "-", "evaluate_squad"], [266, 0, 0, "-", "f1"], [268, 0, 0, "-", "metric"], [267, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[267, 4, 1, "", "hvd"], [267, 4, 1, "", "metric"], [267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[267, 6, 1, "", "metrics"], [267, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[261, 2, 1, "", "BLEU"], [261, 2, 1, "", "UnicodeRegex"], [261, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[261, 6, 1, "", "labels"], [261, 6, 1, "", "predictions"], [261, 3, 1, "", "reset"], [261, 3, 1, "", "result"], [261, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[261, 6, 1, "", "nondigit_punct_re"], [261, 3, 1, "", "property_chars"], [261, 6, 1, "", "punct_nondigit_re"], [261, 6, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[262, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[264, 2, 1, "", "COCOEvalWrapper"], [264, 2, 1, "", "COCOWrapper"], [264, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [264, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [264, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[264, 3, 1, "", "ComputeMetrics"], [264, 3, 1, "", "GetAgnosticMode"], [264, 3, 1, "", "GetCategory"], [264, 3, 1, "", "GetCategoryIdList"], [264, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[264, 3, 1, "", "LoadAnnotations"], [264, 6, 1, "", "dataset"], [264, 6, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[265, 1, 1, "", "evaluate"], [265, 1, 1, "", "exact_match_score"], [265, 1, 1, "", "f1_score"], [265, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[266, 1, 1, "", "evaluate"], [266, 1, 1, "", "f1_score"], [266, 1, 1, "", "metric_max_over_ground_truths"], [266, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[268, 2, 1, "", "Accuracy"], [268, 2, 1, "", "BaseMetric"], [268, 2, 1, "", "COCOmAPv2"], [268, 2, 1, "", "F1"], [268, 2, 1, "", "GeneralTopK"], [268, 2, 1, "", "Loss"], [268, 2, 1, "", "MAE"], [268, 2, 1, "", "METRICS"], [268, 2, 1, "", "MSE"], [268, 2, 1, "", "MXNetMetrics"], [268, 2, 1, "", "ONNXRTGLUE"], [268, 2, 1, "", "ONNXRTITMetrics"], [268, 2, 1, "", "ONNXRTQLMetrics"], [268, 2, 1, "", "PyTorchLoss"], [268, 2, 1, "", "PyTorchMetrics"], [268, 2, 1, "", "RMSE"], [268, 2, 1, "", "ROC"], [268, 2, 1, "", "SquadF1"], [268, 2, 1, "", "TensorflowCOCOMAP"], [268, 2, 1, "", "TensorflowMAP"], [268, 2, 1, "", "TensorflowMetrics"], [268, 2, 1, "", "TensorflowTopK"], [268, 2, 1, "", "TensorflowVOCMAP"], [268, 2, 1, "", "WrapMXNetMetric"], [268, 2, 1, "", "WrapONNXRTMetric"], [268, 2, 1, "", "WrapPyTorchMetric"], [268, 2, 1, "", "mIOU"], [268, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[268, 6, 1, "", "label_list"], [268, 6, 1, "", "pred_list"], [268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 6, 1, "", "sample"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[268, 4, 1, "", "hvd"], [268, 4, 1, "", "metric"], [268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[268, 6, 1, "", "k"], [268, 6, 1, "", "num_correct"], [268, 6, 1, "", "num_sample"], [268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 6, 1, "", "sample"], [268, 6, 1, "", "sum"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[268, 6, 1, "", "compare_label"], [268, 6, 1, "", "label_list"], [268, 6, 1, "", "pred_list"], [268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[268, 6, 1, "", "metrics"], [268, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[268, 6, 1, "", "compare_label"], [268, 6, 1, "", "label_list"], [268, 6, 1, "", "pred_list"], [268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[268, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[268, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[268, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[268, 3, 1, "", "compute"], [268, 3, 1, "", "reset"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[268, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[268, 6, 1, "", "mse"], [268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[268, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[268, 6, 1, "", "k"], [268, 6, 1, "", "num_correct"], [268, 6, 1, "", "num_sample"], [268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[268, 3, 1, "", "reset"], [268, 3, 1, "", "result"], [268, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[269, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[269, 4, 1, "", "precisions"], [269, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[270, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[270, 3, 1, "", "dataset"], [270, 4, 1, "", "destination"], [270, 4, 1, "", "eval_dataloader"], [270, 4, 1, "", "eval_func"], [270, 4, 1, "", "metric"], [270, 4, 1, "", "model"], [270, 4, 1, "", "postprocess"], [270, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[283, 2, 1, "", "BasicNAS"], [283, 2, 1, "", "DyNAS"], [283, 2, 1, "", "NAS"], [271, 0, 0, "-", "basic_nas"], [272, 0, 0, "-", "dynas"], [277, 0, 0, "-", "dynast"], [284, 0, 0, "-", "nas"], [285, 0, 0, "-", "nas_utils"], [286, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[283, 3, 1, "", "estimate"], [283, 3, 1, "", "execute"], [283, 3, 1, "", "init_by_cfg"], [283, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[283, 3, 1, "", "create_acc_predictor"], [283, 3, 1, "", "create_latency_predictor"], [283, 3, 1, "", "create_macs_predictor"], [283, 3, 1, "", "estimate"], [283, 3, 1, "", "init_cfg"], [283, 3, 1, "", "init_for_search"], [283, 3, 1, "", "search"], [283, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[271, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[271, 3, 1, "", "estimate"], [271, 3, 1, "", "execute"], [271, 3, 1, "", "init_by_cfg"], [271, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[272, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[272, 3, 1, "", "create_acc_predictor"], [272, 3, 1, "", "create_latency_predictor"], [272, 3, 1, "", "create_macs_predictor"], [272, 3, 1, "", "estimate"], [272, 3, 1, "", "init_cfg"], [272, 3, 1, "", "init_for_search"], [272, 3, 1, "", "search"], [272, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[273, 0, 0, "-", "dynas_manager"], [274, 0, 0, "-", "dynas_predictor"], [275, 0, 0, "-", "dynas_search"], [276, 0, 0, "-", "dynas_utils"], [278, 0, 0, "-", "supernetwork"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[273, 2, 1, "", "ParameterManager"], [273, 2, 1, "", "TransformerLTEncoding"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[273, 3, 1, "", "create_training_set"], [273, 3, 1, "", "import_csv"], [273, 3, 1, "", "onehot_generic"], [273, 3, 1, "", "process_param_dict"], [273, 3, 1, "", "random_sample"], [273, 3, 1, "", "random_samples"], [273, 3, 1, "", "set_seed"], [273, 3, 1, "", "translate2param"], [273, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding": [[273, 3, 1, "", "create_training_set"], [273, 3, 1, "", "import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[274, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[274, 3, 1, "", "get_metrics"], [274, 3, 1, "", "get_parameters"], [274, 3, 1, "", "load"], [274, 3, 1, "", "predict"], [274, 3, 1, "", "save"], [274, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[275, 2, 1, "", "ProblemMultiObjective"], [275, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[275, 3, 1, "", "configure_age"], [275, 3, 1, "", "configure_nsga2"], [275, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[276, 2, 1, "", "EvaluationInterface"], [276, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [276, 2, 1, "", "EvaluationInterfaceResNet50"], [276, 2, 1, "", "EvaluationInterfaceTransformerLT"], [276, 2, 1, "", "OFARunner"], [276, 2, 1, "", "Runner"], [276, 2, 1, "", "TorchVisionReference"], [276, 2, 1, "", "TransformerLTRunner"], [276, 1, 1, "", "get_macs"], [276, 1, 1, "", "get_torchvision_model"], [276, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[276, 3, 1, "", "clear_csv"], [276, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[276, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[276, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT": [[276, 3, 1, "", "clear_csv"], [276, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[276, 3, 1, "", "estimate_accuracy_top1"], [276, 3, 1, "", "estimate_latency"], [276, 3, 1, "", "estimate_macs"], [276, 3, 1, "", "get_subnet"], [276, 3, 1, "", "measure_latency"], [276, 3, 1, "", "validate_macs"], [276, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[276, 3, 1, "", "measure_latency"], [276, 3, 1, "", "validate_macs"], [276, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner": [[276, 3, 1, "", "measure_latency"], [276, 3, 1, "", "validate_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[279, 0, 0, "-", "machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[280, 0, 0, "-", "modules_supernetwork"], [281, 0, 0, "-", "transformer_interface"], [282, 0, 0, "-", "transformer_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[280, 2, 1, "", "MultiheadAttentionSuper"], [280, 1, 1, "", "get_incremental_state"], [280, 1, 1, "", "set_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper": [[280, 3, 1, "", "forward"], [280, 3, 1, "", "reorder_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[281, 1, 1, "", "compute_bleu"], [281, 1, 1, "", "compute_latency"], [281, 1, 1, "", "compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[282, 2, 1, "", "TransformerDecoder"], [282, 2, 1, "", "TransformerDecoderLayer"], [282, 2, 1, "", "TransformerEncoder"], [282, 2, 1, "", "TransformerEncoderLayer"], [282, 2, 1, "", "TransformerSuperNetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder": [[282, 3, 1, "", "extract_features"], [282, 3, 1, "", "forward"], [282, 3, 1, "", "max_positions"], [282, 3, 1, "", "output_layer"], [282, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer": [[282, 3, 1, "", "forward"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder": [[282, 3, 1, "", "forward"], [282, 3, 1, "", "max_positions"], [282, 3, 1, "", "reorder_encoder_out"], [282, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer": [[282, 3, 1, "", "forward"], [282, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.nas": [[284, 2, 1, "", "NAS"], [284, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[284, 3, 1, "", "count_model_parameters"], [284, 3, 1, "", "dump_search_results"], [284, 3, 1, "", "estimate"], [284, 3, 1, "", "find_best_model_archs"], [284, 3, 1, "", "init_search_cfg"], [284, 3, 1, "", "load_search_results"], [284, 3, 1, "", "metrics_conversion"], [284, 4, 1, "", "model_builder"], [284, 3, 1, "", "params_vec2params_dict"], [284, 3, 1, "", "search"], [284, 4, 1, "", "search_algorithm"], [284, 4, 1, "", "search_space"], [284, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[285, 1, 1, "", "create_search_space_pool"], [285, 1, 1, "", "find_pareto_front"], [285, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[286, 2, 1, "", "BayesianOptimizationSearcher"], [286, 2, 1, "", "GridSearcher"], [286, 2, 1, "", "RandomSearcher"], [286, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[286, 3, 1, "", "get_feedback"], [286, 3, 1, "", "indices2params_vec"], [286, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[286, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[286, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[286, 3, 1, "", "get_feedback"], [286, 3, 1, "", "params_vec2params_dict"], [286, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[287, 2, 1, "", "Pruning"], [287, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[287, 6, 1, "", "conf"], [287, 4, 1, "", "evaluation_distributed"], [287, 3, 1, "", "execute"], [287, 3, 1, "", "generate_hooks"], [287, 3, 1, "", "generate_pruners"], [287, 3, 1, "", "get_sparsity_ratio"], [287, 3, 1, "", "pre_process"], [287, 3, 1, "", "prepare"], [287, 6, 1, "", "pruners"], [287, 4, 1, "", "pruning_func"], [287, 4, 1, "", "train_distributed"], [287, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[287, 3, 1, "", "on_after_compute_loss"], [287, 3, 1, "", "on_batch_begin"], [287, 3, 1, "", "on_batch_end"], [287, 3, 1, "", "on_epoch_begin"], [287, 3, 1, "", "on_epoch_end"], [287, 3, 1, "", "on_step_begin"], [287, 3, 1, "", "on_step_end"], [287, 3, 1, "", "on_train_begin"], [287, 3, 1, "", "on_train_end"], [287, 3, 1, "", "post_epoch_end"], [287, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[288, 2, 1, "", "PATTERNS"], [289, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[288, 6, 1, "", "patterns"], [288, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[289, 2, 1, "", "PATTERNS"], [290, 0, 0, "-", "pattern"], [291, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[289, 6, 1, "", "patterns"], [289, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[290, 2, 1, "", "PATTERNS"], [290, 2, 1, "", "PatternBase"], [290, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[290, 6, 1, "", "patterns"], [290, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[290, 3, 1, "", "compute_sparsity"], [290, 3, 1, "", "reduce"], [290, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[291, 2, 1, "", "TilePatternBase"], [291, 2, 1, "", "TilePattern_1x1"], [291, 2, 1, "", "TilePattern_1x16"], [291, 2, 1, "", "TilePattern_1x2"], [291, 2, 1, "", "TilePattern_2x2"], [291, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[291, 3, 1, "", "compute_sparsity"], [291, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pruning_v2": [[292, 2, 1, "", "Pruning"], [292, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[292, 6, 1, "", "conf"], [292, 4, 1, "", "evaluation_distributed"], [292, 3, 1, "", "execute"], [292, 3, 1, "", "generate_hooks"], [292, 3, 1, "", "get_sparsity_ratio"], [292, 3, 1, "", "pre_process"], [292, 3, 1, "", "prepare"], [292, 6, 1, "", "pruners"], [292, 4, 1, "", "pruning_func"], [292, 4, 1, "", "train_distributed"], [292, 3, 1, "", "update_config"]], "neural_compressor.experimental.pruning_v2.TfPruningCallback": [[292, 3, 1, "", "on_after_compute_loss"], [292, 3, 1, "", "on_batch_begin"], [292, 3, 1, "", "on_batch_end"], [292, 3, 1, "", "on_epoch_begin"], [292, 3, 1, "", "on_epoch_end"], [292, 3, 1, "", "on_step_begin"], [292, 3, 1, "", "on_step_end"], [292, 3, 1, "", "on_train_begin"], [292, 3, 1, "", "on_train_end"], [292, 3, 1, "", "post_epoch_end"], [292, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pytorch_pruner": [[294, 0, 0, "-", "logger"], [295, 0, 0, "-", "patterns"], [296, 0, 0, "-", "prune_utils"], [297, 0, 0, "-", "pruner"], [298, 0, 0, "-", "pruning"], [299, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[295, 2, 1, "", "Pattern"], [295, 2, 1, "", "PatternNInM"], [295, 2, 1, "", "PatternNxM"], [295, 1, 1, "", "get_pattern"], [295, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[295, 3, 1, "", "get_block_size_dict"], [295, 3, 1, "", "get_mask_single"], [295, 3, 1, "", "get_masks"], [295, 3, 1, "", "get_masks_global"], [295, 3, 1, "", "get_masks_local"], [295, 3, 1, "", "get_pattern_lock_masks"], [295, 3, 1, "", "get_sparsity_ratio"], [295, 6, 1, "", "is_global"], [295, 6, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[295, 6, 1, "", "M"], [295, 6, 1, "", "N"], [295, 3, 1, "", "get_masks_global"], [295, 3, 1, "", "get_pattern_lock_masks"], [295, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[295, 6, 1, "", "block_size"], [295, 3, 1, "", "get_block_size_dict"], [295, 3, 1, "", "get_masks_global"], [295, 3, 1, "", "get_pattern_lock_masks"], [295, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[296, 1, 1, "", "check_config"], [296, 1, 1, "", "parse_not_to_prune"], [296, 1, 1, "", "parse_to_prune"], [296, 1, 1, "", "process_and_check_config"], [296, 1, 1, "", "process_config"], [296, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[297, 2, 1, "", "MagnitudePruner"], [297, 2, 1, "", "PatternLockPruner"], [297, 2, 1, "", "Pruner"], [297, 2, 1, "", "SnipMomentumPruner"], [297, 2, 1, "", "SnipPruner"], [297, 1, 1, "", "get_pruner"], [297, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[297, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[297, 3, 1, "", "on_after_optimizer_step"], [297, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[297, 3, 1, "", "check_is_pruned_step"], [297, 6, 1, "", "config"], [297, 6, 1, "", "current_sparsity_ratio"], [297, 6, 1, "", "end_step"], [297, 6, 1, "", "global_step"], [297, 3, 1, "", "mask_weights"], [297, 6, 1, "", "masks"], [297, 6, 1, "", "max_sparsity_ratio_per_layer"], [297, 6, 1, "", "modules"], [297, 3, 1, "", "on_after_eval"], [297, 3, 1, "", "on_after_optimizer_step"], [297, 3, 1, "", "on_before_eval"], [297, 3, 1, "", "on_before_optimizer_step"], [297, 3, 1, "", "on_epoch_begin"], [297, 3, 1, "", "on_epoch_end"], [297, 3, 1, "", "on_step_begin"], [297, 3, 1, "", "on_step_end"], [297, 3, 1, "", "on_train_begin"], [297, 3, 1, "", "on_train_end"], [297, 6, 1, "", "pattern"], [297, 6, 1, "", "scheduler"], [297, 6, 1, "", "scores"], [297, 6, 1, "", "start_step"], [297, 6, 1, "", "target_sparsity_ratio"], [297, 6, 1, "", "update_frequency_on_step"], [297, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[297, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[297, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[298, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[298, 6, 1, "", "config_file_path"], [298, 3, 1, "", "get_sparsity_ratio"], [298, 6, 1, "", "model"], [298, 3, 1, "", "on_after_eval"], [298, 3, 1, "", "on_after_optimizer_step"], [298, 3, 1, "", "on_before_eval"], [298, 3, 1, "", "on_before_optimizer_step"], [298, 3, 1, "", "on_epoch_begin"], [298, 3, 1, "", "on_epoch_end"], [298, 3, 1, "", "on_step_begin"], [298, 3, 1, "", "on_step_end"], [298, 3, 1, "", "on_train_begin"], [298, 3, 1, "", "on_train_end"], [298, 3, 1, "", "prepare"], [298, 6, 1, "", "pruner_info"], [298, 6, 1, "", "pruners"], [298, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[299, 2, 1, "", "IterativeScheduler"], [299, 2, 1, "", "OneshotScheduler"], [299, 2, 1, "", "Scheduler"], [299, 1, 1, "", "get_scheduler"], [299, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[299, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[299, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[299, 6, 1, "", "config"], [299, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[300, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[300, 4, 1, "", "calib_dataloader"], [300, 3, 1, "", "dataset"], [300, 3, 1, "", "execute"], [300, 4, 1, "", "metric"], [300, 4, 1, "", "model"], [300, 4, 1, "", "objective"], [300, 4, 1, "", "postprocess"], [300, 3, 1, "", "pre_process"], [300, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[301, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[301, 3, 1, "", "append"], [301, 3, 1, "", "combine"], [301, 4, 1, "", "eval_func"], [301, 4, 1, "", "model"], [301, 4, 1, "", "train_func"]], "neural_compressor.metric": [[309, 2, 1, "", "BaseMetric"], [309, 2, 1, "", "METRICS"], [309, 2, 1, "", "Metric"], [303, 0, 0, "-", "bleu"], [304, 0, 0, "-", "bleu_util"], [305, 0, 0, "-", "coco_label_map"], [306, 0, 0, "-", "coco_tools"], [307, 0, 0, "-", "evaluate_squad"], [308, 0, 0, "-", "f1"], [310, 0, 0, "-", "metric"], [309, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[309, 4, 1, "", "hvd"], [309, 4, 1, "", "metric"], [309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[309, 6, 1, "", "metrics"], [309, 3, 1, "", "register"]], "neural_compressor.metric.bleu": [[303, 2, 1, "", "BLEU"], [303, 2, 1, "", "UnicodeRegex"], [303, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[303, 6, 1, "", "labels"], [303, 6, 1, "", "predictions"], [303, 3, 1, "", "reset"], [303, 3, 1, "", "result"], [303, 3, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[303, 6, 1, "", "nondigit_punct_re"], [303, 3, 1, "", "property_chars"], [303, 6, 1, "", "punct_nondigit_re"], [303, 6, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[304, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[306, 2, 1, "", "COCOEvalWrapper"], [306, 2, 1, "", "COCOWrapper"], [306, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [306, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [306, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[306, 3, 1, "", "ComputeMetrics"], [306, 3, 1, "", "GetAgnosticMode"], [306, 3, 1, "", "GetCategory"], [306, 3, 1, "", "GetCategoryIdList"], [306, 3, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[306, 3, 1, "", "LoadAnnotations"], [306, 6, 1, "", "dataset"], [306, 6, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[307, 1, 1, "", "evaluate"], [307, 1, 1, "", "exact_match_score"], [307, 1, 1, "", "f1_score"], [307, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[308, 1, 1, "", "evaluate"], [308, 1, 1, "", "f1_score"], [308, 1, 1, "", "metric_max_over_ground_truths"], [308, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[310, 2, 1, "", "Accuracy"], [310, 2, 1, "", "BaseMetric"], [310, 2, 1, "", "COCOmAPv2"], [310, 2, 1, "", "F1"], [310, 2, 1, "", "GeneralTopK"], [310, 2, 1, "", "Loss"], [310, 2, 1, "", "MAE"], [310, 2, 1, "", "METRICS"], [310, 2, 1, "", "MSE"], [310, 2, 1, "", "MXNetMetrics"], [310, 2, 1, "", "Metric"], [310, 2, 1, "", "ONNXRTGLUE"], [310, 2, 1, "", "ONNXRTITMetrics"], [310, 2, 1, "", "ONNXRTQLMetrics"], [310, 2, 1, "", "PyTorchLoss"], [310, 2, 1, "", "PyTorchMetrics"], [310, 2, 1, "", "RMSE"], [310, 2, 1, "", "ROC"], [310, 2, 1, "", "SquadF1"], [310, 2, 1, "", "TensorflowCOCOMAP"], [310, 2, 1, "", "TensorflowMAP"], [310, 2, 1, "", "TensorflowMetrics"], [310, 2, 1, "", "TensorflowTopK"], [310, 2, 1, "", "TensorflowVOCMAP"], [310, 2, 1, "", "WrapMXNetMetric"], [310, 2, 1, "", "WrapONNXRTMetric"], [310, 2, 1, "", "WrapPyTorchMetric"], [310, 2, 1, "", "mIOU"], [310, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[310, 6, 1, "", "label_list"], [310, 6, 1, "", "pred_list"], [310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 6, 1, "", "sample"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[310, 4, 1, "", "hvd"], [310, 4, 1, "", "metric"], [310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[310, 6, 1, "", "k"], [310, 6, 1, "", "num_correct"], [310, 6, 1, "", "num_sample"], [310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 6, 1, "", "sample"], [310, 6, 1, "", "sum"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[310, 6, 1, "", "compare_label"], [310, 6, 1, "", "label_list"], [310, 6, 1, "", "pred_list"], [310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[310, 6, 1, "", "metrics"], [310, 3, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[310, 6, 1, "", "compare_label"], [310, 6, 1, "", "label_list"], [310, 6, 1, "", "pred_list"], [310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[310, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[310, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[310, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[310, 3, 1, "", "compute"], [310, 3, 1, "", "reset"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[310, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[310, 6, 1, "", "mse"], [310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[310, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[310, 6, 1, "", "k"], [310, 6, 1, "", "num_correct"], [310, 6, 1, "", "num_sample"], [310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[310, 3, 1, "", "reset"], [310, 3, 1, "", "result"], [310, 3, 1, "", "update"]], "neural_compressor.model": [[313, 2, 1, "", "BaseModel"], [313, 2, 1, "", "Model"], [312, 0, 0, "-", "base_model"], [314, 0, 0, "-", "keras_model"], [315, 0, 0, "-", "model"], [316, 0, 0, "-", "mxnet_model"], [317, 0, 0, "-", "nets_factory"], [318, 0, 0, "-", "onnx_model"], [319, 0, 0, "-", "tensorflow_model"], [320, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[313, 3, 1, "", "export"], [313, 3, 1, "", "framework"], [313, 4, 1, "", "graph_info"], [313, 4, 1, "", "model"], [313, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[312, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[312, 3, 1, "", "export"], [312, 3, 1, "", "framework"], [312, 4, 1, "", "graph_info"], [312, 4, 1, "", "model"], [312, 3, 1, "", "save"]], "neural_compressor.model.keras_model": [[314, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[314, 3, 1, "", "framework"], [314, 4, 1, "", "graph_info"], [314, 4, 1, "", "model"], [314, 4, 1, "", "q_config"], [314, 3, 1, "", "save"]], "neural_compressor.model.model": [[315, 2, 1, "", "Model"], [315, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[316, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[316, 3, 1, "", "framework"], [316, 4, 1, "", "model"], [316, 3, 1, "", "save"]], "neural_compressor.model.nets_factory": [[317, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.nets_factory.TFSlimNetsFactory": [[317, 3, 1, "", "register"]], "neural_compressor.model.onnx_model": [[318, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[318, 3, 1, "", "add_initializer"], [318, 3, 1, "", "add_initializers"], [318, 3, 1, "", "add_node"], [318, 3, 1, "", "add_nodes"], [318, 3, 1, "", "export"], [318, 3, 1, "", "find_node_by_name"], [318, 3, 1, "", "find_nodes_by_initializer"], [318, 3, 1, "", "framework"], [318, 3, 1, "", "get_children"], [318, 3, 1, "", "get_initializer"], [318, 3, 1, "", "get_nodes_chain"], [318, 3, 1, "", "get_parent"], [318, 3, 1, "", "get_parents"], [318, 3, 1, "", "get_scale_zero"], [318, 3, 1, "", "graph"], [318, 4, 1, "", "graph_info"], [318, 3, 1, "", "initializer"], [318, 3, 1, "", "input"], [318, 4, 1, "", "input_name_to_nodes"], [318, 3, 1, "", "ir_version"], [318, 4, 1, "", "large_size"], [318, 4, 1, "", "model"], [318, 4, 1, "", "model_path"], [318, 3, 1, "", "nodes"], [318, 3, 1, "", "opset_import"], [318, 3, 1, "", "output"], [318, 4, 1, "", "output_name_to_node"], [318, 4, 1, "", "q_config"], [318, 3, 1, "", "remove_initializer"], [318, 3, 1, "", "remove_initializers"], [318, 3, 1, "", "remove_node"], [318, 3, 1, "", "remove_nodes"], [318, 3, 1, "", "remove_unused_constant"], [318, 3, 1, "", "replace_input_of_all_nodes"], [318, 3, 1, "", "replace_node_input"], [318, 3, 1, "", "replace_node_output"], [318, 3, 1, "", "replace_output_of_all_nodes"], [318, 3, 1, "", "save"], [318, 3, 1, "", "save_model_to_file"], [318, 3, 1, "", "set_initializer"], [318, 3, 1, "", "topological_sort"], [318, 3, 1, "", "update"]], "neural_compressor.model.tensorflow_model": [[319, 2, 1, "", "TensorflowBaseModel"], [319, 2, 1, "", "TensorflowCheckpointModel"], [319, 2, 1, "", "TensorflowModel"], [319, 2, 1, "", "TensorflowQATModel"], [319, 2, 1, "", "TensorflowSavedModelModel"], [319, 1, 1, "", "checkpoint_session"], [319, 1, 1, "", "estimator_session"], [319, 1, 1, "", "frozen_pb_session"], [319, 1, 1, "", "get_model_type"], [319, 1, 1, "", "graph_def_session"], [319, 1, 1, "", "graph_session"], [319, 1, 1, "", "keras_session"], [319, 1, 1, "", "load_saved_model"], [319, 1, 1, "", "saved_model_session"], [319, 1, 1, "", "slim_session"], [319, 1, 1, "", "validate_and_inference_input_output"], [319, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[319, 3, 1, "", "framework"], [319, 4, 1, "", "graph"], [319, 4, 1, "", "graph_def"], [319, 4, 1, "", "graph_info"], [319, 4, 1, "", "input_node_names"], [319, 4, 1, "", "input_tensor"], [319, 4, 1, "", "input_tensor_names"], [319, 4, 1, "", "iter_op"], [319, 4, 1, "", "model"], [319, 4, 1, "", "model_type"], [319, 4, 1, "", "name"], [319, 4, 1, "", "output_node_names"], [319, 4, 1, "", "output_tensor"], [319, 4, 1, "", "output_tensor_names"], [319, 4, 1, "", "q_config"], [319, 3, 1, "", "save"], [319, 4, 1, "", "sess"], [319, 4, 1, "", "weights"], [319, 4, 1, "", "workspace_path"]], "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel": [[319, 4, 1, "", "graph_def"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[319, 4, 1, "", "model"], [319, 3, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[319, 3, 1, "", "build_saved_model"], [319, 3, 1, "", "get_all_weight_names"], [319, 3, 1, "", "get_weight"], [319, 4, 1, "", "model"], [319, 3, 1, "", "report_sparsity"], [319, 3, 1, "", "save"], [319, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model": [[320, 2, 1, "", "IPEXModel"], [320, 2, 1, "", "PyTorchBaseModel"], [320, 2, 1, "", "PyTorchFXModel"], [320, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[320, 3, 1, "", "save"], [320, 4, 1, "", "workspace_path"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[320, 3, 1, "", "forward"], [320, 4, 1, "", "fp32_model"], [320, 3, 1, "", "framework"], [320, 3, 1, "", "generate_forward_pre_hook"], [320, 3, 1, "", "get_all_weight_names"], [320, 3, 1, "", "get_gradient"], [320, 3, 1, "", "get_inputs"], [320, 3, 1, "", "get_weight"], [320, 4, 1, "", "model"], [320, 3, 1, "", "prune_weights_"], [320, 3, 1, "", "register_forward_pre_hook"], [320, 3, 1, "", "remove_hooks"], [320, 3, 1, "", "report_sparsity"], [320, 3, 1, "", "update_gradient"], [320, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[320, 3, 1, "", "export"], [320, 3, 1, "", "export_to_bf16_onnx"], [320, 3, 1, "", "export_to_fp32_onnx"], [320, 3, 1, "", "export_to_int8_onnx"], [320, 3, 1, "", "export_to_jit"], [320, 4, 1, "", "graph_info"], [320, 3, 1, "", "load_quantized_state_dict"], [320, 3, 1, "", "quantized_state_dict"], [320, 3, 1, "", "save"], [320, 4, 1, "", "workspace_path"]], "neural_compressor.objective": [[321, 2, 1, "", "Accuracy"], [321, 2, 1, "", "Footprint"], [321, 2, 1, "", "ModelSize"], [321, 2, 1, "", "Objective"], [321, 2, 1, "", "Performance"], [321, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[321, 3, 1, "", "end"], [321, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[321, 3, 1, "", "end"], [321, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[321, 3, 1, "", "end"], [321, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[321, 3, 1, "", "end"], [321, 3, 1, "", "reset"], [321, 3, 1, "", "result"], [321, 3, 1, "", "result_list"], [321, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[321, 3, 1, "", "end"], [321, 3, 1, "", "start"]], "neural_compressor.pruner": [[322, 0, 0, "-", "criteria"], [324, 0, 0, "-", "logger"], [325, 0, 0, "-", "patterns"], [328, 0, 0, "-", "pruner_legacy"], [332, 0, 0, "-", "pruners"], [333, 0, 0, "-", "pruning"], [334, 0, 0, "-", "regs"], [335, 0, 0, "-", "schedulers"], [336, 0, 0, "-", "utils"]], "neural_compressor.pruner.criteria": [[322, 2, 1, "", "GradientCriterion"], [322, 2, 1, "", "MagnitudeCriterion"], [322, 2, 1, "", "PruningCriterion"], [322, 2, 1, "", "SnipCriterion"], [322, 2, 1, "", "SnipMomentumCriterion"], [322, 1, 1, "", "get_criterion"], [322, 1, 1, "", "register_criterion"]], "neural_compressor.pruner.criteria.GradientCriterion": [[322, 3, 1, "", "on_after_optimizer_step"], [322, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.MagnitudeCriterion": [[322, 3, 1, "", "on_step_begin"], [322, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.PruningCriterion": [[322, 3, 1, "", "on_after_optimizer_step"], [322, 3, 1, "", "on_step_begin"], [322, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipCriterion": [[322, 3, 1, "", "on_after_optimizer_step"], [322, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipMomentumCriterion": [[322, 3, 1, "", "on_after_optimizer_step"], [322, 6, 1, "", "scores"]], "neural_compressor.pruner.patterns": [[325, 2, 1, "", "BasePattern"], [325, 2, 1, "", "PatternNInM"], [325, 2, 1, "", "PatternNxM"], [325, 1, 1, "", "get_pattern"], [325, 1, 1, "", "register_pattern"]], "neural_compressor.pruner.patterns.BasePattern": [[325, 3, 1, "", "adjust_ratio"], [325, 3, 1, "", "check_layer_validity"], [325, 6, 1, "", "config"], [325, 3, 1, "", "get_block_size_dict"], [325, 3, 1, "", "get_masks"], [325, 3, 1, "", "get_masks_global"], [325, 3, 1, "", "get_masks_local"], [325, 3, 1, "", "get_pattern_lock_masks"], [325, 3, 1, "", "get_reduced_masks_from_data"], [325, 3, 1, "", "get_single_mask_per_target_ratio"], [325, 3, 1, "", "get_sparsity_ratio"], [325, 3, 1, "", "get_sparsity_ratio_each_layer"], [325, 6, 1, "", "invalid_layers"], [325, 6, 1, "", "is_global"], [325, 6, 1, "", "keep_mask_layers"], [325, 6, 1, "", "max_sparsity_ratio_per_op"], [325, 6, 1, "", "min_sparsity_ratio_per_op"], [325, 6, 1, "", "modules"], [325, 6, 1, "", "pattern"], [325, 3, 1, "", "reduce_tensor"], [325, 6, 1, "", "target_sparsity"], [325, 3, 1, "", "update_residual_cnt"]], "neural_compressor.pruner.patterns.PatternNInM": [[325, 6, 1, "", "M"], [325, 6, 1, "", "N"], [325, 3, 1, "", "check_layer_validity"], [325, 3, 1, "", "get_ele_mask_per_threshold"], [325, 3, 1, "", "get_least_ninm_mask_from_data"], [325, 3, 1, "", "get_masks_global"], [325, 3, 1, "", "get_pattern_lock_masks"], [325, 3, 1, "", "get_reduced_masks_from_data"], [325, 3, 1, "", "get_sparsity_ratio"], [325, 3, 1, "", "reduce_scores"], [325, 3, 1, "", "reshape_orig_to_pattern"], [325, 3, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.pruner.patterns.PatternNxM": [[325, 6, 1, "", "block_size"], [325, 3, 1, "", "check_layer_validity"], [325, 3, 1, "", "count_new_masked_cnts"], [325, 3, 1, "", "get_block_size_dict"], [325, 3, 1, "", "get_mask_per_threshold"], [325, 3, 1, "", "get_masks_global"], [325, 3, 1, "", "get_pattern_lock_masks"], [325, 3, 1, "", "get_reduced_masks_from_data"], [325, 3, 1, "", "get_sparsity_ratio"], [325, 3, 1, "", "get_sparsity_ratio_progressive"], [325, 3, 1, "", "reduce_scores"], [325, 3, 1, "", "reshape_orig_to_pattern"], [325, 3, 1, "", "reshape_reduced_to_orig"], [325, 3, 1, "", "update_new_added_masks"], [325, 3, 1, "", "update_progressive_masks"], [325, 3, 1, "", "update_progressive_masks_global"], [325, 3, 1, "", "update_progressive_masks_linear"], [325, 3, 1, "", "update_progressive_masks_local"], [325, 3, 1, "", "update_progressive_masks_scores"]], "neural_compressor.pruner.pruner_legacy": [[326, 0, 0, "-", "gradient_sensitivity"], [327, 0, 0, "-", "group_lasso"], [329, 0, 0, "-", "magnitude"], [330, 0, 0, "-", "pattern_lock"], [331, 0, 0, "-", "pruner"]], "neural_compressor.pruner.pruner_legacy.pruner": [[331, 1, 1, "", "pruner_registry"]], "neural_compressor.pruner.pruners": [[332, 2, 1, "", "BasePruner"], [332, 2, 1, "", "BasicPruner"], [332, 2, 1, "", "PatternLockPruner"], [332, 2, 1, "", "ProgressivePruner"], [332, 1, 1, "", "get_pruner"], [332, 1, 1, "", "parse_valid_pruner_types"], [332, 1, 1, "", "register_pruner"]], "neural_compressor.pruner.pruners.BasePruner": [[332, 3, 1, "", "check_is_pruned_step"], [332, 6, 1, "", "config"], [332, 6, 1, "", "current_sparsity_ratio"], [332, 6, 1, "", "end_step"], [332, 6, 1, "", "global_step"], [332, 3, 1, "", "mask_weights"], [332, 3, 1, "", "mask_weights_general"], [332, 6, 1, "", "masks"], [332, 6, 1, "", "max_sparsity_ratio_per_op"], [332, 6, 1, "", "modules"], [332, 3, 1, "", "on_after_eval"], [332, 3, 1, "", "on_after_optimizer_step"], [332, 3, 1, "", "on_before_eval"], [332, 3, 1, "", "on_before_optimizer_step"], [332, 3, 1, "", "on_epoch_begin"], [332, 3, 1, "", "on_epoch_end"], [332, 3, 1, "", "on_step_begin"], [332, 3, 1, "", "on_step_end"], [332, 3, 1, "", "on_train_begin"], [332, 3, 1, "", "on_train_end"], [332, 6, 1, "", "pattern"], [332, 6, 1, "", "pruning_frequency"], [332, 6, 1, "", "scheduler"], [332, 6, 1, "", "scores"], [332, 6, 1, "", "start_step"], [332, 6, 1, "", "target_sparsity_ratio"], [332, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.BasicPruner": [[332, 6, 1, "", "criterion"], [332, 3, 1, "", "on_after_optimizer_step"], [332, 3, 1, "", "on_before_optimizer_step"], [332, 6, 1, "", "pattern"], [332, 6, 1, "", "reg"], [332, 6, 1, "", "scheduler"], [332, 3, 1, "", "set_global_step"], [332, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.PatternLockPruner": [[332, 3, 1, "", "on_after_optimizer_step"], [332, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.ProgressivePruner": [[332, 3, 1, "", "check_is_pruned_progressive_step"], [332, 3, 1, "", "check_progressive_validity"], [332, 3, 1, "", "on_after_optimizer_step"], [332, 3, 1, "", "on_before_optimizer_step"], [332, 3, 1, "", "on_step_begin"], [332, 3, 1, "", "print_progressive_sparsity"], [332, 3, 1, "", "update_masks_progressive"]], "neural_compressor.pruner.pruning": [[333, 2, 1, "", "Pruning"]], "neural_compressor.pruner.pruning.Pruning": [[333, 6, 1, "", "config_file_path"], [333, 3, 1, "", "get_sparsity_ratio"], [333, 4, 1, "id0", "model"], [333, 3, 1, "", "on_after_eval"], [333, 3, 1, "", "on_after_optimizer_step"], [333, 3, 1, "", "on_before_eval"], [333, 3, 1, "", "on_before_optimizer_step"], [333, 3, 1, "", "on_epoch_begin"], [333, 3, 1, "", "on_epoch_end"], [333, 3, 1, "", "on_step_begin"], [333, 3, 1, "", "on_step_end"], [333, 3, 1, "", "on_train_begin"], [333, 3, 1, "", "on_train_end"], [333, 6, 1, "", "pruner_info"], [333, 6, 1, "", "pruners"], [333, 3, 1, "", "update_config"]], "neural_compressor.pruner.regs": [[334, 2, 1, "", "BaseReg"], [334, 2, 1, "", "GroupLasso"], [334, 1, 1, "", "get_reg"], [334, 1, 1, "", "get_reg_type"], [334, 1, 1, "", "register_reg"]], "neural_compressor.pruner.regs.BaseReg": [[334, 3, 1, "", "on_after_optimizer_step"], [334, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.regs.GroupLasso": [[334, 6, 1, "", "alpha"], [334, 3, 1, "", "on_after_optimizer_step"], [334, 3, 1, "", "on_before_optimizer_step"], [334, 6, 1, "", "reg_terms"]], "neural_compressor.pruner.schedulers": [[335, 2, 1, "", "IterativeScheduler"], [335, 2, 1, "", "OneshotScheduler"], [335, 2, 1, "", "PruningScheduler"], [335, 1, 1, "", "get_scheduler"], [335, 1, 1, "", "register_scheduler"]], "neural_compressor.pruner.schedulers.IterativeScheduler": [[335, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.OneshotScheduler": [[335, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.PruningScheduler": [[335, 6, 1, "", "config"], [335, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.utils": [[336, 1, 1, "", "check_config"], [336, 1, 1, "", "parse_to_prune"], [336, 1, 1, "", "process_and_check_config"], [336, 1, 1, "", "process_config"], [336, 1, 1, "", "process_weight_config"], [336, 1, 1, "", "process_yaml_config"], [336, 1, 1, "", "reset_none_to_default"], [336, 1, 1, "", "update_params"]], "neural_compressor.quantization": [[337, 1, 1, "", "fit"]], "neural_compressor.strategy": [[338, 0, 0, "-", "auto_mixed_precision"], [339, 0, 0, "-", "basic"], [340, 0, 0, "-", "bayesian"], [341, 0, 0, "-", "conservative"], [342, 0, 0, "-", "exhaustive"], [343, 0, 0, "-", "hawq_v2"], [345, 0, 0, "-", "mse"], [346, 0, 0, "-", "mse_v2"], [347, 0, 0, "-", "random"], [348, 0, 0, "-", "strategy"], [349, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[338, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[338, 3, 1, "", "next_tune_cfg"], [338, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[339, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[339, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[340, 2, 1, "", "BayesianOptimization"], [340, 2, 1, "", "BayesianTuneStrategy"], [340, 2, 1, "", "TargetSpace"], [340, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianOptimization": [[340, 3, 1, "", "gen_next_params"], [340, 4, 1, "", "max"], [340, 4, 1, "", "res"], [340, 4, 1, "", "space"], [340, 3, 1, "", "suggest"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[340, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[340, 3, 1, "", "array_to_params"], [340, 4, 1, "", "bounds"], [340, 4, 1, "", "dim"], [340, 4, 1, "", "empty"], [340, 3, 1, "", "get_target"], [340, 4, 1, "", "keys"], [340, 3, 1, "", "max"], [340, 4, 1, "", "params"], [340, 3, 1, "", "params_to_array"], [340, 3, 1, "", "random_sample"], [340, 3, 1, "", "register"], [340, 3, 1, "", "res"], [340, 4, 1, "", "target"]], "neural_compressor.strategy.conservative": [[341, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[341, 3, 1, "", "next_tune_cfg"], [341, 3, 1, "", "stop"], [341, 3, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[342, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[342, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[343, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[343, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[345, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[345, 3, 1, "", "mse_impact_lst"], [345, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[346, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[346, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[347, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[347, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[348, 2, 1, "", "TuneStrategy"], [348, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[348, 3, 1, "", "deploy_config"], [348, 4, 1, "", "evaluation_result"], [348, 3, 1, "", "initial_best_acc"], [348, 3, 1, "", "initial_tuning_cfg"], [348, 3, 1, "", "next_tune_cfg"], [348, 3, 1, "", "set_q_func"], [348, 3, 1, "", "set_tuning_space"], [348, 3, 1, "", "setup_resume"], [348, 3, 1, "", "show_baseline_info"], [348, 3, 1, "", "stop"], [348, 3, 1, "", "traverse"], [348, 3, 1, "", "update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils": [[349, 2, 1, "", "OpTuningConfig"], [350, 0, 0, "-", "tuning_sampler"], [351, 0, 0, "-", "tuning_space"], [352, 0, 0, "-", "tuning_structs"]], "neural_compressor.strategy.utils.OpTuningConfig": [[349, 3, 1, "", "from_state"], [349, 3, 1, "", "get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[352, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig": [[352, 3, 1, "", "from_state"], [352, 3, 1, "", "get_state"]], "neural_compressor.training": [[353, 2, 1, "", "CompressionManager"], [353, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[353, 3, 1, "", "export"], [353, 3, 1, "", "save"]], "neural_compressor.utils": [[357, 2, 1, "", "KL_Divergence"], [357, 2, 1, "", "LayerHistogramCollector"], [354, 0, 0, "-", "collect_layer_histogram"], [355, 0, 0, "-", "constant"], [356, 0, 0, "-", "create_obj_from_config"], [358, 0, 0, "-", "kl_divergence"], [359, 0, 0, "-", "load_huggingface"], [360, 0, 0, "-", "logger"], [361, 0, 0, "-", "options"], [362, 0, 0, "-", "pytorch"], [363, 0, 0, "-", "utility"]], "neural_compressor.utils.KL_Divergence": [[357, 3, 1, "", "expand_quantized_bins"], [357, 3, 1, "", "get_threshold"], [357, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.LayerHistogramCollector": [[357, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[354, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[354, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[356, 1, 1, "", "create_eval_func"], [356, 1, 1, "", "create_train_func"]], "neural_compressor.utils.kl_divergence": [[358, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[358, 3, 1, "", "expand_quantized_bins"], [358, 3, 1, "", "get_threshold"], [358, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.pytorch": [[362, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[363, 2, 1, "", "LazyImport"], [363, 2, 1, "", "MODE"], [363, 1, 1, "", "combine_histogram"], [363, 1, 1, "", "dump_data_to_local"], [363, 1, 1, "", "dump_elapsed_time"], [363, 1, 1, "", "equal_dicts"], [363, 1, 1, "", "get_size"], [363, 1, 1, "", "get_tuning_history"], [363, 1, 1, "", "load_data_from_pkl"], [363, 1, 1, "", "recover"]], "neural_compressor.ux": [[439, 0, 0, "-", "components"], [498, 0, 0, "-", "inc_bench"], [507, 0, 0, "-", "utils"], [533, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[367, 0, 0, "-", "benchmark"], [371, 0, 0, "-", "config_generator"], [379, 0, 0, "-", "configuration_wizard"], [415, 0, 0, "-", "db_manager"], [420, 0, 0, "-", "diagnosis"], [428, 0, 0, "-", "file_browser"], [434, 0, 0, "-", "graph"], [440, 0, 0, "-", "jobs_management"], [444, 0, 0, "-", "manage_workspace"], [446, 0, 0, "-", "model"], [465, 0, 0, "-", "model_zoo"], [467, 0, 0, "-", "names_mapper"], [474, 0, 0, "-", "optimization"], [490, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[367, 2, 1, "", "Benchmarks"], [364, 0, 0, "-", "benchmark"], [365, 0, 0, "-", "benchmark_model"], [366, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[364, 2, 1, "", "Benchmark"], [364, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[364, 4, 1, "", "config_filename"], [364, 4, 1, "", "configuration_data"], [364, 3, 1, "", "execute"], [364, 3, 1, "", "generate_config"], [364, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[365, 1, 1, "", "benchmark_model"], [365, 1, 1, "", "parse_args"], [365, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[366, 1, 1, "", "benchmark_result_update"], [366, 1, 1, "", "benchmark_result_update_pytorch_script"], [366, 1, 1, "", "execute_benchmark"], [366, 1, 1, "", "execute_real_benchmark"], [366, 1, 1, "", "pytorch_script_bench_optimizations"], [366, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[368, 0, 0, "-", "benchmark_config_generator"], [369, 0, 0, "-", "config_generator"], [370, 0, 0, "-", "graph_optimization_config_generator"], [372, 0, 0, "-", "mixed_precision_config_generator"], [373, 0, 0, "-", "profiling_config_generator"], [374, 0, 0, "-", "pruning_config_generator"], [375, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[368, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[368, 3, 1, "", "generate"], [368, 3, 1, "", "generate_accuracy_config"], [368, 3, 1, "", "generate_evaluation_config"], [368, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[369, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[369, 3, 1, "", "generate"], [369, 3, 1, "", "generate_dataloader_config"], [369, 3, 1, "", "generate_model_config"], [369, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[370, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[370, 3, 1, "", "generate"], [370, 3, 1, "", "generate_evaluation_config"], [370, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[372, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[372, 3, 1, "", "generate"], [372, 3, 1, "", "generate_evaluation_config"], [372, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[373, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[373, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[374, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator": [[374, 3, 1, "", "generate"], [374, 3, 1, "", "generate_evaluation_config"], [374, 3, 1, "", "generate_pruning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[375, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[375, 3, 1, "", "generate"], [375, 3, 1, "", "generate_evaluation_config"], [375, 3, 1, "", "generate_quantization_config"], [375, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[376, 0, 0, "-", "configuration_parser"], [377, 0, 0, "-", "get_boundary_nodes"], [378, 0, 0, "-", "get_configuration"], [380, 0, 0, "-", "params_feeder"], [381, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[376, 2, 1, "", "ConfigurationParser"], [376, 1, 1, "", "normalize_string_list"], [376, 1, 1, "", "parse_list_value"], [376, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[376, 3, 1, "", "get_param_type"], [376, 3, 1, "", "parse"], [376, 3, 1, "", "parse_dataloader"], [376, 3, 1, "", "parse_evaluation_data"], [376, 3, 1, "", "parse_metric"], [376, 3, 1, "", "parse_transforms"], [376, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[377, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[378, 1, 1, "", "get_predefined_configuration"], [378, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[380, 2, 1, "", "Feeder"], [380, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[380, 3, 1, "", "feed"], [380, 3, 1, "", "get_dataloaders"], [380, 3, 1, "", "get_domains"], [380, 3, 1, "", "get_frameworks"], [380, 3, 1, "", "get_metrics"], [380, 3, 1, "", "get_models"], [380, 3, 1, "", "get_objectives"], [380, 3, 1, "", "get_precisions"], [380, 3, 1, "", "get_quantization_approaches"], [380, 3, 1, "", "get_strategies"], [380, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[381, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser": [[381, 3, 1, "", "generate_tree"], [381, 3, 1, "", "parse"], [381, 3, 1, "", "parse_entry"]], "neural_compressor.ux.components.db_manager": [[415, 2, 1, "", "DBManager"], [382, 0, 0, "-", "db_manager"], [391, 0, 0, "-", "db_models"], [410, 0, 0, "-", "db_operations"], [416, 0, 0, "-", "params_interfaces"], [417, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[415, 3, 1, "", "create_all"], [415, 3, 1, "", "create_sqlalchemy_engine"], [415, 4, 1, "", "engine"], [415, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[382, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[382, 3, 1, "", "create_all"], [382, 3, 1, "", "create_sqlalchemy_engine"], [382, 4, 1, "", "engine"], [382, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[383, 0, 0, "-", "benchmark"], [384, 0, 0, "-", "benchmark_result"], [385, 0, 0, "-", "dataloader"], [386, 0, 0, "-", "dataset"], [387, 0, 0, "-", "domain"], [388, 0, 0, "-", "domain_flavour"], [389, 0, 0, "-", "example"], [390, 0, 0, "-", "framework"], [392, 0, 0, "-", "metric"], [393, 0, 0, "-", "model"], [394, 0, 0, "-", "optimization"], [395, 0, 0, "-", "optimization_type"], [396, 0, 0, "-", "precision"], [397, 0, 0, "-", "profiling"], [398, 0, 0, "-", "profiling_result"], [399, 0, 0, "-", "project"], [400, 0, 0, "-", "pruning_details"], [401, 0, 0, "-", "transform"], [402, 0, 0, "-", "tuning_details"], [403, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[383, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[383, 3, 1, "", "add"], [383, 3, 1, "", "build_info"], [383, 3, 1, "", "clean_status"], [383, 3, 1, "", "delete_benchmark"], [383, 3, 1, "", "details"], [383, 3, 1, "", "list"], [383, 3, 1, "", "update_batch_size"], [383, 3, 1, "", "update_config_path"], [383, 3, 1, "", "update_cores_per_instance"], [383, 3, 1, "", "update_dataset"], [383, 3, 1, "", "update_duration"], [383, 3, 1, "", "update_execution_command"], [383, 3, 1, "", "update_log_path"], [383, 3, 1, "", "update_mode"], [383, 3, 1, "", "update_number_of_instance"], [383, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[384, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[384, 3, 1, "", "add"], [384, 3, 1, "", "build_info"], [384, 3, 1, "", "update_accuracy"], [384, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[385, 2, 1, "", "Dataloader"], [385, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[385, 3, 1, "", "list"], [385, 3, 1, "", "list_by_framework"], [385, 3, 1, "", "query_to_list"], [385, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[386, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[386, 3, 1, "", "add"], [386, 3, 1, "", "build_info"], [386, 3, 1, "", "delete_dataset"], [386, 3, 1, "", "details"], [386, 3, 1, "", "list"], [386, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[387, 2, 1, "", "Domain"], [387, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[387, 3, 1, "", "get_domain_id"], [387, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[388, 2, 1, "", "DomainFlavour"], [388, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[388, 3, 1, "", "get_domain_flavour_id"], [388, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[389, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[390, 2, 1, "", "Framework"], [390, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[390, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[392, 2, 1, "", "Metric"], [392, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[392, 3, 1, "", "list"], [392, 3, 1, "", "list_by_framework"], [392, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[393, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[393, 3, 1, "", "add"], [393, 3, 1, "", "build_info"], [393, 3, 1, "", "delete_model"], [393, 3, 1, "", "details"], [393, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[394, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[394, 3, 1, "", "add"], [394, 3, 1, "", "build_info"], [394, 3, 1, "", "clean_status"], [394, 3, 1, "", "delete_optimization"], [394, 3, 1, "", "details"], [394, 3, 1, "", "get_optimization_by_project_and_model"], [394, 3, 1, "", "get_pinned_benchmarks"], [394, 3, 1, "", "list"], [394, 3, 1, "", "pin_accuracy_benchmark"], [394, 3, 1, "", "pin_performance_benchmark"], [394, 3, 1, "", "unpin_benchmark"], [394, 3, 1, "", "update_batch_size"], [394, 3, 1, "", "update_config_path"], [394, 3, 1, "", "update_dataset"], [394, 3, 1, "", "update_duration"], [394, 3, 1, "", "update_execution_command"], [394, 3, 1, "", "update_log_path"], [394, 3, 1, "", "update_optimized_model"], [394, 3, 1, "", "update_precision"], [394, 3, 1, "", "update_pruning_details"], [394, 3, 1, "", "update_sampling_size"], [394, 3, 1, "", "update_status"], [394, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[395, 2, 1, "", "OptimizationType"], [395, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[395, 3, 1, "", "add"], [395, 3, 1, "", "get_optimization_type_by_id"], [395, 3, 1, "", "get_optimization_type_by_name"], [395, 3, 1, "", "get_optimization_type_for_precision"], [395, 3, 1, "", "get_optimization_type_id"], [395, 3, 1, "", "list"], [395, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[396, 2, 1, "", "Precision"], [396, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[396, 3, 1, "", "add"], [396, 3, 1, "", "get_precision_by_id"], [396, 3, 1, "", "get_precision_by_name"], [396, 3, 1, "", "get_precision_id"], [396, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[397, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[397, 3, 1, "", "add"], [397, 3, 1, "", "build_info"], [397, 3, 1, "", "clean_status"], [397, 3, 1, "", "delete_profiling"], [397, 3, 1, "", "details"], [397, 3, 1, "", "list"], [397, 3, 1, "", "update_dataset"], [397, 3, 1, "", "update_duration"], [397, 3, 1, "", "update_execution_command"], [397, 3, 1, "", "update_log_path"], [397, 3, 1, "", "update_num_threads"], [397, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[398, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[398, 3, 1, "", "add"], [398, 3, 1, "", "build_info"], [398, 3, 1, "", "bulk_add"], [398, 3, 1, "", "delete_results"], [398, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[399, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[399, 3, 1, "", "create_project"], [399, 3, 1, "", "delete_project"], [399, 3, 1, "", "get_model_by_name"], [399, 3, 1, "", "list_projects"], [399, 3, 1, "", "project_details"], [399, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[400, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails": [[400, 3, 1, "", "add"], [400, 3, 1, "", "build_info"], [400, 3, 1, "", "delete_pruning_details"], [400, 3, 1, "", "update"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[401, 2, 1, "", "Transform"], [401, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[401, 3, 1, "", "list"], [401, 3, 1, "", "list_by_domain"], [401, 3, 1, "", "list_by_framework"], [401, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[402, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[402, 3, 1, "", "add"], [402, 3, 1, "", "delete_tuning_details"], [402, 3, 1, "", "update"], [402, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[403, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[403, 3, 1, "", "add"], [403, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[410, 2, 1, "", "BenchmarkAPIInterface"], [410, 2, 1, "", "DatasetAPIInterface"], [410, 2, 1, "", "DiagnosisAPIInterface"], [410, 2, 1, "", "DictionariesAPIInterface"], [410, 2, 1, "", "ExamplesAPIInterface"], [410, 2, 1, "", "ModelAPIInterface"], [410, 2, 1, "", "OptimizationAPIInterface"], [410, 2, 1, "", "ProfilingAPIInterface"], [410, 2, 1, "", "ProjectAPIInterface"], [404, 0, 0, "-", "benchmark_api_interface"], [405, 0, 0, "-", "dataset_api_interface"], [406, 0, 0, "-", "db_operations"], [407, 0, 0, "-", "diagnosis_api_interface"], [408, 0, 0, "-", "dictionaries_api_interface"], [409, 0, 0, "-", "examples_api_interface"], [411, 0, 0, "-", "model_api_interface"], [412, 0, 0, "-", "optimization_api_interface"], [413, 0, 0, "-", "profiling_api_interface"], [414, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[410, 3, 1, "", "add_benchmark"], [410, 3, 1, "", "add_result"], [410, 3, 1, "", "clean_status"], [410, 3, 1, "", "delete_benchmark"], [410, 3, 1, "", "edit_benchmark"], [410, 3, 1, "", "get_benchmark_details"], [410, 3, 1, "", "list_benchmarks"], [410, 3, 1, "", "parse_benchmark_data"], [410, 3, 1, "", "parse_benchmark_edit_data"], [410, 3, 1, "", "update_benchmark_accuracy"], [410, 3, 1, "", "update_benchmark_duration"], [410, 3, 1, "", "update_benchmark_performance"], [410, 3, 1, "", "update_benchmark_status"], [410, 3, 1, "", "update_execution_command"], [410, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[410, 3, 1, "", "add_dataset"], [410, 3, 1, "", "check_if_custom_metric_or_dataloader"], [410, 3, 1, "", "dataloader_path"], [410, 3, 1, "", "delete_dataset"], [410, 3, 1, "", "generate_custom_template"], [410, 3, 1, "", "generate_template"], [410, 3, 1, "", "get_dataset_details"], [410, 3, 1, "", "get_predefined_dataset"], [410, 3, 1, "", "list_datasets"], [410, 3, 1, "", "parse_dataset_data"], [410, 3, 1, "", "prepare_predefined_dataloader"], [410, 3, 1, "", "prepare_predefined_transform"], [410, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[410, 3, 1, "", "generate_optimization"], [410, 3, 1, "", "get_op_details"], [410, 3, 1, "", "get_op_list"], [410, 3, 1, "", "histogram"], [410, 3, 1, "", "model_wise_params"], [410, 3, 1, "", "parse_model_wise_config"], [410, 3, 1, "", "parse_op_wise_config"], [410, 3, 1, "", "parse_optimization_data"], [410, 3, 1, "", "parse_wise_parameters"], [410, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[410, 3, 1, "", "list_dataloaders"], [410, 3, 1, "", "list_dataloaders_by_framework"], [410, 3, 1, "", "list_domain_flavours"], [410, 3, 1, "", "list_domains"], [410, 3, 1, "", "list_metrics"], [410, 3, 1, "", "list_metrics_by_framework"], [410, 3, 1, "", "list_optimization_types"], [410, 3, 1, "", "list_optimization_types_for_precision"], [410, 3, 1, "", "list_precisions"], [410, 3, 1, "", "list_transforms"], [410, 3, 1, "", "list_transforms_by_domain"], [410, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[410, 3, 1, "", "create_project"], [410, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[410, 3, 1, "", "add_model"], [410, 3, 1, "", "delete_model"], [410, 3, 1, "", "get_model_details"], [410, 3, 1, "", "list_models"], [410, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[410, 3, 1, "", "add_optimization"], [410, 3, 1, "", "add_pruning_optimization"], [410, 3, 1, "", "add_quantization_optimization"], [410, 3, 1, "", "add_standard_optimization"], [410, 3, 1, "", "add_tuning_history"], [410, 3, 1, "", "clean_status"], [410, 3, 1, "", "delete_optimization"], [410, 3, 1, "", "edit_optimization"], [410, 3, 1, "", "edit_pruning_details"], [410, 3, 1, "", "edit_tuning_details"], [410, 3, 1, "", "get_optimization_details"], [410, 3, 1, "", "get_pruning_details"], [410, 3, 1, "", "list_optimizations"], [410, 3, 1, "", "load_pruning_details_config"], [410, 3, 1, "", "parse_optimization_data"], [410, 3, 1, "", "parse_optimization_edit_data"], [410, 3, 1, "", "parse_tuning_history"], [410, 3, 1, "", "pin_accuracy_benchmark"], [410, 3, 1, "", "pin_performance_benchmark"], [410, 3, 1, "", "update_execution_command"], [410, 3, 1, "", "update_optimization_duration"], [410, 3, 1, "", "update_optimization_status"], [410, 3, 1, "", "update_optimized_model"], [410, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[410, 3, 1, "", "add_profiling"], [410, 3, 1, "", "add_result"], [410, 3, 1, "", "bulk_add_results"], [410, 3, 1, "", "clean_status"], [410, 3, 1, "", "delete_profiling"], [410, 3, 1, "", "edit_profiling"], [410, 3, 1, "", "get_profiling_details"], [410, 3, 1, "", "list_profilings"], [410, 3, 1, "", "parse_profiling_data"], [410, 3, 1, "", "parse_profiling_edit_data"], [410, 3, 1, "", "parse_profiling_result_data"], [410, 3, 1, "", "update_execution_command"], [410, 3, 1, "", "update_log_path"], [410, 3, 1, "", "update_profiling_duration"], [410, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[410, 3, 1, "", "add_dummy_dataset"], [410, 3, 1, "", "add_model"], [410, 3, 1, "", "create_project"], [410, 3, 1, "", "delete_project"], [410, 3, 1, "", "get_project_details"], [410, 3, 1, "", "list_projects"], [410, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[404, 2, 1, "", "BenchmarkAPIInterface"], [404, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[404, 3, 1, "", "add_benchmark"], [404, 3, 1, "", "add_result"], [404, 3, 1, "", "clean_status"], [404, 3, 1, "", "delete_benchmark"], [404, 3, 1, "", "edit_benchmark"], [404, 3, 1, "", "get_benchmark_details"], [404, 3, 1, "", "list_benchmarks"], [404, 3, 1, "", "parse_benchmark_data"], [404, 3, 1, "", "parse_benchmark_edit_data"], [404, 3, 1, "", "update_benchmark_accuracy"], [404, 3, 1, "", "update_benchmark_duration"], [404, 3, 1, "", "update_benchmark_performance"], [404, 3, 1, "", "update_benchmark_status"], [404, 3, 1, "", "update_execution_command"], [404, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[405, 2, 1, "", "DatasetAPIInterface"], [405, 1, 1, "", "initialize_associations"], [405, 1, 1, "", "initialize_precision_optimization_types_association"], [405, 1, 1, "", "search_in_list_of_dict"], [405, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [405, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[405, 3, 1, "", "add_dataset"], [405, 3, 1, "", "check_if_custom_metric_or_dataloader"], [405, 3, 1, "", "dataloader_path"], [405, 3, 1, "", "delete_dataset"], [405, 3, 1, "", "generate_custom_template"], [405, 3, 1, "", "generate_template"], [405, 3, 1, "", "get_dataset_details"], [405, 3, 1, "", "get_predefined_dataset"], [405, 3, 1, "", "list_datasets"], [405, 3, 1, "", "parse_dataset_data"], [405, 3, 1, "", "prepare_predefined_dataloader"], [405, 3, 1, "", "prepare_predefined_transform"], [405, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[406, 1, 1, "", "initialize_associations"], [406, 1, 1, "", "initialize_precision_optimization_types_association"], [406, 1, 1, "", "search_in_list_of_dict"], [406, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [406, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[407, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[407, 3, 1, "", "generate_optimization"], [407, 3, 1, "", "get_op_details"], [407, 3, 1, "", "get_op_list"], [407, 3, 1, "", "histogram"], [407, 3, 1, "", "model_wise_params"], [407, 3, 1, "", "parse_model_wise_config"], [407, 3, 1, "", "parse_op_wise_config"], [407, 3, 1, "", "parse_optimization_data"], [407, 3, 1, "", "parse_wise_parameters"], [407, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[408, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[408, 3, 1, "", "list_dataloaders"], [408, 3, 1, "", "list_dataloaders_by_framework"], [408, 3, 1, "", "list_domain_flavours"], [408, 3, 1, "", "list_domains"], [408, 3, 1, "", "list_metrics"], [408, 3, 1, "", "list_metrics_by_framework"], [408, 3, 1, "", "list_optimization_types"], [408, 3, 1, "", "list_optimization_types_for_precision"], [408, 3, 1, "", "list_precisions"], [408, 3, 1, "", "list_transforms"], [408, 3, 1, "", "list_transforms_by_domain"], [408, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[409, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[409, 3, 1, "", "create_project"], [409, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[411, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[411, 3, 1, "", "add_model"], [411, 3, 1, "", "delete_model"], [411, 3, 1, "", "get_model_details"], [411, 3, 1, "", "list_models"], [411, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[412, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[412, 3, 1, "", "add_optimization"], [412, 3, 1, "", "add_pruning_optimization"], [412, 3, 1, "", "add_quantization_optimization"], [412, 3, 1, "", "add_standard_optimization"], [412, 3, 1, "", "add_tuning_history"], [412, 3, 1, "", "clean_status"], [412, 3, 1, "", "delete_optimization"], [412, 3, 1, "", "edit_optimization"], [412, 3, 1, "", "edit_pruning_details"], [412, 3, 1, "", "edit_tuning_details"], [412, 3, 1, "", "get_optimization_details"], [412, 3, 1, "", "get_pruning_details"], [412, 3, 1, "", "list_optimizations"], [412, 3, 1, "", "load_pruning_details_config"], [412, 3, 1, "", "parse_optimization_data"], [412, 3, 1, "", "parse_optimization_edit_data"], [412, 3, 1, "", "parse_tuning_history"], [412, 3, 1, "", "pin_accuracy_benchmark"], [412, 3, 1, "", "pin_performance_benchmark"], [412, 3, 1, "", "update_execution_command"], [412, 3, 1, "", "update_optimization_duration"], [412, 3, 1, "", "update_optimization_status"], [412, 3, 1, "", "update_optimized_model"], [412, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[413, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[413, 3, 1, "", "add_profiling"], [413, 3, 1, "", "add_result"], [413, 3, 1, "", "bulk_add_results"], [413, 3, 1, "", "clean_status"], [413, 3, 1, "", "delete_profiling"], [413, 3, 1, "", "edit_profiling"], [413, 3, 1, "", "get_profiling_details"], [413, 3, 1, "", "list_profilings"], [413, 3, 1, "", "parse_profiling_data"], [413, 3, 1, "", "parse_profiling_edit_data"], [413, 3, 1, "", "parse_profiling_result_data"], [413, 3, 1, "", "update_execution_command"], [413, 3, 1, "", "update_log_path"], [413, 3, 1, "", "update_profiling_duration"], [413, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[414, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[414, 3, 1, "", "add_dummy_dataset"], [414, 3, 1, "", "add_model"], [414, 3, 1, "", "create_project"], [414, 3, 1, "", "delete_project"], [414, 3, 1, "", "get_project_details"], [414, 3, 1, "", "list_projects"], [414, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[416, 2, 1, "", "BenchmarkAddParamsInterface"], [416, 2, 1, "", "BenchmarkEditParamsInterface"], [416, 2, 1, "", "DatasetAddParamsInterface"], [416, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [416, 2, 1, "", "ModelAddParamsInterface"], [416, 2, 1, "", "OptimizationAddParamsInterface"], [416, 2, 1, "", "OptimizationEditParamsInterface"], [416, 2, 1, "", "ProfilingAddParamsInterface"], [416, 2, 1, "", "ProfilingEditParamsInterface"], [416, 2, 1, "", "ProfilingResultAddParamsInterface"], [416, 2, 1, "", "TuningHistoryInterface"], [416, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[416, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[416, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[416, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[417, 1, 1, "", "get_framework_dataloaders_config"], [417, 1, 1, "", "get_framework_transforms_config"], [417, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[418, 0, 0, "-", "diagnosis"], [419, 0, 0, "-", "factory"], [421, 0, 0, "-", "onnx_diagnosis"], [423, 0, 0, "-", "op_details"], [424, 0, 0, "-", "op_entry"], [425, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[418, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[418, 3, 1, "", "calculate_mse"], [418, 3, 1, "", "get_histogram_data"], [418, 3, 1, "", "get_op_details"], [418, 3, 1, "", "get_op_list"], [418, 3, 1, "", "get_tensors_info"], [418, 3, 1, "", "load_quantization_config"], [418, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[419, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[419, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[422, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[422, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[422, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[423, 2, 1, "", "OpActivation"], [423, 2, 1, "", "OpDetails"], [423, 2, 1, "", "OpPattern"], [423, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[423, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[424, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[424, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[426, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[426, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[426, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[427, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[427, 1, 1, "", "create_dir_entry"], [427, 1, 1, "", "create_entry"], [427, 1, 1, "", "create_file_entry"], [427, 1, 1, "", "filter_requested_entries"], [427, 1, 1, "", "get_directory_entries"], [427, 1, 1, "", "get_filter_value"], [427, 1, 1, "", "get_non_hidden_directory_entries"], [427, 1, 1, "", "get_requested_path"], [427, 1, 1, "", "get_setting_value"], [427, 1, 1, "", "is_dataset_or_directory_entry"], [427, 1, 1, "", "is_directory_entry"], [427, 1, 1, "", "is_model_or_directory_entry"], [427, 1, 1, "", "should_show_files"], [427, 1, 1, "", "should_show_only_model_files"], [427, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[429, 0, 0, "-", "attribute"], [430, 0, 0, "-", "collapser"], [431, 0, 0, "-", "edge"], [432, 0, 0, "-", "graph"], [433, 0, 0, "-", "graph_reader"], [435, 0, 0, "-", "node"], [436, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[429, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[430, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[430, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[431, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[431, 4, 1, "", "source"], [431, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[432, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[432, 3, 1, "", "add_edge"], [432, 3, 1, "", "add_node"], [432, 4, 1, "", "edges"], [432, 3, 1, "", "get_node"], [432, 3, 1, "", "get_target_nodes"], [432, 3, 1, "", "highlight_pattern"], [432, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[433, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[433, 3, 1, "", "find_pattern_in_graph"], [433, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[435, 2, 1, "", "GroupNode"], [435, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[437, 0, 0, "-", "onnxrt_reader"], [438, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[437, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[437, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[438, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[438, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[441, 0, 0, "-", "jobs_control_queue"], [442, 0, 0, "-", "jobs_manager"], [443, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[444, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[445, 0, 0, "-", "domain"], [447, 0, 0, "-", "model"], [448, 0, 0, "-", "model_type_getter"], [449, 0, 0, "-", "onnxrt"], [451, 0, 0, "-", "pytorch"], [453, 0, 0, "-", "repository"], [454, 0, 0, "-", "shape"], [456, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[445, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[447, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[447, 4, 1, "", "domain"], [447, 3, 1, "", "ensure_supported_path"], [447, 3, 1, "", "get_framework_name"], [447, 3, 1, "", "get_input_nodes"], [447, 3, 1, "", "get_model_graph"], [447, 3, 1, "", "get_output_nodes"], [447, 3, 1, "", "get_tensors_info"], [447, 3, 1, "", "guard_requirements_installed"], [447, 4, 1, "", "input_shape"], [447, 4, 1, "", "shape_elements_order"], [447, 4, 1, "", "supports_graph"], [447, 3, 1, "", "supports_path"], [447, 4, 1, "", "supports_profiling"], [447, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.model_type_getter": [[448, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[450, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[450, 2, 1, "", "OnnxrtModel"], [450, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[450, 4, 1, "", "domain"], [450, 4, 1, "", "filtered_input_nodes"], [450, 3, 1, "", "get_framework_name"], [450, 3, 1, "", "get_model_graph"], [450, 3, 1, "", "guard_requirements_installed"], [450, 4, 1, "", "input_shape"], [450, 4, 1, "", "nc_model_instance"], [450, 4, 1, "", "shape_elements_order"], [450, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[452, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[452, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[452, 3, 1, "", "get_framework_name"], [452, 3, 1, "", "guard_requirements_installed"], [452, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[453, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[453, 3, 1, "", "get_framework_from_path"], [453, 3, 1, "", "get_frameworks"], [453, 3, 1, "", "get_model"], [453, 3, 1, "", "get_supported_frameworks"], [453, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[454, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[454, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[455, 0, 0, "-", "frozen_pb"], [457, 0, 0, "-", "keras"], [458, 0, 0, "-", "meta_graph"], [459, 0, 0, "-", "model"], [460, 0, 0, "-", "saved_model"], [461, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[455, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[455, 3, 1, "", "supports_path"], [455, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[457, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[457, 3, 1, "", "get_input_nodes"], [457, 3, 1, "", "get_output_nodes"], [457, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[458, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[458, 3, 1, "", "get_input_nodes"], [458, 3, 1, "", "get_model_graph"], [458, 3, 1, "", "get_output_nodes"], [458, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[459, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[459, 3, 1, "", "get_framework_name"], [459, 3, 1, "", "get_input_nodes"], [459, 3, 1, "", "get_model_graph"], [459, 3, 1, "", "get_output_nodes"], [459, 3, 1, "", "guard_requirements_installed"], [459, 4, 1, "", "input_shape"], [459, 4, 1, "", "nc_model_instance"], [459, 4, 1, "", "shape_elements_order"], [459, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[460, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[460, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[461, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[462, 0, 0, "-", "download_config"], [463, 0, 0, "-", "download_model"], [464, 0, 0, "-", "downloader"], [466, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[462, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[463, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[464, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[464, 3, 1, "", "download"], [464, 3, 1, "", "download_config"], [464, 3, 1, "", "download_file"], [464, 3, 1, "", "download_model"], [464, 3, 1, "", "download_yaml_config"], [464, 3, 1, "", "get_yaml_url"], [464, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[466, 1, 1, "", "check_version"], [466, 1, 1, "", "get_available_models"], [466, 1, 1, "", "get_framework_module_name"], [466, 1, 1, "", "get_installed_frameworks"], [466, 1, 1, "", "list_models"], [466, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[468, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[468, 2, 1, "", "MappingDirection"], [468, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[468, 4, 1, "", "domain_flavour_mappings"], [468, 4, 1, "", "domain_mappings"], [468, 4, 1, "", "framework_mappings"], [468, 3, 1, "", "map_name"], [468, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[474, 2, 1, "", "Optimizations"], [469, 0, 0, "-", "execute_optimization"], [470, 0, 0, "-", "factory"], [472, 0, 0, "-", "graph_optimizer"], [475, 0, 0, "-", "mixed_precision"], [478, 0, 0, "-", "neural_coder_optimization"], [480, 0, 0, "-", "optimization"], [481, 0, 0, "-", "pruning"], [484, 0, 0, "-", "tune"], [487, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[469, 1, 1, "", "check_if_collect_tuning_history"], [469, 1, 1, "", "execute_optimization"], [469, 1, 1, "", "execute_optimization_pytorch_script"], [469, 1, 1, "", "execute_optimization_regular"], [469, 1, 1, "", "parse_logs"], [469, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[470, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[470, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[471, 0, 0, "-", "graph_optimization"], [473, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[471, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[471, 4, 1, "", "configuration_data"], [471, 3, 1, "", "execute"], [471, 3, 1, "", "generate_config"], [471, 4, 1, "", "optimization_script"], [471, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[473, 1, 1, "", "optimize_graph"], [473, 1, 1, "", "optimize_graph_config"], [473, 1, 1, "", "parse_args"], [473, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[476, 0, 0, "-", "mixed_precision"], [477, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[476, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[476, 4, 1, "", "configuration_data"], [476, 3, 1, "", "execute"], [476, 3, 1, "", "generate_config"], [476, 4, 1, "", "optimization_script"], [476, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[477, 1, 1, "", "optimize_graph"], [477, 1, 1, "", "optimize_graph_config"], [477, 1, 1, "", "parse_args"], [477, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[479, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[479, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[480, 2, 1, "", "DataloaderInterface"], [480, 2, 1, "", "Optimization"], [480, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[480, 4, 1, "", "command"], [480, 4, 1, "", "config_filename"], [480, 4, 1, "", "configuration_data"], [480, 3, 1, "", "execute"], [480, 3, 1, "", "generate_config"], [480, 4, 1, "", "optimization_script"], [480, 4, 1, "", "output_model_dir"], [480, 4, 1, "", "output_model_name"], [480, 4, 1, "", "parameters"], [480, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.pruning": [[482, 0, 0, "-", "optimize_model"], [483, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[482, 1, 1, "", "optimize_model"], [482, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[483, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning.Pruning": [[483, 4, 1, "", "configuration_data"], [483, 3, 1, "", "execute"], [483, 3, 1, "", "generate_config"], [483, 4, 1, "", "optimization_script"], [483, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tune": [[485, 0, 0, "-", "tune_model"], [486, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[485, 1, 1, "", "parse_args"], [485, 1, 1, "", "set_eager_execution"], [485, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[486, 2, 1, "", "AccuracyCriterion"], [486, 2, 1, "", "Tuning"], [486, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[486, 4, 1, "", "configuration_data"], [486, 3, 1, "", "execute"], [486, 3, 1, "", "generate_config"], [486, 4, 1, "", "optimization_script"], [486, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[487, 2, 1, "", "TuningHistory"], [487, 2, 1, "", "Watcher"], [487, 1, 1, "", "tuning_history"], [487, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[487, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[487, 3, 1, "", "history_file_modification_time"], [487, 3, 1, "", "stop"], [487, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[488, 0, 0, "-", "execute_profiling"], [489, 0, 0, "-", "factory"], [491, 0, 0, "-", "profile_model"], [492, 0, 0, "-", "profiler"], [493, 0, 0, "-", "profiling"], [495, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[488, 1, 1, "", "execute_profiling"], [488, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[489, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[489, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[491, 1, 1, "", "load_profiling_details"], [491, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[492, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[492, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[493, 2, 1, "", "DataloaderInterface"], [493, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[493, 4, 1, "", "config_filename"], [493, 4, 1, "", "config_path"], [493, 3, 1, "", "execute"], [493, 3, 1, "", "generate_config"], [493, 4, 1, "", "profiling_data"], [493, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[494, 0, 0, "-", "factory"], [496, 0, 0, "-", "profiler"], [497, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[494, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[494, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[496, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[496, 3, 1, "", "build_dataloader"], [496, 3, 1, "", "convert_nodes_to_list"], [496, 3, 1, "", "create_tf_config"], [496, 3, 1, "", "get_node_by_name"], [496, 3, 1, "", "initialize_graph"], [496, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[497, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[498, 1, 1, "", "main"], [498, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[500, 0, 0, "-", "consts"], [501, 0, 0, "-", "environment"], [502, 0, 0, "-", "exceptions"], [503, 0, 0, "-", "executor"], [504, 0, 0, "-", "expiring_dict"], [505, 0, 0, "-", "github_info"], [506, 0, 0, "-", "hw_info"], [508, 0, 0, "-", "json_serializer"], [509, 0, 0, "-", "logger"], [510, 0, 0, "-", "parser"], [511, 0, 0, "-", "proc"], [512, 0, 0, "-", "processes"], [513, 0, 0, "-", "singleton"], [514, 0, 0, "-", "status_updates"], [515, 0, 0, "-", "templates"], [518, 0, 0, "-", "utils"], [523, 0, 0, "-", "workload"], [529, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[500, 2, 1, "", "DomainFlavours"], [500, 2, 1, "", "Domains"], [500, 2, 1, "", "ExecutionStatus"], [500, 2, 1, "", "Frameworks"], [500, 2, 1, "", "OptimizationTypes"], [500, 2, 1, "", "Precisions"], [500, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[501, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[501, 3, 1, "", "clean_workloads_wip_status"], [501, 3, 1, "", "ensure_workdir_exists_and_writeable"], [501, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[502, 7, 1, "", "AccessDeniedException"], [502, 7, 1, "", "ClientErrorException"], [502, 7, 1, "", "InternalException"], [502, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[503, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[503, 4, 1, "", "additional_log_names"], [503, 3, 1, "", "call"], [503, 3, 1, "", "call_one"], [503, 3, 1, "", "is_multi_commands"], [503, 4, 1, "", "log_name"], [503, 4, 1, "", "process_duration"], [503, 3, 1, "", "refresh_workdir"], [503, 4, 1, "", "request_id"], [503, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[504, 2, 1, "", "ExpiringDict"], [504, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[504, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[505, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[505, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[506, 2, 1, "", "HWInfo"], [506, 1, 1, "", "get_bios_version"], [506, 1, 1, "", "get_distribution"], [506, 1, 1, "", "get_framework_dependency_info"], [506, 1, 1, "", "get_framework_info"], [506, 1, 1, "", "get_kernel_version"], [506, 1, 1, "", "get_number_of_sockets"], [506, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[506, 3, 1, "", "initialize"], [506, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[508, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[508, 3, 1, "", "serialize"], [508, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[509, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[510, 2, 1, "", "AccuracyParser"], [510, 2, 1, "", "BenchmarkParserFactory"], [510, 2, 1, "", "OptimizationParser"], [510, 2, 1, "", "Parser"], [510, 2, 1, "", "PerformanceParser"], [510, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[510, 4, 1, "", "patterns"], [510, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[510, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[510, 4, 1, "", "patterns"], [510, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[510, 4, 1, "", "patterns"], [510, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[510, 4, 1, "", "patterns"], [510, 3, 1, "", "process"], [510, 3, 1, "", "summarize_partial"], [510, 3, 1, "", "summarize_value"], [510, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[510, 4, 1, "", "patterns"], [510, 3, 1, "", "process"], [510, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[511, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[511, 4, 1, "", "info"], [511, 4, 1, "", "info_path"], [511, 4, 1, "", "is_ok"], [511, 4, 1, "", "output"], [511, 4, 1, "", "output_path"], [511, 3, 1, "", "remove_logs"], [511, 3, 1, "", "run"], [511, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[512, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[512, 4, 1, "", "is_ok"], [512, 3, 1, "", "remove_successful_logs"], [512, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[513, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[514, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[516, 0, 0, "-", "metric"], [517, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[516, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[516, 4, 1, "", "acc_input_model"], [516, 4, 1, "", "acc_optimized_model"], [516, 4, 1, "", "accuracy"], [516, 3, 1, "", "calculate_throughput"], [516, 3, 1, "", "insert_data"], [516, 4, 1, "", "latency"], [516, 4, 1, "", "optimization_time"], [516, 4, 1, "", "path_optimized_model"], [516, 4, 1, "", "profiling_data"], [516, 4, 1, "", "size_input_model"], [516, 4, 1, "", "size_optimized_model"], [516, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[517, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[517, 3, 1, "", "clean_logs"], [517, 3, 1, "", "clean_status"], [517, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[518, 1, 1, "", "check_module"], [518, 1, 1, "", "deprecated"], [518, 1, 1, "", "determine_ip"], [518, 1, 1, "", "export_to_csv"], [518, 1, 1, "", "filter_transforms"], [518, 1, 1, "", "get_dataset_path"], [518, 1, 1, "", "get_default_pruning_config_path"], [518, 1, 1, "", "get_file_extension"], [518, 1, 1, "", "get_framework_from_path"], [518, 1, 1, "", "get_height_width_from_size"], [518, 1, 1, "", "get_metrics_dict"], [518, 1, 1, "", "get_model_zoo_config_path"], [518, 1, 1, "", "get_model_zoo_model_path"], [518, 1, 1, "", "get_module_version"], [518, 1, 1, "", "get_predefined_config_path"], [518, 1, 1, "", "get_shape_from_transforms"], [518, 1, 1, "", "get_size"], [518, 1, 1, "", "is_dataset_file"], [518, 1, 1, "", "is_development_env"], [518, 1, 1, "", "is_hidden"], [518, 1, 1, "", "load_dataloader_config"], [518, 1, 1, "", "load_help_nc_params"], [518, 1, 1, "", "load_metrics_config"], [518, 1, 1, "", "load_model_config"], [518, 1, 1, "", "load_model_wise_params"], [518, 1, 1, "", "load_precisions_config"], [518, 1, 1, "", "load_pruning_details_config"], [518, 1, 1, "", "load_transforms_config"], [518, 1, 1, "", "load_transforms_filter_config"], [518, 1, 1, "", "normalize_domain"], [518, 1, 1, "", "normalize_framework"], [518, 1, 1, "", "normalize_string"], [518, 1, 1, "", "parse_bool_value"], [518, 1, 1, "", "parse_to_float_list"], [518, 1, 1, "", "parse_to_string_list"], [518, 1, 1, "", "parse_version"], [518, 1, 1, "", "release_tag"], [518, 1, 1, "", "replace_with_values"], [518, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[519, 0, 0, "-", "config"], [520, 0, 0, "-", "dataloader"], [521, 0, 0, "-", "evaluation"], [522, 0, 0, "-", "graph_optimization"], [524, 0, 0, "-", "mixed_precision"], [525, 0, 0, "-", "model"], [526, 0, 0, "-", "pruning"], [527, 0, 0, "-", "quantization"], [528, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[519, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[519, 3, 1, "", "dump"], [519, 3, 1, "", "get_performance_configs"], [519, 3, 1, "", "get_performance_cores_per_instance"], [519, 3, 1, "", "get_performance_num_of_instance"], [519, 3, 1, "", "initialize"], [519, 3, 1, "", "load"], [519, 3, 1, "", "process_transform"], [519, 3, 1, "", "remove_accuracy_metric"], [519, 3, 1, "", "remove_dataloader"], [519, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [519, 3, 1, "", "set_accuracy_goal"], [519, 3, 1, "", "set_accuracy_metric"], [519, 3, 1, "", "set_evaluation_dataloader"], [519, 3, 1, "", "set_evaluation_dataset_path"], [519, 3, 1, "", "set_inputs"], [519, 3, 1, "", "set_optimization_precision"], [519, 3, 1, "", "set_outputs"], [519, 3, 1, "", "set_performance_cores_per_instance"], [519, 3, 1, "", "set_performance_iterations"], [519, 3, 1, "", "set_performance_num_of_instance"], [519, 3, 1, "", "set_performance_warmup"], [519, 3, 1, "", "set_quantization_approach"], [519, 3, 1, "", "set_quantization_batch_size"], [519, 3, 1, "", "set_quantization_dataloader"], [519, 3, 1, "", "set_quantization_dataset_path"], [519, 3, 1, "", "set_quantization_sampling_size"], [519, 3, 1, "", "set_transform"], [519, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[520, 2, 1, "", "Dataloader"], [520, 2, 1, "", "Dataset"], [520, 2, 1, "", "Filter"], [520, 2, 1, "", "LabelBalance"], [520, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[520, 3, 1, "", "serialize"], [520, 3, 1, "", "set_dataset"], [520, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[520, 3, 1, "", "is_dummy"], [520, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[520, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[521, 2, 1, "", "Accuracy"], [521, 2, 1, "", "Configs"], [521, 2, 1, "", "Evaluation"], [521, 2, 1, "", "Metric"], [521, 2, 1, "", "Performance"], [521, 2, 1, "", "Postprocess"], [521, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[521, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[521, 4, 1, "", "name"], [521, 4, 1, "", "param"], [521, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema": [[521, 3, 1, "", "get_label_shift_value"]], "neural_compressor.ux.utils.workload.graph_optimization": [[522, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[522, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[524, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[524, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[525, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[525, 4, 1, "", "inputs"], [525, 4, 1, "", "outputs"], [525, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[526, 2, 1, "", "AdamOptimizer"], [526, 2, 1, "", "AdamWOptimizer"], [526, 2, 1, "", "Approach"], [526, 2, 1, "", "Criterion"], [526, 2, 1, "", "CrossEntropyLossCriterion"], [526, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [526, 2, 1, "", "KnowledgeDistillationLossCriterion"], [526, 2, 1, "", "Optimizer"], [526, 2, 1, "", "Pruning"], [526, 2, 1, "", "SGDOptimizer"], [526, 2, 1, "", "SelfKnowledgeDistillationLoss"], [526, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [526, 2, 1, "", "Train"], [526, 2, 1, "", "WeightCompressionApproach"], [526, 1, 1, "", "parse_dict_value_to_float"], [526, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[526, 3, 1, "", "serialize"], [526, 3, 1, "", "set_postprocess_transforms"]], "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach": [[526, 3, 1, "", "initialize_pruners"], [526, 3, 1, "", "serialize"], [526, 3, 1, "", "serialize_pruner"]], "neural_compressor.ux.utils.workload.quantization": [[527, 2, 1, "", "Advance"], [527, 2, 1, "", "Calibration"], [527, 2, 1, "", "Quantization"], [527, 2, 1, "", "WiseConfig"], [527, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[528, 2, 1, "", "AccCriterion"], [528, 2, 1, "", "Diagnosis"], [528, 2, 1, "", "ExitPolicy"], [528, 2, 1, "", "MultiObjectives"], [528, 2, 1, "", "Strategy"], [528, 2, 1, "", "Tuning"], [528, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[528, 4, 1, "", "objective"], [528, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[528, 3, 1, "", "set_max_trials"], [528, 3, 1, "", "set_performance_only"], [528, 3, 1, "", "set_random_seed"], [528, 3, 1, "", "set_timeout"], [528, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[529, 1, 1, "", "float_representer"], [529, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[530, 0, 0, "-", "communication"], [531, 0, 0, "-", "configuration"], [532, 0, 0, "-", "exceptions"], [534, 0, 0, "-", "router"], [535, 0, 0, "-", "server"], [538, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[530, 2, 1, "", "Message"], [530, 2, 1, "", "MessageQueue"], [530, 2, 1, "", "Request"], [530, 2, 1, "", "Response"], [530, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[530, 4, 1, "", "data"], [530, 4, 1, "", "status"], [530, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[530, 3, 1, "", "get"], [530, 3, 1, "", "post_error"], [530, 3, 1, "", "post_failure"], [530, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[531, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[531, 3, 1, "", "determine_gui_port"], [531, 3, 1, "", "determine_log_level"], [531, 3, 1, "", "determine_server_port"], [531, 3, 1, "", "determine_url_prefix"], [531, 3, 1, "", "determine_values_from_environment"], [531, 3, 1, "", "dump_token_to_file"], [531, 3, 1, "", "get_command_line_args"], [531, 3, 1, "", "get_url"], [531, 4, 1, "", "global_config_directory"], [531, 3, 1, "", "is_port_taken"], [531, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[532, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[534, 2, 1, "", "DeferredRoutingDefinition"], [534, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [534, 2, 1, "", "RealtimeRoutingDefinition"], [534, 2, 1, "", "Router"], [534, 2, 1, "", "RoutingDefinition"], [534, 1, 1, "", "find_pattern_in_graph"], [534, 1, 1, "", "get_model_graph"], [534, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[534, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[535, 1, 1, "", "allow_api_call"], [535, 1, 1, "", "block_iframe"], [535, 1, 1, "", "block_sniffing"], [535, 1, 1, "", "build_parameters"], [535, 1, 1, "", "disable_cache"], [535, 1, 1, "", "get_tls_args"], [535, 1, 1, "", "handle_api_call"], [535, 1, 1, "", "page_not_found"], [535, 1, 1, "", "require_api_token"], [535, 1, 1, "", "root"], [535, 1, 1, "", "run_server"], [535, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[536, 0, 0, "-", "benchmark"], [537, 0, 0, "-", "history_snapshot_parser"], [539, 0, 0, "-", "model"], [540, 0, 0, "-", "optimization"], [541, 0, 0, "-", "profiling"], [542, 0, 0, "-", "request_data_processor"], [543, 0, 0, "-", "response_generator"], [544, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[536, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[537, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[537, 3, 1, "", "extract_accuracy"], [537, 3, 1, "", "extract_performance"], [537, 3, 1, "", "parse_history_item"], [537, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[539, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[539, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[540, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[541, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[541, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[542, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[542, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[543, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[543, 3, 1, "", "add_refresh"], [543, 3, 1, "", "from_exception"], [543, 3, 1, "", "get_status_code_for_exception"], [543, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[544, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[544, 3, 1, "", "get_code_template"], [544, 3, 1, "", "get_config"], [544, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data", "6": "py:attribute", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contributor": [0, 1], "coven": [0, 1], "code": [0, 1, 3], "conduct": [0, 1], "our": 0, "pledg": 0, "standard": 0, "respons": 0, "scope": 0, "enforc": 0, "attribut": [0, 194, 202, 211, 240, 249, 260, 288, 313, 429], "contribut": 1, "guidelin": 1, "pull": 1, "request": [1, 443], "checklist": 1, "templat": [1, 515, 516, 517], "support": [1, 2, 3, 7, 8, 546, 549, 550, 552, 554, 557, 559, 562, 565, 566, 567, 568, 569, 571, 574, 575, 579, 580, 582], "fx": 2, "introduct": [2, 3, 8, 547, 549, 550, 552, 553, 554, 557, 559, 562, 565, 566, 567, 568, 569, 571, 572, 574, 575, 578, 579, 580, 581, 582], "mode": [2, 583], "matrix": [2, 3, 8, 546, 549, 550, 552, 554, 557, 559, 562, 565, 566, 567, 568, 569, 571, 574, 575, 579, 582], "neural": [2, 3, 7, 26, 547, 561, 562, 571, 572, 578], "compressor": [2, 7, 547, 561, 562, 578], "get": [2, 3, 7, 8, 549, 550, 552, 554, 559, 565, 566, 568, 569, 571, 574, 575, 579, 582], "start": [2, 3, 7, 8, 547, 549, 550, 552, 554, 559, 565, 566, 568, 569, 571, 574, 575, 579, 582], "post": [2, 575], "train": [2, 5, 353, 554, 575], "static": [2, 575], "quantiz": [2, 5, 7, 28, 44, 71, 300, 337, 527, 546, 553, 555, 574, 575, 576, 583], "dynam": [2, 3, 555, 575], "awar": [2, 5, 575], "exampl": [2, 3, 4, 5, 8, 389, 548, 549, 550, 552, 553, 554, 556, 557, 566, 567, 568, 569, 571, 572, 575, 579, 583], "note": [2, 577], "detail": [2, 547], "common": [2, 12, 219, 220, 221, 222, 223, 224, 225, 226, 558], "problem": 2, "architectur": [3, 4, 7, 26, 551, 562], "search": [3, 26], "basic": [3, 339, 581], "na": [3, 26, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 574], "api": [3, 7, 8, 11, 23, 549, 550, 552, 554, 560, 565, 566, 568, 569, 571, 574], "usag": [3, 4, 5, 579, 581], "1": [3, 547, 554, 558, 560, 563, 583], "python": [3, 7, 31, 565, 574], "yaml": [3, 548, 549, 550, 553, 554, 559, 582], "2": [3, 23, 547, 554, 558, 560, 563, 583], "onli": 3, "advanc": 3, "custom": [3, 547, 565, 568, 581], "ptq": [4, 583], "design": [4, 5, 551, 581], "pytorch": [4, 73, 362, 451, 452, 546, 550, 554, 565, 576, 579, 580, 583], "mobilenetv2": 4, "model": [4, 7, 21, 30, 223, 312, 313, 314, 315, 316, 317, 318, 319, 320, 393, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 525, 539, 547, 557, 567, 583], "helper": 4, "function": [4, 35, 39, 40, 47, 66, 72, 73, 95, 96, 98, 140, 169, 171, 175, 176, 178, 180, 182, 192, 200, 202, 206, 209, 210, 211, 214, 216, 217, 218, 219, 221, 224, 226, 230, 238, 240, 244, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 261, 262, 264, 265, 266, 267, 268, 276, 280, 281, 285, 290, 295, 296, 297, 299, 303, 304, 306, 307, 308, 309, 310, 315, 319, 321, 322, 325, 331, 332, 334, 335, 336, 337, 340, 348, 353, 356, 362, 363, 365, 366, 376, 377, 378, 380, 385, 387, 388, 390, 392, 395, 396, 401, 404, 405, 406, 417, 427, 444, 448, 450, 461, 462, 463, 466, 469, 473, 477, 479, 482, 485, 487, 488, 491, 497, 498, 506, 509, 514, 518, 526, 529, 530, 534, 535, 554], "secur": [6, 547, 554], "polici": [6, 581], "report": 6, "vulner": 6, "intel": [7, 547, 561, 562, 583], "instal": [7, 547, 563], "prerequisit": [7, 563], "linux": [7, 563], "jupyterlab": 7, "extens": [7, 583], "gui": 7, "system": [7, 547, 570], "requir": 7, "valid": [7, 583], "hardwar": [7, 583], "environ": [7, 501], "cpu": [7, 583], "base": 7, "64": 7, "compat": 7, "processor": 7, "gpu": 7, "built": [7, 560, 565], "": 7, "xe": 7, "onnx": [7, 173, 546, 583], "multipl": [7, 568, 583], "vendor": 7, "through": [7, 583], "runtim": [7, 546, 583], "softwar": 7, "document": [7, 561], "select": 7, "public": [7, 573], "event": [7, 573], "addit": 7, "content": [7, 14, 26, 35, 39, 40, 41, 42, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 171, 175, 176, 177, 178, 179, 180, 181, 182, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 356, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 435, 437, 438, 444, 445, 447, 448, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 473, 474, 476, 477, 479, 480, 482, 483, 485, 486, 487, 488, 489, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 547], "hire": 7, "adaptor": [8, 9, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175], "work": [8, 575], "flow": [8, 575], "queri": [8, 74], "background": 8, "ad": 8, "new": [8, 547, 581], "backend": 8, "capabl": 8, "implement": 8, "onnxrtadaptor": 8, "class": [8, 14, 26, 40, 42, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 139, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 171, 176, 177, 178, 179, 180, 181, 182, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 260, 261, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 295, 297, 298, 299, 300, 301, 302, 303, 306, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 352, 353, 354, 357, 358, 363, 364, 367, 368, 369, 370, 372, 373, 374, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 422, 423, 424, 426, 429, 430, 431, 432, 433, 435, 437, 438, 445, 447, 450, 452, 453, 454, 455, 457, 458, 459, 460, 464, 468, 470, 471, 474, 476, 480, 483, 486, 487, 489, 492, 493, 494, 496, 500, 501, 503, 504, 505, 506, 508, 510, 511, 512, 513, 516, 517, 519, 520, 521, 522, 524, 525, 526, 527, 528, 530, 531, 534, 536, 537, 539, 540, 541, 542, 543, 544], "onnxrt": [10, 48, 449, 450, 550, 565, 580], "benchmark": [13, 180, 218, 364, 365, 366, 367, 383, 536, 547, 548, 574], "bleu": [14, 261, 303], "modul": [14, 35, 39, 40, 42, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 139, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 171, 175, 176, 177, 179, 180, 181, 182, 185, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 250, 252, 253, 254, 256, 257, 258, 259, 261, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 284, 285, 286, 287, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 303, 304, 306, 307, 308, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 352, 353, 354, 356, 358, 362, 363, 364, 365, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 435, 437, 438, 444, 445, 447, 448, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 473, 476, 477, 479, 480, 482, 483, 485, 486, 487, 488, 489, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544], "criterion": [15, 219], "data": [16, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "dataload": [17, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 220, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 385, 520, 548, 549, 550], "basedataload": 17, "dataset": [18, 200, 201, 202, 203, 204, 205, 206, 207, 238, 239, 240, 241, 242, 243, 244, 245, 386, 547, 550, 560], "transform": [19, 212, 213, 214, 215, 216, 217, 250, 251, 252, 253, 401, 560, 580], "metric": [20, 222, 261, 262, 263, 264, 265, 266, 267, 268, 303, 304, 305, 306, 307, 308, 309, 310, 392, 516, 560, 565], "optim": [22, 224, 394, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 540, 547, 569], "compon": [23, 227, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497], "experiement": 23, "deprec": 23, "0": [23, 583], "distil": [24, 254, 552, 553, 574, 583], "mixedprecis": 25, "packag": [26, 41, 62, 178, 194, 206, 210, 211, 214, 221, 232, 244, 248, 249, 251, 255, 260, 267, 283, 288, 289, 302, 309, 313, 328, 344, 349, 357, 367, 410, 415, 474], "prune": [27, 287, 298, 333, 481, 482, 483, 526, 547, 571, 572, 574, 583], "schedul": [29, 299, 301, 335, 571, 572], "strategi": [32, 33, 187, 188, 189, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 578, 581], "644ec953a7dc_pruning_support": 34, "6ece06672ed3_v1_14": 35, "6f0d0f71d92e_v1_13": 36, "9e89549a08c8_v1_11": 37, "block_mask": 38, "env": 39, "neural_compressor": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545], "subpackag": [41, 50, 211, 249, 260, 277, 278, 283, 288, 302, 344, 415, 420, 434, 439, 446, 474, 490, 499, 507, 533], "kera": [42, 457], "keras_util": [43, 44], "mxnet": [45, 546, 550, 565, 580, 583], "mxnet_util": [46, 47], "util": [47, 72, 169, 175, 258, 336, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 417, 461, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529], "ox_util": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], "calibr": 49, "submodul": [50, 62, 178, 194, 206, 210, 214, 221, 232, 244, 248, 251, 255, 260, 267, 277, 279, 283, 289, 293, 309, 313, 323, 344, 349, 357, 367, 371, 379, 391, 410, 415, 420, 421, 425, 428, 434, 436, 439, 440, 446, 449, 451, 456, 465, 467, 472, 474, 475, 478, 481, 484, 490, 495, 499, 507, 515, 523, 533, 538], "oper": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "activ": 51, "argmax": 52, "attent": 53, "binary_op": 54, "concat": 55, "conv": 56, "direct_q8": 57, "embed_layernorm": 58, "gather": 59, "gavgpool": 60, "gemm": 61, "lstm": 63, "matmul": 64, "maxpool": 65, "op": 66, "pad": 67, "pool": 68, "resiz": 69, "split": 70, "tensorflow": [75, 455, 456, 457, 458, 459, 460, 461, 546, 550, 554, 565, 576, 579, 580, 583], "tf_util": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "graph_convert": 76, "graph_converter_without_calib": 77, "graph_rewrit": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "bf16": [78, 79], "bf16_convert": [78, 170], "gener": [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], "convert_add_to_biasadd": 80, "convert_layout": 81, "convert_leakyrelu": 82, "convert_nan_to_random": 83, "convert_placeholder_to_const": 84, "dequantize_cast_optim": 85, "dilated_contract": 86, "dummy_biasadd": 87, "expanddims_optim": 88, "fetch_weight_from_reshap": 89, "fold_batch_norm": 90, "fold_const": 91, "fuse_biasadd_add": 92, "fuse_column_wise_mul": 93, "fuse_conv_with_math": 94, "fuse_decomposed_bn": 95, "fuse_decomposed_in": 96, "fuse_gelu": 97, "fuse_layer_norm": 98, "fuse_pad_with_conv": 99, "fuse_pad_with_fp32_conv": 100, "fuse_reshape_transpos": 101, "graph_cse_optim": 102, "grappler_pass": 103, "insert_print_nod": 105, "move_squeeze_after_relu": 106, "pre_optim": 107, "remove_training_nod": 108, "rename_batch_norm": 109, "split_shared_input": 110, "strip_equivalent_nod": 111, "strip_unused_nod": 112, "switch_optim": 113, "update_ent": 114, "graph_bas": 115, "int8": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 557, 583], "freeze_fake_qu": 117, "freeze_valu": 118, "freeze_value_without_calib": 119, "fuse_conv_redundant_dequant": 120, "fuse_conv_requant": 121, "fuse_matmul_redundant_dequant": 122, "fuse_matmul_requant": 123, "meta_op_optim": 125, "post_hostconst_convert": 126, "post_quantized_op_cs": 127, "rnn_convert": 128, "scale_propag": 129, "qdq": [130, 131, 132, 133, 147, 148, 149, 150, 151, 152, 153, 154, 155, 583], "insert_qdq_pattern": 131, "merge_duplicated_qdq": 132, "share_qdq_y_pattern": 133, "graph_util": 134, "quantize_graph": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162], "qat": [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 583], "fake_quant": 137, "quantize_config": 139, "quantize_help": 140, "quantize_lay": [141, 142, 143, 144, 145], "optimize_lay": 142, "quantize_layer_add": 143, "quantize_layer_bas": 144, "quantize_layer_bn": 145, "quantize_wrapp": 146, "fuse_qdq_bn": 147, "fuse_qdq_concatv2": 148, "fuse_qdq_conv": 149, "fuse_qdq_deconv": 150, "fuse_qdq_in": 151, "fuse_qdq_matmul": 152, "fuse_qdq_pool": 153, "optimize_qdq": 155, "quantize_graph_bas": 156, "quantize_graph_bn": 157, "quantize_graph_concatv2": 158, "quantize_graph_conv": 159, "quantize_graph_for_intel_cpu": 160, "quantize_graph_matmul": 161, "quantize_graph_pool": 162, "quantize_graph_common": 163, "transform_graph": [164, 165, 166, 167, 168], "bias_correct": 164, "graph_transform_bas": 165, "insert_log": 167, "rerange_quantized_concat": 168, "torch_util": [170, 171, 172, 173, 174, 175, 226], "hawq_metr": 171, "symbolic_trac": 174, "algorithm": [176, 177, 178, 179], "fast_bias_correct": 177, "weight_correct": 179, "conf": [181, 182, 183, 184], "config": [181, 185, 519, 548, 549, 550, 568], "dotdict": 182, "pythonic_config": 184, "contrib": [186, 187, 188, 189], "sigopt": [188, 578, 581], "tpe": [189, 581], "base_dataload": [190, 228], "default_dataload": [192, 230], "fetcher": [193, 231], "mxnet_dataload": [195, 233], "onnxrt_dataload": [196, 234], "pytorch_dataload": [197, 235], "sampler": [198, 236], "tensorflow_dataload": [199, 237], "bert_dataset": [200, 238], "coco_dataset": [201, 239], "dummy_dataset": [203, 241], "dummy_dataset_v2": [204, 242], "imagenet_dataset": [205, 243], "style_transfer_dataset": [207, 245], "filter": [208, 209, 210, 246, 247, 248], "coco_filt": [208, 246], "coco_transform": 212, "imagenet_transform": [213, 250], "postprocess": [215, 225], "token": [216, 252], "experiment": [218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301], "export": [255, 256, 257, 258, 557], "qlinear2qdq": 256, "torch2onnx": 257, "graph_optim": [259, 471, 472, 473, 522], "bleu_util": [262, 304], "coco_label_map": [263, 305], "coco_tool": [264, 306], "evaluate_squad": [265, 307], "f1": [266, 308], "mixed_precis": [269, 475, 476, 477, 524], "model_convers": 270, "basic_na": 271, "dyna": 272, "dynast": [273, 274, 275, 276, 277, 278, 279, 280, 281, 282], "dynas_manag": 273, "dynas_predictor": 274, "dynas_search": 275, "dynas_util": 276, "supernetwork": [278, 279, 280, 281, 282], "machine_transl": [279, 280, 281, 282], "modules_supernetwork": 280, "transformer_interfac": 281, "transformer_supernetwork": 282, "nas_util": 285, "search_algorithm": 286, "pruning_recip": [288, 289, 290, 291], "pattern": [289, 290, 291, 295, 325, 571, 572], "tile_pattern": 291, "pruning_v2": 292, "pytorch_prun": [293, 294, 295, 296, 297, 298, 299], "logger": [294, 324, 360, 509], "prune_util": 296, "pruner": [297, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336], "mix_precis": 311, "base_model": 312, "keras_model": 314, "mxnet_model": 316, "nets_factori": 317, "onnx_model": 318, "tensorflow_model": 319, "torch_model": 320, "object": [321, 568], "criteria": [322, 571, 572, 581], "pruner_legaci": [326, 327, 328, 329, 330, 331], "gradient_sensit": 326, "group_lasso": 327, "magnitud": 329, "pattern_lock": 330, "reg": 334, "auto_mixed_precis": 338, "bayesian": [340, 581], "conserv": 341, "exhaust": [342, 581], "hawq_v2": [343, 581], "mse": [345, 581], "mse_v2": [346, 581], "random": [347, 581], "tuning_sampl": 350, "tuning_spac": 351, "tuning_struct": 352, "collect_layer_histogram": 354, "constant": 355, "create_obj_from_config": 356, "kl_diverg": 358, "load_huggingfac": 359, "option": [361, 547, 554, 563], "ux": [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], "benchmark_model": 365, "execute_benchmark": 366, "config_gener": [368, 369, 370, 371, 372, 373, 374, 375], "benchmark_config_gener": 368, "graph_optimization_config_gener": 370, "mixed_precision_config_gener": 372, "profiling_config_gener": 373, "pruning_config_gener": 374, "quantization_config_gener": 375, "configuration_wizard": [376, 377, 378, 379, 380, 381], "configuration_pars": 376, "get_boundary_nod": 377, "get_configur": 378, "params_feed": 380, "pruning_config_pars": 381, "db_manag": [382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417], "db_model": [383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403], "benchmark_result": 384, "domain": [387, 445], "domain_flavour": 388, "framework": [390, 549, 550, 557, 559, 567, 574], "optimization_typ": 395, "precis": [396, 566, 576], "profil": [397, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 541, 547], "profiling_result": 398, "project": [399, 547], "pruning_detail": 400, "tuning_detail": 402, "tuning_histori": [403, 487], "db_oper": [404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414], "benchmark_api_interfac": 404, "dataset_api_interfac": 405, "diagnosis_api_interfac": 407, "dictionaries_api_interfac": 408, "examples_api_interfac": 409, "model_api_interfac": 411, "optimization_api_interfac": 412, "profiling_api_interfac": 413, "project_api_interfac": 414, "params_interfac": 416, "diagnosi": [418, 419, 420, 421, 422, 423, 424, 425, 426, 547], "factori": [419, 470, 489, 494], "onnx_diagnosi": [421, 422], "onnxrt_diagnosi": 422, "op_detail": 423, "op_entri": 424, "tensorflow_diagnosi": [425, 426], "file_brows": [427, 428], "graph": [429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 547], "collaps": 430, "edg": 431, "graph_read": 433, "node": 435, "reader": [436, 437, 438], "onnxrt_read": 437, "tensorflow_read": 438, "jobs_manag": [440, 441, 442, 443], "jobs_control_queu": 441, "manage_workspac": 444, "model_type_gett": 448, "repositori": 453, "shape": 454, "frozen_pb": 455, "meta_graph": 458, "saved_model": 460, "model_zoo": [462, 463, 464, 465, 466], "download_config": 462, "download_model": 463, "download": 464, "list_model": 466, "names_mapp": [467, 468], "execute_optim": 469, "optimize_model": [473, 477, 479, 482], "neural_coder_optim": [478, 479], "tune": [484, 485, 486, 528, 575, 581], "tune_model": 485, "execute_profil": 488, "profile_model": 491, "tensorflow_profil": [494, 495, 496, 497], "inc_bench": 498, "const": 500, "except": [502, 532], "executor": 503, "expiring_dict": 504, "github_info": 505, "hw_info": 506, "json_seri": 508, "parser": 510, "proc": 511, "process": 512, "singleton": 513, "status_upd": 514, "workdir": 517, "workload": [519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 544], "evalu": [521, 548, 554], "yaml_util": 529, "web": [530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], "commun": 530, "configur": [531, 554, 559, 570, 574, 578, 582], "router": 534, "server": 535, "servic": [536, 537, 538, 539, 540, 541, 542, 543, 544], "history_snapshot_pars": 537, "request_data_processor": 542, "response_gener": 543, "version": 545, "ipex": 546, "refer": [546, 572], "bench": 547, "tabl": 547, "from": [547, 563], "binari": [547, 563], "sourc": [547, 563], "home": 547, "screen": 547, "creat": [547, 549], "predefin": 547, "displai": 547, "list": [547, 580], "remov": 547, "develop": 547, "tab": 547, "wizard": 547, "edit": 547, "entri": 547, "inform": [547, 564], "file": [548, 549, 550, 559, 582], "us": 548, "user": [548, 549, 550, 553, 554, 560, 574, 582], "specif": [548, 549, 550], "run": 548, "workflow": 551, "knowledg": [552, 583], "intermedi": 552, "layer": 552, "self": 552, "defin": [553, 554], "distribut": 554, "infer": 554, "featur": [554, 559, 562, 574, 575, 579, 582], "pure": 554, "horovodrun": 554, "execut": 554, "fp32": 557, "appendix": 557, "frequent": 558, "ask": 558, "question": 558, "build": [558, 565], "issu": [558, 577], "3": [558, 563], "incompat": [560, 577], "chang": [560, 577], "between": 560, "v1": 560, "face": 560, "section": 561, "infrastructur": 562, "ai": 563, "kit": 563, "window": 563, "legal": 564, "licens": 564, "citat": 564, "trademark": 564, "singl": [565, 568], "multi": [565, 569], "mix": [566, 576], "orchestr": 569, "One": 569, "shot": 569, "network": [571, 572], "type": 572, "regular": 572, "full": 573, "49": 573, "2022": 573, "31": 573, "2021": 573, "14": 573, "2018": 573, "2020": 573, "4": 573, "style": 574, "access": 574, "fundament": 575, "approach": 575, "accuraci": [575, 581], "turn": 576, "ON": 576, "auto": 576, "dure": 576, "releas": 577, "known": 577, "prepar": 578, "platform": 578, "perform": 578, "benefit": 578, "comparison": 578, "differ": 578, "tensorboard": 579, "space": 581, "exit": 581, "travers": 581, "logic": 581, "o0": 581, "mlperf": 583, "10": 583, "torch": 583, "12": 583, "11": 583, "7": 583}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributor Covenant Code of Conduct": [[0, "contributor-covenant-code-of-conduct"], [1, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[0, "our-pledge"]], "Our Standards": [[0, "our-standards"]], "Our Responsibilities": [[0, "our-responsibilities"]], "Scope": [[0, "scope"]], "Enforcement": [[0, "enforcement"]], "Attribution": [[0, "attribution"]], "Contribution Guidelines": [[1, "contribution-guidelines"]], "Pull Request Checklist": [[1, "pull-request-checklist"]], "Pull Request Template": [[1, "pull-request-template"]], "Support": [[1, "support"]], "FX": [[2, "fx"]], "Introduction": [[2, "introduction"], [3, "introduction"], [8, "introduction"], [547, "introduction"], [549, "introduction"], [550, "introduction"], [552, "introduction"], [553, "introduction"], [554, "introduction"], [557, "introduction"], [559, "introduction"], [562, "introduction"], [565, "introduction"], [566, "introduction"], [567, "introduction"], [568, "introduction"], [569, "introduction"], [571, "introduction"], [572, "introduction"], [574, "introduction"], [578, "introduction"], [579, "introduction"], [580, "introduction"], [581, "introduction"], [582, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[2, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[2, "get-start"]], "Post Training Static Quantization": [[2, "post-training-static-quantization"], [575, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[2, "post-training-dynamic-quantization"], [575, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[2, "quantization-aware-training"]], "Examples": [[2, "examples"], [3, "examples"], [5, "examples"], [548, "examples"], [549, "examples"], [550, "examples"], [552, "examples"], [553, "examples"], [554, "examples"], [556, "examples"], [557, "examples"], [566, "examples"], [567, "examples"], [569, "examples"], [571, "examples"], [575, "examples"], [579, "examples"]], "Note": [[2, "note"]], "Details": [[2, "details"]], "Common Problem": [[2, "common-problem"]], "Dynamic Quantization": [[2, "dynamic-quantization"], [555, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[2, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[3, "neural-architecture-search"]], "Basic NAS": [[3, "basic-nas"]], "Dynamic NAS": [[3, "dynamic-nas"]], "NAS Support Matrix": [[3, "nas-support-matrix"]], "Get Started with NAS API": [[3, "get-started-with-nas-api"]], "Basic Usage": [[3, "basic-usage"]], "1. Python code + YAML": [[3, "python-code-yaml"]], "2. Python code only": [[3, "python-code-only"]], "Advanced Usage (Custom NAS)": [[3, "advanced-usage-custom-nas"]], "PTQ": [[4, "ptq"], [4, "id1"]], "Design": [[4, "design"], [5, "design"], [551, "design"], [581, "design"], [581, "id1"], [581, "id3"], [581, "id5"], [581, "id7"], [581, "id9"], [581, "id11"], [581, "id13"], [581, "id15"], [581, "id17"]], "PyTorch Usage": [[4, "pytorch-usage"]], "MobileNetV2 Model Architecture": [[4, "mobilenetv2-model-architecture"]], "Helper Functions": [[4, "helper-functions"]], "Example": [[4, "example"], [568, "example"]], "Quantization-aware Training": [[5, "quantization-aware-training"]], "Usage": [[5, "usage"], [579, "usage"], [579, "id1"], [581, "usage"], [581, "id2"], [581, "id4"], [581, "id6"], [581, "id8"], [581, "id10"], [581, "id12"], [581, "id14"], [581, "id16"], [581, "id18"]], "Security Policy": [[6, "security-policy"]], "Report a Vulnerability": [[6, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[7, "intel-neural-compressor"]], "Installation": [[7, "installation"], [563, "installation"]], "Prerequisites": [[7, "prerequisites"], [563, "prerequisites"], [563, "id1"]], "Install on Linux": [[7, "install-on-linux"]], "Getting Started": [[7, "getting-started"]], "Quantization with Python API": [[7, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[7, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[7, "quantization-with-gui"]], "System Requirements": [[7, "system-requirements"]], "Validated Hardware Environment": [[7, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[7, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[7, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[7, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[7, "validated-software-environment"]], "Validated Models": [[7, "validated-models"], [583, "validated-models"]], "Documentation": [[7, "documentation"]], "Selected Publications/Events": [[7, "selected-publications-events"]], "Additional Content": [[7, "additional-content"]], "Hiring": [[7, "hiring"]], "Adaptor": [[8, "adaptor"], [9, "adaptor"]], "Adaptor Support Matrix": [[8, "adaptor-support-matrix"]], "Working Flow": [[8, "working-flow"], [575, "working-flow"]], "Get Start with Adaptor API": [[8, "get-start-with-adaptor-api"]], "Query API": [[8, "query-api"]], "Background": [[8, "background"]], "Query API Introduction": [[8, "query-api-introduction"]], "Example of Adding a New Backend Support": [[8, "example-of-adding-a-new-backend-support"]], "Capability": [[8, "capability"]], "Implement ONNXRTAdaptor Class": [[8, "implement-onnxrtadaptor-class"]], "ONNXRT": [[10, "onnxrt"], [550, "onnxrt"], [565, "onnxrt"], [580, "onnxrt"]], "APIs": [[11, "apis"]], "Common": [[12, "common"]], "Benchmark": [[13, "benchmark"], [574, "benchmark"]], "BLEU": [[14, "module-neural_compressor.experimental.metric.bleu"]], "Module Contents": [[14, "module-contents"], [35, "module-contents"], [39, "module-contents"], [40, "module-contents"], [42, "module-contents"], [45, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [78, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [105, "module-contents"], [106, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [137, "module-contents"], [139, "module-contents"], [140, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [171, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [185, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [212, "module-contents"], [213, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [230, "module-contents"], [231, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [261, "module-contents"], [262, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [310, "module-contents"], [312, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [325, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [356, "module-contents"], [358, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [426, "module-contents"], [427, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [435, "module-contents"], [437, "module-contents"], [438, "module-contents"], [444, "module-contents"], [445, "module-contents"], [447, "module-contents"], [448, "module-contents"], [450, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"], [455, "module-contents"], [457, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [466, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [473, "module-contents"], [476, "module-contents"], [477, "module-contents"], [479, "module-contents"], [480, "module-contents"], [482, "module-contents"], [483, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [514, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [524, "module-contents"], [525, "module-contents"], [526, "module-contents"], [527, "module-contents"], [528, "module-contents"], [529, "module-contents"], [530, "module-contents"], [531, "module-contents"], [532, "module-contents"], [534, "module-contents"], [535, "module-contents"], [536, "module-contents"], [537, "module-contents"], [539, "module-contents"], [540, "module-contents"], [541, "module-contents"], [542, "module-contents"], [543, "module-contents"], [544, "module-contents"]], "Classes": [[14, "classes"], [26, "classes"], [40, "classes"], [42, "classes"], [45, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [78, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [105, "classes"], [106, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [137, "classes"], [139, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [167, "classes"], [168, "classes"], [171, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [185, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [227, "classes"], [228, "classes"], [230, "classes"], [231, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [264, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [280, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [295, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [306, "classes"], [309, "classes"], [310, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [325, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [357, "classes"], [358, "classes"], [363, "classes"], [364, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [416, "classes"], [418, "classes"], [419, "classes"], [422, "classes"], [423, "classes"], [424, "classes"], [426, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [435, "classes"], [437, "classes"], [438, "classes"], [445, "classes"], [447, "classes"], [450, "classes"], [452, "classes"], [453, "classes"], [454, "classes"], [455, "classes"], [457, "classes"], [458, "classes"], [459, "classes"], [460, "classes"], [464, "classes"], [468, "classes"], [470, "classes"], [471, "classes"], [474, "classes"], [476, "classes"], [480, "classes"], [483, "classes"], [486, "classes"], [487, "classes"], [489, "classes"], [492, "classes"], [493, "classes"], [494, "classes"], [496, "classes"], [500, "classes"], [501, "classes"], [503, "classes"], [504, "classes"], [505, "classes"], [506, "classes"], [508, "classes"], [510, "classes"], [511, "classes"], [512, "classes"], [513, "classes"], [516, "classes"], [517, "classes"], [519, "classes"], [520, "classes"], [521, "classes"], [522, "classes"], [524, "classes"], [525, "classes"], [526, "classes"], [527, "classes"], [528, "classes"], [530, "classes"], [531, "classes"], [534, "classes"], [536, "classes"], [537, "classes"], [539, "classes"], [540, "classes"], [541, "classes"], [542, "classes"], [543, "classes"], [544, "classes"]], "Criterion": [[15, "criterion"]], "Data": [[16, "data"]], "Dataloader": [[17, "dataloader"]], "BaseDataLoader": [[17, "basedataloader"]], "dataloaders": [[17, "dataloaders"]], "Datasets": [[18, "datasets"]], "Transforms": [[19, "transforms"]], "Metric": [[20, "metric"]], "Model": [[21, "model"], [30, "model"], [567, "model"]], "Optimizer": [[22, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[23, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[24, "distillation"], [552, "distillation"], [574, "distillation"]], "MixedPrecision": [[25, "mixedprecision"]], "Neural architecture search (NAS)": [[26, "neural-architecture-search-nas"]], "Package Contents": [[26, "package-contents"], [41, "package-contents"], [62, "package-contents"], [178, "package-contents"], [194, "package-contents"], [206, "package-contents"], [210, "package-contents"], [211, "package-contents"], [214, "package-contents"], [221, "package-contents"], [232, "package-contents"], [244, "package-contents"], [248, "package-contents"], [249, "package-contents"], [251, "package-contents"], [255, "package-contents"], [260, "package-contents"], [267, "package-contents"], [283, "package-contents"], [288, "package-contents"], [289, "package-contents"], [302, "package-contents"], [309, "package-contents"], [313, "package-contents"], [328, "package-contents"], [344, "package-contents"], [349, "package-contents"], [357, "package-contents"], [367, "package-contents"], [410, "package-contents"], [415, "package-contents"], [474, "package-contents"]], "Pruning": [[27, "pruning"], [547, "pruning"], [571, "pruning"], [574, "pruning"]], "Quantization": [[28, "quantization"], [574, "quantization"], [575, "quantization"]], "Scheduler": [[29, "scheduler"]], "Pythonic": [[31, "pythonic"]], "Strategy": [[32, "strategy"]], "Strategies": [[33, "strategies"]], "644ec953a7dc_pruning_support": [[34, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[35, "module-6ece06672ed3_v1_14"]], "Functions": [[35, "functions"], [39, "functions"], [40, "functions"], [47, "functions"], [66, "functions"], [72, "functions"], [73, "functions"], [95, "functions"], [96, "functions"], [98, "functions"], [140, "functions"], [169, "functions"], [171, "functions"], [175, "functions"], [176, "functions"], [178, "functions"], [180, "functions"], [182, "functions"], [192, "functions"], [200, "functions"], [202, "functions"], [206, "functions"], [209, "functions"], [210, "functions"], [211, "functions"], [214, "functions"], [216, "functions"], [217, "functions"], [218, "functions"], [219, "functions"], [221, "functions"], [224, "functions"], [226, "functions"], [230, "functions"], [238, "functions"], [240, "functions"], [244, "functions"], [247, "functions"], [248, "functions"], [249, "functions"], [251, "functions"], [252, "functions"], [253, "functions"], [255, "functions"], [256, "functions"], [257, "functions"], [258, "functions"], [261, "functions"], [262, "functions"], [264, "functions"], [265, "functions"], [266, "functions"], [267, "functions"], [268, "functions"], [276, "functions"], [280, "functions"], [281, "functions"], [285, "functions"], [290, "functions"], [295, "functions"], [296, "functions"], [297, "functions"], [299, "functions"], [303, "functions"], [304, "functions"], [306, "functions"], [307, "functions"], [308, "functions"], [309, "functions"], [310, "functions"], [315, "functions"], [319, "functions"], [321, "functions"], [322, "functions"], [325, "functions"], [331, "functions"], [332, "functions"], [334, "functions"], [335, "functions"], [336, "functions"], [337, "functions"], [340, "functions"], [348, "functions"], [353, "functions"], [356, "functions"], [362, "functions"], [363, "functions"], [365, "functions"], [366, "functions"], [376, "functions"], [377, "functions"], [378, "functions"], [380, "functions"], [385, "functions"], [387, "functions"], [388, "functions"], [390, "functions"], [392, "functions"], [395, "functions"], [396, "functions"], [401, "functions"], [404, "functions"], [405, "functions"], [406, "functions"], [417, "functions"], [427, "functions"], [444, "functions"], [448, "functions"], [450, "functions"], [461, "functions"], [462, "functions"], [463, "functions"], [466, "functions"], [469, "functions"], [473, "functions"], [477, "functions"], [479, "functions"], [482, "functions"], [485, "functions"], [487, "functions"], [488, "functions"], [491, "functions"], [497, "functions"], [498, "functions"], [506, "functions"], [509, "functions"], [514, "functions"], [518, "functions"], [526, "functions"], [529, "functions"], [530, "functions"], [534, "functions"], [535, "functions"]], "6f0d0f71d92e_v1_13": [[36, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[37, "module-9e89549a08c8_v1_11"]], "block_mask": [[38, "module-block_mask"]], "env": [[39, "module-env"]], "neural_compressor.adaptor.adaptor": [[40, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[41, "module-neural_compressor.adaptor"]], "Subpackages": [[41, "subpackages"], [50, "subpackages"], [211, "subpackages"], [249, "subpackages"], [260, "subpackages"], [277, "subpackages"], [278, "subpackages"], [283, "subpackages"], [288, "subpackages"], [302, "subpackages"], [344, "subpackages"], [415, "subpackages"], [420, "subpackages"], [434, "subpackages"], [439, "subpackages"], [446, "subpackages"], [474, "subpackages"], [490, "subpackages"], [499, "subpackages"], [507, "subpackages"], [533, "subpackages"]], "neural_compressor.adaptor.keras": [[42, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils": [[43, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[44, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[45, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[46, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[47, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[48, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[49, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[50, "module-neural_compressor.adaptor.ox_utils"]], "Submodules": [[50, "submodules"], [62, "submodules"], [178, "submodules"], [194, "submodules"], [206, "submodules"], [210, "submodules"], [214, "submodules"], [221, "submodules"], [232, "submodules"], [244, "submodules"], [248, "submodules"], [251, "submodules"], [255, "submodules"], [260, "submodules"], [267, "submodules"], [277, "submodules"], [279, "submodules"], [283, "submodules"], [289, "submodules"], [293, "submodules"], [309, "submodules"], [313, "submodules"], [323, "submodules"], [344, "submodules"], [349, "submodules"], [357, "submodules"], [367, "submodules"], [371, "submodules"], [379, "submodules"], [391, "submodules"], [410, "submodules"], [415, "submodules"], [420, "submodules"], [421, "submodules"], [425, "submodules"], [428, "submodules"], [434, "submodules"], [436, "submodules"], [439, "submodules"], [440, "submodules"], [446, "submodules"], [449, "submodules"], [451, "submodules"], [456, "submodules"], [465, "submodules"], [467, "submodules"], [472, "submodules"], [474, "submodules"], [475, "submodules"], [478, "submodules"], [481, "submodules"], [484, "submodules"], [490, "submodules"], [495, "submodules"], [499, "submodules"], [507, "submodules"], [515, "submodules"], [523, "submodules"], [533, "submodules"], [538, "submodules"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[51, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[52, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[53, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[54, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[55, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[56, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[57, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[58, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[59, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[60, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[61, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[62, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[63, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[64, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[65, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[66, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[67, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[68, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[69, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[70, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[71, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[72, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[73, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[74, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[75, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[76, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[77, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[133, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[134, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[135, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[162, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[163, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[164, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[165, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[166, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[167, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[168, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[169, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[170, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[171, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[172, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[173, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[174, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[175, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[176, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[177, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[178, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[179, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[180, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[181, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[182, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[183, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[184, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[185, "module-neural_compressor.config"]], "neural_compressor.contrib": [[186, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[187, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[188, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[189, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[190, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[191, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[192, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[193, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[194, "module-neural_compressor.data.dataloaders"]], "Attributes": [[194, "attributes"], [202, "attributes"], [211, "attributes"], [240, "attributes"], [249, "attributes"], [260, "attributes"], [288, "attributes"], [313, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[195, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[196, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[197, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[198, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[199, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[200, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[201, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[202, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[203, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[204, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[205, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[206, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[207, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[208, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[209, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[210, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[211, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[212, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[213, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[214, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[215, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[216, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[217, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[218, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[219, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[220, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[221, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[222, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[223, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[224, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[225, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[226, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[227, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[231, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[232, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[236, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[238, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[239, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[240, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[241, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[242, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[243, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[244, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[245, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[246, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[247, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[248, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[249, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[250, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[251, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[252, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[253, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[254, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[255, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[256, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.torch2onnx": [[257, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[258, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[259, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[260, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[261, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[262, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[263, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[264, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[265, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[266, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[267, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[268, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[269, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[270, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[271, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[272, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[273, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[274, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[275, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[276, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[277, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[278, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[279, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[280, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[281, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[282, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "neural_compressor.experimental.nas": [[283, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[284, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[285, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[286, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[287, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[288, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[290, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[292, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[293, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[294, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[295, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[296, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[297, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[298, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[299, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[300, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[301, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[302, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[303, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[304, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[305, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[306, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[307, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[308, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[309, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[310, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[311, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[312, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[313, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[314, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[315, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[316, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[317, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[318, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[319, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[320, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[321, "module-neural_compressor.objective"]], "neural_compressor.pruner.criteria": [[322, "module-neural_compressor.pruner.criteria"]], "neural_compressor.pruner": [[323, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[324, "module-neural_compressor.pruner.logger"]], "neural_compressor.pruner.patterns": [[325, "module-neural_compressor.pruner.patterns"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[326, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[327, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[328, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[329, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[330, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[331, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "neural_compressor.pruner.pruners": [[332, "module-neural_compressor.pruner.pruners"]], "neural_compressor.pruner.pruning": [[333, "module-neural_compressor.pruner.pruning"]], "neural_compressor.pruner.regs": [[334, "module-neural_compressor.pruner.regs"]], "neural_compressor.pruner.schedulers": [[335, "module-neural_compressor.pruner.schedulers"]], "neural_compressor.pruner.utils": [[336, "module-neural_compressor.pruner.utils"]], "neural_compressor.quantization": [[337, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[338, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[339, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[340, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[341, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[342, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[343, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[344, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[345, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[346, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[347, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[348, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils": [[349, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[350, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[351, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[352, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.training": [[353, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[354, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[355, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[356, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[357, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[358, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[359, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[360, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[361, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[362, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[363, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[364, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[365, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[366, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[367, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[368, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[369, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[370, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[371, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[372, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[373, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[374, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[375, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[376, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[377, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[378, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[379, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[380, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[381, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[382, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[383, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[384, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[385, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[386, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[387, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[388, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[389, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[390, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[391, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[392, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[393, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[394, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[395, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[396, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[397, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[398, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[399, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[400, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[401, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[402, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[403, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[404, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[405, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[408, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[409, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[410, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[412, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[413, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[414, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[415, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[416, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[417, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[418, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[419, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[420, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[421, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[422, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[423, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[424, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[425, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[426, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[427, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[428, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[429, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[430, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[431, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[432, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[433, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[434, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[435, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[436, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[437, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[438, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[439, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[440, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[441, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[442, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[443, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[444, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[445, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[446, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[447, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[448, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[449, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[450, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[451, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[452, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[453, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[454, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[455, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[456, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[457, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[458, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[459, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[460, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[461, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[462, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[463, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[464, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[465, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[466, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[467, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[468, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[469, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[470, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[471, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[472, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[473, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[474, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[475, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[476, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[477, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[478, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[479, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[480, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[481, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[482, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[483, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[484, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[485, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[486, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[487, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[488, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[489, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[490, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[491, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[492, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[493, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[494, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[495, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[496, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[497, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[498, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[499, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[500, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[501, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[502, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[503, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[504, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[505, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[506, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[507, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[508, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[509, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[510, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[511, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[512, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[513, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[514, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[515, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[516, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[517, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[518, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[519, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[520, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[521, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[522, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[523, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[524, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[525, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[526, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[527, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[528, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[529, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[530, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[531, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[532, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[533, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[534, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[535, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[536, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[537, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[538, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[539, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[540, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[541, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[542, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[543, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[544, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[545, "module-neural_compressor.version"]], "Quantization Support Matrix": [[546, "quantization-support-matrix"]], "TensorFlow": [[546, "tensorflow"], [550, "tensorflow"], [565, "tensorflow"], [580, "tensorflow"]], "PyTorch": [[546, "pytorch"], [550, "pytorch"], [565, "pytorch"], [576, "pytorch"]], "PyTorch IPEX": [[546, "pytorch-ipex"]], "MXNet": [[546, "mxnet"], [550, "mxnet"], [565, "mxnet"], [580, "mxnet"]], "ONNX Runtime": [[546, "onnx-runtime"]], "Reference": [[546, "reference"], [572, "reference"]], "Intel\u00ae Neural Compressor Bench": [[547, "intel-neural-compressor-bench"]], "Table of Contents": [[547, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[547, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[547, "option-1-install-from-binary"]], "Option 2: Install from Source": [[547, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[547, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[547, "home-screen"]], "Create New Project": [[547, "create-new-project"]], "Predefined Model": [[547, "predefined-model"]], "Custom Model": [[547, "custom-model"]], "Display Model Graph": [[547, "display-model-graph"]], "Project List": [[547, "project-list"]], "Remove Project": [[547, "remove-project"]], "Develop Project": [[547, "develop-project"]], "Optimization Tab": [[547, "optimization-tab"]], "Optimization Table": [[547, "optimization-table"]], "Optimization Wizard": [[547, "optimization-wizard"]], "Editing Optimization Entries": [[547, "editing-optimization-entries"]], "Optimization Details": [[547, "optimization-details"]], "Benchmark Tab": [[547, "benchmark-tab"]], "Benchmark Table": [[547, "benchmark-table"]], "Benchmark Wizard": [[547, "benchmark-wizard"]], "Editing Benchmark Entries": [[547, "editing-benchmark-entries"]], "Benchmark Details": [[547, "benchmark-details"]], "Profiling Tab": [[547, "profiling-tab"]], "Profiling Table": [[547, "profiling-table"]], "Profiling Wizard": [[547, "profiling-wizard"]], "Editing Profiling Entries": [[547, "editing-profiling-entries"]], "Profiling Details": [[547, "profiling-details"]], "Diagnosis Tab": [[547, "diagnosis-tab"]], "Dataset Tab": [[547, "dataset-tab"]], "Dataset List": [[547, "dataset-list"]], "Dataset Wizard": [[547, "dataset-wizard"]], "Dataset Details": [[547, "dataset-details"]], "Custom Dataset": [[547, "custom-dataset"]], "Project Information": [[547, "project-information"]], "System Information": [[547, "system-information"]], "Security": [[547, "security"], [554, "security"]], "Benchmarking": [[548, "benchmarking"]], "Config evaluation filed in a yaml file": [[548, "config-evaluation-filed-in-a-yaml-file"]], "Use a user-specific dataloader to run benchmark": [[548, "use-a-user-specific-dataloader-to-run-benchmark"]], "DataLoader": [[549, "dataloader"]], "Supported Framework Dataloader Matrix": [[549, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[549, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[549, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[549, "create-a-user-specific-dataloader"]], "Dataset": [[550, "dataset"]], "Supported Framework Dataset Matrix": [[550, "supported-framework-dataset-matrix"]], "Get start with Dataset API": [[550, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[550, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[550, "user-specific-dataset"]], "Architecture": [[551, "architecture"], [562, "architecture"]], "Workflow": [[551, "workflow"]], "Knowledge Distillation": [[552, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[552, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[552, "self-distillation"]], "Distillation Support Matrix": [[552, "distillation-support-matrix"]], "Get Started with Distillation API": [[552, "get-started-with-distillation-api"]], "Distillation for Quantization": [[553, "distillation-for-quantization"]], "User-defined yaml": [[553, "user-defined-yaml"]], "Distributed Training and Inference (Evaluation)": [[554, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[554, "supported-feature-matrix"], [559, "supported-feature-matrix"], [562, "supported-feature-matrix"], [574, "supported-feature-matrix"], [575, "supported-feature-matrix"], [579, "supported-feature-matrix"], [582, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[554, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[554, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[554, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[554, "horovodrun-execution"]], "PyTorch Examples:": [[554, "pytorch-examples"]], "TensorFlow Examples:": [[554, "tensorflow-examples"]], "Export": [[557, "export"]], "Supported Framework Model Matrix": [[557, "supported-framework-model-matrix"], [567, "supported-framework-model-matrix"]], "FP32 Model Export": [[557, "fp32-model-export"]], "INT8 Model Export": [[557, "int8-model-export"]], "Appendix": [[557, "appendix"]], "Frequently Asked Questions": [[558, "frequently-asked-questions"]], "Common Build Issues": [[558, "common-build-issues"]], "Issue 1:": [[558, "issue-1"]], "Issue 2:": [[558, "issue-2"]], "Issue 3:": [[558, "issue-3"]], "Framework YAML Configuration Files": [[559, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[559, "get-started-with-framework-yaml-files"]], "Incompatible changes between v1.2 and v1.1": [[560, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[560, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[560, "built-in-transform-dataset-metric-apis"]], "Intel\u00ae Neural Compressor Documentation": [[561, "intel-neural-compressor-documentation"]], "Sections": [[561, "sections"]], "Infrastructure of Intel\u00ae Neural Compressor": [[562, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[563, "linux-installation"]], "Option 1 Install from Binary": [[563, "option-1-install-from-binary"], [563, "id2"]], "Option 2 Install from Source": [[563, "option-2-install-from-source"], [563, "id3"]], "Option 3 Install from AI Kit": [[563, "option-3-install-from-ai-kit"]], "Windows Installation": [[563, "windows-installation"]], "Legal Information": [[564, "legal-information"]], "License": [[564, "license"]], "Citation": [[564, "citation"]], "Trademarks": [[564, "trademarks"]], "Metrics": [[565, "metrics"]], "Supported Built-in Metric Matrix": [[565, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[565, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[565, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[565, "build-custom-metric-with-python-api"]], "Mixed Precision": [[566, "mixed-precision"]], "Mixed Precision Support Matrix": [[566, "mixed-precision-support-matrix"]], "Get start with Mixed Precision API": [[566, "get-start-with-mixed-precision-api"]], "Objective": [[568, "objective"]], "Single Objective": [[568, "single-objective"]], "Multiple Objectives": [[568, "multiple-objectives"]], "Objective Support Matrix": [[568, "objective-support-matrix"]], "Get Start with Objective API": [[568, "get-start-with-objective-api"]], "Config Single Objective": [[568, "config-single-objective"]], "Config Multiple Objectives": [[568, "config-multiple-objectives"]], "Config Custom Objective": [[568, "config-custom-objective"]], "Optimization Orchestration": [[569, "optimization-orchestration"]], "One-shot": [[569, "one-shot"]], "Multi-shot": [[569, "multi-shot"]], "Orchestration Support Matrix": [[569, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[569, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[570, "system-configuration"]], "Neural Network Pruning": [[571, "neural-network-pruning"], [572, "neural-network-pruning"]], "Pruning Patterns": [[571, "pruning-patterns"], [572, "pruning-patterns"]], "Pruning Criteria": [[571, "pruning-criteria"], [572, "pruning-criteria"]], "Pruning Schedule": [[571, "pruning-schedule"], [572, "pruning-schedule"]], "Pruning Support Matrix": [[571, "pruning-support-matrix"]], "Get Started with Pruning API": [[571, "get-started-with-pruning-api"]], "Pruning Type": [[572, "pruning-type"]], "Regularization": [[572, "regularization"]], "Pruning Examples": [[572, "pruning-examples"]], "Full Publications/Events (49)": [[573, "full-publications-events-49"]], "2022 (31)": [[573, "id1"]], "2021 (14)": [[573, "id2"]], "2018 - 2020 (4)": [[573, "id3"]], "Pythonic Style Access for Configurations": [[574, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[574, "pythonic-api-for-user-configurations"], [574, "id1"]], "Pythonic API for Framework Configurations": [[574, "pythonic-api-for-framework-configurations"], [574, "id2"]], "Get Started with Pythonic API for Configurations": [[574, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[574, "nas"]], "Quantization Introduction": [[575, "quantization-introduction"]], "Quantization Fundamentals": [[575, "quantization-fundamentals"]], "Quantization Approaches": [[575, "quantization-approaches"]], "Quantization Aware Training": [[575, "quantization-aware-training"]], "Accuracy Aware Tuning": [[575, "accuracy-aware-tuning"]], "Get Started": [[575, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[576, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[576, "tensorflow"]], "Release": [[577, "release"]], "Release Notes": [[577, "release-notes"]], "Known Issues": [[577, "known-issues"]], "Incompatible Changes": [[577, "incompatible-changes"]], "SigOpt Strategy": [[578, "sigopt-strategy"]], "Preparation": [[578, "preparation"]], "SigOpt Platform": [[578, "sigopt-platform"]], "Neural Compressor Configuration": [[578, "neural-compressor-configuration"]], "Performance": [[578, "performance"]], "Benefit of SigOpt Strategy": [[578, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[578, "performance-comparison-of-different-strategies"]], "TensorBoard": [[579, "tensorboard"]], "Get Started with TensorBoard": [[579, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[579, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[579, "tensorflow-tensorboard"]], "PyTorch Examples": [[579, "pytorch-examples"]], "TensorFlow Examples": [[579, "tensorflow-examples"]], "Transform": [[580, "transform"]], "Transform Support List": [[580, "transform-support-list"]], "Pytorch": [[580, "pytorch"]], "Tuning Strategies": [[581, "tuning-strategies"]], "Strategy Design": [[581, "strategy-design"]], "Tuning Space": [[581, "tuning-space"]], "Exit Policy": [[581, "exit-policy"]], "Accuracy Criteria": [[581, "accuracy-criteria"]], "Traverse": [[581, "traverse"]], "Traverse Logic": [[581, "traverse-logic"]], "O0": [[581, "o0"]], "Basic": [[581, "basic"]], "MSE": [[581, "mse"]], "MSE_V2": [[581, "mse-v2"]], "HAWQ_V2": [[581, "hawq-v2"]], "Bayesian": [[581, "bayesian"]], "Exhaustive": [[581, "exhaustive"]], "Random": [[581, "random"]], "SigOpt": [[581, "sigopt"]], "TPE": [[581, "tpe"]], "Customize a New Tuning Strategy": [[581, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[582, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[582, "get-started-with-user-yaml-files"]], "Validated MLPerf Models": [[583, "validated-mlperf-models"]], "Validated Quantization Examples": [[583, "validated-quantization-examples"]], "TensorFlow models with TensorFlow 2.10.0": [[583, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch models with Torch 1.12.1+cpu in PTQ mode": [[583, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch models with Torch 1.12.1+cpu in QAT mode": [[583, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[583, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[583, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet models with MXNet 1.7.0": [[583, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[583, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[583, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 models on multiple hardware through ONNX Runtime": [[583, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"bleu (class in neural_compressor.experimental.metric.bleu)": [[14, "neural_compressor.experimental.metric.bleu.BLEU"], [261, "neural_compressor.experimental.metric.bleu.BLEU"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[14, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [261, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "module": [[14, "module-neural_compressor.experimental.metric.bleu"], [34, "module-644ec953a7dc_pruning_support"], [35, "module-6ece06672ed3_v1_14"], [36, "module-6f0d0f71d92e_v1_13"], [37, "module-9e89549a08c8_v1_11"], [38, "module-block_mask"], [39, "module-env"], [40, "module-neural_compressor.adaptor.adaptor"], [41, "module-neural_compressor.adaptor"], [42, "module-neural_compressor.adaptor.keras"], [43, "module-neural_compressor.adaptor.keras_utils"], [44, "module-neural_compressor.adaptor.keras_utils.quantizer"], [45, "module-neural_compressor.adaptor.mxnet"], [46, "module-neural_compressor.adaptor.mxnet_utils"], [47, "module-neural_compressor.adaptor.mxnet_utils.util"], [48, "module-neural_compressor.adaptor.onnxrt"], [49, "module-neural_compressor.adaptor.ox_utils.calibration"], [50, "module-neural_compressor.adaptor.ox_utils"], [51, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [52, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [53, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [54, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [55, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [56, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [57, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [58, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [59, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [60, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [61, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [62, "module-neural_compressor.adaptor.ox_utils.operators"], [63, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [64, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [65, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [66, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [67, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [68, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [69, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [70, "module-neural_compressor.adaptor.ox_utils.operators.split"], [71, "module-neural_compressor.adaptor.ox_utils.quantizer"], [72, "module-neural_compressor.adaptor.ox_utils.util"], [73, "module-neural_compressor.adaptor.pytorch"], [74, "module-neural_compressor.adaptor.query"], [75, "module-neural_compressor.adaptor.tensorflow"], [76, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [77, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [133, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [134, "module-neural_compressor.adaptor.tf_utils.graph_util"], [135, "module-neural_compressor.adaptor.tf_utils"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [162, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [163, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [164, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [165, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [166, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [167, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [168, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [169, "module-neural_compressor.adaptor.tf_utils.util"], [170, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [171, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [172, "module-neural_compressor.adaptor.torch_utils"], [173, "module-neural_compressor.adaptor.torch_utils.onnx"], [174, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [175, "module-neural_compressor.adaptor.torch_utils.util"], [176, "module-neural_compressor.algorithm.algorithm"], [177, "module-neural_compressor.algorithm.fast_bias_correction"], [178, "module-neural_compressor.algorithm"], [179, "module-neural_compressor.algorithm.weight_correction"], [180, "module-neural_compressor.benchmark"], [181, "module-neural_compressor.conf.config"], [182, "module-neural_compressor.conf.dotdict"], [183, "module-neural_compressor.conf"], [184, "module-neural_compressor.conf.pythonic_config"], [185, "module-neural_compressor.config"], [186, "module-neural_compressor.contrib"], [187, "module-neural_compressor.contrib.strategy"], [188, "module-neural_compressor.contrib.strategy.sigopt"], [189, "module-neural_compressor.contrib.strategy.tpe"], [190, "module-neural_compressor.data.dataloaders.base_dataloader"], [191, "module-neural_compressor.data.dataloaders.dataloader"], [192, "module-neural_compressor.data.dataloaders.default_dataloader"], [193, "module-neural_compressor.data.dataloaders.fetcher"], [194, "module-neural_compressor.data.dataloaders"], [195, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [196, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [197, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [198, "module-neural_compressor.data.dataloaders.sampler"], [199, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [200, "module-neural_compressor.data.datasets.bert_dataset"], [201, "module-neural_compressor.data.datasets.coco_dataset"], [202, "module-neural_compressor.data.datasets.dataset"], [203, "module-neural_compressor.data.datasets.dummy_dataset"], [204, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [205, "module-neural_compressor.data.datasets.imagenet_dataset"], [206, "module-neural_compressor.data.datasets"], [207, "module-neural_compressor.data.datasets.style_transfer_dataset"], [208, "module-neural_compressor.data.filters.coco_filter"], [209, "module-neural_compressor.data.filters.filter"], [210, "module-neural_compressor.data.filters"], [211, "module-neural_compressor.data"], [212, "module-neural_compressor.data.transforms.coco_transform"], [213, "module-neural_compressor.data.transforms.imagenet_transform"], [214, "module-neural_compressor.data.transforms"], [215, "module-neural_compressor.data.transforms.postprocess"], [216, "module-neural_compressor.data.transforms.tokenization"], [217, "module-neural_compressor.data.transforms.transform"], [218, "module-neural_compressor.experimental.benchmark"], [219, "module-neural_compressor.experimental.common.criterion"], [220, "module-neural_compressor.experimental.common.dataloader"], [221, "module-neural_compressor.experimental.common"], [222, "module-neural_compressor.experimental.common.metric"], [223, "module-neural_compressor.experimental.common.model"], [224, "module-neural_compressor.experimental.common.optimizer"], [225, "module-neural_compressor.experimental.common.postprocess"], [226, "module-neural_compressor.experimental.common.torch_utils"], [227, "module-neural_compressor.experimental.component"], [228, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [229, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [230, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [231, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [232, "module-neural_compressor.experimental.data.dataloaders"], [233, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [234, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [235, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [236, "module-neural_compressor.experimental.data.dataloaders.sampler"], [237, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [238, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [239, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [240, "module-neural_compressor.experimental.data.datasets.dataset"], [241, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [242, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [243, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [244, "module-neural_compressor.experimental.data.datasets"], [245, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [246, "module-neural_compressor.experimental.data.filters.coco_filter"], [247, "module-neural_compressor.experimental.data.filters.filter"], [248, "module-neural_compressor.experimental.data.filters"], [249, "module-neural_compressor.experimental.data"], [250, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [251, "module-neural_compressor.experimental.data.transforms"], [252, "module-neural_compressor.experimental.data.transforms.tokenization"], [253, "module-neural_compressor.experimental.data.transforms.transform"], [254, "module-neural_compressor.experimental.distillation"], [255, "module-neural_compressor.experimental.export"], [256, "module-neural_compressor.experimental.export.qlinear2qdq"], [257, "module-neural_compressor.experimental.export.torch2onnx"], [258, "module-neural_compressor.experimental.export.utils"], [259, "module-neural_compressor.experimental.graph_optimization"], [260, "module-neural_compressor.experimental"], [261, "module-neural_compressor.experimental.metric.bleu"], [262, "module-neural_compressor.experimental.metric.bleu_util"], [263, "module-neural_compressor.experimental.metric.coco_label_map"], [264, "module-neural_compressor.experimental.metric.coco_tools"], [265, "module-neural_compressor.experimental.metric.evaluate_squad"], [266, "module-neural_compressor.experimental.metric.f1"], [267, "module-neural_compressor.experimental.metric"], [268, "module-neural_compressor.experimental.metric.metric"], [269, "module-neural_compressor.experimental.mixed_precision"], [270, "module-neural_compressor.experimental.model_conversion"], [271, "module-neural_compressor.experimental.nas.basic_nas"], [272, "module-neural_compressor.experimental.nas.dynas"], [273, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [274, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [275, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [276, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [277, "module-neural_compressor.experimental.nas.dynast"], [278, "module-neural_compressor.experimental.nas.dynast.supernetwork"], [279, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"], [280, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"], [281, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"], [282, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"], [283, "module-neural_compressor.experimental.nas"], [284, "module-neural_compressor.experimental.nas.nas"], [285, "module-neural_compressor.experimental.nas.nas_utils"], [286, "module-neural_compressor.experimental.nas.search_algorithms"], [287, "module-neural_compressor.experimental.pruning"], [288, "module-neural_compressor.experimental.pruning_recipes"], [289, "module-neural_compressor.experimental.pruning_recipes.patterns"], [290, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [291, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [292, "module-neural_compressor.experimental.pruning_v2"], [293, "module-neural_compressor.experimental.pytorch_pruner"], [294, "module-neural_compressor.experimental.pytorch_pruner.logger"], [295, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [296, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [297, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [298, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [299, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [300, "module-neural_compressor.experimental.quantization"], [301, "module-neural_compressor.experimental.scheduler"], [302, "module-neural_compressor"], [303, "module-neural_compressor.metric.bleu"], [304, "module-neural_compressor.metric.bleu_util"], [305, "module-neural_compressor.metric.coco_label_map"], [306, "module-neural_compressor.metric.coco_tools"], [307, "module-neural_compressor.metric.evaluate_squad"], [308, "module-neural_compressor.metric.f1"], [309, "module-neural_compressor.metric"], [310, "module-neural_compressor.metric.metric"], [311, "module-neural_compressor.mix_precision"], [312, "module-neural_compressor.model.base_model"], [313, "module-neural_compressor.model"], [314, "module-neural_compressor.model.keras_model"], [315, "module-neural_compressor.model.model"], [316, "module-neural_compressor.model.mxnet_model"], [317, "module-neural_compressor.model.nets_factory"], [318, "module-neural_compressor.model.onnx_model"], [319, "module-neural_compressor.model.tensorflow_model"], [320, "module-neural_compressor.model.torch_model"], [321, "module-neural_compressor.objective"], [322, "module-neural_compressor.pruner.criteria"], [323, "module-neural_compressor.pruner"], [324, "module-neural_compressor.pruner.logger"], [325, "module-neural_compressor.pruner.patterns"], [326, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"], [327, "module-neural_compressor.pruner.pruner_legacy.group_lasso"], [328, "module-neural_compressor.pruner.pruner_legacy"], [329, "module-neural_compressor.pruner.pruner_legacy.magnitude"], [330, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"], [331, "module-neural_compressor.pruner.pruner_legacy.pruner"], [332, "module-neural_compressor.pruner.pruners"], [333, "module-neural_compressor.pruner.pruning"], [334, "module-neural_compressor.pruner.regs"], [335, "module-neural_compressor.pruner.schedulers"], [336, "module-neural_compressor.pruner.utils"], [337, "module-neural_compressor.quantization"], [338, "module-neural_compressor.strategy.auto_mixed_precision"], [339, "module-neural_compressor.strategy.basic"], [340, "module-neural_compressor.strategy.bayesian"], [341, "module-neural_compressor.strategy.conservative"], [342, "module-neural_compressor.strategy.exhaustive"], [343, "module-neural_compressor.strategy.hawq_v2"], [344, "module-neural_compressor.strategy"], [345, "module-neural_compressor.strategy.mse"], [346, "module-neural_compressor.strategy.mse_v2"], [347, "module-neural_compressor.strategy.random"], [348, "module-neural_compressor.strategy.strategy"], [349, "module-neural_compressor.strategy.utils"], [350, "module-neural_compressor.strategy.utils.tuning_sampler"], [351, "module-neural_compressor.strategy.utils.tuning_space"], [352, "module-neural_compressor.strategy.utils.tuning_structs"], [353, "module-neural_compressor.training"], [354, "module-neural_compressor.utils.collect_layer_histogram"], [355, "module-neural_compressor.utils.constant"], [356, "module-neural_compressor.utils.create_obj_from_config"], [357, "module-neural_compressor.utils"], [358, "module-neural_compressor.utils.kl_divergence"], [359, "module-neural_compressor.utils.load_huggingface"], [360, "module-neural_compressor.utils.logger"], [361, "module-neural_compressor.utils.options"], [362, "module-neural_compressor.utils.pytorch"], [363, "module-neural_compressor.utils.utility"], [364, "module-neural_compressor.ux.components.benchmark.benchmark"], [365, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [366, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [367, "module-neural_compressor.ux.components.benchmark"], [368, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [369, "module-neural_compressor.ux.components.config_generator.config_generator"], [370, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [371, "module-neural_compressor.ux.components.config_generator"], [372, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [373, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [374, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [375, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [376, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [377, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [378, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [379, "module-neural_compressor.ux.components.configuration_wizard"], [380, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [381, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [382, "module-neural_compressor.ux.components.db_manager.db_manager"], [383, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [384, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [385, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [386, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [387, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [388, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [389, "module-neural_compressor.ux.components.db_manager.db_models.example"], [390, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [391, "module-neural_compressor.ux.components.db_manager.db_models"], [392, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [393, "module-neural_compressor.ux.components.db_manager.db_models.model"], [394, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [395, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [396, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [397, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [398, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [399, "module-neural_compressor.ux.components.db_manager.db_models.project"], [400, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [401, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [402, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [403, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [404, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [405, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [406, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [407, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [408, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [409, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [410, "module-neural_compressor.ux.components.db_manager.db_operations"], [411, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [412, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [413, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [414, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [415, "module-neural_compressor.ux.components.db_manager"], [416, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [417, "module-neural_compressor.ux.components.db_manager.utils"], [418, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [419, "module-neural_compressor.ux.components.diagnosis.factory"], [420, "module-neural_compressor.ux.components.diagnosis"], [421, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [422, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [423, "module-neural_compressor.ux.components.diagnosis.op_details"], [424, "module-neural_compressor.ux.components.diagnosis.op_entry"], [425, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [426, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [427, "module-neural_compressor.ux.components.file_browser.file_browser"], [428, "module-neural_compressor.ux.components.file_browser"], [429, "module-neural_compressor.ux.components.graph.attribute"], [430, "module-neural_compressor.ux.components.graph.collapser"], [431, "module-neural_compressor.ux.components.graph.edge"], [432, "module-neural_compressor.ux.components.graph.graph"], [433, "module-neural_compressor.ux.components.graph.graph_reader"], [434, "module-neural_compressor.ux.components.graph"], [435, "module-neural_compressor.ux.components.graph.node"], [436, "module-neural_compressor.ux.components.graph.reader"], [437, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [438, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [439, "module-neural_compressor.ux.components"], [440, "module-neural_compressor.ux.components.jobs_management"], [441, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [442, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [443, "module-neural_compressor.ux.components.jobs_management.request"], [444, "module-neural_compressor.ux.components.manage_workspace"], [445, "module-neural_compressor.ux.components.model.domain"], [446, "module-neural_compressor.ux.components.model"], [447, "module-neural_compressor.ux.components.model.model"], [448, "module-neural_compressor.ux.components.model.model_type_getter"], [449, "module-neural_compressor.ux.components.model.onnxrt"], [450, "module-neural_compressor.ux.components.model.onnxrt.model"], [451, "module-neural_compressor.ux.components.model.pytorch"], [452, "module-neural_compressor.ux.components.model.pytorch.model"], [453, "module-neural_compressor.ux.components.model.repository"], [454, "module-neural_compressor.ux.components.model.shape"], [455, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [456, "module-neural_compressor.ux.components.model.tensorflow"], [457, "module-neural_compressor.ux.components.model.tensorflow.keras"], [458, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [459, "module-neural_compressor.ux.components.model.tensorflow.model"], [460, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [461, "module-neural_compressor.ux.components.model.tensorflow.utils"], [462, "module-neural_compressor.ux.components.model_zoo.download_config"], [463, "module-neural_compressor.ux.components.model_zoo.download_model"], [464, "module-neural_compressor.ux.components.model_zoo.downloader"], [465, "module-neural_compressor.ux.components.model_zoo"], [466, "module-neural_compressor.ux.components.model_zoo.list_models"], [467, "module-neural_compressor.ux.components.names_mapper"], [468, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [469, "module-neural_compressor.ux.components.optimization.execute_optimization"], [470, "module-neural_compressor.ux.components.optimization.factory"], [471, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [472, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [473, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [474, "module-neural_compressor.ux.components.optimization"], [475, "module-neural_compressor.ux.components.optimization.mixed_precision"], [476, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [477, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [478, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [479, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [480, "module-neural_compressor.ux.components.optimization.optimization"], [481, "module-neural_compressor.ux.components.optimization.pruning"], [482, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [483, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [484, "module-neural_compressor.ux.components.optimization.tune"], [485, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [486, "module-neural_compressor.ux.components.optimization.tune.tuning"], [487, "module-neural_compressor.ux.components.optimization.tuning_history"], [488, "module-neural_compressor.ux.components.profiling.execute_profiling"], [489, "module-neural_compressor.ux.components.profiling.factory"], [490, "module-neural_compressor.ux.components.profiling"], [491, "module-neural_compressor.ux.components.profiling.profile_model"], [492, "module-neural_compressor.ux.components.profiling.profiler"], [493, "module-neural_compressor.ux.components.profiling.profiling"], [494, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [495, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [496, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [497, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [498, "module-neural_compressor.ux.inc_bench"], [499, "module-neural_compressor.ux"], [500, "module-neural_compressor.ux.utils.consts"], [501, "module-neural_compressor.ux.utils.environment"], [502, "module-neural_compressor.ux.utils.exceptions"], [503, "module-neural_compressor.ux.utils.executor"], [504, "module-neural_compressor.ux.utils.expiring_dict"], [505, "module-neural_compressor.ux.utils.github_info"], [506, "module-neural_compressor.ux.utils.hw_info"], [507, "module-neural_compressor.ux.utils"], [508, "module-neural_compressor.ux.utils.json_serializer"], [509, "module-neural_compressor.ux.utils.logger"], [510, "module-neural_compressor.ux.utils.parser"], [511, "module-neural_compressor.ux.utils.proc"], [512, "module-neural_compressor.ux.utils.processes"], [513, "module-neural_compressor.ux.utils.singleton"], [514, "module-neural_compressor.ux.utils.status_updates"], [515, "module-neural_compressor.ux.utils.templates"], [516, "module-neural_compressor.ux.utils.templates.metric"], [517, "module-neural_compressor.ux.utils.templates.workdir"], [518, "module-neural_compressor.ux.utils.utils"], [519, "module-neural_compressor.ux.utils.workload.config"], [520, "module-neural_compressor.ux.utils.workload.dataloader"], [521, "module-neural_compressor.ux.utils.workload.evaluation"], [522, "module-neural_compressor.ux.utils.workload.graph_optimization"], [523, "module-neural_compressor.ux.utils.workload"], [524, "module-neural_compressor.ux.utils.workload.mixed_precision"], [525, "module-neural_compressor.ux.utils.workload.model"], [526, "module-neural_compressor.ux.utils.workload.pruning"], [527, "module-neural_compressor.ux.utils.workload.quantization"], [528, "module-neural_compressor.ux.utils.workload.tuning"], [529, "module-neural_compressor.ux.utils.yaml_utils"], [530, "module-neural_compressor.ux.web.communication"], [531, "module-neural_compressor.ux.web.configuration"], [532, "module-neural_compressor.ux.web.exceptions"], [533, "module-neural_compressor.ux.web"], [534, "module-neural_compressor.ux.web.router"], [535, "module-neural_compressor.ux.web.server"], [536, "module-neural_compressor.ux.web.service.benchmark"], [537, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [538, "module-neural_compressor.ux.web.service"], [539, "module-neural_compressor.ux.web.service.model"], [540, "module-neural_compressor.ux.web.service.optimization"], [541, "module-neural_compressor.ux.web.service.profiling"], [542, "module-neural_compressor.ux.web.service.request_data_processor"], [543, "module-neural_compressor.ux.web.service.response_generator"], [544, "module-neural_compressor.ux.web.service.workload"], [545, "module-neural_compressor.version"]], "neural_compressor.experimental.metric.bleu": [[14, "module-neural_compressor.experimental.metric.bleu"], [261, "module-neural_compressor.experimental.metric.bleu"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[14, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [261, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[14, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [261, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[14, "neural_compressor.experimental.metric.bleu.BLEU.result"], [261, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[14, "neural_compressor.experimental.metric.bleu.BLEU.update"], [261, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "644ec953a7dc_pruning_support": [[34, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[35, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[35, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[35, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[36, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[37, "module-9e89549a08c8_v1_11"]], "block_mask": [[38, "module-block_mask"]], "env": [[39, "module-env"]], "run_migrations_offline() (in module env)": [[39, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[39, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[40, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[40, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[40, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[40, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[40, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[40, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[40, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[40, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[40, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[40, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[40, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[40, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[41, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[42, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[42, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[42, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[42, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[42, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[42, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[42, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[42, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[42, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[42, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[42, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[42, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[42, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[42, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[42, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[42, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[42, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils": [[43, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[44, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[45, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[45, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[45, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "get_fuse_patterns() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[45, "neural_compressor.adaptor.mxnet.MXNetQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[45, "neural_compressor.adaptor.mxnet.MXNetQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[45, "neural_compressor.adaptor.mxnet.MXNetQuery.get_op_types"]], "get_precisions() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[45, "neural_compressor.adaptor.mxnet.MXNetQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[45, "neural_compressor.adaptor.mxnet.MXNetQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[45, "neural_compressor.adaptor.mxnet.MXNetQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[45, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[45, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[45, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[45, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[45, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[45, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[45, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[46, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calc_kl_th_dict() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[47, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.calc_kl_th_dict"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[47, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[47, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.namecollector method)": [[47, "neural_compressor.adaptor.mxnet_utils.util.NameCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[47, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.collect_gluon"]], "collect_module() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[47, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_module"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[47, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "post_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[47, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.post_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[47, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.pre_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[47, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.pre_batch"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[47, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[48, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[48, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[49, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[49, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[49, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[49, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[49, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "dump_minmax() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[49, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_minmax"]], "dump_tensor() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[49, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_tensor"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[49, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[49, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[50, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[51, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[51, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[51, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[51, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.qactivationoperator method)": [[51, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[51, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[51, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[51, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[51, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[51, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize_check"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[51, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize_check"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[52, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[52, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[52, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[52, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[52, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[53, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[53, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[53, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.qattentionoperator method)": [[53, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[53, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[53, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[53, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.quantize"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[54, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[54, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[54, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.qbinaryoperator method)": [[54, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[54, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[54, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[54, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[54, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize_check"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[55, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[55, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[55, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[55, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.qconcatoperator method)": [[55, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[55, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[55, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[55, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[55, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize_check"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[56, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[56, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[56, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.qconvoperator method)": [[56, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[56, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[56, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[56, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.quantize"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[57, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "directcastoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[57, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[57, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.cast"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.directcastoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[57, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize_check"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[58, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[58, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[58, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.qembedlayernormalizationoperator method)": [[58, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[58, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[58, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[58, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.quantize"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[59, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[59, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[59, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[59, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[59, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[59, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[59, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize_check"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[60, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[60, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[60, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.qglobalaveragepooloperator method)": [[60, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[60, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[60, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[61, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[61, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[61, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.qgemmoperator method)": [[61, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[61, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[61, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[61, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[61, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize_check"]], "neural_compressor.adaptor.ox_utils.operators": [[62, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[63, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[63, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[63, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[63, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[63, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.quantize"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[64, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[64, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[64, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.qmatmuloperator method)": [[64, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[64, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[64, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[64, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.quantize"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[65, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[65, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[65, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize_check"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[66, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[66, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.qoperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[66, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[66, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[66, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize_check"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[67, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[67, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[67, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize_check"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[68, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[68, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.qpooloperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[68, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize_check"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[69, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[69, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[69, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize_check"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[70, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[70, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.qsplitoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[70, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.quantize"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "check_opset_version() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.check_opset_version"]], "convert_qdq_to_operator_oriented() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.convert_qdq_to_operator_oriented"]], "dequantize_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dequantize_tensor"]], "dtype_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dtype_cast"]], "get_bias_add_nodes() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.get_bias_add_nodes"]], "insert_qdq() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.insert_qdq"]], "is_valid_quantize_weight() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.is_valid_quantize_weight"]], "merge_dedicated_qdq_pair() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.merge_dedicated_qdq_pair"]], "neural_compressor.adaptor.ox_utils.quantizer": [[71, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantize_bias() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias"]], "quantize_bias_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias_tensor"]], "quantize_inputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_inputs"]], "quantize_model() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_model"]], "quantize_outputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_outputs"]], "quantize_weight_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weight_per_channel"]], "quantize_weights_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weights_per_channel"]], "remove_redundant_pairs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.remove_redundant_pairs"]], "should_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_cast"]], "should_convert() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_convert"]], "should_quantize() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_quantize"]], "tensor_proto_to_array() (neural_compressor.adaptor.ox_utils.quantizer.quantizer static method)": [[71, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.tensor_proto_to_array"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[72, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[72, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[73, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[73, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[73, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[73, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[73, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[73, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[73, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[73, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[74, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[74, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[74, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[74, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[74, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[74, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[74, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[74, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[74, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[75, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[75, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[75, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[75, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[75, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[75, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[75, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[75, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[75, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[75, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[75, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[75, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "tuning_cfg_to_fw() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[75, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.tuning_cfg_to_fw"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[76, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[77, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[131, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[131, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[132, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[133, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[133, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[134, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[134, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[135, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[140, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[140, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[162, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[163, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[164, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[164, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[164, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[165, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[166, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[167, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[167, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[167, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[168, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[168, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[168, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[169, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[169, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[169, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[169, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[169, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[169, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[169, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[169, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[169, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[169, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[169, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[170, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[171, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[171, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[171, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[171, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[171, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[171, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[171, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[172, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[173, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[174, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[175, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[175, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[175, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[175, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[175, "module-neural_compressor.adaptor.torch_utils.util"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[176, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[176, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[176, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[176, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[176, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[176, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[176, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm.algorithm": [[176, "module-neural_compressor.algorithm.algorithm"]], "origin_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[176, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[176, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithm.algorithms class method)": [[176, "neural_compressor.algorithm.algorithm.ALGORITHMS.support_algorithms"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[177, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[177, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithms (class in neural_compressor.algorithm)": [[178, "neural_compressor.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm)": [[178, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[178, "neural_compressor.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithmscheduler property)": [[178, "neural_compressor.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[178, "neural_compressor.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithmscheduler property)": [[178, "neural_compressor.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithmscheduler property)": [[178, "neural_compressor.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm": [[178, "module-neural_compressor.algorithm"]], "origin_model (neural_compressor.algorithm.algorithmscheduler property)": [[178, "neural_compressor.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithmscheduler property)": [[178, "neural_compressor.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithms class method)": [[178, "neural_compressor.algorithm.ALGORITHMS.support_algorithms"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[179, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[179, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[180, "neural_compressor.benchmark.Benchmark"]], "fit() (in module neural_compressor.benchmark)": [[180, "neural_compressor.benchmark.fit"]], "neural_compressor.benchmark": [[180, "module-neural_compressor.benchmark"]], "benchmark_conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[181, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[181, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[182, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[182, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[182, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[182, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[183, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[184, "module-neural_compressor.conf.pythonic_config"]], "distillationconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.DistillationConfig"]], "weightpruningconfig (class in neural_compressor.config)": [[185, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[185, "module-neural_compressor.config"]], "neural_compressor.contrib": [[186, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[187, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[188, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[188, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[188, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[188, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[189, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[189, "module-neural_compressor.contrib.strategy.tpe"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[189, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[189, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[190, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[190, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[190, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[190, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[191, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[191, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[192, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[192, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[192, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[192, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[192, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[193, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[193, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[193, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[193, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[194, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[194, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[195, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[195, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[196, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[196, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[196, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[197, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[197, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[198, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[198, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[198, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[198, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[198, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[199, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[199, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[199, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[200, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[200, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[200, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[201, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[201, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[201, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[201, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[201, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[202, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[202, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[202, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[202, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[202, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[202, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[202, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[202, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[203, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[203, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[204, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[204, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[204, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[205, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[205, "module-neural_compressor.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.data.datasets)": [[206, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[206, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[206, "neural_compressor.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[206, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[206, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[207, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[207, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[208, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[208, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[208, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[209, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[209, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[210, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[210, "neural_compressor.data.filters.Filter"]], "filter_registry() (in module neural_compressor.data.filters)": [[210, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[210, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[211, "neural_compressor.data.BaseTransform"]], "dataloader (class in neural_compressor.data)": [[211, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[211, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[211, "neural_compressor.data.Datasets"]], "filters (class in neural_compressor.data)": [[211, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[211, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[211, "neural_compressor.data.IterableDataset"]], "postprocess (class in neural_compressor.data)": [[211, "neural_compressor.data.Postprocess"]], "transforms (class in neural_compressor.data)": [[211, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[211, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[211, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[211, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[211, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[211, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[212, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[212, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[213, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[213, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[214, "neural_compressor.data.transforms.BaseTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[214, "neural_compressor.data.transforms.Postprocess"]], "transforms (class in neural_compressor.data.transforms)": [[214, "neural_compressor.data.transforms.TRANSFORMS"]], "neural_compressor.data.transforms": [[214, "module-neural_compressor.data.transforms"]], "register() (neural_compressor.data.transforms.transforms method)": [[214, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[214, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[215, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[215, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[216, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[216, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[216, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[216, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[216, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[216, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[216, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TRANSFORMS"], [217, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[217, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[217, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[217, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[217, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[217, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[217, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[217, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[218, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[218, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[218, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[218, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[218, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[218, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[218, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[218, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[218, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[218, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[218, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[218, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[219, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[219, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[219, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[219, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[219, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[219, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[219, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[219, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[219, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[220, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[220, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[221, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[221, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[221, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[221, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[221, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[222, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[222, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[223, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[223, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[224, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[224, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[224, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[225, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[225, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[226, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[226, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[226, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[227, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[227, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[227, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[227, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[227, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[227, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[227, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[227, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[228, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[228, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[228, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[230, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[230, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[231, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[231, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[231, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[231, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[232, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[235, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[236, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[236, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[236, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[236, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[236, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[237, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[238, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[239, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[239, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[239, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[239, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[239, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[240, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[240, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[240, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[240, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[240, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[240, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[240, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[241, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[241, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[242, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[242, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[242, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[243, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[243, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[243, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[243, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[243, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[243, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[243, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[244, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[244, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[244, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[244, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[244, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[245, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[245, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[246, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[246, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[246, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[247, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[248, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[248, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[248, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[248, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[249, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[249, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[249, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[249, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[249, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[249, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[249, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[249, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[249, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[249, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[249, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[249, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[250, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[251, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[251, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[251, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[251, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[251, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[252, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[252, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[252, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[252, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[252, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[252, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [253, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[253, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[253, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[253, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[253, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[254, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[254, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[254, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[254, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[254, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[254, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[254, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[254, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[254, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[254, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[254, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[254, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[254, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[254, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[254, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[254, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[254, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[254, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[254, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[254, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[254, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[255, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[255, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[255, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[255, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[256, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[256, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[256, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[257, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[258, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[258, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[258, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[258, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[259, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[259, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[259, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[259, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[259, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[259, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[259, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[259, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[259, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[259, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[259, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[259, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[260, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[260, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[260, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[260, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[260, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[260, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[260, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[260, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[260, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[260, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[260, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[260, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[260, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[260, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[260, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[260, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[260, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[260, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[260, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[260, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[260, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[260, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[260, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[260, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[260, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[260, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[260, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[260, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[260, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[260, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[260, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[260, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[260, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[260, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[260, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[260, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[260, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[260, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[260, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[260, "neural_compressor.experimental.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning method)": [[260, "neural_compressor.experimental.Pruning.get_sparsity_ratio"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[260, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[260, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[260, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[260, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[260, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[260, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[260, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[260, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[260, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[260, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[260, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[260, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[260, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[260, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[260, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[260, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[260, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[260, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[260, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[260, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[260, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[260, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[260, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[260, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[260, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[260, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[260, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[260, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[260, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[260, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[260, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[260, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[260, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[260, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[260, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[260, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[260, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[260, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[260, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[260, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[260, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[260, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[260, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[260, "neural_compressor.experimental.Component.train_func"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning method)": [[260, "neural_compressor.experimental.Pruning.update_items_for_all_pruners"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[261, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[261, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[261, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[261, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[261, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[261, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[262, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[262, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[263, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[264, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[264, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[264, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[264, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[265, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[265, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[265, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[265, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[265, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[266, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[266, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[266, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[266, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[266, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[267, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[267, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[267, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[267, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[267, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[267, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[267, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[267, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[267, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[267, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[267, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[268, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[268, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[268, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[268, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[268, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[268, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[268, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[268, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[268, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[268, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[268, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[268, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[268, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[268, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[268, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[268, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[268, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[268, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[268, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[268, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[268, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[268, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[268, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[268, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[268, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[268, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[268, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[268, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[268, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[268, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[268, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[268, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[268, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[268, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[268, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[268, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[268, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[268, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[268, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[268, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[268, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[268, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[268, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[268, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[268, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[268, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[268, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[268, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[268, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[268, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[268, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[268, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[268, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[268, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[268, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[268, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[268, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[268, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[268, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[268, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[268, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[268, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[268, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[268, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[268, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[268, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[268, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[268, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[268, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[268, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[268, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[268, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[268, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[268, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[268, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[268, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[268, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[268, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[268, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[268, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[268, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[268, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[268, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[268, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[268, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[269, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[269, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[269, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[269, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[270, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[270, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[270, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[270, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[270, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[270, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[270, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[270, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[270, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[270, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[271, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[271, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[271, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[271, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[271, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[271, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[272, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[272, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[272, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[272, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[272, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[272, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[272, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[272, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[272, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[272, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[273, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "transformerltencoding (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[273, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[273, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[274, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[274, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[275, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[275, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[275, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "evaluationinterfacetransformerlt (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "transformerltrunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[276, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[276, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[277, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[278, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[279, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "multiheadattentionsuper (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.forward"]], "get_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.get_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[280, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "reorder_incremental_state() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.reorder_incremental_state"]], "set_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.set_incremental_state"]], "compute_bleu() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_bleu"]], "compute_latency() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_latency"]], "compute_macs() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[281, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "transformerdecoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder"]], "transformerdecoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer"]], "transformerencoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder"]], "transformerencoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer"]], "transformersupernetwork (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerSuperNetwork"]], "extract_features() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.extract_features"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoderlayer method)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.forward"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.max_positions"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.max_positions"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[282, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "output_layer() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.output_layer"]], "reorder_encoder_out() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.reorder_encoder_out"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[282, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.upgrade_state_dict_named"]], "basicnas (class in neural_compressor.experimental.nas)": [[283, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[283, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[283, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[283, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[283, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[283, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[283, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[283, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[283, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[283, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[283, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[283, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[283, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[283, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[283, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[283, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[284, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[284, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[284, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[284, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[284, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[284, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[284, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[284, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[284, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[284, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[284, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[284, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[284, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[284, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[284, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[284, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[285, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[285, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[285, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[285, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[286, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[286, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[286, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[286, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[286, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[286, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[286, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[286, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[286, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[286, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[286, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[286, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[286, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[287, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[287, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[287, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[287, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[287, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning.pruning method)": [[287, "neural_compressor.experimental.pruning.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning": [[287, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[287, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[287, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[287, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[287, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[287, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning.pruning method)": [[287, "neural_compressor.experimental.pruning.Pruning.update_items_for_all_pruners"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[288, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[288, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[288, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[288, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[290, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[292, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning_v2.pruning method)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning_v2.pruning method)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.generate_hooks"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning_v2.pruning method)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning_v2": [[292, "module-neural_compressor.experimental.pruning_v2"]], "on_after_compute_loss() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[292, "neural_compressor.experimental.pruning_v2.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning_v2.pruning method)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning_v2.pruning method)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning_v2.pruning property)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.train_distributed"]], "update_config() (neural_compressor.experimental.pruning_v2.pruning method)": [[292, "neural_compressor.experimental.pruning_v2.Pruning.update_config"]], "neural_compressor.experimental.pytorch_pruner": [[293, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[294, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[295, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[295, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[296, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[296, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[297, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[298, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "prepare() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.prepare"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[298, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[299, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[299, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[300, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[300, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[300, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[300, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[300, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[300, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[300, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[300, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[300, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[300, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[300, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[301, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[301, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[301, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[301, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[301, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[301, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[301, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[302, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[302, "neural_compressor.DistillationConfig"]], "weightpruningconfig (class in neural_compressor)": [[302, "neural_compressor.WeightPruningConfig"]], "neural_compressor": [[302, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[303, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[303, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[303, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[303, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[303, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[303, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[303, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[303, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[303, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[303, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[303, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[303, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[303, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[304, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[304, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[305, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[306, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[306, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[306, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[306, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[306, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[306, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[306, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[306, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[306, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[306, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[306, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[306, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[306, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[306, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[307, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[307, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[307, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[307, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[307, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[308, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[308, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[308, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[308, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[308, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[309, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[309, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[309, "neural_compressor.metric.Metric"]], "hvd (neural_compressor.metric.basemetric property)": [[309, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[309, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[309, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[309, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[309, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[309, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[309, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[309, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[309, "neural_compressor.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[310, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[310, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[310, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[310, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[310, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[310, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[310, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[310, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[310, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[310, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[310, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[310, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[310, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[310, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[310, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[310, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[310, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[310, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[310, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[310, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[310, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[310, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[310, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[310, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[310, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[310, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[310, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[310, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[310, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[310, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[310, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[310, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[310, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[310, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[310, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[310, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[310, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[310, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[310, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[310, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[310, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[310, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[310, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[310, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[310, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[310, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[310, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[310, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[310, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[310, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[310, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[310, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[310, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[310, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[310, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[310, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[310, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[310, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[310, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[310, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[310, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[310, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[310, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[310, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[310, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[310, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[310, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[310, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[310, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[310, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[310, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[310, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[310, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[310, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[310, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[310, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[310, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[310, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[310, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[310, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[310, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[310, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[310, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[310, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[310, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[310, "neural_compressor.metric.metric.mIOU.update"]], "neural_compressor.mix_precision": [[311, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[312, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[312, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[312, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[312, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[312, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[312, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[312, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[313, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[313, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[313, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[313, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[313, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[313, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[313, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[313, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[314, "neural_compressor.model.keras_model.KerasModel"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[314, "neural_compressor.model.keras_model.KerasModel.framework"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[314, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[314, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[314, "module-neural_compressor.model.keras_model"]], "q_config (neural_compressor.model.keras_model.kerasmodel property)": [[314, "neural_compressor.model.keras_model.KerasModel.q_config"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[314, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[315, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[315, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[315, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[316, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[316, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[316, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[316, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[316, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[317, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[317, "module-neural_compressor.model.nets_factory"]], "register() (neural_compressor.model.nets_factory.tfslimnetsfactory method)": [[317, "neural_compressor.model.nets_factory.TFSlimNetsFactory.register"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[318, "neural_compressor.model.onnx_model.ONNXModel"]], "add_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.add_initializer"]], "add_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.add_initializers"]], "add_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.add_node"]], "add_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.add_nodes"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_children() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.get_children"]], "get_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.get_initializer"]], "get_nodes_chain() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.get_nodes_chain"]], "get_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.get_parent"]], "get_parents() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.get_parents"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.graph"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[318, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.initializer"]], "input() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.input"]], "input_name_to_nodes (neural_compressor.model.onnx_model.onnxmodel property)": [[318, "neural_compressor.model.onnx_model.ONNXModel.input_name_to_nodes"]], "ir_version() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.ir_version"]], "large_size (neural_compressor.model.onnx_model.onnxmodel property)": [[318, "neural_compressor.model.onnx_model.ONNXModel.large_size"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[318, "neural_compressor.model.onnx_model.ONNXModel.model"]], "model_path (neural_compressor.model.onnx_model.onnxmodel property)": [[318, "neural_compressor.model.onnx_model.ONNXModel.model_path"]], "neural_compressor.model.onnx_model": [[318, "module-neural_compressor.model.onnx_model"]], "nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.nodes"]], "opset_import() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.opset_import"]], "output() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.output"]], "output_name_to_node (neural_compressor.model.onnx_model.onnxmodel property)": [[318, "neural_compressor.model.onnx_model.ONNXModel.output_name_to_node"]], "q_config (neural_compressor.model.onnx_model.onnxmodel property)": [[318, "neural_compressor.model.onnx_model.ONNXModel.q_config"]], "remove_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.remove_initializer"]], "remove_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.remove_initializers"]], "remove_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.remove_node"]], "remove_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.remove_nodes"]], "remove_unused_constant() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.remove_unused_constant"]], "replace_input_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.replace_input_of_all_nodes"]], "replace_node_input() (neural_compressor.model.onnx_model.onnxmodel static method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.replace_node_input"]], "replace_node_output() (neural_compressor.model.onnx_model.onnxmodel static method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.replace_node_output"]], "replace_output_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.replace_output_of_all_nodes"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "set_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.set_initializer"]], "topological_sort() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.topological_sort"]], "update() (neural_compressor.model.onnx_model.onnxmodel method)": [[318, "neural_compressor.model.onnx_model.ONNXModel.update"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "build_saved_model() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[319, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.build_saved_model"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.estimator_session"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_all_weight_names() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[319, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_all_weight_names"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.get_model_type"]], "get_weight() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[319, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_weight"]], "graph (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_def"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.graph_def"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.graph_session"]], "input_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_node_names"]], "input_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor"]], "input_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor_names"]], "iter_op (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.iter_op"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "model_type (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model_type"]], "name (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.name"]], "neural_compressor.model.tensorflow_model": [[319, "module-neural_compressor.model.tensorflow_model"]], "output_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_node_names"]], "output_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor"]], "output_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor_names"]], "q_config (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.q_config"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[319, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[319, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[319, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.saved_model_session"]], "sess (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.sess"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.slim_session"]], "update_weights() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[319, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.update_weights"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[319, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "workspace_path (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[319, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.workspace_path"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[320, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[320, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[320, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[320, "neural_compressor.model.torch_model.PyTorchModel.export"]], "export_to_bf16_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[320, "neural_compressor.model.torch_model.PyTorchModel.export_to_bf16_onnx"]], "export_to_fp32_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[320, "neural_compressor.model.torch_model.PyTorchModel.export_to_fp32_onnx"]], "export_to_int8_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[320, "neural_compressor.model.torch_model.PyTorchModel.export_to_int8_onnx"]], "export_to_jit() (neural_compressor.model.torch_model.pytorchmodel method)": [[320, "neural_compressor.model.torch_model.PyTorchModel.export_to_jit"]], "forward() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.forward"]], "fp32_model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.fp32_model"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "generate_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.generate_forward_pre_hook"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[320, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "load_quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[320, "neural_compressor.model.torch_model.PyTorchModel.load_quantized_state_dict"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[320, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[320, "neural_compressor.model.torch_model.PyTorchModel.quantized_state_dict"]], "register_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.register_forward_pre_hook"]], "remove_hooks() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.remove_hooks"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[320, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[320, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[320, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "workspace_path (neural_compressor.model.torch_model.ipexmodel property)": [[320, "neural_compressor.model.torch_model.IPEXModel.workspace_path"]], "workspace_path (neural_compressor.model.torch_model.pytorchmodel property)": [[320, "neural_compressor.model.torch_model.PyTorchModel.workspace_path"]], "accuracy (class in neural_compressor.objective)": [[321, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[321, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[321, "neural_compressor.objective.ModelSize"]], "objective (class in neural_compressor.objective)": [[321, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[321, "neural_compressor.objective.Performance"]], "end() (neural_compressor.objective.accuracy method)": [[321, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[321, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[321, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.objective method)": [[321, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[321, "neural_compressor.objective.Performance.end"]], "neural_compressor.objective": [[321, "module-neural_compressor.objective"]], "objective_registry() (in module neural_compressor.objective)": [[321, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.objective method)": [[321, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.objective method)": [[321, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[321, "neural_compressor.objective.Objective.result_list"]], "start() (neural_compressor.objective.accuracy method)": [[321, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[321, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[321, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.objective method)": [[321, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[321, "neural_compressor.objective.Performance.start"]], "gradientcriterion (class in neural_compressor.pruner.criteria)": [[322, "neural_compressor.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.pruner.criteria)": [[322, "neural_compressor.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.pruner.criteria)": [[322, "neural_compressor.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.pruner.criteria)": [[322, "neural_compressor.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.pruner.criteria)": [[322, "neural_compressor.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.pruner.criteria)": [[322, "neural_compressor.pruner.criteria.get_criterion"]], "neural_compressor.pruner.criteria": [[322, "module-neural_compressor.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.gradientcriterion method)": [[322, "neural_compressor.pruner.criteria.GradientCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[322, "neural_compressor.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipcriterion method)": [[322, "neural_compressor.pruner.criteria.SnipCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipmomentumcriterion method)": [[322, "neural_compressor.pruner.criteria.SnipMomentumCriterion.on_after_optimizer_step"]], "on_step_begin() (neural_compressor.pruner.criteria.magnitudecriterion method)": [[322, "neural_compressor.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.criteria.pruningcriterion method)": [[322, "neural_compressor.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.pruner.criteria)": [[322, "neural_compressor.pruner.criteria.register_criterion"]], "scores (neural_compressor.pruner.criteria.gradientcriterion attribute)": [[322, "neural_compressor.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.pruner.criteria.magnitudecriterion attribute)": [[322, "neural_compressor.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.pruner.criteria.pruningcriterion attribute)": [[322, "neural_compressor.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipcriterion attribute)": [[322, "neural_compressor.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipmomentumcriterion attribute)": [[322, "neural_compressor.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.pruner": [[323, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[324, "module-neural_compressor.pruner.logger"]], "basepattern (class in neural_compressor.pruner.patterns)": [[325, "neural_compressor.pruner.patterns.BasePattern"]], "m (neural_compressor.pruner.patterns.patternninm attribute)": [[325, "neural_compressor.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.pruner.patterns.patternninm attribute)": [[325, "neural_compressor.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.pruner.patterns)": [[325, "neural_compressor.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.pruner.patterns)": [[325, "neural_compressor.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[325, "neural_compressor.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.pruner.patterns.patternnxm attribute)": [[325, "neural_compressor.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.pruner.patterns.basepattern method)": [[325, "neural_compressor.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternninm method)": [[325, "neural_compressor.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.pruner.patterns.basepattern attribute)": [[325, "neural_compressor.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.pruner.patterns.basepattern method)": [[325, "neural_compressor.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.pruner.patterns.patternninm method)": [[325, "neural_compressor.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[325, "neural_compressor.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.pruner.patterns.basepattern method)": [[325, "neural_compressor.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.pruner.patterns.basepattern method)": [[325, "neural_compressor.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternninm method)": [[325, "neural_compressor.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.pruner.patterns.basepattern method)": [[325, "neural_compressor.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.pruner.patterns)": [[325, "neural_compressor.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.basepattern method)": [[325, "neural_compressor.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternninm method)": [[325, "neural_compressor.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.basepattern method)": [[325, "neural_compressor.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[325, "neural_compressor.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[325, "neural_compressor.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[325, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternninm method)": [[325, "neural_compressor.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.pruner.patterns.basepattern method)": [[325, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[325, "neural_compressor.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.pruner.patterns.basepattern attribute)": [[325, "neural_compressor.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[325, "neural_compressor.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[325, "neural_compressor.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[325, "neural_compressor.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.patterns.basepattern attribute)": [[325, "neural_compressor.pruner.patterns.BasePattern.modules"]], "neural_compressor.pruner.patterns": [[325, "module-neural_compressor.pruner.patterns"]], "pattern (neural_compressor.pruner.patterns.basepattern attribute)": [[325, "neural_compressor.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.pruner.patterns.patternninm method)": [[325, "neural_compressor.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.pruner.patterns.basepattern method)": [[325, "neural_compressor.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.pruner.patterns)": [[325, "neural_compressor.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternninm method)": [[325, "neural_compressor.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternninm method)": [[325, "neural_compressor.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.pruner.patterns.basepattern attribute)": [[325, "neural_compressor.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[325, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.pruner.patterns.basepattern method)": [[325, "neural_compressor.pruner.patterns.BasePattern.update_residual_cnt"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[326, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[327, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[328, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[329, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[330, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[331, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.pruner.pruner_legacy.pruner)": [[331, "neural_compressor.pruner.pruner_legacy.pruner.pruner_registry"]], "basepruner (class in neural_compressor.pruner.pruners)": [[332, "neural_compressor.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.pruner.pruners)": [[332, "neural_compressor.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.pruner.pruners)": [[332, "neural_compressor.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.pruner.pruners)": [[332, "neural_compressor.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[332, "neural_compressor.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.pruner.pruners.progressivepruner method)": [[332, "neural_compressor.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.pruner.pruners.basepruner attribute)": [[332, "neural_compressor.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.pruner.pruners.basicpruner attribute)": [[332, "neural_compressor.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[332, "neural_compressor.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.pruner.pruners.basepruner attribute)": [[332, "neural_compressor.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.pruner.pruners)": [[332, "neural_compressor.pruner.pruners.get_pruner"]], "global_step (neural_compressor.pruner.pruners.basepruner attribute)": [[332, "neural_compressor.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.pruner.pruners.basepruner attribute)": [[332, "neural_compressor.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.pruners.basepruner attribute)": [[332, "neural_compressor.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.pruners.basepruner attribute)": [[332, "neural_compressor.pruner.pruners.BasePruner.modules"]], "neural_compressor.pruner.pruners": [[332, "module-neural_compressor.pruner.pruners"]], "on_after_eval() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[332, "neural_compressor.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.patternlockpruner method)": [[332, "neural_compressor.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[332, "neural_compressor.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[332, "neural_compressor.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[332, "neural_compressor.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.pruners.progressivepruner method)": [[332, "neural_compressor.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.on_train_end"]], "parse_valid_pruner_types() (in module neural_compressor.pruner.pruners)": [[332, "neural_compressor.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.pruner.pruners.basepruner attribute)": [[332, "neural_compressor.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.pruner.pruners.basicpruner attribute)": [[332, "neural_compressor.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.pruner.pruners.progressivepruner method)": [[332, "neural_compressor.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.pruner.pruners.basepruner attribute)": [[332, "neural_compressor.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.pruner.pruners.basicpruner attribute)": [[332, "neural_compressor.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.pruner.pruners)": [[332, "neural_compressor.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.pruner.pruners.basepruner attribute)": [[332, "neural_compressor.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.pruner.pruners.basicpruner attribute)": [[332, "neural_compressor.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.pruner.pruners.basepruner attribute)": [[332, "neural_compressor.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.pruner.pruners.basicpruner method)": [[332, "neural_compressor.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.pruner.pruners.basepruner attribute)": [[332, "neural_compressor.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[332, "neural_compressor.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.pruner.pruners.basepruner method)": [[332, "neural_compressor.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.basicpruner method)": [[332, "neural_compressor.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.patternlockpruner method)": [[332, "neural_compressor.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.pruner.pruners.progressivepruner method)": [[332, "neural_compressor.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "pruning (class in neural_compressor.pruner.pruning)": [[333, "neural_compressor.pruner.pruning.Pruning"]], "config_file_path (neural_compressor.pruner.pruning.pruning attribute)": [[333, "neural_compressor.pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.pruner.pruning.pruning method)": [[333, "neural_compressor.pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.pruner.pruning.pruning attribute)": [[333, "neural_compressor.pruner.pruning.Pruning.model"]], "model (neural_compressor.pruner.pruning.pruning property)": [[333, "id0"]], "neural_compressor.pruner.pruning": [[333, "module-neural_compressor.pruner.pruning"]], "on_after_eval() (neural_compressor.pruner.pruning.pruning method)": [[333, "neural_compressor.pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[333, "neural_compressor.pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruning.pruning method)": [[333, "neural_compressor.pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[333, "neural_compressor.pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruning.pruning method)": [[333, "neural_compressor.pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruning.pruning method)": [[333, "neural_compressor.pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruning.pruning method)": [[333, "neural_compressor.pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruning.pruning method)": [[333, "neural_compressor.pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruning.pruning method)": [[333, "neural_compressor.pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruning.pruning method)": [[333, "neural_compressor.pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.pruner.pruning.pruning attribute)": [[333, "neural_compressor.pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.pruner.pruning.pruning attribute)": [[333, "neural_compressor.pruner.pruning.Pruning.pruners"]], "update_config() (neural_compressor.pruner.pruning.pruning method)": [[333, "neural_compressor.pruner.pruning.Pruning.update_config"]], "basereg (class in neural_compressor.pruner.regs)": [[334, "neural_compressor.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.pruner.regs)": [[334, "neural_compressor.pruner.regs.GroupLasso"]], "alpha (neural_compressor.pruner.regs.grouplasso attribute)": [[334, "neural_compressor.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.pruner.regs)": [[334, "neural_compressor.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.pruner.regs)": [[334, "neural_compressor.pruner.regs.get_reg_type"]], "neural_compressor.pruner.regs": [[334, "module-neural_compressor.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[334, "neural_compressor.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[334, "neural_compressor.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[334, "neural_compressor.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[334, "neural_compressor.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.pruner.regs.grouplasso attribute)": [[334, "neural_compressor.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.pruner.regs)": [[334, "neural_compressor.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.pruner.schedulers)": [[335, "neural_compressor.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.pruner.schedulers)": [[335, "neural_compressor.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.pruner.schedulers)": [[335, "neural_compressor.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.pruner.schedulers.pruningscheduler attribute)": [[335, "neural_compressor.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.pruner.schedulers)": [[335, "neural_compressor.pruner.schedulers.get_scheduler"]], "neural_compressor.pruner.schedulers": [[335, "module-neural_compressor.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.pruner.schedulers)": [[335, "neural_compressor.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.iterativescheduler method)": [[335, "neural_compressor.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.oneshotscheduler method)": [[335, "neural_compressor.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.pruningscheduler method)": [[335, "neural_compressor.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "check_config() (in module neural_compressor.pruner.utils)": [[336, "neural_compressor.pruner.utils.check_config"]], "neural_compressor.pruner.utils": [[336, "module-neural_compressor.pruner.utils"]], "parse_to_prune() (in module neural_compressor.pruner.utils)": [[336, "neural_compressor.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.pruner.utils)": [[336, "neural_compressor.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.pruner.utils)": [[336, "neural_compressor.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.pruner.utils)": [[336, "neural_compressor.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.pruner.utils)": [[336, "neural_compressor.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.pruner.utils)": [[336, "neural_compressor.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.pruner.utils)": [[336, "neural_compressor.pruner.utils.update_params"]], "fit() (in module neural_compressor.quantization)": [[337, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[337, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[338, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[338, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[338, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[338, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[339, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[339, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[339, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[340, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[340, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[340, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[340, "neural_compressor.strategy.bayesian.acq_max"]], "array_to_params() (neural_compressor.strategy.bayesian.targetspace method)": [[340, "neural_compressor.strategy.bayesian.TargetSpace.array_to_params"]], "bounds (neural_compressor.strategy.bayesian.targetspace property)": [[340, "neural_compressor.strategy.bayesian.TargetSpace.bounds"]], "dim (neural_compressor.strategy.bayesian.targetspace property)": [[340, "neural_compressor.strategy.bayesian.TargetSpace.dim"]], "empty (neural_compressor.strategy.bayesian.targetspace property)": [[340, "neural_compressor.strategy.bayesian.TargetSpace.empty"]], "gen_next_params() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[340, "neural_compressor.strategy.bayesian.BayesianOptimization.gen_next_params"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[340, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "keys (neural_compressor.strategy.bayesian.targetspace property)": [[340, "neural_compressor.strategy.bayesian.TargetSpace.keys"]], "max (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[340, "neural_compressor.strategy.bayesian.BayesianOptimization.max"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[340, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[340, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[340, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "params (neural_compressor.strategy.bayesian.targetspace property)": [[340, "neural_compressor.strategy.bayesian.TargetSpace.params"]], "params_to_array() (neural_compressor.strategy.bayesian.targetspace method)": [[340, "neural_compressor.strategy.bayesian.TargetSpace.params_to_array"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[340, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[340, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[340, "neural_compressor.strategy.bayesian.BayesianOptimization.res"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[340, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "space (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[340, "neural_compressor.strategy.bayesian.BayesianOptimization.space"]], "suggest() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[340, "neural_compressor.strategy.bayesian.BayesianOptimization.suggest"]], "target (neural_compressor.strategy.bayesian.targetspace property)": [[340, "neural_compressor.strategy.bayesian.TargetSpace.target"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[341, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[341, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[341, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[341, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[341, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[342, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[342, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[342, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[343, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[343, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[343, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[344, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[345, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[345, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "neural_compressor.strategy.mse": [[345, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[345, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[346, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[346, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[346, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[347, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[347, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[347, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[348, "neural_compressor.strategy.strategy.TuneStrategy"]], "deploy_config() (neural_compressor.strategy.strategy.tunestrategy method)": [[348, "neural_compressor.strategy.strategy.TuneStrategy.deploy_config"]], "evaluation_result (neural_compressor.strategy.strategy.tunestrategy property)": [[348, "neural_compressor.strategy.strategy.TuneStrategy.evaluation_result"]], "initial_best_acc() (neural_compressor.strategy.strategy.tunestrategy method)": [[348, "neural_compressor.strategy.strategy.TuneStrategy.initial_best_acc"]], "initial_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[348, "neural_compressor.strategy.strategy.TuneStrategy.initial_tuning_cfg"]], "neural_compressor.strategy.strategy": [[348, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[348, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "set_q_func() (neural_compressor.strategy.strategy.tunestrategy method)": [[348, "neural_compressor.strategy.strategy.TuneStrategy.set_q_func"]], "set_tuning_space() (neural_compressor.strategy.strategy.tunestrategy method)": [[348, "neural_compressor.strategy.strategy.TuneStrategy.set_tuning_space"]], "setup_resume() (neural_compressor.strategy.strategy.tunestrategy method)": [[348, "neural_compressor.strategy.strategy.TuneStrategy.setup_resume"]], "show_baseline_info() (neural_compressor.strategy.strategy.tunestrategy method)": [[348, "neural_compressor.strategy.strategy.TuneStrategy.show_baseline_info"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[348, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[348, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[348, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "update_best_op_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[348, "neural_compressor.strategy.strategy.TuneStrategy.update_best_op_tuning_cfg"]], "optuningconfig (class in neural_compressor.strategy.utils)": [[349, "neural_compressor.strategy.utils.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.optuningconfig class method)": [[349, "neural_compressor.strategy.utils.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.optuningconfig method)": [[349, "neural_compressor.strategy.utils.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils": [[349, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[350, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[351, "module-neural_compressor.strategy.utils.tuning_space"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[352, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig class method)": [[352, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig method)": [[352, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[352, "module-neural_compressor.strategy.utils.tuning_structs"]], "compressionmanager (class in neural_compressor.training)": [[353, "neural_compressor.training.CompressionManager"]], "export() (neural_compressor.training.compressionmanager method)": [[353, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[353, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[353, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[353, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[354, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[354, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[354, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[355, "module-neural_compressor.utils.constant"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[356, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[356, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "neural_compressor.utils.create_obj_from_config": [[356, "module-neural_compressor.utils.create_obj_from_config"]], "kl_divergence (class in neural_compressor.utils)": [[357, "neural_compressor.utils.KL_Divergence"]], "layerhistogramcollector (class in neural_compressor.utils)": [[357, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[357, "neural_compressor.utils.LayerHistogramCollector.collect"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence method)": [[357, "neural_compressor.utils.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence method)": [[357, "neural_compressor.utils.KL_Divergence.get_threshold"]], "neural_compressor.utils": [[357, "module-neural_compressor.utils"]], "safe_entropy() (neural_compressor.utils.kl_divergence method)": [[357, "neural_compressor.utils.KL_Divergence.safe_entropy"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[358, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[358, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[358, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[358, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[358, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "neural_compressor.utils.load_huggingface": [[359, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[360, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[361, "module-neural_compressor.utils.options"]], "load() (in module neural_compressor.utils.pytorch)": [[362, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[362, "module-neural_compressor.utils.pytorch"]], "lazyimport (class in neural_compressor.utils.utility)": [[363, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[363, "neural_compressor.utils.utility.MODE"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[363, "neural_compressor.utils.utility.combine_histogram"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[363, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[363, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[363, "neural_compressor.utils.utility.equal_dicts"]], "get_size() (in module neural_compressor.utils.utility)": [[363, "neural_compressor.utils.utility.get_size"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[363, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[363, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[363, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[363, "neural_compressor.utils.utility.recover"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[364, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[364, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[364, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[364, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[364, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[364, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[364, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[364, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[365, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[365, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[365, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[365, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[366, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[366, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[366, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[366, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[366, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[366, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[366, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[367, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[367, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[368, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[368, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[368, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[368, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[368, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[368, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[369, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[369, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[369, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[369, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[369, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[369, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[370, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[370, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[370, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[370, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[370, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[371, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[372, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[372, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[372, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[372, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[372, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[373, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[373, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[373, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[374, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[374, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[374, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_evaluation_config"]], "generate_pruning_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[374, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_pruning_config"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[374, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[375, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[375, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[375, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[375, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[375, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[375, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[376, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[376, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[376, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[376, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[376, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[376, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[376, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[376, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[376, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[376, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[376, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[376, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[377, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[377, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[378, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[378, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[378, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[379, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[380, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[380, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[380, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[380, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[380, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[380, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[380, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[380, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[380, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[380, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[380, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[380, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[380, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[380, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[381, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "generate_tree() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[381, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.generate_tree"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[381, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "parse() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[381, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse"]], "parse_entry() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[381, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse_entry"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[382, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[382, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[382, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[382, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[382, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[382, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[383, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[384, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[384, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[385, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[385, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[385, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[386, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[386, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[386, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[386, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[386, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[386, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[386, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[386, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[387, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[387, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[387, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[387, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[387, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[388, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[388, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[388, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[389, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[389, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[390, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[390, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[390, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[391, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[392, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[392, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[392, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[393, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[393, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[394, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_pruning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_pruning_details"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[395, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[395, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[395, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[396, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[396, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[396, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[397, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[398, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[398, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[399, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[399, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[400, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.build_info"]], "delete_pruning_details() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.delete_pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[400, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.update"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[401, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[401, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[401, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[402, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[402, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[403, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[403, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[404, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[405, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[406, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[406, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[406, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[406, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[406, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[407, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[408, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[409, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[409, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_tuning_details"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_pruning_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.load_pruning_details_config"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[410, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[411, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_tuning_details"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_pruning_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.load_pruning_details_config"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[412, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[413, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[414, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[414, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[415, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[415, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[415, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[415, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[415, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[415, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[416, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[416, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[417, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[417, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[417, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[417, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[418, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[418, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[418, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[418, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[418, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[418, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[418, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[418, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[418, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[419, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[419, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[419, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[420, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[421, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[422, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[422, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[422, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[423, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[423, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[423, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[423, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[423, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[423, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[424, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[424, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[424, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[425, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[426, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[426, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[426, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[427, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[427, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[428, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[429, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[429, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[430, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[430, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[430, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[431, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[431, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[431, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[431, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[432, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[432, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[432, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[432, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[432, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[432, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[432, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[432, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[432, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[433, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[433, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[433, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[433, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[434, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[435, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[435, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[435, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[436, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[437, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[437, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[437, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[438, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[438, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[438, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[439, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[440, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[441, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[442, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[443, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[444, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[444, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[445, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[445, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[446, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[447, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[447, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[447, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[447, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[447, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[447, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[447, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[447, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[447, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[447, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[447, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[447, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[447, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[447, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[447, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "supports_pruning (neural_compressor.ux.components.model.model.model property)": [[447, "neural_compressor.ux.components.model.model.Model.supports_pruning"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[448, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[448, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[449, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[450, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[450, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[450, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[450, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[450, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[450, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[450, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[450, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[450, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[450, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[450, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[450, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[451, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[452, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[452, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[452, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[452, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[452, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[453, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[453, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[453, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[453, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[453, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[453, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[453, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[454, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[454, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[454, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[455, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[455, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[455, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[455, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[456, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[457, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[457, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[457, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[457, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[457, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[458, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[458, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[458, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[458, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[458, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[458, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[459, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[459, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[459, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[459, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[459, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[459, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[459, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[459, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[459, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[459, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "supports_pruning (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[459, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.supports_pruning"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[460, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[460, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[460, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[461, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[461, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[462, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[462, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[463, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[463, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[464, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[464, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[464, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[464, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[464, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[464, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[464, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[464, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[464, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[465, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[466, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[466, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[466, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[466, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[466, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[466, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[466, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[467, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[468, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[468, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[468, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[468, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[468, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[468, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[468, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[468, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[469, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[469, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[469, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[469, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[469, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[469, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[469, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[470, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[470, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[470, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[471, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[471, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[471, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[471, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[471, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[471, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[471, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[472, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[473, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[473, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[473, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[473, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[473, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[474, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[474, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[475, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[476, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[476, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[476, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[476, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[476, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[476, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[476, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[477, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[477, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[477, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[477, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[477, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[478, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[479, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[479, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[480, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[480, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[480, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[480, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[480, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[480, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[480, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[480, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[480, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[480, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[480, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[480, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[480, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[480, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.pruning": [[481, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[482, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[482, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[482, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[483, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "configuration_data (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[483, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[483, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[483, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.generate_config"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[483, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "optimization_script (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[483, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[483, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.parameters"]], "neural_compressor.ux.components.optimization.tune": [[484, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[485, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[485, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[485, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[485, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[486, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[486, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[486, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[486, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[486, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[486, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[486, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[486, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[486, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[487, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[487, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[487, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[487, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[487, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[487, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[487, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[487, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[487, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[488, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[488, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[488, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[489, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[489, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[489, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[490, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[491, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[491, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[491, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[492, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[492, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[492, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[493, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[493, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[493, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[493, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[493, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[493, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[493, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[493, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[493, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[494, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[494, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[494, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[495, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[496, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[496, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[496, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[496, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[496, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[496, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[496, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[496, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[497, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[497, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[498, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[498, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[498, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[499, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[500, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[500, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[500, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[500, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[500, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[500, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[500, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[500, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[501, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[501, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[501, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[501, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[501, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[502, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[502, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[502, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[502, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[502, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[503, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[503, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[503, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[503, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[503, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[503, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[503, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[503, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[503, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[503, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[503, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[504, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[504, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[504, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[504, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[505, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[505, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[505, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[506, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[506, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[506, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[506, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[506, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[506, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[506, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[506, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[506, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[506, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[506, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[507, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[508, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[508, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[508, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[508, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[509, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[509, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[510, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[510, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[510, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[510, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[510, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[510, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[510, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[510, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[510, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[510, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[510, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[510, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[510, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[510, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[510, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[510, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[510, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[510, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[510, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[510, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[510, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[510, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[511, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[511, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[511, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[511, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[511, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[511, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[511, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[511, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[511, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[511, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[512, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[512, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[512, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[512, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[512, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[513, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[513, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[514, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[514, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[515, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[516, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[516, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[516, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[516, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[516, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[516, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[516, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[516, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[516, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[516, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[516, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[516, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[516, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[516, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[517, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[517, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[517, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[517, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[517, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[518, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[518, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[519, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[519, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[519, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[519, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[520, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[520, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[520, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[520, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[520, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[520, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[520, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[520, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[520, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[520, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[520, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[520, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[521, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[521, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[521, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[521, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[521, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[521, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[521, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "get_label_shift_value() (neural_compressor.ux.utils.workload.evaluation.postprocessschema static method)": [[521, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema.get_label_shift_value"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[521, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[521, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[521, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[521, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[521, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[522, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[522, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[522, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[523, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[524, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[524, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[524, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[525, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[525, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[525, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[525, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[525, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "initialize_pruners() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[526, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.initialize_pruners"]], "neural_compressor.ux.utils.workload.pruning": [[526, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[526, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[526, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "serialize() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach method)": [[526, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize"]], "serialize_pruner() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[526, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize_pruner"]], "set_postprocess_transforms() (neural_compressor.ux.utils.workload.pruning.train method)": [[526, "neural_compressor.ux.utils.workload.pruning.Train.set_postprocess_transforms"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[527, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[527, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[527, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[527, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[527, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[527, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[528, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[528, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[528, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[528, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[528, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[528, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[528, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[528, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[528, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[528, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[528, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[528, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[528, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[528, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[528, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[529, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[529, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[529, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[530, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[530, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[530, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[530, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[530, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[530, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[530, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[530, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[530, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[530, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[530, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[530, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[530, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[531, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[531, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[531, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[531, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[531, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[531, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[531, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[531, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[531, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[531, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[531, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[531, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[531, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[532, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[532, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[533, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[534, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[534, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[534, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[534, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[534, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[534, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[534, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[534, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[534, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[534, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[535, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[535, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[535, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[535, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[535, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[535, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[535, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[535, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[535, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[535, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[535, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[535, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[535, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[536, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[536, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[537, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[537, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[537, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[537, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[537, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[537, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[538, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[539, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[539, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[539, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[540, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[540, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[541, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[541, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[541, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[542, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[542, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[542, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[543, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[543, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[543, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[543, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[543, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[543, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[544, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[544, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[544, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[544, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[544, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[545, "module-neural_compressor.version"]]}})