Search.setIndex({"docnames": ["CODE_OF_CONDUCT", "CONTRIBUTING", "FX", "NAS", "PTQ", "QAT", "SECURITY", "Welcome", "adaptor", "api-documentation/adaptor", "api-documentation/apis", "api-documentation/common", "api-documentation/common/benchmark", "api-documentation/common/bleu", "api-documentation/common/criterion", "api-documentation/common/data", "api-documentation/common/data/dataloader", "api-documentation/common/data/datasets", "api-documentation/common/data/transforms", "api-documentation/common/metric", "api-documentation/common/model", "api-documentation/common/optimizer", "api-documentation/component", "api-documentation/component/Distillation", "api-documentation/component/MixedPrecision", "api-documentation/component/Nas", "api-documentation/component/Pruning", "api-documentation/component/Quantization", "api-documentation/component/Scheduler", "api-documentation/pythonic", "api-documentation/strategy", "api-documentation/strategy/strategy", "autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruner/criteria/index", "autoapi/neural_compressor/pruner/index", "autoapi/neural_compressor/pruner/logger/index", "autoapi/neural_compressor/pruner/patterns/index", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/pruner/pruner_legacy/index", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index", "autoapi/neural_compressor/pruner/pruners/index", "autoapi/neural_compressor/pruner/pruning/index", "autoapi/neural_compressor/pruner/regs/index", "autoapi/neural_compressor/pruner/schedulers/index", "autoapi/neural_compressor/pruner/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "backend_quant", "bench", "benchmark", "dataloader", "dataset", "design", "distillation", "distillation_quantization", "distributed", "dynamic_quantization", "examples_readme", "export", "faq", "framework_yaml", "incompatible_changes", "index", "infrastructure", "installation_guide", "legal_information", "metric", "mixed_precision", "model", "objective", "orchestration", "platform_configuration", "pruning", "pruning_details", "publication_list", "pythonic_style", "quantization", "quantization_mixed_precision", "releases_info", "sigopt_strategy", "tensorboard", "transform", "tuning_strategies", "user_yaml", "validated_model_list"], "filenames": ["CODE_OF_CONDUCT.md", "CONTRIBUTING.md", "FX.md", "NAS.md", "PTQ.md", "QAT.md", "SECURITY.md", "Welcome.md", "adaptor.md", "api-documentation/adaptor.rst", "api-documentation/apis.rst", "api-documentation/common.rst", "api-documentation/common/benchmark.rst", "api-documentation/common/bleu.rst", "api-documentation/common/criterion.rst", "api-documentation/common/data.rst", "api-documentation/common/data/dataloader.rst", "api-documentation/common/data/datasets.rst", "api-documentation/common/data/transforms.rst", "api-documentation/common/metric.rst", "api-documentation/common/model.rst", "api-documentation/common/optimizer.rst", "api-documentation/component.rst", "api-documentation/component/Distillation.rst", "api-documentation/component/MixedPrecision.rst", "api-documentation/component/Nas.rst", "api-documentation/component/Pruning.rst", "api-documentation/component/Quantization.rst", "api-documentation/component/Scheduler.rst", "api-documentation/pythonic.rst", "api-documentation/strategy.rst", "api-documentation/strategy/strategy.rst", "autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruner/criteria/index.rst", "autoapi/neural_compressor/pruner/index.rst", "autoapi/neural_compressor/pruner/logger/index.rst", "autoapi/neural_compressor/pruner/patterns/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/pruner/pruners/index.rst", "autoapi/neural_compressor/pruner/pruning/index.rst", "autoapi/neural_compressor/pruner/regs/index.rst", "autoapi/neural_compressor/pruner/schedulers/index.rst", "autoapi/neural_compressor/pruner/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "backend_quant.md", "bench.md", "benchmark.md", "dataloader.md", "dataset.md", "design.md", "distillation.md", "distillation_quantization.md", "distributed.md", "dynamic_quantization.md", "examples_readme.md", "export.md", "faq.md", "framework_yaml.md", "incompatible_changes.md", "index.rst", "infrastructure.md", "installation_guide.md", "legal_information.md", "metric.md", "mixed_precision.md", "model.md", "objective.md", "orchestration.md", "platform_configuration.md", "pruning.md", "pruning_details.md", "publication_list.md", "pythonic_style.md", "quantization.md", "quantization_mixed_precision.md", "releases_info.md", "sigopt_strategy.md", "tensorboard.md", "transform.md", "tuning_strategies.md", "user_yaml.md", "validated_model_list.md"], "titles": ["Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "PTQ", "Quantization-aware Training", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "APIs", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Pythonic", "Strategy", "Strategies", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Quantization Support Matrix", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Dynamic Quantization", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Incompatible changes between v1.2 and v1.1", "Intel\u00ae Neural Compressor Documentation", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Introduction", "Full Publications/Events (49)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models"], "terms": {"In": [0, 2, 3, 4, 8, 37, 82, 137, 197, 225, 235, 258, 262, 280, 293, 295, 304, 323, 330, 332, 344, 545, 546, 547, 548, 550, 552, 563, 566, 567, 569, 570, 573, 574, 576, 577, 578, 579], "interest": [0, 7, 577], "foster": 0, "an": [0, 2, 3, 4, 5, 7, 8, 13, 37, 45, 88, 93, 94, 96, 137, 161, 162, 177, 191, 196, 200, 204, 209, 215, 219, 224, 225, 229, 234, 238, 242, 247, 251, 258, 259, 262, 263, 264, 271, 278, 281, 282, 283, 299, 301, 304, 305, 306, 316, 323, 330, 333, 338, 425, 430, 506, 546, 547, 549, 553, 555, 563, 564, 566, 570, 571, 576, 577, 578, 579], "open": [0, 7, 219, 258, 509, 545, 555, 556, 571], "welcom": [0, 1, 559], "environ": [0, 216, 300, 464, 496, 497, 505, 529, 545, 579], "we": [0, 2, 4, 5, 7, 8, 13, 37, 70, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 96, 99, 100, 104, 106, 107, 108, 109, 110, 113, 116, 117, 126, 127, 130, 131, 132, 161, 162, 177, 197, 216, 218, 219, 235, 259, 262, 269, 280, 281, 301, 304, 341, 547, 552, 555, 557, 563, 566, 567, 569, 570, 572, 573, 576, 577, 579], "maintain": [0, 1, 7, 266, 308, 565, 569, 575], "make": [0, 1, 4, 8, 161, 162, 177, 196, 234, 293, 295, 297, 323, 330, 333, 380, 413, 445, 545, 547, 557, 563, 573, 574, 576, 579], "particip": 0, "project": [0, 1, 215, 251, 280, 381, 384, 389, 391, 392, 395, 402, 403, 407, 408, 409, 410, 411, 412, 413, 437, 559, 571, 576, 579], "commun": [0, 300, 497, 531, 532, 533, 545], "harass": 0, "free": [0, 186, 187, 335, 563, 566, 576], "experi": [0, 576, 579], "everyon": 0, "regardless": [0, 262, 304], "ag": [0, 273], "bodi": 0, "size": [0, 4, 125, 188, 190, 191, 197, 200, 204, 206, 209, 211, 215, 226, 228, 229, 235, 238, 242, 244, 247, 248, 251, 262, 271, 274, 280, 293, 304, 316, 323, 361, 381, 391, 392, 514, 516, 517, 545, 546, 547, 548, 552, 556, 566, 569, 570, 578, 580, 581], "disabl": [0, 167, 504, 533], "ethnic": 0, "sex": [0, 180], "characterist": 0, "gender": 0, "ident": [0, 4, 100, 106, 132, 161, 293, 323, 550], "express": [0, 73, 259, 301], "level": [0, 4, 43, 46, 339, 346, 507, 529, 579], "educ": 0, "socio": 0, "econom": 0, "statu": [0, 132, 381, 392, 395, 400, 402, 408, 410, 411, 499, 512, 528, 541, 566], "nation": [0, 200, 238], "person": [0, 7, 180, 571], "appear": [0, 545], "race": 0, "religion": 0, "sexual": 0, "orient": 0, "exampl": [0, 1, 7, 47, 137, 169, 198, 199, 200, 211, 214, 215, 236, 237, 238, 248, 250, 251, 262, 263, 264, 266, 272, 296, 304, 305, 306, 308, 331, 351, 389, 407, 413, 437, 461, 462, 463, 464, 509, 516, 545, 548, 553, 558, 559, 560, 574, 575, 578, 579], "behavior": [0, 1, 8, 262, 304, 550, 557, 565, 577, 580], "contribut": [0, 7], "creat": [0, 3, 8, 32, 33, 34, 35, 37, 73, 132, 144, 161, 188, 198, 200, 218, 219, 226, 236, 238, 252, 258, 262, 270, 271, 281, 282, 283, 299, 304, 316, 338, 346, 347, 350, 354, 380, 397, 407, 408, 412, 413, 494, 515, 528, 541, 548, 553, 565, 573, 576, 577, 579], "posit": [0, 132, 215, 251, 280, 323, 545, 563], "includ": [0, 1, 7, 8, 43, 198, 200, 204, 207, 208, 209, 212, 215, 217, 236, 238, 242, 245, 246, 247, 249, 251, 257, 258, 262, 267, 280, 293, 297, 298, 304, 320, 323, 332, 333, 346, 347, 350, 355, 356, 545, 548, 561, 562, 563, 569, 570, 573, 574, 577, 579], "us": [0, 1, 2, 3, 4, 5, 7, 8, 13, 38, 40, 43, 45, 46, 64, 70, 71, 73, 96, 135, 137, 138, 144, 169, 174, 176, 178, 179, 180, 186, 187, 196, 197, 198, 199, 200, 201, 202, 205, 209, 212, 214, 215, 216, 217, 222, 234, 235, 236, 237, 238, 239, 240, 243, 247, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 262, 266, 267, 268, 269, 272, 274, 280, 281, 283, 285, 288, 290, 293, 295, 296, 297, 298, 299, 300, 301, 302, 304, 308, 319, 320, 323, 329, 330, 333, 338, 340, 341, 343, 344, 345, 346, 352, 355, 356, 361, 408, 413, 418, 419, 423, 425, 437, 444, 446, 471, 475, 499, 516, 518, 528, 529, 545, 548, 550, 551, 552, 553, 555, 557, 558, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581], "inclus": 0, "languag": [0, 13, 259, 280, 301, 571], "Being": 0, "respect": [0, 551, 557, 569, 570, 580], "differ": [0, 2, 3, 4, 7, 13, 162, 174, 176, 177, 191, 200, 215, 217, 229, 238, 251, 257, 258, 259, 265, 266, 273, 281, 282, 284, 287, 293, 298, 299, 301, 307, 308, 323, 545, 547, 548, 550, 552, 554, 555, 558, 560, 563, 565, 566, 569, 573, 577, 578, 579], "viewpoint": 0, "gracefulli": 0, "accept": [0, 37, 545, 564], "construct": [0, 198, 201, 202, 205, 209, 212, 213, 218, 219, 220, 221, 223, 236, 239, 240, 243, 307, 308, 311, 313, 354, 546, 548, 552, 579], "critic": [0, 7], "focus": [0, 8], "what": [0, 178, 196, 234, 300, 330, 351, 545], "i": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 15, 22, 29, 30, 37, 38, 40, 43, 45, 46, 47, 71, 73, 79, 80, 86, 88, 90, 96, 107, 111, 112, 118, 119, 120, 132, 137, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 167, 169, 173, 177, 178, 186, 187, 188, 189, 192, 196, 197, 198, 199, 200, 201, 202, 205, 207, 208, 209, 211, 215, 216, 218, 219, 222, 224, 225, 226, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 247, 248, 251, 258, 259, 262, 264, 265, 266, 268, 271, 274, 278, 280, 283, 285, 290, 294, 295, 296, 299, 301, 304, 306, 307, 308, 316, 320, 323, 330, 331, 332, 334, 335, 338, 339, 344, 345, 346, 351, 360, 380, 413, 425, 445, 448, 450, 451, 453, 455, 456, 457, 458, 464, 502, 504, 506, 508, 509, 514, 516, 518, 524, 529, 531, 545, 546, 547, 548, 550, 552, 553, 555, 557, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580], "best": [0, 3, 5, 7, 71, 215, 251, 252, 257, 258, 269, 270, 281, 282, 298, 343, 346, 561, 566, 573, 578, 579], "show": [0, 4, 330, 545, 546, 550, 552, 569, 579], "empathi": 0, "toward": [0, 5, 550], "other": [0, 1, 2, 71, 93, 94, 96, 161, 197, 235, 264, 299, 306, 312, 317, 506, 510, 533, 545, 553, 557, 560, 562, 565, 566, 568, 569, 573, 578, 579, 581], "member": [0, 8, 258, 267], "unaccept": 0, "The": [0, 2, 3, 4, 5, 8, 9, 10, 11, 13, 15, 22, 29, 30, 38, 40, 43, 46, 47, 64, 71, 73, 79, 96, 100, 118, 119, 120, 132, 135, 137, 141, 143, 167, 169, 173, 174, 175, 176, 178, 179, 180, 186, 187, 188, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 212, 215, 217, 219, 220, 222, 225, 226, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 249, 251, 252, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 280, 281, 282, 283, 284, 285, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 317, 319, 320, 323, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 350, 351, 352, 354, 355, 356, 360, 361, 381, 382, 384, 387, 391, 392, 395, 396, 398, 400, 401, 408, 413, 416, 418, 419, 420, 421, 422, 423, 424, 437, 444, 445, 497, 545, 546, 547, 548, 550, 551, 552, 553, 555, 557, 558, 560, 561, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580], "imageri": 0, "unwelcom": 0, "attent": [0, 198, 236, 278, 280, 550], "advanc": [0, 7, 169, 525, 547, 573, 580], "troll": 0, "insult": 0, "derogatori": 0, "comment": [0, 548, 563, 578], "polit": 0, "attack": 0, "public": [0, 132], "privat": [0, 258, 267], "publish": [0, 562, 564], "inform": [0, 1, 6, 7, 8, 9, 10, 11, 15, 22, 29, 30, 45, 73, 135, 169, 186, 187, 218, 219, 220, 221, 262, 293, 295, 296, 297, 299, 304, 307, 308, 311, 313, 320, 323, 330, 331, 332, 333, 346, 378, 416, 445, 503, 504, 509, 510, 550, 553, 555, 557, 559, 565, 569, 570, 574, 575, 577, 580, 581], "physic": [0, 216], "electron": 0, "address": [0, 200, 238, 533, 545, 564, 571], "without": [0, 132, 167, 215, 251, 262, 295, 304, 330, 516, 545, 547, 550, 552, 563, 569, 571, 572, 573, 579], "explicit": [0, 161], "permiss": 0, "which": [0, 2, 3, 5, 7, 8, 13, 40, 45, 46, 71, 73, 81, 132, 137, 161, 186, 198, 199, 200, 211, 216, 236, 237, 238, 248, 258, 259, 262, 264, 272, 274, 282, 283, 285, 286, 287, 288, 293, 294, 295, 296, 297, 301, 304, 306, 313, 316, 320, 323, 330, 333, 336, 338, 346, 514, 545, 546, 547, 548, 550, 552, 553, 557, 560, 563, 564, 565, 567, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580], "could": [0, 2, 73, 186, 187, 200, 238, 299, 323, 331, 335, 346, 551, 567, 569, 570, 573], "reason": [0, 107, 218, 219, 547, 577, 579], "consid": [0, 167, 266, 308, 547, 550, 579], "inappropri": 0, "profession": 0, "set": [0, 3, 4, 5, 7, 38, 40, 43, 45, 46, 47, 71, 72, 73, 123, 132, 137, 161, 167, 178, 180, 186, 187, 188, 190, 198, 200, 203, 215, 216, 222, 226, 228, 236, 238, 241, 251, 252, 255, 257, 258, 262, 267, 268, 269, 271, 278, 280, 281, 285, 290, 294, 299, 300, 304, 316, 317, 319, 323, 330, 334, 335, 346, 363, 403, 404, 405, 408, 425, 471, 475, 483, 504, 508, 514, 515, 517, 518, 519, 524, 528, 529, 533, 545, 546, 547, 548, 552, 557, 558, 560, 563, 564, 572, 573, 576, 579, 580], "ar": [0, 1, 2, 3, 4, 5, 7, 8, 13, 38, 40, 47, 71, 88, 100, 144, 154, 183, 198, 215, 225, 236, 251, 258, 259, 262, 266, 272, 274, 278, 280, 283, 285, 290, 293, 294, 295, 296, 299, 300, 301, 304, 308, 323, 330, 331, 336, 338, 354, 360, 361, 445, 448, 450, 457, 501, 510, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 560, 562, 563, 564, 566, 567, 568, 569, 570, 573, 574, 575, 576, 577, 578, 579, 580], "clarifi": 0, "expect": [0, 1, 73, 144, 200, 238, 338, 364, 486, 509, 556, 573, 579], "take": [0, 2, 3, 38, 40, 73, 186, 187, 191, 215, 219, 220, 229, 251, 293, 307, 308, 323, 335, 338, 547, 550, 557, 569, 573, 574, 578, 579, 580], "appropri": 0, "fair": 0, "correct": [0, 4, 162, 177, 262, 263, 264, 266, 294, 304, 305, 306, 308, 334, 466, 545], "action": 0, "ani": [0, 1, 96, 144, 161, 169, 252, 258, 262, 264, 280, 304, 306, 363, 364, 366, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 382, 384, 391, 392, 393, 394, 395, 396, 398, 401, 403, 404, 414, 416, 421, 422, 425, 427, 433, 442, 445, 448, 452, 455, 456, 457, 459, 462, 464, 467, 471, 475, 477, 480, 483, 486, 489, 494, 495, 501, 502, 504, 506, 508, 509, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 532, 533, 540, 541, 545, 547, 552, 576], "instanc": [0, 2, 8, 135, 137, 138, 144, 186, 187, 198, 216, 236, 258, 263, 264, 266, 269, 281, 282, 305, 306, 308, 335, 338, 346, 351, 381, 420, 424, 448, 457, 524, 545, 580, 581], "have": [0, 1, 4, 13, 100, 132, 167, 196, 214, 218, 219, 234, 250, 259, 262, 266, 273, 293, 295, 301, 304, 308, 323, 330, 545, 547, 552, 557, 562, 563, 564, 566, 569, 570, 573, 579], "right": [0, 2, 211, 248, 262, 304, 514, 545, 547, 578], "remov": [0, 1, 4, 73, 88, 100, 111, 123, 125, 132, 137, 154, 161, 217, 255, 264, 306, 381, 384, 391, 392, 395, 397, 398, 400, 402, 448, 509, 510, 517, 546, 569, 570, 577], "edit": [0, 402, 408, 410, 411, 414], "reject": 0, "commit": [0, 1], "wiki": 0, "issu": [0, 1, 6, 545, 561, 573, 577], "align": [0, 215, 251, 296, 578], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 13, 37, 40, 45, 70, 71, 73, 82, 83, 84, 85, 86, 87, 88, 89, 99, 104, 106, 107, 108, 109, 110, 112, 113, 116, 117, 126, 127, 130, 131, 132, 137, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 169, 173, 177, 186, 187, 197, 198, 199, 200, 201, 202, 203, 205, 214, 215, 218, 219, 224, 225, 235, 236, 237, 238, 239, 240, 241, 243, 250, 251, 258, 259, 262, 263, 264, 266, 271, 276, 277, 284, 285, 290, 293, 295, 296, 297, 298, 299, 301, 304, 305, 306, 308, 319, 323, 330, 331, 332, 333, 335, 338, 343, 360, 361, 544, 545, 546, 547, 548, 550, 552, 553, 557, 560, 562, 563, 564, 565, 569, 570, 573, 574, 575, 576, 577, 578, 579], "ban": 0, "temporarili": 0, "perman": 0, "thei": [0, 144, 178, 216, 258, 280, 300, 323, 546, 550, 557, 563, 566, 569, 570], "deem": 0, "threaten": 0, "offens": 0, "harm": 0, "appli": [0, 5, 135, 150, 225, 258, 260, 293, 295, 302, 323, 330, 545, 567, 569, 570, 573, 574, 576, 579, 580], "both": [0, 3, 5, 8, 167, 280, 282, 284, 547, 551, 572, 573, 579], "within": [0, 2, 257, 258, 262, 298, 304, 317, 330, 338, 564, 571], "space": [0, 1, 3, 8, 178, 186, 187, 257, 258, 264, 269, 271, 273, 281, 282, 283, 284, 298, 300, 306, 330, 335, 336, 338, 339, 340, 341, 343, 345, 346, 349, 516, 547, 569, 573, 580], "when": [0, 3, 5, 13, 70, 79, 90, 96, 144, 167, 198, 199, 207, 208, 209, 215, 236, 237, 245, 246, 247, 251, 259, 260, 272, 280, 293, 294, 295, 301, 302, 323, 330, 334, 514, 516, 529, 533, 545, 547, 548, 553, 569, 570, 573, 578, 579], "individu": [0, 96, 270, 271, 281, 293, 323], "repres": [0, 70, 200, 205, 238, 243, 262, 264, 266, 304, 306, 308, 323, 330, 331, 332, 333, 334, 383, 385, 386, 388, 390, 393, 394, 397, 399, 514, 548, 555, 573, 579], "its": [0, 73, 123, 132, 135, 144, 169, 194, 200, 214, 215, 232, 238, 250, 251, 253, 254, 260, 261, 265, 266, 295, 299, 302, 303, 307, 308, 323, 330, 338, 339, 343, 545, 547, 550, 562, 563, 564, 568, 569, 570, 576, 578, 579], "offici": [0, 167, 259, 263, 264, 301, 305, 306, 545, 563], "e": [0, 43, 46, 72, 96, 271, 273, 299, 323, 506, 508, 533, 550, 579], "mail": 0, "post": [0, 4, 5, 8, 38, 43, 46, 186, 187, 215, 225, 251, 255, 258, 299, 335, 528, 551, 552, 555, 560, 561, 567, 577, 579], "via": [0, 144, 257, 258, 285, 290, 298, 533, 552, 560], "social": 0, "media": 0, "account": [0, 271, 576, 579], "act": [0, 196, 234], "appoint": 0, "onlin": [0, 7, 37, 576], "offlin": [0, 37, 361, 573], "event": [0, 577], "represent": [0, 2, 82, 271, 381, 382, 384, 387, 391, 392, 395, 396, 398, 400, 401, 527, 551, 566, 570, 573], "mai": [0, 1, 132, 161, 167, 319, 547, 556, 562, 564, 568, 571, 573, 579], "further": [0, 96, 564, 565], "defin": [0, 3, 4, 5, 8, 40, 43, 45, 46, 70, 71, 72, 73, 82, 83, 84, 85, 86, 87, 88, 89, 99, 104, 106, 107, 108, 109, 110, 113, 116, 117, 119, 126, 127, 130, 131, 132, 161, 186, 187, 217, 258, 269, 270, 273, 281, 282, 283, 284, 285, 290, 293, 294, 295, 296, 297, 323, 330, 331, 332, 333, 335, 338, 360, 361, 439, 440, 441, 528, 545, 548, 550, 557, 560, 563, 566, 567, 569, 570, 573, 576, 577, 579, 580], "abus": 0, "otherwis": [0, 187, 200, 215, 238, 251, 346, 548, 572, 578], "report": [0, 1, 545, 576], "contact": [0, 575, 576], "inc": [0, 5, 7, 71, 215, 251, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 524, 571, 572, 575], "intel": [0, 1, 3, 6, 8, 71, 219, 222, 253, 258, 265, 266, 293, 296, 307, 308, 323, 331, 342, 347, 496, 509, 549, 550, 551, 554, 555, 557, 561, 562, 564, 565, 566, 567, 568, 569, 571, 573, 574, 575, 577, 579, 580], "com": [0, 4, 7, 169, 198, 236, 259, 260, 263, 264, 293, 296, 301, 302, 305, 306, 323, 331, 509, 545, 548, 561, 562, 575, 576, 581], "all": [0, 4, 5, 7, 8, 38, 40, 46, 47, 64, 71, 73, 86, 89, 111, 112, 124, 144, 174, 176, 188, 189, 192, 196, 200, 204, 207, 208, 209, 212, 215, 216, 217, 222, 225, 226, 234, 238, 242, 245, 246, 247, 249, 251, 255, 258, 259, 262, 264, 265, 266, 276, 277, 278, 280, 283, 285, 286, 287, 288, 289, 290, 293, 296, 299, 301, 304, 306, 307, 308, 310, 311, 316, 318, 319, 323, 329, 330, 331, 336, 338, 339, 340, 346, 355, 356, 365, 377, 380, 389, 406, 408, 413, 418, 419, 432, 434, 437, 438, 444, 445, 448, 450, 457, 463, 470, 472, 476, 477, 479, 482, 488, 493, 497, 506, 510, 533, 545, 547, 548, 552, 557, 561, 567, 568, 569, 570, 571, 573, 574, 578, 579], "complaint": 0, "review": [0, 1], "investig": 0, "result": [0, 3, 4, 13, 38, 40, 43, 46, 71, 73, 167, 186, 211, 215, 216, 217, 248, 251, 258, 259, 262, 263, 264, 265, 266, 271, 273, 282, 301, 304, 305, 306, 307, 308, 319, 341, 346, 362, 364, 381, 382, 395, 396, 398, 402, 408, 411, 414, 491, 532, 535, 545, 546, 547, 550, 552, 553, 560, 562, 563, 566, 569, 570, 571, 573, 576, 577, 578, 579, 581], "necessari": [0, 3, 70, 252, 258, 565, 576, 579], "circumst": [0, 572], "team": [0, 264, 306, 574], "oblig": 0, "confidenti": [0, 545], "regard": [0, 574], "incid": 0, "detail": [0, 1, 7, 40, 73, 215, 251, 278, 381, 384, 391, 392, 395, 397, 398, 400, 402, 403, 405, 408, 409, 410, 411, 412, 416, 421, 484, 489, 503, 516, 557, 558, 563, 564, 569, 570, 575, 576, 577, 579, 581], "specif": [0, 3, 4, 8, 40, 43, 46, 71, 72, 73, 137, 138, 189, 192, 198, 199, 200, 201, 205, 207, 208, 209, 216, 222, 236, 237, 238, 239, 243, 245, 246, 247, 258, 259, 262, 268, 269, 280, 281, 282, 301, 304, 318, 334, 392, 403, 404, 405, 408, 416, 431, 545, 550, 553, 557, 558, 563, 564, 565, 566, 572, 579, 580], "polici": [0, 7, 343, 568, 580], "separ": [0, 214, 250, 532, 545, 558, 562, 567, 572], "who": [0, 339, 579], "do": [0, 13, 38, 40, 43, 46, 71, 197, 198, 235, 236, 252, 253, 255, 258, 259, 262, 296, 299, 301, 304, 331, 339, 360, 545, 548, 552, 557, 560, 563, 566, 574, 575, 579], "follow": [0, 1, 2, 3, 4, 5, 8, 10, 47, 96, 112, 115, 118, 119, 120, 121, 132, 200, 238, 258, 259, 262, 280, 285, 290, 301, 304, 336, 544, 545, 546, 548, 550, 552, 553, 555, 557, 561, 562, 563, 565, 567, 569, 570, 572, 573, 577, 579], "good": [0, 553, 573, 579], "faith": 0, "face": [0, 571, 575], "temporari": 0, "repercuss": 0, "determin": [0, 2, 4, 320, 323, 330, 529, 553, 570], "": [0, 3, 4, 43, 70, 72, 82, 88, 96, 132, 144, 161, 162, 177, 179, 180, 183, 188, 197, 200, 214, 215, 216, 218, 219, 220, 226, 235, 238, 250, 251, 258, 264, 272, 274, 280, 293, 295, 296, 300, 306, 307, 308, 313, 323, 330, 335, 339, 346, 355, 356, 414, 445, 501, 502, 546, 550, 552, 553, 557, 560, 561, 564, 567, 568, 569, 570, 571, 572, 573, 575, 576, 580], "leadership": 0, "adapt": [0, 40, 43, 46, 71, 72, 73], "from": [0, 2, 3, 4, 5, 7, 8, 13, 38, 40, 43, 45, 70, 71, 73, 87, 93, 94, 96, 132, 135, 137, 144, 154, 161, 167, 186, 187, 188, 191, 195, 198, 199, 200, 201, 202, 203, 205, 210, 211, 217, 218, 219, 225, 226, 229, 233, 236, 237, 238, 239, 240, 241, 243, 248, 252, 254, 255, 256, 258, 259, 262, 263, 264, 268, 271, 272, 273, 274, 278, 280, 283, 285, 290, 293, 294, 295, 296, 297, 299, 301, 304, 305, 306, 317, 319, 320, 323, 330, 331, 332, 333, 334, 338, 345, 346, 347, 350, 354, 360, 361, 379, 381, 384, 385, 386, 388, 391, 392, 393, 394, 395, 397, 398, 400, 402, 403, 405, 408, 409, 410, 411, 412, 414, 425, 430, 448, 451, 460, 461, 462, 464, 489, 494, 508, 509, 514, 516, 517, 518, 524, 533, 535, 540, 541, 546, 547, 548, 550, 551, 552, 554, 555, 556, 560, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579], "version": [0, 2, 7, 8, 40, 43, 45, 46, 72, 73, 79, 186, 253, 255, 280, 338, 464, 499, 504, 516, 545, 557, 561, 562, 568, 571, 579], "1": [0, 2, 4, 5, 7, 8, 38, 40, 43, 46, 47, 70, 71, 73, 80, 100, 116, 135, 137, 165, 167, 175, 177, 183, 188, 190, 193, 194, 195, 197, 198, 199, 201, 202, 205, 206, 211, 215, 216, 217, 218, 219, 226, 228, 231, 232, 233, 235, 236, 237, 239, 240, 243, 244, 248, 251, 257, 258, 262, 263, 264, 266, 271, 274, 278, 280, 285, 290, 293, 295, 298, 299, 300, 304, 305, 306, 308, 323, 330, 335, 336, 344, 354, 364, 486, 494, 544, 546, 547, 548, 550, 553, 555, 557, 563, 564, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 579, 580], "4": [0, 4, 7, 8, 13, 73, 79, 207, 208, 209, 210, 211, 212, 215, 245, 246, 247, 248, 249, 251, 259, 260, 262, 301, 302, 304, 323, 339, 506, 545, 546, 547, 552, 556, 557, 560, 561, 563, 568, 569, 578, 579, 581], "For": [0, 2, 4, 5, 6, 8, 137, 200, 214, 215, 225, 238, 250, 251, 258, 262, 263, 264, 266, 271, 293, 296, 304, 305, 306, 308, 323, 331, 335, 339, 506, 545, 551, 552, 555, 557, 560, 569, 574, 577, 579, 580, 581], "answer": [0, 215, 251, 263, 264, 305, 306, 578, 581], "common": [0, 5, 10, 213, 258, 268, 274, 282, 283, 284, 293, 299, 300, 323, 354, 509, 510, 516, 546, 547, 548, 550, 552, 555, 558, 561, 565, 569, 573], "question": [0, 1, 8, 215, 251, 263, 264, 305, 306, 561, 578, 581], "about": [0, 320, 416, 445, 501, 503, 504, 509, 510, 545, 547, 553, 574, 581], "see": [0, 2, 4, 6, 215, 251, 259, 262, 278, 301, 304, 545, 562, 569, 577, 579, 581], "faq": [0, 7], "page": [0, 1], "If": [1, 2, 88, 93, 94, 96, 100, 107, 132, 186, 187, 200, 215, 238, 251, 262, 274, 293, 294, 295, 304, 335, 336, 545, 548, 552, 555, 561, 562, 563, 564, 566, 567, 573, 576, 577, 578, 579], "you": [1, 2, 5, 7, 196, 198, 234, 236, 262, 278, 280, 295, 304, 545, 546, 547, 548, 552, 555, 561, 562, 563, 575, 576, 577], "improv": [1, 4, 330, 338, 569, 570, 573, 574, 579, 581], "neural": [1, 8, 22, 45, 71, 169, 210, 211, 212, 215, 216, 219, 222, 225, 248, 249, 251, 253, 258, 265, 266, 268, 285, 290, 293, 296, 298, 299, 307, 308, 313, 323, 331, 341, 342, 347, 420, 424, 448, 457, 496, 503, 516, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 571, 573, 575, 577, 578, 579, 580], "compressor": [1, 3, 8, 45, 71, 210, 211, 212, 215, 216, 219, 222, 225, 248, 249, 251, 253, 258, 265, 266, 268, 293, 296, 298, 299, 307, 308, 313, 323, 331, 342, 347, 420, 424, 448, 457, 496, 503, 516, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 569, 571, 573, 575, 577, 578, 579, 580], "send": [1, 7, 485, 528, 533], "your": [1, 7, 196, 198, 234, 236, 262, 304, 545, 546, 548, 552, 555, 562, 576, 577, 579], "new": [1, 45, 70, 82, 132, 154, 167, 188, 200, 209, 212, 215, 216, 226, 238, 247, 249, 251, 280, 293, 294, 297, 299, 316, 323, 333, 361, 407, 408, 412, 528, 546, 552, 564, 571, 573, 575, 576, 578, 580], "github": [1, 4, 7, 169, 198, 236, 259, 260, 263, 264, 293, 296, 301, 302, 305, 306, 323, 331, 460, 462, 503, 545, 548, 554, 561, 562, 575], "view": [1, 4, 7, 545, 554, 575], "how": [1, 2, 4, 6, 8, 215, 251, 252, 258, 273, 274, 293, 320, 323, 330, 545, 546, 548, 550, 552, 558, 569, 570, 573, 578, 579, 580], "To": [1, 70, 262, 288, 293, 297, 304, 323, 333, 506, 545, 552, 555, 564, 572, 574, 575, 579, 580], "befor": [1, 129, 144, 198, 225, 236, 252, 253, 255, 258, 285, 290, 293, 295, 296, 297, 323, 330, 331, 332, 333, 343, 402, 545, 547, 548, 550, 552, 556, 557, 566, 569, 573, 576, 577, 579], "below": [1, 2, 5, 8, 80, 92, 100, 299, 337, 339, 344, 544, 550, 552, 558, 563, 566, 567, 569, 572, 573, 576, 577, 579], "chang": [1, 4, 107, 123, 162, 177, 295, 297, 330, 333, 338, 341, 361, 376, 382, 485, 507, 514, 547, 552, 556, 563, 570, 577, 578, 579], "consist": [1, 2, 81, 89, 280, 545, 555, 579], "python": [1, 2, 10, 101, 144, 167, 200, 219, 238, 258, 262, 304, 361, 464, 545, 548, 552, 561, 571, 574, 578], "style": [1, 88, 191, 205, 229, 243, 548, 558], "pylint": 1, "check": [1, 4, 5, 7, 45, 71, 88, 89, 132, 137, 144, 167, 173, 187, 200, 238, 254, 258, 268, 294, 299, 323, 330, 334, 338, 339, 346, 361, 403, 408, 445, 448, 450, 451, 453, 455, 456, 457, 458, 464, 467, 485, 501, 502, 504, 509, 516, 518, 545, 552, 561], "flake8": 1, "autopep8": 1, "clean": [1, 214, 217, 250, 381, 392, 395, 402, 403, 408, 410, 411, 412, 499, 515], "add": [1, 2, 4, 13, 47, 70, 78, 90, 132, 137, 141, 150, 167, 198, 200, 222, 236, 238, 258, 259, 266, 280, 285, 290, 294, 296, 299, 301, 308, 331, 334, 339, 374, 381, 382, 384, 391, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 407, 408, 409, 410, 411, 412, 414, 430, 516, 541, 545, 548, 552, 555, 557, 563, 566, 576, 577, 579], "unit": [1, 293, 323, 508, 516], "test": [1, 7, 47, 215, 251, 271, 545, 561, 581], "cover": [1, 558, 571], "would": [1, 4, 132, 323, 564, 570, 573], "like": [1, 2, 3, 8, 38, 40, 43, 46, 71, 73, 100, 123, 125, 132, 161, 167, 186, 187, 188, 200, 204, 209, 226, 238, 242, 247, 257, 258, 266, 272, 295, 298, 299, 308, 310, 311, 312, 316, 317, 318, 323, 335, 351, 545, 550, 553, 560, 567, 569, 573, 579], "run": [1, 5, 7, 8, 37, 38, 40, 43, 45, 47, 71, 132, 167, 186, 187, 197, 214, 216, 235, 250, 258, 271, 274, 294, 295, 330, 334, 335, 338, 339, 463, 509, 531, 532, 533, 545, 552, 556, 557, 564, 569, 571, 573, 575, 576, 577, 579, 580], "ha": [1, 3, 8, 13, 38, 40, 43, 46, 71, 73, 88, 89, 93, 94, 96, 100, 119, 132, 144, 161, 216, 258, 259, 273, 293, 295, 301, 323, 330, 545, 547, 555, 560, 564, 570, 572, 573, 574, 576, 579], "adopt": 1, "develop": [1, 2, 169, 516, 561, 564, 571, 573, 574, 576], "certif": [1, 545], "origin": [1, 4, 70, 71, 173, 198, 215, 216, 236, 251, 258, 271, 280, 285, 290, 293, 294, 295, 296, 323, 330, 331, 334, 339, 343, 364, 548, 569, 570, 573, 578, 579, 580], "must": [1, 2, 215, 251, 262, 266, 304, 308, 561, 578], "agre": 1, "term": [1, 252, 258, 330, 332, 550, 562, 563, 566, 567, 579], "sign": [1, 545, 573, 576], "off": [1, 4, 93, 94, 96, 574], "each": [1, 4, 5, 8, 40, 43, 46, 47, 71, 72, 73, 78, 79, 80, 81, 84, 85, 90, 91, 92, 95, 97, 98, 99, 101, 103, 104, 106, 108, 109, 110, 113, 115, 116, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 137, 162, 166, 169, 196, 200, 203, 211, 215, 234, 238, 241, 248, 251, 260, 262, 263, 264, 273, 274, 280, 295, 302, 304, 305, 306, 317, 318, 319, 323, 330, 343, 355, 356, 545, 547, 548, 550, 553, 557, 566, 567, 569, 570, 576, 577, 578, 579], "random": [1, 3, 81, 161, 167, 211, 215, 248, 251, 271, 284, 300, 338, 342, 526, 553, 572, 578, 580], "j": [1, 533], "org": [1, 2, 7, 262, 280, 295, 304, 320, 545, 561], "type": [1, 4, 8, 13, 38, 40, 43, 45, 46, 47, 70, 71, 72, 73, 83, 86, 87, 88, 89, 96, 100, 111, 112, 118, 119, 120, 123, 132, 135, 137, 138, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 167, 169, 173, 174, 176, 180, 187, 188, 196, 198, 200, 204, 207, 208, 209, 212, 215, 217, 222, 226, 234, 236, 238, 242, 245, 246, 247, 249, 251, 253, 255, 256, 258, 259, 260, 262, 265, 266, 268, 271, 273, 280, 283, 286, 287, 288, 293, 295, 297, 299, 301, 302, 304, 307, 308, 310, 311, 312, 316, 317, 318, 319, 323, 329, 330, 332, 333, 334, 336, 337, 338, 339, 343, 346, 347, 350, 351, 354, 360, 374, 379, 393, 394, 403, 404, 406, 408, 446, 501, 504, 506, 508, 511, 512, 545, 548, 552, 557, 560, 564, 569, 573, 576, 578, 579, 580], "featur": [1, 4, 132, 183, 198, 199, 211, 215, 217, 236, 237, 248, 251, 280, 300, 546, 547, 549, 550, 564, 565, 571, 575, 578], "bug": 1, "fix": [1, 198, 236, 295, 330, 548, 570, 579], "document": [1, 215, 251, 544, 552, 553, 564, 575, 578], "valid": [1, 3, 8, 38, 40, 43, 71, 72, 73, 80, 132, 161, 200, 238, 262, 274, 294, 295, 304, 317, 323, 330, 334, 464, 533, 548, 550, 557, 560, 562, 569, 570, 573, 575], "api": [1, 2, 5, 9, 11, 15, 29, 30, 46, 71, 96, 101, 132, 144, 257, 258, 262, 296, 298, 304, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 532, 533, 547, 555, 559, 560, 575, 576, 579], "descript": [1, 2, 45, 132, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 255, 256, 262, 282, 304], "jira": 1, "ticket": 1, "xxx": [1, 200, 238, 548, 550], "potenti": [1, 3], "risk": 1, "trigger": [1, 216, 258, 295, 330], "pr": [1, 563], "been": [1, 3, 13, 89, 214, 250, 259, 273, 293, 295, 301, 323, 330, 545, 550, 564], "reproduc": 1, "hardwar": [1, 8, 43, 72, 504, 550, 560, 564, 568, 569, 570, 571, 572], "depend": [1, 38, 40, 45, 73, 88, 186, 187, 216, 258, 269, 281, 282, 335, 556, 557, 572, 579], "librari": [1, 7, 219, 258, 544, 561, 571], "introduc": [1, 8, 100, 555, 557, 569, 570, 573, 575, 579], "submit": 1, "also": [1, 3, 4, 7, 8, 13, 197, 200, 204, 209, 215, 235, 238, 242, 247, 251, 259, 301, 323, 335, 344, 545, 546, 547, 550, 560, 563, 566, 567, 569, 573, 574, 579], "reach": [1, 187, 293, 297, 323, 333, 346, 569, 570, 579], "out": [1, 2, 7, 161, 198, 199, 200, 236, 237, 238, 257, 258, 280, 293, 298, 316, 323, 548, 572, 573], "intend": 1, "safe": [1, 144, 355, 356], "collabor": 1, "adher": 1, "3": [2, 3, 4, 5, 7, 47, 72, 73, 96, 137, 167, 200, 204, 209, 212, 215, 238, 242, 247, 249, 251, 262, 274, 304, 506, 545, 548, 550, 552, 555, 557, 563, 564, 566, 569, 572, 573, 576, 578, 579, 581], "2": [2, 4, 5, 7, 8, 10, 70, 72, 73, 79, 100, 175, 199, 216, 237, 262, 264, 266, 274, 288, 289, 295, 304, 306, 308, 323, 330, 336, 338, 344, 544, 548, 550, 557, 560, 562, 563, 564, 566, 567, 568, 569, 573, 575, 576, 578, 579], "pytorch": [2, 3, 7, 8, 197, 198, 200, 203, 204, 207, 208, 209, 212, 215, 217, 222, 224, 235, 236, 238, 241, 242, 245, 246, 247, 249, 251, 253, 255, 256, 257, 258, 265, 266, 267, 291, 293, 296, 298, 307, 308, 318, 323, 331, 335, 344, 364, 437, 444, 467, 477, 497, 550, 553, 554, 555, 557, 560, 561, 564, 565, 569, 571, 572, 573, 575, 579, 580], "toolkit": [2, 7, 561, 571], "transform": [2, 3, 7, 15, 33, 46, 70, 76, 88, 116, 117, 119, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 162, 165, 166, 198, 199, 200, 201, 202, 203, 205, 207, 208, 209, 236, 237, 238, 239, 240, 241, 243, 245, 246, 247, 258, 277, 279, 280, 300, 374, 378, 384, 389, 403, 406, 408, 413, 415, 437, 516, 517, 518, 519, 524, 546, 547, 548, 550, 551, 552, 569, 571, 574, 577, 580], "nn": [2, 4, 5, 173, 217, 253, 255, 274, 278, 280, 335, 555, 565, 569, 577], "modul": [2, 4, 5, 253, 258, 275, 276, 277, 281, 291, 292, 322, 505, 513, 521, 545, 546, 550, 555, 560, 563, 565, 572, 574, 577], "three": [2, 8, 100, 198, 236, 258, 285, 290, 296, 331, 545, 547, 555, 561, 564, 567, 573, 574, 576, 577, 579], "main": [2, 4, 7, 186, 222, 296, 331, 346, 496, 533, 552, 573], "compon": [2, 7, 10, 252, 258, 269, 281, 285, 290, 298, 299, 300, 351, 497, 532, 535, 547, 552, 562, 567, 568], "symbol": [2, 45, 173, 259, 301, 335, 565], "tracer": 2, "intermedi": [2, 47, 70, 217, 560, 569, 573], "code": [2, 7, 8, 186, 187, 216, 258, 268, 276, 277, 280, 296, 299, 335, 403, 408, 426, 444, 509, 510, 541, 542, 547, 548, 550, 552, 558, 560, 562, 563, 566, 567, 569, 571, 572, 573, 576, 577, 578], "gener": [2, 7, 8, 38, 40, 45, 70, 73, 116, 117, 144, 186, 187, 188, 197, 200, 201, 202, 203, 209, 212, 215, 216, 226, 235, 238, 239, 240, 241, 247, 249, 251, 255, 256, 258, 259, 267, 271, 278, 285, 293, 296, 299, 301, 323, 331, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 361, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 379, 403, 408, 414, 469, 474, 478, 481, 483, 484, 489, 490, 491, 500, 509, 541, 545, 547, 550, 563, 564, 566, 568, 569, 570, 571, 573, 574, 577, 578, 579], "With": [2, 5, 8, 123, 547, 566, 569, 571, 573, 576, 579, 581], "convert": [2, 4, 5, 38, 40, 45, 70, 71, 73, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 99, 100, 104, 106, 107, 108, 109, 110, 113, 116, 117, 126, 127, 129, 130, 131, 198, 211, 214, 215, 236, 248, 250, 251, 258, 262, 266, 268, 282, 284, 294, 304, 308, 310, 311, 312, 316, 318, 336, 351, 383, 390, 399, 494, 506, 564, 573, 574, 578], "torch": [2, 4, 5, 71, 169, 173, 179, 183, 217, 253, 255, 266, 274, 278, 280, 300, 308, 318, 323, 335, 552, 555, 564, 565, 569, 573, 577], "graphmodul": [2, 71, 173, 574], "can": [2, 3, 4, 5, 7, 8, 82, 162, 169, 177, 178, 186, 187, 197, 200, 215, 216, 218, 219, 235, 238, 251, 258, 262, 264, 266, 278, 280, 285, 290, 293, 295, 296, 297, 300, 304, 306, 308, 319, 323, 330, 331, 333, 335, 467, 499, 506, 516, 545, 546, 547, 548, 550, 552, 553, 557, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580], "resolv": [2, 6], "automat": [2, 7, 200, 203, 210, 211, 238, 241, 248, 257, 258, 267, 274, 298, 545, 548, 560, 564, 567, 570, 578, 579], "insert": [2, 4, 73, 129, 132, 135, 154, 165, 253, 255, 560, 573, 574, 577], "quant": [2, 4, 73, 173, 573], "dequant": [2, 4, 115, 118, 120, 121, 123, 150, 169, 173, 416, 577], "oper": [2, 4, 70, 132, 167, 211, 248, 280, 293, 323, 339, 528, 532, 545, 555, 566, 573, 578, 579], "floatfunct": [2, 4], "wrap": [2, 73, 138, 144, 217, 262, 304, 374, 552], "tensor": [2, 4, 38, 40, 43, 45, 46, 47, 70, 71, 73, 96, 132, 144, 161, 167, 169, 215, 217, 251, 253, 254, 255, 280, 288, 289, 293, 295, 297, 316, 317, 318, 320, 323, 330, 332, 333, 343, 355, 356, 405, 408, 416, 445, 548, 569, 570, 573, 575, 577, 578, 579], "requir": [2, 4, 5, 8, 135, 144, 225, 258, 262, 274, 299, 304, 312, 317, 336, 339, 363, 365, 374, 377, 432, 438, 445, 448, 450, 457, 463, 470, 471, 472, 473, 475, 476, 477, 479, 482, 483, 488, 493, 497, 545, 546, 547, 551, 552, 557, 561, 564, 565, 568, 570, 573, 575, 576, 577, 579, 580], "special": [2, 138, 563, 566], "handl": [2, 6, 86, 88, 167, 258, 271, 272, 273, 298, 506, 532, 533, 547], "cat": 2, "output": [2, 4, 5, 8, 13, 37, 47, 71, 73, 79, 85, 86, 96, 100, 111, 112, 118, 120, 125, 132, 135, 144, 161, 167, 180, 186, 187, 214, 217, 219, 220, 224, 250, 252, 253, 255, 257, 258, 259, 262, 266, 271, 272, 280, 293, 301, 304, 307, 308, 317, 323, 330, 335, 351, 352, 355, 381, 392, 395, 402, 408, 410, 411, 445, 455, 456, 457, 471, 475, 478, 501, 509, 517, 523, 545, 547, 550, 552, 555, 557, 558, 563, 565, 569, 572, 573, 577, 578, 579, 580], "paramet": [2, 4, 5, 13, 38, 40, 43, 45, 46, 47, 64, 70, 71, 73, 82, 83, 84, 85, 86, 87, 88, 89, 96, 99, 100, 104, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 126, 127, 130, 131, 132, 135, 137, 138, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 167, 169, 173, 174, 176, 178, 179, 180, 183, 186, 187, 188, 197, 198, 200, 204, 207, 208, 209, 211, 212, 214, 215, 216, 217, 222, 226, 235, 236, 238, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 280, 281, 282, 283, 284, 285, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 312, 314, 317, 318, 319, 320, 323, 329, 330, 331, 332, 333, 334, 335, 338, 339, 343, 346, 347, 350, 351, 354, 355, 356, 360, 361, 374, 378, 383, 384, 403, 404, 405, 408, 414, 416, 425, 451, 469, 474, 478, 481, 484, 496, 501, 506, 508, 509, 515, 516, 518, 528, 529, 545, 547, 548, 552, 553, 560, 563, 569, 570, 573, 576, 578, 579, 580], "fuse": [2, 4, 5, 38, 45, 71, 73, 90, 91, 95, 96, 97, 98, 118, 119, 120, 121, 123, 157, 169, 173, 577], "combin": [2, 8, 43, 72, 186, 187, 211, 225, 248, 258, 299, 335, 361, 553, 560, 567, 571, 574, 578, 579], "singl": [2, 191, 198, 214, 215, 229, 236, 250, 251, 262, 271, 273, 295, 297, 304, 320, 333, 338, 397, 414, 433, 501, 535, 548, 569, 570], "obtain": [2, 293, 294, 297, 323, 331, 332, 333, 334, 555, 576, 579], "higher": [2, 5, 186, 187, 283, 335, 336, 550, 555, 563, 564, 569, 570, 573, 576, 579], "accuraci": [2, 4, 5, 7, 71, 178, 186, 187, 216, 252, 257, 258, 266, 270, 271, 272, 274, 281, 285, 290, 298, 300, 308, 319, 335, 336, 339, 344, 346, 366, 382, 392, 402, 408, 410, 484, 508, 514, 517, 519, 535, 545, 546, 547, 551, 552, 553, 555, 563, 564, 566, 567, 569, 570, 571, 572, 575, 576, 577, 580, 581], "perform": [2, 3, 5, 7, 8, 88, 123, 178, 198, 210, 211, 214, 216, 236, 248, 250, 257, 258, 269, 270, 272, 274, 281, 282, 285, 290, 298, 300, 319, 330, 332, 339, 343, 366, 382, 392, 402, 408, 410, 499, 508, 517, 519, 526, 535, 545, 546, 547, 549, 551, 555, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581], "done": [2, 4, 5, 550, 569, 573], "_": [2, 3, 4, 5, 8, 186, 187, 335, 544, 550, 552, 553, 557, 563, 564, 565, 566, 569, 570, 573, 574, 575, 576, 577, 579, 580], "list": [2, 4, 7, 8, 13, 38, 40, 43, 45, 46, 47, 70, 71, 73, 79, 82, 132, 137, 144, 161, 167, 173, 186, 187, 191, 198, 211, 214, 215, 216, 217, 229, 236, 248, 250, 251, 253, 255, 258, 259, 260, 262, 263, 264, 266, 271, 273, 274, 283, 285, 290, 293, 296, 301, 302, 304, 305, 306, 308, 317, 318, 319, 323, 331, 335, 339, 343, 346, 351, 352, 355, 356, 374, 376, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 425, 428, 430, 431, 433, 445, 448, 451, 452, 455, 456, 457, 459, 464, 467, 469, 471, 474, 475, 478, 481, 484, 494, 501, 506, 508, 509, 510, 514, 516, 517, 518, 519, 520, 522, 523, 524, 526, 528, 535, 544, 557, 566, 572, 574, 577, 579], "current": [2, 3, 4, 8, 40, 43, 46, 72, 73, 88, 96, 100, 132, 137, 258, 268, 274, 285, 290, 293, 295, 296, 297, 320, 323, 330, 331, 333, 338, 339, 343, 344, 346, 545, 552, 553, 557, 563, 566, 569, 570, 573, 579], "fusion": [2, 4, 8, 43, 72, 96, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 557], "conv": [2, 4, 38, 47, 119, 157, 183, 300, 323, 572], "relu": [2, 4, 38, 100, 157, 557, 577], "batchnorm": [2, 143], "linear": [2, 4, 70, 183, 253, 255, 293, 300, 323, 550, 555], "pleas": [2, 3, 5, 6, 7, 8, 132, 169, 198, 199, 200, 203, 236, 237, 238, 241, 258, 285, 290, 293, 295, 296, 320, 323, 331, 545, 548, 551, 552, 561, 563, 564, 566, 569, 570, 574, 575, 576], "refer": [2, 5, 7, 8, 13, 169, 198, 236, 258, 259, 260, 265, 266, 285, 290, 293, 295, 296, 301, 302, 307, 308, 320, 323, 331, 546, 548, 551, 552, 558, 562, 563, 564, 566, 569, 572, 573, 575, 578, 579], "graph": [2, 8, 46, 47, 71, 73, 76, 82, 83, 84, 85, 86, 87, 88, 89, 96, 99, 100, 101, 104, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 126, 127, 130, 131, 132, 154, 161, 162, 165, 166, 167, 197, 235, 255, 257, 300, 310, 311, 316, 317, 318, 368, 370, 372, 437, 445, 448, 456, 457, 459, 469, 470, 471, 476, 477, 481, 494, 495, 497, 517, 520, 532, 548, 550, 552, 558, 563, 565, 573, 574, 577], "10004": [2, 3, 8, 550, 555, 557, 560, 564, 567, 572, 580], "backend": [2, 40, 43, 46, 47, 71, 72, 73, 189, 190, 194, 198, 199, 201, 202, 203, 204, 205, 209, 212, 215, 222, 227, 228, 230, 232, 236, 237, 239, 240, 241, 242, 243, 247, 249, 251, 267, 344, 544, 552, 553, 558, 560, 572, 573, 578, 580], "field": [2, 8, 132, 161, 200, 238, 262, 299, 304, 545, 546, 552, 553, 576, 579, 580], "indic": [2, 191, 196, 198, 229, 234, 236, 252, 258, 262, 278, 280, 283, 284, 304, 323, 545, 546, 556, 577], "user": [2, 3, 4, 7, 8, 43, 72, 132, 178, 186, 187, 189, 192, 200, 203, 207, 208, 209, 215, 216, 222, 225, 238, 241, 245, 246, 247, 251, 257, 258, 271, 273, 285, 290, 296, 298, 299, 300, 330, 331, 335, 339, 346, 351, 361, 500, 550, 553, 557, 560, 563, 564, 565, 566, 567, 569, 571, 573, 574, 575, 577, 578, 579], "configur": [2, 3, 4, 8, 37, 38, 40, 43, 45, 46, 71, 72, 73, 132, 173, 178, 179, 183, 186, 187, 189, 192, 200, 203, 209, 216, 238, 241, 252, 253, 255, 257, 258, 262, 268, 269, 270, 271, 273, 281, 282, 285, 290, 294, 296, 298, 299, 300, 304, 323, 331, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 350, 351, 360, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 381, 392, 403, 405, 408, 467, 469, 474, 478, 481, 484, 497, 499, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 531, 533, 545, 546, 548, 551, 563, 566, 575, 578, 579, 581], "And": [2, 96, 225, 258], "default": [2, 7, 8, 13, 38, 40, 71, 73, 124, 132, 161, 167, 180, 183, 186, 187, 188, 190, 198, 199, 200, 211, 215, 217, 225, 226, 228, 236, 237, 238, 248, 251, 253, 255, 258, 259, 262, 265, 266, 268, 280, 294, 300, 301, 304, 307, 308, 317, 334, 361, 383, 385, 386, 388, 390, 393, 394, 399, 421, 422, 425, 442, 452, 504, 506, 516, 518, 519, 523, 524, 545, 546, 547, 548, 553, 555, 557, 560, 563, 566, 572, 574, 576, 578, 579, 580], "valu": [2, 4, 5, 38, 40, 43, 46, 47, 70, 71, 73, 81, 82, 88, 93, 94, 96, 116, 117, 132, 137, 161, 162, 167, 177, 179, 180, 186, 187, 198, 201, 202, 211, 215, 216, 217, 236, 239, 240, 248, 251, 258, 262, 266, 272, 273, 278, 285, 290, 293, 294, 296, 304, 308, 318, 319, 320, 323, 331, 334, 335, 338, 343, 346, 352, 354, 355, 361, 374, 376, 378, 383, 385, 386, 388, 390, 393, 394, 399, 403, 404, 425, 427, 466, 498, 501, 502, 506, 508, 514, 516, 519, 524, 526, 527, 529, 540, 545, 547, 548, 553, 557, 563, 566, 569, 570, 572, 573, 578, 579, 580], "mean": [2, 4, 5, 88, 96, 188, 211, 215, 226, 248, 251, 262, 264, 266, 272, 274, 280, 293, 304, 306, 308, 319, 323, 343, 546, 547, 552, 553, 557, 563, 569, 570, 573, 578, 579, 580], "model": [2, 3, 5, 8, 11, 38, 40, 43, 45, 46, 47, 71, 73, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 138, 161, 167, 169, 173, 178, 183, 186, 187, 194, 197, 198, 200, 215, 216, 217, 219, 220, 225, 232, 235, 236, 238, 251, 252, 253, 254, 255, 256, 257, 258, 266, 267, 268, 269, 270, 272, 274, 279, 280, 281, 282, 284, 285, 290, 293, 294, 295, 296, 297, 298, 299, 300, 307, 308, 323, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 351, 354, 360, 361, 363, 364, 365, 367, 378, 381, 389, 392, 395, 397, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 420, 424, 425, 430, 431, 432, 435, 436, 437, 461, 462, 464, 467, 470, 471, 472, 473, 475, 476, 477, 478, 482, 483, 488, 490, 493, 494, 497, 498, 505, 514, 516, 521, 531, 532, 536, 546, 547, 548, 550, 551, 552, 553, 558, 560, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 580], "neural_compressor": [2, 3, 5, 7, 13, 546, 547, 548, 550, 552, 555, 558, 563, 564, 565, 566, 567, 569, 572, 573, 574, 575, 576, 578, 579, 580], "import": [2, 3, 4, 5, 7, 167, 258, 268, 271, 351, 361, 546, 547, 548, 550, 552, 555, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 576, 577, 578, 579], "posttrainingquantconfig": [2, 7, 576, 579], "conf": [2, 3, 5, 7, 174, 176, 186, 187, 216, 258, 267, 268, 285, 290, 299, 310, 311, 312, 316, 318, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 351, 524, 527, 546, 547, 550, 558, 576, 579], "eval": [2, 4, 5, 46, 225, 258, 262, 268, 304, 577], "q_model": [2, 5, 71, 169, 258, 268, 547, 548, 552, 555, 558, 563, 565, 566, 573], "fit": [2, 5, 7, 178, 323, 335, 338, 547, 548, 550, 552, 558, 563, 565, 566, 567, 569, 570, 573], "calib_dataload": [2, 7, 218, 219, 258, 298, 299, 335, 547, 548, 558, 563, 573], "dataload": [2, 7, 8, 15, 33, 38, 40, 43, 45, 46, 47, 71, 73, 169, 173, 178, 186, 187, 198, 209, 216, 219, 225, 236, 247, 252, 258, 268, 285, 290, 295, 298, 299, 300, 335, 351, 354, 362, 367, 374, 378, 389, 403, 406, 408, 413, 415, 437, 478, 491, 494, 497, 505, 516, 517, 521, 545, 548, 552, 558, 563, 564, 573, 577, 578, 580], "eval_func": [2, 186, 187, 225, 257, 258, 268, 299, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 546, 547, 548, 552, 564, 573, 579, 580], "save": [2, 4, 8, 38, 40, 43, 46, 71, 73, 132, 200, 204, 209, 238, 242, 247, 253, 255, 272, 282, 299, 310, 311, 312, 314, 316, 317, 318, 339, 346, 351, 352, 355, 361, 558, 564, 565, 569, 570, 573], "path": [2, 3, 4, 8, 38, 40, 43, 46, 71, 73, 161, 167, 178, 179, 198, 199, 200, 215, 236, 237, 238, 251, 252, 253, 255, 257, 258, 268, 269, 270, 271, 274, 281, 282, 285, 290, 294, 296, 298, 299, 300, 312, 314, 317, 318, 331, 334, 335, 351, 361, 362, 367, 381, 384, 391, 392, 395, 402, 403, 408, 410, 411, 425, 431, 442, 445, 448, 450, 451, 453, 455, 456, 457, 458, 462, 469, 474, 478, 481, 484, 485, 491, 501, 509, 514, 516, 517, 526, 541, 545, 546, 547, 548, 550, 552, 558, 563, 565, 569, 578, 580], "approach": [2, 3, 7, 71, 179, 258, 269, 270, 271, 280, 281, 282, 346, 378, 517, 524, 550, 553, 560, 571, 572, 579, 580], "quantizationawaretrainingconfig": [2, 579], "prepare_compress": [2, 351], "compression_manag": [2, 351], "callback": [2, 285, 290, 351, 352, 354, 355, 532], "on_train_begin": [2, 225, 258, 285, 290, 295, 296, 330, 331, 351, 550], "loop": [2, 3, 5, 319, 351, 557, 576, 579], "now": [2, 3, 215, 251, 514, 548, 552, 572, 578, 579], "auto": [2, 336, 361], "method": [2, 3, 4, 5, 7, 71, 132, 144, 161, 162, 173, 191, 196, 197, 198, 200, 204, 207, 208, 209, 212, 215, 218, 219, 229, 234, 235, 236, 238, 242, 245, 246, 247, 249, 251, 258, 265, 266, 271, 274, 280, 282, 283, 284, 288, 298, 307, 308, 310, 311, 312, 314, 316, 317, 318, 332, 501, 506, 510, 528, 546, 547, 550, 551, 553, 563, 567, 569, 570, 573, 574, 578, 579], "avoid": [2, 198, 236, 577], "log": [2, 165, 285, 290, 364, 381, 392, 395, 402, 408, 410, 411, 467, 501, 507, 508, 509, 510, 515, 529, 545, 576, 577, 579], "fail": [2, 132, 510], "trace": [2, 71, 169, 173, 253, 255, 335, 341, 579], "info": [2, 38, 40, 43, 46, 71, 132, 209, 212, 213, 218, 219, 223, 255, 293, 299, 313, 323, 334, 381, 382, 384, 391, 392, 395, 396, 398, 401, 501, 504, 509, 516, 532, 545, 555, 565], "entir": [2, 4, 5, 335, 569, 570], "conduct": 2, "imper": 2, "control": [2, 38, 40, 43, 73, 112, 174, 176, 274, 408, 413, 545, 568, 579], "flow": [2, 3, 258, 263, 264, 285, 290, 305, 306], "therefor": [2, 5, 570, 573, 575], "int8": [2, 5, 8, 38, 40, 43, 46, 70, 71, 72, 73, 162, 169, 177, 211, 248, 253, 254, 255, 339, 355, 356, 416, 544, 545, 548, 551, 557, 572, 573, 574, 575, 576, 577, 578, 580], "lot": [2, 553], "9": [2, 4, 5, 7, 183, 273, 300, 561, 569, 570, 572, 579, 580, 581], "between": [2, 4, 8, 73, 162, 169, 177, 215, 217, 251, 263, 265, 266, 271, 273, 274, 305, 307, 308, 330, 416, 528, 532, 546, 550, 555, 560, 563, 573, 575, 576, 578, 579], "don": [2, 37, 162, 177, 323, 506, 545, 579], "t": [2, 4, 8, 37, 93, 94, 96, 132, 161, 162, 177, 215, 218, 219, 251, 264, 273, 274, 278, 299, 306, 323, 506, 515, 545, 546, 547, 550, 552, 564, 569, 579, 580, 581], "need": [2, 5, 8, 37, 38, 40, 43, 45, 46, 71, 73, 78, 79, 80, 81, 84, 85, 88, 90, 91, 92, 95, 97, 98, 99, 101, 103, 104, 106, 107, 108, 109, 110, 113, 115, 116, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 153, 154, 158, 161, 178, 186, 187, 188, 196, 197, 200, 207, 208, 209, 215, 218, 219, 220, 221, 226, 234, 235, 238, 245, 246, 247, 251, 252, 258, 265, 266, 271, 278, 280, 285, 290, 299, 307, 308, 311, 313, 316, 323, 335, 339, 343, 346, 360, 361, 535, 545, 546, 547, 548, 550, 552, 560, 564, 566, 569, 572, 573, 574, 575, 578, 579, 580], "becaus": [2, 215, 251, 262, 293, 304, 323, 569, 573, 578, 579], "modifi": [2, 82, 88, 96, 107, 200, 238, 258, 285, 290, 296, 331, 495, 545, 546, 552, 557, 580], "sourc": [2, 7, 38, 40, 47, 73, 219, 258, 260, 268, 280, 302, 429, 562, 571], "8": [2, 4, 5, 7, 135, 214, 250, 506, 557, 561, 566, 571, 579, 581], "As": [2, 107, 262, 304, 545, 547, 550, 553, 569, 570, 579], "cannot": [2, 262, 304, 504, 555, 556, 577], "iter": [2, 3, 5, 8, 38, 40, 43, 45, 46, 47, 71, 73, 167, 186, 187, 191, 196, 200, 201, 204, 209, 218, 219, 229, 234, 238, 239, 242, 247, 282, 295, 297, 330, 333, 335, 354, 355, 356, 381, 509, 517, 547, 550, 569, 570, 572, 577, 579, 580], "so": [2, 8, 144, 215, 251, 295, 351, 553, 556, 560, 563, 573, 574, 577, 578], "might": [2, 545, 579], "meet": [2, 7, 299, 336, 339, 344, 555, 566, 571, 572, 573, 577, 579], "failur": [2, 528], "sometim": [2, 132, 161, 569, 573], "order": [2, 13, 173, 259, 260, 280, 299, 301, 302, 337, 338, 339, 343, 344, 445, 448, 457, 518, 563, 569, 572, 577, 579], "successfulli": [2, 552, 571], "suggest": [2, 280, 284, 338, 576], "two": [2, 3, 119, 132, 169, 200, 204, 205, 209, 216, 238, 242, 243, 247, 262, 293, 297, 299, 304, 323, 330, 333, 361, 545, 546, 548, 550, 552, 557, 563, 564, 567, 569, 573, 574, 576, 579, 580], "first": [2, 3, 4, 5, 8, 47, 73, 119, 162, 177, 180, 198, 214, 236, 250, 252, 258, 262, 304, 336, 339, 425, 545, 548, 555, 561, 564, 572, 573, 574, 576, 577, 579, 580], "pass": [2, 4, 5, 8, 103, 107, 167, 178, 214, 250, 258, 278, 280, 285, 290, 296, 299, 331, 361, 459, 515, 528, 529, 546, 547, 548, 550, 552, 555, 558, 563, 566, 569, 572, 573, 574, 580], "non": [2, 4, 144, 222, 294, 568, 569, 579], "traceabl": [2, 71], "class": [2, 3, 4, 64, 138, 283, 329, 335, 439, 440, 546, 547, 548, 550, 553, 563, 566, 567, 577, 579, 580], "name": [2, 4, 7, 38, 40, 46, 47, 70, 71, 73, 79, 88, 89, 93, 94, 96, 132, 137, 138, 154, 161, 167, 169, 174, 176, 180, 198, 199, 200, 203, 204, 207, 208, 209, 212, 213, 215, 216, 217, 219, 220, 222, 223, 224, 236, 237, 238, 241, 242, 245, 246, 247, 249, 251, 253, 254, 255, 261, 262, 265, 266, 271, 272, 274, 280, 285, 288, 290, 293, 295, 297, 299, 303, 304, 307, 308, 313, 317, 318, 320, 323, 330, 332, 333, 352, 355, 361, 381, 385, 386, 388, 391, 392, 393, 394, 395, 397, 416, 425, 427, 445, 448, 450, 451, 457, 464, 465, 466, 467, 478, 494, 501, 504, 516, 518, 519, 540, 545, 546, 548, 552, 553, 557, 562, 563, 565, 568, 575, 576, 577, 579, 580, 581], "select": [2, 3, 198, 236, 270, 274, 281, 332, 344, 545, 560, 561, 570, 573, 577, 579], "proxi": 2, "object": [2, 3, 4, 7, 13, 38, 40, 43, 45, 46, 70, 71, 73, 82, 83, 84, 85, 86, 87, 88, 89, 99, 100, 104, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 126, 127, 130, 131, 132, 135, 138, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 169, 173, 174, 176, 178, 179, 180, 186, 187, 188, 189, 191, 192, 196, 198, 199, 200, 204, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 229, 234, 236, 237, 238, 242, 245, 246, 247, 249, 250, 251, 252, 255, 257, 258, 259, 262, 265, 266, 267, 270, 271, 273, 281, 282, 284, 285, 286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 307, 308, 311, 312, 313, 314, 317, 318, 320, 323, 330, 331, 332, 333, 334, 335, 338, 346, 352, 354, 355, 356, 360, 361, 378, 393, 394, 397, 400, 441, 506, 509, 516, 526, 528, 529, 533, 545, 546, 547, 548, 556, 563, 564, 565, 567, 572, 573, 578, 579], "them": [2, 88, 132, 198, 236, 547, 557, 558, 567, 569, 579], "prepar": [2, 4, 5, 7, 45, 71, 225, 252, 258, 285, 290, 296, 298, 403, 408, 496, 548, 552, 573], "dict": [2, 38, 40, 43, 45, 46, 71, 73, 135, 137, 138, 144, 167, 169, 173, 179, 180, 186, 187, 197, 200, 216, 217, 222, 235, 238, 253, 254, 255, 258, 261, 262, 263, 264, 266, 269, 271, 274, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 293, 294, 295, 296, 297, 303, 304, 305, 306, 308, 312, 317, 320, 323, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 350, 352, 354, 355, 360, 361, 362, 364, 367, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 421, 422, 425, 433, 442, 445, 452, 460, 461, 462, 464, 466, 467, 468, 469, 474, 478, 481, 484, 485, 486, 487, 489, 491, 492, 494, 501, 502, 504, 506, 508, 509, 512, 514, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 528, 529, 532, 533, 535, 537, 539, 540, 542, 563, 572, 577, 579], "http": [2, 4, 7, 169, 198, 200, 236, 238, 259, 260, 262, 263, 264, 280, 293, 295, 296, 301, 302, 304, 305, 306, 320, 323, 331, 541, 545, 548, 561, 562, 575], "tutori": [2, 571], "prototyp": 2, "guid": [2, 7, 198, 236, 548, 550, 561], "html": 2, "highlight": [2, 430, 433, 545], "decor": [2, 3, 8, 38, 64, 93, 94, 96, 167, 174, 176, 209, 212, 215, 222, 247, 249, 251, 265, 266, 283, 288, 293, 295, 297, 307, 308, 319, 323, 329, 330, 333, 346, 361, 511, 579], "untrac": 2, "part": [2, 47, 252, 258, 262, 293, 295, 304, 330, 547, 550, 561, 564, 569], "global": [2, 137, 183, 293, 300, 323, 330, 529, 572, 579], "function": [2, 3, 5, 8, 40, 43, 46, 73, 88, 132, 161, 186, 187, 199, 225, 237, 257, 258, 269, 280, 281, 282, 285, 290, 296, 299, 316, 331, 352, 355, 545, 546, 547, 550, 558, 560, 561, 563, 564, 569, 570, 573, 576, 577, 579], "call": [2, 3, 8, 37, 45, 144, 225, 258, 262, 273, 274, 285, 290, 293, 295, 296, 304, 330, 380, 413, 501, 509, 510, 545, 547, 558, 569, 573, 577, 578], "want": [2, 8, 93, 94, 96, 132, 196, 198, 234, 236, 295, 339, 351, 545, 546, 548, 552, 563, 566, 567, 576, 577, 579], "move": [2, 73, 572, 575], "keep": [2, 8, 293, 294, 334, 339, 575, 579], "should": [2, 3, 4, 8, 40, 43, 46, 47, 71, 72, 73, 80, 100, 137, 138, 162, 166, 186, 187, 196, 198, 200, 204, 209, 214, 215, 219, 220, 234, 236, 238, 242, 247, 250, 251, 255, 260, 265, 266, 295, 299, 302, 307, 308, 323, 330, 335, 346, 361, 425, 506, 545, 548, 552, 563, 566, 570, 573, 578, 579, 580], "try": [2, 196, 234, 445, 448, 457, 529, 555, 573], "detect": [2, 71, 169, 173, 262, 266, 304, 308, 313, 445, 448, 457, 516, 545], "ssd": [2, 581], "resnet34": [2, 581], "ptq": [2, 552, 560, 573, 577, 579], "r34": 2, "py": [2, 4, 8, 132, 167, 169, 260, 262, 263, 264, 295, 302, 304, 305, 306, 330, 532, 545, 552, 561, 573, 575, 577], "def": [2, 4, 5, 8, 93, 94, 96, 154, 186, 187, 335, 548, 550, 552, 563, 566, 569, 573, 577, 579], "bboxes_labels_scor": 2, "bbox": [2, 262, 304, 563], "prob": 2, "criteria": [2, 257, 258, 285, 290, 293, 295, 298, 300, 321, 344], "0": [2, 4, 5, 7, 10, 38, 40, 43, 47, 70, 71, 72, 79, 117, 161, 167, 175, 183, 188, 190, 193, 194, 195, 197, 198, 201, 202, 205, 211, 215, 217, 218, 219, 226, 228, 231, 232, 233, 235, 236, 239, 240, 243, 248, 251, 253, 255, 257, 258, 266, 271, 273, 274, 278, 280, 283, 285, 290, 293, 298, 300, 308, 323, 333, 339, 501, 509, 545, 546, 547, 548, 550, 552, 553, 555, 557, 562, 563, 564, 566, 568, 569, 570, 572, 573, 576, 577, 578, 579, 580], "45": [2, 273, 581], "max_output": 2, "200": [2, 214, 250, 579, 581], "box": [2, 215, 251, 262, 266, 304, 308, 338, 545, 563, 577, 578, 579], "label": [2, 13, 38, 40, 73, 186, 187, 198, 200, 201, 202, 203, 206, 211, 215, 217, 219, 220, 236, 238, 239, 240, 241, 244, 248, 251, 259, 261, 265, 266, 271, 272, 301, 303, 307, 308, 335, 433, 548, 563, 569, 578], "score": [2, 13, 259, 260, 262, 263, 264, 266, 279, 293, 295, 301, 302, 304, 305, 306, 308, 320, 323, 330, 332, 341, 344, 563, 566, 569, 570, 576, 579], "zip": 2, "split": [2, 161, 214, 215, 250, 251, 271, 578], "squeez": 2, "dbox": 2, "dlabel": 2, "dscore": 2, "decode_singl": 2, "append": [2, 4, 173, 299, 338, 566, 567], "return": [2, 3, 4, 5, 13, 38, 40, 43, 45, 46, 47, 70, 71, 73, 76, 79, 82, 83, 86, 87, 88, 89, 93, 94, 96, 100, 107, 111, 112, 116, 117, 118, 119, 120, 121, 129, 132, 135, 137, 138, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 165, 167, 169, 173, 174, 176, 180, 186, 187, 188, 190, 197, 200, 204, 207, 208, 209, 211, 212, 214, 215, 216, 217, 222, 226, 228, 235, 238, 242, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 280, 281, 282, 283, 284, 285, 288, 290, 293, 294, 295, 296, 297, 299, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 316, 317, 318, 319, 323, 329, 330, 331, 332, 333, 334, 335, 338, 339, 343, 346, 347, 350, 351, 354, 355, 356, 360, 361, 381, 382, 384, 391, 392, 393, 394, 395, 397, 398, 400, 401, 425, 428, 429, 430, 431, 462, 501, 504, 506, 508, 509, 510, 516, 519, 528, 529, 532, 548, 552, 563, 564, 565, 566, 573, 577, 579], "process": [3, 5, 8, 38, 40, 43, 46, 71, 73, 138, 169, 186, 187, 198, 199, 200, 209, 211, 212, 215, 216, 225, 236, 237, 238, 247, 248, 249, 251, 252, 253, 255, 258, 269, 270, 273, 279, 281, 282, 285, 290, 293, 295, 296, 297, 299, 300, 323, 330, 331, 333, 334, 335, 338, 360, 377, 460, 461, 464, 497, 501, 505, 508, 509, 517, 545, 546, 547, 548, 550, 551, 552, 555, 567, 569, 570, 573, 577, 578, 579, 580], "autom": 3, "design": [3, 144, 197, 219, 220, 225, 235, 258, 273, 298, 307, 308, 339, 569, 570, 573], "artifici": 3, "network": [3, 4, 7, 169, 271, 274, 295, 320, 323, 341, 545, 550, 551, 555, 571, 573, 579], "ann": 3, "par": 3, "outperform": 3, "hand": [3, 262, 304, 545], "our": [3, 4, 7, 162, 555, 576], "leverag": [3, 101, 550, 567, 573], "algorithm": [3, 7, 8, 13, 45, 179, 214, 250, 259, 266, 269, 273, 281, 282, 284, 301, 308, 338, 355, 356, 550, 557, 560, 569, 570, 573, 577, 579, 580], "built": [3, 8, 101, 144, 189, 194, 198, 199, 204, 206, 208, 209, 211, 212, 215, 219, 220, 222, 227, 230, 232, 236, 237, 242, 244, 246, 247, 248, 249, 251, 299, 307, 308, 546, 552, 566, 578, 579, 580], "grid": [3, 284], "bayesian": [3, 284, 300, 342, 562, 572], "optim": [3, 4, 5, 7, 11, 46, 71, 79, 83, 86, 87, 89, 100, 101, 111, 112, 118, 119, 120, 121, 138, 161, 179, 183, 219, 225, 252, 257, 258, 272, 284, 295, 296, 298, 300, 320, 330, 331, 332, 338, 351, 352, 355, 362, 364, 368, 370, 372, 389, 393, 394, 400, 402, 403, 404, 405, 406, 407, 408, 410, 411, 413, 414, 416, 417, 418, 419, 420, 423, 424, 437, 491, 497, 498, 508, 514, 517, 520, 524, 531, 536, 550, 552, 557, 560, 561, 562, 565, 568, 569, 571, 572, 573, 574, 576, 577, 579, 580], "propos": [3, 8, 282, 323, 550, 564, 569], "base": [3, 8, 13, 38, 40, 43, 45, 46, 70, 71, 72, 73, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 135, 138, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 174, 175, 176, 177, 178, 179, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 258, 259, 262, 265, 266, 267, 269, 270, 271, 273, 274, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 293, 295, 297, 298, 299, 300, 301, 304, 307, 308, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 323, 330, 332, 333, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 352, 355, 356, 361, 366, 367, 368, 370, 371, 372, 373, 376, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 420, 421, 422, 424, 427, 429, 430, 433, 443, 445, 448, 450, 452, 453, 455, 456, 457, 458, 466, 469, 474, 478, 481, 484, 494, 498, 500, 502, 504, 508, 509, 510, 511, 514, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 529, 530, 532, 534, 538, 539, 548, 551, 552, 553, 557, 568, 570, 576, 577, 579, 581], "given": [3, 37, 45, 46, 47, 73, 93, 94, 96, 137, 138, 167, 214, 215, 250, 251, 262, 304, 316, 323, 330, 335, 346, 425, 431, 445, 448, 450, 451, 453, 455, 456, 458, 502, 516, 529, 547, 569, 570, 578], "train": [3, 4, 7, 8, 38, 40, 43, 46, 71, 73, 88, 144, 186, 187, 198, 200, 215, 225, 236, 238, 251, 252, 258, 268, 269, 271, 272, 279, 281, 285, 290, 295, 296, 298, 299, 330, 331, 335, 346, 354, 524, 544, 548, 550, 551, 555, 560, 564, 567, 569, 570, 571, 576, 579, 580, 581], "evalu": [3, 4, 5, 8, 13, 38, 40, 43, 46, 71, 73, 178, 186, 187, 198, 216, 225, 236, 252, 257, 258, 259, 262, 263, 264, 265, 266, 268, 269, 270, 273, 274, 281, 282, 285, 290, 295, 296, 299, 300, 301, 304, 305, 306, 307, 308, 323, 330, 331, 335, 346, 354, 366, 368, 370, 372, 373, 374, 497, 505, 517, 521, 547, 548, 550, 558, 560, 563, 564, 566, 569, 573, 576, 577, 579, 580], "after": [3, 4, 5, 45, 47, 71, 173, 198, 211, 215, 218, 219, 225, 236, 248, 251, 252, 253, 255, 258, 271, 293, 295, 296, 297, 320, 323, 330, 331, 332, 333, 339, 502, 545, 546, 547, 548, 550, 555, 560, 563, 566, 567, 569, 570, 573, 574, 576, 577, 578, 579], "sever": [3, 4, 161, 215, 251, 297, 333, 545, 550, 560, 564, 569, 570, 572, 578, 579, 580], "procedur": [3, 179, 323, 339], "lie": [3, 282], "pareto": [3, 282, 283], "front": [3, 282, 283], "dyna": [3, 258, 271, 272, 273, 274, 275, 281, 300, 560, 572], "super": [3, 4, 5, 264, 271, 274, 306, 566], "metric": [3, 7, 8, 11, 13, 38, 40, 43, 46, 71, 73, 186, 187, 216, 219, 252, 257, 258, 268, 269, 270, 272, 274, 281, 282, 283, 284, 285, 290, 298, 299, 300, 335, 354, 374, 378, 384, 389, 403, 406, 408, 413, 437, 497, 505, 508, 513, 516, 517, 519, 535, 545, 546, 547, 552, 564, 576, 577, 579, 580, 581], "predictor": [3, 270, 271, 272, 274, 281], "predict": [3, 4, 13, 167, 215, 219, 220, 251, 259, 263, 264, 265, 266, 272, 274, 301, 305, 306, 307, 308, 550, 563, 577, 578], "4x": [3, 4, 573], "more": [3, 4, 5, 6, 7, 88, 161, 167, 186, 215, 251, 262, 278, 280, 293, 304, 323, 346, 545, 548, 550, 552, 560, 561, 563, 564, 566, 567, 569, 570, 574, 579, 581], "sampl": [3, 7, 103, 129, 188, 191, 196, 198, 199, 200, 204, 209, 211, 215, 226, 229, 234, 236, 237, 238, 242, 247, 248, 251, 265, 266, 283, 307, 308, 338, 392, 448, 517, 547, 548, 560, 573, 578, 579, 580, 581], "effici": [3, 547, 550, 567, 571], "than": [3, 4, 5, 80, 88, 178, 198, 215, 236, 251, 262, 304, 548, 558, 563, 566, 567, 569, 573, 576, 578, 579], "typic": [3, 88, 137, 144, 258, 268, 299, 551, 569, 570], "one": [3, 7, 8, 13, 73, 132, 137, 154, 189, 192, 209, 215, 225, 251, 258, 259, 262, 265, 266, 268, 271, 293, 296, 297, 301, 304, 307, 308, 323, 331, 333, 351, 510, 545, 547, 550, 551, 552, 557, 560, 561, 563, 564, 566, 567, 569, 570, 572, 573, 575, 578, 579], "shot": [3, 7, 225, 258, 295, 297, 320, 333, 560, 569, 570, 571], "shown": [3, 425, 545, 550, 563, 566, 567, 579], "figur": [3, 569], "phase": [3, 174, 176, 299, 330, 331, 569, 570, 573, 574, 579], "small": [3, 5, 262, 304, 341, 545, 579], "popul": [3, 273], "sub": [3, 71, 78, 79, 80, 81, 84, 85, 90, 91, 92, 95, 97, 98, 99, 101, 103, 104, 106, 108, 109, 110, 113, 115, 116, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 216, 255, 258, 274, 346, 546, 579], "randomli": [3, 215, 251, 284, 338, 345, 578, 579], "measur": [3, 8, 38, 40, 43, 46, 71, 73, 167, 216, 273, 274, 279, 319, 535, 546, 550, 563, 577, 579], "provid": [3, 8, 132, 144, 186, 187, 209, 212, 215, 225, 247, 249, 251, 257, 258, 262, 271, 280, 285, 290, 298, 299, 304, 335, 425, 445, 451, 501, 510, 535, 544, 545, 546, 547, 551, 552, 553, 554, 555, 560, 561, 564, 565, 572, 573, 577, 579, 580, 581], "initi": [3, 4, 70, 138, 167, 186, 187, 195, 198, 217, 225, 233, 236, 252, 258, 269, 270, 281, 282, 294, 295, 299, 316, 330, 346, 380, 403, 404, 413, 462, 494, 496, 504, 517, 524, 547, 548, 563, 564, 569, 570, 579], "inner": 3, "multi": [3, 100, 216, 258, 262, 273, 278, 280, 304, 344, 374, 547, 548, 560, 566, 569, 579], "evolutionari": 3, "extens": [3, 8, 71, 299, 451, 516, 557, 560, 564, 565, 571, 579, 580], "next": [3, 186, 191, 229, 256, 282, 297, 333, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 545, 564, 572, 579], "cycl": [3, 547], "continu": [3, 262, 293, 304, 323, 339, 569], "until": [3, 344, 579], "conclud": 3, "count": [3, 4, 45, 282, 323, 339, 548], "met": [3, 187, 346, 557, 564, 573, 577], "tensorflow": [3, 4, 7, 8, 79, 101, 103, 107, 132, 144, 167, 197, 198, 199, 200, 203, 204, 205, 207, 208, 209, 212, 215, 217, 222, 235, 236, 237, 238, 241, 242, 243, 245, 246, 247, 249, 251, 255, 256, 257, 258, 260, 262, 265, 266, 267, 268, 298, 302, 304, 307, 308, 317, 335, 344, 423, 424, 436, 437, 444, 493, 494, 495, 497, 545, 550, 554, 555, 557, 560, 561, 562, 564, 565, 569, 571, 572, 573, 576, 579, 580], "Not": [3, 216, 225, 258, 285, 290, 500], "yet": [3, 43, 46, 73, 323, 545], "simplest": [3, 550], "launcher": [3, 550, 569], "experiment": [3, 5, 13, 210, 300, 494, 546, 547, 548, 550, 552, 555, 564, 565, 566, 567, 569, 572, 574, 575, 578], "agent": 3, "nasconfig": [3, 179, 258, 270, 281, 282], "argument": [3, 258, 278, 280, 285, 290, 296, 299, 331, 363, 471, 475, 480, 483, 489, 501, 509, 529, 546, 550], "config": [3, 7, 43, 45, 46, 71, 72, 73, 135, 137, 138, 144, 178, 186, 187, 198, 216, 225, 236, 257, 258, 271, 279, 282, 285, 290, 293, 294, 295, 296, 297, 300, 320, 323, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 350, 351, 354, 360, 361, 362, 363, 366, 367, 368, 370, 372, 373, 376, 402, 408, 410, 411, 415, 416, 460, 462, 469, 471, 474, 475, 478, 480, 481, 483, 484, 491, 494, 497, 505, 516, 519, 520, 521, 522, 524, 526, 527, 529, 537, 539, 542, 545, 548, 550, 552, 555, 560, 565, 569, 572, 574, 576, 577, 579], "search_algorithm": [3, 179, 258, 281, 282, 300], "nsga2": [3, 273], "supernet": [3, 273, 274, 276, 277], "ofa_mbv3_d234_e346_k357_w1": 3, "acc": [3, 4, 43, 46, 266, 274, 308, 319, 577, 581], "mac": [3, 270, 272, 274, 279, 281], "50": [3, 262, 264, 273, 304, 306, 581], "num_ev": [3, 273], "250": 3, "results_csv_path": 3, "search_result": 3, "csv": [3, 271, 274, 516, 545], "batch_siz": [3, 4, 188, 190, 193, 194, 195, 196, 197, 198, 199, 218, 219, 226, 228, 231, 232, 233, 234, 235, 236, 237, 253, 255, 274, 279, 367, 381, 392, 494, 517, 546, 547, 548, 552, 555, 558, 573], "64": [3, 4, 215, 251, 578, 581], "dataset_path": [3, 274, 279, 517], "dataset": [3, 5, 7, 8, 15, 38, 40, 43, 46, 71, 73, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 209, 218, 219, 226, 228, 229, 231, 232, 233, 234, 235, 247, 257, 258, 262, 263, 264, 266, 268, 274, 298, 299, 300, 304, 305, 306, 308, 335, 381, 389, 392, 395, 403, 408, 412, 413, 414, 425, 437, 514, 516, 517, 518, 546, 547, 552, 553, 563, 569, 570, 573, 579, 580, 581], "imagenet": [3, 5, 200, 203, 211, 238, 241, 248, 274, 577, 578, 580, 581], "ilsvrc2012": [3, 274], "under": [3, 4, 132, 144, 200, 238, 360, 545, 548, 562, 563, 567, 569, 570, 573, 577, 579], "file": [3, 8, 71, 161, 167, 178, 179, 186, 187, 198, 199, 200, 203, 214, 215, 224, 236, 237, 238, 241, 250, 251, 252, 255, 257, 258, 262, 268, 269, 270, 271, 272, 274, 281, 282, 285, 290, 294, 296, 298, 299, 300, 304, 331, 334, 335, 360, 361, 366, 367, 368, 369, 370, 371, 372, 373, 425, 462, 471, 475, 485, 501, 508, 509, 515, 516, 517, 529, 533, 537, 539, 541, 542, 545, 548, 552, 556, 558, 562, 563, 565, 566, 569, 572, 577, 578], "input": [3, 8, 38, 40, 45, 47, 70, 71, 73, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 98, 99, 100, 104, 106, 107, 108, 109, 110, 111, 113, 116, 117, 126, 127, 129, 130, 131, 132, 137, 138, 144, 161, 167, 169, 173, 186, 187, 198, 199, 200, 202, 211, 214, 215, 217, 219, 220, 225, 236, 237, 238, 240, 248, 250, 251, 252, 253, 254, 255, 257, 258, 262, 267, 274, 278, 280, 285, 290, 299, 304, 307, 308, 313, 316, 317, 318, 323, 330, 335, 361, 363, 374, 397, 402, 403, 405, 408, 409, 410, 411, 412, 445, 448, 455, 456, 457, 459, 471, 475, 480, 483, 489, 514, 517, 523, 545, 547, 548, 550, 552, 555, 557, 558, 563, 564, 565, 569, 572, 573, 577, 578, 580], "aim": [3, 547, 570, 579], "accord": [3, 8, 45, 73, 144, 186, 198, 199, 200, 209, 212, 215, 236, 237, 238, 247, 249, 251, 258, 280, 297, 298, 318, 323, 333, 336, 338, 339, 341, 343, 346, 515, 548, 552, 569, 570, 574, 578, 579], "note": [3, 4, 7, 38, 40, 43, 46, 71, 73, 80, 258, 262, 285, 290, 296, 304, 323, 331, 344, 397, 408, 412, 545, 546, 552, 553, 557, 569, 573, 577, 579, 580], "regist": [3, 8, 38, 64, 174, 176, 200, 204, 207, 208, 209, 212, 215, 217, 222, 225, 238, 242, 245, 246, 247, 249, 251, 252, 258, 265, 266, 283, 284, 285, 286, 287, 288, 290, 293, 295, 297, 307, 308, 319, 320, 323, 329, 330, 332, 333, 338, 346, 546, 548, 552, 563, 566, 579], "inherit": [3, 8, 40, 43, 46, 71, 72, 73, 195, 215, 217, 225, 233, 251, 258, 295, 297, 330, 333, 547], "nasbas": [3, 269, 270, 281, 282], "own": [3, 40, 43, 46, 71, 72, 73, 100, 196, 215, 234, 251, 545, 547, 548, 560, 563, 566, 576], "just": [3, 4, 5, 37, 188, 209, 212, 213, 215, 218, 219, 220, 221, 223, 226, 251, 567, 573, 578, 579], "registri": [3, 293, 295, 297, 320, 323, 330, 332, 333], "well": [3, 4, 37, 186, 187, 335, 548, 573, 575, 580], "wai": [3, 199, 200, 203, 237, 238, 241, 545, 547, 548, 563, 567, 569, 570, 573, 579, 580], "mobilenetv3": [3, 273, 274], "lt": [3, 277, 548, 568], "wmt": 3, "en": 3, "de": 3, "static": [4, 5, 8, 71, 132, 161, 256, 271, 299, 335, 374, 378, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 417, 445, 448, 450, 451, 453, 455, 456, 457, 458, 468, 485, 487, 492, 494, 499, 501, 506, 508, 514, 515, 517, 519, 524, 529, 533, 540, 541, 555, 560, 579, 581], "quantiz": [4, 8, 22, 38, 40, 43, 45, 46, 47, 70, 71, 72, 73, 115, 119, 121, 123, 129, 135, 137, 138, 141, 143, 144, 154, 169, 173, 178, 186, 187, 211, 218, 219, 225, 248, 253, 255, 256, 257, 258, 268, 299, 300, 316, 337, 338, 339, 340, 341, 343, 344, 345, 346, 351, 352, 355, 356, 360, 361, 373, 378, 408, 410, 416, 497, 505, 517, 521, 545, 546, 547, 548, 552, 555, 557, 558, 560, 562, 563, 564, 565, 566, 567, 571, 575, 577, 578, 579, 580], "involv": 4, "weight": [4, 5, 7, 8, 38, 40, 70, 71, 73, 86, 87, 88, 144, 161, 162, 169, 177, 253, 255, 265, 266, 280, 289, 293, 295, 297, 307, 308, 317, 318, 320, 323, 330, 332, 333, 341, 421, 526, 544, 545, 551, 555, 557, 558, 563, 566, 569, 570, 572, 573, 577, 579, 580], "float": [4, 5, 13, 38, 40, 43, 46, 70, 71, 73, 132, 161, 169, 198, 211, 236, 248, 258, 259, 260, 262, 263, 264, 271, 273, 274, 285, 290, 293, 295, 296, 297, 301, 302, 304, 305, 306, 317, 318, 323, 330, 331, 332, 333, 338, 364, 382, 391, 400, 401, 416, 422, 477, 485, 501, 502, 506, 508, 514, 516, 517, 524, 526, 527, 535, 544, 548, 553, 563, 572, 573, 578], "int": [4, 38, 40, 43, 45, 46, 71, 73, 132, 161, 167, 188, 197, 198, 199, 211, 215, 226, 235, 236, 237, 248, 251, 253, 255, 260, 262, 266, 271, 273, 274, 283, 302, 304, 308, 319, 323, 339, 367, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 407, 408, 409, 410, 411, 412, 413, 415, 459, 494, 501, 502, 504, 506, 507, 508, 509, 510, 516, 517, 519, 524, 526, 529, 541, 548, 563, 569, 572, 578], "feed": [4, 38, 40, 71, 167, 197, 235, 378, 550], "batch": [4, 5, 38, 40, 43, 45, 73, 88, 137, 188, 190, 191, 196, 197, 218, 219, 225, 226, 228, 229, 234, 235, 258, 274, 278, 280, 285, 290, 344, 351, 381, 392, 514, 545, 547, 550, 569, 578, 579, 581], "data": [4, 7, 8, 11, 38, 40, 43, 45, 46, 47, 70, 71, 73, 81, 129, 132, 161, 167, 169, 173, 178, 186, 187, 216, 217, 218, 219, 253, 255, 256, 258, 274, 279, 293, 299, 300, 316, 323, 335, 338, 344, 361, 362, 364, 367, 374, 375, 376, 378, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 425, 441, 442, 445, 448, 452, 457, 460, 461, 462, 464, 467, 469, 474, 478, 481, 484, 486, 491, 494, 501, 514, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 528, 532, 537, 539, 540, 542, 545, 547, 548, 552, 553, 557, 561, 563, 564, 573, 574, 576, 577, 578, 579], "through": [4, 169, 186, 187, 214, 250, 335, 339, 557, 558, 560, 561, 563, 566, 567, 572], "comput": [4, 5, 13, 70, 73, 88, 144, 169, 225, 252, 258, 259, 260, 262, 263, 264, 266, 272, 301, 302, 304, 305, 306, 308, 551, 563, 564, 569, 570, 573, 579], "distribut": [4, 7, 45, 162, 177, 188, 190, 191, 193, 194, 195, 196, 197, 218, 219, 226, 228, 229, 231, 232, 233, 234, 235, 252, 258, 285, 290, 338, 504, 550, 561, 573, 575, 579, 581], "activ": [4, 5, 7, 8, 38, 40, 43, 46, 47, 71, 73, 150, 169, 224, 253, 255, 421, 544, 545, 551, 553, 557, 568, 572, 573, 577, 580], "observ": [4, 553, 576, 577, 579], "point": [4, 5, 47, 70, 211, 248, 263, 264, 283, 305, 306, 319, 338, 544, 553, 563, 573, 578, 579], "record": [4, 198, 199, 200, 206, 217, 224, 236, 237, 238, 244, 548, 576, 577, 579], "These": [4, 560], "infer": [4, 5, 7, 8, 45, 47, 154, 161, 257, 258, 298, 317, 335, 544, 547, 550, 564, 566, 569, 570, 571, 573, 577, 579], "time": [4, 5, 167, 215, 251, 266, 278, 308, 319, 338, 361, 502, 508, 509, 514, 529, 552, 556, 566, 569, 570, 571, 573, 576, 577, 578, 579], "A": [4, 7, 40, 46, 71, 73, 80, 82, 96, 100, 101, 132, 135, 137, 138, 144, 161, 167, 173, 200, 204, 209, 214, 215, 218, 219, 220, 221, 238, 242, 247, 250, 251, 252, 258, 259, 262, 263, 264, 266, 269, 281, 282, 283, 284, 285, 286, 287, 288, 290, 293, 294, 295, 296, 297, 301, 304, 305, 306, 307, 308, 311, 313, 320, 323, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 343, 344, 345, 347, 350, 547, 554, 557, 563, 565, 569, 571, 578, 579, 580], "simpl": [4, 7, 215, 251, 545, 561, 576, 579], "techniqu": [4, 5, 7, 258, 560, 567, 569, 570, 572, 573, 580], "simpli": [4, 295, 552, 565], "divid": [4, 579], "rang": [4, 5, 8, 201, 202, 215, 239, 240, 251, 262, 271, 304, 351, 548, 550, 552, 553, 569, 573, 578], "256": [4, 205, 211, 243, 248, 546, 547, 548, 552, 578, 581], "support": [4, 40, 43, 46, 70, 71, 72, 73, 100, 107, 124, 186, 187, 188, 197, 198, 200, 204, 207, 208, 209, 211, 212, 215, 216, 217, 218, 219, 222, 225, 226, 235, 236, 238, 242, 245, 246, 247, 248, 249, 251, 258, 265, 266, 268, 273, 274, 280, 283, 285, 286, 287, 288, 290, 293, 295, 299, 307, 308, 313, 319, 323, 330, 335, 344, 354, 355, 356, 378, 445, 448, 450, 451, 453, 455, 456, 457, 458, 464, 498, 506, 516, 545, 546, 553, 570, 571, 574, 576, 579, 581], "sophist": 4, "addit": [4, 88, 96, 173, 186, 351, 501, 545, 550, 575], "step": [4, 5, 38, 40, 43, 73, 119, 225, 258, 293, 295, 296, 297, 319, 320, 323, 330, 331, 332, 333, 351, 545, 550, 551, 552, 564, 569, 570, 572, 574, 576, 577, 579], "allow": [4, 5, 222, 338, 533, 545, 546, 550, 552, 553, 563, 564, 572, 580], "u": [4, 96, 162, 177], "instead": [4, 179, 180, 197, 235, 361], "back": [4, 38, 40, 43, 46, 71, 73, 144, 215, 251, 271], "everi": [4, 8, 43, 72, 93, 94, 96, 293, 295, 296, 323, 330, 331, 569, 579], "signific": [4, 7, 571, 573], "speed": [4, 7, 570, 571, 573], "up": [4, 7, 45, 96, 127, 215, 251, 258, 274, 285, 290, 294, 319, 402, 545, 552, 557, 560, 571, 572, 573, 576, 578, 580], "pre": [4, 138, 186, 187, 198, 236, 279, 335, 548, 550, 564, 569, 571, 573, 577, 579], "notabl": 4, "modif": [4, 8, 485, 547, 557], "enabl": [4, 7, 71, 73, 280, 295, 330, 504, 545, 552, 564, 568, 569, 570, 571, 574, 579], "replac": [4, 46, 111, 112, 132, 264, 306, 339, 516, 552, 575], "quantstub": 4, "dequantstub": 4, "begin": [4, 138, 225, 258, 285, 290, 295, 296, 320, 330, 331, 550, 569, 579], "end": [4, 5, 8, 132, 167, 198, 214, 215, 225, 236, 250, 251, 258, 271, 295, 296, 319, 330, 331, 550, 557, 561, 566, 569, 570, 577, 578, 579], "relu6": [4, 100, 557], "_make_divis": 4, "v": [4, 96, 580], "divisor": 4, "min_valu": 4, "none": [4, 8, 13, 38, 40, 43, 45, 46, 47, 70, 71, 73, 89, 116, 132, 138, 144, 161, 167, 169, 173, 178, 179, 180, 183, 186, 187, 188, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 211, 215, 216, 217, 218, 219, 225, 226, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 248, 251, 252, 253, 255, 257, 258, 259, 262, 265, 266, 267, 268, 269, 271, 273, 274, 278, 280, 281, 282, 285, 289, 290, 294, 295, 298, 299, 300, 301, 304, 307, 308, 314, 317, 318, 319, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 351, 352, 354, 355, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 380, 382, 383, 384, 385, 386, 388, 390, 392, 393, 394, 396, 399, 402, 403, 404, 407, 408, 411, 413, 414, 415, 430, 445, 448, 450, 457, 462, 464, 469, 471, 474, 475, 478, 480, 481, 483, 484, 485, 486, 490, 491, 494, 496, 499, 501, 502, 504, 507, 509, 510, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 528, 529, 533, 541, 548, 563, 573, 577, 578, 579], "taken": [4, 186, 187, 335], "tf": [4, 7, 73, 138, 144, 167, 197, 198, 199, 200, 215, 235, 236, 237, 238, 251, 317, 364, 545, 552, 565, 571, 574, 578], "repo": [4, 198, 236, 548, 554], "It": [4, 7, 8, 71, 79, 88, 186, 187, 224, 258, 264, 266, 271, 272, 283, 293, 298, 299, 306, 308, 323, 335, 338, 339, 340, 343, 346, 545, 546, 550, 569, 570, 573, 576, 579, 580], "ensur": [4, 45, 47, 215, 251, 296, 331, 338, 380, 413, 445, 448, 450, 457, 499, 545, 552, 553, 555, 573, 578], "layer": [4, 8, 38, 40, 43, 46, 71, 72, 73, 96, 137, 138, 144, 217, 224, 258, 280, 285, 290, 293, 294, 296, 323, 331, 334, 352, 354, 355, 361, 528, 547, 551, 560, 569, 570, 575], "channel": [4, 8, 162, 177, 211, 215, 248, 251, 274, 278, 293, 323, 445, 448, 457, 560, 561, 569, 570, 578, 581], "number": [4, 5, 71, 93, 94, 188, 196, 199, 211, 215, 226, 234, 237, 248, 251, 263, 264, 266, 273, 282, 293, 305, 306, 308, 323, 330, 333, 338, 355, 356, 448, 504, 514, 517, 545, 548, 552, 553, 563, 569, 573, 576, 578, 579], "divis": 4, "seen": [4, 8, 361], "here": [4, 5, 7, 37, 96, 144, 262, 269, 280, 281, 304, 545, 548, 552, 555, 557, 563, 566, 569, 573, 575, 576], "blob": [4, 169, 259, 260, 263, 264, 293, 301, 302, 305, 306, 323], "master": [4, 259, 260, 263, 264, 293, 296, 301, 302, 305, 306, 323, 331], "research": [4, 562], "slim": [4, 262, 304, 317, 565], "net": 4, "mobilenet": [4, 576, 581], "param": [4, 8, 47, 70, 71, 72, 73, 87, 93, 94, 96, 116, 117, 132, 161, 167, 169, 173, 188, 216, 222, 226, 262, 265, 266, 280, 304, 307, 308, 313, 317, 335, 338, 361, 383, 415, 516, 519, 565, 579], "new_v": 4, "max": [4, 46, 47, 70, 73, 162, 177, 215, 251, 263, 264, 305, 306, 338, 526, 544, 545, 573, 578, 579], "sure": [4, 161, 293, 295, 297, 323, 330, 333, 445, 545], "round": [4, 5, 162, 177, 544, 553, 573], "down": [4, 88], "doe": [4, 5, 13, 259, 262, 271, 301, 304, 336, 548, 553, 563, 575, 578], "go": [4, 339, 557, 572, 578], "10": [4, 7, 200, 238, 262, 304, 338, 494, 545, 548, 561, 572, 578, 579], "convbnrelu": 4, "sequenti": [4, 73, 196, 234, 299, 340, 567, 579], "__init__": [4, 8, 548, 563, 566, 579], "self": [4, 8, 89, 119, 258, 262, 285, 295, 304, 338, 529, 545, 548, 560, 563, 566, 576, 577, 579], "in_plan": 4, "out_plan": 4, "kernel_s": 4, "stride": [4, 215, 251, 578], "group": [4, 332, 433, 560, 569, 570, 577, 578, 579, 581], "pad": [4, 97, 98, 198, 215, 236, 251, 278, 280, 548, 578], "conv2d": [4, 43, 72, 86, 87, 91, 92, 97, 98, 162, 310, 311, 312, 316, 317, 318, 557, 577, 579], "bia": [4, 73, 161, 162, 253, 255, 278, 577], "fals": [4, 5, 8, 38, 40, 43, 45, 46, 47, 71, 73, 89, 97, 98, 116, 119, 126, 132, 135, 146, 153, 158, 162, 165, 166, 167, 187, 188, 190, 193, 194, 195, 197, 198, 200, 211, 215, 216, 217, 218, 219, 224, 226, 228, 231, 232, 233, 235, 236, 238, 248, 251, 262, 265, 266, 271, 272, 273, 274, 278, 279, 280, 293, 304, 307, 308, 316, 323, 346, 354, 433, 452, 501, 504, 509, 510, 516, 535, 541, 547, 548, 557, 563, 566, 572, 573, 577, 578, 580], "batchnorm2d": 4, "momentum": [4, 295, 320, 560, 569, 570, 580], "inplac": [4, 5], "invertedresidu": 4, "inp": 4, "oup": 4, "expand_ratio": 4, "assert": [4, 566], "hidden_dim": 4, "use_res_connect": 4, "pw": 4, "extend": [4, 88], "dw": 4, "skip_add": 4, "forward": [4, 5, 45, 217, 278, 280, 572, 573, 577], "x": [4, 45, 197, 215, 235, 251, 274, 278, 280, 338, 550, 552, 565, 569, 573, 577, 578], "els": [4, 45, 88, 89, 167, 196, 234, 339, 501, 516, 577], "num_class": [4, 266, 308], "1000": [4, 273, 514, 580], "width_mult": 4, "inverted_residual_set": 4, "round_nearest": 4, "v2": [4, 7, 169, 341, 552, 579, 581], "arg": [4, 45, 71, 79, 129, 198, 199, 200, 236, 237, 238, 257, 258, 268, 280, 290, 293, 298, 299, 310, 311, 312, 317, 318, 319, 331, 338, 351, 366, 368, 370, 371, 372, 373, 383, 385, 386, 388, 390, 393, 394, 399, 501, 509, 529, 547, 548, 550, 552, 565, 569, 573, 577, 578], "width": [4, 211, 215, 248, 251, 274, 293, 323, 552, 573, 578, 580], "multipli": [4, 553], "adjust": [4, 5, 274, 323, 573], "amount": 4, "structur": [4, 132, 295, 330, 350, 441, 560, 569, 570, 573, 577, 581], "multipl": [4, 88, 137, 189, 190, 198, 199, 201, 202, 203, 204, 205, 209, 212, 215, 222, 227, 228, 230, 236, 237, 239, 240, 241, 242, 243, 247, 249, 251, 267, 295, 330, 337, 501, 548, 555, 567, 576, 579], "turn": [4, 563], "block": [4, 258, 271, 280, 285, 290, 293, 296, 323, 331, 533, 560, 566, 569, 570], "input_channel": 4, "32": [4, 169, 262, 304, 552, 558, 569, 581], "last_channel": 4, "1280": 4, "c": [4, 96, 100, 200, 238, 545, 548, 556, 561, 579], "n": [4, 96, 199, 215, 237, 251, 260, 293, 302, 323, 504, 548, 550, 569, 570, 578], "16": [4, 33, 569, 581], "6": [4, 7, 43, 545, 557, 573, 579, 581], "24": [4, 33, 579, 581], "96": [4, 262, 304, 581], "160": 4, "320": 4, "onli": [4, 8, 40, 43, 46, 47, 71, 73, 79, 82, 83, 84, 85, 86, 87, 88, 89, 96, 99, 100, 104, 106, 107, 108, 109, 110, 113, 116, 117, 126, 127, 130, 131, 137, 162, 177, 198, 216, 218, 219, 222, 236, 258, 268, 280, 293, 295, 323, 330, 344, 516, 526, 528, 529, 546, 547, 552, 555, 557, 561, 564, 570, 572, 577, 579, 580], "element": [4, 47, 196, 234, 258, 262, 278, 280, 285, 290, 293, 296, 304, 323, 331, 379, 548, 560, 563, 569], "assum": [4, 8, 214, 250, 262, 283, 304, 557], "know": [4, 132, 218, 219, 252, 258, 285, 290, 502, 552, 575], "len": [4, 169, 215, 251, 338, 548, 552, 569, 578], "rais": [4, 13, 88, 93, 94, 96, 107, 132, 217, 259, 262, 265, 266, 293, 294, 295, 301, 304, 307, 308, 323, 330, 334, 338, 516, 529, 569, 570], "valueerror": [4, 13, 88, 93, 94, 96, 107, 132, 259, 262, 266, 301, 304, 308, 556], "empti": [4, 137, 262, 304, 338], "got": [4, 167, 556, 577], "format": [4, 38, 40, 43, 46, 47, 70, 71, 73, 79, 167, 198, 199, 200, 204, 209, 236, 237, 238, 242, 247, 253, 255, 258, 262, 268, 271, 282, 304, 343, 467, 506, 524, 548, 550, 552, 555, 563, 564, 565, 573], "build": [4, 7, 8, 45, 137, 144, 154, 255, 256, 269, 271, 281, 282, 312, 314, 317, 318, 381, 382, 384, 395, 396, 398, 401, 425, 485, 494, 516, 533, 545, 561, 565, 571, 576, 579], "invert": 4, "residu": [4, 280], "output_channel": 4, "last": [4, 71, 73, 119, 173, 186, 188, 226, 280, 293, 320, 323, 346, 485, 545, 564, 573], "classifi": [4, 198, 236, 266, 308, 339, 548, 550], "dropout": [4, 278, 280], "m": [4, 70, 96, 293, 323, 550, 581], "isinst": 4, "init": [4, 217, 321, 346, 548, 563, 566], "kaiming_normal_": 4, "mode": [4, 8, 37, 38, 40, 43, 46, 70, 71, 73, 132, 207, 216, 245, 258, 262, 304, 317, 330, 346, 361, 381, 508, 545, 546, 560, 573, 574, 579], "fan_out": 4, "zeros_": 4, "elif": 4, "ones_": 4, "normal_": 4, "01": [4, 553, 572, 579, 580, 581], "bn": [4, 38, 88, 107, 581], "prior": [4, 45, 115, 338, 579], "numer": [4, 5, 266, 308, 544, 564, 571], "fuse_model": [4, 5], "fuse_modul": 4, "true": [4, 5, 45, 71, 73, 88, 89, 111, 132, 135, 137, 165, 167, 169, 187, 188, 196, 198, 200, 201, 214, 215, 216, 226, 234, 236, 238, 239, 250, 251, 253, 255, 260, 262, 266, 271, 278, 280, 288, 293, 302, 304, 308, 323, 346, 462, 501, 504, 509, 510, 516, 548, 552, 557, 563, 566, 572, 573, 574, 577, 578, 579, 580], "idx": [4, 283, 548], "str": [4, 13, 38, 40, 45, 46, 71, 132, 161, 169, 174, 176, 188, 198, 199, 200, 204, 207, 208, 209, 211, 212, 215, 217, 222, 226, 236, 237, 238, 242, 245, 246, 247, 248, 249, 251, 253, 255, 256, 259, 260, 262, 264, 265, 266, 271, 273, 274, 283, 288, 301, 302, 304, 306, 307, 308, 310, 311, 312, 318, 323, 343, 351, 354, 362, 363, 364, 367, 374, 375, 376, 378, 380, 381, 384, 385, 386, 388, 391, 392, 393, 394, 395, 396, 397, 400, 403, 404, 405, 407, 408, 413, 414, 415, 416, 421, 422, 425, 427, 428, 429, 430, 431, 433, 442, 443, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 460, 461, 462, 464, 466, 467, 469, 471, 474, 475, 478, 480, 481, 483, 484, 485, 486, 489, 490, 491, 494, 501, 503, 504, 506, 508, 509, 512, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 528, 529, 532, 533, 540, 541, 548, 563, 572, 577, 578], "help": [4, 7, 82, 224, 268, 316, 378, 516, 547, 565, 579], "averagemet": 4, "store": [4, 47, 200, 238, 262, 280, 286, 287, 288, 293, 295, 304, 320, 323, 330, 332, 333, 338, 558], "averag": [4, 169, 262, 263, 264, 266, 304, 305, 306, 308, 550, 563, 566, 569, 579], "fmt": 4, "f": [4, 96, 550, 552, 573], "reset": [4, 13, 259, 265, 266, 301, 307, 308, 319, 529, 563], "val": [4, 73, 167, 200, 203, 238, 241, 294, 334, 566], "avg": [4, 5, 573], "sum": [4, 266, 308, 550], "updat": [4, 13, 33, 88, 100, 132, 137, 144, 255, 259, 265, 266, 274, 293, 295, 301, 307, 308, 318, 320, 323, 330, 333, 334, 346, 364, 381, 382, 383, 384, 392, 395, 397, 398, 400, 402, 408, 410, 411, 412, 415, 485, 508, 512, 517, 520, 522, 526, 545, 547, 555, 563, 568, 569, 570, 579], "__str__": 4, "fmtstr": 4, "__dict__": 4, "target": [4, 5, 45, 70, 71, 116, 117, 132, 161, 217, 271, 294, 297, 323, 333, 334, 336, 338, 429, 430, 547, 548, 550, 552, 564, 569, 570, 577, 578, 579, 580], "topk": [4, 546, 547, 552, 563], "over": [4, 5, 7, 200, 204, 209, 238, 242, 247, 262, 266, 304, 308, 338, 560, 563, 572, 579], "k": [4, 266, 308, 563, 569], "top": [4, 132, 215, 251, 257, 258, 266, 285, 290, 298, 308, 563, 578, 581], "specifi": [4, 40, 43, 46, 47, 71, 72, 73, 132, 161, 186, 187, 215, 216, 251, 257, 258, 262, 265, 266, 269, 272, 274, 281, 282, 285, 290, 298, 299, 304, 307, 308, 335, 360, 361, 378, 381, 384, 391, 392, 393, 395, 396, 397, 402, 403, 405, 406, 408, 410, 411, 415, 416, 417, 430, 462, 466, 467, 468, 487, 492, 508, 512, 516, 529, 533, 545, 551, 552, 553, 557, 563, 566, 572, 573, 578, 579, 580], "no_grad": 4, "maxk": 4, "pred": [4, 167, 265, 266, 307, 308, 563], "eq": 4, "expand_a": 4, "re": [4, 71, 73, 338], "correct_k": 4, "keepdim": 4, "mul_": 4, "100": [4, 200, 238, 262, 271, 304, 547, 548, 552, 558, 572, 573, 578, 579, 580, 581], "criterion": [4, 5, 11, 71, 169, 183, 219, 222, 252, 258, 300, 320, 323, 330, 484, 524, 550, 555, 569, 570, 573, 579, 580], "data_load": [4, 5, 8, 46, 73], "neval_batch": [4, 5], "top1": [4, 5, 274, 573], "2f": [4, 5], "top5": [4, 5], "5": [4, 8, 47, 202, 211, 217, 240, 248, 262, 266, 304, 308, 339, 545, 548, 557, 563, 568, 572, 578, 579, 580, 581], "cnt": [4, 5, 323, 550], "imag": [4, 5, 199, 200, 203, 205, 211, 215, 237, 238, 241, 243, 248, 251, 262, 274, 304, 514, 545, 548, 552, 572, 577, 578, 581], "loss": [4, 5, 7, 71, 144, 183, 217, 225, 257, 258, 266, 285, 290, 298, 300, 308, 351, 550, 551, 552, 553, 563, 564, 569, 570, 573, 579, 580], "acc1": 4, "acc5": 4, "print": [4, 5, 169, 266, 308, 545, 550, 552, 563, 579], "load_model": 4, "model_fil": 4, "state_dict": [4, 169, 280, 552, 577], "load": [4, 38, 40, 198, 200, 214, 215, 236, 238, 250, 251, 262, 272, 282, 304, 317, 335, 360, 361, 408, 410, 489, 516, 517, 547, 572, 573], "load_state_dict": 4, "cpu": [4, 5, 118, 119, 120, 121, 129, 132, 161, 274, 560, 564, 568, 571, 572, 574, 577], "print_size_of_model": 4, "temp": 4, "p": [4, 262, 304, 545], "mb": [4, 516], "o": [4, 7, 96, 425, 568], "getsiz": 4, "1e6": 4, "num_calibration_batch": 4, "mymodel": 4, "saved_model_dir": [4, 317], "float_model_fil": 4, "start": [4, 73, 215, 251, 259, 262, 273, 301, 304, 319, 330, 336, 339, 509, 529, 561, 578, 579], "min": [4, 47, 73, 162, 177, 544, 545, 573, 578, 579], "estim": [4, 5, 169, 266, 269, 270, 274, 281, 282, 308, 317, 579], "per": [4, 8, 40, 43, 46, 71, 72, 73, 188, 197, 216, 226, 235, 262, 274, 304, 323, 355, 356, 381, 545, 568, 574, 581], "qconfig": [4, 5, 45, 577], "default_qconfig": 4, "calibr": [4, 8, 38, 40, 43, 45, 46, 71, 173, 178, 186, 187, 257, 258, 298, 299, 300, 335, 355, 356, 525, 547, 558, 560, 573, 579, 580], "data_loader_test": [4, 5], "num_eval_batch": [4, 5], "d": [4, 5, 96, 100, 271, 550, 558], "eval_batch_s": [4, 5], "functool": 4, "partial": [4, 508, 573], "minmaxobserv": 4, "reduce_rang": [4, 47, 572], "dtype": [4, 70, 132, 161, 201, 202, 211, 215, 239, 240, 248, 251, 253, 255, 256, 547, 548, 555, 557, 572, 577, 578, 580], "qint8": 4, "qscheme": 4, "per_tensor_symmetr": 4, "convrelu2d": 4, "activation_post_process": [4, 577], "min_val": [4, 355, 356], "max_val": [4, 355, 356], "quantizedconvrelu2d": 4, "scale": [4, 5, 38, 40, 47, 70, 73, 88, 162, 177, 211, 215, 248, 251, 255, 316, 544, 553, 555, 573, 576, 578], "15583468973636627": 4, "zero_point": [4, 47, 70, 255, 316, 323], "quantizedconv2d": [4, 73], "19358506798744202": 4, "74": [4, 581], "631847": 4, "300": [4, 547], "67": [4, 581], "significantli": [4, 564, 569, 570], "lower": [4, 214, 215, 250, 251, 264, 306, 339, 516, 544, 551, 569, 570, 571, 573, 578, 579], "62": [4, 581], "same": [4, 8, 73, 82, 167, 198, 215, 236, 251, 262, 285, 290, 304, 323, 339, 343, 361, 546, 547, 548, 550, 552, 557, 568, 572, 573, 577, 578, 579], "nevertheless": [4, 5], "did": 4, "reduc": [4, 8, 88, 288, 323, 547, 551, 564, 570, 571, 573, 574, 579, 580], "almost": 4, "decreas": [4, 125], "repeat": [4, 289, 579], "exercis": 4, "recommend": [4, 8, 219, 220, 307, 308, 547, 555, 557, 569, 572, 579], "x86": [4, 564], "basi": 4, "histogram": [4, 352, 355, 361, 405, 408, 416, 577], "collect": [4, 45, 73, 209, 212, 213, 215, 218, 219, 220, 221, 223, 247, 249, 251, 259, 264, 265, 266, 301, 306, 307, 308, 352, 355, 361, 362, 467, 491, 502, 504, 516, 517, 555, 573, 577, 579], "pick": 4, "manner": [4, 550, 565], "per_channel_quantized_model": 4, "get_default_qconfig": 4, "fbgemm": [4, 5, 544], "jit": [4, 577], "script": [4, 37, 259, 260, 263, 264, 301, 302, 305, 306, 363, 364, 450, 467, 469, 471, 474, 475, 477, 478, 480, 481, 483, 484, 489, 552, 560, 571], "scripted_quantized_model_fil": 4, "histogramobserv": 4, "perchannelminmaxobserv": 4, "per_channel_symmetr": 4, "76": [4, 581], "increas": [4, 549, 560, 579], "resnet50": [4, 7, 274, 552, 573, 576, 581], "qat": [5, 71, 255, 258, 268, 551, 552, 555, 560, 573], "simul": 5, "low": [5, 7, 8, 43, 72, 73, 186, 187, 201, 202, 239, 240, 257, 258, 267, 298, 546, 548, 552, 564, 571, 573, 579], "precis": [5, 7, 8, 38, 40, 43, 46, 71, 72, 73, 186, 187, 257, 258, 262, 264, 266, 267, 298, 304, 306, 308, 319, 336, 339, 346, 378, 389, 392, 393, 403, 404, 405, 406, 407, 408, 413, 437, 466, 471, 473, 474, 475, 498, 517, 520, 522, 544, 545, 546, 551, 552, 557, 560, 571, 572, 573, 579], "fake": [5, 73, 135, 573], "dure": [5, 45, 73, 88, 144, 271, 274, 280, 293, 297, 299, 316, 323, 333, 510, 564, 565, 566, 567, 569, 570, 573, 577, 580], "backward": [5, 262, 304, 351, 550, 552, 569, 573, 575], "mimic": [5, 573], "still": [5, 258, 285, 290, 296, 331, 573, 574], "thu": [5, 262, 304, 573], "made": [5, 8, 96, 272, 274, 341, 573, 575, 579], "while": [5, 7, 8, 40, 73, 280, 295, 330, 338, 545, 547, 560, 564, 572, 573], "fact": [5, 573], "ultim": [5, 573], "usual": [5, 38, 40, 43, 46, 71, 73, 198, 236, 258, 285, 290, 547, 550, 567, 573], "yield": [5, 186, 187, 196, 218, 219, 234, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 573, 579], "either": [5, 187, 262, 304, 346, 564, 567, 572, 573], "dynam": [5, 8, 88, 188, 226, 253, 255, 299, 369, 547, 550, 555, 560, 571, 579, 581], "training_func_for_nc": 5, "epoch": [5, 225, 252, 258, 285, 290, 295, 296, 330, 331, 351, 550, 552, 569, 580], "30": [5, 7, 215, 251, 546, 547, 560, 578, 581], "sgd": [5, 183, 222, 300, 572, 580], "lr": [5, 552], "0001": [5, 183, 300, 572], "nepoch": [5, 550], "train_load": [5, 552], "zero_grad": [5, 550, 552, 569], "break": [5, 550, 552], "freez": [5, 115, 569, 570], "disable_observ": 5, "norm": [5, 280], "varianc": [5, 162, 177], "intrins": 5, "freeze_bn_stat": 5, "get_default_qat_qconfig": 5, "final": [5, 88, 295, 323, 330, 508, 566, 569, 570, 573, 575, 579], "alreadi": [5, 8, 200, 214, 216, 238, 250, 502, 529, 545, 548, 560, 579], "implement": [5, 7, 13, 40, 43, 46, 71, 72, 73, 78, 79, 80, 81, 84, 85, 90, 91, 92, 95, 97, 98, 99, 101, 103, 104, 106, 108, 109, 110, 113, 115, 116, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 166, 186, 187, 193, 196, 197, 198, 200, 204, 209, 231, 234, 235, 236, 238, 242, 247, 259, 265, 266, 288, 293, 297, 301, 307, 308, 323, 330, 331, 332, 333, 335, 341, 346, 546, 547, 548, 570, 575, 577, 579, 580], "hook": [5, 71, 186, 217, 224, 225, 252, 258, 285, 290, 346, 354, 550, 569, 577], "prepare_qat": [5, 225, 258], "high": [5, 201, 202, 239, 240, 548, 561, 571, 579], "accur": 5, "switch": [5, 71, 111, 577], "better": [5, 73, 123, 186, 187, 283, 335, 551, 563, 564, 569, 570, 571, 573, 576, 579], "match": [5, 132, 144, 214, 250, 262, 263, 304, 305, 550, 553], "zero": [5, 47, 70, 215, 251, 258, 266, 285, 290, 293, 295, 296, 308, 323, 330, 331, 544, 569, 570, 578, 579], "fine": [5, 7, 198, 236, 330, 548, 571, 573], "tune": [5, 7, 8, 38, 40, 43, 45, 46, 71, 73, 178, 186, 187, 198, 200, 236, 238, 257, 258, 298, 300, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 361, 373, 392, 400, 401, 408, 410, 414, 437, 467, 472, 485, 497, 505, 517, 521, 545, 547, 548, 552, 553, 560, 562, 564, 566, 571, 574, 575, 576, 577, 580], "num_train_batch": 5, "20": [5, 7, 215, 251, 273, 568, 578, 580, 581], "train_one_epoch": 5, "qat_model": 5, "devic": [5, 116, 117, 118, 119, 120, 121, 124, 129, 132, 153, 158, 161, 166, 217, 274, 550, 569, 572], "quantized_model": 5, "yaml": [5, 8, 71, 72, 73, 178, 179, 180, 186, 187, 198, 200, 216, 225, 236, 238, 252, 257, 258, 268, 269, 270, 281, 282, 285, 290, 298, 299, 300, 334, 335, 360, 361, 362, 366, 367, 368, 369, 370, 372, 373, 375, 376, 460, 462, 469, 474, 478, 481, 484, 516, 527, 548, 550, 553, 558, 563, 566, 569, 572, 577, 578], "q_func": [5, 8, 38, 40, 43, 46, 71, 73, 186, 187, 258, 298, 299, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 579], "eval_dataload": [5, 7, 186, 187, 225, 257, 258, 268, 299, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 547, 558, 579], "val_load": [5, 573], "timeout": [5, 187, 346, 526, 553, 572, 579, 580], "constrain": 5, "71": [5, 581], "close": [5, 162, 177], "debug": [5, 418, 419, 423, 545, 579], "analyz": [5, 132, 161, 317, 569, 570, 576, 577], "limit": [5, 338, 550, 569, 577], "sinc": [5, 13, 257, 258, 259, 285, 290, 298, 301, 485, 550, 553, 555, 563, 567], "actual": [5, 73, 266, 308, 552], "arithmet": [5, 557], "easili": [5, 8, 566, 569, 570], "relat": [5, 252, 258, 262, 276, 277, 285, 290, 293, 304, 332, 354, 444, 447, 449, 454, 534, 537, 538, 539, 542, 580], "center": [6, 7, 215, 251, 578, 579], "work": [6, 257, 258, 285, 290, 298, 547, 550, 569, 570, 574, 575, 577], "guidelin": [6, 7], "popular": [7, 8, 258, 548, 550, 555, 569, 573, 579], "compress": [7, 225, 258, 285, 290, 351, 550, 560, 566, 567, 569, 570, 571, 573], "mainstream": 7, "deep": [7, 8, 180, 544, 547, 560, 561, 564, 571, 573, 579], "learn": [7, 8, 280, 544, 547, 548, 555, 558, 560, 561, 564, 569, 570, 571, 573, 577, 579], "frameworkmxnet": [7, 8, 45, 193, 197, 200, 203, 204, 207, 208, 209, 212, 215, 231, 235, 238, 241, 242, 245, 246, 247, 249, 251, 257, 258, 265, 266, 298, 307, 308, 314, 335, 554, 557, 560, 564, 565, 572, 579, 580], "formerli": 7, "known": [7, 218, 219, 338, 555, 569, 577, 579], "tool": [7, 8, 167, 361, 547, 562, 571, 573], "deliv": [7, 571], "unifi": [7, 8, 189, 192, 209, 257, 258, 298, 508, 547, 558, 560, 565], "interfac": [7, 40, 43, 46, 71, 72, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 101, 103, 104, 106, 107, 108, 109, 110, 113, 115, 116, 117, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 135, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 166, 179, 183, 189, 192, 209, 257, 258, 273, 274, 285, 290, 298, 299, 300, 319, 346, 354, 355, 356, 362, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 478, 484, 491, 503, 560, 573, 575], "across": [7, 47, 257, 258, 267, 298, 549, 569, 570], "technologi": [7, 200, 238, 568], "prune": [7, 22, 161, 225, 258, 286, 287, 288, 290, 291, 293, 294, 295, 297, 299, 300, 318, 320, 321, 323, 330, 332, 333, 334, 351, 372, 379, 392, 398, 408, 410, 437, 445, 457, 472, 497, 505, 516, 521, 552, 557, 560, 567, 571, 573, 580], "knowledg": [7, 217, 252, 258, 551, 560, 565, 580], "distil": [7, 22, 183, 217, 224, 225, 258, 300, 351, 560, 567, 580], "driven": [7, 564, 566, 577], "strategi": [7, 8, 10, 38, 40, 43, 45, 46, 71, 73, 173, 200, 238, 258, 298, 300, 378, 400, 498, 516, 526, 552, 560, 571, 572, 573, 574, 575, 580], "quickli": [7, 579], "find": [7, 8, 70, 93, 94, 96, 167, 266, 282, 283, 308, 316, 338, 361, 462, 532, 545, 569, 576, 577, 579], "predefin": [7, 367, 403, 407, 408, 516], "sparsiti": [7, 258, 285, 289, 290, 293, 295, 296, 297, 317, 318, 323, 330, 331, 333, 548, 560, 569, 570, 581], "goal": [7, 178, 187, 252, 257, 258, 285, 290, 298, 300, 335, 346, 517, 567, 573, 579], "teacher": [7, 183, 217, 252, 258, 280, 300, 550, 551, 581], "student": [7, 198, 217, 224, 236, 252, 258, 548, 550, 551, 581], "ai": [7, 571, 574], "oneapi": [7, 561, 571], "analyt": [7, 561, 571], "visit": [7, 581], "websit": [7, 561], "io": [7, 547], "7": [7, 546, 547, 556, 557, 561, 573, 575, 579], "releas": [7, 503, 516, 559, 561], "binari": [7, 167, 266, 278, 280, 308, 556, 563], "stabl": [7, 545, 561, 571], "basic": [7, 214, 250, 269, 281, 293, 300, 323, 342, 346, 560, 561, 572, 576], "pip": [7, 545, 552, 556, 561, 575], "Or": [7, 295], "full": [7, 70, 73, 198, 199, 200, 216, 236, 237, 238, 258, 545, 548, 556, 561, 562], "nightli": [7, 545, 561], "git": [7, 545, 561], "clone": [7, 545, 561], "cd": [7, 545, 552, 561], "r": [7, 70, 96, 162, 177, 274, 545, 561, 568, 573, 581], "txt": [7, 203, 241, 509, 545, 548, 561], "pypi": [7, 545, 561], "found": [7, 252, 258, 269, 270, 281, 282, 316, 338, 344, 500, 516, 533, 545, 564, 579], "fp32": [7, 8, 38, 40, 43, 71, 72, 73, 118, 120, 162, 169, 177, 186, 187, 253, 255, 266, 308, 339, 343, 360, 416, 545, 557, 563, 564, 572, 573, 574, 575, 576, 577, 579, 580, 581], "wget": 7, "storag": [7, 262, 304, 563], "googleapi": 7, "v1_6": 7, "mobilenet_v1_1": 7, "0_224_frozen": 7, "pb": [7, 73, 317, 335, 453, 456, 467, 552, 565, 577, 581], "dummi": [7, 201, 202, 239, 240, 256, 266, 308, 408, 412, 518, 545, 548, 563], "shape": [7, 132, 144, 161, 201, 202, 211, 215, 239, 240, 248, 251, 262, 278, 280, 293, 304, 323, 437, 444, 445, 448, 457, 459, 497, 545, 548, 557, 578], "224": [7, 211, 248, 274, 546, 547, 548, 552, 555, 578, 580], "search": [7, 13, 22, 96, 179, 186, 187, 257, 258, 259, 269, 270, 271, 273, 274, 281, 282, 283, 284, 298, 301, 338, 340, 341, 345, 403, 404, 431, 560, 563, 571, 577, 579], "jupyt": 7, "lab": 7, "manag": [7, 271, 272, 273, 274, 380, 413, 415, 438, 499, 515], "click": [7, 545, 560, 571, 577], "12": [7, 32, 545], "onnxruntim": [7, 8, 46, 194, 232, 258, 267, 420, 424, 553, 560, 572], "raw": [7, 199, 203, 206, 237, 241, 244, 343, 563, 579], "vision": 7, "classif": [7, 198, 215, 236, 251, 266, 296, 308, 331, 550, 563, 571], "resnet": [7, 552, 581], "v1": [7, 33, 34, 35, 73, 167, 210, 211, 248, 263, 264, 266, 305, 306, 308, 317, 552, 563, 565, 575, 576, 581], "inc_bench": [7, 300, 497, 545], "xeon": [7, 562, 564, 568, 571, 573, 574, 581], "scalabl": [7, 564, 568, 571, 573, 574, 581], "skylak": 7, "cascad": 7, "lake": [7, 564, 571], "cooper": [7, 564, 571], "icelak": 7, "futur": [7, 88, 186, 187, 218, 219, 560, 564], "sapphir": 7, "rapid": 7, "flex": 7, "seri": [7, 211, 248, 578], "amd": [7, 560, 581], "arm": [7, 560, 581], "nvidia": [7, 560, 569, 573, 581], "cento": [7, 509], "ubuntu": [7, 568], "04": [7, 506, 568, 581], "11": [7, 35, 506, 545, 563, 564], "variabl": [7, 144, 200, 216, 238, 258, 267, 273, 332, 338, 504, 529, 545, 570, 579], "tf_enable_onednn_opt": [7, 545], "onednn": [7, 544], "420": [7, 560], "speedup": [7, 560, 573], "geomean": [7, 560], "2x": [7, 560, 568], "vnni": [7, 560, 572, 573], "minim": [7, 162, 177, 338, 550, 563, 569, 570, 573, 579], "avail": [7, 9, 10, 11, 15, 22, 29, 30, 37, 313, 378, 383, 385, 386, 390, 393, 394, 399, 464, 545, 560, 568, 579], "overview": 7, "dive": [7, 557], "mix": [7, 8, 73, 336, 473, 474, 475, 522, 560], "orchestr": [7, 351, 560], "benchmark": [7, 11, 38, 40, 43, 73, 218, 219, 258, 299, 300, 319, 382, 389, 392, 402, 408, 410, 413, 414, 437, 497, 498, 508, 514, 531, 536, 547, 565, 579, 580, 581], "tensorboard": [7, 8, 38, 40, 43, 46, 71, 73, 351, 354], "coder": [7, 560, 571], "topic": 7, "adaptor": [7, 10, 225, 258, 354, 560, 574, 575, 577], "togeth": [7, 215, 251, 293, 299, 323, 547, 550, 561, 571, 577, 578], "tencent": [7, 571], "deepen": [7, 571], "cloud": [7, 571], "foundat": [7, 571], "digit": [7, 259, 301, 571], "intellig": [7, 571], "industri": [7, 548, 563, 571], "dec": [7, 571], "2022": [7, 32, 33, 34, 35, 581], "fast": [7, 571], "achiev": [7, 257, 258, 298, 555, 563, 567, 569, 570, 571, 573, 577, 579], "sota": [7, 571], "nov": [7, 571], "virtual": [7, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 166, 571], "applianc": [7, 571], "packag": [7, 8, 338, 369, 377, 383, 385, 386, 388, 389, 390, 393, 394, 397, 399, 418, 419, 423, 426, 432, 434, 437, 438, 444, 463, 465, 470, 473, 476, 477, 479, 482, 488, 493, 497, 531, 545, 556, 561, 571, 575, 579], "bitnami": [7, 571], "diffus": [7, 571], "few": [7, 545, 571, 579], "distilbert": [7, 198, 236, 548, 571, 581], "oct": [7, 571], "innov": [7, 571], "acceler": [7, 550, 569, 570, 571, 574, 579], "legal": [7, 559], "secur": [7, 568, 571], "resum": [7, 186, 187, 336, 337, 340, 341, 344, 345, 346, 351], "solut": [8, 162, 177, 271, 556, 571, 579], "onnx": [8, 46, 47, 70, 194, 232, 253, 254, 255, 256, 310, 311, 312, 316, 318, 351, 364, 467, 554, 555, 557, 560, 564, 565, 571, 572, 573, 579], "runtim": [8, 509, 553, 554, 557, 560, 572, 573], "bridg": [8, 560], "vanilla": [8, 560], "complet": [8, 89, 545, 579, 580, 581], "subclass": [8, 38, 64, 174, 176, 193, 197, 200, 204, 207, 208, 209, 212, 215, 222, 231, 235, 238, 242, 245, 246, 247, 249, 251, 265, 266, 283, 286, 287, 288, 293, 295, 297, 307, 308, 319, 323, 329, 330, 333, 346], "adaptor_registri": [8, 38], "abc": [8, 135, 264, 306, 445, 508, 577, 579], "abcadaptor": 8, "framework_specific_info": [8, 38, 40, 43, 46, 71, 73], "tune_cfg": [8, 38, 40, 43, 45, 46, 71, 73, 173, 339, 579], "postprocess": [8, 38, 40, 43, 46, 71, 73, 209, 212, 215, 216, 219, 247, 249, 251, 257, 258, 268, 280, 298, 299, 300, 519, 524, 546, 547, 577, 578], "query_fw_cap": [8, 38, 40, 43, 46, 71, 73], "query_fused_pattern": [8, 38], "awar": [8, 38, 40, 43, 46, 71, 73, 169, 189, 192, 209, 225, 258, 268, 293, 298, 299, 341, 346, 551, 552, 555, 560, 564, 567, 579, 581], "convers": [8, 80, 107, 258, 268, 564, 573, 574], "he": 8, "intersect": [8, 266, 308, 563], "decid": [8, 73, 137, 138, 260, 295, 302, 425, 553, 575, 579], "besid": [8, 550, 567], "describ": [8, 40, 46, 71, 73, 274, 545, 557, 577], "op": [8, 38, 40, 43, 46, 47, 71, 72, 73, 82, 86, 88, 91, 92, 95, 96, 97, 98, 100, 107, 111, 112, 115, 118, 119, 120, 121, 123, 129, 132, 161, 162, 165, 167, 253, 255, 336, 337, 339, 341, 343, 344, 347, 350, 355, 356, 405, 408, 416, 421, 422, 430, 532, 545, 557, 564, 573, 574, 575, 577, 579, 580], "sequenc": [8, 13, 73, 89, 198, 214, 215, 236, 250, 251, 259, 260, 264, 293, 301, 302, 306, 323, 548, 557, 570, 578], "past": 8, "abov": [8, 79, 262, 304, 546, 569], "wa": [8, 161, 485, 545, 571, 579], "hidden": [8, 293, 323, 516, 569], "corner": [8, 215, 251, 578], "effect": [8, 569, 570], "mainten": 8, "difficult": 8, "correspond": [8, 13, 73, 144, 169, 198, 236, 259, 262, 266, 293, 295, 299, 301, 304, 308, 330, 338, 346, 557, 569, 572, 573, 576, 579], "abil": [8, 547, 557], "clear": [8, 13, 137, 196, 234, 259, 265, 266, 274, 301, 307, 308, 557, 563], "fragment": 8, "enumer": [8, 45, 70, 283, 351, 361, 365, 466, 472, 498, 552, 569, 577], "scenario": [8, 37, 378, 545, 546, 550, 569, 570], "doesn": [8, 132, 215, 251, 299, 515, 546, 547, 552, 580], "bf16": [8, 43, 72, 107, 118, 120, 339, 557, 564, 574, 579], "granular": [8, 43, 72, 557, 560, 569, 580], "scheme": [8, 43, 47, 70, 72, 533, 547, 557, 579, 580], "semant": [8, 557], "pattern": [8, 38, 43, 72, 73, 87, 88, 96, 119, 123, 129, 132, 157, 179, 183, 200, 238, 258, 286, 291, 295, 300, 321, 330, 332, 405, 408, 421, 430, 431, 508, 532, 548, 557, 560, 567, 572, 581], "abstract": [8, 38, 43, 72, 82, 83, 84, 85, 86, 87, 88, 89, 99, 104, 106, 107, 108, 109, 110, 113, 116, 117, 126, 127, 130, 131, 135, 144, 215, 217, 251, 252, 257, 258, 265, 266, 282, 284, 288, 293, 297, 298, 307, 308, 310, 311, 312, 314, 316, 317, 318, 319, 323, 333, 346, 367, 379, 445, 456, 457, 478, 490, 508, 532, 558], "querybackendcap": [8, 40, 43, 46, 71, 72, 73], "tensorflowqueri": [8, 73], "look": [8, 557, 563, 566, 580], "microsoft": 8, "mla": [8, 544], "kernel": [8, 504, 568, 569, 579], "becom": [8, 88, 555, 570], "integr": [8, 167, 217, 545], "explor": 8, "attribut": [8, 70, 88, 132, 144, 161, 173, 179, 180, 225, 298, 432, 433, 437, 497, 514, 557, 558, 564, 572, 580], "whether": [8, 45, 46, 47, 71, 73, 137, 138, 167, 188, 196, 198, 211, 215, 226, 234, 236, 248, 251, 252, 258, 260, 262, 266, 280, 285, 290, 293, 295, 302, 304, 308, 323, 339, 361, 467, 548, 563, 578], "qlinear": [8, 200, 207, 238, 245, 266, 308, 555, 581], "qdq": [8, 135, 173, 253, 254, 255, 555, 560, 573], "integ": [8, 144, 252, 258, 262, 266, 283, 293, 295, 297, 304, 308, 323, 330, 333, 355, 356, 573, 579], "qtype": [8, 47, 70], "choic": [8, 198, 236, 545, 548, 563], "float32": [8, 47, 201, 202, 215, 239, 240, 251, 262, 304, 514, 546, 548, 573, 578], "uint8": [8, 70, 211, 248, 262, 304, 355, 356, 544, 548, 557, 572, 573, 578, 580], "node": [8, 45, 47, 70, 73, 76, 79, 80, 81, 82, 88, 89, 90, 93, 94, 96, 100, 112, 125, 132, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 167, 253, 254, 255, 310, 311, 312, 316, 317, 318, 414, 427, 428, 429, 430, 431, 432, 437, 445, 448, 455, 456, 457, 494, 495, 497, 545, 552, 577], "exclud": [8, 112, 278, 280], "onnxrt": [8, 198, 200, 207, 208, 209, 212, 215, 236, 238, 245, 246, 247, 249, 251, 265, 266, 307, 308, 419, 420, 435, 437, 444, 497], "onnxrt_qlinearopsadaptor": [8, 46], "dump_elapsed_tim": [8, 361], "recov": [8, 43, 46, 73, 361, 551], "q_config": [8, 43, 46, 47, 72, 73, 253, 255], "inspect_tensor": [8, 38, 40, 43, 46, 71, 73], "op_list": [8, 38, 40, 43, 46, 71, 73, 343, 577], "iteration_list": [8, 38, 40, 43, 46, 71, 73], "inspect_typ": [8, 38, 40, 43, 46, 71, 73, 416], "save_to_disk": [8, 38, 40, 43, 46, 71, 73], "save_path": [8, 43, 46, 73, 253, 255, 310, 311, 312, 316, 318, 351, 565], "quantization_cfg": [8, 43, 46, 73], "set_tensor": [8, 38, 40, 43, 46, 71, 73], "tensor_dict": [8, 38, 40, 43, 46, 71, 73], "input_graph": [8, 46, 153, 154, 158, 161, 162, 363, 471, 475, 480, 483, 490], "fp32_baselin": [8, 40, 43, 46, 71, 73, 354], "diagnosis_help": 8, "fp32_model": [8, 71, 73, 169, 253, 255, 318, 343, 361, 547], "int8_model": [8, 253, 255], "experiement": 10, "deprec": [10, 252, 258, 516, 578], "bilingu": [13, 259, 301], "understudi": [13, 259, 301], "qualiti": [13, 259, 301], "text": [13, 214, 215, 250, 251, 259, 264, 296, 301, 306, 331, 562, 571, 578, 581], "machin": [13, 259, 277, 301, 376, 545, 555, 561, 571, 577], "translat": [13, 73, 259, 260, 271, 274, 277, 279, 301, 302], "natur": [13, 259, 301], "anoth": [13, 38, 40, 73, 132, 215, 251, 258, 259, 268, 301, 351, 547, 550, 578, 579], "approxim": [13, 259, 260, 301, 302, 563], "glue": [13, 259, 266, 301, 308, 548, 563], "word": [13, 214, 250, 259, 301, 563, 581], "piec": [13, 214, 250, 259, 301, 555, 563], "decod": [13, 210, 211, 248, 259, 280, 301, 563, 578], "id": [13, 32, 33, 34, 35, 214, 216, 250, 259, 261, 262, 263, 264, 301, 303, 304, 305, 306, 381, 382, 384, 385, 386, 388, 391, 392, 393, 394, 395, 397, 398, 400, 401, 429, 430, 433, 501, 563, 576, 579], "token": [13, 198, 209, 212, 215, 236, 247, 249, 251, 258, 259, 260, 280, 300, 301, 302, 529, 533, 545, 548, 563, 576, 578, 579], "By": [13, 37, 259, 301, 563, 565, 579], "ngram": [13, 259, 301, 563], "breviti": [13, 259, 260, 301, 302, 563], "penalti": [13, 259, 260, 301, 302, 563], "beam": [13, 259, 301, 563], "cach": [13, 198, 236, 259, 301, 446, 533, 556, 573], "error": [13, 71, 169, 259, 266, 272, 299, 301, 308, 343, 500, 528, 563, 579], "occur": [13, 259, 301], "length": [13, 198, 215, 236, 251, 259, 262, 280, 301, 304, 548, 563, 573, 578], "bleu_scor": [13, 259, 260, 301, 302], "schedul": [22, 258, 291, 295, 300, 321, 330, 332, 351, 567], "mixedprecis": [22, 258, 267, 370, 474, 522, 564], "architectur": [22, 216, 269, 270, 280, 281, 282, 284, 550, 561, 569, 570, 571], "na": [22, 179, 258, 300, 313, 560], "pruning_support": 32, "revis": [32, 33, 34, 35], "644ec953a7dc": 32, "6ece06672ed3": [32, 33], "date": [32, 33, 34, 35, 336, 485], "09": [32, 581], "17": [32, 581], "22": [32, 35, 506, 509, 581], "310141": 32, "14": [33, 34, 253, 255, 555, 581], "6f0d0f71d92e": [33, 34], "08": [33, 215, 251, 578, 581], "31": [33, 581], "07": [33, 34, 580, 581], "229939": 33, "update_dataload": 33, "db_session": [33, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 407, 408, 410, 412, 415], "sqlalchemi": [33, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 407, 408, 410, 412, 413, 415, 556, 561], "orm": [33, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 407, 408, 410, 412, 415], "session": [33, 167, 197, 235, 317, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 407, 408, 410, 412, 413, 415, 577, 579], "exist": [33, 79, 161, 180, 216, 217, 262, 282, 304, 316, 317, 382, 402, 408, 410, 411, 448, 499, 515, 516, 563, 569, 579], "databas": [33, 200, 238, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 411, 412, 413, 485, 499, 515], "update_transform": 33, "13": [34, 35, 335, 545, 581], "9e89549a08c8": [34, 35], "29": [34, 581], "41": [34, 581], "291905": 34, "03": [35, 506, 581], "34": [35, 581], "52": [35, 581], "916541": 35, "run_migrations_offlin": 37, "migrat": [37, 499], "context": [37, 572], "url": [37, 200, 238, 462, 529, 562], "engin": [37, 273, 380, 392, 413], "though": [37, 280], "skip": [37, 319, 577, 579], "creation": [37, 377], "even": [37, 88, 545, 569], "dbapi": 37, "execut": [37, 40, 43, 46, 71, 73, 76, 79, 165, 225, 252, 258, 269, 270, 281, 285, 290, 295, 298, 299, 330, 335, 354, 360, 362, 363, 364, 381, 392, 395, 402, 408, 410, 411, 467, 469, 471, 474, 475, 478, 479, 480, 481, 483, 484, 486, 491, 494, 498, 501, 509, 510, 532, 545, 550, 564, 567, 569, 570, 573, 576, 579, 581], "emit": 37, "string": [37, 38, 40, 43, 46, 71, 72, 73, 82, 89, 132, 137, 138, 161, 167, 178, 179, 198, 200, 217, 222, 236, 238, 252, 255, 257, 258, 259, 262, 268, 269, 270, 273, 281, 282, 283, 285, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 312, 317, 318, 323, 330, 331, 332, 333, 334, 335, 354, 355, 356, 361, 374, 494, 516, 540, 563, 578], "run_migrations_onlin": 37, "associ": [37, 262, 304, 403, 404], "connect": [37, 295, 320, 392, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 545, 569, 570, 576], "cl": [38, 64, 71, 174, 176, 200, 204, 207, 208, 209, 212, 215, 217, 222, 238, 242, 245, 246, 247, 249, 251, 283, 288, 293, 295, 297, 319, 323, 329, 330, 332, 333, 346], "quanit": [38, 43, 46], "chosen": [38, 40, 545], "option": [38, 40, 43, 46, 71, 73, 132, 161, 183, 186, 187, 188, 198, 215, 217, 226, 236, 251, 253, 255, 258, 262, 268, 273, 274, 280, 293, 299, 300, 304, 323, 335, 351, 361, 367, 380, 381, 382, 384, 391, 392, 395, 397, 398, 400, 401, 403, 408, 413, 416, 445, 452, 455, 456, 457, 462, 471, 475, 484, 485, 487, 492, 501, 502, 506, 509, 514, 516, 517, 519, 522, 524, 525, 526, 535, 541, 546, 547, 548, 553, 557, 564, 576, 578, 579, 580], "categori": [38, 40, 73, 200, 238, 261, 262, 303, 304, 548], "mini": [38, 40, 43, 73, 581], "boolean": [38, 40, 43, 45, 73, 82, 273, 330, 516], "inspect": [38, 40, 43, 46, 71, 73, 545, 575, 577], "capabl": [38, 40, 43, 46, 71, 72, 73, 346, 557, 564, 572, 573, 579, 580], "queri": [38, 40, 43, 45, 46, 71, 73, 132, 137, 144, 167, 278, 280, 339, 383, 390, 399, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 573], "dump": [38, 40, 43, 46, 47, 71, 73, 132, 253, 255, 361, 371, 485, 506, 517, 529, 573, 577], "contain": [38, 40, 43, 46, 47, 71, 73, 82, 93, 94, 96, 100, 132, 135, 161, 167, 169, 178, 186, 187, 198, 199, 200, 236, 237, 238, 252, 253, 255, 257, 258, 262, 263, 264, 268, 271, 276, 277, 285, 286, 287, 288, 290, 293, 294, 295, 296, 297, 298, 300, 304, 305, 306, 323, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 360, 365, 369, 377, 383, 385, 386, 388, 389, 390, 393, 394, 397, 399, 403, 408, 413, 418, 419, 423, 426, 432, 437, 438, 444, 463, 470, 472, 473, 476, 477, 479, 482, 488, 493, 497, 501, 509, 547, 548, 550, 560, 563, 569, 570, 577, 579], "bool": [38, 40, 45, 46, 47, 71, 88, 89, 132, 137, 161, 167, 169, 173, 187, 198, 200, 211, 215, 236, 238, 248, 251, 253, 255, 260, 262, 266, 271, 273, 274, 280, 293, 302, 304, 308, 323, 339, 346, 391, 425, 430, 433, 445, 448, 450, 451, 452, 453, 455, 456, 457, 458, 462, 464, 467, 485, 501, 502, 504, 509, 510, 516, 518, 519, 529, 535, 541, 548, 563, 572, 578], "disk": [38, 40, 71, 73], "memori": [38, 40, 71, 100, 257, 258, 285, 290, 298, 547, 551, 564, 566, 569, 570, 573, 579], "numpi": [38, 40, 43, 46, 71, 73, 93, 94, 96, 132, 167, 215, 251, 256, 262, 266, 271, 273, 283, 304, 308, 355, 356, 556, 578], "arrai": [38, 40, 43, 46, 71, 73, 132, 161, 167, 215, 251, 262, 266, 271, 273, 283, 304, 308, 318, 338, 355, 356, 578], "node0_nam": [38, 40, 71, 73], "weight0_nam": [38, 40, 43, 46, 71, 73], "bias0_nam": [38, 40, 43, 46, 71, 73], "node1_nam": [38, 40, 71, 73], "weight1_nam": [38, 40, 71, 73], "bias1_nam": [38, 40, 71, 73], "output0_nam": [38, 40, 71, 73], "output1_nam": [38, 40, 71, 73], "respons": [38, 40, 43, 46, 71, 73, 504, 508, 515, 528, 532, 533, 537, 539, 541, 542, 573], "int32": [38, 40, 43, 46, 71, 73, 253, 255, 548], "someth": [38, 40, 43, 46, 71, 73, 186, 187, 200, 238, 335], "quantize_input": [38, 40, 73], "abl": [38, 40, 73, 107, 186, 187, 214, 250, 335, 569, 573], "where": [38, 40, 43, 47, 70, 71, 73, 144, 262, 266, 278, 280, 282, 284, 293, 304, 308, 323, 550, 553, 569, 577], "destinatin": [38, 40], "destin": [38, 40, 47, 73, 253, 254, 258, 268], "kerasadaptor": 40, "boolen": [40, 46, 71, 73], "compare_label": [40, 43, 46, 71, 73, 266, 308, 563], "pipelin": [40, 43, 46, 71, 73, 252, 258, 269, 270, 281, 296, 299, 551, 567], "get_optype_wise_": [40, 73], "quantizable_op_detail": 40, "get": [40, 43, 46, 71, 72, 73, 93, 94, 96, 132, 137, 144, 161, 167, 173, 178, 180, 188, 191, 209, 212, 215, 216, 222, 224, 225, 226, 229, 247, 249, 251, 255, 256, 257, 258, 267, 274, 278, 284, 285, 290, 293, 295, 297, 298, 299, 300, 316, 317, 318, 319, 320, 323, 330, 332, 333, 338, 343, 355, 356, 361, 362, 367, 374, 375, 376, 378, 381, 384, 385, 386, 388, 391, 392, 393, 394, 395, 396, 397, 402, 403, 405, 407, 408, 409, 410, 411, 412, 415, 416, 417, 420, 424, 425, 430, 442, 445, 446, 448, 450, 451, 455, 456, 457, 459, 462, 464, 466, 467, 468, 469, 474, 478, 481, 484, 485, 487, 491, 492, 494, 496, 503, 504, 508, 512, 514, 516, 517, 519, 523, 526, 528, 529, 532, 533, 537, 539, 540, 541, 542, 545, 546, 547, 548, 560, 561, 579], "wise": [40, 73, 162, 177, 293, 323, 337, 338, 339, 343, 405, 408, 516, 545, 547, 560, 569, 570, 577, 579, 580], "union": [40, 73, 260, 262, 266, 302, 304, 308, 351, 374, 376, 392, 414, 452, 501, 504, 506, 508, 509, 516, 519, 520, 522, 524, 528, 563], "kei": [40, 46, 71, 73, 132, 137, 161, 167, 169, 180, 258, 262, 278, 280, 283, 285, 290, 294, 296, 304, 317, 323, 331, 334, 338, 346, 352, 354, 355, 361, 508, 524, 545, 555, 577], "kerasqueri": 40, "local_config_fil": [40, 43, 46, 71, 73], "get_vers": [40, 43, 46, 72, 73], "infom": [40, 46, 73, 218, 219, 255], "get_precis": [40, 43, 46, 72, 73, 378], "get_op_typ": [40, 43, 46, 71, 72, 73], "compos": [40, 46, 71, 73, 161, 215, 251, 547, 578], "dictionari": [40, 46, 47, 71, 73, 93, 94, 96, 144, 169, 173, 179, 180, 183, 214, 250, 262, 269, 271, 274, 280, 281, 282, 284, 300, 304, 383, 385, 386, 388, 390, 393, 394, 399, 403, 404, 406], "get_quantization_cap": [40, 43, 46, 71, 72, 73], "get_op_types_by_precis": [40, 46, 71, 73], "mxnetadaptor": 43, "nc_model": [43, 45, 285, 290], "unimpl": [43, 46], "mxnetmodel": [43, 314], "data_x": [43, 45], "loader": [43, 45, 186, 187, 299, 335], "modelwis": 43, "opwis": 43, "recover_tuned_model": [43, 73], "mxnetqueri": 43, "g": [43, 46, 72, 271, 273, 299, 323, 508, 550, 569, 570, 575, 579], "fully_connect": 43, "get_fuse_pattern": [43, 72, 73], "etc": [43, 72, 178, 214, 225, 250, 252, 257, 258, 264, 272, 273, 285, 290, 298, 300, 306, 335, 360, 550, 560, 576, 579], "get_mixed_precision_combin": [43, 72, 73], "optyp": [45, 254], "enum": [45, 70, 361, 466, 498], "deriv": [45, 70, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 225, 252, 258, 293, 295, 297, 320, 323, 330, 332, 333, 361], "isiter": 45, "obj": [45, 178, 197, 235, 252, 257, 258, 268, 269, 270, 281, 282, 285, 290, 294, 298, 299, 300, 334, 335, 354, 361], "ensure_list": 45, "check_mx_vers": 45, "mx": [45, 547], "__version__": 45, "make_nc_model": 45, "sym_model": 45, "ctx": [45, 547], "input_desc": 45, "tupl": [45, 71, 132, 144, 186, 187, 211, 215, 217, 248, 251, 253, 255, 262, 271, 274, 280, 304, 323, 335, 343, 431, 462, 516, 535, 548, 563, 569, 578], "symnet": 45, "aux": 45, "ncmodel": 45, "suppli": [45, 278], "prepare_model_data": 45, "dataloaderwrap": 45, "is_model_quant": 45, "query_quantizable_nod": 45, "map": [45, 47, 73, 154, 215, 251, 253, 254, 255, 257, 258, 261, 262, 263, 264, 266, 271, 285, 290, 293, 295, 298, 303, 304, 305, 306, 308, 323, 332, 466, 546, 548, 552, 563, 569, 570, 573], "quantize_sym_model": 45, "run_forward": 45, "b_filter": 45, "collector": 45, "pre_batch": 45, "post_batch": 45, "propag": [45, 144], "filter": [45, 198, 199, 200, 201, 202, 203, 205, 209, 236, 237, 238, 239, 240, 241, 243, 247, 258, 300, 384, 425, 448, 518, 548, 560, 569, 570, 577], "make_symbol_block": 45, "gluon": [45, 335, 565], "symbolblock": 45, "make_modul": 45, "parse_tune_config": 45, "quantizable_nod": 45, "distribute_calib_tensor": 45, "calib_tensor": 45, "calib_cfg": 45, "tensor_to_nod": 45, "kl": [45, 352, 355, 356, 557, 579, 580], "minmax": [45, 557, 580], "calib_model": 45, "qsym_model": 45, "calib_data": [45, 547], "gather": [45, 47, 293, 323, 504], "calibdata": 45, "threshold": [45, 47, 175, 262, 293, 304, 323, 352, 355, 356, 563], "calibcollector": 45, "include_tensors_kl": 45, "include_tensors_minmax": 45, "num_bin": [45, 352, 355, 356], "8001": [45, 352, 355], "collectorbas": 45, "tensorcollector": 45, "include_nod": 45, "qtensor_to_tensor": 45, "onnxruntimeadaptor": 46, "rt": 46, "todo": [46, 198, 201, 236, 239, 262, 304, 355, 356, 514], "func": [46, 217, 299, 516, 533, 580], "onnxdataload": 46, "evalut": 46, "onnxtransform": 46, "onnxmetr": 46, "evaluaton": 46, "visualizaton": 46, "f1": [46, 258, 263, 265, 266, 300, 305, 307, 308, 546, 552, 563, 576, 581], "modelproto": [46, 253, 254, 255, 565], "onnxrt_integeropsadaptor": 46, "onnxrt_qdqadaptor": 46, "onnxrtqueri": 46, "get_graph_optim": 46, "onnxrtaug": 47, "model_wrapp": 47, "dump_op_typ": 47, "black_nod": 47, "white_nod": 47, "cpuexecutionprovid": 47, "augment": 47, "augment_graph": 47, "activation_onli": 47, "weight_onli": 47, "quantization_candid": 47, "get_intermediate_output": 47, "calib_mod": 47, "dump_calibr": 47, "naiv": 47, "give": [47, 547, 579], "pair": [47, 129, 137, 564], "minimum": [47, 70, 323, 338, 579], "second": [47, 90, 198, 236, 339, 425, 508, 545, 553, 566, 579, 580], "maximum": [47, 70, 80, 198, 215, 236, 251, 260, 280, 293, 295, 302, 323, 330, 338, 548, 573, 578], "ad": [47, 144, 198, 236, 259, 301, 323, 330, 338, 381, 382, 384, 391, 392, 393, 394, 395, 398, 400, 401, 545, 564, 577], "reducemin": 47, "reducemax": 47, "calculate_quantization_param": 47, "quantization_threshold": 47, "calcul": [47, 71, 73, 169, 201, 202, 217, 239, 240, 258, 263, 264, 274, 279, 280, 285, 289, 290, 293, 295, 296, 305, 306, 319, 320, 323, 331, 332, 343, 352, 355, 416, 508, 514, 548, 563, 566, 569, 573, 576, 579, 580], "matmul": [47, 72, 78, 91, 111, 112, 121, 150, 255, 293, 323, 555, 557], "param_nam": [47, 374], "conv_3": 47, "np": [47, 132, 161, 215, 251, 338, 552, 578], "conv_4": 47, "calculate_scale_zeropoint": 47, "last_nod": 47, "next_nod": 47, "rmin": [47, 70, 544], "rmax": [47, 70, 544], "quantize_rang": [47, 70], "op_registri": 64, "op_typ": [64, 71, 339, 343, 346, 347, 350], "qop_registri": 64, "qoper": 64, "quanttyp": 70, "cast_tensor": 70, "tensorproto": 70, "tensor_target_dtyp": 70, "quantize_data_with_scale_zero": 70, "sym": [70, 557, 580], "asym": [70, 557, 580], "pack": [70, 87], "b": [70, 96, 100, 198, 236, 255, 548, 563, 579], "ab": [70, 280, 295, 320, 544, 573], "quantize_data": 70, "trasnform": 70, "equat": [70, 264, 266, 306, 308, 573], "q": [70, 129], "z": [70, 550], "real": [70, 71, 201, 218, 219, 239, 552, 571, 573], "quantizedvalu": 70, "new_quantized_nam": 70, "scale_nam": 70, "zero_point_nam": 70, "quantized_value_typ": 70, "axi": [70, 323], "quint8": 70, "linearli": 70, "inputoutputinti": 70, "quantizediniti": 70, "quantized_data": 70, "quantizationmod": 70, "quantizedvaluetyp": 70, "quantformat": [70, 255], "attribute_to_kwarg": 70, "kwarg": [70, 71, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 183, 200, 209, 212, 213, 215, 219, 220, 223, 238, 251, 257, 258, 268, 274, 280, 285, 290, 296, 298, 299, 300, 307, 308, 310, 311, 312, 314, 316, 317, 318, 331, 335, 347, 350, 351, 360, 361, 366, 368, 370, 371, 372, 373, 383, 385, 386, 388, 390, 393, 394, 399], "helper": [70, 71, 169, 173, 198, 199, 200, 214, 236, 237, 238, 250, 254, 255, 278, 510], "make_nod": 70, "find_by_nam": 70, "item_list": 70, "item": [70, 180, 214, 250, 294, 334, 346, 414, 502, 535, 552, 579], "get_ops_recurs": 71, "prefix": [71, 167, 216, 258, 259, 301, 529, 577], "graph_info": [71, 73, 310, 311, 312, 316, 317, 318], "templateadaptor": 71, "tampl": 71, "is_fused_modul": [71, 169, 173], "_propagate_qconfig_help": [71, 169, 173], "calculate_hessian_trac": 71, "enable_act": [71, 169], "hessian": [71, 169, 341, 579], "gradient": [71, 144, 295, 318, 320, 560, 569, 570, 581], "amap": 71, "op_nam": [71, 179, 183, 300, 339, 343, 346, 347, 350, 416, 421, 422, 430, 431, 577], "hessian_trac": [71, 169], "pytorchadaptor": 71, "objext": 71, "summari": [71, 124, 125, 216, 258, 545, 568, 577], "optimizer_tupl": 71, "criterion_tupl": 71, "is_fused_child": 71, "_post_eval_hook": [71, 577], "is_fused_op": 71, "is_last_fused_child": 71, "q_capabl": 71, "get_non_quant_modul": 71, "model_kwarg": 71, "non_quant_modul": 71, "custom": [71, 137, 178, 271, 299, 360, 403, 408, 550, 569, 576], "keyword": 71, "custom_non_quant_dict": 71, "pytorch_ipexadaptor": 71, "ipex": [71, 560, 573, 581], "unspport": 71, "No": [71, 556, 568, 571], "pytorch_fxadaptor": 71, "fx": [71, 173, 335, 344, 560, 571, 573, 574, 581], "prepare_sub_graph": 71, "sub_module_list": 71, "fx_op_cfg": 71, "is_qat": 71, "example_input": [71, 253, 255, 555], "recurs": [71, 361], "qconfigmap": 71, "prepare_fx": 71, "dir": [71, 173, 198, 236, 360, 548, 556, 558], "convert_sub_graph": 71, "fuse_fx_model": 71, "fused_model": 71, "calculate_op_sensit": [71, 73], "output_op_nam": [71, 73], "confidence_batch": [71, 73, 579], "fallback": [71, 73, 173, 336, 337, 341, 343, 344, 564, 574, 579], "requantize_cfg": [71, 73], "stage": [71, 73, 119, 336, 344, 509, 550, 577, 579], "sort": [71, 73, 161, 343, 425, 579], "sensit": [71, 73, 295, 320, 560, 569, 570], "ops_lst": 71, "pytorchqueri": 71, "set_quantization_config": 72, "organ": [72, 545, 580], "unsupported_precis": 72, "tensorflowadaptor": 73, "graphdef": [73, 82, 83, 86, 87, 89, 96, 100, 111, 112, 118, 119, 120, 121, 132, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160, 161, 167, 317, 494, 565], "graph_def": [73, 79, 167, 317, 335, 459, 494, 495], "frozen": [73, 82, 317, 335, 453, 456, 545, 565], "ckpt": [73, 167, 317, 335, 581], "savedmodel": [73, 317, 335, 581], "folder": [73, 167, 200, 205, 238, 243, 335, 360, 548, 577], "larger": [73, 323], "tuning_cfg_to_fw": 73, "tuning_cfg": 73, "pars": [73, 161, 198, 199, 211, 215, 236, 237, 248, 251, 280, 363, 374, 379, 402, 403, 405, 408, 409, 410, 411, 414, 467, 471, 475, 480, 483, 489, 508, 516, 524, 535, 578], "compat": [73, 107, 167, 262, 271, 304, 317, 552, 565, 575], "definit": [73, 132, 191, 196, 229, 234, 430, 443, 452, 501, 532], "inspect_weight_and_bia": 73, "node_list": 73, "graph_node_name_map": [73, 167], "fused_node_map": 73, "pattern_map": 73, "seq": 73, "fused_mapping_revers": 73, "fused_map": 73, "inspect_activ": 73, "local": [73, 293, 323, 330, 346, 361, 376, 408, 413, 426, 446, 545, 576], "tensorflowbasemodel": [73, 317, 457], "quantizedv2": 73, "qat_convert": 73, "quantize_recip": [73, 137, 138], "kera": [73, 96, 138, 144, 222, 312, 317, 437, 444, 454, 552, 565], "converted_model": [73, 564], "mse": [73, 173, 266, 300, 308, 342, 416, 422, 545, 563, 572, 575], "backup": 73, "cfg": [73, 97, 98, 179], "fallen": 73, "previou": [73, 280, 282, 323, 344, 545, 575, 577, 579], "denot": 73, "tensorflow_itexadaptor": 73, "performance_onli": [73, 129, 153, 158, 166, 526], "get_eightbit_pattern": 73, "qdq_enabl": 73, "eightbit": [73, 577], "generate_internal_pattern": 73, "intern": [73, 132, 169, 278, 500, 547, 570], "bf16convert": [76, 574], "fp32_op": [76, 129], "bf16_op": [76, 129, 574], "graph_bas": [76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131], "graphrewriterbas": [76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131], "do_transform": [76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 146, 153, 154, 158, 162, 165, 166], "convertaddtobiasaddoptim": 78, "addv2": [78, 95, 96, 557], "biasadd": [78, 90, 92, 150, 157, 557], "convertlayoutoptim": 79, "layout": 79, "nchw": 79, "nhwc": 79, "convertleakyreluoptim": 80, "subgraph": [80, 88, 92, 96, 555], "leakyrelu": 80, "mul": [80, 91, 92, 95, 96, 150, 555], "coeffici": [80, 272], "less": [80, 550, 569], "convertnantorandom": 81, "const": [81, 89, 90, 93, 94, 96, 111, 112, 125, 132, 300, 381, 392, 395, 402, 408, 410, 411, 415, 497, 505, 515], "nan": 81, "convertplaceholdertoconst": 82, "rewrit": [82, 83, 84, 85, 86, 87, 88, 89, 99, 104, 106, 107, 108, 109, 110, 113, 116, 117, 126, 127, 130, 131], "renam": [82, 107, 280, 575], "placeholderwithdefault": 82, "constant": [82, 88, 132, 161, 253, 255, 338, 498, 547, 557, 578], "simplifi": 82, "input_graph_def": [82, 83, 86, 87, 89, 96, 100, 111, 112, 132, 161], "nodes_to_convert": 82, "placehold": [82, 196, 234], "strtobool": 82, "val_str": 82, "equival": [82, 271], "dequantizecastoptim": 83, "dilatedcontract": 84, "injectdummybiasaddoptim": 85, "expanddimsoptim": 86, "expanddim": 86, "whose": [86, 111, 112, 294, 323, 558, 569, 579], "fetchweightfromreshapeoptim": 87, "fetch": [87, 191, 229, 262, 304, 547], "reshap": [87, 96, 288, 323], "foldbatchnormnodesoptim": 88, "scale_after_norm": 88, "batchnormwithglobalnorm": 88, "nodedef": [88, 93, 94, 96, 132, 161, 494], "normal": [88, 96, 215, 251, 264, 306, 516, 546, 547, 566, 578], "fold": [88, 89, 253, 255, 557], "convolut": [88, 550, 569, 571], "onc": [88, 132, 167, 222, 297, 333, 545, 547, 569, 570, 571, 579, 581], "That": [88, 545, 547], "opportun": 88, "rather": [88, 558], "expens": [88, 550, 579], "bake": 88, "identifi": [88, 93, 94, 96, 262, 304, 317], "simpler": 88, "form": [88, 96, 107, 262, 264, 304, 306, 408, 410, 509, 545, 550], "spot": 88, "fusedbatchnorm": [88, 107], "fusedbatchnormv3": 88, "_fusedbatchnormex": 88, "newer": 88, "badli": [88, 96, 107], "duplic": [88, 96, 125, 338], "graphfoldconstantoptim": 89, "check_all_fold": 89, "check_const_input": 89, "node_nam": [89, 93, 94, 96, 132, 161, 167, 255, 316, 317, 396, 494], "supported_op_typ": 89, "fusebiasaddandaddoptim": 90, "fusecolumnwisemuloptim": 91, "depthwiseconv2dn": [91, 557], "fuseconvwithmathoptim": 92, "elimin": 92, "math": [92, 573], "realdiv": [92, 95], "node_name_from_input": [93, 94, 96, 132, 161], "strip": [93, 94, 96, 167, 577], "port": [93, 94, 96, 161, 529, 533, 545], "underli": [93, 94, 96, 272], "node_from_map": [93, 94, 96], "node_map": [93, 94, 96], "pull": [93, 94, 96, 509], "entri": [93, 94, 96, 169, 222, 257, 299, 379, 422, 425, 508, 516, 562], "index": [93, 94, 96, 137, 144, 191, 196, 200, 204, 209, 216, 229, 234, 238, 242, 247, 258, 283, 319, 361, 533, 547, 563], "isn": [93, 94, 96, 132], "present": [93, 94, 96, 545, 571], "values_from_const": [93, 94, 96, 132], "node_def": [93, 94, 96, 132], "extract": [93, 94, 96, 132, 200, 238, 535, 548], "ndarrai": [93, 94, 96, 132, 215, 251, 271, 273, 318, 338, 352, 355, 556, 578], "access": [93, 94, 96, 132, 144, 179, 180, 500, 516, 529, 533, 545], "get_const_dim_count": [93, 94], "dimens": [93, 94, 190, 215, 228, 251, 274, 289, 323, 338, 548, 550, 569, 578], "fusegeluoptim": 95, "sqrt": 95, "erf": 95, "gelu": 95, "fuselayernormoptim": 96, "remap": 96, "smaller": [96, 215, 251, 550, 569, 570, 578], "layernorm": [96, 280], "case": [96, 100, 197, 214, 215, 216, 235, 250, 251, 257, 258, 266, 285, 290, 298, 299, 308, 506, 510, 516, 545, 546, 547, 550, 552, 557, 558, 563, 566, 569, 571, 573, 578, 580], "fusedbatcnormv3": 96, "restrict": [96, 569, 570, 576], "2d": 96, "3d": [96, 571, 581], "contraint": 96, "fusedop": 96, "fill": [96, 383, 385, 386, 388, 390, 393, 394, 399, 545, 576, 578], "gamma": 96, "beta": [96, 320], "h": [96, 215, 251, 552, 578], "_mkllayernorm": 96, "fusepadwithconv2doptim": 97, "excluded_op_nam": [97, 98, 179, 183, 300], "new_api": [97, 98, 103, 119, 126, 153, 158, 162], "itex_qdq_mod": [97, 98], "fusepadwithfp32conv2doptim": 98, "fusetransposereshapeoptim": 99, "graphcseoptim": 100, "cse": 100, "those": [100, 343, 361, 550, 558, 567, 569, 570, 573, 579], "child": [100, 577], "b1": 100, "c1c2": 100, "d1": [100, 361], "c1": 100, "c2": 100, "bound": [100, 215, 216, 251, 258, 262, 271, 304, 338, 563, 578], "elim": 100, "grappleroptim": 101, "input_output_nam": 101, "opt_cfg": 101, "wrapper": [101, 144, 197, 209, 212, 215, 217, 218, 219, 220, 221, 235, 247, 249, 251, 262, 266, 304, 307, 308, 311, 313, 533, 541, 574], "grappler": [101, 557], "insertprintminmaxnod": 103, "pre_node_nam": 103, "post_node_nam": 103, "movesqueezeafterreluoptim": 104, "removetrainingnodesoptim": 106, "protected_nod": [106, 161], "types_to_splic": [106, 161], "checknumer": [106, 161], "stopgradi": 106, "renamebatchnormoptim": 107, "fusedbatchnormv2": 107, "due": [107, 569, 570, 573, 577], "histor": 107, "latter": [107, 137], "former": 107, "platform": [107, 504, 560, 571, 573, 581], "vnni_bf16": 107, "amx": 107, "instruct": [107, 545, 550, 561, 564, 571, 572, 573], "splitsharedinputoptim": 108, "stripequivalentnodesoptim": 109, "output_node_nam": [109, 110, 153, 154, 158, 161, 167], "stripunusednodesoptim": 110, "input_node_nam": [110, 153, 158, 161, 167], "switchoptim": 111, "condit": [111, 198, 199, 200, 215, 236, 237, 238, 251, 548, 562, 578, 579], "enter": [111, 112], "updateenteroptim": 112, "workaround": 112, "freezefakequantopoptim": 115, "fake_qu": [115, 129, 153, 158], "freezevaluetransform": 116, "max_min_data": [116, 117], "postfix": [116, 117], "tensor_data": 116, "th": [116, 117], "gpu": [116, 117, 129, 132, 161, 560, 569, 572, 573], "itex_mod": [116, 129, 153, 158], "generate_output_graph": [116, 117], "max_name_valu": [116, 117], "freeze_max": [116, 117], "freeze_min": [116, 117], "generate_output_graph_rang": [116, 117], "freezevaluewithoutcalibtransform": 117, "95": [117, 262, 266, 304, 308, 563, 581], "fuseconvredundantdequantizetransform": 118, "_quantizedconv": 118, "_quantizeddeconv": 118, "successor": [118, 119, 120, 121], "fuseconvrequantizetransform": 119, "requant": [119, 121, 577], "fuse_pattern": 119, "sum_pattern": 119, "fusematmulredundantdequantizetransform": 120, "_quantizedmatmul": [120, 121], "fusematmulrequantizedequantizetransform": 121, "quantizedmatmul": 121, "quantizedmatmulwithbiasanddequant": 121, "fusematmulrequantizetransform": 121, "rtype": [121, 510], "fusematmulrequantizedequantizenewapitransform": 121, "fusematmulrequantizenewapitransform": 121, "newapi": 121, "metainfochangingmemopoptim": 123, "metaop": 123, "posthostconstconvert": 124, "hostconst": 124, "postcseoptim": 125, "share": [125, 161, 556, 557, 579], "quantizev2": [125, 150], "quantizedrnnconvert": 126, "calibration_data": [126, 129], "rnn_detail": 126, "scalepropagationtransform": 127, "direct": [127, 293, 323, 466], "generategraphwithqdqpattern": 129, "op_wise_config": [129, 153, 158], "quantized_nod": 129, "dq": 129, "mergeduplicatedqdqoptim": 130, "shareqdqforitexypatternoptim": 131, "graphanalyz": 132, "extend_engin": 132, "singleton": [132, 300, 497, 505], "properti": [132, 144, 188, 190, 198, 200, 216, 217, 225, 226, 228, 236, 238, 252, 257, 258, 265, 266, 267, 268, 282, 285, 290, 298, 299, 307, 308, 310, 311, 312, 314, 316, 317, 318, 331, 338, 346, 362, 380, 413, 420, 424, 429, 430, 433, 445, 448, 453, 457, 466, 469, 474, 478, 481, 484, 491, 501, 508, 509, 510, 514, 519, 523, 526, 528, 529, 562, 568], "getter": [132, 225, 252, 258, 282, 285, 290, 298, 299, 317, 318, 446], "_graph": 132, "has_positive_input": 132, "retrun": 132, "neg": 132, "get_graph_input_output": 132, "clearli": 132, "similar": [132, 280, 572, 579, 580], "summarize_graph": 132, "writtern": 132, "googl": [132, 564, 571], "query_fusion_pattern_nod": 132, "aggreg": [132, 510], "_search_pattern": 132, "remove_node_with_single_input_output": 132, "rebuild": 132, "except": [132, 300, 361, 497, 505, 506, 516, 531, 541], "remove_nod": 132, "replace_const_nod": 132, "new_const_nod": 132, "target_nod": 132, "old_constant_node_nam": 132, "replace_al": 132, "outdat": 132, "replace_constant_graph_with_constant_nod": 132, "new_nod": 132, "old_end_node_nam": 132, "replace_single_nod": 132, "old_output_node_nam": 132, "old_output_nam": 132, "old_input_node_nam": 132, "old_input_nam": 132, "bottom": [132, 545], "replace_nod": 132, "old_node_nam": 132, "output_nodes_nam": 132, "node_name_detail": 132, "parent": [132, 289, 295, 297, 330, 333, 577], "add_nod": [132, 430], "start_node_nam": 132, "end_node_nam": 132, "dump_graph": 132, "parse_graph": 132, "graphrewriterhelp": 132, "encapsul": [132, 186, 187, 335, 565], "compare_node_attr": 132, "node_a": 132, "node_b": 132, "compar": [132, 169, 266, 308, 545, 547, 551, 563, 570, 573, 576, 577, 579], "create_nod": [132, 161], "create_constant_nod": [132, 161], "datatyp": [132, 161, 574, 579], "set_attr_dtyp": [132, 161], "set_attr_tensor": [132, 161], "set_attr_type_list": [132, 161], "attr": [132, 161, 167], "set_attr_string_list": [132, 161], "set_attr_str": [132, 161], "set_attr_int_list": 132, "set_attr_int": [132, 161], "set_attr_float": [132, 161], "set_attr_bool": [132, 161], "fakequantizebas": 135, "get_config": [135, 144, 542], "serial": [135, 198, 236, 414, 421, 422, 452, 504, 506, 518, 519, 523, 524, 547], "fakequant": 135, "classmethod": [135, 144, 286, 287, 288, 347, 350, 503, 537, 539, 542], "from_config": [135, 144], "instanti": [135, 567], "per_channel": [135, 557, 580], "num_bit": 135, "channel_axi": [135, 175, 177], "symmetr": [135, 544, 573, 578, 579], "narrow_rang": 135, "quantizeconfig": [137, 138, 144], "There": [137, 266, 299, 308, 545, 550, 557, 560, 563, 564, 579, 580], "add_quantize_recip": 137, "recip": [137, 253, 255, 257, 258, 298, 555, 579], "layer_nam": [137, 293, 323], "some": [137, 186, 198, 225, 236, 258, 294, 346, 516, 545, 553, 561, 563, 566, 569, 570, 573, 574, 577, 579], "conv5_block3_3_conv": 137, "flase": 137, "conv5_block3_3_add": 137, "query_lay": 137, "layer_recip": 137, "remove_lay": 137, "layers_nam": 137, "get_quantize_recip": 137, "is_empti": 137, "clear_quantize_recip": 137, "init_quantize_config": 138, "model_nam": [138, 274, 391, 397, 516], "qat_clone_funct": 138, "leav": 138, "quantizewrapp": [138, 144], "wrapped_lay": 138, "quantizelayeradd": 141, "quantize_layer_bas": [141, 143], "quantizelayerbas": [141, 143], "quantizelayerbatchnorm": 143, "quantizewrapperbas": 144, "trainabl": 144, "sublay": 144, "trainable_weight": 144, "track": [144, 346, 576], "descent": 144, "non_trainable_weight": 144, "manual": [144, 200, 238, 548], "add_loss": 144, "regular": [144, 259, 294, 301, 332, 569], "eager": [144, 296, 331, 363, 471, 475, 483, 552, 560, 573, 574, 577, 581], "gradienttap": 144, "input_shap": [144, 202, 240, 445, 448, 457, 548], "tensorshap": 144, "compute_output_shap": 144, "caus": [144, 569, 570], "state": [144, 169, 265, 266, 278, 280, 307, 308, 347, 350, 569, 570], "happen": 144, "later": [144, 361, 577], "output_shap": 144, "query_input_index": 144, "logic": [144, 186, 187, 346, 528, 580], "live": 144, "output_obj": 144, "fusenodestartwithfusedbatchnormv3": [145, 155], "quantize_graph_bas": [145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160], "quantizenodebas": [145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160], "get_longest_fus": [145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160], "apply_the_transform": [145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 159, 160], "fusenodestartwithconcatv2": [146, 156], "fusenodestartwithconv2d": [147, 157], "fusenodestartwithdeconv2d": 148, "fusenodestartwithfusedinstancenorm": 149, "fusenodestartwithmatmul": [150, 159], "apply_matmul_biasadd_relu_fus": 150, "match_node_nam": [150, 157], "apply_matmul_biasadd_fus": 150, "apply_batchmatmulv2_fus": 150, "batchmatmul": 150, "batchmatmulv2": 150, "apply_batchmatmulv2_mul_add_fus": 150, "fusenodestartwithpool": [151, 160], "optimizeqdqgraph": 153, "op_wise_sequ": [153, 158], "quantizegraphbas": [153, 154, 158], "remove_dead_nod": 154, "output_nam": [154, 253, 255, 555], "longer": [154, 198, 215, 236, 251, 548, 578], "add_output_graph_nod": 154, "output_nod": [154, 391], "create_nodes_map": 154, "apply_conv_biasadd_relu_fus": 157, "quantizegraphforintel": 158, "quantizegraphhelp": 161, "staticmethod": 161, "get_sorted_graph": 161, "reorder": [161, 278, 280], "easier": [161, 545, 571], "split_shared_input": 161, "in_graph": [161, 167], "ouput": 161, "remove_training_nod": 161, "aren": 161, "uncondition": 161, "copy_attr": 161, "attr_valu": 161, "copi": [161, 294], "unique_node_name_from_input": 161, "ensure_tensor_name_has_port": 161, "biascorrect": 162, "fp32_graph": 162, "weight_empir": 162, "graph_transform_bas": [162, 165, 166], "graphtransformbas": [162, 165, 166], "Will": [162, 189, 192, 209, 529, 550, 560], "task": [162, 198, 205, 236, 243, 266, 280, 308, 548, 550, 560, 563, 569, 570], "w_int8": [162, 177], "w_fp32": [162, 177], "ratio": [162, 177, 211, 215, 248, 251, 258, 285, 290, 293, 295, 296, 297, 323, 330, 331, 333, 548, 569, 570, 578, 581], "equal": [162, 177, 563], "scale_c": [162, 177], "shift": [162, 177, 211, 248, 578], "notic": [162, 177, 216, 258, 562], "empir": [162, 177], "insertlog": 165, "input_pb": [165, 166], "node_name_list": 165, "show_nam": 165, "show_op": 165, "first_n": 165, "summar": [165, 550], "1024": [165, 200, 238], "messag": [165, 516, 528, 533, 579], "dump_fp32": 165, "rerangequantizedconcat": 166, "rerange_quant": 166, "concat": [166, 501], "disable_random": 167, "seed": [167, 271, 273, 284, 526, 547, 553, 580], "read_graph": 167, "in_graph_is_binari": 167, "read": [167, 200, 203, 215, 238, 241, 251, 258, 285, 290, 294, 296, 331, 431, 435, 436, 548, 574, 576], "write_graph": 167, "out_graph_def": 167, "out_graph_fil": 167, "write": [167, 207, 208, 209, 245, 246, 247, 262, 304, 361, 552, 558, 577], "is_ckpt_format": 167, "model_path": [167, 431, 446, 451, 516], "is_saved_model_format": 167, "saved_model": [167, 258, 268, 437, 444, 454], "get_tensor_by_nam": 167, "try_cnt": 167, "scope": [167, 225, 258], "tensor_nam": [167, 318], "suffix": 167, "iterator_sess_run": 167, "sess": [167, 317], "iter_op": 167, "feed_dict": [167, 197, 235], "output_tensor": [167, 317], "makeiter": 167, "strip_unused_nod": 167, "strip_unused_lib": 167, "r1": 167, "15": [167, 273, 557, 581], "branch": 167, "strip_equivalent_nod": 167, "get_tensor_val_from_graph_nod": 167, "tensor_v": 167, "hessiantrac": 169, "yao": 169, "zhewei": 169, "et": [169, 280], "al": [169, 280], "pyhessian": 169, "2020": [169, 562], "ieee": [169, 564], "confer": [169, 570], "big": 169, "dong": 169, "zhen": 169, "hawq": [169, 341, 579], "system": [169, 216, 361, 504, 531, 532, 569], "33": [169, 271, 581], "18518": 169, "18529": 169, "openvinotoolkit": 169, "nncf": 169, "mse_metric_gap": [169, 416], "fp32_tensor": [169, 416], "dequantize_tensor": [169, 416], "euclidean": [169, 416, 550], "distanc": [169, 416, 550], "get_act_gap": 169, "gap": [169, 555, 565], "get_avg_trac": 169, "num_sampl": [169, 266, 308], "compare_weight": 169, "float_dict": 169, "quantized_dict": 169, "being": [169, 262, 274, 299, 304, 355, 356, 433], "usag": [169, 197, 235, 258, 262, 268, 299, 304, 516, 545, 548, 552, 554, 563, 566, 572, 578], "wt_compare_dict": 169, "float_model": 169, "qmodel": 169, "compute_error": 169, "weight_dict": 169, "get_embedding_contigu": 173, "embed": [173, 280], "contigu": [173, 569], "append_attr": 173, "fx_model": 173, "get_mse_order_per_fp32": 173, "example_inp": 173, "influenc": 173, "fallback_ord": 173, "algorithm_registri": [174, 176], "algorithm_typ": [174, 176], "registr": [174, 176, 200, 204, 207, 208, 209, 212, 215, 222, 238, 242, 245, 246, 247, 249, 251, 288], "algorithmschedul": [174, 176], "fastbiascorrect": 175, "weightcorrect": 177, "ep": 177, "1e": [177, 580], "05": [177, 262, 266, 304, 308, 509, 563, 581], "conf_fname_or_obj": [178, 216, 225, 252, 257, 258, 267, 268, 269, 270, 281, 282, 285, 290, 298, 299, 300], "benchmark_conf": [178, 179, 300], "prefer": [178, 257, 258, 298, 300, 335], "b_dataload": [178, 216, 258, 546], "b_func": [178, 216, 258], "benchmarkconfig": 178, "prunerv2": 179, "target_spars": [179, 183, 300, 323, 572, 580], "pruning_typ": [179, 183, 300], "start_step": [179, 183, 295, 300, 330, 572], "end_step": [179, 183, 295, 300, 330, 572], "pruning_scop": [179, 183, 300], "pruning_frequ": [179, 183, 300, 330], "min_sparsity_ratio_per_op": [179, 183, 300, 323], "max_sparsity_ratio_per_op": [179, 183, 300, 323, 330], "sparsity_decay_typ": [179, 183, 300], "pruning_op_typ": [179, 183, 300], "reg_typ": 179, "criterion_reduce_typ": 179, "resume_from_pruned_checkpoint": 179, "similiar": [179, 183, 300], "cfg_fname": 179, "parser": [179, 300, 374, 379, 497, 501, 505, 535], "quantization_conf": 179, "dotdict": 179, "pruning_conf": 179, "graph_optimization_conf": [179, 257, 258], "mixedprecision_conf": 179, "distillation_conf": [179, 252, 258], "search_spac": [179, 269, 281, 282, 283, 284], "defaultconf": 179, "notat": [179, 180], "deep_get": 180, "dot": [180, 516, 564, 573], "nest": 180, "eg": [180, 200, 204, 209, 238, 242, 247, 548, 572], "john": 180, "deep_set": 180, "male": 180, "weightpruningconfig": [183, 300], "pruning_config": [183, 300], "snip_momentum": [183, 300, 320], "4x1": [183, 289, 300, 323, 581], "98": [183, 300, 572, 581], "exp": [183, 300], "distillationconfig": [183, 300], "teacher_model": [183, 217, 252, 258, 300, 550], "learning_r": [183, 300, 572, 580], "callabl": [183, 264, 300, 306, 351, 512, 516, 532, 533], "altern": [183, 300], "sigopttunestrategi": 186, "q_dataload": [186, 187, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 558, 579], "q_hook": [186, 187, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346], "tunestrategi": [186, 187, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 579], "hpo": 186, "mandatori": [186, 187, 335, 553, 580], "reserv": [186, 187, 225, 258, 299], "tuner": [186, 187, 257, 258, 298, 335], "scalar": [186, 187, 335, 355, 356, 563, 564, 573], "pseudo": [186, 187, 335, 577], "next_tune_cfg": [186, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 579], "travers": [186, 187, 336, 339, 340, 346], "concret": [186, 346, 579], "overrid": [186, 225, 258, 298, 346, 361, 506], "constraint": [186, 257, 258, 298, 547, 576, 579, 580], "tpetunestrategi": 187, "stop": [187, 339, 346, 485, 509, 553, 579, 580], "trials_count": [187, 339, 346], "basedatalod": [188, 226], "basedataload": [188, 190, 193, 194, 195, 197, 226, 228, 231, 232, 233, 235], "last_batch": [188, 190, 193, 194, 195, 197, 218, 219, 226, 228, 231, 232, 233, 235], "rollov": [188, 190, 193, 194, 195, 197, 218, 219, 226, 228, 231, 232, 233, 235], "collate_fn": [188, 190, 191, 193, 194, 195, 197, 218, 219, 226, 228, 229, 231, 232, 233, 235, 548], "sampler": [188, 190, 192, 193, 194, 195, 197, 218, 219, 226, 228, 230, 231, 232, 233, 235, 247, 258, 348, 552], "batch_sampl": [188, 190, 193, 194, 195, 197, 218, 219, 226, 228, 231, 232, 233, 235], "num_work": [188, 190, 193, 194, 195, 197, 218, 219, 226, 228, 231, 232, 233, 235, 573], "pin_memori": [188, 190, 193, 194, 195, 197, 218, 219, 226, 228, 231, 232, 233, 235], "shuffl": [188, 190, 193, 194, 195, 197, 218, 219, 226, 228, 231, 232, 233, 235, 547, 573], "_generate_dataload": [188, 226], "drop": [188, 226, 262, 294, 304, 564, 569, 570, 581], "incomplet": [188, 226], "discard": [188, 226], "entranc": [189, 192, 209], "dispatch": [189, 192, 209, 560], "default_col": [190, 228], "merg": [190, 228, 577, 579], "outer": [190, 228], "defaultdataload": [190, 194, 197, 228, 232, 235], "base_dataload": [190, 192, 193, 194, 195, 197, 228, 230, 231, 232, 233, 235, 247, 258], "drop_last": [191, 196, 229, 234], "iterablefetch": [191, 229], "indexfetch": [191, 229], "default_dataload": [192, 194, 197, 230, 232, 235, 247, 258], "fetcher": [192, 230, 247, 258], "mxnet_dataload": [192, 230, 247, 258], "onnxrt_dataload": [192, 230, 247, 258], "pytorch_dataload": [192, 230, 247, 258], "tensorflow_dataload": [192, 230, 247, 258, 494], "mxnetdataload": [193, 231], "onnxrtbertdataload": [194, 232], "bert": [194, 197, 198, 215, 232, 235, 236, 251, 548, 550, 553, 563, 569, 578, 581], "varient": [194, 232], "onnxrtdataload": [194, 232], "pytorchdataload": [195, 233], "data_sourc": [196, 234], "__iter__": [196, 200, 204, 209, 234, 238, 242, 247, 546, 547], "matter": [196, 234, 574], "iterablesampl": [196, 234], "squential": [196, 234], "iterabledataset": [196, 199, 200, 202, 203, 204, 209, 234, 237, 238, 240, 241, 242, 247], "indexdataset": [196, 234], "__getitem__": [196, 200, 204, 209, 212, 215, 234, 238, 242, 247, 249, 251, 546, 547, 548], "__len__": [196, 200, 204, 209, 234, 238, 242, 247, 547, 548], "inter": [196, 200, 204, 209, 234, 238, 242, 247], "retriev": [196, 234, 510], "sequentialsampl": [196, 234], "batchsampl": [196, 234], "tfdatadataload": [197, 235], "tensorflow1": [197, 235], "coupl": [197, 235], "satisfi": [197, 235, 561], "tf1": [197, 235, 565], "although": [197, 235, 576], "tensorflowbertdataload": [197, 235], "tensorflowmodelzoobertdataload": [197, 235], "zoo": [197, 215, 235, 251, 581], "tensorflowdataload": [197, 235, 494], "directli": [197, 235, 262, 266, 294, 304, 308, 555, 563, 572, 573, 577], "pytorchbertdataset": [198, 236], "model_typ": [198, 236, 416, 446, 548], "tensordataset": [198, 236, 548], "link": [198, 236, 545, 548, 581], "huggingfac": [198, 236, 548], "easi": [198, 236, 258, 298, 545, 547, 555, 571, 573, 576], "squad": [198, 215, 236, 251, 263, 264, 266, 305, 306, 308, 548, 563, 578, 581], "xlnet": [198, 236, 548], "xlm": [198, 236, 548, 581], "101": [198, 236, 266, 308, 563, 581], "2043": [198, 236], "2001": [198, 236], "preprocess": [198, 209, 212, 215, 236, 247, 249, 251, 252, 258, 280, 547, 552, 578], "onnxrtbertdataset": [198, 236], "data_dir": [198, 236, 548], "model_name_or_path": [198, 236, 548], "max_seq_length": [198, 215, 236, 251, 548, 578], "128": [198, 201, 202, 215, 236, 239, 240, 251, 548, 573, 578, 581], "do_lower_cas": [198, 214, 215, 236, 250, 251, 548, 578], "mrpc": [198, 236, 266, 308, 548, 563, 581], "dynamic_length": [198, 236, 548], "shortcut": [198, 236, 548], "truncat": [198, 215, 236, 251, 548, 578], "shorter": [198, 215, 236, 251, 548, 578], "lowercas": [198, 236, 548], "qqp": [198, 236, 548, 563, 581], "qnli": [198, 236, 548, 563, 581], "rte": [198, 236, 548, 563, 581], "st": [198, 236, 548, 563], "cola": [198, 236, 548, 563, 581], "mnli": [198, 236, 548, 563, 581], "wnli": [198, 236, 548, 563, 581], "mobilebert": [198, 236, 548, 550, 581], "roberta": [198, 236, 548, 581], "uncas": [198, 215, 236, 251, 548, 578, 581], "load_and_cache_exampl": [198, 236], "convert_examples_to_featur": [198, 215, 236, 251], "max_length": [198, 236], "label_list": [198, 236, 266, 308], "output_mod": [198, 236], "pad_token": [198, 236], "pad_token_segment_id": [198, 236], "mask_padding_with_zero": [198, 236], "inputfeatur": [198, 215, 236, 251], "input_id": [198, 215, 236, 251, 550, 569], "vocabulari": [198, 214, 215, 236, 250, 251, 280, 578], "attention_mask": [198, 236, 569], "mask": [198, 236, 262, 278, 280, 289, 293, 295, 297, 304, 318, 323, 330, 333, 569, 570, 581], "NOT": [198, 236, 557], "token_type_id": [198, 236, 569], "segment": [198, 236, 260, 262, 302, 304], "portion": [198, 236], "problem": [198, 236, 266, 273, 308, 563, 564], "regress": [198, 236], "seq_length": [198, 236], "to_json_str": [198, 236], "json": [198, 199, 215, 236, 237, 251, 371, 489, 491, 499, 506, 516, 548, 565, 578], "tensorflowbertdataset": [198, 236], "root": [198, 199, 200, 203, 236, 237, 238, 241, 266, 272, 308, 310, 311, 312, 314, 316, 317, 318, 351, 533, 546, 547, 548, 552, 563, 580], "label_fil": [198, 215, 236, 251, 548, 578], "tfrecord": [198, 199, 200, 204, 209, 236, 237, 238, 242, 247, 548], "parsedecodebert": [198, 236], "tensorflowmodelzoobertdataset": [198, 199, 236, 237], "num_cor": [198, 199, 203, 236, 237, 241, 548], "28": [198, 199, 203, 236, 237, 241, 548, 581], "resiz": [198, 199, 211, 215, 236, 237, 248, 251, 546, 547, 548, 578], "coco": [199, 206, 210, 237, 244, 262, 266, 304, 308, 563], "parsedecodecoco": [199, 237], "cocorecorddataset": [199, 237], "directori": [199, 200, 237, 238, 317, 360, 361, 425, 478, 499, 516, 529, 548, 552, 556, 577], "interleav": [199, 237, 548], "parallel": [199, 237, 548, 569], "cocoraw": [199, 237, 548], "img_dir": [199, 237, 548], "val2017": [199, 237, 548], "anno_dir": [199, 237, 548], "annot": [199, 237, 262, 304, 548, 563], "instances_val2017": [199, 237, 548], "arrang": [199, 200, 203, 237, 238, 241, 330, 548, 569], "jpg": [199, 203, 205, 237, 241, 243, 548], "coconpi": [199, 237, 548], "npy_dir": [199, 237, 548], "npy": [199, 237, 548], "tensorflowdataset": [200, 238], "pytorchdataset": [200, 238], "mxnetdataset": [200, 238], "onnxrtqldataset": [200, 238], "onnxrtitdataset": [200, 238], "IT": [200, 207, 238, 245], "pytorchmxnetwrapdataset": [200, 238], "datafunc": [200, 238], "pytorchmxnetwrapfunct": [200, 215, 238, 251], "framework_dataset": [200, 238], "convent": [200, 238, 262, 304, 550], "imageclassifi": [200, 238], "choos": [200, 238, 345, 545, 560, 575, 579, 580], "tensorflow_itex": [200, 203, 204, 205, 207, 208, 209, 238, 241, 242, 243, 245, 246, 247, 572], "onnxrt_qdq": [200, 204, 207, 208, 209, 238, 242, 245, 246, 247, 572], "onnxrt_qlinearop": [200, 204, 207, 208, 209, 215, 238, 242, 245, 246, 247, 251, 572], "onnxrt_integerop": [200, 204, 207, 208, 209, 215, 238, 242, 245, 246, 247, 251, 553, 572], "pytorch_ipex": [200, 204, 207, 208, 209, 238, 242, 245, 246, 247, 572, 580], "pytorch_fx": [200, 204, 207, 208, 209, 238, 242, 245, 246, 247, 572], "onnxrt_qoper": [200, 204, 207, 208, 209, 238, 242, 245, 246, 247, 572], "dataset_registri": [200, 204, 209, 238, 242, 247], "dataset_typ": [200, 204, 209, 238, 242, 247, 257, 258, 268, 298, 384], "dataset_format": [200, 204, 209, 238, 242, 247], "data_format": [200, 204, 209, 211, 238, 242, 247, 248], "raw_imag": [200, 204, 209, 238, 242, 247], "overwrit": [200, 204, 209, 238, 242, 247], "download_url": [200, 238], "filenam": [200, 238, 272, 361, 362, 462, 478, 485, 491, 501, 509, 548], "md5": [200, 238], "download": [200, 238, 437, 460, 461, 463, 464, 497, 545, 548, 561, 575], "gen_bar_updat": [200, 238], "progress": [200, 238, 297, 323, 330, 333, 570], "bar": [200, 238, 545], "check_integr": [200, 238], "fpath": [200, 238], "checksum": [200, 238], "calculate_md5": [200, 238], "chunk_siz": [200, 238], "cifar10": [200, 238, 548], "cifar100": [200, 238, 548], "www": [200, 238, 548, 581], "toronto": [200, 238, 548], "edu": [200, 238, 548], "kriz": [200, 238, 548], "cifar": [200, 238, 548, 581], "tar": [200, 238, 548], "gz": [200, 238, 548], "subset": [200, 203, 238, 241, 548], "internet": [200, 238, 545, 548], "put": [200, 238, 548, 550, 569], "again": [200, 238, 548, 574], "load_meta": [200, 238], "meta": [200, 238], "pytorchcifar10": [200, 238], "mxnetcifar10": [200, 238], "tensorflowcifar10": [200, 238], "pytorchcifar100": [200, 238], "mxnetcifar100": [200, 238], "tensorflowcifar100": [200, 238], "mnist": [200, 238, 548, 552], "institut": [200, 238], "standard": [200, 215, 238, 251, 555, 563, 578, 579], "fashionmnist": [200, 238, 548], "npz": [200, 238, 548], "idx1": [200, 238, 548], "ubyt": [200, 238, 548], "idx3": [200, 238, 548], "t10k": [200, 238, 548], "class_to_idx": [200, 238], "read_data": [200, 238], "pytorchmnist": [200, 238], "mxnetmnist": [200, 238], "tensorflowmnist": [200, 238], "pytorchfashionmnist": [200, 238], "mxnetfashionmnist": [200, 238], "tensorflowfashionmnist": [200, 238], "imagefold": [200, 238, 546, 547, 548, 552], "subfold": [200, 238], "belong": [200, 238, 255, 313, 573], "class_1": [200, 238, 548], "png": [200, 238, 548], "xxy": [200, 238, 548], "xxz": [200, 238, 548], "class_n": [200, 238, 548], "123": [200, 238, 548, 578], "nsdf3": [200, 238, 548], "asd932_": [200, 238, 548], "mxnetimagefold": [200, 238], "tensorflowimagefold": [200, 238], "tensorflowtfrecorddataset": [200, 238], "tensorflowimagerecord": [200, 238], "000": [200, 238, 548], "001": [200, 238, 548, 552, 580], "099": [200, 238, 548], "tensorflowvocrecord": [200, 238], "pascal": [200, 238], "voc": [200, 238, 266, 308], "2012": [200, 238], "00000": [200, 238], "00004": [200, 238], "00001": [200, 238], "00003": [200, 238], "dummydataset": [201, 202, 239, 240], "127": [201, 202, 239, 240, 548, 573, 581], "stand_norm": [201, 202, 239, 240, 548], "dummy_v2": [202, 240, 548], "sparse_dummy_v2": [202, 240, 548], "label_shap": [202, 240, 548], "sparsedummydataset": [202, 240], "dense_shap": [202, 240, 548], "sparse_ratio": [202, 240, 548], "imagenetraw": [203, 241, 548], "data_path": [203, 241, 548], "image_list": [203, 241, 548], "img1": [203, 241, 548], "img2": [203, 241, 548], "imgx": [203, 241, 548], "val_map": [203, 241, 548], "pytorchimagenetraw": [203, 241], "mxnetimagenetraw": [203, 241], "tensorflowimagenetraw": [203, 241], "inteltensorflow": [203, 205, 241, 243], "tensorflowimagenetdataset": [203, 241], "onnxrtimagenetdataset": [203, 241], "bert_dataset": [204, 209, 242, 247, 258, 300], "coco_dataset": [204, 209, 242, 247, 258, 300], "dummy_dataset": [204, 209, 242, 247, 258, 300], "dummy_dataset_v2": [204, 209, 242, 247, 258, 300], "imagenet_dataset": [204, 209, 242, 247, 258, 300], "style_transfer_dataset": [204, 209, 242, 247, 258, 300], "transfer": [205, 243, 252, 258, 548, 550, 551], "styletransferdataset": [205, 243], "content_fold": [205, 243, 548], "style_fold": [205, 243, 548], "crop_ratio": [205, 243, 548], "resize_shap": [205, 243, 548], "image_format": [205, 243, 548], "holder": [205, 243, 548], "labelbalancecocorecordfilt": [206, 244], "balanc": [206, 244, 568], "labelbalancecocorawfilt": [206, 244], "tensorflowfilt": [207, 245], "onnxrtqlfilt": [207, 245], "onnxrtitfilt": [207, 245], "pytorchfilt": [207, 245], "mxnetfilt": [207, 245], "filter_registri": [207, 208, 209, 245, 246, 247], "filter_typ": [207, 208, 209, 245, 246, 247], "__call__": [207, 208, 209, 245, 246, 247, 547], "coco_filt": [208, 209, 246, 247, 258, 300], "imagenet_transform": [209, 212, 247, 249, 258, 300], "transform_cl": [209, 212, 215, 247, 249, 251], "basetransform": [209, 210, 211, 212, 215, 247, 248, 249, 251], "transform_registri": [209, 212, 215, 247, 249, 251], "transform_typ": [209, 212, 215, 247, 249, 251], "postprocess_cl": [209, 212, 213, 219, 223, 546], "user_postprocess": [209, 212, 213, 219, 223], "parsedecodecocotransform": 210, "quantizedinput": [211, 248, 578], "desir": [211, 215, 248, 251, 280, 578], "labelshift": [211, 248, 519, 578], "label_shift": [211, 248, 578], "parsedecodeimagenet": [211, 248, 578], "proto": [211, 215, 248, 251, 578], "parsedecodeimagenettransform": [211, 248], "tensorflowresizecropimagenettransform": [211, 248], "height": [211, 215, 248, 251, 274, 293, 323, 552, 569, 578, 580], "random_crop": [211, 248, 578], "resize_sid": [211, 248, 578], "resize_method": [211, 248], "bilinear": [211, 215, 248, 251, 578], "random_flip_left_right": [211, 248, 578], "mean_valu": [211, 248, 578], "channels_last": [211, 248], "subpixel": [211, 248], "rgb": [211, 248], "applic": [211, 248, 500, 529, 531, 533, 545, 555, 571, 577, 578], "crop": [211, 215, 248, 251, 548, 578], "flip": [211, 215, 248, 251, 578], "left": [211, 215, 248, 251, 323, 545, 578], "std": [211, 215, 248, 251, 274, 546, 547, 578], "bilinearimagenettransform": [211, 248], "central_fract": [211, 248, 578], "875": [211, 248, 578], "fraction": [211, 248, 578], "onnxbilinearimagenettransform": [211, 248], "onnxresizecropimagenettransform": [211, 248], "std_valu": [211, 248], "229": [211, 248, 546, 547], "225": [211, 248, 546, 547], "resizewithaspectratio": [211, 248], "87": [211, 248, 581], "inter_pol": [211, 248], "cv2": [211, 248], "inter_area": [211, 248], "aspect": [211, 215, 248, 251, 578], "convert_to_unicod": [214, 250], "unicod": [214, 250, 259, 301], "utf": [214, 250], "load_vocab": [214, 250], "vocab_fil": [214, 215, 250, 251, 578], "convert_by_vocab": [214, 250], "vocab": [214, 250, 280], "whitespace_token": [214, 250], "whitespac": [214, 250, 264, 306], "fulltoken": [214, 250], "tokenzi": [214, 250], "convert_tokens_to_id": [214, 250], "convert_ids_to_token": [214, 250], "basictoken": [214, 250], "punctuat": [214, 250, 259, 264, 301, 306], "wordpiecetoken": [214, 250], "unk_token": [214, 250], "unk": [214, 250], "max_input_chars_per_word": [214, 250], "wordpiec": [214, 215, 250, 251, 578], "greedi": [214, 250], "longest": [214, 215, 250, 251, 578], "unaff": [214, 250], "un": [214, 250], "aff": [214, 250], "concat_gener": [215, 251], "tensorflowtransform": [215, 251], "mxnettransform": [215, 251], "pytorchtransform": [215, 251], "onnxrtqltransform": [215, 251], "onnxrtittransform": [215, 251], "tensorflowwrapfunct": [215, 251], "transform_func": [215, 251], "pytorchmxnettransform": [215, 251], "get_torchvision_map": [215, 251], "interpol": [215, 251, 330, 563, 570, 578], "torchvis": [215, 251, 274], "composetransform": [215, 251], "transform_list": [215, 251, 578], "croptoboundingbox": [215, 251, 578], "offset_height": [215, 251, 578], "offset_width": [215, 251, 578], "target_height": [215, 251, 578], "target_width": [215, 251, 578], "vertic": [215, 251, 293, 323, 578], "coordin": [215, 251, 338, 578], "horizont": [215, 251, 578], "mxnetcroptoboundingbox": [215, 251], "onnxrtcroptoboundingbox": [215, 251], "tensorflowcroptoboundingbox": [215, 251], "resizewithratio": [215, 251, 578], "min_dim": [215, 251, 578], "800": [215, 251, 578], "max_dim": [215, 251, 578], "1365": [215, 251, 578], "constant_valu": [215, 251], "side": [215, 251, 280, 545, 548, 578], "exce": [215, 251, 578], "tensorflowresizewithratio": [215, 251], "transpos": [215, 251, 293, 323, 578], "perm": [215, 251, 578], "permut": [215, 251, 323, 578], "tensorflowtranspos": [215, 251], "mxnettranspos": [215, 251], "pytorchtranspos": [215, 251], "randomverticalflip": [215, 251, 578], "tensorflowrandomverticalflip": [215, 251], "randomhorizontalflip": [215, 251, 547, 578], "tensorflowrandomhorizontalflip": [215, 251], "toarrai": [215, 251, 578], "pil": [215, 251, 578], "casttftransform": [215, 251], "castonnxtransform": [215, 251], "castpytorchtransform": [215, 251], "centercroptftransform": [215, 251], "paddedcentercroptransform": [215, 251], "crop_pad": [215, 251], "resizetftransform": [215, 251], "nearest": [215, 251, 578], "bicub": [215, 251, 578], "resizepytorchtransform": [215, 251], "randomcroptftransform": [215, 251], "locat": [215, 251, 546, 552, 573, 575, 578, 580], "randomresizedcroppytorchtransform": [215, 251], "randomresizedcropmxnettransform": [215, 251], "randomresizedcroptftransform": [215, 251], "get_param": [215, 251], "pramet": [215, 251], "normalizetftransform": [215, 251], "rescal": [215, 251, 578], "deviat": [215, 251, 578], "broadcast": [215, 251, 552, 578], "rescalekeraspretraintransform": [215, 251], "rescaletftransform": [215, 251], "rescaletransform": [215, 251], "alignimagechanneltransform": [215, 251], "dim": [215, 251, 288, 323, 338, 578], "w": [215, 251, 274, 569, 570, 578], "pytorchalignimagechannel": [215, 251], "tondarraytransform": [215, 251], "resizemxnettransform": [215, 251], "resizetransform": [215, 251], "cropresizetftransform": [215, 251], "y": [215, 251, 338, 578], "boundari": [215, 251, 414, 578], "area": [215, 251, 262, 304, 563, 578], "pytorchcropresizetransform": [215, 251], "mxnetcropresizetransform": [215, 251], "cropresizetransform": [215, 251], "centercroptransform": [215, 251], "mxnetnormalizetransform": [215, 251], "pytorchnormalizetransform": [215, 251], "normalizetransform": [215, 251], "randomcroptransform": [215, 251], "randomresizedcroptransform": [215, 251], "get_final_text": [215, 251], "pred_text": [215, 251], "orig_text": [215, 251], "squadexampl": [215, 251], "qas_id": [215, 251], "question_text": [215, 251], "doc_token": [215, 251], "orig_answer_text": [215, 251], "start_posit": [215, 251], "end_posit": [215, 251], "is_imposs": [215, 251], "unique_id": [215, 251], "example_index": [215, 251], "doc_span_index": [215, 251], "token_to_orig_map": [215, 251], "token_is_max_context": [215, 251], "input_mask": [215, 251, 330, 550], "segment_id": [215, 251, 550], "read_squad_exampl": [215, 251], "input_fil": [215, 251], "doc_strid": [215, 251, 578], "max_query_length": [215, 251, 578], "output_fn": [215, 251], "inputbatch": [215, 251], "collecttransform": [215, 251], "10833": [215, 251], "tfsquadv1posttransform": [215, 251], "n_best_siz": [215, 251, 578], "384": [215, 251, 578], "max_answer_length": [215, 251, 578], "total": [215, 251, 266, 295, 297, 308, 317, 318, 319, 323, 330, 333, 339, 548, 578], "nbest_predict": [215, 251, 578], "long": [215, 251, 556, 578], "chunk": [215, 251, 578], "much": [215, 251, 252, 258, 320, 550, 553, 569, 570, 578], "process_result": [215, 251], "get_postprocess_result": [215, 251], "tfmodelzoocollecttransform": [215, 251], "tfsquadv1modelzooposttransform": [215, 251], "squadv1": [215, 251, 578], "parsedecodevoctransform": [215, 251], "set_env_var": 216, "env_var": 216, "overwrite_exist": 216, "env": [216, 501, 509], "set_all_env_var": 216, "core": [216, 258, 273, 381, 545, 562, 568, 581], "get_architectur": 216, "get_threads_per_cor": 216, "thread": [216, 532, 545, 547, 568], "get_thread": 216, "get_physical_id": 216, "socket": [216, 504, 533, 568, 581], "get_core_id": 216, "get_bounded_thread": 216, "core_id": 216, "bind": 216, "command": [216, 258, 280, 381, 392, 395, 402, 408, 410, 411, 478, 501, 509, 529, 545, 552], "possibl": [216, 258, 271, 336, 340, 378, 445, 545, 553, 567, 574, 579], "unnecessari": [216, 258], "summary_benchmark": [216, 258], "config_inst": [216, 258], "generate_prefix": [216, 258], "core_list": [216, 258], "numactl": [216, 258], "run_inst": [216, 258], "critet": 217, "tensorflowcrossentropyloss": 217, "pytorchcrossentropyloss": 217, "tensorflowknowledgedistillationloss": 217, "pytorchknowledgedistillationloss": [217, 550], "pytorchintermediatelayersknowledgedistillationloss": 217, "tensorflowcriterion": 217, "pytorchcriterion": 217, "criterion_cl": 217, "criterion_registri": 217, "criterion_typ": 217, "registry_criterion": 217, "param_dict": [217, 222, 271], "crossentropyloss": 217, "tensorflowsparsecategoricalcrossentropi": 217, "sparsecategoricalcrossentropyloss": 217, "knowledgedistillationframework": 217, "student_model": [217, 252, 258, 550], "knowledgedistillationloss": [217, 580], "temperatur": [217, 580], "loss_typ": [217, 580], "ce": [217, 580], "loss_weight": [217, 580], "teacher_model_forward": 217, "notimplementederror": [217, 265, 266, 307, 308], "teacher_student_loss_c": 217, "student_output": [217, 225, 258, 550], "teacher_output": [217, 225, 252, 258], "student_targets_loss_c": 217, "groud": 217, "truth": [217, 263, 264, 305, 306], "loss_cal": 217, "loss_cal_sloss": 217, "student_loss": [217, 225, 258, 550], "softcrossentropi": 217, "logit": [217, 550], "ground": [217, 263, 264, 305, 306], "kullbackleiblerdiverg": 217, "pytorchknowledgedistillationlosswrapp": 217, "tensorflowknowledgedistillationlosswrapp": 217, "tensorflowknowledgedistillationlossextern": 217, "intermediatelayersknowledgedistillationloss": [217, 524], "layer_map": 217, "add_origin_loss": 217, "init_loss_func": 217, "init_feature_match": 217, "student_featur": 217, "teacher_featur": 217, "matcher": 217, "clear_featur": 217, "register_hooks_for_model": 217, "attributeerror": 217, "remove_all_hook": 217, "pytorch_linear_feature_match": 217, "pytorchintermediatelayersknowledgedistillationlosswrapp": 217, "selfknowledgedistillationloss": [217, 524], "selfknowledg": 217, "pytorchselfknowledgedistillationloss": 217, "l2diverg": 217, "feature1": 217, "feature2": 217, "pytorchselfknowledgedistillationlosswrapp": 217, "setter": [218, 219], "torch_util": [219, 258, 300], "metric_cl": [219, 220, 265, 266, 307, 308, 546], "user_metr": [219, 220, 307, 308], "alwai": [219, 220, 262, 304, 307, 308, 546, 563, 569], "tensorflowoptim": 222, "pytorchoptim": 222, "optimizer_cl": 222, "optimizer_registri": 222, "optimizer_typ": 222, "cross": [222, 265, 266, 307, 308, 558, 579], "tensorflowsgd": 222, "tensorflowadamw": 222, "tensorflow_addon": 222, "adamw": 222, "tensorflowadam": 222, "adam": [222, 580], "pytorchsgd": 222, "util": [224, 253, 258, 260, 294, 300, 302, 321, 342, 344, 366, 367, 368, 370, 372, 373, 376, 381, 392, 395, 398, 402, 403, 408, 410, 411, 413, 421, 422, 427, 429, 430, 433, 437, 443, 444, 452, 454, 478, 484, 488, 493, 497, 530, 552, 569, 573, 579], "record_output": 224, "output_process": 224, "get_activ": 224, "mainli": [225, 258, 297, 323, 333, 570, 573], "train_func": [225, 258, 299, 550, 552, 569], "train_dataload": [225, 258, 550, 569], "pre_process": [225, 252, 258, 269, 281, 285, 290, 298, 552], "post_process": [225, 258], "Be": [225, 258, 262, 304], "on_train_end": [225, 258, 285, 290, 295, 296, 330, 331, 351], "pre_epoch_begin": [225, 258, 285, 290], "post_epoch_end": [225, 258, 285, 290], "on_epoch_begin": [225, 258, 285, 290, 295, 296, 330, 331, 351, 354, 569], "on_step_begin": [225, 258, 285, 290, 295, 296, 320, 330, 331, 354, 569], "batch_id": [225, 258], "on_batch_begin": [225, 258, 285, 290], "on_after_compute_loss": [225, 258, 285, 290, 351, 550], "on_before_optimizer_step": [225, 258, 295, 296, 330, 331, 332, 351, 569], "on_after_optimizer_step": [225, 258, 295, 296, 320, 330, 331, 332], "on_before_ev": [225, 258, 295, 296, 330, 331], "on_after_ev": [225, 258, 295, 296, 330, 331], "on_post_grad": [225, 258], "on_step_end": [225, 258, 285, 290, 295, 296, 330, 331, 351, 354, 569], "on_batch_end": [225, 258, 285, 290], "on_epoch_end": [225, 258, 285, 290, 295, 296, 330, 331, 351, 354, 550, 569], "register_hook": [225, 258], "input_arg": [225, 258], "input_kwarg": [225, 258], "_epoch_ran": [252, 258], "ran": [252, 258], "eval_frequ": [252, 258], "frequenc": [252, 258, 295, 330, 568, 580], "best_scor": [252, 258], "best_model": [252, 258], "train_cfg": [252, 258, 354], "evaluation_distribut": [252, 258, 285, 290], "train_distribut": [252, 258, 285, 290], "on_post_forward": [252, 258], "init_train_cfg": [252, 258], "create_criterion": [252, 258], "create_optim": [252, 258], "disil": [252, 258], "generate_hook": [252, 258, 285, 290], "qlinear2qdq": [253, 258, 300], "torch2onnx": [253, 258, 300], "torch_to_fp32_onnx": [253, 255], "opset_vers": [253, 255, 555], "dynamic_ax": [253, 255, 555], "input_nam": [253, 255, 318, 555], "do_constant_fold": [253, 255], "verbos": [253, 255, 271, 272, 273, 338], "opset": [253, 255], "ax": [253, 255], "torch_to_int8_onnx": [253, 255], "quant_format": [253, 255, 555], "u8s8": [253, 255], "qdq_op_fp32_bia": [253, 255, 555], "optionl": [253, 255], "qdq_op_int32_bia": [253, 255, 555], "qdq_op_fp32_bias_qdq": [253, 255, 555], "onnx_qlinear_to_qdq": [253, 254], "input_name_to_nod": [253, 254], "qlinearop": [253, 254, 560, 573], "check_model": 254, "update_weight_bia": 255, "fp32_onnx_path": [255, 256], "wegiht": 255, "set_data_typ": 255, "weight_typ": 255, "activation_typ": 255, "get_node_map": 255, "module_node_map": 255, "get_quantizable_onnx_op": 255, "quantize_nod": 255, "build_scale_map": 255, "int8_scale_info": 255, "scale_zp_dict": 255, "set_scale_info": 255, "int8_onnx_model": 255, "int8_onnx_path": 255, "recalculate_bia": 255, "recalcul": [255, 323], "remove_nodes_by_nam": 255, "sub_graph_with_int32_bia": 255, "a_info": 255, "b_info": 255, "bias_nam": 255, "nodeproto": 255, "_type_": 255, "qdq_fp32_bia": 255, "excut": 255, "qdq_int32_bia": 255, "qdq_fp32_bias_qdq": 255, "onnx2numpy_dtyp": 256, "onnx_node_typ": 256, "dummydataread": 256, "ortq": 256, "dataread": 256, "get_next": 256, "variou": [257, 258, 267, 298, 560, 570, 572], "dl": [257, 258, 267, 285, 290, 298, 558, 571], "bring": [257, 258, 298, 573], "vari": [257, 258, 285, 290, 298, 568, 581], "roc": [257, 258, 266, 285, 290, 298, 308], "footprint": [257, 258, 285, 290, 298, 319, 551, 566, 569, 570, 572], "flexibl": [257, 258, 285, 290, 298, 546, 550, 569, 570], "set_config_by_model": [257, 258, 267], "model_obj": [257, 258, 267], "export": [258, 262, 300, 304, 310, 311, 312, 316, 318, 351, 516, 577], "bleu": [258, 260, 265, 279, 300, 302, 307, 563], "bleu_util": [258, 265, 300, 307], "coco_label_map": [258, 265, 300, 307], "coco_tool": [258, 265, 300, 307], "evaluate_squad": [258, 265, 300, 307], "dynast": [258, 281, 300], "supernetwork": [258, 271, 274, 275, 281], "dynas_manag": [258, 274, 275, 281], "dynas_predictor": [258, 274, 275, 281], "dynas_search": [258, 275, 281], "dynas_util": [258, 273, 275, 281], "basic_na": [258, 281, 300], "nas_util": [258, 281, 300], "pruning_recip": [258, 300], "tile_pattern": [258, 286, 287], "pytorch_prun": [258, 300, 331], "logger": [258, 291, 300, 321, 352, 355, 497, 501, 505], "prune_util": [258, 291, 300], "pruner": [258, 285, 290, 291, 293, 296, 300, 524, 527, 580], "graph_optim": [258, 267, 300, 368, 437, 472, 476, 477, 497, 505, 521], "mixed_precis": [258, 300, 370, 437, 472, 497, 505, 521], "model_convers": [258, 300], "pruning_v2": [258, 300], "quantconf": [258, 298, 335], "qfunc": [258, 298], "routinu": [258, 298], "pruningconf": [258, 285, 290], "pruning_func": [258, 285, 290, 569], "update_items_for_all_prun": [258, 285, 296], "howev": [258, 285, 290, 296, 331, 555, 569], "analys": [258, 285, 290, 296], "generate_prun": [258, 285, 290], "dens": [258, 285, 290, 297, 333, 569, 570, 581], "spars": [258, 285, 290, 295, 330, 548, 569, 570, 571], "get_sparsity_ratio": [258, 285, 290, 293, 296, 323, 331], "elementwise_over_matmul_gemm_conv": [258, 285, 290, 296, 331], "elementwise_over_al": [258, 285, 290, 296, 331], "blockwise_over_matmul_gemm_conv": [258, 285, 290, 296, 331], "graphoptim": [258, 267, 368, 469, 520], "modelconvers": [258, 268], "unicoderegex": [259, 301], "hoc": [259, 301], "hack": [259, 301], "recogn": [259, 301], "nondigit_punct_r": [259, 301], "compil": [259, 301, 568], "preced": [259, 301], "punct_nondigit_r": [259, 301], "symbol_r": [259, 301], "property_char": [259, 301], "join": [259, 301], "bleu_token": [259, 301], "mose": [259, 301], "smt": [259, 301], "mosesdecod": [259, 301], "mteval": [259, 301], "v14": [259, 301], "pl": [259, 301], "l954": [259, 301], "l983": [259, 301], "tensor2tensor": [260, 280, 302], "bleu_hook": [260, 302], "compute_bleu": [260, 279, 302], "reference_corpu": [260, 302], "translation_corpu": [260, 302], "max_ord": [260, 302], "use_bp": [260, 302], "against": [260, 302], "gram": [260, 302], "flag": [260, 302, 351, 526], "third": [262, 304, 547], "parti": [262, 304, 573], "pycocotool": [262, 304, 556, 561], "object_detect": [262, 304], "noth": [262, 304, 509, 579], "jonathanhuang": [262, 304], "image_id": [262, 304, 563], "encod": [262, 271, 280, 304, 578], "groundtruth": [262, 304], "invok": [262, 304], "groundtruth_dict": [262, 304], "exportgroundtruthtococo": [262, 304], "groundtruth_boxes_list": [262, 304], "groundtruth_classes_list": [262, 304], "max_num_class": [262, 304], "output_path": [262, 304, 316, 509, 564], "detections_list": [262, 304], "exportdetectionstococo": [262, 304], "detection_boxes_list": [262, 304], "detection_scores_list": [262, 304], "detection_classes_list": [262, 304], "cocowrapp": [262, 304], "loadannot": [262, 304], "cocoevalwrapp": [262, 304], "agnostic_mod": [262, 304], "computemetr": [262, 304], "detection_typ": [262, 304], "hold": [262, 304, 338, 547], "datastructur": [262, 304], "mscoco": [262, 304], "replic": [262, 304], "extern": [262, 304, 316, 545], "category_id": [262, 304], "iou_typ": [262, 304], "iou_thr": [262, 266, 304, 308, 563], "map_point": [262, 266, 304, 308, 563], "cocoev": [262, 304], "Then": [262, 304, 545, 579], "getcategori": [262, 304], "getagnosticmod": [262, 304], "agnost": [262, 304, 550], "getcategoryidlist": [262, 304], "accumul": [262, 304, 337, 579], "include_metrics_per_categori": [262, 304], "all_metrics_per_categori": [262, 304], "summeri": [262, 304], "per_category_ap": [262, 304], "care": [262, 304], "pollut": [262, 304], "mldash": [262, 304], "summary_metr": [262, 304], "iou": [262, 266, 304, 308], "increment": [262, 278, 280, 304, 579], "50iou": [262, 304], "75iou": [262, 304], "75": [262, 304, 581], "pixel": [262, 304, 578], "medium": [262, 304], "larg": [262, 304, 547, 550, 569, 570, 581], "10000": [262, 304, 338], "recal": [262, 264, 266, 304, 306, 308], "bycategori": [262, 304], "supercategori": [262, 304], "performancebycategori": [262, 304], "category_stat": [262, 304], "exportsingleimagegroundtruthtococo": [262, 304], "next_annotation_id": [262, 304], "category_id_set": [262, 304], "groundtruth_box": [262, 304], "groundtruth_class": [262, 304], "groundtruth_mask": [262, 304], "groundtruth_is_crowd": [262, 304], "ingest": [262, 304], "ones": [262, 304, 570], "exportsingleimagedetectionstococo": [262, 304], "uniqu": [262, 274, 299, 304, 338, 403, 404, 573], "assign": [262, 304, 361, 402, 403, 408, 409, 410, 411, 545, 552, 564, 572], "num_gt_box": [262, 304], "num_detect": [262, 266, 304, 308, 563, 580], "image_height": [262, 304], "image_width": [262, 304], "detection_mask": [262, 304], "crowd": [262, 304], "insid": [262, 304, 550, 569, 579], "exportsingleimagedetectionboxestococo": [262, 304], "detection_box": [262, 304, 580], "detection_scor": [262, 304, 580], "detection_class": [262, 304, 580], "exporsingleimagedetectionboxestococo": [262, 304], "exportsingleimagedetectionmaskstococo": [262, 304], "allenai": [263, 264, 305, 306], "bi": [263, 264, 305, 306], "att": [263, 264, 305, 306], "f1_score": [263, 264, 305, 306], "ground_truth": [263, 264, 305, 306], "metric_max_over_ground_truth": [263, 264, 305, 306], "metric_fn": [263, 264, 305, 306], "exact_match_scor": [263, 305], "exact": [263, 305], "articl": [263, 264, 305, 306], "paragraph": [263, 264, 305, 306], "qa": [263, 264, 305, 306], "cantain": [263, 264, 305, 306], "normalize_answ": [264, 306], "extra": [264, 306], "newlin": [264, 306], "tab": [264, 306, 405, 408, 414, 532, 577], "harmon": [264, 266, 306, 308], "answer_start": [264, 306], "177": [264, 306], "denver": [264, 306], "bronco": [264, 306], "nfl": [264, 306], "afc": [264, 306], "bowl": [264, 306], "56be4db0acb8001400a502ec": [264, 306], "percentag": [264, 272, 306, 580], "basemetr": [265, 266, 307, 308], "single_output": [265, 266, 307, 308], "hvd": [265, 266, 307, 308, 552], "sample_weight": [265, 266, 307, 308], "metric_registri": [265, 266, 307, 308], "metric_typ": [265, 266, 307, 308], "decorator_metr": [265, 266, 307, 308], "tensorflowmetr": [266, 308], "pytorchmetr": [266, 308], "mxnetmetr": [266, 308], "onnxrtqlmetr": [266, 308], "onnxrtitmetr": [266, 308], "wrappytorchmetr": [266, 308], "wrapmxnetmetr": [266, 308], "wraponnxrtmetr": [266, 308], "proport": [266, 308], "were": [266, 308], "pred_list": [266, 308], "pytorchloss": [266, 308], "least": [266, 296, 308, 323, 331, 510, 569, 570, 579], "mae": [266, 308, 563], "absolut": [266, 272, 308, 320, 509, 553, 563, 568, 569, 570, 573, 579], "magnitud": [266, 308, 320, 560, 569, 570, 581], "rmse": [266, 272, 308, 563, 579], "squar": [266, 272, 308, 343, 563, 579], "tensorflowtopk": [266, 308], "among": [266, 308], "most": [266, 308, 338, 545, 564, 569, 573, 579], "outcom": [266, 308], "num_correct": [266, 308], "generaltopk": [266, 308], "cocomapv2": [266, 308, 563], "anno_path": [266, 308, 563], "map_kei": [266, 308], "detectionboxes_precis": [266, 308], "output_index_map": [266, 308, 563], "tensorflowmap": [266, 308], "tensorflowcocomap": [266, 308], "tensorflowvocmap": [266, 308], "squadf1": [266, 308, 563], "miou": [266, 308], "21": [266, 308, 581], "hist": [266, 308, 355, 356], "onnxrtglu": [266, 308], "dlrm": [266, 308, 581], "basicna": [269, 281], "model_build": [269, 281, 282], "conf_fnam": [269, 281], "init_by_cfg": [269, 281], "init_for_search": [270, 281], "select_model_arch": [270, 281, 282], "create_acc_predictor": [270, 281], "create_macs_predictor": [270, 281], "create_latency_predictor": [270, 281], "latenc": [270, 271, 272, 274, 279, 281, 514, 576, 579], "init_cfg": [270, 281], "parametermanag": [271, 274], "hot": 271, "pymoo": [271, 273, 274], "process_param_dict": 271, "upper": [271, 273], "vector": [271, 282, 284], "onehot_gener": 271, "in_arrai": 271, "onehot": 271, "unus": [271, 280], "depth": [271, 550, 574], "input_arrai": 271, "elast": 271, "mapper": [271, 402, 465, 466], "random_sampl": [271, 338], "subnetwork": [271, 274], "trial_limit": 271, "100000": 271, "translate2param": 271, "pymoo_vector": 271, "translate2pymoo": 271, "import_csv": 271, "filepath": 271, "column_nam": 271, "drop_dupl": 271, "panda": 271, "datafram": [271, 317, 318], "purpos": [271, 557, 564, 572], "subnet": [271, 274], "column": [271, 545, 569, 570], "df": [271, 317, 318], "set_se": 271, "create_training_set": 271, "train_with_al": 271, "sklearn": 271, "transformerltencod": 271, "alpha": [272, 320, 332], "default_alpha": 272, "cost_factor": 272, "default_cost_factor": 272, "max_iter": 272, "default_max_iter": 272, "regressor": 272, "get_paramet": 272, "get_metr": [272, 378], "mape": 272, "kendal": 272, "rank": [272, 552], "correl": 272, "spearman": 272, "searcher": [272, 284], "searchalgomanag": 273, "optuna": 273, "configure_nsga2": 273, "warm_pop": 273, "crossover_prob": 273, "crossover_eta": 273, "mutation_prob": 273, "02": [273, 581], "mutation_eta": 273, "configure_ag": 273, "run_search": 273, "save_histori": 273, "previous": [273, 547], "problemmultiobject": 273, "evaluation_interfac": 273, "evaluationinterfac": [273, 274], "param_count": 273, "param_upperbound": 273, "ofa": [273, 274], "mani": [273, 274, 319, 336, 547, 561, 579, 580], "get_mac": 274, "input_s": 274, "measure_lat": 274, "warmup_step": 274, "measure_step": 274, "resolut": 274, "warm": [274, 319], "runner": 274, "ofarunn": 274, "acc_predictor": 274, "macs_predictor": 274, "latency_predictor": 274, "datasetpath": 274, "w1": 274, "estimate_accuracy_top1": 274, "subnet_cfg": 274, "estimate_mac": 274, "estimate_lat": 274, "validate_top1": 274, "validate_mac": 274, "flop": 274, "fvcore": 274, "get_subnet": 274, "transformerltrunn": 274, "checkpoint_path": [274, 279], "predictor_mod": 274, "csv_path": 274, "written": 274, "eval_subnet": 274, "clear_csv": 274, "evaluationinterfaceresnet50": 274, "evaluationinterfacemobilenetv3": 274, "evaluationinterfacetransformerlt": 274, "get_torchvision_model": 274, "torchvisionrefer": 274, "baselin": [274, 346, 576, 577], "machine_transl": [275, 276, 281], "transformer_interfac": [275, 276, 277], "get_incremental_st": 278, "incremental_st": [278, 280], "set_incremental_st": 278, "multiheadattentionsup": 278, "super_embed_dim": 278, "num_head": 278, "is_encod": 278, "super_kdim": 278, "super_vdim": 278, "add_bias_kv": [278, 280], "add_zero_attn": [278, 280], "self_attent": 278, "encoder_decoder_attent": 278, "out_dim": 278, "qkv_dim": 278, "head": [278, 280, 569], "key_padding_mask": 278, "need_weight": 278, "static_kv": 278, "attn_mask": [278, 280], "timestep": 278, "bytetensor": [278, 280], "src_len": [278, 280], "reorder_incremental_st": 278, "new_ord": [278, 280], "buffer": 278, "compute_lat": 279, "get_model_paramet": 279, "compute_mac": 279, "transformersupernetwork": 280, "fairseq": 280, "vaswani": 280, "2017": 280, "arxiv": [280, 295, 320], "1706": 280, "03762": 280, "transformerencod": 280, "transformerdecod": 280, "line": [280, 508, 509, 529, 545, 552, 560, 577], "encoder_config": 280, "embed_token": 280, "encoder_lay": 280, "transformerencoderlay": 280, "argpars": 280, "namespac": 280, "src_token": 280, "src_length": 280, "longtensor": 280, "sentenc": 280, "encoder_out": 280, "embed_dim": 280, "encoder_padding_mask": 280, "reorder_encoder_out": 280, "rearrang": 280, "max_posit": 280, "upgrade_state_dict_nam": 280, "upgrad": 280, "possibli": 280, "old": [280, 296, 361, 575], "decoder_config": 280, "no_encoder_attn": 280, "decoder_lay": 280, "transformerdecoderlay": 280, "attend": 280, "prev_output_token": 280, "tgt_len": 280, "forc": [280, 564, 574], "extract_featur": 280, "output_lay": 280, "layer_idx": 280, "paper": [280, 550, 569, 570], "ffn": 280, "robust": 280, "encoder_normalize_befor": 280, "layer_norm": 280, "self_attn_layer_norm": 280, "final_layer_norm": 280, "seq_len": 280, "t_tgt": 280, "t_src": 280, "decoder_normalize_befor": 280, "prev_self_attn_st": 280, "prev_attn_st": 280, "self_attn_mask": 280, "self_attn_padding_mask": 280, "builder": 282, "res_save_path": 282, "count_model_paramet": 282, "load_search_result": 282, "dump_search_result": 282, "params_vec2params_dict": [282, 284], "paras_vec": 282, "find_best_model_arch": 282, "metrics_convers": 282, "init_search_cfg": 282, "nas_registri": 283, "nas_method": 283, "create_search_space_pool": 283, "find_pareto_front": 283, "n_point": 283, "n_metric": 283, "n_pareto_point": 283, "get_feedback": 284, "feedback": 284, "para_vec": 284, "gridsearch": 284, "whole": [284, 531, 545, 553, 573, 581], "exhaust": [284, 300, 342, 572], "randomsearch": 284, "42": [284, 568, 581], "bayesianoptimizationsearch": 284, "indices2params_vec": 284, "tfpruningcallback": [285, 290], "input_model": [285, 290, 565, 577], "pure": [285, 290], "s_output": [285, 290], "s_loss": [285, 290], "t_output": [285, 290], "support_pattern": [286, 287, 288], "pattern_registri": 288, "pattern_typ": 288, "patternbas": [288, 289], "mask_shap": [288, 289], "is_contigu": 288, "compute_spars": [288, 289], "abs_sum": 288, "abs_max": 288, "tile": 289, "tilepatternbas": 289, "nxm": [289, 293, 323, 330, 570], "matrix": [289, 570], "repeat_mask": 289, "ori_shap": 289, "tilepattern_1x1": 289, "1x1": [289, 550], "unstructur": [289, 560, 569, 570, 581], "tilepattern_2x2": 289, "2x2": 289, "tilepattern_1x16": 289, "1x16": 289, "tilepattern_4x1": 289, "tilepattern_1x2": 289, "1x2": 289, "update_config": [290, 331], "register_pattern": [293, 323], "get_pattern": [293, 323], "assertionerror": [293, 294, 295, 323, 330, 334], "is_glob": [293, 323], "contrast": [293, 323, 578], "get_mask": [293, 323], "target_sparsity_ratio": [293, 295, 323, 330], "pre_mask": [293, 323], "max_sparsity_ratio_per_lay": [293, 295, 572], "get_masks_glob": [293, 323], "get_mask_singl": 293, "exact_sparsity_ratio": [293, 323], "get_block_size_dict": [293, 323], "get_masks_loc": [293, 323], "calul": [293, 323], "ration": [293, 323], "get_pattern_lock_mask": [293, 323], "lock": [293, 323, 560, 567, 569, 570], "patternnxm": [293, 323], "kept": [293, 323], "block_siz": [293, 323], "block_size_1": [293, 323], "block_size_2": [293, 323], "keep_pre_mask": [293, 323], "unchang": [293, 323], "patternninm": [293, 323], "doc": [293, 323, 563, 569], "md": [293, 323, 552], "check_config": [294, 334], "prune_config": [294, 334], "everyth": [294, 334], "reset_non_value_to_default": 294, "undefin": [294, 334], "process_and_check_config": [294, 334], "obejct": 294, "process_config": [294, 334], "parse_to_prun": [294, 334], "parse_not_to_prun": 294, "register_prun": [295, 330], "get_prun": [295, 330], "module_nam": [295, 297, 320, 330, 332, 333, 361, 516], "cuurent": [295, 330], "current_sparsity_ratio": [295, 330], "global_step": [295, 330], "update_frequency_on_step": [295, 572], "mask_weight": [295, 330], "formal": [295, 330], "local_step": [295, 296, 330, 331], "judg": 295, "check_is_pruned_step": [295, 330], "update_scor": 295, "magnitudeprun": 295, "snipprun": 295, "snip": [295, 320, 560, 569, 570, 581], "1810": [295, 320], "02340": [295, 320], "snipmomentumprun": 295, "moreoev": 295, "patternlockprun": [295, 330], "templat": [296, 300, 331, 384, 403, 408, 497, 505, 542, 545], "tree": [296, 331, 379, 408, 410], "nlp": [296, 331, 553, 569, 570, 573], "huggingface_model": [296, 331], "config_file_path": [296, 331], "pruner_info": [296, 331], "register_schedul": [297, 333], "get_schedul": [297, 333], "gradual": [297, 333, 569, 570], "update_sparsity_ratio": [297, 333], "aggressive_ratio": 297, "current_prune_step": [297, 333], "total_prune_step": [297, 333], "oneshotschedul": [297, 333], "aggress": 297, "iterativeschedul": [297, 333], "target_ratio": [297, 333], "server": [299, 300, 437, 444, 496, 497, 504, 505, 513, 516, 527, 529, 531, 545], "seper": 299, "opt_model": [299, 567], "fulli": [299, 573], "saniti": 299, "illeg": 299, "sync": 299, "accordingli": 299, "reg": [300, 321, 330], "tuning_sampl": [300, 342, 347], "tuning_spac": [300, 342, 347, 350], "tuning_struct": [300, 342, 347], "auto_mixed_precis": [300, 342], "conserv": [300, 342], "hawq_v2": [300, 342], "mse_v2": [300, 342], "ux": 300, "config_gener": [300, 437, 497], "configuration_wizard": [300, 437, 497], "db_manag": [300, 437, 497, 535], "diagnosi": [300, 405, 408, 414, 437, 497, 526, 532], "file_brows": [300, 437, 497], "jobs_manag": [300, 437, 497], "model_zoo": [300, 437, 497], "names_mapp": [300, 437, 497], "profil": [300, 371, 389, 396, 398, 408, 411, 413, 414, 437, 445, 453, 497, 498, 508, 514, 531, 536], "manage_workspac": [300, 437, 497], "workload": [300, 366, 367, 368, 370, 372, 373, 376, 398, 403, 408, 468, 485, 492, 497, 499, 505, 515, 516, 531, 534, 536, 537, 538, 539, 571], "executor": [300, 364, 497, 505], "expiring_dict": [300, 497, 505], "github_info": [300, 497, 505], "hw_info": [300, 497, 505], "json_seri": [300, 367, 421, 422, 427, 429, 430, 433, 443, 452, 478, 484, 497, 504, 505, 514, 517, 518, 519, 520, 522, 523, 524, 525, 526], "proc": [300, 497, 505], "status_upd": [300, 497, 505], "yaml_util": [300, 497, 505], "web": [300, 496, 497, 545, 577], "servic": [300, 497, 530, 531, 568], "router": [300, 497, 531], "basemodel": [310, 311, 312, 314, 316, 317, 318], "plai": [310, 311, 316, 318, 569, 571], "role": [310, 311, 316, 318, 569], "itself": [310, 311, 312, 314, 316, 317], "node_typ": [310, 311, 312, 316, 317, 318], "conv0": [310, 311, 312, 316, 317, 318, 577], "kerasmodel": [312, 455], "base_model": [312, 314, 316, 317, 318], "get_model_fwk_nam": 313, "fwk": 313, "onnxmodel": [316, 448], "find_node_by_nam": 316, "new_nodes_list": 316, "find_nodes_by_initi": 316, "get_scale_zero": 316, "save_model_to_fil": 316, "use_external_data_format": 316, "2gb": 316, "get_model_typ": [317, 446], "validate_graph_nod": 317, "validate_and_inference_input_output": 317, "input_tensor_nam": 317, "output_tensor_nam": 317, "graph_sess": 317, "graph_def_sess": 317, "frozen_pb_sess": 317, "load_saved_model": 317, "saved_model_tag": 317, "serv": [317, 533, 541], "signatur": 317, "tag": [317, 503, 516, 577], "metagraphdef": 317, "input_tensor": [317, 318], "keras_sess": 317, "slim_sess": 317, "checkpoint_sess": 317, "estimator_sess": 317, "input_fn": 317, "saved_model_sess": 317, "tensorflowsavedmodelmodel": 317, "report_spars": [317, 318], "total_spars": [317, 318], "tensorflowqatmodel": 317, "tensorflowcheckpointmodel": 317, "pytorchbasemodel": 318, "get_all_weight_nam": 318, "get_weight": 318, "update_weight": 318, "new_tensor": 318, "update_gradi": 318, "grad_nam": 318, "new_grad": 318, "grad": 318, "prune_weights_": 318, "place": [318, 561, 577], "get_input": 318, "get_gradi": 318, "pytorchmodel": 318, "pytorchfxmodel": 318, "ipexmodel": 318, "objective_registri": 319, "sart": 319, "result_list": 319, "models": [319, 566, 572], "register_criterion": 320, "get_criterion": 320, "pruningcriterion": 320, "magnitudecriterion": 320, "criterion_class": 320, "magtinud": 320, "gradientcriterion": 320, "snipcriterion": 320, "product": [320, 560, 564, 568, 571, 573, 576, 579], "snipmomentumcriterion": 320, "mechan": [320, 576], "preserv": [320, 553], "basepattern": [323, 332], "keep_mask_lay": 323, "invalid_lay": 323, "reduce_tensor": 323, "along": [323, 509, 561], "unprun": 323, "get_single_mask_per_target_ratio": 323, "return_dict": 323, "zero_cnt": 323, "total_cnt": 323, "check_layer_valid": 323, "get_reduced_masks_from_data": 323, "update_residual_cnt": 323, "get_sparsity_ratio_each_lay": 323, "sparsity_ratio": 323, "sparsityinfo": 323, "adjust_ratio": 323, "key_new_spars": 323, "max_sparsity_ratio": 323, "min_sparsity_ratio": 323, "final_target_sparsity_ratio": 323, "examin": [323, 569], "adjust_sparsity_ratio": 323, "block_wis": 323, "get_sparsity_ratio_progress": 323, "reshape_orig_to_pattern": 323, "s1": 323, "s2": 323, "reshape_reduced_to_orig": 323, "orig_shap": 323, "reduce_scor": 323, "get_mask_per_threshold": 323, "cur_target_sparsity_ratio": 323, "keep_exact_sparsity_ratio": 323, "remain": 323, "count_new_masked_cnt": 323, "new_added_mask": 323, "update_new_added_mask": 323, "cur_mask": 323, "bacaus": 323, "update_progressive_mask": 323, "progressive_step": 323, "progressive_config": 323, "update_progressive_masks_linear": 323, "update_progressive_masks_scor": 323, "update_progressive_masks_loc": 323, "domain": [323, 378, 386, 389, 406, 408, 413, 437, 444, 445, 448, 466, 497, 498, 500, 516, 528, 533, 545, 569, 570, 579], "update_progressive_masks_glob": 323, "get_least_ninm_mask_from_data": 323, "elementwis": 323, "sparisti": 323, "get_ele_mask_per_threshold": 323, "least_ninm_mask": 323, "least_m_in_m_mask": 323, "pruner_registri": 329, "parse_valid_pruner_typ": 330, "baseprun": 330, "mask_weights_gener": 330, "update_mask": 330, "basicprun": 330, "proce": 330, "regul": 330, "set_global_step": 330, "progressiveprun": 330, "grain": [330, 571], "interv": [330, 570], "check_progressive_valid": 330, "check_is_pruned_progressive_step": 330, "update_masks_progress": 330, "print_progressive_spars": 330, "register_reg": 332, "regulariz": 332, "get_reg_typ": 332, "get_reg": 332, "basereg": 332, "grouplasso": 332, "coeff": 332, "lasso": [332, 560, 569, 570], "reg_term": 332, "coeffient": 332, "pruningschedul": 333, "init_ratio": 333, "init_sparsity_ratio": 333, "reset_none_to_default": 334, "update_param": [334, 383], "process_weight_config": 334, "global_config": 334, "local_config": 334, "default_config": 334, "pruners_info": 334, "process_yaml_config": 334, "calib_func": 335, "eval_metr": 335, "hybirdblock": 335, "paramt": 335, "automixedprecisiontunestrategi": 336, "rule": [336, 569], "tri": [336, 529, 579], "tune_config": [336, 337, 338, 339, 340, 341, 343, 344, 345, 346], "basictunestrategi": 337, "One": [337, 545, 547, 552, 560, 569, 570, 571, 579], "bayesiantunestrategi": 338, "come": [338, 579], "discret": [338, 579], "gaussian": [338, 579], "posterior": [338, 579], "black": [338, 579], "histori": [338, 346, 360, 401, 408, 410, 414, 467, 485, 535, 579], "maxim": [338, 569, 570, 579], "acq_max": 338, "ac": 338, "gp": 338, "y_max": 338, "random_se": [338, 351, 400, 526, 553, 580], "n_warmup": 338, "n_iter": 338, "acquisit": 338, "relev": 338, "acq": 338, "randomst": 338, "scipi": 338, "x_max": 338, "targetspac": 338, "pbound": 338, "9527": [338, 553, 580], "params_to_arrai": 338, "array_to_param": 338, "amort": 338, "keyerror": 338, "get_target": 338, "num": [338, 361, 563], "_kei": 338, "bayesianoptim": 338, "promis": [338, 551, 569, 570], "gen_next_param": 338, "conservativetunestrategi": 339, "o0": 339, "quantifi": 339, "quant_queu": 339, "prioriti": [339, 579], "fp16": [339, 564, 573], "trail": 339, "exhaustivetunestrategi": 340, "hawq_v2tunestrategi": 341, "impact": [341, 343, 344, 575, 579], "msetunestrategi": 343, "mse_impact_lst": 343, "best_qmodel": 343, "current_best_model": 343, "ordered_op_name_typ": 343, "mse_v2tunestrategi": 344, "highest": [344, 579], "revert": [344, 579], "lowest": [344, 569, 570, 579], "randomtunestrategi": 345, "strategy_registri": [346, 579], "evaluation_result": [346, 552], "initial_tuning_cfg": 346, "quant_mode_wise_item": 346, "ordereddict": [346, 403, 408, 517], "quant_mod": 346, "initial_op_tuning_cfg": 346, "op_item_dtype_dict": 346, "show_baseline_info": 346, "displai": [346, 432, 445], "durat": [346, 381, 392, 395, 402, 408, 410, 411, 501, 566, 576], "initial_best_acc": 346, "set_tuning_spac": 346, "setup_resum": 346, "set_q_func": 346, "update_best_op_tuning_cfg": 346, "op_tuning_cfg": 346, "deploy_config": 346, "deploy": [346, 549], "optuningconfig": [347, 350], "op_quant_mod": [347, 350], "get_stat": [347, 350], "from_stat": [347, 350], "compressionmanag": 351, "uesd": 351, "deal": 351, "commpon": 351, "train_loop": 351, "path_to_sav": 351, "_summary_": 351, "workspac": [351, 360, 402, 403, 408, 410, 411, 412, 442, 515, 517, 526, 565], "layerhistogramcollector": [352, 355], "layer_tensor": [352, 355], "include_lay": [352, 355], "diverg": [352, 355, 356, 550, 579], "create_eval_func": 354, "postprocess_cfg": 354, "create_train_func": 354, "Their": 354, "kl_diverg": 355, "expand_quantized_bin": [355, 356], "quantized_bin": [355, 356], "reference_bin": [355, 356], "expand": [355, 356], "bin": [355, 356], "safe_entropi": [355, 356], "reference_distr_p": [355, 356], "p_sum": [355, 356], "candidate_distr_q": [355, 356], "q_sum": [355, 356], "entropi": [355, 356, 579], "get_threshold": [355, 356], "hist_edg": [355, 356], "quantized_typ": [355, 356], "num_quantized_bin": [355, 356], "255": [355, 356, 573], "historgram": [355, 356], "number_bin": [355, 356], "checkpoint_dir": 360, "history_cfg": 360, "checkpoint": [360, 565], "best_configur": 360, "best_model_weight": 360, "pt": [360, 565, 571, 574], "snapshot": [360, 414, 535], "cfg_from_fil": 361, "yaml_fil": [361, 548, 552, 563, 566], "lazyimport": 361, "lazi": 361, "till": [361, 579], "get_siz": [361, 516], "equal_dict": 361, "d2": 361, "compare_kei": 361, "ignore_kei": 361, "ignor": [361, 548], "customized_msg": 361, "elaps": 361, "combine_histogram": 361, "old_hist": 361, "arr": 361, "get_tuning_histori": 361, "tuning_history_path": [361, 485], "load_data_from_pkl": 361, "pkl": 361, "dump_data_to_loc": 361, "project_data": [362, 468, 469, 474, 478, 481, 484, 491], "benchmark_data": 362, "workdir": [362, 478, 491, 497, 501, 505, 513], "config_filenam": [362, 478, 491], "configuration_data": [362, 469, 474, 478, 481, 484], "generate_config": [362, 469, 474, 478, 481, 484, 491], "dataloaderinterfac": [362, 478, 491], "dataloader_data": [362, 374, 403, 408, 478, 491], "parse_arg": [363, 471, 475, 480, 483, 489], "benchmark_mod": [363, 508], "set_eager_execut": [363, 471, 475, 483], "request_id": [364, 467, 485, 486, 501, 509], "asd": [364, 486], "benchmark_id": [364, 381, 382, 392], "benchmark_result_upd": 364, "benchmark_result_update_pytorch_script": 364, "neural_coder_perform": 364, "neural_coder_tim": 364, "pytorch_script_bench_optim": 364, "command_line_of_script": 364, "pytorch_script_bench_original_model": 364, "execute_real_benchmark": 364, "project_detail": [364, 397, 467, 486], "benchmark_detail": 364, "benchmark_model": [365, 437, 497], "execute_benchmark": [365, 437, 497], "benchmarkconfiggener": 366, "configgener": [366, 367, 368, 370, 371, 372, 373], "generate_evaluation_config": [366, 368, 370, 372, 373], "generate_accuracy_config": 366, "generate_performance_config": 366, "workload_directori": 367, "configuration_path": 367, "jsonseri": [367, 421, 422, 427, 429, 430, 433, 443, 452, 478, 484, 504, 506, 514, 517, 518, 519, 520, 522, 523, 524, 525, 526], "get_predefined_config_path": [367, 516], "generate_model_config": 367, "generate_dataloader_config": 367, "graphoptimizationconfiggener": 368, "generate_graph_optimization_config": 368, "benchmark_config_gener": [369, 437, 497], "graph_optimization_config_gener": [369, 437, 497], "mixed_precision_config_gener": [369, 437, 497], "profiling_config_gener": [369, 437, 497], "pruning_config_gener": [369, 437, 497], "quantization_config_gener": [369, 437, 497], "mixedprecisionconfiggener": 370, "generate_mixed_precision_config": 370, "profilingconfiggener": 371, "pruningconfiggener": 372, "generate_pruning_config": 372, "quantizationconfiggener": 373, "generate_tuning_config": 373, "generate_quantization_config": 373, "configurationpars": 374, "input_data": [374, 379], "parse_evaluation_data": 374, "evaluation_data": 374, "parse_transform": 374, "transforms_data": [374, 403, 408], "parse_dataload": 374, "parse_metr": 374, "metric_data": 374, "get_param_typ": 374, "param_group": 374, "parse_valu": 374, "required_typ": 374, "parse_list_valu": 374, "parse_multidim_list": 374, "dimension": 374, "normalize_string_list": 374, "string_list": 374, "bracket": 374, "miss": [374, 573], "get_predefined_configur": 376, "update_config_to_machine_specif": 376, "configuration_pars": [377, 437, 497], "get_boundary_nod": [377, 437, 497], "get_configur": [377, 437, 497], "params_feed": [377, 437, 497], "pruning_config_pars": [377, 437, 497], "feeder": 378, "get_framework": [378, 451], "get_domain": 378, "get_model": [378, 451, 537], "get_dataload": 378, "get_transform": 378, "get_object": 378, "get_strategi": 378, "get_quantization_approach": 378, "get_possible_valu": 378, "pruningconfigpars": 379, "generate_tre": 379, "parse_entri": 379, "bench": [380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 467, 496], "dbmanag": [380, 413], "database_loc": [380, 413], "log_level": [380, 413, 507], "initialize_databas": [380, 413], "create_sqlalchemy_engin": [380, 413], "create_al": [380, 413], "tabl": [380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 403, 404, 413], "project_id": [381, 384, 391, 392, 395, 397, 403, 407, 408], "model_id": [381, 391, 392, 395], "dataset_id": [381, 384, 392, 395, 403, 407, 408], "warmup_iter": 381, "number_of_inst": 381, "cores_per_inst": [381, 517, 546, 547, 572], "execution_command": [381, 392, 395], "benchark": 381, "delete_benchmark": [381, 402, 408], "benchmark_nam": 381, "update_statu": [381, 392, 395], "execution_statu": [381, 392, 395], "executionstatu": [381, 392, 395, 402, 408, 410, 411, 498, 515], "update_dur": [381, 392, 395], "update_execution_command": [381, 392, 395, 402, 408, 410, 411], "update_log_path": [381, 392, 395, 408, 411], "update_config_path": [381, 392], "update_dataset": [381, 392, 395], "update_batch_s": [381, 392], "update_mod": 381, "update_cores_per_inst": 381, "update_number_of_inst": 381, "clean_statu": [381, 392, 395, 402, 408, 410, 411, 515], "status_to_clean": [381, 392, 395, 402, 408, 410, 411, 515], "build_info": [381, 382, 384, 391, 392, 395, 396, 398, 401], "benchmark_result": [381, 389, 413, 437], "benchmarkresult": [381, 382], "update_accuraci": 382, "update_perform": 382, "list_by_framework": [383, 390, 399], "framework_id": [383, 390, 391, 399, 415], "query_to_list": [383, 390, 399], "dataloaders_queri": 383, "dataloader_id": 383, "fill_dictionari": [383, 385, 386, 388, 390, 393, 394, 399], "dataset_nam": [384, 403, 408], "template_path": 384, "delete_dataset": [384, 403, 408], "update_template_path": 384, "get_domain_id": 385, "domain_nam": 385, "domainflavour": [386, 498], "db": [386, 393, 394, 414, 415], "get_domain_flavour_id": 386, "domain_flavour_nam": 386, "flavour": [386, 406, 408, 466, 498], "get_framework_id": 388, "framework_nam": [388, 464, 504], "domain_flavour": [389, 413, 437, 443, 516], "optimization_typ": [389, 392, 413, 437], "profiling_result": [389, 395, 413, 437], "pruning_detail": [389, 392, 413, 437], "tuning_detail": [389, 392, 413, 437], "tuning_histori": [389, 392, 408, 410, 413, 437, 472, 497], "metrics_queri": 390, "input_nod": 391, "precision_id": [391, 392, 393, 394], "domain_id": [391, 399], "domain_flavour_id": 391, "supports_profil": [391, 445, 453], "supports_graph": [391, 445], "supports_prun": [391, 445, 457], "delete_model": [391, 408, 409], "optimization_type_id": 392, "sampling_s": [392, 517, 547, 580], "tuning_details_id": [392, 400], "pruning_details_id": [392, 398], "diagnosis_config": 392, "delete_optim": [392, 408, 410], "optimization_id": [392, 393, 408, 410, 467], "optimization_nam": [392, 393, 407, 408], "update_optimized_model": [392, 408, 410], "optimized_model_id": 392, "update_sampling_s": 392, "update_precis": 392, "update_tuning_detail": 392, "update_pruning_detail": 392, "pin_accuracy_benchmark": [392, 408, 410], "pin": [392, 408, 410], "pin_performance_benchmark": [392, 408, 410], "get_optimization_by_project_and_model": 392, "unpin_benchmark": 392, "db_connect": 392, "unpin": 392, "optimizationtyp": [392, 393, 498], "tuningdetail": [392, 400, 484], "tuninghistori": [392, 401, 485], "pruningdetail": [392, 398], "optimized_model": 392, "get_pinned_benchmark": 392, "list_for_precis": 393, "precision_nam": [393, 394], "get_optimization_type_for_precis": 393, "get_optimization_type_id": 393, "get_optimization_type_by_nam": 393, "get_optimization_type_by_id": 393, "get_precision_id": 394, "get_precision_by_nam": 394, "get_precision_by_id": 394, "num_thread": 395, "delete_profil": [395, 408, 411], "profiling_id": [395, 396, 408, 411, 486], "profiling_nam": 395, "update_num_thread": 395, "profilingresult": [395, 396], "total_execution_tim": 396, "accelerator_execution_tim": 396, "cpu_execution_tim": 396, "op_run": 396, "op_defin": 396, "get_result": 396, "bulk_add": 396, "params_interfac": [396, 402, 403, 405, 407, 408, 409, 410, 411, 413, 437, 497, 535], "profilingresultaddparamsinterfac": [396, 408, 411, 414], "bulk": [396, 408, 411], "delete_result": 396, "delet": [396, 402, 403, 408, 409, 410, 411, 412, 569, 570], "create_project": [397, 407, 408, 412], "delete_project": [397, 408, 412], "project_nam": [397, 403, 408], "get_model_by_nam": 397, "list_project": [397, 408, 412], "update_not": 397, "pruning_details_data": 398, "delete_pruning_detail": 398, "list_by_domain": 399, "transforms_queri": 399, "accuracy_criterion_typ": 400, "accuracy_criterion_threshold": 400, "exit_polici": [400, 553, 580], "tuning_details_data": 400, "delete_tuning_detail": 400, "update_tuning_histori": 400, "tuning_history_id": 400, "minimal_accuraci": 401, "baseline_accuraci": 401, "baseline_perform": 401, "last_tune_accuraci": 401, "last_tune_perform": 401, "best_tune_accuraci": 401, "best_tune_perform": 401, "benchmarkapiinterfac": [402, 408], "get_benchmark_detail": [402, 408], "list_benchmark": [402, 408], "update_benchmark_accuraci": [402, 408], "update_benchmark_perform": [402, 408], "update_benchmark_statu": [402, 408], "update_benchmark_dur": [402, 408], "update_path": [402, 408, 410], "add_benchmark": [402, 408], "add_result": [402, 408, 411], "edit_benchmark": [402, 408], "parse_benchmark_data": [402, 408], "benchmarkaddparamsinterfac": [402, 408, 414], "parse_benchmark_edit_data": [402, 408], "benchmarkeditparamsinterfac": [402, 408, 414], "before_delete_benchmark_entri": 402, "sqlite3": 402, "db_model": [402, 413, 437, 497], "datasetapiinterfac": [403, 408], "get_dataset_detail": [403, 408], "list_dataset": [403, 408], "add_dataset": [403, 408], "set_template_path": [403, 408], "parsed_dataset_data": [403, 408], "datasetaddparamsinterfac": [403, 408, 414], "check_if_custom_metric_or_dataload": [403, 408], "dataset_data": [403, 408, 468, 469, 474, 478, 481, 484, 518], "generate_custom_templ": [403, 408], "dataloader_path": [403, 408], "generate_templ": [403, 408], "template_typ": [403, 408], "parse_dataset_data": [403, 408], "get_predefined_dataset": [403, 408], "prepare_predefined_dataload": [403, 408], "prepare_predefined_transform": [403, 408], "set_database_vers": [403, 404], "version_num": [403, 404], "alembic_vers": [403, 404], "initialize_associ": [403, 404], "initialize_precision_optimization_types_associ": [403, 404], "search_in_list_of_dict_for_unique_valu": [403, 404], "list_of_dict": [403, 404], "search_in_list_of_dict": [403, 404], "diagnosisapiinterfac": [405, 408], "get_op_list": [405, 408, 416], "get_op_detail": [405, 408, 416], "generate_optim": [405, 408], "model_wise_param": [405, 408], "parse_optimization_data": [405, 408, 410], "diagnosisoptimizationparamsinterfac": [405, 408, 414], "parse_op_wise_config": [405, 408], "op_wise_param": [405, 408], "parse_wise_paramet": [405, 408], "params_per_typ": [405, 408], "set_op_wise_pattern_precis": [405, 408], "parse_model_wise_config": [405, 408], "dictionariesapiinterfac": [406, 408], "dictonari": [406, 408], "list_domain": [406, 408], "list_domain_flavour": [406, 408], "list_optimization_typ": [406, 408], "list_optimization_types_for_precis": [406, 408], "list_precis": [406, 408], "list_dataload": [406, 408], "list_dataloaders_by_framework": [406, 408], "list_transform": [406, 408], "list_transforms_by_framework": [406, 408], "list_transforms_by_domain": [406, 408], "list_metr": [406, 408], "list_metrics_by_framework": [406, 408], "examplesapiinterfac": [407, 408], "get_optimization_data": [407, 408], "optimizationaddparamsinterfac": [407, 408, 410, 414], "benchmark_api_interfac": [408, 413, 437], "dataset_api_interfac": [408, 413, 437], "diagnosis_api_interfac": [408, 413, 437], "dictionaries_api_interfac": [408, 413, 437], "examples_api_interfac": [408, 413, 437], "model_api_interfac": [408, 413, 437], "optimization_api_interfac": [408, 413, 437], "profiling_api_interfac": [408, 413, 437], "project_api_interfac": [408, 413, 437], "modelapiinterfac": [408, 409], "add_model": [408, 409, 412], "get_model_detail": [408, 409], "list_model": [408, 409, 437, 463, 497], "parse_model_data": [408, 409], "modeladdparamsinterfac": [408, 409, 414], "optimizationapiinterfac": [408, 410], "get_optimization_detail": [408, 410], "list_optim": [408, 410], "update_optimization_statu": [408, 410], "update_optimization_dur": [408, 410], "add_optim": [408, 410], "add_quantization_optim": [408, 410], "optimization_data": [408, 410, 468, 469, 474, 478, 481, 484], "add_pruning_optim": [408, 410], "add_standard_optim": [408, 410], "edit_optim": [408, 410], "get_pruning_detail": [408, 410], "gat": [408, 410], "edit_tuning_detail": [408, 410], "parsed_optimization_data": [408, 410], "optimizationeditparamsinterfac": [408, 410, 414], "edit_pruning_detail": [408, 410], "pruning_data": [408, 410], "add_tuning_histori": [408, 410], "parse_tuning_histori": [408, 410], "tuninghistoryinterfac": [408, 410, 414, 535], "parse_optimization_edit_data": [408, 410], "load_pruning_details_config": [408, 410, 516], "profilingapiinterfac": [408, 411], "get_profiling_detail": [408, 411], "list_profil": [408, 411], "update_profiling_statu": [408, 411], "update_profiling_dur": [408, 411], "add_profil": [408, 411], "edit_profil": [408, 411], "bulk_add_result": [408, 411], "parse_profiling_data": [408, 411], "profilingaddparamsinterfac": [408, 411, 414], "parse_profiling_result_data": [408, 411], "parse_profiling_edit_data": [408, 411], "profilingeditparamsinterfac": [408, 411, 414], "projectapiinterfac": [408, 412], "get_project_detail": [408, 412], "add_dummy_dataset": [408, 412], "update_project_not": [408, 412], "db_oper": [413, 437, 497], "parse_nod": 414, "tuninghistoryiteminterfac": [414, 535], "update_dataloaders_param": 415, "dataloaders_to_upd": 415, "framework_dataloaders_config": 415, "get_framework_dataloaders_config": 415, "get_framework_transforms_config": 415, "get_tensors_info": [416, 445], "load_quantization_config": 416, "calculate_ms": 416, "input_model_tensor": 416, "optimized_model_tensor": 416, "op_detail": [416, 418, 437, 497], "opdetail": [416, 421], "get_histogram_data": 416, "draw": [416, 576, 579], "diagnosisfactori": 417, "get_diagnosi": 417, "onnx_diagnosi": [418, 437, 497], "onnxrt_diagnosi": [418, 419, 437], "tensorflow_diagnosi": [418, 437, 497], "factori": [418, 437, 472, 488, 493, 497, 508, 512], "op_entri": [418, 437, 497], "onnxrtdiagnosi": 420, "onnxrtmodel": [420, 448], "serialization_typ": [421, 422, 452, 504, 506, 518, 519, 523, 524], "oppattern": 421, "pattern_data": 421, "opweight": 421, "weights_data": 421, "opactiv": 421, "op_activ": 421, "opentri": 422, "activation_min": 422, "activation_max": 422, "tensorflowdiagnosi": 424, "tensorflowmodel": [424, 453, 455, 456, 457, 458], "browser": [425, 545], "get_directory_entri": 425, "get_requested_path": 425, "request": [425, 437, 438, 439, 460, 461, 464, 485, 497, 501, 528, 530, 532, 533, 537, 539, 540, 542, 545, 547, 573], "get_non_hidden_directory_entri": 425, "create_dir_entri": 425, "direntri": 425, "create_file_entri": 425, "create_entri": 425, "is_directori": 425, "sort_entri": 425, "should_show_fil": 425, "should_show_only_model_fil": 425, "get_setting_valu": 425, "get_filter_valu": 425, "filter_requested_entri": 425, "filter_nam": 425, "is_directory_entri": 425, "is_model_or_directory_entri": 425, "is_dataset_or_directory_entri": 425, "brows": 426, "filesystem": [426, 516, 541], "attribute_typ": 427, "expanded_group": [428, 431], "edg": [430, 432, 437, 497, 578], "add_edg": 430, "source_id": 430, "target_id": 430, "get_nod": 430, "highlight_pattern": 430, "get_target_nod": 430, "reader": [431, 432, 437, 497], "graphread": 431, "find_pattern_in_graph": [431, 532], "onnxrt_read": [432, 434, 437], "tensorflow_read": [432, 434, 437], "collaps": [432, 437, 497, 545], "graph_read": [432, 437, 497], "groupnod": 433, "group_nam": 433, "onnxrtread": 435, "tensorflowread": 436, "jobs_control_queu": [437, 438, 497], "frozen_pb": [437, 444, 454], "meta_graph": [437, 444, 454], "model_type_gett": [437, 444, 497], "repositori": [437, 442, 444, 497, 503, 559], "download_config": [437, 462, 463, 497], "download_model": [437, 462, 463, 497], "optimize_model": [437, 470, 472, 473, 476, 479], "neural_coder_optim": [437, 472, 497], "tune_model": [437, 472, 482], "execute_optim": [437, 472, 497], "tensorflow_profil": [437, 488, 497], "execute_profil": [437, 488, 497], "profile_model": [437, 488, 490, 494, 497], "job": [438, 512], "_jobscontrolqueu": 439, "queu": 439, "jobsmanag": 439, "_jobsmmanag": 440, "_job": 440, "get_default_path": 442, "shape_elements_ord": [445, 448, 457, 516], "get_input_nod": [445, 455, 456, 457], "get_output_nod": [445, 455, 456, 457], "ensure_supported_path": 445, "get_model_graph": [445, 448, 456, 457, 532], "get_framework_nam": [445, 448, 450, 457], "supports_path": [445, 448, 450, 453, 455, 456, 458], "guard_requirements_instal": [445, 448, 450, 457], "instal": [445, 448, 450, 457, 464, 552, 556, 568], "nc_model_inst": [448, 457], "onnx_model": 448, "filtered_input_nod": 448, "remove_number_of_samples_from_shap": 448, "pytorchscriptmodel": 450, "modelrepositori": 451, "get_framework_from_path": [451, 516], "get_supported_framework": 451, "is_model_path": 451, "trust": [452, 545], "frozenpbmodel": 453, "metagraphmodel": 456, "metagraph": 456, "savedmodelmodel": 458, "get_input_shap": 459, "fix_dynamic_shap": 459, "resourc": [462, 550, 569], "download_yaml_config": 462, "model_info": 462, "download_fil": 462, "download_path": 462, "header": [462, 541, 556], "report_progress": 462, "unpack_arch": 462, "archive_path": 462, "unpack": 462, "archiv": 462, "get_yaml_url": 462, "model_src_dir": 462, "yaml_relative_loc": 462, "get_available_model": 464, "check_vers": 464, "framework_vers": 464, "supported_vers": 464, "validate_model_list": 464, "model_list": 464, "get_framework_module_nam": 464, "get_installed_framework": 464, "mappingdirect": 466, "namesmapp": 466, "framework_map": 466, "domain_map": 466, "domain_flavour_map": 466, "precision_map": 466, "map_nam": 466, "parameter_typ": 466, "execute_optimization_pytorch_script": 467, "execute_optimization_regular": 467, "parse_model_data_to_bench_nam": 467, "parse_log": 467, "optimization_detail": 467, "check_if_collect_tuning_histori": 467, "optimizationfactori": 468, "get_optim": 468, "optimization_script": [469, 474, 478, 481, 484], "optimize_graph": [471, 475], "output_graph": [471, 475, 480, 483], "optimize_graph_config": [471, 475], "optimize_pt_script": 477, "output_model_nam": 478, "output_model_dir": 478, "optimizationinterfac": 478, "accuracycriterion": [484, 579], "optimization_workdir": 485, "watcher": 485, "process_succeed": 485, "signal": [485, 516, 553], "was_history_file_chang": 485, "history_file_modification_tim": 485, "send_history_snapshot": 485, "execute_real_profil": 486, "profiling_detail": 486, "profilerfactori": [487, 492], "get_profil": [487, 492], "profiling_data": [487, 491, 492, 494, 514], "load_profiling_detail": 489, "json_path": 489, "config_path": 491, "initialize_graph": 494, "tf_modul": 494, "create_tf_config": 494, "num_warmup": 494, "get_node_by_nam": 494, "convert_nodes_to_list": 494, "build_dataload": 494, "delete_assign": 495, "wsgi": 496, "prepare_environ": 496, "app": [497, 531], "history_snapshot_pars": [497, 531, 536], "request_data_processor": [497, 531, 536], "response_gener": [497, 531, 536, 537, 539, 542], "status": [498, 510, 515], "ensure_workdir_exists_and_writ": 499, "clean_workloads_wip_statu": 499, "wip": [499, 581], "workloads_list": 499, "migrate_databas": 499, "latest": [499, 509, 561, 571, 575], "alemb": [499, 556, 561], "notfoundexcept": [500, 529, 530], "accessdeniedexcept": 500, "deni": 500, "clienterrorexcept": 500, "internalexcept": 500, "workspace_path": [501, 516], "subject": [501, 528, 562], "send_respons": 501, "log_nam": 501, "additional_log_nam": [501, 509], "shell": [501, 509, 577], "process_dur": 501, "call_on": 501, "cwd": [501, 509], "universal_newlin": [501, 509], "startupinfo": [501, 509], "creationflag": [501, 509], "ignore_exit_cod": [501, 509], "pid": [501, 509], "env_arg": 501, "ncprocess": [501, 510], "refresh_workdir": 501, "is_multi_command": 501, "expir": 502, "expiringdictitem": 502, "expires_at": 502, "is_expir": 502, "expiringdict": 502, "initial_valu": 502, "ttl": 502, "120": 502, "userdict": 502, "githubinfo": 503, "hw": 504, "hwinfo": 504, "get_number_of_socket": 504, "get_distribut": 504, "distibut": 504, "get_bios_vers": 504, "bio": [504, 568], "is_turbo_boost_en": 504, "turbo": [504, 568], "boost": [504, 564, 571], "get_kernel_vers": 504, "get_framework_info": 504, "get_framework_dependency_info": 504, "subdepend": 504, "serializ": 506, "serialize_item": 506, "datetim": 506, "throw": 506, "typeerror": 506, "2016": 506, "84913": 506, "08t11": 506, "084913": 506, "change_log_level": 507, "optimizationpars": 508, "performancepars": 508, "update_parti": 508, "parsed_result": 508, "summarize_parti": 508, "summarize_valu": 508, "accuracypars": 508, "benchmarkparserfactori": 508, "get_pars": 508, "profilingpars": 508, "unify_tim": 508, "string_valu": 508, "micro": 508, "125": [508, 581], "6m": 508, "microsecond": 508, "output_dir": 509, "cmd": 509, "docker": 509, "hub": 509, "aibt_tensorflow": 509, "7_3_mkldnn_tensorflow": 509, "111224": 509, "pull_imag": 509, "0c750a01": 509, "90e0": 509, "4aa8": 509, "99fe": 509, "a194d55a2046": 509, "time_start": 509, "2018": 509, "17t14": 509, "47": [509, 581], "352502": 509, "time_stop": 509, "25": [509, 581], "110410": 509, "info_path": 509, "tail": 509, "is_ok": [509, 510], "subprocess": [509, 532], "popen": 509, "remove_log": 509, "properli": 510, "return_code_al": 510, "remove_successful_log": 510, "success": [510, 528, 561], "get_status_update_funct": 512, "job_typ": 512, "sent": 514, "throughput": 514, "acc_input_model": 514, "acc_optimized_model": 514, "size_input_model": 514, "size_optimized_model": 514, "path_optimized_model": 514, "optimization_tim": 514, "insert_data": 514, "calculate_throughput": 514, "readi": 514, "ensure_working_path_exist": 515, "clean_log": 515, "workdir_path": 515, "is_hidden": 516, "get_dataset_path": 516, "get_file_extens": 516, "lead": [516, 550, 564, 569, 570], "is_dataset_fil": 516, "normalize_domain": 516, "underscor": 516, "normalize_framework": 516, "normalize_str": 516, "string_to_norm": 516, "get_model_zoo_config_path": 516, "model_dict": 516, "get_model_zoo_model_path": 516, "check_modul": 516, "get_module_vers": 516, "add_unit": 516, "load_model_config": 516, "load_dataloader_config": 516, "load_transforms_config": 516, "load_transforms_filter_config": 516, "meaning": [516, 567], "load_precisions_config": 516, "get_default_pruning_config_path": 516, "load_model_wise_param": 516, "load_metrics_config": 516, "get_metrics_dict": 516, "load_help_nc_param": 516, "replace_with_valu": 516, "file_path": 516, "verify_file_path": 516, "determine_ip": 516, "ip": 516, "is_development_env": 516, "nc_mode": 516, "filter_transform": 516, "parse_bool_valu": 516, "release_tag": 516, "get_shape_from_transform": 516, "get_height_width_from_s": 516, "parse_to_string_list": 516, "parse_to_float_list": 516, "export_to_csv": 516, "parse_vers": 516, "string_vers": 516, "remove_dataload": 517, "datalad": 517, "remove_accuracy_metr": 517, "set_evaluation_dataload": 517, "udpat": 517, "set_evaluation_dataset_path": 517, "get_performance_config": 517, "set_performance_cores_per_inst": 517, "get_performance_cores_per_inst": 517, "set_performance_num_of_inst": 517, "num_of_inst": [517, 546, 547, 572], "get_performance_num_of_inst": 517, "set_accuracy_and_performance_batch_s": 517, "set_quantization_dataload": 517, "set_quantization_dataset_path": 517, "set_quantization_batch_s": 517, "set_workspac": [517, 526], "set_accuracy_go": 517, "accuracy_go": 517, "set_accuracy_metr": 517, "set_transform": 517, "process_transform": 517, "set_quantization_approach": 517, "set_input": 517, "set_output": 517, "set_quantization_sampling_s": 517, "set_performance_warmup": 517, "warmup": [517, 572], "set_performance_iter": 517, "set_optimization_precis": 517, "yaml_path": 517, "is_dummi": 518, "labelbal": 518, "set_transforms_from_list": 518, "transforms_list": 518, "set_dataset": 518, "postprocessschema": 519, "get_label_shift_valu": 519, "set_accuracy_postprocess_transform": 519, "set_precis": [520, 522], "sgdoptim": 524, "adamwoptim": 524, "adamoptim": 524, "crossentropylosscriterion": 524, "sparsecategoricalcrossentropycriterion": 524, "knowledgedistillationlosscriterion": 524, "set_postprocess_transform": 524, "weightcompressionapproach": 524, "initialize_prun": 524, "pruner_dict_list": 524, "serialize_prun": 524, "parse_dict_value_to_float": 524, "parse_dict_value_to_int": 524, "wiseconfigdetail": 525, "wiseconfig": 525, "multiobject": 526, "acccriterion": 526, "exitpolici": 526, "set_timeout": 526, "set_max_tri": 526, "max_trial": [526, 553, 579], "trial": [526, 579], "set_performance_onli": 526, "set_random_se": 526, "float_represent": 527, "dumper": 527, "pruner_represent": 527, "outsid": 528, "create_simple_respons": 528, "gui": [528, 529, 533, 545, 560, 561], "messagequeu": 528, "queue": [528, 533], "post_failur": 528, "post_success": 528, "post_error": 528, "wait": 528, "global_config_directori": 529, "set_up": 529, "determine_values_from_environ": 529, "get_command_line_arg": 529, "determine_server_port": 529, "max_ports_tri": 529, "port_default": 529, "determine_gui_port": 529, "client": [529, 545], "server_port": 529, "unless": [529, 557], "is_port_taken": 529, "determine_log_level": 529, "determine_url_prefix": 529, "get_url": 529, "dump_token_to_fil": 529, "servicenotfoundexcept": 530, "unknown": 530, "connector": 532, "routingdefinit": 532, "rout": 532, "realtimeroutingdefinit": 532, "realtim": 532, "deferredroutingdefinit": 532, "deferredsubprocessroutingdefinit": 532, "spawn": 532, "get_system_info": 532, "endpoint": 533, "run_serv": 533, "webserv": 533, "get_tls_arg": 533, "tl": [533, 545], "block_ifram": 533, "werkzeug": [533, 541], "ifram": 533, "csp": 533, "block_snif": 533, "mime": 533, "snif": 533, "require_api_token": 533, "author": [533, 562], "handle_api_cal": 533, "subpath": 533, "allow_api_cal": 533, "page_not_found": 533, "disable_cach": 533, "build_paramet": 533, "flask": [533, 545], "web_socket_publish": 533, "web_socket": 533, "flask_socketio": 533, "socketio": [533, 545], "benchmarkservic": 534, "workloadservic": [534, 538, 539, 542], "historysnapshotpars": 535, "history_snapshot": 535, "provide_perform": 535, "parse_history_snapshot": 535, "parse_history_item": 535, "history_item": 535, "extract_accuraci": 535, "extract_perform": 535, "modelservic": 537, "optimizationservic": 538, "profilingservic": 539, "generate_csv": 539, "processor": [540, 564, 568, 571, 573, 574, 581], "requestdataprocessor": 540, "get_string_valu": 540, "responsegener": 541, "serve_from_filesystem": 541, "mimetyp": 541, "as_attach": 541, "add_refresh": 541, "refresh_tim": 541, "refresh": 541, "from_except": 541, "get_status_code_for_except": 541, "get_code_templ": 542, "get_output": 542, "asymmetr": [544, 573, 579], "conda": [545, 556, 561, 575], "forg": [545, 556, 561], "setup": [545, 557, 561], "ui": 545, "5000": 545, "338174d13706855fc6924cec7b3a8ae8": 545, "listen": 545, "firewal": 545, "8080": 545, "cert": 545, "path_to_cert": 545, "crt": 545, "path_to_private_kei": 545, "encrypt": 545, "insecur": 545, "expos": 545, "forfeit": 545, "threat": 545, "button": [545, 560], "pop": 545, "recognit": [545, 552, 577], "finish": 545, "synthet": 545, "plu": 545, "icon": 545, "section": [545, 550, 569, 572, 580], "unfold": 545, "On": [545, 573], "panel": 545, "navig": 545, "trash": 545, "visibl": 545, "cursor": 545, "prompt": [545, 552], "confirm": 545, "revers": 545, "exit": [545, 553, 564, 580], "pencil": 545, "light": [545, 551], "blue": 545, "color": 545, "row": [545, 569, 570], "arrow": 545, "checkbox": 545, "chart": [545, 573, 576, 577], "offer": [545, 548], "conveni": 545, "variat": 545, "yellow": 545, "warn": 545, "remind": 545, "dialog": 545, "cryptographi": 545, "centercrop": [546, 547, 578], "totensor": [546, 547, 578], "485": [546, 547, 581], "456": [546, 547], "406": [546, 547], "enough": [546, 573], "benchmarkconf": 546, "lpot": [546, 571, 575], "often": [547, 550, 567, 569, 570], "encount": 547, "consum": 547, "lack": 547, "faster": [547, 549, 571, 581], "dataloadermodul": 547, "hard": 547, "treat": 547, "eas": [547, 561, 571], "advantag": [547, 572], "life": 547, "launch": [547, 564], "__next__": 547, "randomresizedcrop": [547, 578], "imagerecordit": 547, "path_imgrec": 547, "label_width": 547, "preprocess_thread": 547, "data_nthread": 547, "data_shap": 547, "label_nam": 547, "rand_crop": 547, "rand_mirror": 547, "shuffle_dataset": 547, "shuffle_chunk_se": 547, "shuffle_se": 547, "data_layer_typ": 547, "combine_mean_std": 547, "helloworld": [548, 578], "ensp": [548, 563, 578], "imagerecord": [548, 552, 580], "image_nam": 548, "cocorecord": 548, "gt": [548, 555, 578], "float16": 548, "int64": 548, "style_transf": 548, "content": 548, "tfrecorddataset": 548, "aid": 549, "infrastructur": 549, "deploi": [550, 579], "power": [550, 568], "mobil": [550, 581], "workflow": [550, 561, 564, 577], "produc": 550, "softmax": 550, "l": [550, 577, 579], "kd": 550, "kullback": 550, "leibler": 550, "patient": 550, "compact": [550, 569, 570], "ia": 550, "attach": 550, "shallow": 550, "deepest": 550, "deeper": 550, "10006": 550, "distillationconf": 550, "blendcnn": [550, 581], "loss_sum": 550, "iter_bar": 550, "tqdm": 550, "desc": [550, 569], "teacher_logit": 550, "huge": [551, 570], "bit": [551, 564, 571, 573], "heavi": 551, "booster": 551, "degrad": 551, "retrain": [551, 569, 570], "incorpor": [551, 579], "novel": 551, "horovod": 552, "builtin": 552, "program": [552, 564], "addition": [552, 579], "enable_eager_execut": 552, "yaml_file_path": 552, "evaluation_time_cost": 552, "partit": 552, "distributedsampl": 552, "train_sampl": 552, "train_dataset": 552, "num_replica": 552, "train_kwarg": 552, "adadelta": 552, "distributedoptim": 552, "named_paramet": 552, "broadcast_paramet": 552, "root_rank": 552, "broadcast_optimizer_st": 552, "set_epoch": 552, "batch_idx": 552, "nll_loss": 552, "log_interv": 552, "0f": 552, "tloss": 552, "6f": 552, "dry_run": 552, "test_func": 552, "host": 552, "num_of_process": 552, "002": 552, "ssh": 552, "readm": 552, "exactli": 552, "resnet50_v1": 552, "resizecropimagenet": [552, 578], "realiz": [552, 563, 566, 574, 576], "tow": 552, "situat": 552, "node1": 552, "node2": 552, "TO": 552, "your_node1_nam": 552, "your_node2_nam": 552, "resnet50_fp32_pretrained_model": 552, "nc_resnet50_v1": 552, "factor": [553, 568, 581], "oppos": 553, "entail": 553, "post_training_dynamic_qu": [553, 572, 579], "post_training_static_qu": [553, 572, 579], "accuracy_criterion": [553, 566, 572, 579, 580], "rel": [553, 572, 579, 580, 581], "earli": [553, 573, 579, 580], "determinist": 553, "wide": [554, 564, 570, 573], "varieti": [554, 572, 579], "demonstr": [554, 569, 577], "exchang": 555, "hope": 555, "briefli": [555, 569], "matur": 555, "major": [555, 558, 573], "reus": 555, "torch2onnxconfig": 555, "inc_model": [555, 565], "fp32_onnx_config": 555, "randn": 555, "int8_onnx_config": 555, "quantizelinear": 555, "dequantizelinear": 555, "matmulintegertofloat": 555, "matmulinteg": 555, "cast": [555, 574, 578], "incompat": 556, "88": [556, 576, 581], "80": [556, 577, 581], "pyobject": 556, "reinstal": 556, "importerror": 556, "libgl": 556, "apt": [556, 561], "yum": [556, 561], "opencv": 556, "conflict": 556, "pend": 556, "27": [556, 561, 581], "quick": [557, 580], "friendli": [557, 580], "let": [557, 572, 580], "syntax": 557, "up1": 557, "up2": 557, "valid_mixed_precis": 557, "concatv2": 557, "maxpool": 557, "avgpool": 557, "per_tensor": [557, 580], "addn": 557, "grappler_optim": 557, "constfold": 557, "debug_stripp": 557, "concept": [558, 576], "custom_metr": 558, "explicitli": 558, "refin": 558, "broad": 560, "snippet": 560, "upload": 560, "qintegerop": [560, 573], "plan": [560, 564], "frequent": 561, "ask": 561, "consolid": 561, "streamlin": 561, "scienc": 561, "anaconda": 561, "suit": [561, 577], "esri": 561, "apach": 562, "softwar": [562, 564, 568, 571, 575], "copyright": 562, "mit": 562, "accompani": 562, "wish": 562, "bibtex": 562, "misc": 562, "feng": 562, "tian": 562, "chuanqi": 562, "wang": 562, "guom": 562, "zhang": 562, "penghui": 562, "cheng": 562, "pengxin": 562, "yuan": 562, "haihao": 562, "shen": 562, "jiong": 562, "gong": 562, "titl": 562, "howpublish": 562, "year": 562, "logo": [562, 568], "atom": 562, "phi": 562, "pentium": 562, "vtune": 562, "corpor": [562, 568], "subsidiari": [562, 568], "brand": [562, 568], "claim": [562, 568], "popularli": 563, "label_map": 563, "decis": 563, "ap": 563, "curv": 563, "target_boxes_num": 563, "str_label": 563, "int_label": 563, "inturn": 563, "cocomap": 563, "vocmap": 563, "categor": 563, "multiclass": 563, "multilabel": 563, "multi_metr": 563, "higher_is_bett": [563, 566, 579, 580], "newmetr": 563, "reflect": [563, 568, 578], "recent": 564, "growth": 564, "complex": [564, 570], "bfloat16": [564, 574], "half": 564, "sixteen": 564, "bandwidth": 564, "3rd": [564, 571, 573, 574], "gen": [564, 571, 574], "codenam": 564, "avx512": [564, 573], "vcvtne2ps2bf16": 564, "vcvtneps2bf16": 564, "vdpbf16p": 564, "user_defined_funct": 564, "avx512_bf16": 564, "consequ": 564, "persist": 565, "brought": [565, 573], "tf2": 565, "h5": 565, "onnx_ml_pb2": 565, "hybridblock": 565, "0000": 565, "saved_result": 565, "multi_object": 566, "peak": 566, "start_tim": 566, "_result_list": 566, "customobj": 566, "simultan": [567, 572], "arbitrari": 567, "gain": [567, 571], "benefit": [567, 569], "Of": 567, "cours": 567, "prune_conf": 567, "post_training_quantization_conf": 567, "quantization_aware_training_conf": 567, "configurationintel": 568, "platinum": [568, 581], "8380": [568, 581], "manufactur": 568, "m50cyp2sbstd": 568, "se5c6200": 568, "86b": 568, "0022": 568, "d64": 568, "2105220049": 568, "microcod": 568, "0xd0002b1": 568, "30ghz": 568, "3ghz": 568, "40": [568, 580, 581], "perf": 568, "256gb": 568, "16x16gb": 568, "ddr4": 568, "3200mt": 568, "nic": 568, "ethernet": 568, "10g": 568, "x550t": 568, "drive": 568, "1x": 568, "intel_ssdsc2kw01": 568, "953": 568, "9g": 568, "ct1000mx500ssd1": 568, "931": 568, "5g": 568, "publicli": 568, "degre": 568, "mark": 568, "trademark": 568, "art": [569, 570], "increasingli": [569, 570], "crucial": [569, 570], "salient": [569, 570], "nonzero": [569, 570], "irregular": [569, 570], "anywher": [569, 570], "2in4": 569, "amper": 569, "gemm": 569, "ic": [569, 571], "oc": 569, "kh": 569, "kw": 569, "fastform": 569, "finetun": [569, 570, 581], "downstream": [569, 570], "formula": [569, 570], "num_train_epoch": 569, "pbar": 569, "progressbar": 569, "n_total": 569, "n_gpu": 569, "gradient_accumulation_step": 569, "clip_grad_norm_": 569, "max_grad_norm": 569, "rate": [569, 573], "cv": [569, 570], "grown": 570, "unpreced": 570, "smooth": 570, "discourag": 570, "namhoon": 570, "lee": 570, "thalaiyasingam": 570, "ajanthan": 570, "philip": 570, "torr": 570, "2019": 570, "plug": 571, "twitter": 571, "linkedin": 571, "zone": 571, "hug": 571, "land": 571, "gcp": 571, "aw": [571, 581], "azur": 571, "marketplac": 571, "pat": 571, "keynot": 571, "intelon": 571, "sep": 571, "alibaba": 571, "chines": 571, "aug": 571, "purif": 571, "sacrif": 571, "jun": 571, "partner": 571, "democrat": 571, "apr": 571, "ecosystem": 571, "mar": 571, "feb": 571, "sigopt": 571, "jan": 571, "bilibili": 571, "ml": 571, "doubl": 571, "mlperf": 571, "reconstruct": 571, "abound": 571, "cern": 571, "gan": 571, "3dgan": 571, "4th": 571, "iml": 571, "workshop": 571, "highli": 571, "intelcaff": 571, "aris": 572, "tell": 572, "henc": 572, "quant_aware_train": 572, "op_type_list": [572, 579], "use_bf16": [572, 574], "weight_compress": [572, 580], "initial_spars": [572, 580], "prune_typ": [572, 580], "basic_magnitud": [572, 580], "start_epoch": [572, 580], "end_epoch": [572, 580], "update_frequ": 572, "prune_domain": 572, "tile_pattern_1x1": 572, "inter_num_of_thread": 572, "intra_num_of_thread": 572, "graph_optimization_level": 572, "disable_al": 572, "veri": [573, 579], "invent": 573, "int4": 573, "cost": 573, "theoret": 573, "affin": 573, "zeropoint": 573, "overflow": 573, "solv": [573, 575], "unseen": 573, "peopl": 573, "emul": 573, "pain": 573, "lossi": 573, "understand": [573, 577], "philosophi": 573, "val_dataset": 573, "val_dataload": 573, "worker": 573, "ping_memori": 573, "enhanc": 574, "bf16wrapper": 574, "retrac": 574, "site": 575, "assist": 575, "comparison": [575, 577], "sed": 575, "your_script": 575, "visual": [576, 577, 579], "hyperparamet": [576, 579], "backbon": 576, "interact": 576, "sigopt_api_token": [576, 579], "sigopt_project_id": [576, 579], "sigopt_experiment_id": 576, "nc": [576, 579], "login": 576, "certain": 576, "suffici": 576, "ordinari": 576, "capac": 576, "sigopt_experiment_nam": [576, 579], "receiv": 576, "tuning_criterion": [576, 579], "tuningcriterion": [576, 579], "strategy_kwarg": [576, 579], "analysi": 576, "8266": 576, "8372": 576, "2132": 576, "83": [576, 581], "7495": 576, "8299": 576, "8294": 576, "85": [576, 581], "0837": 576, "8291": 576, "4469": 576, "discov": 577, "why": 577, "valuabl": 577, "instrument": 577, "writer": 577, "_pre_eval_hook": 577, "submodul": 577, "whitelist": 577, "_recordingobserv": 577, "output_tensors_dict": 577, "current_it": 577, "get_tensor_valu": 577, "_observer_forward_hook": 577, "_add_observer_": 577, "named_children": 577, "leaf": 577, "add_modul": 577, "register_forward_hook": 577, "dump_tim": 577, "summarywrit": 577, "_acc": 577, "tune_": 577, "add_graph": 577, "get_observer_dict": 577, "observer_dict": 577, "is_quant": 577, "add_histogram": 577, "bind_al": 577, "logdir_spec": 577, "tune_0_acc0": 577, "tune_1": 577, "tune_1_acc0": 577, "79": [577, 581], "four": 577, "baseline_acc_0": 577, "776": 577, "tune_1_acc_0": 577, "095": 577, "runs_v3": 577, "image_recognit": 577, "run_tuning_dump_tensor": 577, "sh": 577, "inceptionv3": 577, "v0": 577, "cg": 577, "op_wis": [577, 580], "bash": 577, "run_tun": 577, "topologi": 577, "inception_v3": 577, "dataset_loc": 577, "inceptionv3_fp32_pretrained_model": 577, "output_model": 577, "nc_inceptionv3": 577, "inceptionv3_dump_tensor": 577, "poor": 577, "disappear": 577, "randomcrop": 578, "cropres": 578, "decodeimag": 578, "jpeg": 578, "encodejp": 578, "alignimagechannel": 578, "68": [578, 581], "116": 578, "78": [578, 581], "103": 578, "94": [578, 581], "017": 578, "bilinearimagenet": [578, 580], "topilimag": 578, "padding_mod": 578, "border": 578, "colorjitt": 578, "bright": 578, "satur": 578, "hue": 578, "jitter": 578, "tondarrai": 578, "human": 579, "op_name_list": 579, "tolerable_loss": 579, "quant_level": 579, "post_training_auto_qu": 579, "ii": 579, "iii": 579, "classic": 579, "idea": 579, "primari": 579, "spent": 579, "hawq_v2_loss": 579, "model_loss": 579, "compli": 579, "focu": 579, "short": 579, "never": 579, "loglevel": 579, "endlessli": 579, "perspect": 579, "smbo": 579, "appl": 579, "surrog": 579, "quantil": 579, "x1": 579, "x2": 579, "densiti": 579, "parzen": 579, "greatest": 579, "hour": 579, "dai": 579, "abctunestrategi": 579, "overridden": 579, "mobilenet_v1": 580, "onnxrt_integ": 580, "onnxrt_qlinear": 580, "image_tensor": 580, "subsect": 580, "model_wis": 580, "conv1": 580, "hyper": 580, "06": [580, 581], "beta_1": 580, "beta_2": 580, "999": 580, "epsilon": 580, "sparsecategoricalcrossentropi": 580, "reduct": 580, "sum_over_batch_s": 580, "from_logit": 580, "54": [580, 581], "19": [580, 581], "90": [580, 581], "nesterov": 580, "weight_decai": 580, "overal": 580, "ye": 581, "rnn": 581, "unet": 581, "performancethroughput": 581, "sec": 581, "efficientnet": 581, "91": 581, "43": 581, "69": 581, "32x": 581, "cnn": 581, "incept": 581, "37": 581, "65": 581, "38": 581, "77": 581, "53": 581, "57x": 581, "46": 581, "61": 581, "58x": 581, "resnet101": 581, "39": 581, "63": 581, "11x": 581, "51x": 581, "26": 581, "59": 581, "23": 581, "06x": 581, "25x": 581, "70": 581, "44": 581, "00": 581, "163": 581, "133": 581, "22x": 581, "73": 581, "97": 581, "49": 581, "111": 581, "20x": 581, "v3": 581, "43x": 581, "v4": 581, "18": 581, "56": 581, "53x": 581, "36": 581, "33x": 581, "44x": 581, "374": 581, "226": 581, "66x": 581, "92": 581, "41x": 581, "fashion": 581, "359": 581, "244": 581, "47x": 581, "172": 581, "66": 581, "98x": 581, "153": 581, "76x": 581, "151": 581, "112": 581, "35x": 581, "26x": 581, "72": 581, "99": 581, "56x": 581, "82": 581, "93x": 581, "vgg16": 581, "89": 581, "178": 581, "14x": 581, "vgg19": 581, "156": 581, "18x": 581, "albert": 581, "23x": 581, "barthez": 581, "81": 581, "86": 581, "82x": 581, "203": 581, "01x": 581, "216": 581, "102": 581, "10x": 581, "sst2": 581, "218": 581, "stsb": 581, "57": 581, "48": 581, "49x": 581, "93": 581, "70x": 581, "50x": 581, "40x": 581, "3878": 581, "3717": 581, "04x": 581, "camembert": 581, "188": 581, "91x": 581, "ctrl": 581, "deberta": 581, "124": 581, "81x": 581, "347": 581, "73x": 581, "382": 581, "198": 581, "flaubert": 581, "561": 581, "35": 581, "370": 581, "52x": 581, "hubert": 581, "84": 581, "36x": 581, "409": 581, "181": 581, "longform": 581, "28x": 581, "mbart": 581, "16x": 581, "639": 581, "490": 581, "31x": 581, "lvwerra": 581, "pegasu": 581, "samsum": 581, "19x": 581, "peleenet": 581, "419": 581, "316": 581, "resnet18": 581, "686": 581, "332": 581, "07x": 581, "611": 581, "333": 581, "83x": 581, "327": 581, "162": 581, "resnext101_32x8d": 581, "175": 581, "88x": 581, "197": 581, "99x": 581, "se_resnext50_32x4d": 581, "308": 581, "144": 581, "13x": 581, "squeezebert": 581, "186": 581, "155": 581, "78x": 581, "transfo": 581, "xl": 581, "37x": 581, "wave2vec2": 581, "60": 581, "58": 581, "21x": 581, "114": 581, "15x": 581, "yolo": 581, "29x": 581, "690": 581, "330": 581, "09x": 581, "614": 581, "334": 581, "84x": 581, "54x": 581, "410": 581, "168": 581, "resnext101_32x16d_wsl": 581, "1189": 581, "680": 581, "75x": 581, "677": 581, "381": 581, "59x": 581, "alexnet": 581, "960": 581, "469": 581, "05x": 581, "962": 581, "466": 581, "arcfac": 581, "235": 581, "130": 581, "294": 581, "34x": 581, "604": 581, "51": 581, "80x": 581, "caffenet": 581, "1501": 581, "536": 581, "1493": 581, "533": 581, "1372": 581, "541": 581, "480": 581, "1250": 581, "753": 581, "1130": 581, "748": 581, "emot": 581, "ferplu": 581, "336": 581, "65x": 581, "fcn": 581, "googlenet": 581, "740": 581, "587": 581, "770": 581, "567": 581, "824": 581, "601": 581, "819": 581, "597": 581, "45x": 581, "613": 581, "506": 581, "2454": 581, "1543": 581, "2164": 581, "1564": 581, "38x": 581, "2147": 581, "1046": 581, "1877": 581, "1054": 581, "mobilenetv2": 581, "2751": 581, "1797": 581, "2656": 581, "1835": 581, "7615": 581, "7646": 581, "764": 581, "901": 581, "434": 581, "141": 581, "7614": 581, "575": 581, "952": 581, "433": 581, "7226": 581, "7229": 581, "761": 581, "432": 581, "615": 581, "722": 581, "032": 581, "894": 581, "885": 581, "454": 581, "95x": 581, "603": 581, "455": 581, "644": 581, "636": 581, "254": 581, "791": 581, "shufflenet": 581, "2298": 581, "55": 581, "1480": 581, "55x": 581, "1951": 581, "1490": 581, "squeezenet": 581, "2588": 581, "1605": 581, "61x": 581, "2566": 581, "1936": 581, "725": 581, "570": 581, "27x": 581, "666": 581, "539": 581, "641": 581, "519": 581, "633": 581, "492": 581, "542": 581, "401": 581, "68x": 581, "tini": 581, "yolov3": 581, "648": 581, "518": 581, "221": 581, "319": 581, "307": 581, "30x": 581, "yolov4": 581, "zfnet": 581, "459": 581, "261": 581, "460": 581, "264": 581, "74x": 581, "441": 581, "337": 581, "272": 581, "211": 581, "152": 581, "423": 581, "180": 581, "311": 581, "69x": 581, "taskdataset": 581, "accuracyspars": 581, "ratiospars": 581, "commentsbalanc": 581, "unbalanc": 581, "classificationimagenet": 581, "76top": 581, "13top": 581, "magnitudepost": 581, "magnitudequant": 581, "answeringsquad": 581, "34f1": 581, "2x1": 581, "lassounbalanc": 581, "classificationmnli": 581, "mm": 581, "allbalanc": 581, "classificationsst": 581, "32accuraci": 581, "sensitivitybalanc": 581, "classificationqqp": 581, "classificationqnli": 581, "54accuraci": 581, "em": 581, "87f1": 581, "momentumunbalanc": 581, "momentumbalanc": 581, "classificationmrpc": 581, "52f1": 581, "61accuraci": 581, "7965": 581, "wideresnet40": 581, "9522": 581, "8178": 581, "0213": 581, "8235": 581, "027": 581, "5494": 581, "7153": 581, "5540": 581, "0046": 581, "5523": 581, "0029": 581, "vgg": 581, "7022": 581, "7415": 581, "7025": 581, "0003": 581, "6739": 581, "7399": 581, "6845": 581, "0106": 581, "7034": 581, "8382": 581, "bilstm": 581, "sst": 581, "8314": 581, "9403": 581, "9048": 581, "0734": 581, "7323": 581, "8256": 581, "8084": 581, "8814": 581, "7442": 581, "8371": 581, "0119": 581, "0115": 581, "tinybert": 581, "8018": 581, "8044": 581, "8363": 581, "8411": 581, "8025": 581, "8074": 581, "0007": 581, "0030": 581, "8626": 581, "8213": 581, "9091": 581, "8782": 581, "8684": 581, "8259": 581, "0058": 581, "distilroberta": 581, "6057": 581, "6455": 581, "6187": 581, "0130": 581, "c6i": 581, "2xlarg": 581, "c6a": 581, "c6g": 581, "a100cuda": 581}, "objects": {"": [[32, 0, 0, "-", "644ec953a7dc_pruning_support"], [33, 0, 0, "-", "6ece06672ed3_v1_14"], [34, 0, 0, "-", "6f0d0f71d92e_v1_13"], [35, 0, 0, "-", "9e89549a08c8_v1_11"], [36, 0, 0, "-", "block_mask"], [37, 0, 0, "-", "env"], [300, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[33, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [33, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[37, 1, 1, "", "run_migrations_offline"], [37, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[300, 2, 1, "", "Benchmark"], [300, 2, 1, "", "DistillationConfig"], [300, 2, 1, "", "WeightPruningConfig"], [39, 0, 0, "-", "adaptor"], [176, 0, 0, "-", "algorithm"], [178, 0, 0, "-", "benchmark"], [181, 0, 0, "-", "conf"], [183, 0, 0, "-", "config"], [184, 0, 0, "-", "contrib"], [209, 0, 0, "-", "data"], [258, 0, 0, "-", "experimental"], [307, 0, 0, "-", "metric"], [309, 0, 0, "-", "mix_precision"], [311, 0, 0, "-", "model"], [319, 0, 0, "-", "objective"], [321, 0, 0, "-", "pruner"], [335, 0, 0, "-", "quantization"], [342, 0, 0, "-", "strategy"], [351, 0, 0, "-", "training"], [355, 0, 0, "-", "utils"], [497, 0, 0, "-", "ux"], [543, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[38, 0, 0, "-", "adaptor"], [40, 0, 0, "-", "keras"], [41, 0, 0, "-", "keras_utils"], [43, 0, 0, "-", "mxnet"], [44, 0, 0, "-", "mxnet_utils"], [46, 0, 0, "-", "onnxrt"], [48, 0, 0, "-", "ox_utils"], [71, 0, 0, "-", "pytorch"], [72, 0, 0, "-", "query"], [73, 0, 0, "-", "tensorflow"], [133, 0, 0, "-", "tf_utils"], [170, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[38, 2, 1, "", "Adaptor"], [38, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[38, 3, 1, "", "convert"], [38, 3, 1, "", "evaluate"], [38, 3, 1, "", "inspect_tensor"], [38, 3, 1, "", "quantize"], [38, 3, 1, "", "quantize_input"], [38, 3, 1, "", "query_fused_patterns"], [38, 3, 1, "", "query_fw_capability"], [38, 3, 1, "", "save"], [38, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[40, 2, 1, "", "KerasAdaptor"], [40, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[40, 3, 1, "", "convert"], [40, 3, 1, "", "evaluate"], [40, 3, 1, "", "get_optype_wise_ability"], [40, 3, 1, "", "inspect_tensor"], [40, 3, 1, "", "quantize"], [40, 3, 1, "", "quantize_input"], [40, 3, 1, "", "query_fw_capability"], [40, 3, 1, "", "save"], [40, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[40, 3, 1, "", "get_op_types"], [40, 3, 1, "", "get_op_types_by_precision"], [40, 3, 1, "", "get_precisions"], [40, 3, 1, "", "get_quantization_capability"], [40, 3, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[42, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[43, 2, 1, "", "MXNetQuery"], [43, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MXNetQuery": [[43, 3, 1, "", "get_fuse_patterns"], [43, 3, 1, "", "get_mixed_precision_combination"], [43, 3, 1, "", "get_op_types"], [43, 3, 1, "", "get_precisions"], [43, 3, 1, "", "get_quantization_capability"], [43, 3, 1, "", "get_version"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[43, 3, 1, "", "evaluate"], [43, 3, 1, "", "inspect_tensor"], [43, 3, 1, "", "quantize"], [43, 3, 1, "", "query_fw_capability"], [43, 3, 1, "", "recover_tuned_model"], [43, 3, 1, "", "save"], [43, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[45, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[45, 2, 1, "", "CalibCollector"], [45, 2, 1, "", "OpType"], [45, 2, 1, "", "TensorCollector"], [45, 1, 1, "", "calib_model"], [45, 1, 1, "", "check_mx_version"], [45, 1, 1, "", "distribute_calib_tensors"], [45, 1, 1, "", "ensure_list"], [45, 1, 1, "", "fuse"], [45, 1, 1, "", "is_model_quantized"], [45, 1, 1, "", "isiterable"], [45, 1, 1, "", "make_module"], [45, 1, 1, "", "make_nc_model"], [45, 1, 1, "", "make_symbol_block"], [45, 1, 1, "", "parse_tune_config"], [45, 1, 1, "", "prepare_model_data"], [45, 1, 1, "", "quantize_sym_model"], [45, 1, 1, "", "query_quantizable_nodes"], [45, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[46, 2, 1, "", "ONNXRTQuery"], [46, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [46, 2, 1, "", "ONNXRT_QDQAdaptor"], [46, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [46, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[46, 3, 1, "", "get_graph_optimization"], [46, 3, 1, "", "get_op_types"], [46, 3, 1, "", "get_op_types_by_precision"], [46, 3, 1, "", "get_precisions"], [46, 3, 1, "", "get_quantization_capability"], [46, 3, 1, "", "get_version"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[46, 3, 1, "", "evaluate"], [46, 3, 1, "", "inspect_tensor"], [46, 3, 1, "", "quantize"], [46, 3, 1, "", "query_fw_capability"], [46, 3, 1, "", "recover"], [46, 3, 1, "", "save"], [46, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.ox_utils": [[47, 0, 0, "-", "calibration"], [60, 0, 0, "-", "operators"], [69, 0, 0, "-", "quantizer"], [70, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[47, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[47, 3, 1, "", "augment_graph"], [47, 3, 1, "", "calculate_quantization_params"], [47, 3, 1, "", "calculate_scale_zeropoint"], [47, 3, 1, "", "dump_calibration"], [47, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[49, 0, 0, "-", "activation"], [50, 0, 0, "-", "argmax"], [51, 0, 0, "-", "attention"], [52, 0, 0, "-", "binary_op"], [53, 0, 0, "-", "concat"], [54, 0, 0, "-", "conv"], [55, 0, 0, "-", "direct_q8"], [56, 0, 0, "-", "embed_layernorm"], [57, 0, 0, "-", "gather"], [58, 0, 0, "-", "gavgpool"], [59, 0, 0, "-", "gemm"], [61, 0, 0, "-", "lstm"], [62, 0, 0, "-", "matmul"], [63, 0, 0, "-", "maxpool"], [64, 0, 0, "-", "ops"], [65, 0, 0, "-", "pad"], [66, 0, 0, "-", "pooling"], [67, 0, 0, "-", "resize"], [68, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[64, 1, 1, "", "op_registry"], [64, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.util": [[70, 2, 1, "", "QuantFormat"], [70, 2, 1, "", "QuantType"], [70, 2, 1, "", "QuantizationMode"], [70, 2, 1, "", "QuantizedInitializer"], [70, 2, 1, "", "QuantizedValue"], [70, 2, 1, "", "QuantizedValueType"], [70, 1, 1, "", "attribute_to_kwarg"], [70, 1, 1, "", "cast_tensor"], [70, 1, 1, "", "find_by_name"], [70, 1, 1, "", "quantize_data"], [70, 1, 1, "", "quantize_data_with_scale_zero"]], "neural_compressor.adaptor.pytorch": [[71, 2, 1, "", "PyTorchAdaptor"], [71, 2, 1, "", "PyTorchQuery"], [71, 2, 1, "", "PyTorch_FXAdaptor"], [71, 2, 1, "", "PyTorch_IPEXAdaptor"], [71, 2, 1, "", "TemplateAdaptor"], [71, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[71, 3, 1, "", "evaluate"], [71, 3, 1, "", "get_non_quant_modules"], [71, 3, 1, "", "inspect_tensor"], [71, 3, 1, "", "is_fused_child"], [71, 3, 1, "", "is_fused_op"], [71, 3, 1, "", "is_last_fused_child"], [71, 3, 1, "", "quantize"], [71, 3, 1, "", "query_fw_capability"], [71, 3, 1, "", "save"], [71, 3, 1, "", "set_tensor"], [71, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[71, 3, 1, "", "get_op_types"], [71, 3, 1, "", "get_op_types_by_precision"], [71, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[71, 3, 1, "", "calculate_op_sensitivity"], [71, 3, 1, "", "convert_sub_graph"], [71, 3, 1, "", "evaluate"], [71, 3, 1, "", "fuse_fx_model"], [71, 3, 1, "", "prepare_sub_graph"], [71, 3, 1, "", "quantize"], [71, 3, 1, "", "query_fw_capability"], [71, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[71, 3, 1, "", "evaluate"], [71, 3, 1, "", "inspect_tensor"], [71, 3, 1, "", "quantize"], [71, 3, 1, "", "query_fw_capability"], [71, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[71, 3, 1, "", "calculate_hessian_trace"], [71, 3, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[72, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[72, 3, 1, "", "get_fuse_patterns"], [72, 3, 1, "", "get_mixed_precision_combination"], [72, 3, 1, "", "get_op_types"], [72, 3, 1, "", "get_precisions"], [72, 3, 1, "", "get_quantization_capability"], [72, 3, 1, "", "get_version"], [72, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[73, 2, 1, "", "TensorFlowAdaptor"], [73, 2, 1, "", "TensorflowQuery"], [73, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[73, 3, 1, "", "calculate_op_sensitivity"], [73, 3, 1, "", "convert"], [73, 3, 1, "", "evaluate"], [73, 3, 1, "", "fused_node_mapping"], [73, 3, 1, "", "get_optype_wise_ability"], [73, 3, 1, "", "inspect_activation"], [73, 3, 1, "", "inspect_tensor"], [73, 3, 1, "", "inspect_weight_and_bias"], [73, 3, 1, "", "qat_convert"], [73, 3, 1, "", "quantize"], [73, 3, 1, "", "quantize_input"], [73, 3, 1, "", "query_fw_capability"], [73, 3, 1, "", "recover_tuned_model"], [73, 3, 1, "", "save"], [73, 3, 1, "", "set_tensor"], [73, 3, 1, "", "tuning_cfg_to_fw"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[73, 3, 1, "", "generate_internal_patterns"], [73, 3, 1, "", "get_eightbit_patterns"], [73, 3, 1, "", "get_fuse_patterns"], [73, 3, 1, "", "get_mixed_precision_combination"], [73, 3, 1, "", "get_op_types"], [73, 3, 1, "", "get_op_types_by_precision"], [73, 3, 1, "", "get_precisions"], [73, 3, 1, "", "get_quantization_capability"], [73, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[73, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[74, 0, 0, "-", "graph_converter"], [75, 0, 0, "-", "graph_converter_without_calib"], [114, 0, 0, "-", "graph_rewriter"], [132, 0, 0, "-", "graph_util"], [134, 0, 0, "-", "quantize_graph"], [161, 0, 0, "-", "quantize_graph_common"], [164, 0, 0, "-", "transform_graph"], [167, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[77, 0, 0, "-", "bf16"], [102, 0, 0, "-", "generic"], [113, 0, 0, "-", "graph_base"], [122, 0, 0, "-", "int8"], [128, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[76, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[76, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[76, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[78, 0, 0, "-", "convert_add_to_biasadd"], [79, 0, 0, "-", "convert_layout"], [80, 0, 0, "-", "convert_leakyrelu"], [81, 0, 0, "-", "convert_nan_to_random"], [82, 0, 0, "-", "convert_placeholder_to_const"], [83, 0, 0, "-", "dequantize_cast_optimizer"], [84, 0, 0, "-", "dilated_contraction"], [85, 0, 0, "-", "dummy_biasadd"], [86, 0, 0, "-", "expanddims_optimizer"], [87, 0, 0, "-", "fetch_weight_from_reshape"], [88, 0, 0, "-", "fold_batch_norm"], [89, 0, 0, "-", "fold_constant"], [90, 0, 0, "-", "fuse_biasadd_add"], [91, 0, 0, "-", "fuse_column_wise_mul"], [92, 0, 0, "-", "fuse_conv_with_math"], [93, 0, 0, "-", "fuse_decomposed_bn"], [94, 0, 0, "-", "fuse_decomposed_in"], [95, 0, 0, "-", "fuse_gelu"], [96, 0, 0, "-", "fuse_layer_norm"], [97, 0, 0, "-", "fuse_pad_with_conv"], [98, 0, 0, "-", "fuse_pad_with_fp32_conv"], [99, 0, 0, "-", "fuse_reshape_transpose"], [100, 0, 0, "-", "graph_cse_optimizer"], [101, 0, 0, "-", "grappler_pass"], [103, 0, 0, "-", "insert_print_node"], [104, 0, 0, "-", "move_squeeze_after_relu"], [105, 0, 0, "-", "pre_optimize"], [106, 0, 0, "-", "remove_training_nodes"], [107, 0, 0, "-", "rename_batch_norm"], [108, 0, 0, "-", "split_shared_input"], [109, 0, 0, "-", "strip_equivalent_nodes"], [110, 0, 0, "-", "strip_unused_nodes"], [111, 0, 0, "-", "switch_optimizer"], [112, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[78, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[78, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[79, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[79, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[80, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[80, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[81, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[81, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[82, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[82, 3, 1, "", "do_transformation"], [82, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[83, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[83, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[84, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[84, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[85, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[85, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[86, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[86, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[87, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[87, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[88, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[88, 3, 1, "", "do_transformation"], [88, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[89, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[89, 3, 1, "", "check_all_folded"], [89, 3, 1, "", "check_const_inputs"], [89, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[90, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[90, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[91, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[91, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[92, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[92, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[93, 1, 1, "", "get_const_dim_count"], [93, 1, 1, "", "node_from_map"], [93, 1, 1, "", "node_name_from_input"], [93, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[94, 1, 1, "", "get_const_dim_count"], [94, 1, 1, "", "node_from_map"], [94, 1, 1, "", "node_name_from_input"], [94, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[95, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[95, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[96, 2, 1, "", "FuseLayerNormOptimizer"], [96, 1, 1, "", "node_from_map"], [96, 1, 1, "", "node_name_from_input"], [96, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[96, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[97, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[97, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[98, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[98, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[99, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[99, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[100, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[100, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[101, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[101, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[103, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[103, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[104, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[104, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[106, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[106, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[107, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[107, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[108, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[108, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[109, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[109, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[110, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[110, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[111, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[111, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[112, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[112, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[113, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[113, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[115, 0, 0, "-", "freeze_fake_quant"], [116, 0, 0, "-", "freeze_value"], [117, 0, 0, "-", "freeze_value_without_calib"], [118, 0, 0, "-", "fuse_conv_redundant_dequantize"], [119, 0, 0, "-", "fuse_conv_requantize"], [120, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [121, 0, 0, "-", "fuse_matmul_requantize"], [123, 0, 0, "-", "meta_op_optimizer"], [124, 0, 0, "-", "post_hostconst_converter"], [125, 0, 0, "-", "post_quantized_op_cse"], [126, 0, 0, "-", "rnn_convert"], [127, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[115, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[115, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[116, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[116, 3, 1, "", "do_transformation"], [116, 3, 1, "", "generate_output_graph"], [116, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[117, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[117, 3, 1, "", "generate_output_graph"], [117, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[118, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[118, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[119, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[119, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[120, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[120, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[121, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [121, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [121, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [121, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[121, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[121, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[121, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[121, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[123, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[123, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[124, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[124, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[125, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[125, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[126, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[126, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[127, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[127, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[129, 0, 0, "-", "insert_qdq_pattern"], [130, 0, 0, "-", "merge_duplicated_qdq"], [131, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[129, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[129, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[130, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[130, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[131, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[131, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[132, 2, 1, "", "GraphAnalyzer"], [132, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[132, 3, 1, "", "add_node"], [132, 3, 1, "", "dump_graph"], [132, 3, 1, "", "get_graph_input_output"], [132, 4, 1, "", "graph"], [132, 3, 1, "", "has_positive_input"], [132, 3, 1, "", "parse_graph"], [132, 3, 1, "", "query_fusion_pattern_nodes"], [132, 3, 1, "", "remove_node"], [132, 3, 1, "", "remove_node_with_single_input_output"], [132, 3, 1, "", "replace_const_node"], [132, 3, 1, "", "replace_constant_graph_with_constant_node"], [132, 3, 1, "", "replace_node"], [132, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[132, 3, 1, "", "compare_node_attr"], [132, 3, 1, "", "create_constant_node"], [132, 3, 1, "", "create_node"], [132, 3, 1, "", "node_name_from_input"], [132, 3, 1, "", "set_attr_bool"], [132, 3, 1, "", "set_attr_dtype"], [132, 3, 1, "", "set_attr_float"], [132, 3, 1, "", "set_attr_int"], [132, 3, 1, "", "set_attr_int_list"], [132, 3, 1, "", "set_attr_string"], [132, 3, 1, "", "set_attr_string_list"], [132, 3, 1, "", "set_attr_tensor"], [132, 3, 1, "", "set_attr_type_list"], [132, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[136, 0, 0, "-", "qat"], [152, 0, 0, "-", "qdq"], [154, 0, 0, "-", "quantize_graph_base"], [155, 0, 0, "-", "quantize_graph_bn"], [156, 0, 0, "-", "quantize_graph_concatv2"], [157, 0, 0, "-", "quantize_graph_conv"], [158, 0, 0, "-", "quantize_graph_for_intel_cpu"], [159, 0, 0, "-", "quantize_graph_matmul"], [160, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[135, 0, 0, "-", "fake_quantize"], [137, 0, 0, "-", "quantize_config"], [138, 0, 0, "-", "quantize_helper"], [139, 0, 0, "-", "quantize_layers"], [144, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[135, 2, 1, "", "FakeQuantize"], [135, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[135, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[135, 3, 1, "", "from_config"], [135, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[137, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[137, 3, 1, "", "add_quantize_recipe"], [137, 3, 1, "", "clear_quantize_recipe"], [137, 3, 1, "", "get_quantize_recipe"], [137, 3, 1, "", "is_empty"], [137, 3, 1, "", "query_layer"], [137, 3, 1, "", "remove_layer"], [137, 3, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[138, 1, 1, "", "init_quantize_config"], [138, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[140, 0, 0, "-", "optimize_layer"], [141, 0, 0, "-", "quantize_layer_add"], [142, 0, 0, "-", "quantize_layer_base"], [143, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[141, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[143, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[144, 2, 1, "", "QuantizeWrapper"], [144, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[144, 3, 1, "", "build"], [144, 3, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[144, 3, 1, "", "build"], [144, 3, 1, "", "call"], [144, 3, 1, "", "compute_output_shape"], [144, 3, 1, "", "from_config"], [144, 3, 1, "", "get_config"], [144, 4, 1, "", "losses"], [144, 4, 1, "", "non_trainable_weights"], [144, 3, 1, "", "query_input_index"], [144, 4, 1, "", "trainable"], [144, 4, 1, "", "trainable_weights"], [144, 4, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[145, 0, 0, "-", "fuse_qdq_bn"], [146, 0, 0, "-", "fuse_qdq_concatv2"], [147, 0, 0, "-", "fuse_qdq_conv"], [148, 0, 0, "-", "fuse_qdq_deconv"], [149, 0, 0, "-", "fuse_qdq_in"], [150, 0, 0, "-", "fuse_qdq_matmul"], [151, 0, 0, "-", "fuse_qdq_pooling"], [153, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[145, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[145, 3, 1, "", "apply_the_transform"], [145, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[146, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[146, 3, 1, "", "apply_the_transform"], [146, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[147, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[147, 3, 1, "", "apply_the_transform"], [147, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[148, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[148, 3, 1, "", "apply_the_transform"], [148, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[149, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[149, 3, 1, "", "apply_the_transform"], [149, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[150, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[150, 3, 1, "", "apply_batchmatmulv2_fusion"], [150, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [150, 3, 1, "", "apply_matmul_biasadd_fusion"], [150, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [150, 3, 1, "", "apply_the_transform"], [150, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[151, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[151, 3, 1, "", "apply_the_transform"], [151, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[153, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[153, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[154, 2, 1, "", "QuantizeGraphBase"], [154, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[154, 3, 1, "", "do_transform"], [154, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[154, 3, 1, "", "add_output_graph_node"], [154, 3, 1, "", "apply_the_transform"], [154, 3, 1, "", "create_nodes_map"], [154, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[155, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[155, 3, 1, "", "apply_the_transform"], [155, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[156, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[156, 3, 1, "", "apply_the_transform"], [156, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[157, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[157, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [157, 3, 1, "", "apply_the_transform"], [157, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[158, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[158, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[159, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[159, 3, 1, "", "apply_the_transform"], [159, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[160, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[160, 3, 1, "", "apply_the_transform"], [160, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[161, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[161, 3, 1, "", "copy_attr"], [161, 3, 1, "", "create_constant_node"], [161, 3, 1, "", "create_node"], [161, 3, 1, "", "ensure_tensor_name_has_port"], [161, 3, 1, "", "get_sorted_graph"], [161, 3, 1, "", "node_name_from_input"], [161, 3, 1, "", "remove_training_nodes"], [161, 3, 1, "", "set_attr_bool"], [161, 3, 1, "", "set_attr_dtype"], [161, 3, 1, "", "set_attr_float"], [161, 3, 1, "", "set_attr_int"], [161, 3, 1, "", "set_attr_string"], [161, 3, 1, "", "set_attr_string_list"], [161, 3, 1, "", "set_attr_tensor"], [161, 3, 1, "", "set_attr_type_list"], [161, 3, 1, "", "split_shared_inputs"], [161, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[162, 0, 0, "-", "bias_correction"], [163, 0, 0, "-", "graph_transform_base"], [165, 0, 0, "-", "insert_logging"], [166, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[162, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[162, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[165, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[165, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[166, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[166, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[167, 1, 1, "", "disable_random"], [167, 1, 1, "", "get_tensor_by_name"], [167, 1, 1, "", "get_tensor_val_from_graph_node"], [167, 1, 1, "", "is_ckpt_format"], [167, 1, 1, "", "is_saved_model_format"], [167, 1, 1, "", "iterator_sess_run"], [167, 1, 1, "", "read_graph"], [167, 1, 1, "", "strip_equivalent_nodes"], [167, 1, 1, "", "strip_unused_nodes"], [167, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[168, 0, 0, "-", "bf16_convert"], [169, 0, 0, "-", "hawq_metric"], [171, 0, 0, "-", "onnx"], [172, 0, 0, "-", "symbolic_trace"], [173, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[169, 2, 1, "", "HessianTrace"], [169, 1, 1, "", "compare_weights"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[169, 3, 1, "", "get_act_gap"], [169, 3, 1, "", "get_avg_traces"], [169, 3, 1, "", "is_fused_module"], [169, 3, 1, "", "mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.util": [[173, 1, 1, "", "append_attr"], [173, 1, 1, "", "get_embedding_contiguous"], [173, 1, 1, "", "get_mse_order_per_fp32"], [173, 1, 1, "", "is_fused_module"]], "neural_compressor.algorithm": [[176, 2, 1, "", "Algorithm"], [176, 2, 1, "", "AlgorithmScheduler"], [174, 0, 0, "-", "algorithm"], [176, 1, 1, "", "algorithm_registry"], [175, 0, 0, "-", "fast_bias_correction"], [177, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[174, 2, 1, "", "Algorithm"], [174, 2, 1, "", "AlgorithmScheduler"], [174, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[175, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[177, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[178, 2, 1, "", "Benchmark"], [178, 1, 1, "", "fit"]], "neural_compressor.conf": [[179, 0, 0, "-", "config"], [180, 0, 0, "-", "dotdict"], [182, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[179, 2, 1, "", "Benchmark_Conf"], [179, 2, 1, "", "Conf"], [179, 2, 1, "", "DefaultConf"], [179, 2, 1, "", "Distillation_Conf"], [179, 2, 1, "", "Graph_Optimization_Conf"], [179, 2, 1, "", "MixedPrecision_Conf"], [179, 2, 1, "", "NASConfig"], [179, 2, 1, "", "PrunerV2"], [179, 2, 1, "", "Pruning_Conf"], [179, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[180, 2, 1, "", "DotDict"], [180, 1, 1, "", "deep_get"], [180, 1, 1, "", "deep_set"]], "neural_compressor.config": [[183, 2, 1, "", "DistillationConfig"], [183, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[185, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[186, 0, 0, "-", "sigopt"], [187, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[186, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[186, 3, 1, "", "next_tune_cfg"], [186, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[187, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[187, 3, 1, "", "stop"], [187, 3, 1, "", "traverse"]], "neural_compressor.data": [[209, 2, 1, "", "BaseTransform"], [209, 2, 1, "", "DataLoader"], [209, 2, 1, "", "Dataset"], [209, 2, 1, "", "Datasets"], [209, 2, 1, "", "FILTERS"], [209, 2, 1, "", "Filter"], [209, 2, 1, "", "IterableDataset"], [209, 2, 1, "", "Postprocess"], [209, 2, 1, "", "TRANSFORMS"], [192, 0, 0, "-", "dataloaders"], [209, 1, 1, "", "dataset_registry"], [204, 0, 0, "-", "datasets"], [209, 1, 1, "", "filter_registry"], [208, 0, 0, "-", "filters"], [209, 1, 1, "", "transform_registry"], [212, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[209, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[192, 2, 1, "", "DataLoader"], [188, 0, 0, "-", "base_dataloader"], [189, 0, 0, "-", "dataloader"], [190, 0, 0, "-", "default_dataloader"], [191, 0, 0, "-", "fetcher"], [193, 0, 0, "-", "mxnet_dataloader"], [194, 0, 0, "-", "onnxrt_dataloader"], [195, 0, 0, "-", "pytorch_dataloader"], [196, 0, 0, "-", "sampler"], [197, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[188, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[188, 3, 1, "", "batch"], [188, 4, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[189, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[190, 2, 1, "", "DefaultDataLoader"], [190, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[190, 3, 1, "", "batch"], [190, 4, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[191, 2, 1, "", "Fetcher"], [191, 2, 1, "", "IndexFetcher"], [191, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[193, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[194, 2, 1, "", "ONNXRTBertDataLoader"], [194, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[195, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[196, 2, 1, "", "BatchSampler"], [196, 2, 1, "", "IterableSampler"], [196, 2, 1, "", "Sampler"], [196, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[197, 2, 1, "", "TFDataDataLoader"], [197, 2, 1, "", "TensorflowBertDataLoader"], [197, 2, 1, "", "TensorflowDataLoader"], [197, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[197, 3, 1, "", "batch"]], "neural_compressor.data.datasets": [[204, 2, 1, "", "Dataset"], [204, 2, 1, "", "Datasets"], [204, 2, 1, "", "IterableDataset"], [198, 0, 0, "-", "bert_dataset"], [199, 0, 0, "-", "coco_dataset"], [200, 0, 0, "-", "dataset"], [204, 1, 1, "", "dataset_registry"], [201, 0, 0, "-", "dummy_dataset"], [202, 0, 0, "-", "dummy_dataset_v2"], [203, 0, 0, "-", "imagenet_dataset"], [205, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[198, 2, 1, "", "InputFeatures"], [198, 2, 1, "", "ONNXRTBertDataset"], [198, 2, 1, "", "ParseDecodeBert"], [198, 2, 1, "", "PytorchBertDataset"], [198, 2, 1, "", "TensorflowBertDataset"], [198, 2, 1, "", "TensorflowModelZooBertDataset"], [198, 1, 1, "", "convert_examples_to_features"], [198, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[198, 3, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[199, 2, 1, "", "COCONpy"], [199, 2, 1, "", "COCORaw"], [199, 2, 1, "", "COCORecordDataset"], [199, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[200, 2, 1, "", "CIFAR10"], [200, 2, 1, "", "CIFAR100"], [200, 2, 1, "", "Dataset"], [200, 2, 1, "", "Datasets"], [200, 2, 1, "", "FashionMNIST"], [200, 2, 1, "", "ImageFolder"], [200, 2, 1, "", "IterableDataset"], [200, 2, 1, "", "MNIST"], [200, 2, 1, "", "MXNetCIFAR10"], [200, 2, 1, "", "MXNetCIFAR100"], [200, 2, 1, "", "MXNetDatasets"], [200, 2, 1, "", "MXNetFashionMNIST"], [200, 2, 1, "", "MXNetImageFolder"], [200, 2, 1, "", "MXNetMNIST"], [200, 2, 1, "", "ONNXRTITDatasets"], [200, 2, 1, "", "ONNXRTQLDatasets"], [200, 2, 1, "", "PyTorchDatasets"], [200, 2, 1, "", "PytorchCIFAR10"], [200, 2, 1, "", "PytorchCIFAR100"], [200, 2, 1, "", "PytorchFashionMNIST"], [200, 2, 1, "", "PytorchMNIST"], [200, 2, 1, "", "PytorchMxnetWrapDataset"], [200, 2, 1, "", "PytorchMxnetWrapFunction"], [200, 2, 1, "", "TensorflowCIFAR10"], [200, 2, 1, "", "TensorflowCIFAR100"], [200, 2, 1, "", "TensorflowDatasets"], [200, 2, 1, "", "TensorflowFashionMNIST"], [200, 2, 1, "", "TensorflowImageFolder"], [200, 2, 1, "", "TensorflowImageRecord"], [200, 2, 1, "", "TensorflowMNIST"], [200, 2, 1, "", "TensorflowTFRecordDataset"], [200, 2, 1, "", "TensorflowVOCRecord"], [200, 1, 1, "", "calculate_md5"], [200, 1, 1, "", "check_integrity"], [200, 1, 1, "", "dataset_registry"], [200, 1, 1, "", "download_url"], [200, 5, 1, "", "framework_datasets"], [200, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[200, 3, 1, "", "download"], [200, 3, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[200, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[200, 4, 1, "", "class_to_idx"], [200, 3, 1, "", "download"], [200, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[201, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[202, 2, 1, "", "DummyDataset"], [202, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[203, 2, 1, "", "ImagenetRaw"], [203, 2, 1, "", "MXNetImagenetRaw"], [203, 2, 1, "", "ONNXRTImagenetDataset"], [203, 2, 1, "", "PytorchImagenetRaw"], [203, 2, 1, "", "TensorflowImagenetDataset"], [203, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[205, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[208, 2, 1, "", "FILTERS"], [208, 2, 1, "", "Filter"], [206, 0, 0, "-", "coco_filter"], [207, 0, 0, "-", "filter"], [208, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[206, 2, 1, "", "LabelBalanceCOCORawFilter"], [206, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[207, 2, 1, "", "FILTERS"], [207, 2, 1, "", "Filter"], [207, 2, 1, "", "MXNetFilters"], [207, 2, 1, "", "ONNXRTITFilters"], [207, 2, 1, "", "ONNXRTQLFilters"], [207, 2, 1, "", "PyTorchFilters"], [207, 2, 1, "", "TensorflowFilters"], [207, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[212, 2, 1, "", "BaseTransform"], [212, 2, 1, "", "Postprocess"], [212, 2, 1, "", "TRANSFORMS"], [210, 0, 0, "-", "coco_transform"], [211, 0, 0, "-", "imagenet_transform"], [213, 0, 0, "-", "postprocess"], [214, 0, 0, "-", "tokenization"], [215, 0, 0, "-", "transform"], [212, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TRANSFORMS": [[212, 3, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[210, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[211, 2, 1, "", "BilinearImagenetTransform"], [211, 2, 1, "", "LabelShift"], [211, 2, 1, "", "ONNXResizeCropImagenetTransform"], [211, 2, 1, "", "OnnxBilinearImagenetTransform"], [211, 2, 1, "", "ParseDecodeImagenet"], [211, 2, 1, "", "ParseDecodeImagenetTransform"], [211, 2, 1, "", "QuantizedInput"], [211, 2, 1, "", "ResizeWithAspectRatio"], [211, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[213, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[214, 2, 1, "", "BasicTokenizer"], [214, 2, 1, "", "FullTokenizer"], [214, 2, 1, "", "WordpieceTokenizer"], [214, 1, 1, "", "convert_by_vocab"], [214, 1, 1, "", "convert_to_unicode"], [214, 1, 1, "", "load_vocab"], [214, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[214, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[214, 3, 1, "", "convert_ids_to_tokens"], [214, 3, 1, "", "convert_tokens_to_ids"], [214, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[214, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[215, 2, 1, "", "AlignImageChannelTransform"], [215, 2, 1, "", "BaseTransform"], [215, 2, 1, "", "CastONNXTransform"], [215, 2, 1, "", "CastPyTorchTransform"], [215, 2, 1, "", "CastTFTransform"], [215, 2, 1, "", "CenterCropTFTransform"], [215, 2, 1, "", "CenterCropTransform"], [215, 2, 1, "", "CollectTransform"], [215, 2, 1, "", "ComposeTransform"], [215, 2, 1, "", "CropResizeTFTransform"], [215, 2, 1, "", "CropResizeTransform"], [215, 2, 1, "", "CropToBoundingBox"], [215, 2, 1, "", "InputFeatures"], [215, 2, 1, "", "MXNetCropResizeTransform"], [215, 2, 1, "", "MXNetCropToBoundingBox"], [215, 2, 1, "", "MXNetNormalizeTransform"], [215, 2, 1, "", "MXNetTransforms"], [215, 2, 1, "", "MXNetTranspose"], [215, 2, 1, "", "NormalizeTFTransform"], [215, 2, 1, "", "NormalizeTransform"], [215, 2, 1, "", "ONNXRTCropToBoundingBox"], [215, 2, 1, "", "ONNXRTITTransforms"], [215, 2, 1, "", "ONNXRTQLTransforms"], [215, 2, 1, "", "PaddedCenterCropTransform"], [215, 2, 1, "", "ParseDecodeVocTransform"], [215, 2, 1, "", "PyTorchAlignImageChannel"], [215, 2, 1, "", "PyTorchCropResizeTransform"], [215, 2, 1, "", "PyTorchNormalizeTransform"], [215, 2, 1, "", "PyTorchTransforms"], [215, 2, 1, "", "PyTorchTranspose"], [215, 2, 1, "", "PytorchMxnetTransform"], [215, 2, 1, "", "PytorchMxnetWrapFunction"], [215, 2, 1, "", "RandomCropTFTransform"], [215, 2, 1, "", "RandomCropTransform"], [215, 2, 1, "", "RandomHorizontalFlip"], [215, 2, 1, "", "RandomResizedCropMXNetTransform"], [215, 2, 1, "", "RandomResizedCropPytorchTransform"], [215, 2, 1, "", "RandomResizedCropTFTransform"], [215, 2, 1, "", "RandomResizedCropTransform"], [215, 2, 1, "", "RandomVerticalFlip"], [215, 2, 1, "", "RescaleKerasPretrainTransform"], [215, 2, 1, "", "RescaleTFTransform"], [215, 2, 1, "", "RescaleTransform"], [215, 2, 1, "", "ResizeMXNetTransform"], [215, 2, 1, "", "ResizePytorchTransform"], [215, 2, 1, "", "ResizeTFTransform"], [215, 2, 1, "", "ResizeTransform"], [215, 2, 1, "", "ResizeWithRatio"], [215, 2, 1, "", "SquadExample"], [215, 2, 1, "", "TFModelZooCollectTransform"], [215, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [215, 2, 1, "", "TFSquadV1PostTransform"], [215, 2, 1, "", "TRANSFORMS"], [215, 2, 1, "", "TensorflowCropToBoundingBox"], [215, 2, 1, "", "TensorflowRandomHorizontalFlip"], [215, 2, 1, "", "TensorflowRandomVerticalFlip"], [215, 2, 1, "", "TensorflowResizeWithRatio"], [215, 2, 1, "", "TensorflowTransform"], [215, 2, 1, "", "TensorflowTransforms"], [215, 2, 1, "", "TensorflowTranspose"], [215, 2, 1, "", "TensorflowWrapFunction"], [215, 2, 1, "", "ToArray"], [215, 2, 1, "", "ToNDArrayTransform"], [215, 2, 1, "", "Transforms"], [215, 2, 1, "", "Transpose"], [215, 1, 1, "", "convert_examples_to_features"], [215, 1, 1, "", "get_final_text"], [215, 1, 1, "", "get_torchvision_map"], [215, 1, 1, "", "read_squad_examples"], [215, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[215, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[215, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[215, 3, 1, "", "get_postprocess_result"], [215, 3, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[215, 3, 1, "", "register"]], "neural_compressor.experimental": [[258, 2, 1, "", "Benchmark"], [258, 2, 1, "", "Component"], [258, 2, 1, "", "Distillation"], [258, 2, 1, "", "Graph_Optimization"], [258, 2, 1, "", "MixedPrecision"], [258, 2, 1, "", "ModelConversion"], [258, 2, 1, "", "NAS"], [258, 2, 1, "", "Pruning"], [258, 2, 1, "", "Quantization"], [216, 0, 0, "-", "benchmark"], [219, 0, 0, "-", "common"], [225, 0, 0, "-", "component"], [247, 0, 0, "-", "data"], [252, 0, 0, "-", "distillation"], [253, 0, 0, "-", "export"], [257, 0, 0, "-", "graph_optimization"], [265, 0, 0, "-", "metric"], [267, 0, 0, "-", "mixed_precision"], [268, 0, 0, "-", "model_conversion"], [281, 0, 0, "-", "nas"], [285, 0, 0, "-", "pruning"], [286, 0, 0, "-", "pruning_recipes"], [290, 0, 0, "-", "pruning_v2"], [291, 0, 0, "-", "pytorch_pruner"], [298, 0, 0, "-", "quantization"], [299, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[258, 4, 1, "", "b_dataloader"], [258, 4, 1, "", "b_func"], [258, 3, 1, "", "config_instance"], [258, 3, 1, "", "generate_prefix"], [258, 4, 1, "", "metric"], [258, 4, 1, "", "model"], [258, 4, 1, "", "postprocess"], [258, 4, 1, "", "results"], [258, 3, 1, "", "run_instance"], [258, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[258, 4, 1, "", "eval_dataloader"], [258, 4, 1, "", "eval_func"], [258, 3, 1, "", "execute"], [258, 4, 1, "", "model"], [258, 3, 1, "", "on_after_compute_loss"], [258, 3, 1, "", "on_after_eval"], [258, 3, 1, "", "on_after_optimizer_step"], [258, 3, 1, "", "on_batch_begin"], [258, 3, 1, "", "on_batch_end"], [258, 3, 1, "", "on_before_eval"], [258, 3, 1, "", "on_before_optimizer_step"], [258, 3, 1, "", "on_epoch_begin"], [258, 3, 1, "", "on_epoch_end"], [258, 3, 1, "", "on_post_grad"], [258, 3, 1, "", "on_step_begin"], [258, 3, 1, "", "on_step_end"], [258, 3, 1, "", "on_train_begin"], [258, 3, 1, "", "on_train_end"], [258, 3, 1, "", "post_epoch_end"], [258, 3, 1, "", "post_process"], [258, 3, 1, "", "pre_epoch_begin"], [258, 3, 1, "", "pre_process"], [258, 3, 1, "", "prepare"], [258, 3, 1, "", "prepare_qat"], [258, 3, 1, "", "register_hook"], [258, 4, 1, "", "train_dataloader"], [258, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[258, 6, 1, "", "_epoch_ran"], [258, 6, 1, "", "best_model"], [258, 6, 1, "", "best_score"], [258, 3, 1, "", "create_criterion"], [258, 3, 1, "", "create_optimizer"], [258, 4, 1, "", "criterion"], [258, 6, 1, "", "eval_frequency"], [258, 4, 1, "", "evaluation_distributed"], [258, 3, 1, "", "execute"], [258, 3, 1, "", "generate_hooks"], [258, 3, 1, "", "init_train_cfg"], [258, 3, 1, "", "on_post_forward"], [258, 4, 1, "", "optimizer"], [258, 3, 1, "", "pre_process"], [258, 3, 1, "", "prepare"], [258, 4, 1, "", "student_model"], [258, 4, 1, "", "teacher_model"], [258, 4, 1, "", "train_cfg"], [258, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[258, 3, 1, "", "dataset"], [258, 4, 1, "", "eval_dataloader"], [258, 4, 1, "", "eval_func"], [258, 4, 1, "", "input"], [258, 4, 1, "", "metric"], [258, 4, 1, "", "model"], [258, 4, 1, "", "output"], [258, 4, 1, "", "postprocess"], [258, 4, 1, "", "precisions"], [258, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[258, 4, 1, "", "precisions"], [258, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[258, 3, 1, "", "dataset"], [258, 4, 1, "", "destination"], [258, 4, 1, "", "eval_dataloader"], [258, 4, 1, "", "eval_func"], [258, 4, 1, "", "metric"], [258, 4, 1, "", "model"], [258, 4, 1, "", "postprocess"], [258, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[258, 6, 1, "", "conf"], [258, 4, 1, "", "evaluation_distributed"], [258, 3, 1, "", "execute"], [258, 3, 1, "", "generate_hooks"], [258, 3, 1, "", "generate_pruners"], [258, 3, 1, "", "get_sparsity_ratio"], [258, 3, 1, "", "pre_process"], [258, 3, 1, "", "prepare"], [258, 6, 1, "", "pruners"], [258, 4, 1, "", "pruning_func"], [258, 4, 1, "", "train_distributed"], [258, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.Quantization": [[258, 4, 1, "", "calib_dataloader"], [258, 3, 1, "", "dataset"], [258, 3, 1, "", "execute"], [258, 4, 1, "", "metric"], [258, 4, 1, "", "model"], [258, 4, 1, "", "objective"], [258, 4, 1, "", "postprocess"], [258, 3, 1, "", "pre_process"], [258, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[216, 2, 1, "", "Benchmark"], [216, 1, 1, "", "get_architecture"], [216, 1, 1, "", "get_bounded_threads"], [216, 1, 1, "", "get_core_ids"], [216, 1, 1, "", "get_physical_ids"], [216, 1, 1, "", "get_threads"], [216, 1, 1, "", "get_threads_per_core"], [216, 1, 1, "", "set_all_env_var"], [216, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[216, 4, 1, "", "b_dataloader"], [216, 4, 1, "", "b_func"], [216, 3, 1, "", "config_instance"], [216, 3, 1, "", "generate_prefix"], [216, 4, 1, "", "metric"], [216, 4, 1, "", "model"], [216, 4, 1, "", "postprocess"], [216, 4, 1, "", "results"], [216, 3, 1, "", "run_instance"], [216, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[219, 2, 1, "", "DataLoader"], [219, 2, 1, "", "Metric"], [219, 2, 1, "", "Model"], [219, 2, 1, "", "Postprocess"], [217, 0, 0, "-", "criterion"], [218, 0, 0, "-", "dataloader"], [220, 0, 0, "-", "metric"], [221, 0, 0, "-", "model"], [222, 0, 0, "-", "optimizer"], [223, 0, 0, "-", "postprocess"], [224, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[217, 2, 1, "", "Criterions"], [217, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [217, 2, 1, "", "KnowledgeDistillationFramework"], [217, 2, 1, "", "KnowledgeDistillationLoss"], [217, 2, 1, "", "PyTorchCriterions"], [217, 2, 1, "", "PyTorchCrossEntropyLoss"], [217, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [217, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [217, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [217, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [217, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [217, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [217, 2, 1, "", "SelfKnowledgeDistillationLoss"], [217, 2, 1, "", "TensorFlowCrossEntropyLoss"], [217, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [217, 2, 1, "", "TensorflowCriterions"], [217, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [217, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [217, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [217, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[217, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[217, 3, 1, "", "clear_features"], [217, 3, 1, "", "init_feature_matcher"], [217, 3, 1, "", "init_loss_funcs"], [217, 3, 1, "", "loss_cal"], [217, 3, 1, "", "loss_cal_sloss"], [217, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[217, 4, 1, "", "student_model"], [217, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[217, 3, 1, "", "loss_cal"], [217, 3, 1, "", "loss_cal_sloss"], [217, 3, 1, "", "student_targets_loss_cal"], [217, 3, 1, "", "teacher_model_forward"], [217, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[217, 3, 1, "", "init_feature_matcher"], [217, 3, 1, "", "init_loss_funcs"], [217, 3, 1, "", "loss_cal"], [217, 3, 1, "", "loss_cal_sloss"], [217, 3, 1, "", "register_hooks_for_models"], [217, 3, 1, "", "remove_all_hooks"], [217, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[217, 3, 1, "", "KullbackLeiblerDivergence"], [217, 3, 1, "", "SoftCrossEntropy"], [217, 3, 1, "", "student_targets_loss_cal"], [217, 3, 1, "", "teacher_model_forward"], [217, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[217, 3, 1, "", "KullbackLeiblerDivergence"], [217, 3, 1, "", "L2Divergence"], [217, 3, 1, "", "SoftCrossEntropy"], [217, 3, 1, "", "init_loss_funcs"], [217, 3, 1, "", "loss_cal"], [217, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[217, 3, 1, "", "init_loss_funcs"], [217, 3, 1, "", "loss_cal"], [217, 3, 1, "", "loss_cal_sloss"], [217, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[217, 3, 1, "", "SoftCrossEntropy"], [217, 3, 1, "", "student_targets_loss_cal"], [217, 3, 1, "", "teacher_model_forward"], [217, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[217, 3, 1, "", "student_targets_loss_cal"], [217, 3, 1, "", "teacher_model_forward"], [217, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[218, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[220, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[221, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[222, 2, 1, "", "Optimizers"], [222, 2, 1, "", "PyTorchOptimizers"], [222, 2, 1, "", "PyTorchSGD"], [222, 2, 1, "", "TensorFlowAdam"], [222, 2, 1, "", "TensorFlowAdamW"], [222, 2, 1, "", "TensorFlowSGD"], [222, 2, 1, "", "TensorflowOptimizers"], [222, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[222, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[223, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[224, 1, 1, "", "get_activation"], [224, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[225, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[225, 4, 1, "", "eval_dataloader"], [225, 4, 1, "", "eval_func"], [225, 3, 1, "", "execute"], [225, 4, 1, "", "model"], [225, 3, 1, "", "on_after_compute_loss"], [225, 3, 1, "", "on_after_eval"], [225, 3, 1, "", "on_after_optimizer_step"], [225, 3, 1, "", "on_batch_begin"], [225, 3, 1, "", "on_batch_end"], [225, 3, 1, "", "on_before_eval"], [225, 3, 1, "", "on_before_optimizer_step"], [225, 3, 1, "", "on_epoch_begin"], [225, 3, 1, "", "on_epoch_end"], [225, 3, 1, "", "on_post_grad"], [225, 3, 1, "", "on_step_begin"], [225, 3, 1, "", "on_step_end"], [225, 3, 1, "", "on_train_begin"], [225, 3, 1, "", "on_train_end"], [225, 3, 1, "", "post_epoch_end"], [225, 3, 1, "", "post_process"], [225, 3, 1, "", "pre_epoch_begin"], [225, 3, 1, "", "pre_process"], [225, 3, 1, "", "prepare"], [225, 3, 1, "", "prepare_qat"], [225, 3, 1, "", "register_hook"], [225, 4, 1, "", "train_dataloader"], [225, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[247, 2, 1, "", "BaseTransform"], [247, 2, 1, "", "Dataset"], [247, 2, 1, "", "Datasets"], [247, 2, 1, "", "FILTERS"], [247, 2, 1, "", "Filter"], [247, 2, 1, "", "IterableDataset"], [247, 2, 1, "", "TRANSFORMS"], [230, 0, 0, "-", "dataloaders"], [247, 1, 1, "", "dataset_registry"], [242, 0, 0, "-", "datasets"], [247, 1, 1, "", "filter_registry"], [246, 0, 0, "-", "filters"], [247, 1, 1, "", "transform_registry"], [249, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[247, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[226, 0, 0, "-", "base_dataloader"], [227, 0, 0, "-", "dataloader"], [228, 0, 0, "-", "default_dataloader"], [229, 0, 0, "-", "fetcher"], [231, 0, 0, "-", "mxnet_dataloader"], [232, 0, 0, "-", "onnxrt_dataloader"], [233, 0, 0, "-", "pytorch_dataloader"], [234, 0, 0, "-", "sampler"], [235, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[226, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[226, 3, 1, "", "batch"], [226, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[228, 2, 1, "", "DefaultDataLoader"], [228, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[228, 3, 1, "", "batch"], [228, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[229, 2, 1, "", "Fetcher"], [229, 2, 1, "", "IndexFetcher"], [229, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[231, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[232, 2, 1, "", "ONNXRTBertDataLoader"], [232, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[233, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[234, 2, 1, "", "BatchSampler"], [234, 2, 1, "", "IterableSampler"], [234, 2, 1, "", "Sampler"], [234, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[235, 2, 1, "", "TFDataDataLoader"], [235, 2, 1, "", "TensorflowBertDataLoader"], [235, 2, 1, "", "TensorflowDataLoader"], [235, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[235, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[242, 2, 1, "", "Dataset"], [242, 2, 1, "", "Datasets"], [242, 2, 1, "", "IterableDataset"], [236, 0, 0, "-", "bert_dataset"], [237, 0, 0, "-", "coco_dataset"], [238, 0, 0, "-", "dataset"], [242, 1, 1, "", "dataset_registry"], [239, 0, 0, "-", "dummy_dataset"], [240, 0, 0, "-", "dummy_dataset_v2"], [241, 0, 0, "-", "imagenet_dataset"], [243, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[236, 2, 1, "", "InputFeatures"], [236, 2, 1, "", "ONNXRTBertDataset"], [236, 2, 1, "", "ParseDecodeBert"], [236, 2, 1, "", "PytorchBertDataset"], [236, 2, 1, "", "TensorflowBertDataset"], [236, 2, 1, "", "TensorflowModelZooBertDataset"], [236, 1, 1, "", "convert_examples_to_features"], [236, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[236, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[237, 2, 1, "", "COCONpy"], [237, 2, 1, "", "COCORaw"], [237, 2, 1, "", "COCORecordDataset"], [237, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[238, 2, 1, "", "CIFAR10"], [238, 2, 1, "", "CIFAR100"], [238, 2, 1, "", "Dataset"], [238, 2, 1, "", "Datasets"], [238, 2, 1, "", "FashionMNIST"], [238, 2, 1, "", "ImageFolder"], [238, 2, 1, "", "IterableDataset"], [238, 2, 1, "", "MNIST"], [238, 2, 1, "", "MXNetCIFAR10"], [238, 2, 1, "", "MXNetCIFAR100"], [238, 2, 1, "", "MXNetDatasets"], [238, 2, 1, "", "MXNetFashionMNIST"], [238, 2, 1, "", "MXNetImageFolder"], [238, 2, 1, "", "MXNetMNIST"], [238, 2, 1, "", "ONNXRTITDatasets"], [238, 2, 1, "", "ONNXRTQLDatasets"], [238, 2, 1, "", "PyTorchDatasets"], [238, 2, 1, "", "PytorchCIFAR10"], [238, 2, 1, "", "PytorchCIFAR100"], [238, 2, 1, "", "PytorchFashionMNIST"], [238, 2, 1, "", "PytorchMNIST"], [238, 2, 1, "", "PytorchMxnetWrapDataset"], [238, 2, 1, "", "PytorchMxnetWrapFunction"], [238, 2, 1, "", "TensorflowCIFAR10"], [238, 2, 1, "", "TensorflowCIFAR100"], [238, 2, 1, "", "TensorflowDatasets"], [238, 2, 1, "", "TensorflowFashionMNIST"], [238, 2, 1, "", "TensorflowImageFolder"], [238, 2, 1, "", "TensorflowImageRecord"], [238, 2, 1, "", "TensorflowMNIST"], [238, 2, 1, "", "TensorflowTFRecordDataset"], [238, 2, 1, "", "TensorflowVOCRecord"], [238, 1, 1, "", "calculate_md5"], [238, 1, 1, "", "check_integrity"], [238, 1, 1, "", "dataset_registry"], [238, 1, 1, "", "download_url"], [238, 5, 1, "", "framework_datasets"], [238, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[238, 3, 1, "", "download"], [238, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[238, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[238, 4, 1, "", "class_to_idx"], [238, 3, 1, "", "download"], [238, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[239, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[240, 2, 1, "", "DummyDataset"], [240, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[241, 2, 1, "", "ImagenetRaw"], [241, 2, 1, "", "MXNetImagenetRaw"], [241, 2, 1, "", "ONNXRTImagenetDataset"], [241, 2, 1, "", "PytorchImagenetRaw"], [241, 2, 1, "", "TensorflowImagenetDataset"], [241, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[243, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[246, 2, 1, "", "FILTERS"], [246, 2, 1, "", "Filter"], [244, 0, 0, "-", "coco_filter"], [245, 0, 0, "-", "filter"], [246, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[244, 2, 1, "", "LabelBalanceCOCORawFilter"], [244, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[245, 2, 1, "", "FILTERS"], [245, 2, 1, "", "Filter"], [245, 2, 1, "", "MXNetFilters"], [245, 2, 1, "", "ONNXRTITFilters"], [245, 2, 1, "", "ONNXRTQLFilters"], [245, 2, 1, "", "PyTorchFilters"], [245, 2, 1, "", "TensorflowFilters"], [245, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[249, 2, 1, "", "BaseTransform"], [249, 2, 1, "", "TRANSFORMS"], [248, 0, 0, "-", "imagenet_transform"], [250, 0, 0, "-", "tokenization"], [251, 0, 0, "-", "transform"], [249, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[249, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[248, 2, 1, "", "BilinearImagenetTransform"], [248, 2, 1, "", "LabelShift"], [248, 2, 1, "", "ONNXResizeCropImagenetTransform"], [248, 2, 1, "", "OnnxBilinearImagenetTransform"], [248, 2, 1, "", "ParseDecodeImagenet"], [248, 2, 1, "", "ParseDecodeImagenetTransform"], [248, 2, 1, "", "QuantizedInput"], [248, 2, 1, "", "ResizeWithAspectRatio"], [248, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[250, 2, 1, "", "BasicTokenizer"], [250, 2, 1, "", "FullTokenizer"], [250, 2, 1, "", "WordpieceTokenizer"], [250, 1, 1, "", "convert_by_vocab"], [250, 1, 1, "", "convert_to_unicode"], [250, 1, 1, "", "load_vocab"], [250, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[250, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[250, 3, 1, "", "convert_ids_to_tokens"], [250, 3, 1, "", "convert_tokens_to_ids"], [250, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[250, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[251, 2, 1, "", "AlignImageChannelTransform"], [251, 2, 1, "", "BaseTransform"], [251, 2, 1, "", "CastONNXTransform"], [251, 2, 1, "", "CastPyTorchTransform"], [251, 2, 1, "", "CastTFTransform"], [251, 2, 1, "", "CenterCropTFTransform"], [251, 2, 1, "", "CenterCropTransform"], [251, 2, 1, "", "CollectTransform"], [251, 2, 1, "", "ComposeTransform"], [251, 2, 1, "", "CropResizeTFTransform"], [251, 2, 1, "", "CropResizeTransform"], [251, 2, 1, "", "CropToBoundingBox"], [251, 2, 1, "", "InputFeatures"], [251, 2, 1, "", "MXNetCropResizeTransform"], [251, 2, 1, "", "MXNetCropToBoundingBox"], [251, 2, 1, "", "MXNetNormalizeTransform"], [251, 2, 1, "", "MXNetTransforms"], [251, 2, 1, "", "MXNetTranspose"], [251, 2, 1, "", "NormalizeTFTransform"], [251, 2, 1, "", "NormalizeTransform"], [251, 2, 1, "", "ONNXRTCropToBoundingBox"], [251, 2, 1, "", "ONNXRTITTransforms"], [251, 2, 1, "", "ONNXRTQLTransforms"], [251, 2, 1, "", "PaddedCenterCropTransform"], [251, 2, 1, "", "ParseDecodeVocTransform"], [251, 2, 1, "", "PyTorchAlignImageChannel"], [251, 2, 1, "", "PyTorchCropResizeTransform"], [251, 2, 1, "", "PyTorchNormalizeTransform"], [251, 2, 1, "", "PyTorchTransforms"], [251, 2, 1, "", "PyTorchTranspose"], [251, 2, 1, "", "PytorchMxnetTransform"], [251, 2, 1, "", "PytorchMxnetWrapFunction"], [251, 2, 1, "", "RandomCropTFTransform"], [251, 2, 1, "", "RandomCropTransform"], [251, 2, 1, "", "RandomHorizontalFlip"], [251, 2, 1, "", "RandomResizedCropMXNetTransform"], [251, 2, 1, "", "RandomResizedCropPytorchTransform"], [251, 2, 1, "", "RandomResizedCropTFTransform"], [251, 2, 1, "", "RandomResizedCropTransform"], [251, 2, 1, "", "RandomVerticalFlip"], [251, 2, 1, "", "RescaleKerasPretrainTransform"], [251, 2, 1, "", "RescaleTFTransform"], [251, 2, 1, "", "RescaleTransform"], [251, 2, 1, "", "ResizeMXNetTransform"], [251, 2, 1, "", "ResizePytorchTransform"], [251, 2, 1, "", "ResizeTFTransform"], [251, 2, 1, "", "ResizeTransform"], [251, 2, 1, "", "ResizeWithRatio"], [251, 2, 1, "", "SquadExample"], [251, 2, 1, "", "TFModelZooCollectTransform"], [251, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [251, 2, 1, "", "TFSquadV1PostTransform"], [251, 2, 1, "", "TRANSFORMS"], [251, 2, 1, "", "TensorflowCropToBoundingBox"], [251, 2, 1, "", "TensorflowRandomHorizontalFlip"], [251, 2, 1, "", "TensorflowRandomVerticalFlip"], [251, 2, 1, "", "TensorflowResizeWithRatio"], [251, 2, 1, "", "TensorflowTransform"], [251, 2, 1, "", "TensorflowTransforms"], [251, 2, 1, "", "TensorflowTranspose"], [251, 2, 1, "", "TensorflowWrapFunction"], [251, 2, 1, "", "ToArray"], [251, 2, 1, "", "ToNDArrayTransform"], [251, 2, 1, "", "Transforms"], [251, 2, 1, "", "Transpose"], [251, 1, 1, "", "convert_examples_to_features"], [251, 1, 1, "", "get_final_text"], [251, 1, 1, "", "get_torchvision_map"], [251, 1, 1, "", "read_squad_examples"], [251, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[251, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[251, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[251, 3, 1, "", "get_postprocess_result"], [251, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[251, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[252, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[252, 6, 1, "", "_epoch_ran"], [252, 6, 1, "", "best_model"], [252, 6, 1, "", "best_score"], [252, 3, 1, "", "create_criterion"], [252, 3, 1, "", "create_optimizer"], [252, 4, 1, "", "criterion"], [252, 6, 1, "", "eval_frequency"], [252, 4, 1, "", "evaluation_distributed"], [252, 3, 1, "", "execute"], [252, 3, 1, "", "generate_hooks"], [252, 3, 1, "", "init_train_cfg"], [252, 3, 1, "", "on_post_forward"], [252, 4, 1, "", "optimizer"], [252, 3, 1, "", "pre_process"], [252, 3, 1, "", "prepare"], [252, 4, 1, "", "student_model"], [252, 4, 1, "", "teacher_model"], [252, 4, 1, "", "train_cfg"], [252, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[253, 1, 1, "", "onnx_qlinear_to_qdq"], [254, 0, 0, "-", "qlinear2qdq"], [255, 0, 0, "-", "torch2onnx"], [253, 1, 1, "", "torch_to_fp32_onnx"], [253, 1, 1, "", "torch_to_int8_onnx"], [256, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[254, 1, 1, "", "check_model"], [254, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.torch2onnx": [[255, 1, 1, "", "build_scale_mapping"], [255, 1, 1, "", "get_node_mapping"], [255, 1, 1, "", "get_quantizable_onnx_ops"], [255, 1, 1, "", "qdq_fp32_bias"], [255, 1, 1, "", "qdq_fp32_bias_qdq"], [255, 1, 1, "", "qdq_int32_bias"], [255, 1, 1, "", "recalculate_bias"], [255, 1, 1, "", "remove_nodes_by_name"], [255, 1, 1, "", "set_data_type"], [255, 1, 1, "", "set_scale_info"], [255, 1, 1, "", "sub_graph_with_int32_bias"], [255, 1, 1, "", "torch_to_fp32_onnx"], [255, 1, 1, "", "torch_to_int8_onnx"], [255, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[256, 2, 1, "", "DummyDataReader"], [256, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[256, 3, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[257, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[257, 3, 1, "", "dataset"], [257, 4, 1, "", "eval_dataloader"], [257, 4, 1, "", "eval_func"], [257, 4, 1, "", "input"], [257, 4, 1, "", "metric"], [257, 4, 1, "", "model"], [257, 4, 1, "", "output"], [257, 4, 1, "", "postprocess"], [257, 4, 1, "", "precisions"], [257, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[265, 2, 1, "", "BaseMetric"], [265, 2, 1, "", "METRICS"], [259, 0, 0, "-", "bleu"], [260, 0, 0, "-", "bleu_util"], [261, 0, 0, "-", "coco_label_map"], [262, 0, 0, "-", "coco_tools"], [263, 0, 0, "-", "evaluate_squad"], [264, 0, 0, "-", "f1"], [266, 0, 0, "-", "metric"], [265, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[265, 4, 1, "", "hvd"], [265, 4, 1, "", "metric"], [265, 3, 1, "", "reset"], [265, 3, 1, "", "result"], [265, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[265, 6, 1, "", "metrics"], [265, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[259, 2, 1, "", "BLEU"], [259, 2, 1, "", "UnicodeRegex"], [259, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[259, 6, 1, "", "labels"], [259, 6, 1, "", "predictions"], [259, 3, 1, "", "reset"], [259, 3, 1, "", "result"], [259, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[259, 6, 1, "", "nondigit_punct_re"], [259, 3, 1, "", "property_chars"], [259, 6, 1, "", "punct_nondigit_re"], [259, 6, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[260, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[262, 2, 1, "", "COCOEvalWrapper"], [262, 2, 1, "", "COCOWrapper"], [262, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [262, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [262, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[262, 3, 1, "", "ComputeMetrics"], [262, 3, 1, "", "GetAgnosticMode"], [262, 3, 1, "", "GetCategory"], [262, 3, 1, "", "GetCategoryIdList"], [262, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[262, 3, 1, "", "LoadAnnotations"], [262, 6, 1, "", "dataset"], [262, 6, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[263, 1, 1, "", "evaluate"], [263, 1, 1, "", "exact_match_score"], [263, 1, 1, "", "f1_score"], [263, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[264, 1, 1, "", "evaluate"], [264, 1, 1, "", "f1_score"], [264, 1, 1, "", "metric_max_over_ground_truths"], [264, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[266, 2, 1, "", "Accuracy"], [266, 2, 1, "", "BaseMetric"], [266, 2, 1, "", "COCOmAPv2"], [266, 2, 1, "", "F1"], [266, 2, 1, "", "GeneralTopK"], [266, 2, 1, "", "Loss"], [266, 2, 1, "", "MAE"], [266, 2, 1, "", "METRICS"], [266, 2, 1, "", "MSE"], [266, 2, 1, "", "MXNetMetrics"], [266, 2, 1, "", "ONNXRTGLUE"], [266, 2, 1, "", "ONNXRTITMetrics"], [266, 2, 1, "", "ONNXRTQLMetrics"], [266, 2, 1, "", "PyTorchLoss"], [266, 2, 1, "", "PyTorchMetrics"], [266, 2, 1, "", "RMSE"], [266, 2, 1, "", "ROC"], [266, 2, 1, "", "SquadF1"], [266, 2, 1, "", "TensorflowCOCOMAP"], [266, 2, 1, "", "TensorflowMAP"], [266, 2, 1, "", "TensorflowMetrics"], [266, 2, 1, "", "TensorflowTopK"], [266, 2, 1, "", "TensorflowVOCMAP"], [266, 2, 1, "", "WrapMXNetMetric"], [266, 2, 1, "", "WrapONNXRTMetric"], [266, 2, 1, "", "WrapPyTorchMetric"], [266, 2, 1, "", "mIOU"], [266, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[266, 6, 1, "", "label_list"], [266, 6, 1, "", "pred_list"], [266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 6, 1, "", "sample"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[266, 4, 1, "", "hvd"], [266, 4, 1, "", "metric"], [266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[266, 6, 1, "", "k"], [266, 6, 1, "", "num_correct"], [266, 6, 1, "", "num_sample"], [266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 6, 1, "", "sample"], [266, 6, 1, "", "sum"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[266, 6, 1, "", "compare_label"], [266, 6, 1, "", "label_list"], [266, 6, 1, "", "pred_list"], [266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[266, 6, 1, "", "metrics"], [266, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[266, 6, 1, "", "compare_label"], [266, 6, 1, "", "label_list"], [266, 6, 1, "", "pred_list"], [266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[266, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[266, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[266, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[266, 3, 1, "", "compute"], [266, 3, 1, "", "reset"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[266, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[266, 6, 1, "", "mse"], [266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[266, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[266, 6, 1, "", "k"], [266, 6, 1, "", "num_correct"], [266, 6, 1, "", "num_sample"], [266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[267, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[267, 4, 1, "", "precisions"], [267, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[268, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[268, 3, 1, "", "dataset"], [268, 4, 1, "", "destination"], [268, 4, 1, "", "eval_dataloader"], [268, 4, 1, "", "eval_func"], [268, 4, 1, "", "metric"], [268, 4, 1, "", "model"], [268, 4, 1, "", "postprocess"], [268, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[281, 2, 1, "", "BasicNAS"], [281, 2, 1, "", "DyNAS"], [281, 2, 1, "", "NAS"], [269, 0, 0, "-", "basic_nas"], [270, 0, 0, "-", "dynas"], [275, 0, 0, "-", "dynast"], [282, 0, 0, "-", "nas"], [283, 0, 0, "-", "nas_utils"], [284, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[281, 3, 1, "", "estimate"], [281, 3, 1, "", "execute"], [281, 3, 1, "", "init_by_cfg"], [281, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[281, 3, 1, "", "create_acc_predictor"], [281, 3, 1, "", "create_latency_predictor"], [281, 3, 1, "", "create_macs_predictor"], [281, 3, 1, "", "estimate"], [281, 3, 1, "", "init_cfg"], [281, 3, 1, "", "init_for_search"], [281, 3, 1, "", "search"], [281, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[269, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[269, 3, 1, "", "estimate"], [269, 3, 1, "", "execute"], [269, 3, 1, "", "init_by_cfg"], [269, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[270, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[270, 3, 1, "", "create_acc_predictor"], [270, 3, 1, "", "create_latency_predictor"], [270, 3, 1, "", "create_macs_predictor"], [270, 3, 1, "", "estimate"], [270, 3, 1, "", "init_cfg"], [270, 3, 1, "", "init_for_search"], [270, 3, 1, "", "search"], [270, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[271, 0, 0, "-", "dynas_manager"], [272, 0, 0, "-", "dynas_predictor"], [273, 0, 0, "-", "dynas_search"], [274, 0, 0, "-", "dynas_utils"], [276, 0, 0, "-", "supernetwork"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[271, 2, 1, "", "ParameterManager"], [271, 2, 1, "", "TransformerLTEncoding"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[271, 3, 1, "", "create_training_set"], [271, 3, 1, "", "import_csv"], [271, 3, 1, "", "onehot_generic"], [271, 3, 1, "", "process_param_dict"], [271, 3, 1, "", "random_sample"], [271, 3, 1, "", "random_samples"], [271, 3, 1, "", "set_seed"], [271, 3, 1, "", "translate2param"], [271, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding": [[271, 3, 1, "", "create_training_set"], [271, 3, 1, "", "import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[272, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[272, 3, 1, "", "get_metrics"], [272, 3, 1, "", "get_parameters"], [272, 3, 1, "", "load"], [272, 3, 1, "", "predict"], [272, 3, 1, "", "save"], [272, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[273, 2, 1, "", "ProblemMultiObjective"], [273, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[273, 3, 1, "", "configure_age"], [273, 3, 1, "", "configure_nsga2"], [273, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[274, 2, 1, "", "EvaluationInterface"], [274, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [274, 2, 1, "", "EvaluationInterfaceResNet50"], [274, 2, 1, "", "EvaluationInterfaceTransformerLT"], [274, 2, 1, "", "OFARunner"], [274, 2, 1, "", "Runner"], [274, 2, 1, "", "TorchVisionReference"], [274, 2, 1, "", "TransformerLTRunner"], [274, 1, 1, "", "get_macs"], [274, 1, 1, "", "get_torchvision_model"], [274, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[274, 3, 1, "", "clear_csv"], [274, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[274, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[274, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT": [[274, 3, 1, "", "clear_csv"], [274, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[274, 3, 1, "", "estimate_accuracy_top1"], [274, 3, 1, "", "estimate_latency"], [274, 3, 1, "", "estimate_macs"], [274, 3, 1, "", "get_subnet"], [274, 3, 1, "", "measure_latency"], [274, 3, 1, "", "validate_macs"], [274, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[274, 3, 1, "", "measure_latency"], [274, 3, 1, "", "validate_macs"], [274, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner": [[274, 3, 1, "", "measure_latency"], [274, 3, 1, "", "validate_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[277, 0, 0, "-", "machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[278, 0, 0, "-", "modules_supernetwork"], [279, 0, 0, "-", "transformer_interface"], [280, 0, 0, "-", "transformer_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[278, 2, 1, "", "MultiheadAttentionSuper"], [278, 1, 1, "", "get_incremental_state"], [278, 1, 1, "", "set_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper": [[278, 3, 1, "", "forward"], [278, 3, 1, "", "reorder_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[279, 1, 1, "", "compute_bleu"], [279, 1, 1, "", "compute_latency"], [279, 1, 1, "", "compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[280, 2, 1, "", "TransformerDecoder"], [280, 2, 1, "", "TransformerDecoderLayer"], [280, 2, 1, "", "TransformerEncoder"], [280, 2, 1, "", "TransformerEncoderLayer"], [280, 2, 1, "", "TransformerSuperNetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder": [[280, 3, 1, "", "extract_features"], [280, 3, 1, "", "forward"], [280, 3, 1, "", "max_positions"], [280, 3, 1, "", "output_layer"], [280, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer": [[280, 3, 1, "", "forward"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder": [[280, 3, 1, "", "forward"], [280, 3, 1, "", "max_positions"], [280, 3, 1, "", "reorder_encoder_out"], [280, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer": [[280, 3, 1, "", "forward"], [280, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.nas": [[282, 2, 1, "", "NAS"], [282, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[282, 3, 1, "", "count_model_parameters"], [282, 3, 1, "", "dump_search_results"], [282, 3, 1, "", "estimate"], [282, 3, 1, "", "find_best_model_archs"], [282, 3, 1, "", "init_search_cfg"], [282, 3, 1, "", "load_search_results"], [282, 3, 1, "", "metrics_conversion"], [282, 4, 1, "", "model_builder"], [282, 3, 1, "", "params_vec2params_dict"], [282, 3, 1, "", "search"], [282, 4, 1, "", "search_algorithm"], [282, 4, 1, "", "search_space"], [282, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[283, 1, 1, "", "create_search_space_pool"], [283, 1, 1, "", "find_pareto_front"], [283, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[284, 2, 1, "", "BayesianOptimizationSearcher"], [284, 2, 1, "", "GridSearcher"], [284, 2, 1, "", "RandomSearcher"], [284, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[284, 3, 1, "", "get_feedback"], [284, 3, 1, "", "indices2params_vec"], [284, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[284, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[284, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[284, 3, 1, "", "get_feedback"], [284, 3, 1, "", "params_vec2params_dict"], [284, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[285, 2, 1, "", "Pruning"], [285, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[285, 6, 1, "", "conf"], [285, 4, 1, "", "evaluation_distributed"], [285, 3, 1, "", "execute"], [285, 3, 1, "", "generate_hooks"], [285, 3, 1, "", "generate_pruners"], [285, 3, 1, "", "get_sparsity_ratio"], [285, 3, 1, "", "pre_process"], [285, 3, 1, "", "prepare"], [285, 6, 1, "", "pruners"], [285, 4, 1, "", "pruning_func"], [285, 4, 1, "", "train_distributed"], [285, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[285, 3, 1, "", "on_after_compute_loss"], [285, 3, 1, "", "on_batch_begin"], [285, 3, 1, "", "on_batch_end"], [285, 3, 1, "", "on_epoch_begin"], [285, 3, 1, "", "on_epoch_end"], [285, 3, 1, "", "on_step_begin"], [285, 3, 1, "", "on_step_end"], [285, 3, 1, "", "on_train_begin"], [285, 3, 1, "", "on_train_end"], [285, 3, 1, "", "post_epoch_end"], [285, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[286, 2, 1, "", "PATTERNS"], [287, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[286, 6, 1, "", "patterns"], [286, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[287, 2, 1, "", "PATTERNS"], [288, 0, 0, "-", "pattern"], [289, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[287, 6, 1, "", "patterns"], [287, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[288, 2, 1, "", "PATTERNS"], [288, 2, 1, "", "PatternBase"], [288, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[288, 6, 1, "", "patterns"], [288, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[288, 3, 1, "", "compute_sparsity"], [288, 3, 1, "", "reduce"], [288, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[289, 2, 1, "", "TilePatternBase"], [289, 2, 1, "", "TilePattern_1x1"], [289, 2, 1, "", "TilePattern_1x16"], [289, 2, 1, "", "TilePattern_1x2"], [289, 2, 1, "", "TilePattern_2x2"], [289, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[289, 3, 1, "", "compute_sparsity"], [289, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pruning_v2": [[290, 2, 1, "", "Pruning"], [290, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[290, 6, 1, "", "conf"], [290, 4, 1, "", "evaluation_distributed"], [290, 3, 1, "", "execute"], [290, 3, 1, "", "generate_hooks"], [290, 3, 1, "", "get_sparsity_ratio"], [290, 3, 1, "", "pre_process"], [290, 3, 1, "", "prepare"], [290, 6, 1, "", "pruners"], [290, 4, 1, "", "pruning_func"], [290, 4, 1, "", "train_distributed"], [290, 3, 1, "", "update_config"]], "neural_compressor.experimental.pruning_v2.TfPruningCallback": [[290, 3, 1, "", "on_after_compute_loss"], [290, 3, 1, "", "on_batch_begin"], [290, 3, 1, "", "on_batch_end"], [290, 3, 1, "", "on_epoch_begin"], [290, 3, 1, "", "on_epoch_end"], [290, 3, 1, "", "on_step_begin"], [290, 3, 1, "", "on_step_end"], [290, 3, 1, "", "on_train_begin"], [290, 3, 1, "", "on_train_end"], [290, 3, 1, "", "post_epoch_end"], [290, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pytorch_pruner": [[292, 0, 0, "-", "logger"], [293, 0, 0, "-", "patterns"], [294, 0, 0, "-", "prune_utils"], [295, 0, 0, "-", "pruner"], [296, 0, 0, "-", "pruning"], [297, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[293, 2, 1, "", "Pattern"], [293, 2, 1, "", "PatternNInM"], [293, 2, 1, "", "PatternNxM"], [293, 1, 1, "", "get_pattern"], [293, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[293, 3, 1, "", "get_block_size_dict"], [293, 3, 1, "", "get_mask_single"], [293, 3, 1, "", "get_masks"], [293, 3, 1, "", "get_masks_global"], [293, 3, 1, "", "get_masks_local"], [293, 3, 1, "", "get_pattern_lock_masks"], [293, 3, 1, "", "get_sparsity_ratio"], [293, 6, 1, "", "is_global"], [293, 6, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[293, 6, 1, "", "M"], [293, 6, 1, "", "N"], [293, 3, 1, "", "get_masks_global"], [293, 3, 1, "", "get_pattern_lock_masks"], [293, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[293, 6, 1, "", "block_size"], [293, 3, 1, "", "get_block_size_dict"], [293, 3, 1, "", "get_masks_global"], [293, 3, 1, "", "get_pattern_lock_masks"], [293, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[294, 1, 1, "", "check_config"], [294, 1, 1, "", "parse_not_to_prune"], [294, 1, 1, "", "parse_to_prune"], [294, 1, 1, "", "process_and_check_config"], [294, 1, 1, "", "process_config"], [294, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[295, 2, 1, "", "MagnitudePruner"], [295, 2, 1, "", "PatternLockPruner"], [295, 2, 1, "", "Pruner"], [295, 2, 1, "", "SnipMomentumPruner"], [295, 2, 1, "", "SnipPruner"], [295, 1, 1, "", "get_pruner"], [295, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[295, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[295, 3, 1, "", "on_after_optimizer_step"], [295, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[295, 3, 1, "", "check_is_pruned_step"], [295, 6, 1, "", "config"], [295, 6, 1, "", "current_sparsity_ratio"], [295, 6, 1, "", "end_step"], [295, 6, 1, "", "global_step"], [295, 3, 1, "", "mask_weights"], [295, 6, 1, "", "masks"], [295, 6, 1, "", "max_sparsity_ratio_per_layer"], [295, 6, 1, "", "modules"], [295, 3, 1, "", "on_after_eval"], [295, 3, 1, "", "on_after_optimizer_step"], [295, 3, 1, "", "on_before_eval"], [295, 3, 1, "", "on_before_optimizer_step"], [295, 3, 1, "", "on_epoch_begin"], [295, 3, 1, "", "on_epoch_end"], [295, 3, 1, "", "on_step_begin"], [295, 3, 1, "", "on_step_end"], [295, 3, 1, "", "on_train_begin"], [295, 3, 1, "", "on_train_end"], [295, 6, 1, "", "pattern"], [295, 6, 1, "", "scheduler"], [295, 6, 1, "", "scores"], [295, 6, 1, "", "start_step"], [295, 6, 1, "", "target_sparsity_ratio"], [295, 6, 1, "", "update_frequency_on_step"], [295, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[295, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[295, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[296, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[296, 6, 1, "", "config_file_path"], [296, 3, 1, "", "get_sparsity_ratio"], [296, 6, 1, "", "model"], [296, 3, 1, "", "on_after_eval"], [296, 3, 1, "", "on_after_optimizer_step"], [296, 3, 1, "", "on_before_eval"], [296, 3, 1, "", "on_before_optimizer_step"], [296, 3, 1, "", "on_epoch_begin"], [296, 3, 1, "", "on_epoch_end"], [296, 3, 1, "", "on_step_begin"], [296, 3, 1, "", "on_step_end"], [296, 3, 1, "", "on_train_begin"], [296, 3, 1, "", "on_train_end"], [296, 3, 1, "", "prepare"], [296, 6, 1, "", "pruner_info"], [296, 6, 1, "", "pruners"], [296, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[297, 2, 1, "", "IterativeScheduler"], [297, 2, 1, "", "OneshotScheduler"], [297, 2, 1, "", "Scheduler"], [297, 1, 1, "", "get_scheduler"], [297, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[297, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[297, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[297, 6, 1, "", "config"], [297, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[298, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[298, 4, 1, "", "calib_dataloader"], [298, 3, 1, "", "dataset"], [298, 3, 1, "", "execute"], [298, 4, 1, "", "metric"], [298, 4, 1, "", "model"], [298, 4, 1, "", "objective"], [298, 4, 1, "", "postprocess"], [298, 3, 1, "", "pre_process"], [298, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[299, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[299, 3, 1, "", "append"], [299, 3, 1, "", "combine"], [299, 4, 1, "", "eval_func"], [299, 4, 1, "", "model"], [299, 4, 1, "", "train_func"]], "neural_compressor.metric": [[307, 2, 1, "", "BaseMetric"], [307, 2, 1, "", "METRICS"], [307, 2, 1, "", "Metric"], [301, 0, 0, "-", "bleu"], [302, 0, 0, "-", "bleu_util"], [303, 0, 0, "-", "coco_label_map"], [304, 0, 0, "-", "coco_tools"], [305, 0, 0, "-", "evaluate_squad"], [306, 0, 0, "-", "f1"], [308, 0, 0, "-", "metric"], [307, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[307, 4, 1, "", "hvd"], [307, 4, 1, "", "metric"], [307, 3, 1, "", "reset"], [307, 3, 1, "", "result"], [307, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[307, 6, 1, "", "metrics"], [307, 3, 1, "", "register"]], "neural_compressor.metric.bleu": [[301, 2, 1, "", "BLEU"], [301, 2, 1, "", "UnicodeRegex"], [301, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[301, 6, 1, "", "labels"], [301, 6, 1, "", "predictions"], [301, 3, 1, "", "reset"], [301, 3, 1, "", "result"], [301, 3, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[301, 6, 1, "", "nondigit_punct_re"], [301, 3, 1, "", "property_chars"], [301, 6, 1, "", "punct_nondigit_re"], [301, 6, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[302, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[304, 2, 1, "", "COCOEvalWrapper"], [304, 2, 1, "", "COCOWrapper"], [304, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [304, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [304, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[304, 3, 1, "", "ComputeMetrics"], [304, 3, 1, "", "GetAgnosticMode"], [304, 3, 1, "", "GetCategory"], [304, 3, 1, "", "GetCategoryIdList"], [304, 3, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[304, 3, 1, "", "LoadAnnotations"], [304, 6, 1, "", "dataset"], [304, 6, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[305, 1, 1, "", "evaluate"], [305, 1, 1, "", "exact_match_score"], [305, 1, 1, "", "f1_score"], [305, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[306, 1, 1, "", "evaluate"], [306, 1, 1, "", "f1_score"], [306, 1, 1, "", "metric_max_over_ground_truths"], [306, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[308, 2, 1, "", "Accuracy"], [308, 2, 1, "", "BaseMetric"], [308, 2, 1, "", "COCOmAPv2"], [308, 2, 1, "", "F1"], [308, 2, 1, "", "GeneralTopK"], [308, 2, 1, "", "Loss"], [308, 2, 1, "", "MAE"], [308, 2, 1, "", "METRICS"], [308, 2, 1, "", "MSE"], [308, 2, 1, "", "MXNetMetrics"], [308, 2, 1, "", "Metric"], [308, 2, 1, "", "ONNXRTGLUE"], [308, 2, 1, "", "ONNXRTITMetrics"], [308, 2, 1, "", "ONNXRTQLMetrics"], [308, 2, 1, "", "PyTorchLoss"], [308, 2, 1, "", "PyTorchMetrics"], [308, 2, 1, "", "RMSE"], [308, 2, 1, "", "ROC"], [308, 2, 1, "", "SquadF1"], [308, 2, 1, "", "TensorflowCOCOMAP"], [308, 2, 1, "", "TensorflowMAP"], [308, 2, 1, "", "TensorflowMetrics"], [308, 2, 1, "", "TensorflowTopK"], [308, 2, 1, "", "TensorflowVOCMAP"], [308, 2, 1, "", "WrapMXNetMetric"], [308, 2, 1, "", "WrapONNXRTMetric"], [308, 2, 1, "", "WrapPyTorchMetric"], [308, 2, 1, "", "mIOU"], [308, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[308, 6, 1, "", "label_list"], [308, 6, 1, "", "pred_list"], [308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 6, 1, "", "sample"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[308, 4, 1, "", "hvd"], [308, 4, 1, "", "metric"], [308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[308, 6, 1, "", "k"], [308, 6, 1, "", "num_correct"], [308, 6, 1, "", "num_sample"], [308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 6, 1, "", "sample"], [308, 6, 1, "", "sum"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[308, 6, 1, "", "compare_label"], [308, 6, 1, "", "label_list"], [308, 6, 1, "", "pred_list"], [308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[308, 6, 1, "", "metrics"], [308, 3, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[308, 6, 1, "", "compare_label"], [308, 6, 1, "", "label_list"], [308, 6, 1, "", "pred_list"], [308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[308, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[308, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[308, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[308, 3, 1, "", "compute"], [308, 3, 1, "", "reset"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[308, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[308, 6, 1, "", "mse"], [308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[308, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[308, 6, 1, "", "k"], [308, 6, 1, "", "num_correct"], [308, 6, 1, "", "num_sample"], [308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.model": [[311, 2, 1, "", "BaseModel"], [311, 2, 1, "", "Model"], [310, 0, 0, "-", "base_model"], [312, 0, 0, "-", "keras_model"], [313, 0, 0, "-", "model"], [314, 0, 0, "-", "mxnet_model"], [315, 0, 0, "-", "nets_factory"], [316, 0, 0, "-", "onnx_model"], [317, 0, 0, "-", "tensorflow_model"], [318, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[311, 3, 1, "", "export"], [311, 3, 1, "", "framework"], [311, 4, 1, "", "graph_info"], [311, 4, 1, "", "model"], [311, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[310, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[310, 3, 1, "", "export"], [310, 3, 1, "", "framework"], [310, 4, 1, "", "graph_info"], [310, 4, 1, "", "model"], [310, 3, 1, "", "save"]], "neural_compressor.model.keras_model": [[312, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[312, 3, 1, "", "export"], [312, 3, 1, "", "framework"], [312, 4, 1, "", "graph_info"], [312, 4, 1, "", "model"], [312, 3, 1, "", "save"]], "neural_compressor.model.model": [[313, 2, 1, "", "Model"], [313, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[314, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[314, 3, 1, "", "framework"], [314, 4, 1, "", "model"], [314, 3, 1, "", "save"]], "neural_compressor.model.onnx_model": [[316, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[316, 3, 1, "", "export"], [316, 3, 1, "", "find_node_by_name"], [316, 3, 1, "", "find_nodes_by_initializer"], [316, 3, 1, "", "framework"], [316, 3, 1, "", "get_scale_zero"], [316, 4, 1, "", "graph_info"], [316, 4, 1, "", "model"], [316, 3, 1, "", "save"], [316, 3, 1, "", "save_model_to_file"]], "neural_compressor.model.tensorflow_model": [[317, 2, 1, "", "TensorflowBaseModel"], [317, 2, 1, "", "TensorflowCheckpointModel"], [317, 2, 1, "", "TensorflowQATModel"], [317, 2, 1, "", "TensorflowSavedModelModel"], [317, 1, 1, "", "checkpoint_session"], [317, 1, 1, "", "estimator_session"], [317, 1, 1, "", "frozen_pb_session"], [317, 1, 1, "", "get_model_type"], [317, 1, 1, "", "graph_def_session"], [317, 1, 1, "", "graph_session"], [317, 1, 1, "", "keras_session"], [317, 1, 1, "", "load_saved_model"], [317, 1, 1, "", "saved_model_session"], [317, 1, 1, "", "slim_session"], [317, 1, 1, "", "validate_and_inference_input_output"], [317, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[317, 3, 1, "", "framework"], [317, 4, 1, "", "graph_info"], [317, 4, 1, "", "model"], [317, 3, 1, "", "save"], [317, 4, 1, "", "weights"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[317, 4, 1, "", "model"], [317, 3, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[317, 4, 1, "", "model"], [317, 3, 1, "", "report_sparsity"], [317, 3, 1, "", "save"]], "neural_compressor.model.torch_model": [[318, 2, 1, "", "IPEXModel"], [318, 2, 1, "", "PyTorchBaseModel"], [318, 2, 1, "", "PyTorchFXModel"], [318, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[318, 4, 1, "", "graph_info"], [318, 3, 1, "", "save"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[318, 4, 1, "", "fp32_model"], [318, 3, 1, "", "framework"], [318, 3, 1, "", "get_all_weight_names"], [318, 3, 1, "", "get_gradient"], [318, 3, 1, "", "get_inputs"], [318, 3, 1, "", "get_weight"], [318, 4, 1, "", "model"], [318, 3, 1, "", "prune_weights_"], [318, 3, 1, "", "report_sparsity"], [318, 3, 1, "", "update_gradient"], [318, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[318, 3, 1, "", "export"], [318, 4, 1, "", "graph_info"], [318, 3, 1, "", "save"]], "neural_compressor.objective": [[319, 2, 1, "", "Accuracy"], [319, 2, 1, "", "Footprint"], [319, 2, 1, "", "ModelSize"], [319, 2, 1, "", "Objective"], [319, 2, 1, "", "Performance"], [319, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[319, 3, 1, "", "end"], [319, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[319, 3, 1, "", "end"], [319, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[319, 3, 1, "", "end"], [319, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[319, 3, 1, "", "end"], [319, 3, 1, "", "reset"], [319, 3, 1, "", "result"], [319, 3, 1, "", "result_list"], [319, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[319, 3, 1, "", "end"], [319, 3, 1, "", "start"]], "neural_compressor.pruner": [[320, 0, 0, "-", "criteria"], [322, 0, 0, "-", "logger"], [323, 0, 0, "-", "patterns"], [326, 0, 0, "-", "pruner_legacy"], [330, 0, 0, "-", "pruners"], [331, 0, 0, "-", "pruning"], [332, 0, 0, "-", "regs"], [333, 0, 0, "-", "schedulers"], [334, 0, 0, "-", "utils"]], "neural_compressor.pruner.criteria": [[320, 2, 1, "", "GradientCriterion"], [320, 2, 1, "", "MagnitudeCriterion"], [320, 2, 1, "", "PruningCriterion"], [320, 2, 1, "", "SnipCriterion"], [320, 2, 1, "", "SnipMomentumCriterion"], [320, 1, 1, "", "get_criterion"], [320, 1, 1, "", "register_criterion"]], "neural_compressor.pruner.criteria.GradientCriterion": [[320, 3, 1, "", "on_after_optimizer_step"], [320, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.MagnitudeCriterion": [[320, 3, 1, "", "on_step_begin"], [320, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.PruningCriterion": [[320, 3, 1, "", "on_after_optimizer_step"], [320, 3, 1, "", "on_step_begin"], [320, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipCriterion": [[320, 3, 1, "", "on_after_optimizer_step"], [320, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipMomentumCriterion": [[320, 3, 1, "", "on_after_optimizer_step"], [320, 6, 1, "", "scores"]], "neural_compressor.pruner.patterns": [[323, 2, 1, "", "BasePattern"], [323, 2, 1, "", "PatternNInM"], [323, 2, 1, "", "PatternNxM"], [323, 1, 1, "", "get_pattern"], [323, 1, 1, "", "register_pattern"]], "neural_compressor.pruner.patterns.BasePattern": [[323, 3, 1, "", "adjust_ratio"], [323, 3, 1, "", "check_layer_validity"], [323, 6, 1, "", "config"], [323, 3, 1, "", "get_block_size_dict"], [323, 3, 1, "", "get_masks"], [323, 3, 1, "", "get_masks_global"], [323, 3, 1, "", "get_masks_local"], [323, 3, 1, "", "get_pattern_lock_masks"], [323, 3, 1, "", "get_reduced_masks_from_data"], [323, 3, 1, "", "get_single_mask_per_target_ratio"], [323, 3, 1, "", "get_sparsity_ratio"], [323, 3, 1, "", "get_sparsity_ratio_each_layer"], [323, 6, 1, "", "invalid_layers"], [323, 6, 1, "", "is_global"], [323, 6, 1, "", "keep_mask_layers"], [323, 6, 1, "", "max_sparsity_ratio_per_op"], [323, 6, 1, "", "min_sparsity_ratio_per_op"], [323, 6, 1, "", "modules"], [323, 6, 1, "", "pattern"], [323, 3, 1, "", "reduce_tensor"], [323, 6, 1, "", "target_sparsity"], [323, 3, 1, "", "update_residual_cnt"]], "neural_compressor.pruner.patterns.PatternNInM": [[323, 6, 1, "", "M"], [323, 6, 1, "", "N"], [323, 3, 1, "", "check_layer_validity"], [323, 3, 1, "", "get_ele_mask_per_threshold"], [323, 3, 1, "", "get_least_ninm_mask_from_data"], [323, 3, 1, "", "get_masks_global"], [323, 3, 1, "", "get_pattern_lock_masks"], [323, 3, 1, "", "get_reduced_masks_from_data"], [323, 3, 1, "", "get_sparsity_ratio"], [323, 3, 1, "", "reduce_scores"], [323, 3, 1, "", "reshape_orig_to_pattern"], [323, 3, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.pruner.patterns.PatternNxM": [[323, 6, 1, "", "block_size"], [323, 3, 1, "", "check_layer_validity"], [323, 3, 1, "", "count_new_masked_cnts"], [323, 3, 1, "", "get_block_size_dict"], [323, 3, 1, "", "get_mask_per_threshold"], [323, 3, 1, "", "get_masks_global"], [323, 3, 1, "", "get_pattern_lock_masks"], [323, 3, 1, "", "get_reduced_masks_from_data"], [323, 3, 1, "", "get_sparsity_ratio"], [323, 3, 1, "", "get_sparsity_ratio_progressive"], [323, 3, 1, "", "reduce_scores"], [323, 3, 1, "", "reshape_orig_to_pattern"], [323, 3, 1, "", "reshape_reduced_to_orig"], [323, 3, 1, "", "update_new_added_masks"], [323, 3, 1, "", "update_progressive_masks"], [323, 3, 1, "", "update_progressive_masks_global"], [323, 3, 1, "", "update_progressive_masks_linear"], [323, 3, 1, "", "update_progressive_masks_local"], [323, 3, 1, "", "update_progressive_masks_scores"]], "neural_compressor.pruner.pruner_legacy": [[324, 0, 0, "-", "gradient_sensitivity"], [325, 0, 0, "-", "group_lasso"], [327, 0, 0, "-", "magnitude"], [328, 0, 0, "-", "pattern_lock"], [329, 0, 0, "-", "pruner"]], "neural_compressor.pruner.pruner_legacy.pruner": [[329, 1, 1, "", "pruner_registry"]], "neural_compressor.pruner.pruners": [[330, 2, 1, "", "BasePruner"], [330, 2, 1, "", "BasicPruner"], [330, 2, 1, "", "PatternLockPruner"], [330, 2, 1, "", "ProgressivePruner"], [330, 1, 1, "", "get_pruner"], [330, 1, 1, "", "parse_valid_pruner_types"], [330, 1, 1, "", "register_pruner"]], "neural_compressor.pruner.pruners.BasePruner": [[330, 3, 1, "", "check_is_pruned_step"], [330, 6, 1, "", "config"], [330, 6, 1, "", "current_sparsity_ratio"], [330, 6, 1, "", "end_step"], [330, 6, 1, "", "global_step"], [330, 3, 1, "", "mask_weights"], [330, 3, 1, "", "mask_weights_general"], [330, 6, 1, "", "masks"], [330, 6, 1, "", "max_sparsity_ratio_per_op"], [330, 6, 1, "", "modules"], [330, 3, 1, "", "on_after_eval"], [330, 3, 1, "", "on_after_optimizer_step"], [330, 3, 1, "", "on_before_eval"], [330, 3, 1, "", "on_before_optimizer_step"], [330, 3, 1, "", "on_epoch_begin"], [330, 3, 1, "", "on_epoch_end"], [330, 3, 1, "", "on_step_begin"], [330, 3, 1, "", "on_step_end"], [330, 3, 1, "", "on_train_begin"], [330, 3, 1, "", "on_train_end"], [330, 6, 1, "", "pattern"], [330, 6, 1, "", "pruning_frequency"], [330, 6, 1, "", "scheduler"], [330, 6, 1, "", "scores"], [330, 6, 1, "", "start_step"], [330, 6, 1, "", "target_sparsity_ratio"], [330, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.BasicPruner": [[330, 6, 1, "", "criterion"], [330, 3, 1, "", "on_after_optimizer_step"], [330, 3, 1, "", "on_before_optimizer_step"], [330, 6, 1, "", "pattern"], [330, 6, 1, "", "reg"], [330, 6, 1, "", "scheduler"], [330, 3, 1, "", "set_global_step"], [330, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.PatternLockPruner": [[330, 3, 1, "", "on_after_optimizer_step"], [330, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.ProgressivePruner": [[330, 3, 1, "", "check_is_pruned_progressive_step"], [330, 3, 1, "", "check_progressive_validity"], [330, 3, 1, "", "on_after_optimizer_step"], [330, 3, 1, "", "on_before_optimizer_step"], [330, 3, 1, "", "on_step_begin"], [330, 3, 1, "", "print_progressive_sparsity"], [330, 3, 1, "", "update_masks_progressive"]], "neural_compressor.pruner.pruning": [[331, 2, 1, "", "Pruning"]], "neural_compressor.pruner.pruning.Pruning": [[331, 6, 1, "", "config_file_path"], [331, 3, 1, "", "get_sparsity_ratio"], [331, 4, 1, "id0", "model"], [331, 3, 1, "", "on_after_eval"], [331, 3, 1, "", "on_after_optimizer_step"], [331, 3, 1, "", "on_before_eval"], [331, 3, 1, "", "on_before_optimizer_step"], [331, 3, 1, "", "on_epoch_begin"], [331, 3, 1, "", "on_epoch_end"], [331, 3, 1, "", "on_step_begin"], [331, 3, 1, "", "on_step_end"], [331, 3, 1, "", "on_train_begin"], [331, 3, 1, "", "on_train_end"], [331, 6, 1, "", "pruner_info"], [331, 6, 1, "", "pruners"], [331, 3, 1, "", "update_config"]], "neural_compressor.pruner.regs": [[332, 2, 1, "", "BaseReg"], [332, 2, 1, "", "GroupLasso"], [332, 1, 1, "", "get_reg"], [332, 1, 1, "", "get_reg_type"], [332, 1, 1, "", "register_reg"]], "neural_compressor.pruner.regs.BaseReg": [[332, 3, 1, "", "on_after_optimizer_step"], [332, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.regs.GroupLasso": [[332, 6, 1, "", "alpha"], [332, 3, 1, "", "on_after_optimizer_step"], [332, 3, 1, "", "on_before_optimizer_step"], [332, 6, 1, "", "reg_terms"]], "neural_compressor.pruner.schedulers": [[333, 2, 1, "", "IterativeScheduler"], [333, 2, 1, "", "OneshotScheduler"], [333, 2, 1, "", "PruningScheduler"], [333, 1, 1, "", "get_scheduler"], [333, 1, 1, "", "register_scheduler"]], "neural_compressor.pruner.schedulers.IterativeScheduler": [[333, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.OneshotScheduler": [[333, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.PruningScheduler": [[333, 6, 1, "", "config"], [333, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.utils": [[334, 1, 1, "", "check_config"], [334, 1, 1, "", "parse_to_prune"], [334, 1, 1, "", "process_and_check_config"], [334, 1, 1, "", "process_config"], [334, 1, 1, "", "process_weight_config"], [334, 1, 1, "", "process_yaml_config"], [334, 1, 1, "", "reset_none_to_default"], [334, 1, 1, "", "update_params"]], "neural_compressor.quantization": [[335, 1, 1, "", "fit"]], "neural_compressor.strategy": [[336, 0, 0, "-", "auto_mixed_precision"], [337, 0, 0, "-", "basic"], [338, 0, 0, "-", "bayesian"], [339, 0, 0, "-", "conservative"], [340, 0, 0, "-", "exhaustive"], [341, 0, 0, "-", "hawq_v2"], [343, 0, 0, "-", "mse"], [344, 0, 0, "-", "mse_v2"], [345, 0, 0, "-", "random"], [346, 0, 0, "-", "strategy"], [347, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[336, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[336, 3, 1, "", "next_tune_cfg"], [336, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[337, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[337, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[338, 2, 1, "", "BayesianOptimization"], [338, 2, 1, "", "BayesianTuneStrategy"], [338, 2, 1, "", "TargetSpace"], [338, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianOptimization": [[338, 3, 1, "", "gen_next_params"], [338, 4, 1, "", "max"], [338, 4, 1, "", "res"], [338, 4, 1, "", "space"], [338, 3, 1, "", "suggest"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[338, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[338, 3, 1, "", "array_to_params"], [338, 4, 1, "", "bounds"], [338, 4, 1, "", "dim"], [338, 4, 1, "", "empty"], [338, 3, 1, "", "get_target"], [338, 4, 1, "", "keys"], [338, 3, 1, "", "max"], [338, 4, 1, "", "params"], [338, 3, 1, "", "params_to_array"], [338, 3, 1, "", "random_sample"], [338, 3, 1, "", "register"], [338, 3, 1, "", "res"], [338, 4, 1, "", "target"]], "neural_compressor.strategy.conservative": [[339, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[339, 3, 1, "", "next_tune_cfg"], [339, 3, 1, "", "stop"], [339, 3, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[340, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[340, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[341, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[341, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[343, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[343, 3, 1, "", "mse_impact_lst"], [343, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[344, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[344, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[345, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[345, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[346, 2, 1, "", "TuneStrategy"], [346, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[346, 3, 1, "", "deploy_config"], [346, 4, 1, "", "evaluation_result"], [346, 3, 1, "", "initial_best_acc"], [346, 3, 1, "", "initial_tuning_cfg"], [346, 3, 1, "", "next_tune_cfg"], [346, 3, 1, "", "set_q_func"], [346, 3, 1, "", "set_tuning_space"], [346, 3, 1, "", "setup_resume"], [346, 3, 1, "", "show_baseline_info"], [346, 3, 1, "", "stop"], [346, 3, 1, "", "traverse"], [346, 3, 1, "", "update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils": [[347, 2, 1, "", "OpTuningConfig"], [348, 0, 0, "-", "tuning_sampler"], [349, 0, 0, "-", "tuning_space"], [350, 0, 0, "-", "tuning_structs"]], "neural_compressor.strategy.utils.OpTuningConfig": [[347, 3, 1, "", "from_state"], [347, 3, 1, "", "get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[350, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig": [[350, 3, 1, "", "from_state"], [350, 3, 1, "", "get_state"]], "neural_compressor.training": [[351, 2, 1, "", "CompressionManager"], [351, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[351, 3, 1, "", "export"], [351, 3, 1, "", "save"]], "neural_compressor.utils": [[355, 2, 1, "", "KL_Divergence"], [355, 2, 1, "", "LayerHistogramCollector"], [352, 0, 0, "-", "collect_layer_histogram"], [353, 0, 0, "-", "constant"], [354, 0, 0, "-", "create_obj_from_config"], [356, 0, 0, "-", "kl_divergence"], [357, 0, 0, "-", "load_huggingface"], [358, 0, 0, "-", "logger"], [359, 0, 0, "-", "options"], [360, 0, 0, "-", "pytorch"], [361, 0, 0, "-", "utility"]], "neural_compressor.utils.KL_Divergence": [[355, 3, 1, "", "expand_quantized_bins"], [355, 3, 1, "", "get_threshold"], [355, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.LayerHistogramCollector": [[355, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[352, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[352, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[354, 1, 1, "", "create_eval_func"], [354, 1, 1, "", "create_train_func"]], "neural_compressor.utils.kl_divergence": [[356, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[356, 3, 1, "", "expand_quantized_bins"], [356, 3, 1, "", "get_threshold"], [356, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.pytorch": [[360, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[361, 2, 1, "", "LazyImport"], [361, 2, 1, "", "MODE"], [361, 1, 1, "", "combine_histogram"], [361, 1, 1, "", "dump_data_to_local"], [361, 1, 1, "", "dump_elapsed_time"], [361, 1, 1, "", "equal_dicts"], [361, 1, 1, "", "get_size"], [361, 1, 1, "", "get_tuning_history"], [361, 1, 1, "", "load_data_from_pkl"], [361, 1, 1, "", "recover"]], "neural_compressor.ux": [[437, 0, 0, "-", "components"], [496, 0, 0, "-", "inc_bench"], [505, 0, 0, "-", "utils"], [531, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[365, 0, 0, "-", "benchmark"], [369, 0, 0, "-", "config_generator"], [377, 0, 0, "-", "configuration_wizard"], [413, 0, 0, "-", "db_manager"], [418, 0, 0, "-", "diagnosis"], [426, 0, 0, "-", "file_browser"], [432, 0, 0, "-", "graph"], [438, 0, 0, "-", "jobs_management"], [442, 0, 0, "-", "manage_workspace"], [444, 0, 0, "-", "model"], [463, 0, 0, "-", "model_zoo"], [465, 0, 0, "-", "names_mapper"], [472, 0, 0, "-", "optimization"], [488, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[365, 2, 1, "", "Benchmarks"], [362, 0, 0, "-", "benchmark"], [363, 0, 0, "-", "benchmark_model"], [364, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[362, 2, 1, "", "Benchmark"], [362, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[362, 4, 1, "", "config_filename"], [362, 4, 1, "", "configuration_data"], [362, 3, 1, "", "execute"], [362, 3, 1, "", "generate_config"], [362, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[363, 1, 1, "", "benchmark_model"], [363, 1, 1, "", "parse_args"], [363, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[364, 1, 1, "", "benchmark_result_update"], [364, 1, 1, "", "benchmark_result_update_pytorch_script"], [364, 1, 1, "", "execute_benchmark"], [364, 1, 1, "", "execute_real_benchmark"], [364, 1, 1, "", "pytorch_script_bench_optimizations"], [364, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[366, 0, 0, "-", "benchmark_config_generator"], [367, 0, 0, "-", "config_generator"], [368, 0, 0, "-", "graph_optimization_config_generator"], [370, 0, 0, "-", "mixed_precision_config_generator"], [371, 0, 0, "-", "profiling_config_generator"], [372, 0, 0, "-", "pruning_config_generator"], [373, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[366, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[366, 3, 1, "", "generate"], [366, 3, 1, "", "generate_accuracy_config"], [366, 3, 1, "", "generate_evaluation_config"], [366, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[367, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[367, 3, 1, "", "generate"], [367, 3, 1, "", "generate_dataloader_config"], [367, 3, 1, "", "generate_model_config"], [367, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[368, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[368, 3, 1, "", "generate"], [368, 3, 1, "", "generate_evaluation_config"], [368, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[370, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[370, 3, 1, "", "generate"], [370, 3, 1, "", "generate_evaluation_config"], [370, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[371, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[371, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[372, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator": [[372, 3, 1, "", "generate"], [372, 3, 1, "", "generate_evaluation_config"], [372, 3, 1, "", "generate_pruning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[373, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[373, 3, 1, "", "generate"], [373, 3, 1, "", "generate_evaluation_config"], [373, 3, 1, "", "generate_quantization_config"], [373, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[374, 0, 0, "-", "configuration_parser"], [375, 0, 0, "-", "get_boundary_nodes"], [376, 0, 0, "-", "get_configuration"], [378, 0, 0, "-", "params_feeder"], [379, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[374, 2, 1, "", "ConfigurationParser"], [374, 1, 1, "", "normalize_string_list"], [374, 1, 1, "", "parse_list_value"], [374, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[374, 3, 1, "", "get_param_type"], [374, 3, 1, "", "parse"], [374, 3, 1, "", "parse_dataloader"], [374, 3, 1, "", "parse_evaluation_data"], [374, 3, 1, "", "parse_metric"], [374, 3, 1, "", "parse_transforms"], [374, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[375, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[376, 1, 1, "", "get_predefined_configuration"], [376, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[378, 2, 1, "", "Feeder"], [378, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[378, 3, 1, "", "feed"], [378, 3, 1, "", "get_dataloaders"], [378, 3, 1, "", "get_domains"], [378, 3, 1, "", "get_frameworks"], [378, 3, 1, "", "get_metrics"], [378, 3, 1, "", "get_models"], [378, 3, 1, "", "get_objectives"], [378, 3, 1, "", "get_precisions"], [378, 3, 1, "", "get_quantization_approaches"], [378, 3, 1, "", "get_strategies"], [378, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[379, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser": [[379, 3, 1, "", "generate_tree"], [379, 3, 1, "", "parse"], [379, 3, 1, "", "parse_entry"]], "neural_compressor.ux.components.db_manager": [[413, 2, 1, "", "DBManager"], [380, 0, 0, "-", "db_manager"], [389, 0, 0, "-", "db_models"], [408, 0, 0, "-", "db_operations"], [414, 0, 0, "-", "params_interfaces"], [415, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[413, 3, 1, "", "create_all"], [413, 3, 1, "", "create_sqlalchemy_engine"], [413, 4, 1, "", "engine"], [413, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[380, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[380, 3, 1, "", "create_all"], [380, 3, 1, "", "create_sqlalchemy_engine"], [380, 4, 1, "", "engine"], [380, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[381, 0, 0, "-", "benchmark"], [382, 0, 0, "-", "benchmark_result"], [383, 0, 0, "-", "dataloader"], [384, 0, 0, "-", "dataset"], [385, 0, 0, "-", "domain"], [386, 0, 0, "-", "domain_flavour"], [387, 0, 0, "-", "example"], [388, 0, 0, "-", "framework"], [390, 0, 0, "-", "metric"], [391, 0, 0, "-", "model"], [392, 0, 0, "-", "optimization"], [393, 0, 0, "-", "optimization_type"], [394, 0, 0, "-", "precision"], [395, 0, 0, "-", "profiling"], [396, 0, 0, "-", "profiling_result"], [397, 0, 0, "-", "project"], [398, 0, 0, "-", "pruning_details"], [399, 0, 0, "-", "transform"], [400, 0, 0, "-", "tuning_details"], [401, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[381, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[381, 3, 1, "", "add"], [381, 3, 1, "", "build_info"], [381, 3, 1, "", "clean_status"], [381, 3, 1, "", "delete_benchmark"], [381, 3, 1, "", "details"], [381, 3, 1, "", "list"], [381, 3, 1, "", "update_batch_size"], [381, 3, 1, "", "update_config_path"], [381, 3, 1, "", "update_cores_per_instance"], [381, 3, 1, "", "update_dataset"], [381, 3, 1, "", "update_duration"], [381, 3, 1, "", "update_execution_command"], [381, 3, 1, "", "update_log_path"], [381, 3, 1, "", "update_mode"], [381, 3, 1, "", "update_number_of_instance"], [381, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[382, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[382, 3, 1, "", "add"], [382, 3, 1, "", "build_info"], [382, 3, 1, "", "update_accuracy"], [382, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[383, 2, 1, "", "Dataloader"], [383, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[383, 3, 1, "", "list"], [383, 3, 1, "", "list_by_framework"], [383, 3, 1, "", "query_to_list"], [383, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[384, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[384, 3, 1, "", "add"], [384, 3, 1, "", "build_info"], [384, 3, 1, "", "delete_dataset"], [384, 3, 1, "", "details"], [384, 3, 1, "", "list"], [384, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[385, 2, 1, "", "Domain"], [385, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[385, 3, 1, "", "get_domain_id"], [385, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[386, 2, 1, "", "DomainFlavour"], [386, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[386, 3, 1, "", "get_domain_flavour_id"], [386, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[387, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[388, 2, 1, "", "Framework"], [388, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[388, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[390, 2, 1, "", "Metric"], [390, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[390, 3, 1, "", "list"], [390, 3, 1, "", "list_by_framework"], [390, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[391, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[391, 3, 1, "", "add"], [391, 3, 1, "", "build_info"], [391, 3, 1, "", "delete_model"], [391, 3, 1, "", "details"], [391, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[392, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[392, 3, 1, "", "add"], [392, 3, 1, "", "build_info"], [392, 3, 1, "", "clean_status"], [392, 3, 1, "", "delete_optimization"], [392, 3, 1, "", "details"], [392, 3, 1, "", "get_optimization_by_project_and_model"], [392, 3, 1, "", "get_pinned_benchmarks"], [392, 3, 1, "", "list"], [392, 3, 1, "", "pin_accuracy_benchmark"], [392, 3, 1, "", "pin_performance_benchmark"], [392, 3, 1, "", "unpin_benchmark"], [392, 3, 1, "", "update_batch_size"], [392, 3, 1, "", "update_config_path"], [392, 3, 1, "", "update_dataset"], [392, 3, 1, "", "update_duration"], [392, 3, 1, "", "update_execution_command"], [392, 3, 1, "", "update_log_path"], [392, 3, 1, "", "update_optimized_model"], [392, 3, 1, "", "update_precision"], [392, 3, 1, "", "update_pruning_details"], [392, 3, 1, "", "update_sampling_size"], [392, 3, 1, "", "update_status"], [392, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[393, 2, 1, "", "OptimizationType"], [393, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[393, 3, 1, "", "add"], [393, 3, 1, "", "get_optimization_type_by_id"], [393, 3, 1, "", "get_optimization_type_by_name"], [393, 3, 1, "", "get_optimization_type_for_precision"], [393, 3, 1, "", "get_optimization_type_id"], [393, 3, 1, "", "list"], [393, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[394, 2, 1, "", "Precision"], [394, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[394, 3, 1, "", "add"], [394, 3, 1, "", "get_precision_by_id"], [394, 3, 1, "", "get_precision_by_name"], [394, 3, 1, "", "get_precision_id"], [394, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[395, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[395, 3, 1, "", "add"], [395, 3, 1, "", "build_info"], [395, 3, 1, "", "clean_status"], [395, 3, 1, "", "delete_profiling"], [395, 3, 1, "", "details"], [395, 3, 1, "", "list"], [395, 3, 1, "", "update_dataset"], [395, 3, 1, "", "update_duration"], [395, 3, 1, "", "update_execution_command"], [395, 3, 1, "", "update_log_path"], [395, 3, 1, "", "update_num_threads"], [395, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[396, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[396, 3, 1, "", "add"], [396, 3, 1, "", "build_info"], [396, 3, 1, "", "bulk_add"], [396, 3, 1, "", "delete_results"], [396, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[397, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[397, 3, 1, "", "create_project"], [397, 3, 1, "", "delete_project"], [397, 3, 1, "", "get_model_by_name"], [397, 3, 1, "", "list_projects"], [397, 3, 1, "", "project_details"], [397, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[398, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails": [[398, 3, 1, "", "add"], [398, 3, 1, "", "build_info"], [398, 3, 1, "", "delete_pruning_details"], [398, 3, 1, "", "update"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[399, 2, 1, "", "Transform"], [399, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[399, 3, 1, "", "list"], [399, 3, 1, "", "list_by_domain"], [399, 3, 1, "", "list_by_framework"], [399, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[400, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[400, 3, 1, "", "add"], [400, 3, 1, "", "delete_tuning_details"], [400, 3, 1, "", "update"], [400, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[401, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[401, 3, 1, "", "add"], [401, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[408, 2, 1, "", "BenchmarkAPIInterface"], [408, 2, 1, "", "DatasetAPIInterface"], [408, 2, 1, "", "DiagnosisAPIInterface"], [408, 2, 1, "", "DictionariesAPIInterface"], [408, 2, 1, "", "ExamplesAPIInterface"], [408, 2, 1, "", "ModelAPIInterface"], [408, 2, 1, "", "OptimizationAPIInterface"], [408, 2, 1, "", "ProfilingAPIInterface"], [408, 2, 1, "", "ProjectAPIInterface"], [402, 0, 0, "-", "benchmark_api_interface"], [403, 0, 0, "-", "dataset_api_interface"], [404, 0, 0, "-", "db_operations"], [405, 0, 0, "-", "diagnosis_api_interface"], [406, 0, 0, "-", "dictionaries_api_interface"], [407, 0, 0, "-", "examples_api_interface"], [409, 0, 0, "-", "model_api_interface"], [410, 0, 0, "-", "optimization_api_interface"], [411, 0, 0, "-", "profiling_api_interface"], [412, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[408, 3, 1, "", "add_benchmark"], [408, 3, 1, "", "add_result"], [408, 3, 1, "", "clean_status"], [408, 3, 1, "", "delete_benchmark"], [408, 3, 1, "", "edit_benchmark"], [408, 3, 1, "", "get_benchmark_details"], [408, 3, 1, "", "list_benchmarks"], [408, 3, 1, "", "parse_benchmark_data"], [408, 3, 1, "", "parse_benchmark_edit_data"], [408, 3, 1, "", "update_benchmark_accuracy"], [408, 3, 1, "", "update_benchmark_duration"], [408, 3, 1, "", "update_benchmark_performance"], [408, 3, 1, "", "update_benchmark_status"], [408, 3, 1, "", "update_execution_command"], [408, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[408, 3, 1, "", "add_dataset"], [408, 3, 1, "", "check_if_custom_metric_or_dataloader"], [408, 3, 1, "", "dataloader_path"], [408, 3, 1, "", "delete_dataset"], [408, 3, 1, "", "generate_custom_template"], [408, 3, 1, "", "generate_template"], [408, 3, 1, "", "get_dataset_details"], [408, 3, 1, "", "get_predefined_dataset"], [408, 3, 1, "", "list_datasets"], [408, 3, 1, "", "parse_dataset_data"], [408, 3, 1, "", "prepare_predefined_dataloader"], [408, 3, 1, "", "prepare_predefined_transform"], [408, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[408, 3, 1, "", "generate_optimization"], [408, 3, 1, "", "get_op_details"], [408, 3, 1, "", "get_op_list"], [408, 3, 1, "", "histogram"], [408, 3, 1, "", "model_wise_params"], [408, 3, 1, "", "parse_model_wise_config"], [408, 3, 1, "", "parse_op_wise_config"], [408, 3, 1, "", "parse_optimization_data"], [408, 3, 1, "", "parse_wise_parameters"], [408, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[408, 3, 1, "", "list_dataloaders"], [408, 3, 1, "", "list_dataloaders_by_framework"], [408, 3, 1, "", "list_domain_flavours"], [408, 3, 1, "", "list_domains"], [408, 3, 1, "", "list_metrics"], [408, 3, 1, "", "list_metrics_by_framework"], [408, 3, 1, "", "list_optimization_types"], [408, 3, 1, "", "list_optimization_types_for_precision"], [408, 3, 1, "", "list_precisions"], [408, 3, 1, "", "list_transforms"], [408, 3, 1, "", "list_transforms_by_domain"], [408, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[408, 3, 1, "", "create_project"], [408, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[408, 3, 1, "", "add_model"], [408, 3, 1, "", "delete_model"], [408, 3, 1, "", "get_model_details"], [408, 3, 1, "", "list_models"], [408, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[408, 3, 1, "", "add_optimization"], [408, 3, 1, "", "add_pruning_optimization"], [408, 3, 1, "", "add_quantization_optimization"], [408, 3, 1, "", "add_standard_optimization"], [408, 3, 1, "", "add_tuning_history"], [408, 3, 1, "", "clean_status"], [408, 3, 1, "", "delete_optimization"], [408, 3, 1, "", "edit_optimization"], [408, 3, 1, "", "edit_pruning_details"], [408, 3, 1, "", "edit_tuning_details"], [408, 3, 1, "", "get_optimization_details"], [408, 3, 1, "", "get_pruning_details"], [408, 3, 1, "", "list_optimizations"], [408, 3, 1, "", "load_pruning_details_config"], [408, 3, 1, "", "parse_optimization_data"], [408, 3, 1, "", "parse_optimization_edit_data"], [408, 3, 1, "", "parse_tuning_history"], [408, 3, 1, "", "pin_accuracy_benchmark"], [408, 3, 1, "", "pin_performance_benchmark"], [408, 3, 1, "", "update_execution_command"], [408, 3, 1, "", "update_optimization_duration"], [408, 3, 1, "", "update_optimization_status"], [408, 3, 1, "", "update_optimized_model"], [408, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[408, 3, 1, "", "add_profiling"], [408, 3, 1, "", "add_result"], [408, 3, 1, "", "bulk_add_results"], [408, 3, 1, "", "clean_status"], [408, 3, 1, "", "delete_profiling"], [408, 3, 1, "", "edit_profiling"], [408, 3, 1, "", "get_profiling_details"], [408, 3, 1, "", "list_profilings"], [408, 3, 1, "", "parse_profiling_data"], [408, 3, 1, "", "parse_profiling_edit_data"], [408, 3, 1, "", "parse_profiling_result_data"], [408, 3, 1, "", "update_execution_command"], [408, 3, 1, "", "update_log_path"], [408, 3, 1, "", "update_profiling_duration"], [408, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[408, 3, 1, "", "add_dummy_dataset"], [408, 3, 1, "", "add_model"], [408, 3, 1, "", "create_project"], [408, 3, 1, "", "delete_project"], [408, 3, 1, "", "get_project_details"], [408, 3, 1, "", "list_projects"], [408, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[402, 2, 1, "", "BenchmarkAPIInterface"], [402, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[402, 3, 1, "", "add_benchmark"], [402, 3, 1, "", "add_result"], [402, 3, 1, "", "clean_status"], [402, 3, 1, "", "delete_benchmark"], [402, 3, 1, "", "edit_benchmark"], [402, 3, 1, "", "get_benchmark_details"], [402, 3, 1, "", "list_benchmarks"], [402, 3, 1, "", "parse_benchmark_data"], [402, 3, 1, "", "parse_benchmark_edit_data"], [402, 3, 1, "", "update_benchmark_accuracy"], [402, 3, 1, "", "update_benchmark_duration"], [402, 3, 1, "", "update_benchmark_performance"], [402, 3, 1, "", "update_benchmark_status"], [402, 3, 1, "", "update_execution_command"], [402, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[403, 2, 1, "", "DatasetAPIInterface"], [403, 1, 1, "", "initialize_associations"], [403, 1, 1, "", "initialize_precision_optimization_types_association"], [403, 1, 1, "", "search_in_list_of_dict"], [403, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [403, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[403, 3, 1, "", "add_dataset"], [403, 3, 1, "", "check_if_custom_metric_or_dataloader"], [403, 3, 1, "", "dataloader_path"], [403, 3, 1, "", "delete_dataset"], [403, 3, 1, "", "generate_custom_template"], [403, 3, 1, "", "generate_template"], [403, 3, 1, "", "get_dataset_details"], [403, 3, 1, "", "get_predefined_dataset"], [403, 3, 1, "", "list_datasets"], [403, 3, 1, "", "parse_dataset_data"], [403, 3, 1, "", "prepare_predefined_dataloader"], [403, 3, 1, "", "prepare_predefined_transform"], [403, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[404, 1, 1, "", "initialize_associations"], [404, 1, 1, "", "initialize_precision_optimization_types_association"], [404, 1, 1, "", "search_in_list_of_dict"], [404, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [404, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[405, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[405, 3, 1, "", "generate_optimization"], [405, 3, 1, "", "get_op_details"], [405, 3, 1, "", "get_op_list"], [405, 3, 1, "", "histogram"], [405, 3, 1, "", "model_wise_params"], [405, 3, 1, "", "parse_model_wise_config"], [405, 3, 1, "", "parse_op_wise_config"], [405, 3, 1, "", "parse_optimization_data"], [405, 3, 1, "", "parse_wise_parameters"], [405, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[406, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[406, 3, 1, "", "list_dataloaders"], [406, 3, 1, "", "list_dataloaders_by_framework"], [406, 3, 1, "", "list_domain_flavours"], [406, 3, 1, "", "list_domains"], [406, 3, 1, "", "list_metrics"], [406, 3, 1, "", "list_metrics_by_framework"], [406, 3, 1, "", "list_optimization_types"], [406, 3, 1, "", "list_optimization_types_for_precision"], [406, 3, 1, "", "list_precisions"], [406, 3, 1, "", "list_transforms"], [406, 3, 1, "", "list_transforms_by_domain"], [406, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[407, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[407, 3, 1, "", "create_project"], [407, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[409, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[409, 3, 1, "", "add_model"], [409, 3, 1, "", "delete_model"], [409, 3, 1, "", "get_model_details"], [409, 3, 1, "", "list_models"], [409, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[410, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[410, 3, 1, "", "add_optimization"], [410, 3, 1, "", "add_pruning_optimization"], [410, 3, 1, "", "add_quantization_optimization"], [410, 3, 1, "", "add_standard_optimization"], [410, 3, 1, "", "add_tuning_history"], [410, 3, 1, "", "clean_status"], [410, 3, 1, "", "delete_optimization"], [410, 3, 1, "", "edit_optimization"], [410, 3, 1, "", "edit_pruning_details"], [410, 3, 1, "", "edit_tuning_details"], [410, 3, 1, "", "get_optimization_details"], [410, 3, 1, "", "get_pruning_details"], [410, 3, 1, "", "list_optimizations"], [410, 3, 1, "", "load_pruning_details_config"], [410, 3, 1, "", "parse_optimization_data"], [410, 3, 1, "", "parse_optimization_edit_data"], [410, 3, 1, "", "parse_tuning_history"], [410, 3, 1, "", "pin_accuracy_benchmark"], [410, 3, 1, "", "pin_performance_benchmark"], [410, 3, 1, "", "update_execution_command"], [410, 3, 1, "", "update_optimization_duration"], [410, 3, 1, "", "update_optimization_status"], [410, 3, 1, "", "update_optimized_model"], [410, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[411, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[411, 3, 1, "", "add_profiling"], [411, 3, 1, "", "add_result"], [411, 3, 1, "", "bulk_add_results"], [411, 3, 1, "", "clean_status"], [411, 3, 1, "", "delete_profiling"], [411, 3, 1, "", "edit_profiling"], [411, 3, 1, "", "get_profiling_details"], [411, 3, 1, "", "list_profilings"], [411, 3, 1, "", "parse_profiling_data"], [411, 3, 1, "", "parse_profiling_edit_data"], [411, 3, 1, "", "parse_profiling_result_data"], [411, 3, 1, "", "update_execution_command"], [411, 3, 1, "", "update_log_path"], [411, 3, 1, "", "update_profiling_duration"], [411, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[412, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[412, 3, 1, "", "add_dummy_dataset"], [412, 3, 1, "", "add_model"], [412, 3, 1, "", "create_project"], [412, 3, 1, "", "delete_project"], [412, 3, 1, "", "get_project_details"], [412, 3, 1, "", "list_projects"], [412, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[414, 2, 1, "", "BenchmarkAddParamsInterface"], [414, 2, 1, "", "BenchmarkEditParamsInterface"], [414, 2, 1, "", "DatasetAddParamsInterface"], [414, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [414, 2, 1, "", "ModelAddParamsInterface"], [414, 2, 1, "", "OptimizationAddParamsInterface"], [414, 2, 1, "", "OptimizationEditParamsInterface"], [414, 2, 1, "", "ProfilingAddParamsInterface"], [414, 2, 1, "", "ProfilingEditParamsInterface"], [414, 2, 1, "", "ProfilingResultAddParamsInterface"], [414, 2, 1, "", "TuningHistoryInterface"], [414, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[414, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[414, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[414, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[415, 1, 1, "", "get_framework_dataloaders_config"], [415, 1, 1, "", "get_framework_transforms_config"], [415, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[416, 0, 0, "-", "diagnosis"], [417, 0, 0, "-", "factory"], [419, 0, 0, "-", "onnx_diagnosis"], [421, 0, 0, "-", "op_details"], [422, 0, 0, "-", "op_entry"], [423, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[416, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[416, 3, 1, "", "calculate_mse"], [416, 3, 1, "", "get_histogram_data"], [416, 3, 1, "", "get_op_details"], [416, 3, 1, "", "get_op_list"], [416, 3, 1, "", "get_tensors_info"], [416, 3, 1, "", "load_quantization_config"], [416, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[417, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[417, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[420, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[420, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[420, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[421, 2, 1, "", "OpActivation"], [421, 2, 1, "", "OpDetails"], [421, 2, 1, "", "OpPattern"], [421, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[421, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[422, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[422, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[424, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[424, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[424, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[425, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[425, 1, 1, "", "create_dir_entry"], [425, 1, 1, "", "create_entry"], [425, 1, 1, "", "create_file_entry"], [425, 1, 1, "", "filter_requested_entries"], [425, 1, 1, "", "get_directory_entries"], [425, 1, 1, "", "get_filter_value"], [425, 1, 1, "", "get_non_hidden_directory_entries"], [425, 1, 1, "", "get_requested_path"], [425, 1, 1, "", "get_setting_value"], [425, 1, 1, "", "is_dataset_or_directory_entry"], [425, 1, 1, "", "is_directory_entry"], [425, 1, 1, "", "is_model_or_directory_entry"], [425, 1, 1, "", "should_show_files"], [425, 1, 1, "", "should_show_only_model_files"], [425, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[427, 0, 0, "-", "attribute"], [428, 0, 0, "-", "collapser"], [429, 0, 0, "-", "edge"], [430, 0, 0, "-", "graph"], [431, 0, 0, "-", "graph_reader"], [433, 0, 0, "-", "node"], [434, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[427, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[428, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[428, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[429, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[429, 4, 1, "", "source"], [429, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[430, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[430, 3, 1, "", "add_edge"], [430, 3, 1, "", "add_node"], [430, 4, 1, "", "edges"], [430, 3, 1, "", "get_node"], [430, 3, 1, "", "get_target_nodes"], [430, 3, 1, "", "highlight_pattern"], [430, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[431, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[431, 3, 1, "", "find_pattern_in_graph"], [431, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[433, 2, 1, "", "GroupNode"], [433, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[435, 0, 0, "-", "onnxrt_reader"], [436, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[435, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[435, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[436, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[436, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[439, 0, 0, "-", "jobs_control_queue"], [440, 0, 0, "-", "jobs_manager"], [441, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[442, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[443, 0, 0, "-", "domain"], [445, 0, 0, "-", "model"], [446, 0, 0, "-", "model_type_getter"], [447, 0, 0, "-", "onnxrt"], [449, 0, 0, "-", "pytorch"], [451, 0, 0, "-", "repository"], [452, 0, 0, "-", "shape"], [454, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[443, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[445, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[445, 4, 1, "", "domain"], [445, 3, 1, "", "ensure_supported_path"], [445, 3, 1, "", "get_framework_name"], [445, 3, 1, "", "get_input_nodes"], [445, 3, 1, "", "get_model_graph"], [445, 3, 1, "", "get_output_nodes"], [445, 3, 1, "", "get_tensors_info"], [445, 3, 1, "", "guard_requirements_installed"], [445, 4, 1, "", "input_shape"], [445, 4, 1, "", "shape_elements_order"], [445, 4, 1, "", "supports_graph"], [445, 3, 1, "", "supports_path"], [445, 4, 1, "", "supports_profiling"], [445, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.model_type_getter": [[446, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[448, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[448, 2, 1, "", "OnnxrtModel"], [448, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[448, 4, 1, "", "domain"], [448, 4, 1, "", "filtered_input_nodes"], [448, 3, 1, "", "get_framework_name"], [448, 3, 1, "", "get_model_graph"], [448, 3, 1, "", "guard_requirements_installed"], [448, 4, 1, "", "input_shape"], [448, 4, 1, "", "nc_model_instance"], [448, 4, 1, "", "shape_elements_order"], [448, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[450, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[450, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[450, 3, 1, "", "get_framework_name"], [450, 3, 1, "", "guard_requirements_installed"], [450, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[451, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[451, 3, 1, "", "get_framework_from_path"], [451, 3, 1, "", "get_frameworks"], [451, 3, 1, "", "get_model"], [451, 3, 1, "", "get_supported_frameworks"], [451, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[452, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[452, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[453, 0, 0, "-", "frozen_pb"], [455, 0, 0, "-", "keras"], [456, 0, 0, "-", "meta_graph"], [457, 0, 0, "-", "model"], [458, 0, 0, "-", "saved_model"], [459, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[453, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[453, 3, 1, "", "supports_path"], [453, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[455, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[455, 3, 1, "", "get_input_nodes"], [455, 3, 1, "", "get_output_nodes"], [455, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[456, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[456, 3, 1, "", "get_input_nodes"], [456, 3, 1, "", "get_model_graph"], [456, 3, 1, "", "get_output_nodes"], [456, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[457, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[457, 3, 1, "", "get_framework_name"], [457, 3, 1, "", "get_input_nodes"], [457, 3, 1, "", "get_model_graph"], [457, 3, 1, "", "get_output_nodes"], [457, 3, 1, "", "guard_requirements_installed"], [457, 4, 1, "", "input_shape"], [457, 4, 1, "", "nc_model_instance"], [457, 4, 1, "", "shape_elements_order"], [457, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[458, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[458, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[459, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[460, 0, 0, "-", "download_config"], [461, 0, 0, "-", "download_model"], [462, 0, 0, "-", "downloader"], [464, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[460, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[461, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[462, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[462, 3, 1, "", "download"], [462, 3, 1, "", "download_config"], [462, 3, 1, "", "download_file"], [462, 3, 1, "", "download_model"], [462, 3, 1, "", "download_yaml_config"], [462, 3, 1, "", "get_yaml_url"], [462, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[464, 1, 1, "", "check_version"], [464, 1, 1, "", "get_available_models"], [464, 1, 1, "", "get_framework_module_name"], [464, 1, 1, "", "get_installed_frameworks"], [464, 1, 1, "", "list_models"], [464, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[466, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[466, 2, 1, "", "MappingDirection"], [466, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[466, 4, 1, "", "domain_flavour_mappings"], [466, 4, 1, "", "domain_mappings"], [466, 4, 1, "", "framework_mappings"], [466, 3, 1, "", "map_name"], [466, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[472, 2, 1, "", "Optimizations"], [467, 0, 0, "-", "execute_optimization"], [468, 0, 0, "-", "factory"], [470, 0, 0, "-", "graph_optimizer"], [473, 0, 0, "-", "mixed_precision"], [476, 0, 0, "-", "neural_coder_optimization"], [478, 0, 0, "-", "optimization"], [479, 0, 0, "-", "pruning"], [482, 0, 0, "-", "tune"], [485, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[467, 1, 1, "", "check_if_collect_tuning_history"], [467, 1, 1, "", "execute_optimization"], [467, 1, 1, "", "execute_optimization_pytorch_script"], [467, 1, 1, "", "execute_optimization_regular"], [467, 1, 1, "", "parse_logs"], [467, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[468, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[468, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[469, 0, 0, "-", "graph_optimization"], [471, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[469, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[469, 4, 1, "", "configuration_data"], [469, 3, 1, "", "execute"], [469, 3, 1, "", "generate_config"], [469, 4, 1, "", "optimization_script"], [469, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[471, 1, 1, "", "optimize_graph"], [471, 1, 1, "", "optimize_graph_config"], [471, 1, 1, "", "parse_args"], [471, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[474, 0, 0, "-", "mixed_precision"], [475, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[474, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[474, 4, 1, "", "configuration_data"], [474, 3, 1, "", "execute"], [474, 3, 1, "", "generate_config"], [474, 4, 1, "", "optimization_script"], [474, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[475, 1, 1, "", "optimize_graph"], [475, 1, 1, "", "optimize_graph_config"], [475, 1, 1, "", "parse_args"], [475, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[477, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[477, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[478, 2, 1, "", "DataloaderInterface"], [478, 2, 1, "", "Optimization"], [478, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[478, 4, 1, "", "command"], [478, 4, 1, "", "config_filename"], [478, 4, 1, "", "configuration_data"], [478, 3, 1, "", "execute"], [478, 3, 1, "", "generate_config"], [478, 4, 1, "", "optimization_script"], [478, 4, 1, "", "output_model_dir"], [478, 4, 1, "", "output_model_name"], [478, 4, 1, "", "parameters"], [478, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.pruning": [[480, 0, 0, "-", "optimize_model"], [481, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[480, 1, 1, "", "optimize_model"], [480, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[481, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning.Pruning": [[481, 4, 1, "", "configuration_data"], [481, 3, 1, "", "execute"], [481, 3, 1, "", "generate_config"], [481, 4, 1, "", "optimization_script"], [481, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tune": [[483, 0, 0, "-", "tune_model"], [484, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[483, 1, 1, "", "parse_args"], [483, 1, 1, "", "set_eager_execution"], [483, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[484, 2, 1, "", "AccuracyCriterion"], [484, 2, 1, "", "Tuning"], [484, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[484, 4, 1, "", "configuration_data"], [484, 3, 1, "", "execute"], [484, 3, 1, "", "generate_config"], [484, 4, 1, "", "optimization_script"], [484, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[485, 2, 1, "", "TuningHistory"], [485, 2, 1, "", "Watcher"], [485, 1, 1, "", "tuning_history"], [485, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[485, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[485, 3, 1, "", "history_file_modification_time"], [485, 3, 1, "", "stop"], [485, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[486, 0, 0, "-", "execute_profiling"], [487, 0, 0, "-", "factory"], [489, 0, 0, "-", "profile_model"], [490, 0, 0, "-", "profiler"], [491, 0, 0, "-", "profiling"], [493, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[486, 1, 1, "", "execute_profiling"], [486, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[487, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[487, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[489, 1, 1, "", "load_profiling_details"], [489, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[490, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[490, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[491, 2, 1, "", "DataloaderInterface"], [491, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[491, 4, 1, "", "config_filename"], [491, 4, 1, "", "config_path"], [491, 3, 1, "", "execute"], [491, 3, 1, "", "generate_config"], [491, 4, 1, "", "profiling_data"], [491, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[492, 0, 0, "-", "factory"], [494, 0, 0, "-", "profiler"], [495, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[492, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[492, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[494, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[494, 3, 1, "", "build_dataloader"], [494, 3, 1, "", "convert_nodes_to_list"], [494, 3, 1, "", "create_tf_config"], [494, 3, 1, "", "get_node_by_name"], [494, 3, 1, "", "initialize_graph"], [494, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[495, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[496, 1, 1, "", "main"], [496, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[498, 0, 0, "-", "consts"], [499, 0, 0, "-", "environment"], [500, 0, 0, "-", "exceptions"], [501, 0, 0, "-", "executor"], [502, 0, 0, "-", "expiring_dict"], [503, 0, 0, "-", "github_info"], [504, 0, 0, "-", "hw_info"], [506, 0, 0, "-", "json_serializer"], [507, 0, 0, "-", "logger"], [508, 0, 0, "-", "parser"], [509, 0, 0, "-", "proc"], [510, 0, 0, "-", "processes"], [511, 0, 0, "-", "singleton"], [512, 0, 0, "-", "status_updates"], [513, 0, 0, "-", "templates"], [516, 0, 0, "-", "utils"], [521, 0, 0, "-", "workload"], [527, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[498, 2, 1, "", "DomainFlavours"], [498, 2, 1, "", "Domains"], [498, 2, 1, "", "ExecutionStatus"], [498, 2, 1, "", "Frameworks"], [498, 2, 1, "", "OptimizationTypes"], [498, 2, 1, "", "Precisions"], [498, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[499, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[499, 3, 1, "", "clean_workloads_wip_status"], [499, 3, 1, "", "ensure_workdir_exists_and_writeable"], [499, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[500, 7, 1, "", "AccessDeniedException"], [500, 7, 1, "", "ClientErrorException"], [500, 7, 1, "", "InternalException"], [500, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[501, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[501, 4, 1, "", "additional_log_names"], [501, 3, 1, "", "call"], [501, 3, 1, "", "call_one"], [501, 3, 1, "", "is_multi_commands"], [501, 4, 1, "", "log_name"], [501, 4, 1, "", "process_duration"], [501, 3, 1, "", "refresh_workdir"], [501, 4, 1, "", "request_id"], [501, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[502, 2, 1, "", "ExpiringDict"], [502, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[502, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[503, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[503, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[504, 2, 1, "", "HWInfo"], [504, 1, 1, "", "get_bios_version"], [504, 1, 1, "", "get_distribution"], [504, 1, 1, "", "get_framework_dependency_info"], [504, 1, 1, "", "get_framework_info"], [504, 1, 1, "", "get_kernel_version"], [504, 1, 1, "", "get_number_of_sockets"], [504, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[504, 3, 1, "", "initialize"], [504, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[506, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[506, 3, 1, "", "serialize"], [506, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[507, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[508, 2, 1, "", "AccuracyParser"], [508, 2, 1, "", "BenchmarkParserFactory"], [508, 2, 1, "", "OptimizationParser"], [508, 2, 1, "", "Parser"], [508, 2, 1, "", "PerformanceParser"], [508, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[508, 4, 1, "", "patterns"], [508, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[508, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[508, 4, 1, "", "patterns"], [508, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[508, 4, 1, "", "patterns"], [508, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[508, 4, 1, "", "patterns"], [508, 3, 1, "", "process"], [508, 3, 1, "", "summarize_partial"], [508, 3, 1, "", "summarize_value"], [508, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[508, 4, 1, "", "patterns"], [508, 3, 1, "", "process"], [508, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[509, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[509, 4, 1, "", "info"], [509, 4, 1, "", "info_path"], [509, 4, 1, "", "is_ok"], [509, 4, 1, "", "output"], [509, 4, 1, "", "output_path"], [509, 3, 1, "", "remove_logs"], [509, 3, 1, "", "run"], [509, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[510, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[510, 4, 1, "", "is_ok"], [510, 3, 1, "", "remove_successful_logs"], [510, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[511, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[512, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[514, 0, 0, "-", "metric"], [515, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[514, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[514, 4, 1, "", "acc_input_model"], [514, 4, 1, "", "acc_optimized_model"], [514, 4, 1, "", "accuracy"], [514, 3, 1, "", "calculate_throughput"], [514, 3, 1, "", "insert_data"], [514, 4, 1, "", "latency"], [514, 4, 1, "", "optimization_time"], [514, 4, 1, "", "path_optimized_model"], [514, 4, 1, "", "profiling_data"], [514, 4, 1, "", "size_input_model"], [514, 4, 1, "", "size_optimized_model"], [514, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[515, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[515, 3, 1, "", "clean_logs"], [515, 3, 1, "", "clean_status"], [515, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[516, 1, 1, "", "check_module"], [516, 1, 1, "", "deprecated"], [516, 1, 1, "", "determine_ip"], [516, 1, 1, "", "export_to_csv"], [516, 1, 1, "", "filter_transforms"], [516, 1, 1, "", "get_dataset_path"], [516, 1, 1, "", "get_default_pruning_config_path"], [516, 1, 1, "", "get_file_extension"], [516, 1, 1, "", "get_framework_from_path"], [516, 1, 1, "", "get_height_width_from_size"], [516, 1, 1, "", "get_metrics_dict"], [516, 1, 1, "", "get_model_zoo_config_path"], [516, 1, 1, "", "get_model_zoo_model_path"], [516, 1, 1, "", "get_module_version"], [516, 1, 1, "", "get_predefined_config_path"], [516, 1, 1, "", "get_shape_from_transforms"], [516, 1, 1, "", "get_size"], [516, 1, 1, "", "is_dataset_file"], [516, 1, 1, "", "is_development_env"], [516, 1, 1, "", "is_hidden"], [516, 1, 1, "", "load_dataloader_config"], [516, 1, 1, "", "load_help_nc_params"], [516, 1, 1, "", "load_metrics_config"], [516, 1, 1, "", "load_model_config"], [516, 1, 1, "", "load_model_wise_params"], [516, 1, 1, "", "load_precisions_config"], [516, 1, 1, "", "load_pruning_details_config"], [516, 1, 1, "", "load_transforms_config"], [516, 1, 1, "", "load_transforms_filter_config"], [516, 1, 1, "", "normalize_domain"], [516, 1, 1, "", "normalize_framework"], [516, 1, 1, "", "normalize_string"], [516, 1, 1, "", "parse_bool_value"], [516, 1, 1, "", "parse_to_float_list"], [516, 1, 1, "", "parse_to_string_list"], [516, 1, 1, "", "parse_version"], [516, 1, 1, "", "release_tag"], [516, 1, 1, "", "replace_with_values"], [516, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[517, 0, 0, "-", "config"], [518, 0, 0, "-", "dataloader"], [519, 0, 0, "-", "evaluation"], [520, 0, 0, "-", "graph_optimization"], [522, 0, 0, "-", "mixed_precision"], [523, 0, 0, "-", "model"], [524, 0, 0, "-", "pruning"], [525, 0, 0, "-", "quantization"], [526, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[517, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[517, 3, 1, "", "dump"], [517, 3, 1, "", "get_performance_configs"], [517, 3, 1, "", "get_performance_cores_per_instance"], [517, 3, 1, "", "get_performance_num_of_instance"], [517, 3, 1, "", "initialize"], [517, 3, 1, "", "load"], [517, 3, 1, "", "process_transform"], [517, 3, 1, "", "remove_accuracy_metric"], [517, 3, 1, "", "remove_dataloader"], [517, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [517, 3, 1, "", "set_accuracy_goal"], [517, 3, 1, "", "set_accuracy_metric"], [517, 3, 1, "", "set_evaluation_dataloader"], [517, 3, 1, "", "set_evaluation_dataset_path"], [517, 3, 1, "", "set_inputs"], [517, 3, 1, "", "set_optimization_precision"], [517, 3, 1, "", "set_outputs"], [517, 3, 1, "", "set_performance_cores_per_instance"], [517, 3, 1, "", "set_performance_iterations"], [517, 3, 1, "", "set_performance_num_of_instance"], [517, 3, 1, "", "set_performance_warmup"], [517, 3, 1, "", "set_quantization_approach"], [517, 3, 1, "", "set_quantization_batch_size"], [517, 3, 1, "", "set_quantization_dataloader"], [517, 3, 1, "", "set_quantization_dataset_path"], [517, 3, 1, "", "set_quantization_sampling_size"], [517, 3, 1, "", "set_transform"], [517, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[518, 2, 1, "", "Dataloader"], [518, 2, 1, "", "Dataset"], [518, 2, 1, "", "Filter"], [518, 2, 1, "", "LabelBalance"], [518, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[518, 3, 1, "", "serialize"], [518, 3, 1, "", "set_dataset"], [518, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[518, 3, 1, "", "is_dummy"], [518, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[518, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[519, 2, 1, "", "Accuracy"], [519, 2, 1, "", "Configs"], [519, 2, 1, "", "Evaluation"], [519, 2, 1, "", "Metric"], [519, 2, 1, "", "Performance"], [519, 2, 1, "", "Postprocess"], [519, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[519, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[519, 4, 1, "", "name"], [519, 4, 1, "", "param"], [519, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema": [[519, 3, 1, "", "get_label_shift_value"]], "neural_compressor.ux.utils.workload.graph_optimization": [[520, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[520, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[522, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[522, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[523, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[523, 4, 1, "", "inputs"], [523, 4, 1, "", "outputs"], [523, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[524, 2, 1, "", "AdamOptimizer"], [524, 2, 1, "", "AdamWOptimizer"], [524, 2, 1, "", "Approach"], [524, 2, 1, "", "Criterion"], [524, 2, 1, "", "CrossEntropyLossCriterion"], [524, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [524, 2, 1, "", "KnowledgeDistillationLossCriterion"], [524, 2, 1, "", "Optimizer"], [524, 2, 1, "", "Pruning"], [524, 2, 1, "", "SGDOptimizer"], [524, 2, 1, "", "SelfKnowledgeDistillationLoss"], [524, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [524, 2, 1, "", "Train"], [524, 2, 1, "", "WeightCompressionApproach"], [524, 1, 1, "", "parse_dict_value_to_float"], [524, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[524, 3, 1, "", "serialize"], [524, 3, 1, "", "set_postprocess_transforms"]], "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach": [[524, 3, 1, "", "initialize_pruners"], [524, 3, 1, "", "serialize"], [524, 3, 1, "", "serialize_pruner"]], "neural_compressor.ux.utils.workload.quantization": [[525, 2, 1, "", "Advance"], [525, 2, 1, "", "Calibration"], [525, 2, 1, "", "Quantization"], [525, 2, 1, "", "WiseConfig"], [525, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[526, 2, 1, "", "AccCriterion"], [526, 2, 1, "", "Diagnosis"], [526, 2, 1, "", "ExitPolicy"], [526, 2, 1, "", "MultiObjectives"], [526, 2, 1, "", "Strategy"], [526, 2, 1, "", "Tuning"], [526, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[526, 4, 1, "", "objective"], [526, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[526, 3, 1, "", "set_max_trials"], [526, 3, 1, "", "set_performance_only"], [526, 3, 1, "", "set_random_seed"], [526, 3, 1, "", "set_timeout"], [526, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[527, 1, 1, "", "float_representer"], [527, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[528, 0, 0, "-", "communication"], [529, 0, 0, "-", "configuration"], [530, 0, 0, "-", "exceptions"], [532, 0, 0, "-", "router"], [533, 0, 0, "-", "server"], [536, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[528, 2, 1, "", "Message"], [528, 2, 1, "", "MessageQueue"], [528, 2, 1, "", "Request"], [528, 2, 1, "", "Response"], [528, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[528, 4, 1, "", "data"], [528, 4, 1, "", "status"], [528, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[528, 3, 1, "", "get"], [528, 3, 1, "", "post_error"], [528, 3, 1, "", "post_failure"], [528, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[529, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[529, 3, 1, "", "determine_gui_port"], [529, 3, 1, "", "determine_log_level"], [529, 3, 1, "", "determine_server_port"], [529, 3, 1, "", "determine_url_prefix"], [529, 3, 1, "", "determine_values_from_environment"], [529, 3, 1, "", "dump_token_to_file"], [529, 3, 1, "", "get_command_line_args"], [529, 3, 1, "", "get_url"], [529, 4, 1, "", "global_config_directory"], [529, 3, 1, "", "is_port_taken"], [529, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[530, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[532, 2, 1, "", "DeferredRoutingDefinition"], [532, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [532, 2, 1, "", "RealtimeRoutingDefinition"], [532, 2, 1, "", "Router"], [532, 2, 1, "", "RoutingDefinition"], [532, 1, 1, "", "find_pattern_in_graph"], [532, 1, 1, "", "get_model_graph"], [532, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[532, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[533, 1, 1, "", "allow_api_call"], [533, 1, 1, "", "block_iframe"], [533, 1, 1, "", "block_sniffing"], [533, 1, 1, "", "build_parameters"], [533, 1, 1, "", "disable_cache"], [533, 1, 1, "", "get_tls_args"], [533, 1, 1, "", "handle_api_call"], [533, 1, 1, "", "page_not_found"], [533, 1, 1, "", "require_api_token"], [533, 1, 1, "", "root"], [533, 1, 1, "", "run_server"], [533, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[534, 0, 0, "-", "benchmark"], [535, 0, 0, "-", "history_snapshot_parser"], [537, 0, 0, "-", "model"], [538, 0, 0, "-", "optimization"], [539, 0, 0, "-", "profiling"], [540, 0, 0, "-", "request_data_processor"], [541, 0, 0, "-", "response_generator"], [542, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[534, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[535, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[535, 3, 1, "", "extract_accuracy"], [535, 3, 1, "", "extract_performance"], [535, 3, 1, "", "parse_history_item"], [535, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[537, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[537, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[538, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[539, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[539, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[540, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[540, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[541, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[541, 3, 1, "", "add_refresh"], [541, 3, 1, "", "from_exception"], [541, 3, 1, "", "get_status_code_for_exception"], [541, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[542, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[542, 3, 1, "", "get_code_template"], [542, 3, 1, "", "get_config"], [542, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data", "6": "py:attribute", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contributor": [0, 1], "coven": [0, 1], "code": [0, 1, 3], "conduct": [0, 1], "our": 0, "pledg": 0, "standard": 0, "respons": 0, "scope": 0, "enforc": 0, "attribut": [0, 192, 200, 209, 238, 247, 258, 286, 311, 427], "contribut": 1, "guidelin": 1, "pull": 1, "request": [1, 441], "checklist": 1, "templat": [1, 513, 514, 515], "support": [1, 2, 3, 7, 8, 544, 548, 550, 552, 555, 557, 560, 563, 564, 565, 566, 567, 569, 572, 573, 577, 578, 580], "fx": 2, "introduct": [2, 3, 8, 545, 550, 551, 552, 555, 557, 560, 563, 564, 565, 566, 567, 569, 570, 572, 573, 576, 577, 579, 580], "mode": [2, 581], "matrix": [2, 3, 8, 544, 550, 552, 555, 557, 560, 563, 564, 565, 566, 567, 569, 572, 573, 577, 580], "neural": [2, 3, 7, 25, 545, 559, 560, 569, 570, 576], "compressor": [2, 7, 545, 559, 560, 576], "get": [2, 3, 7, 8, 550, 552, 557, 563, 564, 566, 567, 569, 572, 573, 577, 580], "start": [2, 3, 7, 8, 545, 550, 552, 557, 563, 564, 566, 567, 569, 572, 573, 577, 580], "post": [2, 573], "train": [2, 5, 351, 552, 573], "static": [2, 573], "quantiz": [2, 5, 7, 27, 42, 69, 298, 335, 525, 544, 551, 553, 572, 573, 574, 581], "dynam": [2, 3, 553, 573], "awar": [2, 5, 573], "exampl": [2, 3, 4, 5, 8, 387, 546, 550, 551, 552, 554, 555, 564, 565, 566, 567, 569, 570, 573, 577, 581], "note": 2, "detail": [2, 545], "common": [2, 11, 217, 218, 219, 220, 221, 222, 223, 224, 556], "problem": 2, "architectur": [3, 4, 7, 25, 549, 560], "search": [3, 25], "basic": [3, 337, 579], "na": [3, 25, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 572], "api": [3, 7, 8, 10, 22, 550, 552, 558, 563, 564, 566, 567, 569, 572], "usag": [3, 4, 5, 577, 579], "1": [3, 545, 552, 556, 558, 561, 581], "python": [3, 7, 29, 563, 572], "yaml": [3, 546, 547, 551, 552, 557, 580], "2": [3, 22, 545, 552, 556, 558, 561, 581], "onli": 3, "advanc": 3, "custom": [3, 545, 563, 566, 579], "ptq": [4, 581], "design": [4, 5, 549, 579], "pytorch": [4, 71, 360, 449, 450, 544, 548, 552, 563, 574, 577, 578, 581], "mobilenetv2": 4, "model": [4, 7, 20, 221, 310, 311, 312, 313, 314, 315, 316, 317, 318, 391, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 523, 537, 545, 555, 565, 581], "helper": 4, "function": [4, 33, 37, 38, 45, 64, 70, 71, 93, 94, 96, 138, 167, 169, 173, 174, 176, 178, 180, 190, 198, 200, 204, 207, 208, 209, 212, 214, 215, 216, 217, 219, 222, 224, 228, 236, 238, 242, 245, 246, 247, 249, 250, 251, 253, 254, 255, 256, 259, 260, 262, 263, 264, 265, 266, 274, 278, 279, 283, 288, 293, 294, 295, 297, 301, 302, 304, 305, 306, 307, 308, 313, 317, 319, 320, 323, 329, 330, 332, 333, 334, 335, 338, 346, 351, 354, 360, 361, 363, 364, 374, 375, 376, 378, 383, 385, 386, 388, 390, 393, 394, 399, 402, 403, 404, 415, 425, 442, 446, 448, 459, 460, 461, 464, 467, 471, 475, 477, 480, 483, 485, 486, 489, 495, 496, 504, 507, 512, 516, 524, 527, 528, 532, 533, 552], "secur": [6, 545, 552], "polici": [6, 579], "report": 6, "vulner": 6, "intel": [7, 545, 559, 560, 581], "instal": [7, 545, 561], "prerequisit": [7, 561], "linux": [7, 561], "jupyterlab": 7, "extens": [7, 581], "gui": 7, "system": [7, 545, 568], "requir": 7, "valid": [7, 581], "hardwar": [7, 581], "environ": [7, 499], "cpu": [7, 581], "base": 7, "64": 7, "compat": 7, "processor": 7, "gpu": 7, "built": [7, 548, 558, 563], "": 7, "xe": 7, "onnx": [7, 171, 544, 581], "multipl": [7, 566, 581], "vendor": 7, "through": [7, 581], "runtim": [7, 544, 581], "softwar": 7, "document": [7, 559], "select": 7, "public": [7, 571], "event": [7, 571], "addit": 7, "content": [7, 13, 25, 33, 37, 38, 39, 40, 43, 45, 46, 47, 60, 64, 70, 71, 72, 73, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 135, 137, 138, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 169, 173, 174, 175, 176, 177, 178, 179, 180, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 323, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 354, 355, 356, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 427, 428, 429, 430, 431, 433, 435, 436, 442, 443, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 464, 466, 467, 468, 469, 471, 472, 474, 475, 477, 478, 480, 481, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 545], "hire": 7, "adaptor": [8, 9, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], "work": [8, 573], "flow": [8, 573], "queri": [8, 72], "background": 8, "ad": 8, "new": [8, 545, 579], "backend": 8, "capabl": 8, "implement": 8, "onnxrtadaptor": 8, "class": [8, 13, 25, 38, 40, 43, 45, 46, 47, 70, 71, 72, 73, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 135, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 169, 174, 175, 176, 177, 178, 179, 180, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 293, 295, 296, 297, 298, 299, 300, 301, 304, 307, 308, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 323, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 361, 362, 365, 366, 367, 368, 370, 371, 372, 373, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 420, 421, 422, 424, 427, 428, 429, 430, 431, 433, 435, 436, 443, 445, 448, 450, 451, 452, 453, 455, 456, 457, 458, 462, 466, 468, 469, 472, 474, 478, 481, 484, 485, 487, 490, 491, 492, 494, 498, 499, 501, 502, 503, 504, 506, 508, 509, 510, 511, 514, 515, 517, 518, 519, 520, 522, 523, 524, 525, 526, 528, 529, 532, 534, 535, 537, 538, 539, 540, 541, 542], "benchmark": [12, 178, 216, 362, 363, 364, 365, 381, 534, 545, 546, 572], "bleu": [13, 259, 301], "modul": [13, 33, 37, 38, 40, 43, 45, 46, 47, 64, 70, 71, 72, 73, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 135, 137, 138, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 169, 173, 174, 175, 177, 178, 179, 180, 183, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 248, 250, 251, 252, 254, 255, 256, 257, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 279, 280, 282, 283, 284, 285, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 301, 302, 304, 305, 306, 308, 310, 312, 313, 314, 316, 317, 318, 319, 320, 323, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 350, 351, 352, 354, 356, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 420, 421, 422, 424, 425, 427, 428, 429, 430, 431, 433, 435, 436, 442, 443, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 464, 466, 467, 468, 469, 471, 474, 475, 477, 478, 480, 481, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542], "criterion": [14, 217], "data": [15, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251], "dataload": [16, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 383, 518, 546, 547], "basedataload": 16, "dataset": [17, 198, 199, 200, 201, 202, 203, 204, 205, 236, 237, 238, 239, 240, 241, 242, 243, 384, 545, 548, 558], "transform": [18, 210, 211, 212, 213, 214, 215, 248, 249, 250, 251, 399, 558, 578], "metric": [19, 220, 259, 260, 261, 262, 263, 264, 265, 266, 301, 302, 303, 304, 305, 306, 307, 308, 390, 514, 558, 563], "optim": [21, 222, 392, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 538, 545, 567], "compon": [22, 225, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495], "experiement": 22, "deprec": 22, "0": [22, 581], "distil": [23, 252, 550, 551, 572, 581], "mixedprecis": 24, "packag": [25, 39, 60, 176, 192, 204, 208, 209, 212, 219, 230, 242, 246, 247, 249, 253, 258, 265, 281, 286, 287, 300, 307, 311, 326, 342, 347, 355, 365, 408, 413, 472], "prune": [26, 285, 296, 331, 479, 480, 481, 524, 545, 569, 570, 572, 581], "schedul": [28, 297, 299, 333, 569, 570], "strategi": [30, 31, 185, 186, 187, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 576, 579], "644ec953a7dc_pruning_support": 32, "6ece06672ed3_v1_14": 33, "6f0d0f71d92e_v1_13": 34, "9e89549a08c8_v1_11": 35, "block_mask": 36, "env": 37, "neural_compressor": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543], "kera": [40, 455], "keras_util": [41, 42], "mxnet": [43, 544, 548, 563, 578, 581], "mxnet_util": [44, 45], "util": [45, 70, 167, 173, 256, 334, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 415, 459, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527], "onnxrt": [46, 447, 448, 548, 563, 578], "ox_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "calibr": 47, "oper": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "activ": 49, "argmax": 50, "attent": 51, "binary_op": 52, "concat": 53, "conv": 54, "direct_q8": 55, "embed_layernorm": 56, "gather": 57, "gavgpool": 58, "gemm": 59, "lstm": 61, "matmul": 62, "maxpool": 63, "op": 64, "pad": 65, "pool": 66, "resiz": 67, "split": 68, "tensorflow": [73, 453, 454, 455, 456, 457, 458, 459, 544, 548, 552, 563, 574, 577, 578, 581], "tf_util": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "graph_convert": 74, "graph_converter_without_calib": 75, "graph_rewrit": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131], "bf16": [76, 77], "bf16_convert": [76, 168], "gener": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "convert_add_to_biasadd": 78, "convert_layout": 79, "convert_leakyrelu": 80, "convert_nan_to_random": 81, "convert_placeholder_to_const": 82, "dequantize_cast_optim": 83, "dilated_contract": 84, "dummy_biasadd": 85, "expanddims_optim": 86, "fetch_weight_from_reshap": 87, "fold_batch_norm": 88, "fold_const": 89, "fuse_biasadd_add": 90, "fuse_column_wise_mul": 91, "fuse_conv_with_math": 92, "fuse_decomposed_bn": 93, "fuse_decomposed_in": 94, "fuse_gelu": 95, "fuse_layer_norm": 96, "fuse_pad_with_conv": 97, "fuse_pad_with_fp32_conv": 98, "fuse_reshape_transpos": 99, "graph_cse_optim": 100, "grappler_pass": 101, "insert_print_nod": 103, "move_squeeze_after_relu": 104, "pre_optim": 105, "remove_training_nod": 106, "rename_batch_norm": 107, "split_shared_input": 108, "strip_equivalent_nod": 109, "strip_unused_nod": 110, "switch_optim": 111, "update_ent": 112, "graph_bas": 113, "int8": [115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 555, 581], "freeze_fake_qu": 115, "freeze_valu": 116, "freeze_value_without_calib": 117, "fuse_conv_redundant_dequant": 118, "fuse_conv_requant": 119, "fuse_matmul_redundant_dequant": 120, "fuse_matmul_requant": 121, "meta_op_optim": 123, "post_hostconst_convert": 124, "post_quantized_op_cs": 125, "rnn_convert": 126, "scale_propag": 127, "qdq": [128, 129, 130, 131, 145, 146, 147, 148, 149, 150, 151, 152, 153, 581], "insert_qdq_pattern": 129, "merge_duplicated_qdq": 130, "share_qdq_y_pattern": 131, "graph_util": 132, "quantize_graph": [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], "qat": [135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 581], "fake_quant": 135, "quantize_config": 137, "quantize_help": 138, "quantize_lay": [139, 140, 141, 142, 143], "optimize_lay": 140, "quantize_layer_add": 141, "quantize_layer_bas": 142, "quantize_layer_bn": 143, "quantize_wrapp": 144, "fuse_qdq_bn": 145, "fuse_qdq_concatv2": 146, "fuse_qdq_conv": 147, "fuse_qdq_deconv": 148, "fuse_qdq_in": 149, "fuse_qdq_matmul": 150, "fuse_qdq_pool": 151, "optimize_qdq": 153, "quantize_graph_bas": 154, "quantize_graph_bn": 155, "quantize_graph_concatv2": 156, "quantize_graph_conv": 157, "quantize_graph_for_intel_cpu": 158, "quantize_graph_matmul": 159, "quantize_graph_pool": 160, "quantize_graph_common": 161, "transform_graph": [162, 163, 164, 165, 166], "bias_correct": 162, "graph_transform_bas": 163, "insert_log": 165, "rerange_quantized_concat": 166, "torch_util": [168, 169, 170, 171, 172, 173, 224], "hawq_metr": 169, "symbolic_trac": 172, "algorithm": [174, 175, 176, 177], "fast_bias_correct": 175, "weight_correct": 177, "conf": [179, 180, 181, 182], "config": [179, 183, 517, 546, 547, 566], "dotdict": 180, "pythonic_config": 182, "contrib": [184, 185, 186, 187], "sigopt": [186, 576, 579], "tpe": [187, 579], "base_dataload": [188, 226], "default_dataload": [190, 228], "fetcher": [191, 229], "submodul": [192, 204, 208, 212, 219, 230, 242, 246, 249, 253, 258, 265, 275, 277, 281, 287, 291, 307, 321, 342, 347, 355, 365, 369, 377, 389, 408, 413, 418, 419, 423, 426, 432, 434, 437, 438, 444, 447, 449, 454, 463, 465, 470, 472, 473, 476, 479, 482, 488, 493, 497, 505, 513, 521, 531, 536], "mxnet_dataload": [193, 231], "onnxrt_dataload": [194, 232], "pytorch_dataload": [195, 233], "sampler": [196, 234], "tensorflow_dataload": [197, 235], "bert_dataset": [198, 236], "coco_dataset": [199, 237], "dummy_dataset": [201, 239], "dummy_dataset_v2": [202, 240], "imagenet_dataset": [203, 241], "style_transfer_dataset": [205, 243], "filter": [206, 207, 208, 244, 245, 246], "coco_filt": [206, 244], "subpackag": [209, 247, 258, 275, 276, 281, 286, 300, 342, 413, 418, 432, 437, 444, 472, 488, 497, 505, 531], "coco_transform": 210, "imagenet_transform": [211, 248], "postprocess": [213, 223], "token": [214, 250], "experiment": [216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "export": [253, 254, 255, 256, 555], "qlinear2qdq": 254, "torch2onnx": 255, "graph_optim": [257, 469, 470, 471, 520], "bleu_util": [260, 302], "coco_label_map": [261, 303], "coco_tool": [262, 304], "evaluate_squad": [263, 305], "f1": [264, 306], "mixed_precis": [267, 473, 474, 475, 522], "model_convers": 268, "basic_na": 269, "dyna": 270, "dynast": [271, 272, 273, 274, 275, 276, 277, 278, 279, 280], "dynas_manag": 271, "dynas_predictor": 272, "dynas_search": 273, "dynas_util": 274, "supernetwork": [276, 277, 278, 279, 280], "machine_transl": [277, 278, 279, 280], "modules_supernetwork": 278, "transformer_interfac": 279, "transformer_supernetwork": 280, "nas_util": 283, "search_algorithm": 284, "pruning_recip": [286, 287, 288, 289], "pattern": [287, 288, 289, 293, 323, 569, 570], "tile_pattern": 289, "pruning_v2": 290, "pytorch_prun": [291, 292, 293, 294, 295, 296, 297], "logger": [292, 322, 358, 507], "prune_util": 294, "pruner": [295, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334], "mix_precis": 309, "base_model": 310, "keras_model": 312, "mxnet_model": 314, "nets_factori": 315, "onnx_model": 316, "tensorflow_model": 317, "torch_model": 318, "object": [319, 566], "criteria": [320, 569, 570, 579], "pruner_legaci": [324, 325, 326, 327, 328, 329], "gradient_sensit": 324, "group_lasso": 325, "magnitud": 327, "pattern_lock": 328, "reg": 332, "auto_mixed_precis": 336, "bayesian": [338, 579], "conserv": 339, "exhaust": [340, 579], "hawq_v2": [341, 579], "mse": [343, 579], "mse_v2": [344, 579], "random": [345, 579], "tuning_sampl": 348, "tuning_spac": 349, "tuning_struct": 350, "collect_layer_histogram": 352, "constant": 353, "create_obj_from_config": 354, "kl_diverg": 356, "load_huggingfac": 357, "option": [359, 545, 552, 561], "ux": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542], "benchmark_model": 363, "execute_benchmark": 364, "config_gener": [366, 367, 368, 369, 370, 371, 372, 373], "benchmark_config_gener": 366, "graph_optimization_config_gener": 368, "mixed_precision_config_gener": 370, "profiling_config_gener": 371, "pruning_config_gener": 372, "quantization_config_gener": 373, "configuration_wizard": [374, 375, 376, 377, 378, 379], "configuration_pars": 374, "get_boundary_nod": 375, "get_configur": 376, "params_feed": 378, "pruning_config_pars": 379, "db_manag": [380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415], "db_model": [381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401], "benchmark_result": 382, "domain": [385, 443], "domain_flavour": 386, "framework": [388, 555, 557, 565, 572], "optimization_typ": 393, "precis": [394, 564, 574], "profil": [395, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 539, 545], "profiling_result": 396, "project": [397, 545], "pruning_detail": 398, "tuning_detail": 400, "tuning_histori": [401, 485], "db_oper": [402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "benchmark_api_interfac": 402, "dataset_api_interfac": 403, "diagnosis_api_interfac": 405, "dictionaries_api_interfac": 406, "examples_api_interfac": 407, "model_api_interfac": 409, "optimization_api_interfac": 410, "profiling_api_interfac": 411, "project_api_interfac": 412, "params_interfac": 414, "diagnosi": [416, 417, 418, 419, 420, 421, 422, 423, 424, 545], "factori": [417, 468, 487, 492], "onnx_diagnosi": [419, 420], "onnxrt_diagnosi": 420, "op_detail": 421, "op_entri": 422, "tensorflow_diagnosi": [423, 424], "file_brows": [425, 426], "graph": [427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 545], "collaps": 428, "edg": 429, "graph_read": 431, "node": 433, "reader": [434, 435, 436], "onnxrt_read": 435, "tensorflow_read": 436, "jobs_manag": [438, 439, 440, 441], "jobs_control_queu": 439, "manage_workspac": 442, "model_type_gett": 446, "repositori": 451, "shape": 452, "frozen_pb": 453, "meta_graph": 456, "saved_model": 458, "model_zoo": [460, 461, 462, 463, 464], "download_config": 460, "download_model": 461, "download": 462, "list_model": 464, "names_mapp": [465, 466], "execute_optim": 467, "optimize_model": [471, 475, 477, 480], "neural_coder_optim": [476, 477], "tune": [482, 483, 484, 526, 573, 579], "tune_model": 483, "execute_profil": 486, "profile_model": 489, "tensorflow_profil": [492, 493, 494, 495], "inc_bench": 496, "const": 498, "except": [500, 530], "executor": 501, "expiring_dict": 502, "github_info": 503, "hw_info": 504, "json_seri": 506, "parser": 508, "proc": 509, "process": 510, "singleton": 511, "status_upd": 512, "workdir": 515, "workload": [517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 542], "evalu": [519, 546, 552], "yaml_util": 527, "web": [528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542], "commun": 528, "configur": [529, 552, 557, 568, 572, 576, 580], "router": 532, "server": 533, "servic": [534, 535, 536, 537, 538, 539, 540, 541, 542], "history_snapshot_pars": 535, "request_data_processor": 540, "response_gener": 541, "version": 543, "ipex": 544, "refer": [544, 570], "bench": 545, "tabl": 545, "from": [545, 561], "binari": [545, 561], "sourc": [545, 561], "home": 545, "screen": 545, "creat": [545, 547], "predefin": 545, "displai": 545, "list": [545, 548, 578], "remov": 545, "develop": 545, "tab": 545, "wizard": 545, "edit": 545, "entri": 545, "inform": [545, 562], "file": [546, 547, 557, 580], "us": [546, 547], "user": [546, 547, 548, 551, 552, 558, 572, 580], "specif": [546, 547, 548], "run": 546, "how": 547, "workflow": 549, "knowledg": [550, 581], "intermedi": 550, "layer": 550, "self": 550, "defin": [551, 552], "distribut": 552, "infer": 552, "featur": [552, 557, 560, 572, 573, 577, 580], "pure": 552, "horovodrun": 552, "execut": 552, "fp32": 555, "appendix": 555, "frequent": 556, "ask": 556, "question": 556, "build": [556, 563], "issu": [556, 575], "3": [556, 561], "incompat": [558, 575], "chang": [558, 575], "between": 558, "v1": 558, "face": 558, "section": 559, "infrastructur": 560, "ai": 561, "kit": 561, "window": 561, "legal": 562, "licens": 562, "citat": 562, "trademark": 562, "singl": [563, 566], "multi": [563, 567], "mix": [564, 574], "orchestr": 567, "One": 567, "shot": 567, "network": [569, 570], "type": 570, "regular": 570, "full": 571, "49": 571, "2022": 571, "31": 571, "2021": 571, "14": 571, "2018": 571, "2020": 571, "4": 571, "style": 572, "access": 572, "fundament": 573, "approach": 573, "accuraci": [573, 579], "turn": 574, "ON": 574, "auto": 574, "dure": 574, "releas": 575, "known": 575, "prepar": 576, "platform": 576, "perform": 576, "benefit": 576, "comparison": 576, "differ": 576, "tensorboard": 577, "space": 579, "exit": 579, "travers": 579, "logic": 579, "o0": 579, "mlperf": 581, "10": 581, "torch": 581, "12": 581, "11": 581, "7": 581}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributor Covenant Code of Conduct": [[0, "contributor-covenant-code-of-conduct"], [1, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[0, "our-pledge"]], "Our Standards": [[0, "our-standards"]], "Our Responsibilities": [[0, "our-responsibilities"]], "Scope": [[0, "scope"]], "Enforcement": [[0, "enforcement"]], "Attribution": [[0, "attribution"]], "Contribution Guidelines": [[1, "contribution-guidelines"]], "Pull Request Checklist": [[1, "pull-request-checklist"]], "Pull Request Template": [[1, "pull-request-template"]], "Support": [[1, "support"]], "FX": [[2, "fx"]], "Introduction": [[2, "introduction"], [3, "introduction"], [8, "introduction"], [545, "introduction"], [550, "introduction"], [551, "introduction"], [552, "introduction"], [555, "introduction"], [557, "introduction"], [560, "introduction"], [563, "introduction"], [564, "introduction"], [565, "introduction"], [566, "introduction"], [567, "introduction"], [569, "introduction"], [570, "introduction"], [572, "introduction"], [576, "introduction"], [577, "introduction"], [579, "introduction"], [580, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[2, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[2, "get-start"]], "Post Training Static Quantization": [[2, "post-training-static-quantization"], [573, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[2, "post-training-dynamic-quantization"], [573, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[2, "quantization-aware-training"]], "Examples": [[2, "examples"], [3, "examples"], [5, "examples"], [546, "examples"], [550, "examples"], [551, "examples"], [552, "examples"], [554, "examples"], [555, "examples"], [564, "examples"], [565, "examples"], [567, "examples"], [569, "examples"], [573, "examples"], [577, "examples"]], "Note": [[2, "note"]], "Details": [[2, "details"]], "Common Problem": [[2, "common-problem"]], "Dynamic Quantization": [[2, "dynamic-quantization"], [553, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[2, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[3, "neural-architecture-search"]], "Basic NAS": [[3, "basic-nas"]], "Dynamic NAS": [[3, "dynamic-nas"]], "NAS Support Matrix": [[3, "nas-support-matrix"]], "Get Started with NAS API": [[3, "get-started-with-nas-api"]], "Basic Usage": [[3, "basic-usage"]], "1. Python code + YAML": [[3, "python-code-yaml"]], "2. Python code only": [[3, "python-code-only"]], "Advanced Usage (Custom NAS)": [[3, "advanced-usage-custom-nas"]], "PTQ": [[4, "ptq"], [4, "id1"]], "Design": [[4, "design"], [5, "design"], [549, "design"], [579, "design"], [579, "id1"], [579, "id3"], [579, "id5"], [579, "id7"], [579, "id9"], [579, "id11"], [579, "id13"], [579, "id15"], [579, "id17"]], "PyTorch Usage": [[4, "pytorch-usage"]], "MobileNetV2 Model Architecture": [[4, "mobilenetv2-model-architecture"]], "Helper Functions": [[4, "helper-functions"]], "Example": [[4, "example"], [566, "example"]], "Quantization-aware Training": [[5, "quantization-aware-training"]], "Usage": [[5, "usage"], [577, "usage"], [577, "id1"], [579, "usage"], [579, "id2"], [579, "id4"], [579, "id6"], [579, "id8"], [579, "id10"], [579, "id12"], [579, "id14"], [579, "id16"], [579, "id18"]], "Security Policy": [[6, "security-policy"]], "Report a Vulnerability": [[6, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[7, "intel-neural-compressor"]], "Installation": [[7, "installation"], [561, "installation"]], "Prerequisites": [[7, "prerequisites"], [561, "prerequisites"], [561, "id1"]], "Install on Linux": [[7, "install-on-linux"]], "Getting Started": [[7, "getting-started"]], "Quantization with Python API": [[7, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[7, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[7, "quantization-with-gui"]], "System Requirements": [[7, "system-requirements"]], "Validated Hardware Environment": [[7, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[7, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[7, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[7, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[7, "validated-software-environment"]], "Validated Models": [[7, "validated-models"], [581, "validated-models"]], "Documentation": [[7, "documentation"]], "Selected Publications/Events": [[7, "selected-publications-events"]], "Additional Content": [[7, "additional-content"]], "Hiring": [[7, "hiring"]], "Adaptor": [[8, "adaptor"], [9, "adaptor"]], "Adaptor Support Matrix": [[8, "adaptor-support-matrix"]], "Working Flow": [[8, "working-flow"], [573, "working-flow"]], "Get Start with Adaptor API": [[8, "get-start-with-adaptor-api"]], "Query API": [[8, "query-api"]], "Background": [[8, "background"]], "Query API Introduction": [[8, "query-api-introduction"]], "Example of Adding a New Backend Support": [[8, "example-of-adding-a-new-backend-support"]], "Capability": [[8, "capability"]], "Implement ONNXRTAdaptor Class": [[8, "implement-onnxrtadaptor-class"]], "APIs": [[10, "apis"]], "Common": [[11, "common"]], "Benchmark": [[12, "benchmark"], [572, "benchmark"]], "BLEU": [[13, "module-neural_compressor.experimental.metric.bleu"]], "Module Contents": [[13, "module-contents"], [33, "module-contents"], [37, "module-contents"], [38, "module-contents"], [40, "module-contents"], [43, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [64, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [76, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [135, "module-contents"], [137, "module-contents"], [138, "module-contents"], [141, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [169, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [183, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [210, "module-contents"], [211, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [228, "module-contents"], [229, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [248, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [259, "module-contents"], [260, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [301, "module-contents"], [302, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [308, "module-contents"], [310, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [323, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [354, "module-contents"], [356, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [424, "module-contents"], [425, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [433, "module-contents"], [435, "module-contents"], [436, "module-contents"], [442, "module-contents"], [443, "module-contents"], [445, "module-contents"], [446, "module-contents"], [448, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [455, "module-contents"], [456, "module-contents"], [457, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [464, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [471, "module-contents"], [474, "module-contents"], [475, "module-contents"], [477, "module-contents"], [478, "module-contents"], [480, "module-contents"], [481, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [522, "module-contents"], [523, "module-contents"], [524, "module-contents"], [525, "module-contents"], [526, "module-contents"], [527, "module-contents"], [528, "module-contents"], [529, "module-contents"], [530, "module-contents"], [532, "module-contents"], [533, "module-contents"], [534, "module-contents"], [535, "module-contents"], [537, "module-contents"], [538, "module-contents"], [539, "module-contents"], [540, "module-contents"], [541, "module-contents"], [542, "module-contents"]], "Classes": [[13, "classes"], [25, "classes"], [38, "classes"], [40, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [76, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [135, "classes"], [137, "classes"], [141, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [165, "classes"], [166, "classes"], [169, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [183, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [225, "classes"], [226, "classes"], [228, "classes"], [229, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [262, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [278, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [293, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [304, "classes"], [307, "classes"], [308, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [323, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [355, "classes"], [356, "classes"], [361, "classes"], [362, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [416, "classes"], [417, "classes"], [420, "classes"], [421, "classes"], [422, "classes"], [424, "classes"], [427, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [433, "classes"], [435, "classes"], [436, "classes"], [443, "classes"], [445, "classes"], [448, "classes"], [450, "classes"], [451, "classes"], [452, "classes"], [453, "classes"], [455, "classes"], [456, "classes"], [457, "classes"], [458, "classes"], [462, "classes"], [466, "classes"], [468, "classes"], [469, "classes"], [472, "classes"], [474, "classes"], [478, "classes"], [481, "classes"], [484, "classes"], [485, "classes"], [487, "classes"], [490, "classes"], [491, "classes"], [492, "classes"], [494, "classes"], [498, "classes"], [499, "classes"], [501, "classes"], [502, "classes"], [503, "classes"], [504, "classes"], [506, "classes"], [508, "classes"], [509, "classes"], [510, "classes"], [511, "classes"], [514, "classes"], [515, "classes"], [517, "classes"], [518, "classes"], [519, "classes"], [520, "classes"], [522, "classes"], [523, "classes"], [524, "classes"], [525, "classes"], [526, "classes"], [528, "classes"], [529, "classes"], [532, "classes"], [534, "classes"], [535, "classes"], [537, "classes"], [538, "classes"], [539, "classes"], [540, "classes"], [541, "classes"], [542, "classes"]], "Criterion": [[14, "criterion"]], "Data": [[15, "data"]], "Dataloader": [[16, "dataloader"]], "BaseDataLoader": [[16, "basedataloader"]], "dataloaders": [[16, "dataloaders"]], "Datasets": [[17, "datasets"]], "Transforms": [[18, "transforms"]], "Metric": [[19, "metric"]], "Model": [[20, "model"], [565, "model"]], "Optimizer": [[21, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[22, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[23, "distillation"], [550, "distillation"], [572, "distillation"]], "MixedPrecision": [[24, "mixedprecision"]], "Neural architecture search (NAS)": [[25, "neural-architecture-search-nas"]], "Package Contents": [[25, "package-contents"], [39, "package-contents"], [60, "package-contents"], [176, "package-contents"], [192, "package-contents"], [204, "package-contents"], [208, "package-contents"], [209, "package-contents"], [212, "package-contents"], [219, "package-contents"], [230, "package-contents"], [242, "package-contents"], [246, "package-contents"], [247, "package-contents"], [249, "package-contents"], [253, "package-contents"], [258, "package-contents"], [265, "package-contents"], [281, "package-contents"], [286, "package-contents"], [287, "package-contents"], [300, "package-contents"], [307, "package-contents"], [311, "package-contents"], [326, "package-contents"], [342, "package-contents"], [347, "package-contents"], [355, "package-contents"], [365, "package-contents"], [408, "package-contents"], [413, "package-contents"], [472, "package-contents"]], "Pruning": [[26, "pruning"], [545, "pruning"], [569, "pruning"], [572, "pruning"]], "Quantization": [[27, "quantization"], [572, "quantization"], [573, "quantization"]], "Scheduler": [[28, "scheduler"]], "Pythonic": [[29, "pythonic"]], "Strategy": [[30, "strategy"]], "Strategies": [[31, "strategies"]], "644ec953a7dc_pruning_support": [[32, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[33, "module-6ece06672ed3_v1_14"]], "Functions": [[33, "functions"], [37, "functions"], [38, "functions"], [45, "functions"], [64, "functions"], [70, "functions"], [71, "functions"], [93, "functions"], [94, "functions"], [96, "functions"], [138, "functions"], [167, "functions"], [169, "functions"], [173, "functions"], [174, "functions"], [176, "functions"], [178, "functions"], [180, "functions"], [190, "functions"], [198, "functions"], [200, "functions"], [204, "functions"], [207, "functions"], [208, "functions"], [209, "functions"], [212, "functions"], [214, "functions"], [215, "functions"], [216, "functions"], [217, "functions"], [219, "functions"], [222, "functions"], [224, "functions"], [228, "functions"], [236, "functions"], [238, "functions"], [242, "functions"], [245, "functions"], [246, "functions"], [247, "functions"], [249, "functions"], [250, "functions"], [251, "functions"], [253, "functions"], [254, "functions"], [255, "functions"], [256, "functions"], [259, "functions"], [260, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [265, "functions"], [266, "functions"], [274, "functions"], [278, "functions"], [279, "functions"], [283, "functions"], [288, "functions"], [293, "functions"], [294, "functions"], [295, "functions"], [297, "functions"], [301, "functions"], [302, "functions"], [304, "functions"], [305, "functions"], [306, "functions"], [307, "functions"], [308, "functions"], [313, "functions"], [317, "functions"], [319, "functions"], [320, "functions"], [323, "functions"], [329, "functions"], [330, "functions"], [332, "functions"], [333, "functions"], [334, "functions"], [335, "functions"], [338, "functions"], [346, "functions"], [351, "functions"], [354, "functions"], [360, "functions"], [361, "functions"], [363, "functions"], [364, "functions"], [374, "functions"], [375, "functions"], [376, "functions"], [378, "functions"], [383, "functions"], [385, "functions"], [386, "functions"], [388, "functions"], [390, "functions"], [393, "functions"], [394, "functions"], [399, "functions"], [402, "functions"], [403, "functions"], [404, "functions"], [415, "functions"], [425, "functions"], [442, "functions"], [446, "functions"], [448, "functions"], [459, "functions"], [460, "functions"], [461, "functions"], [464, "functions"], [467, "functions"], [471, "functions"], [475, "functions"], [477, "functions"], [480, "functions"], [483, "functions"], [485, "functions"], [486, "functions"], [489, "functions"], [495, "functions"], [496, "functions"], [504, "functions"], [507, "functions"], [512, "functions"], [516, "functions"], [524, "functions"], [527, "functions"], [528, "functions"], [532, "functions"], [533, "functions"]], "6f0d0f71d92e_v1_13": [[34, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[35, "module-9e89549a08c8_v1_11"]], "block_mask": [[36, "module-block_mask"]], "env": [[37, "module-env"]], "neural_compressor.adaptor.adaptor": [[38, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[39, "module-neural_compressor.adaptor"]], "neural_compressor.adaptor.keras": [[40, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils": [[41, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[42, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[43, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[44, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[45, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[46, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[47, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[48, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[49, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[50, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[51, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[52, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[53, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[54, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[55, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[56, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[57, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[58, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[59, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[60, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[61, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[62, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[63, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[64, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[65, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[66, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[67, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[68, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[69, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[70, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[71, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[72, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[73, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[74, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[75, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[132, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[133, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[161, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[162, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[163, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[164, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[165, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[166, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[167, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[168, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[169, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[170, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[171, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[172, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[173, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[174, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[175, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[176, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[177, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[178, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[179, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[180, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[181, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[182, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[183, "module-neural_compressor.config"]], "neural_compressor.contrib": [[184, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[185, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[186, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[187, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[188, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[189, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[190, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[191, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[192, "module-neural_compressor.data.dataloaders"]], "Submodules": [[192, "submodules"], [204, "submodules"], [208, "submodules"], [212, "submodules"], [219, "submodules"], [230, "submodules"], [242, "submodules"], [246, "submodules"], [249, "submodules"], [253, "submodules"], [258, "submodules"], [265, "submodules"], [275, "submodules"], [277, "submodules"], [281, "submodules"], [287, "submodules"], [291, "submodules"], [307, "submodules"], [321, "submodules"], [342, "submodules"], [347, "submodules"], [355, "submodules"], [365, "submodules"], [369, "submodules"], [377, "submodules"], [389, "submodules"], [408, "submodules"], [413, "submodules"], [418, "submodules"], [419, "submodules"], [423, "submodules"], [426, "submodules"], [432, "submodules"], [434, "submodules"], [437, "submodules"], [438, "submodules"], [444, "submodules"], [447, "submodules"], [449, "submodules"], [454, "submodules"], [463, "submodules"], [465, "submodules"], [470, "submodules"], [472, "submodules"], [473, "submodules"], [476, "submodules"], [479, "submodules"], [482, "submodules"], [488, "submodules"], [493, "submodules"], [497, "submodules"], [505, "submodules"], [513, "submodules"], [521, "submodules"], [531, "submodules"], [536, "submodules"]], "Attributes": [[192, "attributes"], [200, "attributes"], [209, "attributes"], [238, "attributes"], [247, "attributes"], [258, "attributes"], [286, "attributes"], [311, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[193, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[194, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[195, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[196, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[197, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[198, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[199, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[200, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[201, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[202, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[203, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[204, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[205, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[206, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[207, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[208, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[209, "module-neural_compressor.data"]], "Subpackages": [[209, "subpackages"], [247, "subpackages"], [258, "subpackages"], [275, "subpackages"], [276, "subpackages"], [281, "subpackages"], [286, "subpackages"], [300, "subpackages"], [342, "subpackages"], [413, "subpackages"], [418, "subpackages"], [432, "subpackages"], [437, "subpackages"], [444, "subpackages"], [472, "subpackages"], [488, "subpackages"], [497, "subpackages"], [505, "subpackages"], [531, "subpackages"]], "neural_compressor.data.transforms.coco_transform": [[210, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[211, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[212, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[213, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[214, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[215, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[216, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[217, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[218, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[219, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[220, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[221, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[222, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[223, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[224, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[225, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[229, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[230, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[234, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[236, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[237, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[238, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[239, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[240, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[241, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[242, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[243, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[244, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[245, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[246, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[247, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[248, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[249, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[250, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[251, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[252, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[253, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[254, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.torch2onnx": [[255, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[256, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[257, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[258, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[259, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[260, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[261, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[262, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[263, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[264, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[265, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[266, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[267, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[268, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[269, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[270, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[271, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[272, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[273, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[274, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[275, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[276, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[277, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[278, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[279, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[280, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "neural_compressor.experimental.nas": [[281, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[282, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[283, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[284, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[285, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[286, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[290, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[291, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[292, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[293, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[294, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[295, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[296, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[297, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[298, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[299, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[300, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[301, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[302, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[303, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[304, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[305, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[306, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[307, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[308, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[309, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[310, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[311, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[312, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[313, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[314, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[315, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[316, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[317, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[318, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[319, "module-neural_compressor.objective"]], "neural_compressor.pruner.criteria": [[320, "module-neural_compressor.pruner.criteria"]], "neural_compressor.pruner": [[321, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[322, "module-neural_compressor.pruner.logger"]], "neural_compressor.pruner.patterns": [[323, "module-neural_compressor.pruner.patterns"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[324, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[325, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[326, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[327, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[328, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[329, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "neural_compressor.pruner.pruners": [[330, "module-neural_compressor.pruner.pruners"]], "neural_compressor.pruner.pruning": [[331, "module-neural_compressor.pruner.pruning"]], "neural_compressor.pruner.regs": [[332, "module-neural_compressor.pruner.regs"]], "neural_compressor.pruner.schedulers": [[333, "module-neural_compressor.pruner.schedulers"]], "neural_compressor.pruner.utils": [[334, "module-neural_compressor.pruner.utils"]], "neural_compressor.quantization": [[335, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[336, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[337, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[338, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[339, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[340, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[341, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[342, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[343, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[344, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[345, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[346, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils": [[347, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[348, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[349, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[350, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.training": [[351, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[352, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[353, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[354, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[355, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[356, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[357, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[358, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[359, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[360, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[361, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[362, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[363, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[364, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[365, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[366, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[367, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[368, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[369, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[370, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[371, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[372, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[373, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[374, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[375, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[376, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[377, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[378, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[379, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[380, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[381, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[382, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[383, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[384, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[385, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[386, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[387, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[388, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[389, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[390, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[391, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[392, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[393, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[394, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[395, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[396, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[397, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[398, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[399, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[400, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[401, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[402, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[403, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[404, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[405, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[408, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[409, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[412, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[413, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[414, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[415, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[416, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[417, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[418, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[419, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[420, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[421, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[422, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[423, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[424, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[425, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[426, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[427, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[428, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[429, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[430, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[431, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[432, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[433, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[434, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[435, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[436, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[437, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[438, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[439, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[440, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[441, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[442, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[443, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[444, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[445, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[446, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[447, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[448, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[449, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[450, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[451, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[452, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[453, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[454, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[455, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[456, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[457, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[458, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[459, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[460, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[461, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[462, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[463, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[464, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[465, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[466, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[467, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[468, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[469, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[470, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[471, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[472, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[473, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[474, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[475, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[476, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[477, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[478, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[479, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[480, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[481, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[482, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[483, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[484, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[485, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[486, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[487, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[488, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[489, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[490, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[491, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[492, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[493, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[494, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[495, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[496, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[497, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[498, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[499, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[500, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[501, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[502, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[503, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[504, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[505, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[506, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[507, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[508, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[509, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[510, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[511, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[512, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[513, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[514, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[515, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[516, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[517, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[518, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[519, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[520, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[521, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[522, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[523, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[524, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[525, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[526, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[527, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[528, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[529, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[530, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[531, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[532, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[533, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[534, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[535, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[536, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[537, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[538, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[539, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[540, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[541, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[542, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[543, "module-neural_compressor.version"]], "Quantization Support Matrix": [[544, "quantization-support-matrix"]], "TensorFlow": [[544, "tensorflow"], [548, "tensorflow"], [563, "tensorflow"], [578, "tensorflow"]], "PyTorch": [[544, "pytorch"], [548, "pytorch"], [563, "pytorch"], [574, "pytorch"]], "PyTorch IPEX": [[544, "pytorch-ipex"]], "MXNet": [[544, "mxnet"], [548, "mxnet"], [563, "mxnet"], [578, "mxnet"]], "ONNX Runtime": [[544, "onnx-runtime"]], "Reference": [[544, "reference"], [570, "reference"]], "Intel\u00ae Neural Compressor Bench": [[545, "intel-neural-compressor-bench"]], "Table of Contents": [[545, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[545, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[545, "option-1-install-from-binary"]], "Option 2: Install from Source": [[545, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[545, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[545, "home-screen"]], "Create New Project": [[545, "create-new-project"]], "Predefined Model": [[545, "predefined-model"]], "Custom Model": [[545, "custom-model"]], "Display Model Graph": [[545, "display-model-graph"]], "Project List": [[545, "project-list"]], "Remove Project": [[545, "remove-project"]], "Develop Project": [[545, "develop-project"]], "Optimization Tab": [[545, "optimization-tab"]], "Optimization Table": [[545, "optimization-table"]], "Optimization Wizard": [[545, "optimization-wizard"]], "Editing Optimization Entries": [[545, "editing-optimization-entries"]], "Optimization Details": [[545, "optimization-details"]], "Benchmark Tab": [[545, "benchmark-tab"]], "Benchmark Table": [[545, "benchmark-table"]], "Benchmark Wizard": [[545, "benchmark-wizard"]], "Editing Benchmark Entries": [[545, "editing-benchmark-entries"]], "Benchmark Details": [[545, "benchmark-details"]], "Profiling Tab": [[545, "profiling-tab"]], "Profiling Table": [[545, "profiling-table"]], "Profiling Wizard": [[545, "profiling-wizard"]], "Editing Profiling Entries": [[545, "editing-profiling-entries"]], "Profiling Details": [[545, "profiling-details"]], "Diagnosis Tab": [[545, "diagnosis-tab"]], "Dataset Tab": [[545, "dataset-tab"]], "Dataset List": [[545, "dataset-list"]], "Dataset Wizard": [[545, "dataset-wizard"]], "Dataset Details": [[545, "dataset-details"]], "Custom Dataset": [[545, "custom-dataset"]], "Project Information": [[545, "project-information"]], "System Information": [[545, "system-information"]], "Security": [[545, "security"], [552, "security"]], "Benchmarking": [[546, "benchmarking"]], "Config evaluation filed in a yaml file": [[546, "config-evaluation-filed-in-a-yaml-file"]], "Use a user-specific dataloader to run benchmark": [[546, "use-a-user-specific-dataloader-to-run-benchmark"]], "DataLoader": [[547, "dataloader"]], "How to use it": [[547, "how-to-use-it"]], "Config dataloader in a yaml file": [[547, "config-dataloader-in-a-yaml-file"]], "Create a user-specific dataloader": [[547, "create-a-user-specific-dataloader"]], "Dataset": [[548, "dataset"]], "Built-in dataset support list": [[548, "built-in-dataset-support-list"]], "ONNXRT": [[548, "onnxrt"], [563, "onnxrt"], [578, "onnxrt"]], "User-specific dataset": [[548, "user-specific-dataset"]], "Architecture": [[549, "architecture"], [560, "architecture"]], "Workflow": [[549, "workflow"]], "Knowledge Distillation": [[550, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[550, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[550, "self-distillation"]], "Distillation Support Matrix": [[550, "distillation-support-matrix"]], "Get Started with Distillation API": [[550, "get-started-with-distillation-api"]], "Distillation for Quantization": [[551, "distillation-for-quantization"]], "User-defined yaml": [[551, "user-defined-yaml"]], "Distributed Training and Inference (Evaluation)": [[552, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[552, "supported-feature-matrix"], [557, "supported-feature-matrix"], [560, "supported-feature-matrix"], [572, "supported-feature-matrix"], [573, "supported-feature-matrix"], [577, "supported-feature-matrix"], [580, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[552, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[552, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[552, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[552, "horovodrun-execution"]], "PyTorch Examples:": [[552, "pytorch-examples"]], "TensorFlow Examples:": [[552, "tensorflow-examples"]], "Export": [[555, "export"]], "Supported Framework Model Matrix": [[555, "supported-framework-model-matrix"], [565, "supported-framework-model-matrix"]], "FP32 Model Export": [[555, "fp32-model-export"]], "INT8 Model Export": [[555, "int8-model-export"]], "Appendix": [[555, "appendix"]], "Frequently Asked Questions": [[556, "frequently-asked-questions"]], "Common Build Issues": [[556, "common-build-issues"]], "Issue 1:": [[556, "issue-1"]], "Issue 2:": [[556, "issue-2"]], "Issue 3:": [[556, "issue-3"]], "Framework YAML Configuration Files": [[557, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[557, "get-started-with-framework-yaml-files"]], "Incompatible changes between v1.2 and v1.1": [[558, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[558, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[558, "built-in-transform-dataset-metric-apis"]], "Intel\u00ae Neural Compressor Documentation": [[559, "intel-neural-compressor-documentation"]], "Sections": [[559, "sections"]], "Infrastructure of Intel\u00ae Neural Compressor": [[560, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[561, "linux-installation"]], "Option 1 Install from binary": [[561, "option-1-install-from-binary"], [561, "id2"]], "Option 2 Install from source": [[561, "option-2-install-from-source"], [561, "id3"]], "Option 3 Install from AI Kit": [[561, "option-3-install-from-ai-kit"]], "Windows Installation": [[561, "windows-installation"]], "Legal Information": [[562, "legal-information"]], "License": [[562, "license"]], "Citation": [[562, "citation"]], "Trademarks": [[562, "trademarks"]], "Metrics": [[563, "metrics"]], "Supported Built-in Metric Matrix": [[563, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[563, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[563, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[563, "build-custom-metric-with-python-api"]], "Mixed Precision": [[564, "mixed-precision"]], "Mixed Precision Support Matrix": [[564, "mixed-precision-support-matrix"]], "Get start with Mixed Precision API": [[564, "get-start-with-mixed-precision-api"]], "Objective": [[566, "objective"]], "Single Objective": [[566, "single-objective"]], "Multiple Objectives": [[566, "multiple-objectives"]], "Objective Support Matrix": [[566, "objective-support-matrix"]], "Get Start with Objective API": [[566, "get-start-with-objective-api"]], "Config Single Objective": [[566, "config-single-objective"]], "Config Multiple Objectives": [[566, "config-multiple-objectives"]], "Config Custom Objective": [[566, "config-custom-objective"]], "Optimization Orchestration": [[567, "optimization-orchestration"]], "One-shot": [[567, "one-shot"]], "Multi-shot": [[567, "multi-shot"]], "Orchestration Support Matrix": [[567, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[567, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[568, "system-configuration"]], "Neural Network Pruning": [[569, "neural-network-pruning"], [570, "neural-network-pruning"]], "Pruning Patterns": [[569, "pruning-patterns"], [570, "pruning-patterns"]], "Pruning Criteria": [[569, "pruning-criteria"], [570, "pruning-criteria"]], "Pruning Schedule": [[569, "pruning-schedule"], [570, "pruning-schedule"]], "Pruning Support Matrix": [[569, "pruning-support-matrix"]], "Get Started with Pruning API": [[569, "get-started-with-pruning-api"]], "Pruning Type": [[570, "pruning-type"]], "Regularization": [[570, "regularization"]], "Pruning Examples": [[570, "pruning-examples"]], "Full Publications/Events (49)": [[571, "full-publications-events-49"]], "2022 (31)": [[571, "id1"]], "2021 (14)": [[571, "id2"]], "2018 - 2020 (4)": [[571, "id3"]], "Pythonic Style Access for Configurations": [[572, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[572, "pythonic-api-for-user-configurations"], [572, "id1"]], "Pythonic API for Framework Configurations": [[572, "pythonic-api-for-framework-configurations"], [572, "id2"]], "Get Started with Pythonic API for Configurations": [[572, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[572, "nas"]], "Quantization Introduction": [[573, "quantization-introduction"]], "Quantization Fundamentals": [[573, "quantization-fundamentals"]], "Quantization Approaches": [[573, "quantization-approaches"]], "Quantization Aware Training": [[573, "quantization-aware-training"]], "Accuracy Aware Tuning": [[573, "accuracy-aware-tuning"]], "Get Started": [[573, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[574, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[574, "tensorflow"]], "Release": [[575, "release"]], "Known Issues": [[575, "known-issues"]], "Incompatible Changes": [[575, "incompatible-changes"]], "SigOpt Strategy": [[576, "sigopt-strategy"]], "Preparation": [[576, "preparation"]], "SigOpt Platform": [[576, "sigopt-platform"]], "Neural Compressor Configuration": [[576, "neural-compressor-configuration"]], "Performance": [[576, "performance"]], "Benefit of SigOpt Strategy": [[576, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[576, "performance-comparison-of-different-strategies"]], "TensorBoard": [[577, "tensorboard"]], "Get Started with TensorBoard": [[577, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[577, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[577, "tensorflow-tensorboard"]], "PyTorch Examples": [[577, "pytorch-examples"]], "TensorFlow Examples": [[577, "tensorflow-examples"]], "Transform": [[578, "transform"]], "Transform support list": [[578, "transform-support-list"]], "Pytorch": [[578, "pytorch"]], "Tuning Strategies": [[579, "tuning-strategies"]], "Strategy Design": [[579, "strategy-design"]], "Tuning Space": [[579, "tuning-space"]], "Exit Policy": [[579, "exit-policy"]], "Accuracy Criteria": [[579, "accuracy-criteria"]], "Traverse": [[579, "traverse"]], "Traverse Logic": [[579, "traverse-logic"]], "O0": [[579, "o0"]], "Basic": [[579, "basic"]], "MSE": [[579, "mse"]], "MSE_V2": [[579, "mse-v2"]], "HAWQ_V2": [[579, "hawq-v2"]], "Bayesian": [[579, "bayesian"]], "Exhaustive": [[579, "exhaustive"]], "Random": [[579, "random"]], "SigOpt": [[579, "sigopt"]], "TPE": [[579, "tpe"]], "Customize a New Tuning Strategy": [[579, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[580, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[580, "get-started-with-user-yaml-files"]], "Validated MLPerf Models": [[581, "validated-mlperf-models"]], "Validated Quantization Examples": [[581, "validated-quantization-examples"]], "TensorFlow models with TensorFlow 2.10.0": [[581, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch models with Torch 1.12.1+cpu in PTQ mode": [[581, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch models with Torch 1.12.1+cpu in QAT mode": [[581, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[581, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[581, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet models with MXNet 1.7.0": [[581, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[581, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[581, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 models on multiple hardware through ONNX Runtime": [[581, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"bleu (class in neural_compressor.experimental.metric.bleu)": [[13, "neural_compressor.experimental.metric.bleu.BLEU"], [259, "neural_compressor.experimental.metric.bleu.BLEU"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [259, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "module": [[13, "module-neural_compressor.experimental.metric.bleu"], [32, "module-644ec953a7dc_pruning_support"], [33, "module-6ece06672ed3_v1_14"], [34, "module-6f0d0f71d92e_v1_13"], [35, "module-9e89549a08c8_v1_11"], [36, "module-block_mask"], [37, "module-env"], [38, "module-neural_compressor.adaptor.adaptor"], [39, "module-neural_compressor.adaptor"], [40, "module-neural_compressor.adaptor.keras"], [41, "module-neural_compressor.adaptor.keras_utils"], [42, "module-neural_compressor.adaptor.keras_utils.quantizer"], [43, "module-neural_compressor.adaptor.mxnet"], [44, "module-neural_compressor.adaptor.mxnet_utils"], [45, "module-neural_compressor.adaptor.mxnet_utils.util"], [46, "module-neural_compressor.adaptor.onnxrt"], [47, "module-neural_compressor.adaptor.ox_utils.calibration"], [48, "module-neural_compressor.adaptor.ox_utils"], [49, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [50, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [51, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [52, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [53, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [54, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [55, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [56, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [57, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [58, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [59, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [60, "module-neural_compressor.adaptor.ox_utils.operators"], [61, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [62, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [63, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [64, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [65, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [66, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [67, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [68, "module-neural_compressor.adaptor.ox_utils.operators.split"], [69, "module-neural_compressor.adaptor.ox_utils.quantizer"], [70, "module-neural_compressor.adaptor.ox_utils.util"], [71, "module-neural_compressor.adaptor.pytorch"], [72, "module-neural_compressor.adaptor.query"], [73, "module-neural_compressor.adaptor.tensorflow"], [74, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [75, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [132, "module-neural_compressor.adaptor.tf_utils.graph_util"], [133, "module-neural_compressor.adaptor.tf_utils"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [161, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [162, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [163, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [164, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [165, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [166, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [167, "module-neural_compressor.adaptor.tf_utils.util"], [168, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [169, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [170, "module-neural_compressor.adaptor.torch_utils"], [171, "module-neural_compressor.adaptor.torch_utils.onnx"], [172, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [173, "module-neural_compressor.adaptor.torch_utils.util"], [174, "module-neural_compressor.algorithm.algorithm"], [175, "module-neural_compressor.algorithm.fast_bias_correction"], [176, "module-neural_compressor.algorithm"], [177, "module-neural_compressor.algorithm.weight_correction"], [178, "module-neural_compressor.benchmark"], [179, "module-neural_compressor.conf.config"], [180, "module-neural_compressor.conf.dotdict"], [181, "module-neural_compressor.conf"], [182, "module-neural_compressor.conf.pythonic_config"], [183, "module-neural_compressor.config"], [184, "module-neural_compressor.contrib"], [185, "module-neural_compressor.contrib.strategy"], [186, "module-neural_compressor.contrib.strategy.sigopt"], [187, "module-neural_compressor.contrib.strategy.tpe"], [188, "module-neural_compressor.data.dataloaders.base_dataloader"], [189, "module-neural_compressor.data.dataloaders.dataloader"], [190, "module-neural_compressor.data.dataloaders.default_dataloader"], [191, "module-neural_compressor.data.dataloaders.fetcher"], [192, "module-neural_compressor.data.dataloaders"], [193, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [194, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [195, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [196, "module-neural_compressor.data.dataloaders.sampler"], [197, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [198, "module-neural_compressor.data.datasets.bert_dataset"], [199, "module-neural_compressor.data.datasets.coco_dataset"], [200, "module-neural_compressor.data.datasets.dataset"], [201, "module-neural_compressor.data.datasets.dummy_dataset"], [202, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [203, "module-neural_compressor.data.datasets.imagenet_dataset"], [204, "module-neural_compressor.data.datasets"], [205, "module-neural_compressor.data.datasets.style_transfer_dataset"], [206, "module-neural_compressor.data.filters.coco_filter"], [207, "module-neural_compressor.data.filters.filter"], [208, "module-neural_compressor.data.filters"], [209, "module-neural_compressor.data"], [210, "module-neural_compressor.data.transforms.coco_transform"], [211, "module-neural_compressor.data.transforms.imagenet_transform"], [212, "module-neural_compressor.data.transforms"], [213, "module-neural_compressor.data.transforms.postprocess"], [214, "module-neural_compressor.data.transforms.tokenization"], [215, "module-neural_compressor.data.transforms.transform"], [216, "module-neural_compressor.experimental.benchmark"], [217, "module-neural_compressor.experimental.common.criterion"], [218, "module-neural_compressor.experimental.common.dataloader"], [219, "module-neural_compressor.experimental.common"], [220, "module-neural_compressor.experimental.common.metric"], [221, "module-neural_compressor.experimental.common.model"], [222, "module-neural_compressor.experimental.common.optimizer"], [223, "module-neural_compressor.experimental.common.postprocess"], [224, "module-neural_compressor.experimental.common.torch_utils"], [225, "module-neural_compressor.experimental.component"], [226, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [227, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [228, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [229, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [230, "module-neural_compressor.experimental.data.dataloaders"], [231, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [232, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [233, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [234, "module-neural_compressor.experimental.data.dataloaders.sampler"], [235, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [236, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [237, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [238, "module-neural_compressor.experimental.data.datasets.dataset"], [239, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [240, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [241, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [242, "module-neural_compressor.experimental.data.datasets"], [243, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [244, "module-neural_compressor.experimental.data.filters.coco_filter"], [245, "module-neural_compressor.experimental.data.filters.filter"], [246, "module-neural_compressor.experimental.data.filters"], [247, "module-neural_compressor.experimental.data"], [248, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [249, "module-neural_compressor.experimental.data.transforms"], [250, "module-neural_compressor.experimental.data.transforms.tokenization"], [251, "module-neural_compressor.experimental.data.transforms.transform"], [252, "module-neural_compressor.experimental.distillation"], [253, "module-neural_compressor.experimental.export"], [254, "module-neural_compressor.experimental.export.qlinear2qdq"], [255, "module-neural_compressor.experimental.export.torch2onnx"], [256, "module-neural_compressor.experimental.export.utils"], [257, "module-neural_compressor.experimental.graph_optimization"], [258, "module-neural_compressor.experimental"], [259, "module-neural_compressor.experimental.metric.bleu"], [260, "module-neural_compressor.experimental.metric.bleu_util"], [261, "module-neural_compressor.experimental.metric.coco_label_map"], [262, "module-neural_compressor.experimental.metric.coco_tools"], [263, "module-neural_compressor.experimental.metric.evaluate_squad"], [264, "module-neural_compressor.experimental.metric.f1"], [265, "module-neural_compressor.experimental.metric"], [266, "module-neural_compressor.experimental.metric.metric"], [267, "module-neural_compressor.experimental.mixed_precision"], [268, "module-neural_compressor.experimental.model_conversion"], [269, "module-neural_compressor.experimental.nas.basic_nas"], [270, "module-neural_compressor.experimental.nas.dynas"], [271, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [272, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [273, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [274, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [275, "module-neural_compressor.experimental.nas.dynast"], [276, "module-neural_compressor.experimental.nas.dynast.supernetwork"], [277, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"], [278, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"], [279, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"], [280, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"], [281, "module-neural_compressor.experimental.nas"], [282, "module-neural_compressor.experimental.nas.nas"], [283, "module-neural_compressor.experimental.nas.nas_utils"], [284, "module-neural_compressor.experimental.nas.search_algorithms"], [285, "module-neural_compressor.experimental.pruning"], [286, "module-neural_compressor.experimental.pruning_recipes"], [287, "module-neural_compressor.experimental.pruning_recipes.patterns"], [288, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [289, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [290, "module-neural_compressor.experimental.pruning_v2"], [291, "module-neural_compressor.experimental.pytorch_pruner"], [292, "module-neural_compressor.experimental.pytorch_pruner.logger"], [293, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [294, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [295, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [296, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [297, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [298, "module-neural_compressor.experimental.quantization"], [299, "module-neural_compressor.experimental.scheduler"], [300, "module-neural_compressor"], [301, "module-neural_compressor.metric.bleu"], [302, "module-neural_compressor.metric.bleu_util"], [303, "module-neural_compressor.metric.coco_label_map"], [304, "module-neural_compressor.metric.coco_tools"], [305, "module-neural_compressor.metric.evaluate_squad"], [306, "module-neural_compressor.metric.f1"], [307, "module-neural_compressor.metric"], [308, "module-neural_compressor.metric.metric"], [309, "module-neural_compressor.mix_precision"], [310, "module-neural_compressor.model.base_model"], [311, "module-neural_compressor.model"], [312, "module-neural_compressor.model.keras_model"], [313, "module-neural_compressor.model.model"], [314, "module-neural_compressor.model.mxnet_model"], [315, "module-neural_compressor.model.nets_factory"], [316, "module-neural_compressor.model.onnx_model"], [317, "module-neural_compressor.model.tensorflow_model"], [318, "module-neural_compressor.model.torch_model"], [319, "module-neural_compressor.objective"], [320, "module-neural_compressor.pruner.criteria"], [321, "module-neural_compressor.pruner"], [322, "module-neural_compressor.pruner.logger"], [323, "module-neural_compressor.pruner.patterns"], [324, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"], [325, "module-neural_compressor.pruner.pruner_legacy.group_lasso"], [326, "module-neural_compressor.pruner.pruner_legacy"], [327, "module-neural_compressor.pruner.pruner_legacy.magnitude"], [328, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"], [329, "module-neural_compressor.pruner.pruner_legacy.pruner"], [330, "module-neural_compressor.pruner.pruners"], [331, "module-neural_compressor.pruner.pruning"], [332, "module-neural_compressor.pruner.regs"], [333, "module-neural_compressor.pruner.schedulers"], [334, "module-neural_compressor.pruner.utils"], [335, "module-neural_compressor.quantization"], [336, "module-neural_compressor.strategy.auto_mixed_precision"], [337, "module-neural_compressor.strategy.basic"], [338, "module-neural_compressor.strategy.bayesian"], [339, "module-neural_compressor.strategy.conservative"], [340, "module-neural_compressor.strategy.exhaustive"], [341, "module-neural_compressor.strategy.hawq_v2"], [342, "module-neural_compressor.strategy"], [343, "module-neural_compressor.strategy.mse"], [344, "module-neural_compressor.strategy.mse_v2"], [345, "module-neural_compressor.strategy.random"], [346, "module-neural_compressor.strategy.strategy"], [347, "module-neural_compressor.strategy.utils"], [348, "module-neural_compressor.strategy.utils.tuning_sampler"], [349, "module-neural_compressor.strategy.utils.tuning_space"], [350, "module-neural_compressor.strategy.utils.tuning_structs"], [351, "module-neural_compressor.training"], [352, "module-neural_compressor.utils.collect_layer_histogram"], [353, "module-neural_compressor.utils.constant"], [354, "module-neural_compressor.utils.create_obj_from_config"], [355, "module-neural_compressor.utils"], [356, "module-neural_compressor.utils.kl_divergence"], [357, "module-neural_compressor.utils.load_huggingface"], [358, "module-neural_compressor.utils.logger"], [359, "module-neural_compressor.utils.options"], [360, "module-neural_compressor.utils.pytorch"], [361, "module-neural_compressor.utils.utility"], [362, "module-neural_compressor.ux.components.benchmark.benchmark"], [363, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [364, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [365, "module-neural_compressor.ux.components.benchmark"], [366, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [367, "module-neural_compressor.ux.components.config_generator.config_generator"], [368, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [369, "module-neural_compressor.ux.components.config_generator"], [370, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [371, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [372, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [373, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [374, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [375, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [376, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [377, "module-neural_compressor.ux.components.configuration_wizard"], [378, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [379, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [380, "module-neural_compressor.ux.components.db_manager.db_manager"], [381, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [382, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [383, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [384, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [385, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [386, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [387, "module-neural_compressor.ux.components.db_manager.db_models.example"], [388, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [389, "module-neural_compressor.ux.components.db_manager.db_models"], [390, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [391, "module-neural_compressor.ux.components.db_manager.db_models.model"], [392, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [393, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [394, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [395, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [396, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [397, "module-neural_compressor.ux.components.db_manager.db_models.project"], [398, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [399, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [400, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [401, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [402, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [403, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [404, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [405, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [406, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [407, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [408, "module-neural_compressor.ux.components.db_manager.db_operations"], [409, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [410, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [411, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [412, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [413, "module-neural_compressor.ux.components.db_manager"], [414, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [415, "module-neural_compressor.ux.components.db_manager.utils"], [416, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [417, "module-neural_compressor.ux.components.diagnosis.factory"], [418, "module-neural_compressor.ux.components.diagnosis"], [419, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [420, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [421, "module-neural_compressor.ux.components.diagnosis.op_details"], [422, "module-neural_compressor.ux.components.diagnosis.op_entry"], [423, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [424, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [425, "module-neural_compressor.ux.components.file_browser.file_browser"], [426, "module-neural_compressor.ux.components.file_browser"], [427, "module-neural_compressor.ux.components.graph.attribute"], [428, "module-neural_compressor.ux.components.graph.collapser"], [429, "module-neural_compressor.ux.components.graph.edge"], [430, "module-neural_compressor.ux.components.graph.graph"], [431, "module-neural_compressor.ux.components.graph.graph_reader"], [432, "module-neural_compressor.ux.components.graph"], [433, "module-neural_compressor.ux.components.graph.node"], [434, "module-neural_compressor.ux.components.graph.reader"], [435, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [436, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [437, "module-neural_compressor.ux.components"], [438, "module-neural_compressor.ux.components.jobs_management"], [439, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [440, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [441, "module-neural_compressor.ux.components.jobs_management.request"], [442, "module-neural_compressor.ux.components.manage_workspace"], [443, "module-neural_compressor.ux.components.model.domain"], [444, "module-neural_compressor.ux.components.model"], [445, "module-neural_compressor.ux.components.model.model"], [446, "module-neural_compressor.ux.components.model.model_type_getter"], [447, "module-neural_compressor.ux.components.model.onnxrt"], [448, "module-neural_compressor.ux.components.model.onnxrt.model"], [449, "module-neural_compressor.ux.components.model.pytorch"], [450, "module-neural_compressor.ux.components.model.pytorch.model"], [451, "module-neural_compressor.ux.components.model.repository"], [452, "module-neural_compressor.ux.components.model.shape"], [453, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [454, "module-neural_compressor.ux.components.model.tensorflow"], [455, "module-neural_compressor.ux.components.model.tensorflow.keras"], [456, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [457, "module-neural_compressor.ux.components.model.tensorflow.model"], [458, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [459, "module-neural_compressor.ux.components.model.tensorflow.utils"], [460, "module-neural_compressor.ux.components.model_zoo.download_config"], [461, "module-neural_compressor.ux.components.model_zoo.download_model"], [462, "module-neural_compressor.ux.components.model_zoo.downloader"], [463, "module-neural_compressor.ux.components.model_zoo"], [464, "module-neural_compressor.ux.components.model_zoo.list_models"], [465, "module-neural_compressor.ux.components.names_mapper"], [466, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [467, "module-neural_compressor.ux.components.optimization.execute_optimization"], [468, "module-neural_compressor.ux.components.optimization.factory"], [469, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [470, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [471, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [472, "module-neural_compressor.ux.components.optimization"], [473, "module-neural_compressor.ux.components.optimization.mixed_precision"], [474, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [475, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [476, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [477, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [478, "module-neural_compressor.ux.components.optimization.optimization"], [479, "module-neural_compressor.ux.components.optimization.pruning"], [480, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [481, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [482, "module-neural_compressor.ux.components.optimization.tune"], [483, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [484, "module-neural_compressor.ux.components.optimization.tune.tuning"], [485, "module-neural_compressor.ux.components.optimization.tuning_history"], [486, "module-neural_compressor.ux.components.profiling.execute_profiling"], [487, "module-neural_compressor.ux.components.profiling.factory"], [488, "module-neural_compressor.ux.components.profiling"], [489, "module-neural_compressor.ux.components.profiling.profile_model"], [490, "module-neural_compressor.ux.components.profiling.profiler"], [491, "module-neural_compressor.ux.components.profiling.profiling"], [492, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [493, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [494, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [495, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [496, "module-neural_compressor.ux.inc_bench"], [497, "module-neural_compressor.ux"], [498, "module-neural_compressor.ux.utils.consts"], [499, "module-neural_compressor.ux.utils.environment"], [500, "module-neural_compressor.ux.utils.exceptions"], [501, "module-neural_compressor.ux.utils.executor"], [502, "module-neural_compressor.ux.utils.expiring_dict"], [503, "module-neural_compressor.ux.utils.github_info"], [504, "module-neural_compressor.ux.utils.hw_info"], [505, "module-neural_compressor.ux.utils"], [506, "module-neural_compressor.ux.utils.json_serializer"], [507, "module-neural_compressor.ux.utils.logger"], [508, "module-neural_compressor.ux.utils.parser"], [509, "module-neural_compressor.ux.utils.proc"], [510, "module-neural_compressor.ux.utils.processes"], [511, "module-neural_compressor.ux.utils.singleton"], [512, "module-neural_compressor.ux.utils.status_updates"], [513, "module-neural_compressor.ux.utils.templates"], [514, "module-neural_compressor.ux.utils.templates.metric"], [515, "module-neural_compressor.ux.utils.templates.workdir"], [516, "module-neural_compressor.ux.utils.utils"], [517, "module-neural_compressor.ux.utils.workload.config"], [518, "module-neural_compressor.ux.utils.workload.dataloader"], [519, "module-neural_compressor.ux.utils.workload.evaluation"], [520, "module-neural_compressor.ux.utils.workload.graph_optimization"], [521, "module-neural_compressor.ux.utils.workload"], [522, "module-neural_compressor.ux.utils.workload.mixed_precision"], [523, "module-neural_compressor.ux.utils.workload.model"], [524, "module-neural_compressor.ux.utils.workload.pruning"], [525, "module-neural_compressor.ux.utils.workload.quantization"], [526, "module-neural_compressor.ux.utils.workload.tuning"], [527, "module-neural_compressor.ux.utils.yaml_utils"], [528, "module-neural_compressor.ux.web.communication"], [529, "module-neural_compressor.ux.web.configuration"], [530, "module-neural_compressor.ux.web.exceptions"], [531, "module-neural_compressor.ux.web"], [532, "module-neural_compressor.ux.web.router"], [533, "module-neural_compressor.ux.web.server"], [534, "module-neural_compressor.ux.web.service.benchmark"], [535, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [536, "module-neural_compressor.ux.web.service"], [537, "module-neural_compressor.ux.web.service.model"], [538, "module-neural_compressor.ux.web.service.optimization"], [539, "module-neural_compressor.ux.web.service.profiling"], [540, "module-neural_compressor.ux.web.service.request_data_processor"], [541, "module-neural_compressor.ux.web.service.response_generator"], [542, "module-neural_compressor.ux.web.service.workload"], [543, "module-neural_compressor.version"]], "neural_compressor.experimental.metric.bleu": [[13, "module-neural_compressor.experimental.metric.bleu"], [259, "module-neural_compressor.experimental.metric.bleu"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [259, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [259, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.result"], [259, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.update"], [259, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "644ec953a7dc_pruning_support": [[32, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[33, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[33, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[33, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[34, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[35, "module-9e89549a08c8_v1_11"]], "block_mask": [[36, "module-block_mask"]], "env": [[37, "module-env"]], "run_migrations_offline() (in module env)": [[37, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[37, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[38, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[38, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[38, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[38, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[39, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[40, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[40, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[40, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[40, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[40, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[40, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[40, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[40, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[40, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[40, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[40, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[40, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[40, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[40, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[40, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[40, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[40, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils": [[41, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[42, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[43, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[43, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[43, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "get_fuse_patterns() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[43, "neural_compressor.adaptor.mxnet.MXNetQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[43, "neural_compressor.adaptor.mxnet.MXNetQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[43, "neural_compressor.adaptor.mxnet.MXNetQuery.get_op_types"]], "get_precisions() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[43, "neural_compressor.adaptor.mxnet.MXNetQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[43, "neural_compressor.adaptor.mxnet.MXNetQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[43, "neural_compressor.adaptor.mxnet.MXNetQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[43, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[43, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[43, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[43, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[43, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[43, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[43, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[44, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "neural_compressor.adaptor.mxnet_utils.util": [[45, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[45, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[46, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[46, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[47, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[47, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[47, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[47, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[47, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[47, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[47, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[48, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[49, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[50, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[51, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[52, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[53, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[54, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[55, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[56, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[57, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[58, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[59, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[60, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[61, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[62, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[63, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[64, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[64, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[64, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[65, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[66, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[67, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[68, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[69, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[70, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[70, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[70, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[70, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[70, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[70, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[70, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[70, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[70, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "neural_compressor.adaptor.ox_utils.util": [[70, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[70, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[70, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[71, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[71, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[71, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[71, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[71, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[71, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[71, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[71, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[72, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[72, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[72, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[72, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[72, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[72, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[72, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[72, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[72, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[73, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[73, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[73, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[73, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[73, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[73, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[73, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[73, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[73, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[73, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[73, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[73, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "tuning_cfg_to_fw() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[73, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.tuning_cfg_to_fw"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[74, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[75, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[130, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[130, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[131, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[132, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[132, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[133, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[141, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[161, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[162, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[162, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[162, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[163, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[164, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[165, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[165, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[165, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[166, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[166, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[166, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[167, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[167, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[167, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[167, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[167, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[167, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[167, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[167, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[167, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[167, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[167, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[168, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[169, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[169, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[169, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[169, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[169, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[169, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[169, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[170, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[171, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[172, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[173, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[173, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[173, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[173, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[173, "module-neural_compressor.adaptor.torch_utils.util"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[174, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[174, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[174, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[174, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[175, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[175, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithm (class in neural_compressor.algorithm)": [[176, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[176, "neural_compressor.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[176, "neural_compressor.algorithm.algorithm_registry"]], "neural_compressor.algorithm": [[176, "module-neural_compressor.algorithm"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[177, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[177, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.Benchmark"]], "fit() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.fit"]], "neural_compressor.benchmark": [[178, "module-neural_compressor.benchmark"]], "benchmark_conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[179, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[179, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[180, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[180, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[180, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[180, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[181, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[182, "module-neural_compressor.conf.pythonic_config"]], "distillationconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.DistillationConfig"]], "weightpruningconfig (class in neural_compressor.config)": [[183, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[183, "module-neural_compressor.config"]], "neural_compressor.contrib": [[184, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[185, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[186, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[186, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[186, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[186, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[187, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[187, "module-neural_compressor.contrib.strategy.tpe"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[187, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[187, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[188, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[188, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[188, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[188, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[189, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[189, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[190, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[190, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[190, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[190, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[190, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[191, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[191, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[191, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[191, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[192, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[192, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[193, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[193, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[194, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[194, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[194, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[195, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[195, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[196, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[196, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[196, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[196, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[196, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[197, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[197, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[197, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[197, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[197, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[197, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[198, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[198, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[198, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[199, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[199, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[199, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[199, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[199, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[200, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[200, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[200, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[200, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[200, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[200, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[200, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[200, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[201, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[201, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[202, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[202, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[202, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[203, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[203, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[203, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[203, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[203, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[203, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[203, "module-neural_compressor.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.data.datasets)": [[204, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[204, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[204, "neural_compressor.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[204, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[204, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[205, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[205, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[206, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[206, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[206, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[207, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[207, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[208, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[208, "neural_compressor.data.filters.Filter"]], "filter_registry() (in module neural_compressor.data.filters)": [[208, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[208, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[209, "neural_compressor.data.BaseTransform"]], "dataloader (class in neural_compressor.data)": [[209, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[209, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[209, "neural_compressor.data.Datasets"]], "filters (class in neural_compressor.data)": [[209, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[209, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[209, "neural_compressor.data.IterableDataset"]], "postprocess (class in neural_compressor.data)": [[209, "neural_compressor.data.Postprocess"]], "transforms (class in neural_compressor.data)": [[209, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[209, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[209, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[209, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[209, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[209, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[210, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[210, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[211, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[211, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[212, "neural_compressor.data.transforms.BaseTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[212, "neural_compressor.data.transforms.Postprocess"]], "transforms (class in neural_compressor.data.transforms)": [[212, "neural_compressor.data.transforms.TRANSFORMS"]], "neural_compressor.data.transforms": [[212, "module-neural_compressor.data.transforms"]], "register() (neural_compressor.data.transforms.transforms method)": [[212, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[212, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[213, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[213, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[214, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[214, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[214, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[214, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[214, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[214, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[214, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TRANSFORMS"], [215, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[215, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[215, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[215, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[215, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[215, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[215, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[215, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[216, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[216, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[216, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[216, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[216, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[216, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[216, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[216, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[216, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[216, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[216, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[216, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[217, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[217, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[217, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[217, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[217, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[217, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[217, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[217, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[217, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[218, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[218, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[219, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[219, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[219, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[219, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[219, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[220, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[220, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[221, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[221, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[222, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[222, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[222, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[223, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[223, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[224, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[224, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[224, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[225, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[225, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[225, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[225, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[225, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[225, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[225, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[225, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[226, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[226, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[228, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[228, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[228, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[228, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[229, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[229, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[229, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[229, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[230, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[234, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[234, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[234, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[234, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[234, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[235, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[235, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[235, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[235, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[235, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[236, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[236, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[236, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[236, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[236, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[236, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[236, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[236, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[236, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[236, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[237, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[237, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[237, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[237, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[237, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[238, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[238, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[238, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[238, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[238, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[238, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[238, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[238, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[239, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[239, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[240, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[240, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[240, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[241, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[241, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[241, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[241, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[241, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[241, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[241, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[242, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[242, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[242, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[242, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[242, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[243, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[243, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[244, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[244, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[244, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[245, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[245, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[245, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[245, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[245, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[245, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[245, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[245, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[245, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[246, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[246, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[246, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[246, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[247, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[247, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[247, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[247, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[247, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[247, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[247, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[247, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[247, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[247, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[247, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[247, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[248, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[248, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[248, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[248, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[248, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[248, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[248, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[248, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[248, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[248, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[249, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[249, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[249, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[249, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[249, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[250, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[250, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[250, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[250, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[250, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[250, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[250, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[250, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[250, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[250, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[250, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[250, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[250, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [251, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[251, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[251, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[251, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[251, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[251, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[251, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[251, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[252, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[252, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[252, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[252, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[252, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[252, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[252, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[252, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[252, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[252, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[252, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[252, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[252, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[252, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[252, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[252, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[252, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[252, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[252, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[252, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[252, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[253, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[253, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[253, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[253, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[254, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[254, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[254, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[255, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[255, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[256, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[256, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[256, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[256, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[257, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[257, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[257, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[257, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[257, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[257, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[257, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[257, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[257, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[257, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[257, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[257, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[258, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[258, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[258, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[258, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[258, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[258, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[258, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[258, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[258, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[258, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[258, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[258, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[258, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[258, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[258, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[258, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[258, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[258, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[258, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[258, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[258, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[258, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[258, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[258, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[258, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[258, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[258, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[258, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[258, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[258, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[258, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[258, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[258, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[258, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[258, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[258, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[258, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[258, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[258, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[258, "neural_compressor.experimental.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning method)": [[258, "neural_compressor.experimental.Pruning.get_sparsity_ratio"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[258, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[258, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[258, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[258, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[258, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[258, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[258, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[258, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[258, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[258, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[258, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[258, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[258, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[258, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[258, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[258, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[258, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[258, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[258, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[258, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[258, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[258, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[258, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[258, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[258, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[258, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[258, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[258, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[258, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[258, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[258, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[258, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[258, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[258, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[258, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[258, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[258, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[258, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[258, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[258, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[258, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[258, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[258, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[258, "neural_compressor.experimental.Component.train_func"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning method)": [[258, "neural_compressor.experimental.Pruning.update_items_for_all_pruners"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[259, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[259, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[259, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[259, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[259, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[259, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[260, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[260, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[261, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[262, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[262, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[262, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[262, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[262, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[262, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[262, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[262, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[262, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[262, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[262, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[262, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[262, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[262, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[263, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[263, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[263, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[263, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[263, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[264, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[264, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[264, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[264, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[264, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[265, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[265, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[265, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[265, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[265, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[265, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[265, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[265, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[265, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[265, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[265, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[266, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[266, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[266, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[266, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[266, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[266, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[266, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[266, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[266, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[266, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[266, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[266, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[266, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[266, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[266, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[266, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[266, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[266, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[266, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[266, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[266, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[266, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[266, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[266, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[266, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[266, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[266, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[266, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[266, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[266, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[266, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[266, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[266, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[266, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[266, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[266, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[266, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[266, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[266, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[266, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[266, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[266, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[266, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[266, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[266, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[266, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[266, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[266, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[266, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[266, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[266, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[266, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[266, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[266, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[266, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[266, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[266, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[266, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[266, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[266, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[266, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[266, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[266, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[266, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[266, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[266, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[266, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[266, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[266, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[266, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[266, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[266, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[266, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[266, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[266, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[266, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[266, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[266, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[266, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[266, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[266, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[266, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[266, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[266, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[266, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[266, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[267, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[267, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[267, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[267, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[268, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[268, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[268, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[268, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[268, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[268, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[268, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[268, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[268, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[268, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[269, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[269, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[269, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[269, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[269, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[269, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[270, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[270, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[270, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[270, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[270, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[270, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[270, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[270, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[270, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[270, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[271, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "transformerltencoding (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[271, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[271, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[271, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[272, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[272, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[273, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[273, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[273, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "evaluationinterfacetransformerlt (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "transformerltrunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[274, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[275, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[276, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[277, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "multiheadattentionsuper (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.forward"]], "get_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.get_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[278, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "reorder_incremental_state() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.reorder_incremental_state"]], "set_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[278, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.set_incremental_state"]], "compute_bleu() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_bleu"]], "compute_latency() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_latency"]], "compute_macs() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[279, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "transformerdecoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder"]], "transformerdecoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer"]], "transformerencoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder"]], "transformerencoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer"]], "transformersupernetwork (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerSuperNetwork"]], "extract_features() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.extract_features"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoderlayer method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.forward"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.max_positions"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.max_positions"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[280, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "output_layer() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.output_layer"]], "reorder_encoder_out() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.reorder_encoder_out"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.upgrade_state_dict_named"]], "basicnas (class in neural_compressor.experimental.nas)": [[281, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[281, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[281, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[281, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[281, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[281, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[281, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[281, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[281, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[281, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[281, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[281, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[281, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[281, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[281, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[281, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[282, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[282, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[282, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[282, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[282, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[282, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[282, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[282, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[282, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[282, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[282, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[282, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[282, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[282, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[282, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[282, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[283, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[283, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[283, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[283, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[284, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[284, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[284, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[284, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[284, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[284, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[284, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[284, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[284, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[284, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[284, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[284, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[284, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[285, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[285, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[285, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[285, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[285, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[285, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning.pruning method)": [[285, "neural_compressor.experimental.pruning.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning": [[285, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[285, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[285, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[285, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[285, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[285, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning.pruning method)": [[285, "neural_compressor.experimental.pruning.Pruning.update_items_for_all_pruners"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[286, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[286, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[286, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[286, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[290, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning_v2.pruning method)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning_v2.pruning method)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.generate_hooks"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning_v2.pruning method)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning_v2": [[290, "module-neural_compressor.experimental.pruning_v2"]], "on_after_compute_loss() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning_v2.pruning method)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning_v2.pruning method)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning_v2.pruning property)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.train_distributed"]], "update_config() (neural_compressor.experimental.pruning_v2.pruning method)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.update_config"]], "neural_compressor.experimental.pytorch_pruner": [[291, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[292, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[293, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[294, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[295, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[296, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "prepare() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.prepare"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[297, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[298, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[298, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[298, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[298, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[298, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[298, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[298, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[298, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[298, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[298, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[298, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[299, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[299, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[299, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[299, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[299, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[299, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[299, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[300, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[300, "neural_compressor.DistillationConfig"]], "weightpruningconfig (class in neural_compressor)": [[300, "neural_compressor.WeightPruningConfig"]], "neural_compressor": [[300, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[301, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[301, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[301, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[301, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[301, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[301, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[301, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[301, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[301, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[301, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[301, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[301, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[301, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[302, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[302, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[303, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[304, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[304, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[304, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[304, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[304, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[304, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[304, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[304, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[304, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[304, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[304, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[304, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[304, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[304, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[305, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[305, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[305, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[305, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[305, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[306, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[306, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[306, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[306, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[306, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[307, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[307, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[307, "neural_compressor.metric.Metric"]], "hvd (neural_compressor.metric.basemetric property)": [[307, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[307, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[307, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[307, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[307, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[307, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[307, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[307, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[307, "neural_compressor.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[308, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[308, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[308, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[308, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[308, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[308, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[308, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[308, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[308, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[308, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[308, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[308, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[308, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[308, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[308, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[308, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[308, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[308, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[308, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[308, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[308, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[308, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[308, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[308, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[308, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[308, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[308, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[308, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[308, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[308, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[308, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[308, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[308, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[308, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[308, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[308, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[308, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[308, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[308, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[308, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[308, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[308, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[308, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[308, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[308, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[308, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[308, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[308, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[308, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[308, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[308, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[308, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[308, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[308, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[308, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[308, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[308, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[308, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[308, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[308, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[308, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[308, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[308, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[308, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[308, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[308, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[308, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[308, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[308, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[308, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[308, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[308, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[308, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[308, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[308, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[308, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[308, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[308, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[308, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[308, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[308, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[308, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[308, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[308, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[308, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[308, "neural_compressor.metric.metric.mIOU.update"]], "neural_compressor.mix_precision": [[309, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[310, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[310, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[310, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[310, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[310, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[310, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[310, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[311, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[311, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[311, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[311, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[311, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[311, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[311, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[311, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[312, "neural_compressor.model.keras_model.KerasModel"]], "export() (neural_compressor.model.keras_model.kerasmodel method)": [[312, "neural_compressor.model.keras_model.KerasModel.export"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[312, "neural_compressor.model.keras_model.KerasModel.framework"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[312, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[312, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[312, "module-neural_compressor.model.keras_model"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[312, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[313, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[313, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[313, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[314, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[314, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[314, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[314, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[314, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "neural_compressor.model.nets_factory": [[315, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[316, "neural_compressor.model.onnx_model.ONNXModel"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[316, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[316, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[316, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[316, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[316, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[316, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[316, "neural_compressor.model.onnx_model.ONNXModel.model"]], "neural_compressor.model.onnx_model": [[316, "module-neural_compressor.model.onnx_model"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[316, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[316, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.estimator_session"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[317, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[317, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[317, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[317, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[317, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "neural_compressor.model.tensorflow_model": [[317, "module-neural_compressor.model.tensorflow_model"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[317, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[317, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[317, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[317, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[317, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[317, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[318, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[318, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[318, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[318, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[318, "neural_compressor.model.torch_model.PyTorchModel.export"]], "fp32_model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[318, "neural_compressor.model.torch_model.PyTorchBaseModel.fp32_model"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[318, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[318, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[318, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[318, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[318, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.ipexmodel property)": [[318, "neural_compressor.model.torch_model.IPEXModel.graph_info"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[318, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[318, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[318, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[318, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[318, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[318, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[318, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[318, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[318, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "accuracy (class in neural_compressor.objective)": [[319, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[319, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[319, "neural_compressor.objective.ModelSize"]], "objective (class in neural_compressor.objective)": [[319, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[319, "neural_compressor.objective.Performance"]], "end() (neural_compressor.objective.accuracy method)": [[319, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[319, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[319, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.objective method)": [[319, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[319, "neural_compressor.objective.Performance.end"]], "neural_compressor.objective": [[319, "module-neural_compressor.objective"]], "objective_registry() (in module neural_compressor.objective)": [[319, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.objective method)": [[319, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.objective method)": [[319, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[319, "neural_compressor.objective.Objective.result_list"]], "start() (neural_compressor.objective.accuracy method)": [[319, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[319, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[319, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.objective method)": [[319, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[319, "neural_compressor.objective.Performance.start"]], "gradientcriterion (class in neural_compressor.pruner.criteria)": [[320, "neural_compressor.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.pruner.criteria)": [[320, "neural_compressor.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.pruner.criteria)": [[320, "neural_compressor.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.pruner.criteria)": [[320, "neural_compressor.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.pruner.criteria)": [[320, "neural_compressor.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.pruner.criteria)": [[320, "neural_compressor.pruner.criteria.get_criterion"]], "neural_compressor.pruner.criteria": [[320, "module-neural_compressor.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.gradientcriterion method)": [[320, "neural_compressor.pruner.criteria.GradientCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[320, "neural_compressor.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipcriterion method)": [[320, "neural_compressor.pruner.criteria.SnipCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipmomentumcriterion method)": [[320, "neural_compressor.pruner.criteria.SnipMomentumCriterion.on_after_optimizer_step"]], "on_step_begin() (neural_compressor.pruner.criteria.magnitudecriterion method)": [[320, "neural_compressor.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.criteria.pruningcriterion method)": [[320, "neural_compressor.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.pruner.criteria)": [[320, "neural_compressor.pruner.criteria.register_criterion"]], "scores (neural_compressor.pruner.criteria.gradientcriterion attribute)": [[320, "neural_compressor.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.pruner.criteria.magnitudecriterion attribute)": [[320, "neural_compressor.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.pruner.criteria.pruningcriterion attribute)": [[320, "neural_compressor.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipcriterion attribute)": [[320, "neural_compressor.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipmomentumcriterion attribute)": [[320, "neural_compressor.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.pruner": [[321, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[322, "module-neural_compressor.pruner.logger"]], "basepattern (class in neural_compressor.pruner.patterns)": [[323, "neural_compressor.pruner.patterns.BasePattern"]], "m (neural_compressor.pruner.patterns.patternninm attribute)": [[323, "neural_compressor.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.pruner.patterns.patternninm attribute)": [[323, "neural_compressor.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.pruner.patterns)": [[323, "neural_compressor.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.pruner.patterns)": [[323, "neural_compressor.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[323, "neural_compressor.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.pruner.patterns.patternnxm attribute)": [[323, "neural_compressor.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.pruner.patterns.basepattern method)": [[323, "neural_compressor.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternninm method)": [[323, "neural_compressor.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.pruner.patterns.basepattern attribute)": [[323, "neural_compressor.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.pruner.patterns.basepattern method)": [[323, "neural_compressor.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.pruner.patterns.patternninm method)": [[323, "neural_compressor.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[323, "neural_compressor.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.pruner.patterns.basepattern method)": [[323, "neural_compressor.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.pruner.patterns.basepattern method)": [[323, "neural_compressor.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternninm method)": [[323, "neural_compressor.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.pruner.patterns.basepattern method)": [[323, "neural_compressor.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.pruner.patterns)": [[323, "neural_compressor.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.basepattern method)": [[323, "neural_compressor.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternninm method)": [[323, "neural_compressor.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.basepattern method)": [[323, "neural_compressor.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[323, "neural_compressor.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[323, "neural_compressor.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[323, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternninm method)": [[323, "neural_compressor.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.pruner.patterns.basepattern method)": [[323, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[323, "neural_compressor.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.pruner.patterns.basepattern attribute)": [[323, "neural_compressor.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[323, "neural_compressor.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[323, "neural_compressor.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[323, "neural_compressor.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.patterns.basepattern attribute)": [[323, "neural_compressor.pruner.patterns.BasePattern.modules"]], "neural_compressor.pruner.patterns": [[323, "module-neural_compressor.pruner.patterns"]], "pattern (neural_compressor.pruner.patterns.basepattern attribute)": [[323, "neural_compressor.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.pruner.patterns.patternninm method)": [[323, "neural_compressor.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.pruner.patterns.basepattern method)": [[323, "neural_compressor.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.pruner.patterns)": [[323, "neural_compressor.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternninm method)": [[323, "neural_compressor.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternninm method)": [[323, "neural_compressor.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.pruner.patterns.basepattern attribute)": [[323, "neural_compressor.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[323, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.pruner.patterns.basepattern method)": [[323, "neural_compressor.pruner.patterns.BasePattern.update_residual_cnt"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[324, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[325, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[326, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[327, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[328, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[329, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.pruner.pruner_legacy.pruner)": [[329, "neural_compressor.pruner.pruner_legacy.pruner.pruner_registry"]], "basepruner (class in neural_compressor.pruner.pruners)": [[330, "neural_compressor.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.pruner.pruners)": [[330, "neural_compressor.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.pruner.pruners)": [[330, "neural_compressor.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.pruner.pruners)": [[330, "neural_compressor.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[330, "neural_compressor.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.pruner.pruners.progressivepruner method)": [[330, "neural_compressor.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.pruner.pruners.basepruner attribute)": [[330, "neural_compressor.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.pruner.pruners.basicpruner attribute)": [[330, "neural_compressor.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[330, "neural_compressor.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.pruner.pruners.basepruner attribute)": [[330, "neural_compressor.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.pruner.pruners)": [[330, "neural_compressor.pruner.pruners.get_pruner"]], "global_step (neural_compressor.pruner.pruners.basepruner attribute)": [[330, "neural_compressor.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.pruner.pruners.basepruner attribute)": [[330, "neural_compressor.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.pruners.basepruner attribute)": [[330, "neural_compressor.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.pruners.basepruner attribute)": [[330, "neural_compressor.pruner.pruners.BasePruner.modules"]], "neural_compressor.pruner.pruners": [[330, "module-neural_compressor.pruner.pruners"]], "on_after_eval() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[330, "neural_compressor.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.patternlockpruner method)": [[330, "neural_compressor.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[330, "neural_compressor.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[330, "neural_compressor.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[330, "neural_compressor.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.pruners.progressivepruner method)": [[330, "neural_compressor.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.on_train_end"]], "parse_valid_pruner_types() (in module neural_compressor.pruner.pruners)": [[330, "neural_compressor.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.pruner.pruners.basepruner attribute)": [[330, "neural_compressor.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.pruner.pruners.basicpruner attribute)": [[330, "neural_compressor.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.pruner.pruners.progressivepruner method)": [[330, "neural_compressor.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.pruner.pruners.basepruner attribute)": [[330, "neural_compressor.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.pruner.pruners.basicpruner attribute)": [[330, "neural_compressor.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.pruner.pruners)": [[330, "neural_compressor.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.pruner.pruners.basepruner attribute)": [[330, "neural_compressor.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.pruner.pruners.basicpruner attribute)": [[330, "neural_compressor.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.pruner.pruners.basepruner attribute)": [[330, "neural_compressor.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.pruner.pruners.basicpruner method)": [[330, "neural_compressor.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.pruner.pruners.basepruner attribute)": [[330, "neural_compressor.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[330, "neural_compressor.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.pruner.pruners.basepruner method)": [[330, "neural_compressor.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.basicpruner method)": [[330, "neural_compressor.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.patternlockpruner method)": [[330, "neural_compressor.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.pruner.pruners.progressivepruner method)": [[330, "neural_compressor.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "pruning (class in neural_compressor.pruner.pruning)": [[331, "neural_compressor.pruner.pruning.Pruning"]], "config_file_path (neural_compressor.pruner.pruning.pruning attribute)": [[331, "neural_compressor.pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.pruner.pruning.pruning method)": [[331, "neural_compressor.pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.pruner.pruning.pruning attribute)": [[331, "neural_compressor.pruner.pruning.Pruning.model"]], "model (neural_compressor.pruner.pruning.pruning property)": [[331, "id0"]], "neural_compressor.pruner.pruning": [[331, "module-neural_compressor.pruner.pruning"]], "on_after_eval() (neural_compressor.pruner.pruning.pruning method)": [[331, "neural_compressor.pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[331, "neural_compressor.pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruning.pruning method)": [[331, "neural_compressor.pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[331, "neural_compressor.pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruning.pruning method)": [[331, "neural_compressor.pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruning.pruning method)": [[331, "neural_compressor.pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruning.pruning method)": [[331, "neural_compressor.pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruning.pruning method)": [[331, "neural_compressor.pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruning.pruning method)": [[331, "neural_compressor.pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruning.pruning method)": [[331, "neural_compressor.pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.pruner.pruning.pruning attribute)": [[331, "neural_compressor.pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.pruner.pruning.pruning attribute)": [[331, "neural_compressor.pruner.pruning.Pruning.pruners"]], "update_config() (neural_compressor.pruner.pruning.pruning method)": [[331, "neural_compressor.pruner.pruning.Pruning.update_config"]], "basereg (class in neural_compressor.pruner.regs)": [[332, "neural_compressor.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.pruner.regs)": [[332, "neural_compressor.pruner.regs.GroupLasso"]], "alpha (neural_compressor.pruner.regs.grouplasso attribute)": [[332, "neural_compressor.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.pruner.regs)": [[332, "neural_compressor.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.pruner.regs)": [[332, "neural_compressor.pruner.regs.get_reg_type"]], "neural_compressor.pruner.regs": [[332, "module-neural_compressor.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[332, "neural_compressor.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[332, "neural_compressor.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[332, "neural_compressor.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[332, "neural_compressor.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.pruner.regs.grouplasso attribute)": [[332, "neural_compressor.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.pruner.regs)": [[332, "neural_compressor.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.pruner.schedulers)": [[333, "neural_compressor.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.pruner.schedulers)": [[333, "neural_compressor.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.pruner.schedulers)": [[333, "neural_compressor.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.pruner.schedulers.pruningscheduler attribute)": [[333, "neural_compressor.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.pruner.schedulers)": [[333, "neural_compressor.pruner.schedulers.get_scheduler"]], "neural_compressor.pruner.schedulers": [[333, "module-neural_compressor.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.pruner.schedulers)": [[333, "neural_compressor.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.iterativescheduler method)": [[333, "neural_compressor.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.oneshotscheduler method)": [[333, "neural_compressor.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.pruningscheduler method)": [[333, "neural_compressor.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "check_config() (in module neural_compressor.pruner.utils)": [[334, "neural_compressor.pruner.utils.check_config"]], "neural_compressor.pruner.utils": [[334, "module-neural_compressor.pruner.utils"]], "parse_to_prune() (in module neural_compressor.pruner.utils)": [[334, "neural_compressor.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.pruner.utils)": [[334, "neural_compressor.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.pruner.utils)": [[334, "neural_compressor.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.pruner.utils)": [[334, "neural_compressor.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.pruner.utils)": [[334, "neural_compressor.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.pruner.utils)": [[334, "neural_compressor.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.pruner.utils)": [[334, "neural_compressor.pruner.utils.update_params"]], "fit() (in module neural_compressor.quantization)": [[335, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[335, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[336, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[336, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[336, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[336, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[337, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[337, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[337, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[338, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[338, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[338, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[338, "neural_compressor.strategy.bayesian.acq_max"]], "array_to_params() (neural_compressor.strategy.bayesian.targetspace method)": [[338, "neural_compressor.strategy.bayesian.TargetSpace.array_to_params"]], "bounds (neural_compressor.strategy.bayesian.targetspace property)": [[338, "neural_compressor.strategy.bayesian.TargetSpace.bounds"]], "dim (neural_compressor.strategy.bayesian.targetspace property)": [[338, "neural_compressor.strategy.bayesian.TargetSpace.dim"]], "empty (neural_compressor.strategy.bayesian.targetspace property)": [[338, "neural_compressor.strategy.bayesian.TargetSpace.empty"]], "gen_next_params() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[338, "neural_compressor.strategy.bayesian.BayesianOptimization.gen_next_params"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[338, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "keys (neural_compressor.strategy.bayesian.targetspace property)": [[338, "neural_compressor.strategy.bayesian.TargetSpace.keys"]], "max (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[338, "neural_compressor.strategy.bayesian.BayesianOptimization.max"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[338, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[338, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[338, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "params (neural_compressor.strategy.bayesian.targetspace property)": [[338, "neural_compressor.strategy.bayesian.TargetSpace.params"]], "params_to_array() (neural_compressor.strategy.bayesian.targetspace method)": [[338, "neural_compressor.strategy.bayesian.TargetSpace.params_to_array"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[338, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[338, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[338, "neural_compressor.strategy.bayesian.BayesianOptimization.res"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[338, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "space (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[338, "neural_compressor.strategy.bayesian.BayesianOptimization.space"]], "suggest() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[338, "neural_compressor.strategy.bayesian.BayesianOptimization.suggest"]], "target (neural_compressor.strategy.bayesian.targetspace property)": [[338, "neural_compressor.strategy.bayesian.TargetSpace.target"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[339, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[339, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[339, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[339, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[339, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[340, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[340, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[340, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[341, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[341, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[341, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[342, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[343, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[343, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "neural_compressor.strategy.mse": [[343, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[343, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[344, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[344, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[344, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[345, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[345, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[345, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[346, "neural_compressor.strategy.strategy.TuneStrategy"]], "deploy_config() (neural_compressor.strategy.strategy.tunestrategy method)": [[346, "neural_compressor.strategy.strategy.TuneStrategy.deploy_config"]], "evaluation_result (neural_compressor.strategy.strategy.tunestrategy property)": [[346, "neural_compressor.strategy.strategy.TuneStrategy.evaluation_result"]], "initial_best_acc() (neural_compressor.strategy.strategy.tunestrategy method)": [[346, "neural_compressor.strategy.strategy.TuneStrategy.initial_best_acc"]], "initial_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[346, "neural_compressor.strategy.strategy.TuneStrategy.initial_tuning_cfg"]], "neural_compressor.strategy.strategy": [[346, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[346, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "set_q_func() (neural_compressor.strategy.strategy.tunestrategy method)": [[346, "neural_compressor.strategy.strategy.TuneStrategy.set_q_func"]], "set_tuning_space() (neural_compressor.strategy.strategy.tunestrategy method)": [[346, "neural_compressor.strategy.strategy.TuneStrategy.set_tuning_space"]], "setup_resume() (neural_compressor.strategy.strategy.tunestrategy method)": [[346, "neural_compressor.strategy.strategy.TuneStrategy.setup_resume"]], "show_baseline_info() (neural_compressor.strategy.strategy.tunestrategy method)": [[346, "neural_compressor.strategy.strategy.TuneStrategy.show_baseline_info"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[346, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[346, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[346, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "update_best_op_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[346, "neural_compressor.strategy.strategy.TuneStrategy.update_best_op_tuning_cfg"]], "optuningconfig (class in neural_compressor.strategy.utils)": [[347, "neural_compressor.strategy.utils.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.optuningconfig class method)": [[347, "neural_compressor.strategy.utils.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.optuningconfig method)": [[347, "neural_compressor.strategy.utils.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils": [[347, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[348, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[349, "module-neural_compressor.strategy.utils.tuning_space"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[350, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig class method)": [[350, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig method)": [[350, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[350, "module-neural_compressor.strategy.utils.tuning_structs"]], "compressionmanager (class in neural_compressor.training)": [[351, "neural_compressor.training.CompressionManager"]], "export() (neural_compressor.training.compressionmanager method)": [[351, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[351, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[351, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[351, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[352, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[352, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[352, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[353, "module-neural_compressor.utils.constant"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[354, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[354, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "neural_compressor.utils.create_obj_from_config": [[354, "module-neural_compressor.utils.create_obj_from_config"]], "kl_divergence (class in neural_compressor.utils)": [[355, "neural_compressor.utils.KL_Divergence"]], "layerhistogramcollector (class in neural_compressor.utils)": [[355, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[355, "neural_compressor.utils.LayerHistogramCollector.collect"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence method)": [[355, "neural_compressor.utils.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence method)": [[355, "neural_compressor.utils.KL_Divergence.get_threshold"]], "neural_compressor.utils": [[355, "module-neural_compressor.utils"]], "safe_entropy() (neural_compressor.utils.kl_divergence method)": [[355, "neural_compressor.utils.KL_Divergence.safe_entropy"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[356, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[356, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[356, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[356, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[356, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "neural_compressor.utils.load_huggingface": [[357, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[358, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[359, "module-neural_compressor.utils.options"]], "load() (in module neural_compressor.utils.pytorch)": [[360, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[360, "module-neural_compressor.utils.pytorch"]], "lazyimport (class in neural_compressor.utils.utility)": [[361, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[361, "neural_compressor.utils.utility.MODE"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[361, "neural_compressor.utils.utility.combine_histogram"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[361, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[361, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[361, "neural_compressor.utils.utility.equal_dicts"]], "get_size() (in module neural_compressor.utils.utility)": [[361, "neural_compressor.utils.utility.get_size"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[361, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[361, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[361, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[361, "neural_compressor.utils.utility.recover"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[362, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[362, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[362, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[362, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[362, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[362, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[362, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[362, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[363, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[363, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[363, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[363, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[364, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[364, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[364, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[364, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[364, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[364, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[364, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[365, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[365, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[366, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[366, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[366, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[366, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[366, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[366, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[367, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[367, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[367, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[367, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[367, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[367, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[368, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[368, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[368, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[368, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[368, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[369, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[370, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[370, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[370, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[370, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[370, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[371, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[371, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[371, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[372, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[372, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[372, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_evaluation_config"]], "generate_pruning_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[372, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_pruning_config"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[372, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[373, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[373, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[373, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[373, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[373, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[373, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[374, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[374, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[374, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[374, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[374, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[374, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[374, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[374, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[374, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[374, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[374, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[374, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[375, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[375, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[376, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[376, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[376, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[377, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[378, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[378, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[378, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[378, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[378, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[378, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[378, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[378, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[378, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[378, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[378, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[378, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[378, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[378, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[379, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "generate_tree() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[379, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.generate_tree"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[379, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "parse() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[379, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse"]], "parse_entry() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[379, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse_entry"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[380, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[380, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[380, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[380, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[380, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[380, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[381, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[382, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[383, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[383, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[383, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[384, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[384, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[385, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[385, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[385, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[386, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[386, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[386, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[386, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[386, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[387, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[387, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[388, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[388, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[388, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[388, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[389, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[390, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[390, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[390, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[391, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[391, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[392, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_pruning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_pruning_details"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[393, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[394, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[394, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[394, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[395, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[396, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[397, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[397, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[398, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.build_info"]], "delete_pruning_details() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.delete_pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[398, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.update"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[399, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[399, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[399, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[400, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[400, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[401, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[401, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[402, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[402, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[403, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[404, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[404, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[404, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[404, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[404, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[404, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[405, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[405, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[405, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[407, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_tuning_details"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_pruning_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.load_pruning_details_config"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[408, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[409, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[409, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_tuning_details"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_pruning_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.load_pruning_details_config"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[412, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[412, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[413, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[413, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[413, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[413, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[413, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[413, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[414, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[414, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[415, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[415, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[415, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[415, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[416, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[416, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[416, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[416, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[416, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[416, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[416, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[416, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[416, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[417, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[417, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[417, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[418, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[419, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[420, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[420, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[420, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[421, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[421, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[421, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[421, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[421, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[421, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[422, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[422, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[422, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[423, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[424, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[424, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[424, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[425, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[425, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[426, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[427, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[427, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[428, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[428, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[428, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[429, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[429, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[429, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[429, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[430, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[430, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[430, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[430, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[430, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[430, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[430, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[430, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[430, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[431, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[431, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[431, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[431, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[432, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[433, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[433, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[433, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[434, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[435, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[435, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[435, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[436, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[436, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[436, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[437, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[438, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[439, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[440, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[441, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[442, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[442, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[443, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[443, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[444, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[445, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[445, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[445, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[445, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[445, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[445, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[445, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[445, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[445, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[445, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[445, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[445, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[445, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[445, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[445, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "supports_pruning (neural_compressor.ux.components.model.model.model property)": [[445, "neural_compressor.ux.components.model.model.Model.supports_pruning"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[446, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[446, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[447, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[448, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[448, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[448, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[448, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[448, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[448, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[448, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[448, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[448, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[448, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[448, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[448, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[449, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[450, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[450, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[450, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[450, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[450, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[451, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[451, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[451, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[451, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[451, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[451, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[451, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[452, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[452, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[452, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[453, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[453, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[453, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[453, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[454, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[455, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[455, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[455, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[455, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[455, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[456, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[456, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[456, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[456, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[456, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[456, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[457, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[457, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[457, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[457, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[457, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[457, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[457, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[457, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[457, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[457, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "supports_pruning (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[457, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.supports_pruning"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[458, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[458, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[458, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[459, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[459, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[460, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[460, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[461, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[461, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[462, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[462, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[462, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[462, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[462, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[462, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[462, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[462, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[462, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[463, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[464, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[464, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[464, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[464, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[464, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[464, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[464, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[465, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[466, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[466, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[466, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[466, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[466, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[466, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[466, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[466, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[467, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[467, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[467, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[467, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[467, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[467, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[467, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[468, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[468, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[468, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[469, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[469, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[469, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[469, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[469, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[469, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[469, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[470, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[471, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[471, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[471, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[471, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[471, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[472, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[472, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[473, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[474, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[474, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[474, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[474, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[474, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[474, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[474, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[475, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[475, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[475, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[475, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[475, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[476, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[477, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[477, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[478, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[478, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[478, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[478, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[478, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[478, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[478, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[478, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[478, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[478, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[478, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[478, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[478, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[478, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.pruning": [[479, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[480, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[480, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[480, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[481, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "configuration_data (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[481, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[481, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[481, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.generate_config"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[481, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "optimization_script (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[481, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[481, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.parameters"]], "neural_compressor.ux.components.optimization.tune": [[482, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[483, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[483, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[483, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[483, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[484, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[484, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[484, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[484, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[484, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[484, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[484, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[484, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[484, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[485, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[485, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[485, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[485, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[485, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[485, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[485, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[485, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[485, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[486, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[486, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[486, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[487, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[487, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[487, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[488, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[489, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[489, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[489, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[490, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[490, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[490, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[491, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[491, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[491, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[491, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[491, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[491, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[491, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[491, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[491, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[492, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[492, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[492, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[493, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[494, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[494, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[494, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[494, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[494, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[494, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[494, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[494, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[495, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[495, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[496, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[496, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[496, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[497, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[498, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[498, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[498, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[498, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[498, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[498, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[498, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[498, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[499, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[499, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[499, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[499, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[499, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[500, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[500, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[500, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[500, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[500, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[501, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[501, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[501, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[501, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[501, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[501, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[501, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[501, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[501, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[501, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[501, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[502, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[502, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[502, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[502, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[503, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[503, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[503, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[504, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[504, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[504, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[504, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[504, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[504, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[504, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[504, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[504, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[504, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[504, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[505, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[506, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[506, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[506, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[506, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[507, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[507, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[508, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[508, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[508, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[508, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[508, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[508, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[508, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[508, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[508, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[508, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[508, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[508, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[508, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[508, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[508, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[508, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[508, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[508, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[508, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[508, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[508, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[508, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[509, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[509, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[509, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[509, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[509, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[509, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[509, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[509, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[509, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[509, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[510, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[510, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[510, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[510, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[510, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[511, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[511, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[512, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[512, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[513, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[514, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[514, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[514, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[514, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[514, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[514, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[514, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[514, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[514, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[514, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[514, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[514, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[514, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[514, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[515, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[515, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[515, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[515, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[515, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[516, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[516, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[517, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[517, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[517, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[517, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[518, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[518, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[518, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[518, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[518, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[518, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[518, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[518, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[518, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[518, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[518, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[518, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[519, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[519, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[519, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[519, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[519, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[519, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[519, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "get_label_shift_value() (neural_compressor.ux.utils.workload.evaluation.postprocessschema static method)": [[519, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema.get_label_shift_value"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[519, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[519, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[519, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[519, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[519, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[520, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[520, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[520, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[521, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[522, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[522, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[522, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[523, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[523, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[523, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[523, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[523, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "initialize_pruners() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[524, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.initialize_pruners"]], "neural_compressor.ux.utils.workload.pruning": [[524, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[524, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[524, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "serialize() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach method)": [[524, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize"]], "serialize_pruner() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[524, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize_pruner"]], "set_postprocess_transforms() (neural_compressor.ux.utils.workload.pruning.train method)": [[524, "neural_compressor.ux.utils.workload.pruning.Train.set_postprocess_transforms"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[525, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[525, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[525, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[525, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[525, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[525, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[526, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[526, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[526, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[526, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[526, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[526, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[526, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[526, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[526, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[526, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[526, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[526, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[526, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[526, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[526, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[527, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[527, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[527, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[528, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[528, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[528, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[528, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[528, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[528, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[528, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[528, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[528, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[528, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[528, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[528, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[528, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[529, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[529, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[529, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[529, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[529, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[529, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[529, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[529, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[529, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[529, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[529, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[529, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[529, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[530, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[530, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[531, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[532, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[532, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[532, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[532, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[532, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[532, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[532, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[532, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[532, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[532, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[533, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[533, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[533, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[533, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[533, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[533, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[533, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[533, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[533, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[533, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[533, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[533, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[533, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[534, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[534, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[535, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[535, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[535, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[535, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[535, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[535, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[536, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[537, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[537, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[537, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[538, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[538, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[539, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[539, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[539, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[540, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[540, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[540, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[541, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[541, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[541, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[541, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[541, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[541, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[542, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[542, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[542, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[542, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[542, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[543, "module-neural_compressor.version"]]}})