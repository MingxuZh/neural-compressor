Search.setIndex({"docnames": ["CODE_OF_CONDUCT", "CONTRIBUTING", "FX", "NAS", "PTQ", "QAT", "SECURITY", "Welcome", "adaptor", "api-documentation/adaptor", "api-documentation/adaptor/onnxrt", "api-documentation/apis", "api-documentation/common", "api-documentation/common/benchmark", "api-documentation/common/bleu", "api-documentation/common/criterion", "api-documentation/common/data", "api-documentation/common/data/dataloader", "api-documentation/common/data/datasets", "api-documentation/common/data/transforms", "api-documentation/common/metric", "api-documentation/common/model", "api-documentation/common/optimizer", "api-documentation/component", "api-documentation/component/Distillation", "api-documentation/component/MixedPrecision", "api-documentation/component/Nas", "api-documentation/component/Pruning", "api-documentation/component/Quantization", "api-documentation/component/Scheduler", "api-documentation/pythonic", "api-documentation/strategy", "api-documentation/strategy/strategy", "autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruner/criteria/index", "autoapi/neural_compressor/pruner/index", "autoapi/neural_compressor/pruner/logger/index", "autoapi/neural_compressor/pruner/patterns/index", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/pruner/pruner_legacy/index", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index", "autoapi/neural_compressor/pruner/pruners/index", "autoapi/neural_compressor/pruner/pruning/index", "autoapi/neural_compressor/pruner/regs/index", "autoapi/neural_compressor/pruner/schedulers/index", "autoapi/neural_compressor/pruner/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "backend_quant", "bench", "benchmark", "dataloader", "dataset", "design", "distillation", "distillation_quantization", "distributed", "dynamic_quantization", "examples_readme", "export", "faq", "framework_yaml", "incompatible_changes", "index", "infrastructure", "installation_guide", "legal_information", "metric", "mixed_precision", "model", "objective", "orchestration", "platform_configuration", "pruning", "pruning_details", "publication_list", "pythonic_style", "quantization", "quantization_mixed_precision", "releases_info", "sigopt_strategy", "tensorboard", "transform", "tuning_strategies", "user_yaml", "validated_model_list"], "filenames": ["CODE_OF_CONDUCT.md", "CONTRIBUTING.md", "FX.md", "NAS.md", "PTQ.md", "QAT.md", "SECURITY.md", "Welcome.md", "adaptor.md", "api-documentation/adaptor.rst", "api-documentation/adaptor/onnxrt.rst", "api-documentation/apis.rst", "api-documentation/common.rst", "api-documentation/common/benchmark.rst", "api-documentation/common/bleu.rst", "api-documentation/common/criterion.rst", "api-documentation/common/data.rst", "api-documentation/common/data/dataloader.rst", "api-documentation/common/data/datasets.rst", "api-documentation/common/data/transforms.rst", "api-documentation/common/metric.rst", "api-documentation/common/model.rst", "api-documentation/common/optimizer.rst", "api-documentation/component.rst", "api-documentation/component/Distillation.rst", "api-documentation/component/MixedPrecision.rst", "api-documentation/component/Nas.rst", "api-documentation/component/Pruning.rst", "api-documentation/component/Quantization.rst", "api-documentation/component/Scheduler.rst", "api-documentation/pythonic.rst", "api-documentation/strategy.rst", "api-documentation/strategy/strategy.rst", "autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruner/criteria/index.rst", "autoapi/neural_compressor/pruner/index.rst", "autoapi/neural_compressor/pruner/logger/index.rst", "autoapi/neural_compressor/pruner/patterns/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/pruner/pruners/index.rst", "autoapi/neural_compressor/pruner/pruning/index.rst", "autoapi/neural_compressor/pruner/regs/index.rst", "autoapi/neural_compressor/pruner/schedulers/index.rst", "autoapi/neural_compressor/pruner/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "backend_quant.md", "bench.md", "benchmark.md", "dataloader.md", "dataset.md", "design.md", "distillation.md", "distillation_quantization.md", "distributed.md", "dynamic_quantization.md", "examples_readme.md", "export.md", "faq.md", "framework_yaml.md", "incompatible_changes.md", "index.rst", "infrastructure.md", "installation_guide.md", "legal_information.md", "metric.md", "mixed_precision.md", "model.md", "objective.md", "orchestration.md", "platform_configuration.md", "pruning.md", "pruning_details.md", "publication_list.md", "pythonic_style.md", "quantization.md", "quantization_mixed_precision.md", "releases_info.md", "sigopt_strategy.md", "tensorboard.md", "transform.md", "tuning_strategies.md", "user_yaml.md", "validated_model_list.md"], "titles": ["Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "PTQ", "Quantization-aware Training", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNXRT", "APIs", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Pythonic", "Strategy", "Strategies", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Quantization Support Matrix", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Dynamic Quantization", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Incompatible changes between v1.2 and v1.1", "Intel\u00ae Neural Compressor Documentation", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Introduction", "Full Publications/Events (49)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models"], "terms": {"In": [0, 2, 3, 4, 8, 38, 83, 138, 198, 226, 236, 259, 263, 281, 294, 296, 305, 324, 331, 333, 345, 546, 547, 548, 549, 551, 553, 564, 567, 568, 570, 571, 574, 575, 577, 578, 579, 580], "interest": [0, 7, 578], "foster": 0, "an": [0, 2, 3, 4, 5, 7, 8, 14, 38, 46, 70, 89, 94, 95, 97, 138, 162, 163, 178, 192, 197, 201, 205, 210, 216, 220, 225, 226, 230, 235, 239, 243, 248, 252, 259, 260, 263, 264, 265, 272, 279, 282, 283, 284, 300, 302, 305, 306, 307, 317, 324, 331, 334, 339, 426, 431, 507, 547, 548, 550, 554, 556, 564, 565, 567, 571, 572, 577, 578, 579, 580], "open": [0, 7, 220, 259, 510, 546, 556, 557, 572], "welcom": [0, 1, 560], "environ": [0, 217, 301, 465, 497, 498, 506, 530, 546, 580], "we": [0, 2, 4, 5, 7, 8, 14, 38, 71, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 97, 100, 101, 105, 107, 108, 109, 110, 111, 114, 117, 118, 127, 128, 131, 132, 133, 162, 163, 178, 198, 217, 219, 220, 236, 260, 263, 270, 281, 282, 302, 305, 342, 548, 553, 556, 558, 564, 567, 568, 570, 571, 573, 574, 577, 578, 580], "maintain": [0, 1, 7, 267, 309, 566, 570, 576], "make": [0, 1, 4, 8, 71, 162, 163, 178, 197, 235, 294, 296, 298, 324, 331, 334, 381, 414, 446, 546, 548, 558, 564, 574, 575, 577, 580], "particip": 0, "project": [0, 1, 216, 252, 281, 382, 385, 390, 392, 393, 396, 403, 404, 408, 409, 410, 411, 412, 413, 414, 438, 560, 572, 577, 580], "commun": [0, 301, 498, 532, 533, 534, 546], "harass": 0, "free": [0, 187, 188, 336, 564, 567, 577], "experi": [0, 577, 580], "everyon": 0, "regardless": [0, 263, 305], "ag": [0, 274], "bodi": 0, "size": [0, 4, 126, 189, 191, 192, 198, 201, 205, 207, 210, 212, 216, 227, 229, 230, 236, 239, 243, 245, 248, 249, 252, 263, 272, 275, 281, 294, 305, 317, 324, 362, 382, 392, 393, 515, 517, 518, 546, 547, 548, 549, 553, 557, 567, 570, 571, 579, 581, 582], "disabl": [0, 168, 505, 534], "ethnic": 0, "sex": [0, 181], "characterist": 0, "gender": 0, "ident": [0, 4, 101, 107, 133, 162, 294, 324, 551], "express": [0, 74, 260, 302], "level": [0, 4, 44, 47, 340, 347, 508, 530, 580], "educ": 0, "socio": 0, "econom": 0, "statu": [0, 133, 382, 393, 396, 401, 403, 409, 411, 412, 500, 513, 529, 542, 567], "nation": [0, 201, 239], "person": [0, 7, 181, 572], "appear": [0, 546], "race": 0, "religion": 0, "sexual": 0, "orient": 0, "exampl": [0, 1, 7, 46, 138, 170, 199, 200, 201, 212, 215, 216, 237, 238, 239, 249, 251, 252, 263, 264, 265, 267, 273, 297, 305, 306, 307, 309, 332, 352, 390, 408, 414, 438, 462, 463, 464, 465, 510, 517, 546, 549, 554, 559, 560, 561, 575, 576, 579, 580], "behavior": [0, 1, 8, 263, 305, 551, 558, 566, 578, 581], "contribut": [0, 7], "creat": [0, 3, 8, 33, 34, 35, 36, 38, 46, 74, 133, 145, 162, 189, 199, 201, 219, 220, 227, 237, 239, 253, 259, 263, 271, 272, 282, 283, 284, 300, 305, 317, 339, 347, 348, 351, 355, 381, 398, 408, 409, 413, 414, 495, 516, 529, 542, 549, 554, 566, 574, 577, 578, 580], "posit": [0, 133, 216, 252, 281, 324, 546, 564], "includ": [0, 1, 7, 8, 44, 199, 201, 205, 208, 209, 210, 213, 216, 218, 237, 239, 243, 246, 247, 248, 250, 252, 258, 259, 263, 268, 281, 294, 298, 299, 305, 321, 324, 333, 334, 347, 348, 351, 356, 357, 546, 549, 562, 563, 564, 570, 571, 574, 575, 578, 580], "us": [0, 1, 2, 3, 4, 5, 7, 8, 14, 39, 41, 44, 46, 47, 65, 71, 72, 74, 97, 136, 138, 139, 145, 170, 179, 180, 181, 187, 188, 197, 198, 199, 200, 201, 202, 203, 206, 210, 213, 215, 216, 217, 218, 223, 235, 236, 237, 238, 239, 240, 241, 244, 248, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 263, 267, 268, 269, 270, 273, 275, 281, 282, 284, 286, 289, 291, 294, 296, 297, 298, 299, 300, 301, 302, 303, 305, 309, 320, 321, 324, 330, 331, 334, 339, 341, 342, 344, 345, 346, 347, 353, 356, 357, 362, 409, 414, 419, 420, 424, 426, 438, 445, 447, 472, 476, 500, 517, 519, 529, 530, 546, 549, 551, 552, 553, 554, 556, 558, 559, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582], "inclus": 0, "languag": [0, 14, 260, 281, 302, 572], "Being": 0, "respect": [0, 552, 558, 570, 571, 581], "differ": [0, 2, 3, 4, 7, 14, 163, 175, 177, 178, 192, 201, 216, 218, 230, 239, 252, 258, 259, 260, 266, 267, 274, 282, 283, 285, 288, 294, 299, 300, 302, 308, 309, 324, 546, 548, 549, 551, 553, 555, 556, 559, 561, 564, 566, 567, 570, 574, 578, 579, 580], "viewpoint": 0, "gracefulli": 0, "accept": [0, 38, 546, 565], "construct": [0, 199, 202, 203, 206, 210, 213, 214, 219, 220, 221, 222, 224, 237, 240, 241, 244, 308, 309, 312, 314, 355, 547, 549, 553, 580], "critic": [0, 7], "focus": [0, 8], "what": [0, 179, 197, 235, 301, 331, 352, 546], "i": [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 14, 16, 23, 30, 31, 38, 39, 41, 44, 46, 47, 48, 71, 72, 74, 80, 81, 87, 89, 91, 97, 108, 112, 113, 119, 120, 121, 133, 138, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 168, 170, 174, 178, 179, 187, 188, 189, 190, 193, 197, 198, 199, 200, 201, 202, 203, 206, 208, 209, 210, 212, 216, 217, 219, 220, 223, 225, 226, 227, 235, 236, 237, 238, 239, 240, 241, 244, 246, 247, 248, 249, 252, 259, 260, 263, 265, 266, 267, 269, 272, 275, 279, 281, 284, 286, 291, 295, 296, 297, 300, 302, 305, 307, 308, 309, 317, 321, 324, 331, 332, 333, 335, 336, 339, 340, 345, 346, 347, 352, 361, 381, 414, 426, 446, 449, 451, 452, 454, 456, 457, 458, 459, 465, 503, 505, 507, 509, 510, 515, 517, 519, 525, 530, 532, 546, 547, 548, 549, 551, 553, 554, 556, 558, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581], "best": [0, 3, 5, 7, 72, 216, 252, 253, 258, 259, 270, 271, 282, 283, 299, 344, 347, 562, 567, 574, 579, 580], "show": [0, 4, 331, 546, 547, 551, 553, 570, 580], "empathi": 0, "toward": [0, 5, 551], "other": [0, 1, 2, 72, 94, 95, 97, 162, 198, 236, 265, 300, 307, 313, 318, 507, 511, 534, 546, 554, 558, 561, 563, 566, 567, 569, 570, 574, 579, 580, 582], "member": [0, 8, 259, 268], "unaccept": 0, "The": [0, 2, 3, 4, 5, 8, 9, 11, 12, 14, 16, 23, 30, 31, 39, 41, 44, 47, 65, 72, 74, 80, 97, 101, 119, 120, 121, 133, 136, 138, 142, 144, 168, 170, 174, 175, 177, 179, 180, 181, 187, 188, 189, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 213, 216, 218, 220, 221, 223, 226, 227, 237, 238, 239, 240, 241, 243, 245, 246, 247, 248, 250, 252, 253, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 281, 282, 283, 284, 285, 286, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 318, 320, 321, 324, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 351, 352, 353, 355, 356, 357, 361, 362, 382, 383, 385, 388, 392, 393, 396, 397, 399, 401, 402, 409, 414, 417, 419, 420, 421, 422, 423, 424, 425, 438, 445, 446, 498, 546, 547, 548, 549, 551, 552, 553, 554, 556, 558, 559, 561, 562, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581], "imageri": 0, "unwelcom": 0, "attent": [0, 40, 49, 61, 199, 237, 279, 281, 551], "advanc": [0, 7, 170, 526, 548, 574, 581], "troll": 0, "insult": 0, "derogatori": 0, "comment": [0, 549, 564, 579], "polit": 0, "attack": 0, "public": [0, 133], "privat": [0, 259, 268], "publish": [0, 563, 565], "inform": [0, 1, 6, 7, 8, 9, 11, 12, 16, 23, 30, 31, 46, 74, 136, 170, 187, 188, 219, 220, 221, 222, 263, 294, 296, 297, 298, 300, 305, 308, 309, 312, 314, 321, 324, 331, 332, 333, 334, 347, 379, 417, 446, 504, 505, 510, 511, 551, 554, 556, 558, 560, 566, 570, 571, 575, 576, 578, 581, 582], "physic": [0, 217], "electron": 0, "address": [0, 201, 239, 534, 546, 565, 572], "without": [0, 133, 168, 216, 252, 263, 296, 305, 331, 517, 546, 548, 551, 553, 564, 570, 572, 573, 574, 580], "explicit": [0, 162], "permiss": 0, "which": [0, 2, 3, 5, 7, 8, 14, 41, 46, 47, 72, 74, 82, 133, 138, 162, 187, 199, 200, 201, 212, 217, 237, 238, 239, 249, 259, 260, 263, 265, 273, 275, 283, 284, 286, 287, 288, 289, 294, 295, 296, 297, 298, 302, 305, 307, 314, 317, 321, 324, 331, 334, 337, 339, 347, 515, 546, 547, 548, 549, 551, 553, 554, 558, 561, 564, 565, 566, 568, 570, 571, 573, 574, 575, 576, 578, 579, 580, 581], "could": [0, 2, 74, 187, 188, 201, 239, 300, 324, 332, 336, 347, 552, 568, 570, 571, 574], "reason": [0, 108, 219, 220, 548, 578, 580], "consid": [0, 168, 267, 309, 548, 551, 580], "inappropri": 0, "profession": 0, "set": [0, 3, 4, 5, 7, 39, 41, 44, 46, 47, 48, 72, 73, 74, 124, 133, 138, 162, 168, 175, 177, 179, 181, 187, 188, 189, 191, 199, 201, 204, 216, 217, 223, 227, 229, 237, 239, 242, 252, 253, 256, 258, 259, 263, 268, 269, 270, 272, 279, 281, 282, 286, 291, 295, 300, 301, 305, 317, 318, 320, 324, 331, 335, 336, 347, 364, 404, 405, 406, 409, 426, 472, 476, 484, 505, 509, 515, 516, 518, 519, 520, 525, 529, 530, 534, 546, 547, 548, 549, 553, 558, 559, 561, 564, 565, 573, 574, 577, 580, 581], "ar": [0, 1, 2, 3, 4, 5, 7, 8, 14, 39, 41, 48, 72, 89, 101, 145, 155, 184, 199, 216, 226, 237, 252, 259, 260, 263, 267, 273, 275, 279, 281, 284, 286, 291, 294, 295, 296, 297, 300, 301, 302, 305, 309, 324, 331, 332, 337, 339, 355, 361, 362, 446, 449, 451, 458, 502, 511, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 558, 559, 561, 563, 564, 565, 567, 568, 569, 570, 571, 574, 575, 576, 577, 578, 579, 580, 581], "clarifi": 0, "expect": [0, 1, 74, 145, 201, 239, 339, 365, 487, 510, 557, 574, 580], "take": [0, 2, 3, 39, 41, 74, 187, 188, 192, 216, 220, 221, 230, 252, 294, 308, 309, 324, 336, 339, 548, 551, 558, 570, 574, 575, 579, 580, 581], "appropri": 0, "fair": 0, "correct": [0, 4, 163, 178, 263, 264, 265, 267, 295, 305, 306, 307, 309, 335, 467, 546], "action": 0, "ani": [0, 1, 97, 145, 162, 170, 253, 259, 263, 265, 281, 305, 307, 364, 365, 367, 369, 371, 372, 373, 374, 375, 376, 377, 379, 380, 382, 383, 385, 392, 393, 394, 395, 396, 397, 399, 402, 404, 405, 415, 417, 422, 423, 426, 428, 434, 443, 446, 449, 453, 456, 457, 458, 460, 463, 465, 468, 472, 476, 478, 481, 484, 487, 490, 495, 496, 502, 503, 505, 507, 509, 510, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 533, 534, 541, 542, 546, 548, 553, 577], "instanc": [0, 2, 8, 136, 138, 139, 145, 187, 188, 199, 217, 237, 259, 264, 265, 267, 270, 282, 283, 306, 307, 309, 336, 339, 347, 352, 382, 421, 425, 449, 458, 525, 546, 581, 582], "have": [0, 1, 4, 14, 101, 133, 168, 197, 215, 219, 220, 235, 251, 260, 263, 267, 274, 294, 296, 302, 305, 309, 324, 331, 546, 548, 553, 558, 563, 564, 565, 567, 570, 571, 574, 580], "right": [0, 2, 212, 249, 263, 305, 515, 546, 548, 579], "remov": [0, 1, 4, 50, 70, 71, 74, 89, 101, 112, 124, 126, 133, 138, 155, 162, 218, 256, 265, 307, 382, 385, 392, 393, 396, 398, 399, 401, 403, 449, 510, 511, 518, 547, 570, 571, 578], "edit": [0, 403, 409, 411, 412, 415], "reject": 0, "commit": [0, 1], "wiki": 0, "issu": [0, 1, 6, 546, 562, 574, 578], "align": [0, 216, 252, 297, 579], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 14, 38, 41, 70, 72, 74, 83, 84, 85, 86, 87, 88, 89, 90, 100, 105, 107, 108, 109, 110, 111, 113, 114, 117, 118, 127, 128, 131, 132, 133, 138, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 170, 174, 178, 187, 188, 198, 199, 200, 201, 202, 203, 204, 206, 215, 216, 219, 220, 225, 226, 236, 237, 238, 239, 240, 241, 242, 244, 251, 252, 259, 260, 263, 264, 265, 267, 272, 277, 278, 285, 286, 291, 294, 296, 297, 298, 299, 300, 302, 305, 306, 307, 309, 320, 324, 331, 332, 333, 334, 336, 339, 344, 361, 362, 545, 546, 547, 548, 549, 551, 553, 554, 558, 561, 563, 564, 565, 566, 570, 571, 574, 575, 576, 577, 578, 579, 580], "ban": 0, "temporarili": 0, "perman": 0, "thei": [0, 145, 179, 217, 259, 281, 301, 324, 547, 551, 558, 564, 567, 570, 571], "deem": 0, "threaten": 0, "offens": 0, "harm": 0, "appli": [0, 5, 136, 151, 226, 259, 261, 294, 296, 303, 324, 331, 546, 568, 570, 571, 574, 575, 577, 580, 581], "both": [0, 3, 5, 8, 48, 168, 281, 283, 285, 548, 552, 573, 574, 580], "within": [0, 2, 258, 259, 263, 299, 305, 318, 331, 339, 565, 572], "space": [0, 1, 3, 8, 179, 187, 188, 258, 259, 265, 270, 272, 274, 282, 283, 284, 285, 299, 301, 307, 331, 336, 337, 339, 340, 341, 342, 344, 346, 347, 350, 517, 548, 570, 574, 581], "when": [0, 3, 5, 14, 71, 80, 91, 97, 145, 168, 199, 200, 208, 209, 210, 216, 237, 238, 246, 247, 248, 252, 260, 261, 273, 281, 294, 295, 296, 302, 303, 324, 331, 335, 515, 517, 530, 534, 546, 548, 549, 554, 570, 571, 574, 579, 580], "individu": [0, 97, 271, 272, 282, 294, 324], "repres": [0, 71, 201, 206, 239, 244, 263, 265, 267, 305, 307, 309, 324, 331, 332, 333, 334, 335, 384, 386, 387, 389, 391, 394, 395, 398, 400, 515, 549, 556, 574, 580], "its": [0, 71, 74, 124, 133, 136, 145, 170, 195, 201, 215, 216, 233, 239, 251, 252, 254, 255, 261, 262, 266, 267, 296, 300, 303, 304, 308, 309, 324, 331, 339, 340, 344, 546, 548, 551, 563, 564, 565, 569, 570, 571, 577, 579, 580], "offici": [0, 168, 260, 264, 265, 302, 306, 307, 546, 564], "e": [0, 44, 47, 73, 97, 272, 274, 300, 324, 507, 509, 534, 551, 580], "mail": 0, "post": [0, 4, 5, 8, 39, 44, 47, 187, 188, 216, 226, 252, 256, 259, 300, 336, 529, 552, 553, 556, 561, 562, 568, 578, 580], "via": [0, 145, 258, 259, 286, 291, 299, 534, 553, 561], "social": 0, "media": 0, "account": [0, 272, 577, 580], "act": [0, 197, 235], "appoint": 0, "onlin": [0, 7, 38, 577], "offlin": [0, 38, 362, 574], "event": [0, 578], "represent": [0, 2, 71, 83, 272, 382, 383, 385, 388, 392, 393, 396, 397, 399, 401, 402, 528, 552, 567, 571, 574], "mai": [0, 1, 133, 162, 168, 320, 548, 557, 563, 565, 569, 572, 574, 580], "further": [0, 97, 565, 566], "defin": [0, 3, 4, 5, 8, 41, 44, 47, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 100, 105, 107, 108, 109, 110, 111, 114, 117, 118, 120, 127, 128, 131, 132, 133, 162, 187, 188, 218, 259, 270, 271, 274, 282, 283, 284, 285, 286, 291, 294, 295, 296, 297, 298, 324, 331, 332, 333, 334, 336, 339, 361, 362, 440, 441, 442, 529, 546, 549, 551, 558, 561, 564, 567, 568, 570, 571, 574, 577, 578, 580, 581], "abus": 0, "otherwis": [0, 188, 201, 216, 239, 252, 347, 549, 573, 579], "report": [0, 1, 546, 577], "contact": [0, 576, 577], "inc": [0, 5, 7, 72, 216, 252, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 525, 572, 573, 576], "intel": [0, 1, 3, 6, 8, 72, 220, 223, 254, 259, 266, 267, 294, 297, 308, 309, 324, 332, 343, 348, 497, 510, 550, 551, 552, 555, 556, 558, 562, 563, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 578, 580, 581], "com": [0, 4, 7, 170, 199, 237, 260, 261, 264, 265, 294, 297, 302, 303, 306, 307, 324, 332, 510, 546, 549, 562, 563, 576, 577, 582], "all": [0, 4, 5, 7, 8, 39, 41, 46, 47, 48, 65, 72, 74, 87, 90, 112, 113, 125, 145, 175, 177, 189, 190, 193, 197, 201, 205, 208, 209, 210, 213, 216, 217, 218, 223, 226, 227, 235, 239, 243, 246, 247, 248, 250, 252, 256, 259, 260, 263, 265, 266, 267, 277, 278, 279, 281, 284, 286, 287, 288, 289, 290, 291, 294, 297, 300, 302, 305, 307, 308, 309, 311, 312, 317, 319, 320, 324, 330, 331, 332, 337, 339, 340, 341, 347, 356, 357, 366, 378, 381, 390, 407, 409, 414, 419, 420, 433, 435, 438, 439, 445, 446, 449, 451, 458, 464, 471, 473, 477, 478, 480, 483, 489, 494, 498, 507, 511, 534, 546, 548, 549, 553, 558, 562, 568, 569, 570, 571, 572, 574, 575, 579, 580], "complaint": 0, "review": [0, 1], "investig": 0, "result": [0, 3, 4, 14, 39, 41, 44, 47, 71, 72, 74, 168, 187, 212, 216, 217, 218, 249, 252, 259, 260, 263, 264, 265, 266, 267, 272, 274, 283, 302, 305, 306, 307, 308, 309, 320, 342, 347, 363, 365, 382, 383, 396, 397, 399, 403, 409, 412, 415, 492, 533, 536, 546, 547, 548, 551, 553, 554, 561, 563, 564, 567, 570, 571, 572, 574, 577, 578, 579, 580, 582], "necessari": [0, 3, 71, 253, 259, 566, 577, 580], "circumst": [0, 573], "team": [0, 265, 307, 575], "oblig": 0, "confidenti": [0, 546], "regard": [0, 575], "incid": 0, "detail": [0, 1, 7, 41, 74, 216, 252, 279, 382, 385, 392, 393, 396, 398, 399, 401, 403, 404, 406, 409, 410, 411, 412, 413, 417, 422, 485, 490, 504, 517, 558, 559, 564, 565, 570, 571, 576, 577, 578, 580, 582], "specif": [0, 3, 4, 8, 41, 44, 47, 72, 73, 74, 138, 139, 190, 193, 199, 200, 201, 202, 206, 208, 209, 210, 217, 223, 237, 238, 239, 240, 244, 246, 247, 248, 259, 260, 263, 269, 270, 281, 282, 283, 302, 305, 319, 335, 393, 404, 405, 406, 409, 417, 432, 546, 551, 554, 558, 559, 564, 565, 566, 567, 573, 580, 581], "polici": [0, 7, 344, 569, 581], "separ": [0, 215, 251, 533, 546, 559, 563, 568, 573], "who": [0, 340, 580], "do": [0, 14, 39, 41, 44, 47, 50, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 72, 198, 199, 236, 237, 253, 254, 256, 259, 260, 263, 297, 300, 302, 305, 332, 340, 361, 546, 549, 553, 558, 561, 564, 567, 575, 576, 580], "follow": [0, 1, 2, 3, 4, 5, 8, 11, 48, 97, 113, 116, 119, 120, 121, 122, 133, 201, 239, 259, 260, 263, 281, 286, 291, 302, 305, 337, 545, 546, 547, 549, 551, 553, 554, 556, 558, 562, 563, 564, 566, 568, 570, 571, 573, 574, 578, 580], "good": [0, 554, 574, 580], "faith": 0, "face": [0, 572, 576], "temporari": 0, "repercuss": 0, "determin": [0, 2, 4, 321, 324, 331, 530, 554, 571], "": [0, 3, 4, 44, 71, 73, 83, 89, 97, 133, 145, 162, 163, 178, 180, 181, 184, 189, 198, 201, 215, 216, 217, 219, 220, 221, 227, 236, 239, 251, 252, 259, 265, 273, 275, 281, 294, 296, 297, 301, 307, 308, 309, 314, 324, 331, 336, 340, 347, 356, 357, 415, 446, 502, 503, 547, 551, 553, 554, 558, 561, 562, 565, 568, 569, 570, 571, 572, 573, 574, 576, 577, 581], "leadership": 0, "adapt": [0, 41, 44, 47, 72, 73, 74], "from": [0, 2, 3, 4, 5, 7, 8, 14, 39, 41, 44, 46, 48, 71, 72, 74, 88, 94, 95, 97, 133, 136, 138, 145, 155, 162, 168, 187, 188, 189, 192, 196, 199, 200, 201, 202, 203, 204, 206, 211, 212, 218, 219, 220, 226, 227, 230, 234, 237, 238, 239, 240, 241, 242, 244, 249, 253, 255, 256, 257, 259, 260, 263, 264, 265, 269, 272, 273, 274, 275, 279, 281, 284, 286, 291, 294, 295, 296, 297, 298, 300, 302, 305, 306, 307, 318, 320, 321, 324, 331, 332, 333, 334, 335, 339, 346, 347, 348, 351, 355, 361, 362, 380, 382, 385, 386, 387, 389, 392, 393, 394, 395, 396, 398, 399, 401, 403, 404, 406, 409, 410, 411, 412, 413, 415, 426, 431, 449, 452, 461, 462, 463, 465, 490, 495, 509, 510, 515, 517, 518, 519, 525, 534, 536, 541, 542, 547, 548, 549, 551, 552, 553, 555, 556, 557, 561, 564, 565, 566, 567, 568, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580], "version": [0, 2, 7, 8, 41, 44, 46, 47, 70, 73, 74, 80, 187, 254, 256, 281, 339, 465, 500, 505, 517, 546, 558, 562, 563, 569, 572, 580], "1": [0, 2, 4, 5, 7, 8, 39, 41, 44, 47, 70, 71, 72, 74, 81, 101, 117, 136, 138, 166, 168, 176, 178, 184, 189, 191, 194, 195, 196, 198, 199, 200, 202, 203, 206, 207, 212, 216, 217, 218, 219, 220, 227, 229, 232, 233, 234, 236, 237, 238, 240, 241, 244, 245, 249, 252, 258, 259, 263, 264, 265, 267, 272, 275, 279, 281, 286, 291, 294, 296, 299, 300, 301, 305, 306, 307, 309, 324, 331, 336, 337, 345, 355, 365, 487, 495, 545, 547, 548, 549, 551, 554, 556, 558, 564, 565, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 580, 581], "4": [0, 4, 7, 8, 14, 74, 80, 208, 209, 210, 211, 212, 213, 216, 246, 247, 248, 249, 250, 252, 260, 261, 263, 302, 303, 305, 324, 340, 507, 546, 547, 548, 553, 557, 558, 561, 562, 564, 569, 570, 579, 580, 582], "For": [0, 2, 4, 5, 6, 8, 138, 201, 215, 216, 226, 239, 251, 252, 259, 263, 264, 265, 267, 272, 294, 297, 305, 306, 307, 309, 324, 332, 336, 340, 507, 546, 552, 553, 556, 558, 561, 570, 575, 578, 580, 581, 582], "answer": [0, 216, 252, 264, 265, 306, 307, 579, 582], "common": [0, 5, 11, 214, 259, 269, 275, 283, 284, 285, 294, 300, 301, 324, 355, 510, 511, 517, 547, 548, 549, 551, 553, 556, 559, 562, 566, 570, 574], "question": [0, 1, 8, 216, 252, 264, 265, 306, 307, 562, 579, 582], "about": [0, 321, 417, 446, 502, 504, 505, 510, 511, 546, 548, 554, 575, 582], "see": [0, 2, 4, 6, 216, 252, 260, 263, 279, 302, 305, 546, 563, 570, 578, 580, 582], "faq": [0, 7], "page": [0, 1], "If": [1, 2, 89, 94, 95, 97, 101, 108, 133, 187, 188, 201, 216, 239, 252, 263, 275, 294, 295, 296, 305, 336, 337, 546, 549, 553, 556, 562, 563, 564, 565, 567, 568, 574, 577, 578, 579, 580], "you": [1, 2, 5, 7, 197, 199, 235, 237, 263, 279, 281, 296, 305, 546, 547, 548, 549, 553, 556, 562, 563, 564, 576, 577, 578], "improv": [1, 4, 331, 339, 570, 571, 574, 575, 580, 582], "neural": [1, 8, 23, 46, 72, 170, 211, 212, 213, 216, 217, 220, 223, 226, 249, 250, 252, 254, 259, 266, 267, 269, 286, 291, 294, 297, 299, 300, 308, 309, 314, 324, 332, 342, 343, 348, 421, 425, 449, 458, 497, 504, 517, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 572, 574, 576, 578, 579, 580, 581], "compressor": [1, 3, 8, 46, 72, 211, 212, 213, 216, 217, 220, 223, 226, 249, 250, 252, 254, 259, 266, 267, 269, 294, 297, 299, 300, 308, 309, 314, 324, 332, 343, 348, 421, 425, 449, 458, 497, 504, 517, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 570, 572, 574, 576, 578, 579, 580, 581], "send": [1, 7, 486, 529, 534], "your": [1, 7, 197, 199, 235, 237, 263, 305, 546, 547, 549, 553, 556, 563, 577, 578, 580], "new": [1, 46, 83, 133, 155, 168, 189, 201, 210, 213, 216, 217, 227, 239, 248, 250, 252, 281, 294, 295, 298, 300, 317, 324, 334, 362, 408, 409, 413, 529, 547, 553, 565, 572, 574, 576, 577, 579, 581], "github": [1, 4, 7, 170, 199, 237, 260, 261, 264, 265, 294, 297, 302, 303, 306, 307, 324, 332, 461, 463, 504, 546, 549, 555, 562, 563, 576], "view": [1, 4, 7, 546, 555, 576], "how": [1, 2, 4, 6, 8, 216, 252, 253, 259, 274, 275, 294, 321, 324, 331, 546, 547, 549, 551, 553, 559, 570, 571, 574, 579, 580, 581], "To": [1, 71, 263, 289, 294, 298, 305, 324, 334, 507, 546, 553, 556, 565, 573, 575, 576, 580, 581], "befor": [1, 130, 145, 199, 226, 237, 253, 254, 256, 259, 286, 291, 294, 296, 297, 298, 324, 331, 332, 333, 334, 344, 403, 546, 548, 549, 551, 553, 557, 558, 567, 570, 574, 577, 578, 580], "below": [1, 2, 5, 8, 81, 93, 101, 300, 338, 340, 345, 545, 551, 553, 559, 564, 567, 568, 570, 573, 574, 577, 578, 580], "chang": [1, 4, 108, 124, 163, 178, 296, 298, 331, 334, 339, 342, 362, 377, 383, 486, 508, 515, 548, 553, 557, 564, 571, 578, 579, 580], "consist": [1, 2, 82, 90, 281, 546, 556, 580], "python": [1, 2, 11, 102, 145, 168, 201, 220, 239, 259, 263, 305, 362, 465, 546, 549, 553, 562, 572, 575, 579], "style": [1, 89, 192, 206, 230, 244, 549, 559], "pylint": 1, "check": [1, 4, 5, 7, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 89, 90, 133, 138, 145, 168, 174, 188, 201, 239, 255, 259, 269, 295, 300, 324, 331, 335, 339, 340, 347, 362, 404, 409, 446, 449, 451, 452, 454, 456, 457, 458, 459, 465, 468, 486, 502, 503, 505, 510, 517, 519, 546, 553, 562], "flake8": 1, "autopep8": 1, "clean": [1, 215, 218, 251, 382, 393, 396, 403, 404, 409, 411, 412, 413, 500, 516], "add": [1, 2, 4, 14, 48, 70, 71, 79, 91, 133, 138, 142, 151, 168, 199, 201, 223, 237, 239, 259, 260, 267, 281, 286, 291, 295, 297, 300, 302, 309, 332, 335, 340, 375, 382, 383, 385, 392, 393, 394, 395, 396, 397, 399, 401, 402, 403, 404, 408, 409, 410, 411, 412, 413, 415, 431, 517, 542, 546, 549, 553, 556, 558, 564, 567, 577, 578, 580], "unit": [1, 294, 324, 509, 517], "test": [1, 7, 48, 216, 252, 272, 546, 562, 582], "cover": [1, 559, 572], "would": [1, 4, 133, 324, 565, 571, 574], "like": [1, 2, 3, 8, 39, 41, 44, 47, 72, 74, 101, 124, 126, 133, 162, 168, 187, 188, 189, 201, 205, 210, 227, 239, 243, 248, 258, 259, 267, 273, 296, 299, 300, 309, 311, 312, 313, 317, 318, 319, 324, 336, 352, 546, 551, 554, 561, 568, 570, 574, 580], "run": [1, 5, 7, 8, 38, 39, 41, 44, 46, 48, 72, 133, 168, 187, 188, 198, 215, 217, 236, 251, 259, 272, 275, 295, 296, 331, 335, 336, 339, 340, 464, 510, 532, 533, 534, 546, 553, 557, 558, 565, 570, 572, 574, 576, 577, 578, 580, 581], "ha": [1, 3, 8, 14, 39, 41, 44, 47, 72, 74, 89, 90, 94, 95, 97, 101, 120, 133, 145, 162, 217, 259, 260, 274, 294, 296, 302, 324, 331, 546, 548, 556, 561, 565, 571, 573, 574, 575, 577, 580], "adopt": 1, "develop": [1, 2, 170, 517, 562, 565, 572, 574, 575, 577], "certif": [1, 546], "origin": [1, 4, 71, 72, 174, 175, 177, 199, 216, 217, 237, 252, 259, 272, 281, 286, 291, 294, 295, 296, 297, 324, 331, 332, 335, 340, 344, 365, 549, 570, 571, 574, 579, 580, 581], "must": [1, 2, 216, 252, 263, 267, 305, 309, 562, 579], "agre": 1, "term": [1, 253, 259, 331, 333, 551, 563, 564, 567, 568, 580], "sign": [1, 546, 574, 577], "off": [1, 4, 94, 95, 97, 575], "each": [1, 4, 5, 8, 41, 44, 47, 48, 72, 73, 74, 79, 80, 81, 82, 85, 86, 91, 92, 93, 96, 98, 99, 100, 102, 104, 105, 107, 109, 110, 111, 114, 116, 117, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 138, 163, 167, 170, 197, 201, 204, 212, 216, 235, 239, 242, 249, 252, 261, 263, 264, 265, 274, 275, 281, 296, 303, 305, 306, 307, 318, 319, 320, 324, 331, 344, 356, 357, 546, 548, 549, 551, 554, 558, 567, 568, 570, 571, 577, 578, 579, 580], "random": [1, 3, 82, 162, 168, 212, 216, 249, 252, 272, 285, 301, 339, 343, 527, 554, 573, 579, 581], "j": [1, 534], "org": [1, 2, 7, 263, 281, 296, 305, 321, 546, 562], "type": [1, 4, 8, 14, 39, 41, 44, 46, 47, 48, 71, 72, 73, 74, 84, 87, 88, 89, 90, 97, 101, 112, 113, 119, 120, 121, 124, 133, 136, 138, 139, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161, 162, 168, 170, 174, 175, 177, 181, 188, 189, 197, 199, 201, 205, 208, 209, 210, 213, 216, 218, 223, 227, 235, 237, 239, 243, 246, 247, 248, 250, 252, 254, 256, 257, 259, 260, 261, 263, 266, 267, 269, 272, 274, 281, 284, 287, 288, 289, 294, 296, 298, 300, 302, 303, 305, 308, 309, 311, 312, 313, 317, 318, 319, 320, 324, 330, 331, 333, 334, 335, 337, 338, 339, 340, 344, 347, 348, 351, 352, 355, 361, 375, 380, 394, 395, 404, 405, 407, 409, 447, 502, 505, 507, 509, 512, 513, 546, 549, 553, 558, 561, 565, 570, 574, 577, 579, 580, 581], "featur": [1, 4, 133, 184, 199, 200, 212, 216, 218, 237, 238, 249, 252, 281, 301, 547, 548, 550, 551, 565, 566, 572, 576, 579], "bug": 1, "fix": [1, 199, 237, 296, 331, 549, 571, 580], "document": [1, 216, 252, 545, 553, 554, 565, 576, 579], "valid": [1, 3, 8, 39, 41, 44, 72, 73, 74, 81, 133, 162, 201, 239, 263, 275, 295, 296, 305, 318, 324, 331, 335, 465, 534, 549, 551, 558, 561, 563, 570, 571, 574, 576], "api": [1, 2, 5, 9, 12, 16, 30, 31, 46, 47, 72, 97, 102, 133, 145, 258, 259, 263, 297, 299, 305, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 533, 534, 548, 556, 560, 561, 576, 577, 580], "descript": [1, 2, 46, 133, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161, 162, 256, 257, 263, 283, 305], "jira": 1, "ticket": 1, "xxx": [1, 201, 239, 549, 551], "potenti": [1, 3], "risk": 1, "trigger": [1, 217, 259, 296, 331], "pr": [1, 564], "been": [1, 3, 14, 90, 215, 251, 260, 274, 294, 296, 302, 324, 331, 546, 551, 565], "reproduc": 1, "hardwar": [1, 8, 44, 73, 505, 551, 561, 565, 569, 570, 571, 572, 573], "depend": [1, 39, 41, 46, 74, 89, 187, 188, 217, 259, 270, 282, 283, 336, 557, 558, 573, 580], "librari": [1, 7, 220, 259, 545, 562, 572], "introduc": [1, 8, 101, 556, 558, 570, 571, 574, 576, 580], "submit": 1, "also": [1, 3, 4, 7, 8, 14, 198, 201, 205, 210, 216, 236, 239, 243, 248, 252, 260, 302, 324, 336, 345, 546, 547, 548, 551, 561, 564, 567, 568, 570, 574, 575, 580], "reach": [1, 188, 294, 298, 324, 334, 347, 570, 571, 580], "out": [1, 2, 7, 162, 199, 200, 201, 237, 238, 239, 258, 259, 281, 294, 299, 317, 324, 549, 573, 574], "intend": 1, "safe": [1, 145, 356, 357], "collabor": 1, "adher": 1, "3": [2, 3, 4, 5, 7, 73, 74, 97, 138, 168, 201, 205, 210, 213, 216, 239, 243, 248, 250, 252, 263, 275, 305, 507, 546, 549, 551, 553, 556, 558, 564, 565, 567, 570, 573, 574, 577, 579, 580, 582], "2": [2, 4, 5, 7, 8, 11, 71, 73, 74, 80, 101, 176, 200, 217, 238, 263, 265, 267, 275, 289, 290, 296, 305, 307, 309, 324, 331, 337, 339, 345, 545, 549, 551, 558, 561, 563, 564, 565, 567, 568, 569, 570, 574, 576, 577, 579, 580], "pytorch": [2, 3, 7, 8, 198, 199, 201, 204, 205, 208, 209, 210, 213, 216, 218, 223, 225, 236, 237, 239, 242, 243, 246, 247, 248, 250, 252, 254, 256, 257, 258, 259, 266, 267, 268, 292, 294, 297, 299, 308, 309, 319, 324, 332, 336, 345, 365, 438, 445, 468, 478, 498, 551, 554, 555, 556, 558, 561, 562, 565, 566, 570, 572, 573, 574, 576, 580, 581], "toolkit": [2, 7, 562, 572], "transform": [2, 3, 7, 16, 34, 47, 71, 77, 89, 117, 118, 120, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161, 163, 166, 167, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 259, 278, 280, 281, 301, 375, 379, 385, 390, 404, 407, 409, 414, 416, 438, 517, 518, 519, 520, 525, 547, 548, 549, 551, 552, 553, 570, 572, 575, 578, 581], "nn": [2, 4, 5, 174, 218, 254, 256, 275, 279, 281, 336, 556, 566, 570, 578], "modul": [2, 4, 5, 254, 259, 276, 277, 278, 282, 292, 293, 323, 506, 514, 522, 546, 547, 551, 556, 561, 564, 566, 573, 575, 578], "three": [2, 8, 101, 199, 237, 259, 286, 291, 297, 332, 546, 548, 556, 562, 565, 568, 574, 575, 577, 578, 580], "main": [2, 4, 7, 187, 223, 297, 332, 347, 497, 534, 553, 574], "compon": [2, 7, 11, 253, 259, 270, 282, 286, 291, 299, 300, 301, 352, 498, 533, 536, 548, 553, 563, 568, 569], "symbol": [2, 46, 174, 260, 302, 336, 566], "tracer": 2, "intermedi": [2, 48, 71, 218, 561, 570, 574], "code": [2, 7, 8, 187, 188, 217, 259, 269, 277, 278, 281, 297, 300, 336, 404, 409, 427, 445, 510, 511, 542, 543, 548, 549, 551, 553, 559, 561, 563, 564, 567, 568, 570, 572, 573, 574, 577, 578, 579], "gener": [2, 7, 8, 39, 41, 46, 74, 117, 118, 145, 187, 188, 189, 198, 201, 202, 203, 204, 210, 213, 216, 217, 227, 236, 239, 240, 241, 242, 248, 250, 252, 256, 257, 259, 260, 268, 272, 279, 286, 294, 297, 300, 302, 324, 332, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 380, 404, 409, 415, 470, 475, 479, 482, 484, 485, 490, 491, 492, 501, 510, 542, 546, 548, 551, 564, 565, 567, 569, 570, 571, 572, 574, 575, 578, 579, 580], "With": [2, 5, 8, 124, 548, 567, 570, 572, 574, 577, 580, 582], "convert": [2, 4, 5, 39, 41, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 100, 101, 105, 107, 108, 109, 110, 111, 114, 117, 118, 127, 128, 130, 131, 132, 199, 212, 215, 216, 237, 249, 251, 252, 259, 263, 267, 269, 283, 285, 295, 305, 309, 311, 312, 313, 317, 319, 337, 352, 384, 391, 400, 495, 507, 565, 574, 575, 579], "torch": [2, 4, 5, 72, 170, 174, 180, 184, 218, 254, 256, 267, 275, 279, 281, 301, 309, 319, 324, 336, 553, 556, 565, 566, 570, 574, 578], "graphmodul": [2, 72, 174, 575], "can": [2, 3, 4, 5, 7, 8, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 83, 163, 170, 178, 179, 187, 188, 198, 201, 216, 217, 219, 220, 236, 239, 252, 259, 263, 265, 267, 279, 281, 286, 291, 294, 296, 297, 298, 301, 305, 307, 309, 320, 324, 331, 332, 334, 336, 468, 500, 507, 517, 546, 547, 548, 549, 551, 553, 554, 558, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 578, 579, 580, 581], "resolv": [2, 6], "automat": [2, 7, 201, 204, 211, 212, 239, 242, 249, 258, 259, 268, 275, 299, 546, 549, 561, 565, 568, 571, 579, 580], "insert": [2, 4, 70, 74, 130, 133, 136, 155, 166, 254, 256, 561, 574, 575, 578], "quant": [2, 4, 74, 174, 574], "dequant": [2, 4, 70, 71, 116, 119, 121, 122, 124, 151, 170, 174, 417, 578], "oper": [2, 4, 40, 49, 71, 133, 168, 212, 249, 281, 294, 324, 340, 529, 533, 546, 556, 567, 574, 579, 580], "floatfunct": [2, 4], "wrap": [2, 46, 74, 139, 145, 218, 263, 305, 375, 553], "tensor": [2, 4, 39, 41, 44, 46, 47, 48, 70, 71, 72, 74, 97, 133, 145, 162, 168, 170, 216, 218, 252, 254, 255, 256, 281, 289, 290, 294, 296, 298, 317, 318, 319, 321, 324, 331, 333, 334, 344, 356, 357, 406, 409, 417, 446, 549, 570, 571, 574, 576, 578, 579, 580], "requir": [2, 4, 5, 8, 136, 145, 226, 259, 263, 275, 300, 305, 313, 318, 337, 340, 364, 366, 375, 378, 433, 439, 446, 449, 451, 458, 464, 471, 472, 473, 474, 476, 477, 478, 480, 483, 484, 489, 494, 498, 546, 547, 548, 552, 553, 558, 562, 565, 566, 569, 571, 574, 576, 577, 578, 580, 581], "special": [2, 139, 564, 567], "handl": [2, 6, 70, 87, 89, 168, 259, 272, 273, 274, 299, 507, 533, 534, 548], "cat": 2, "output": [2, 4, 5, 8, 14, 38, 48, 70, 71, 72, 74, 80, 86, 87, 97, 101, 112, 113, 119, 121, 126, 133, 136, 145, 162, 168, 181, 187, 188, 215, 218, 220, 221, 225, 251, 253, 254, 256, 258, 259, 260, 263, 267, 272, 273, 281, 294, 302, 305, 308, 309, 318, 324, 331, 336, 352, 353, 356, 382, 393, 396, 403, 409, 411, 412, 446, 456, 457, 458, 472, 476, 479, 502, 510, 518, 524, 546, 548, 551, 553, 556, 558, 559, 564, 566, 570, 573, 574, 578, 579, 580, 581], "paramet": [2, 4, 5, 14, 39, 41, 44, 46, 47, 48, 70, 71, 72, 74, 83, 84, 85, 86, 87, 88, 89, 90, 97, 100, 101, 105, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 127, 128, 131, 132, 133, 136, 138, 139, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161, 162, 168, 170, 174, 175, 177, 179, 180, 181, 184, 187, 188, 189, 198, 199, 201, 205, 208, 209, 210, 212, 213, 215, 216, 217, 218, 223, 227, 236, 237, 239, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 281, 282, 283, 284, 285, 286, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 313, 315, 318, 319, 320, 321, 324, 330, 331, 332, 333, 334, 335, 336, 339, 340, 344, 347, 348, 351, 352, 355, 356, 357, 361, 362, 375, 379, 384, 385, 404, 405, 406, 409, 415, 417, 426, 452, 470, 475, 479, 482, 485, 497, 502, 507, 509, 510, 516, 517, 519, 529, 530, 546, 548, 549, 553, 554, 561, 564, 570, 571, 574, 577, 579, 580, 581], "fuse": [2, 4, 5, 39, 46, 72, 74, 91, 92, 96, 97, 98, 99, 119, 120, 121, 122, 124, 158, 170, 174, 578], "combin": [2, 8, 44, 46, 73, 187, 188, 212, 226, 249, 259, 300, 336, 362, 554, 561, 568, 572, 575, 579, 580], "singl": [2, 192, 199, 215, 216, 230, 237, 251, 252, 263, 272, 274, 296, 298, 305, 321, 334, 339, 398, 415, 434, 502, 536, 549, 570, 571], "obtain": [2, 294, 295, 298, 324, 332, 333, 334, 335, 556, 577, 580], "higher": [2, 5, 187, 188, 284, 336, 337, 551, 556, 564, 565, 570, 571, 574, 577, 580], "accuraci": [2, 4, 5, 7, 72, 179, 187, 188, 217, 253, 258, 259, 267, 271, 272, 273, 275, 282, 286, 291, 299, 301, 309, 320, 336, 337, 340, 345, 347, 367, 383, 393, 403, 409, 411, 485, 509, 515, 518, 520, 536, 546, 547, 548, 552, 553, 554, 556, 564, 565, 567, 568, 570, 571, 572, 573, 576, 577, 578, 581, 582], "perform": [2, 3, 5, 7, 8, 89, 124, 179, 199, 211, 212, 215, 217, 237, 249, 251, 258, 259, 270, 271, 273, 275, 282, 283, 286, 291, 299, 301, 320, 331, 333, 340, 344, 367, 383, 393, 403, 409, 411, 500, 509, 518, 520, 527, 536, 546, 547, 548, 550, 552, 556, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 580, 581, 582], "done": [2, 4, 5, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 551, 570, 574], "_": [2, 3, 4, 5, 8, 46, 187, 188, 336, 545, 551, 553, 554, 558, 564, 565, 566, 567, 570, 571, 574, 575, 576, 577, 578, 580, 581], "list": [2, 4, 7, 8, 14, 39, 41, 44, 46, 47, 71, 72, 74, 80, 83, 133, 138, 145, 162, 168, 174, 187, 188, 192, 199, 212, 215, 216, 217, 218, 230, 237, 249, 251, 252, 254, 256, 259, 260, 261, 263, 264, 265, 267, 272, 274, 275, 284, 286, 291, 294, 297, 302, 303, 305, 306, 307, 309, 318, 319, 320, 324, 332, 336, 340, 344, 347, 352, 353, 356, 357, 375, 377, 379, 380, 382, 384, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 415, 416, 417, 426, 429, 431, 432, 434, 446, 449, 452, 453, 456, 457, 458, 460, 465, 468, 470, 472, 475, 476, 479, 482, 485, 495, 502, 507, 509, 510, 511, 515, 517, 518, 519, 520, 521, 523, 524, 525, 527, 529, 536, 545, 558, 567, 573, 575, 578, 580], "current": [2, 3, 4, 8, 41, 44, 46, 47, 70, 73, 74, 89, 97, 101, 133, 138, 259, 269, 275, 286, 291, 294, 296, 297, 298, 321, 324, 331, 332, 334, 339, 340, 344, 345, 347, 546, 553, 554, 558, 564, 567, 570, 571, 574, 580], "fusion": [2, 4, 8, 44, 73, 97, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161, 558], "conv": [2, 4, 39, 40, 48, 49, 61, 70, 120, 158, 184, 301, 324, 573], "relu": [2, 4, 39, 101, 158, 558, 578], "batchnorm": [2, 144], "linear": [2, 4, 71, 184, 254, 256, 294, 301, 324, 551, 556], "pleas": [2, 3, 5, 6, 7, 8, 133, 170, 199, 200, 201, 204, 237, 238, 239, 242, 259, 286, 291, 294, 296, 297, 321, 324, 332, 546, 549, 552, 553, 562, 564, 565, 567, 570, 571, 575, 576, 577], "refer": [2, 5, 7, 8, 14, 170, 199, 237, 259, 260, 261, 266, 267, 286, 291, 294, 296, 297, 302, 303, 308, 309, 321, 324, 332, 547, 549, 552, 553, 559, 563, 564, 565, 567, 570, 573, 574, 576, 579, 580], "graph": [2, 8, 47, 48, 72, 74, 77, 83, 84, 85, 86, 87, 88, 89, 90, 97, 100, 101, 102, 105, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 127, 128, 131, 132, 133, 155, 162, 163, 166, 167, 168, 198, 236, 256, 258, 301, 311, 312, 317, 318, 319, 369, 371, 373, 438, 446, 449, 457, 458, 460, 470, 471, 472, 477, 478, 482, 495, 496, 498, 518, 521, 533, 549, 551, 553, 559, 564, 566, 574, 575, 578], "10004": [2, 3, 8, 551, 556, 558, 561, 565, 568, 573, 581], "backend": [2, 41, 44, 47, 48, 72, 73, 74, 190, 191, 195, 199, 200, 202, 203, 204, 205, 206, 210, 213, 216, 223, 228, 229, 231, 233, 237, 238, 240, 241, 242, 243, 244, 248, 250, 252, 268, 345, 545, 553, 554, 559, 561, 573, 574, 579, 581], "field": [2, 8, 133, 162, 201, 239, 263, 300, 305, 546, 547, 553, 554, 577, 580, 581], "indic": [2, 70, 192, 197, 199, 230, 235, 237, 253, 259, 263, 279, 281, 284, 285, 305, 324, 546, 547, 557, 578], "user": [2, 3, 4, 7, 8, 44, 73, 133, 179, 187, 188, 190, 193, 201, 204, 208, 209, 210, 216, 217, 223, 226, 239, 242, 246, 247, 248, 252, 258, 259, 272, 274, 286, 291, 297, 299, 300, 301, 331, 332, 336, 340, 347, 352, 362, 501, 551, 554, 558, 561, 564, 565, 566, 567, 568, 570, 572, 574, 575, 576, 578, 579, 580], "configur": [2, 3, 4, 8, 38, 39, 41, 44, 46, 47, 72, 73, 74, 133, 174, 179, 180, 184, 187, 188, 190, 193, 201, 204, 210, 217, 239, 242, 253, 254, 256, 258, 259, 263, 269, 270, 271, 272, 274, 282, 283, 286, 291, 295, 297, 299, 300, 301, 305, 324, 332, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 351, 352, 361, 363, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 382, 393, 404, 406, 409, 468, 470, 475, 479, 482, 485, 498, 500, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 532, 534, 546, 547, 549, 552, 564, 567, 576, 579, 580, 582], "And": [2, 97, 226, 259], "default": [2, 7, 8, 14, 39, 41, 48, 72, 74, 125, 133, 162, 168, 181, 184, 187, 188, 189, 191, 199, 200, 201, 212, 216, 218, 226, 227, 229, 237, 238, 239, 249, 252, 254, 256, 259, 260, 263, 266, 267, 269, 281, 295, 301, 302, 305, 308, 309, 318, 335, 362, 384, 386, 387, 389, 391, 394, 395, 400, 422, 423, 426, 443, 453, 505, 507, 517, 519, 520, 524, 525, 546, 547, 548, 549, 554, 556, 558, 561, 564, 567, 573, 575, 577, 579, 580, 581], "valu": [2, 4, 5, 39, 41, 44, 47, 48, 71, 72, 74, 82, 83, 89, 94, 95, 97, 117, 118, 133, 138, 162, 163, 168, 178, 180, 181, 187, 188, 199, 202, 203, 212, 216, 217, 218, 237, 240, 241, 249, 252, 259, 263, 267, 273, 274, 279, 286, 291, 294, 295, 297, 305, 309, 319, 320, 321, 324, 332, 335, 336, 339, 344, 347, 353, 355, 356, 362, 375, 377, 379, 384, 386, 387, 389, 391, 394, 395, 400, 404, 405, 426, 428, 467, 499, 502, 503, 507, 509, 515, 517, 520, 525, 527, 528, 530, 541, 546, 548, 549, 554, 558, 564, 567, 570, 571, 573, 574, 579, 580, 581], "mean": [2, 4, 5, 89, 97, 189, 212, 216, 227, 249, 252, 263, 265, 267, 273, 275, 281, 294, 305, 307, 309, 320, 324, 344, 547, 548, 553, 554, 558, 564, 570, 571, 574, 579, 580, 581], "model": [2, 3, 5, 8, 12, 39, 41, 44, 46, 47, 48, 61, 70, 71, 72, 74, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 139, 162, 168, 170, 174, 175, 177, 179, 184, 187, 188, 195, 198, 199, 201, 216, 217, 218, 220, 221, 226, 233, 236, 237, 239, 252, 253, 254, 255, 256, 257, 258, 259, 267, 268, 269, 270, 271, 273, 275, 280, 281, 282, 283, 285, 286, 291, 294, 295, 296, 297, 298, 299, 300, 301, 308, 309, 324, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 352, 355, 361, 362, 364, 365, 366, 368, 379, 382, 390, 393, 396, 398, 406, 407, 408, 409, 410, 411, 413, 414, 415, 417, 421, 425, 426, 431, 432, 433, 436, 437, 438, 462, 463, 465, 468, 471, 472, 473, 474, 476, 477, 478, 479, 483, 484, 489, 491, 494, 495, 498, 499, 506, 515, 517, 522, 532, 533, 537, 547, 548, 549, 551, 552, 553, 554, 559, 561, 563, 564, 565, 567, 568, 569, 570, 571, 572, 574, 576, 577, 578, 579, 580, 581], "neural_compressor": [2, 3, 5, 7, 14, 547, 548, 549, 551, 553, 556, 559, 564, 565, 566, 567, 568, 570, 573, 574, 575, 576, 577, 579, 580, 581], "import": [2, 3, 4, 5, 7, 168, 259, 269, 272, 352, 362, 547, 548, 549, 551, 553, 556, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 577, 578, 579, 580], "posttrainingquantconfig": [2, 7, 577, 580], "conf": [2, 3, 5, 7, 175, 177, 187, 188, 217, 259, 268, 269, 286, 291, 300, 311, 312, 313, 317, 319, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 352, 525, 528, 547, 548, 551, 559, 577, 580], "eval": [2, 4, 5, 47, 226, 259, 263, 269, 305, 578], "q_model": [2, 5, 72, 170, 175, 177, 259, 269, 548, 549, 553, 556, 559, 564, 566, 567, 574], "fit": [2, 5, 7, 179, 324, 336, 339, 548, 549, 551, 553, 559, 564, 566, 567, 568, 570, 571, 574], "calib_dataload": [2, 7, 219, 220, 259, 299, 300, 336, 548, 549, 559, 564, 574], "dataload": [2, 7, 8, 16, 34, 39, 41, 44, 46, 47, 48, 72, 74, 170, 174, 175, 177, 179, 187, 188, 199, 210, 217, 220, 226, 237, 248, 253, 259, 269, 286, 291, 296, 299, 300, 301, 336, 352, 355, 363, 368, 375, 379, 390, 404, 407, 409, 414, 416, 438, 479, 492, 495, 498, 506, 517, 518, 522, 546, 549, 553, 559, 564, 565, 574, 578, 579, 581], "eval_func": [2, 187, 188, 226, 258, 259, 269, 300, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 547, 548, 549, 553, 565, 574, 580, 581], "save": [2, 4, 8, 39, 41, 44, 47, 72, 74, 133, 201, 205, 210, 239, 243, 248, 254, 256, 273, 283, 300, 311, 312, 313, 315, 317, 318, 319, 340, 347, 352, 353, 356, 362, 559, 565, 566, 570, 571, 574], "path": [2, 3, 4, 8, 39, 41, 44, 47, 72, 74, 162, 168, 179, 180, 199, 200, 201, 216, 237, 238, 239, 252, 253, 254, 256, 258, 259, 269, 270, 271, 272, 275, 282, 283, 286, 291, 295, 297, 299, 300, 301, 313, 315, 318, 319, 332, 335, 336, 352, 362, 363, 368, 382, 385, 392, 393, 396, 403, 404, 409, 411, 412, 426, 432, 443, 446, 449, 451, 452, 454, 456, 457, 458, 459, 463, 470, 475, 479, 482, 485, 486, 492, 502, 510, 515, 517, 518, 527, 542, 546, 547, 548, 549, 551, 553, 559, 564, 566, 570, 579, 581], "approach": [2, 3, 7, 72, 180, 259, 270, 271, 272, 281, 282, 283, 347, 379, 518, 525, 551, 554, 561, 572, 573, 580, 581], "quantizationawaretrainingconfig": [2, 580], "prepare_compress": [2, 352], "compression_manag": [2, 352], "callback": [2, 286, 291, 352, 353, 355, 356, 533], "on_train_begin": [2, 226, 259, 286, 291, 296, 297, 331, 332, 352, 551], "loop": [2, 3, 5, 320, 352, 558, 577, 580], "now": [2, 3, 216, 252, 515, 549, 553, 573, 579, 580], "auto": [2, 337, 362], "method": [2, 3, 4, 5, 7, 72, 133, 145, 162, 163, 174, 192, 197, 198, 199, 201, 205, 208, 209, 210, 213, 216, 219, 220, 230, 235, 236, 237, 239, 243, 246, 247, 248, 250, 252, 259, 266, 267, 272, 275, 281, 283, 284, 285, 289, 299, 308, 309, 311, 312, 313, 315, 317, 318, 319, 333, 502, 507, 511, 529, 547, 548, 551, 552, 554, 564, 568, 570, 571, 574, 575, 579, 580], "avoid": [2, 199, 237, 578], "log": [2, 166, 286, 291, 365, 382, 393, 396, 403, 409, 411, 412, 468, 502, 508, 509, 510, 511, 516, 530, 546, 577, 578, 580], "fail": [2, 133, 511], "trace": [2, 72, 170, 174, 254, 256, 336, 342, 580], "info": [2, 39, 41, 44, 47, 71, 72, 133, 210, 213, 214, 219, 220, 224, 256, 294, 300, 314, 324, 335, 382, 383, 385, 392, 393, 396, 397, 399, 402, 502, 505, 510, 517, 533, 546, 556, 566], "entir": [2, 4, 5, 336, 570, 571], "conduct": 2, "imper": 2, "control": [2, 39, 41, 44, 74, 113, 175, 177, 275, 409, 414, 546, 569, 580], "flow": [2, 3, 259, 264, 265, 286, 291, 306, 307], "therefor": [2, 5, 571, 574, 576], "int8": [2, 5, 8, 39, 41, 44, 47, 50, 51, 71, 72, 73, 74, 163, 170, 178, 212, 249, 254, 255, 256, 340, 356, 357, 417, 545, 546, 549, 552, 558, 573, 574, 575, 576, 577, 578, 579, 581], "lot": [2, 554], "9": [2, 4, 5, 7, 184, 274, 301, 562, 570, 571, 573, 580, 581, 582], "between": [2, 4, 8, 74, 163, 170, 178, 216, 218, 252, 264, 266, 267, 272, 274, 275, 306, 308, 309, 331, 417, 529, 533, 547, 551, 556, 561, 564, 574, 576, 577, 579, 580], "don": [2, 38, 163, 178, 324, 507, 546, 580], "t": [2, 4, 8, 38, 94, 95, 97, 133, 162, 163, 178, 216, 219, 220, 252, 265, 274, 275, 279, 300, 307, 324, 507, 516, 546, 547, 548, 551, 553, 565, 570, 580, 581, 582], "need": [2, 5, 8, 38, 39, 41, 44, 46, 47, 72, 74, 79, 80, 81, 82, 85, 86, 89, 91, 92, 93, 96, 98, 99, 100, 102, 104, 105, 107, 108, 109, 110, 111, 114, 116, 117, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 154, 155, 159, 162, 179, 187, 188, 189, 197, 198, 201, 208, 209, 210, 216, 219, 220, 221, 222, 227, 235, 236, 239, 246, 247, 248, 252, 253, 259, 266, 267, 272, 279, 281, 286, 291, 300, 308, 309, 312, 314, 317, 324, 336, 340, 344, 347, 361, 362, 536, 546, 547, 548, 549, 551, 553, 561, 565, 567, 570, 573, 574, 575, 576, 579, 580, 581], "becaus": [2, 216, 252, 263, 294, 305, 324, 570, 574, 579, 580], "modifi": [2, 83, 89, 97, 108, 201, 239, 259, 286, 291, 297, 332, 496, 546, 547, 553, 558, 581], "sourc": [2, 7, 39, 41, 48, 74, 220, 259, 261, 269, 281, 303, 430, 563, 572], "8": [2, 4, 5, 7, 136, 215, 251, 507, 558, 562, 567, 572, 580, 582], "As": [2, 108, 263, 305, 546, 548, 551, 554, 570, 571, 580], "cannot": [2, 263, 305, 505, 556, 557, 578], "iter": [2, 3, 5, 8, 39, 41, 44, 46, 47, 48, 72, 74, 168, 175, 177, 187, 188, 192, 197, 201, 202, 205, 210, 219, 220, 230, 235, 239, 240, 243, 248, 283, 296, 298, 331, 334, 336, 355, 356, 357, 382, 510, 518, 548, 551, 570, 571, 573, 578, 580, 581], "so": [2, 8, 145, 216, 252, 296, 352, 554, 557, 561, 564, 574, 575, 578, 579], "might": [2, 546, 580], "meet": [2, 7, 300, 337, 340, 345, 556, 567, 572, 573, 574, 578, 580], "failur": [2, 529], "sometim": [2, 133, 162, 570, 574], "order": [2, 14, 174, 260, 261, 281, 300, 302, 303, 338, 339, 340, 344, 345, 446, 449, 458, 519, 564, 570, 573, 578, 580], "successfulli": [2, 553, 572], "suggest": [2, 281, 285, 339, 577], "two": [2, 3, 120, 133, 170, 201, 205, 206, 210, 217, 239, 243, 244, 248, 263, 294, 298, 300, 305, 324, 331, 334, 362, 546, 547, 549, 551, 553, 558, 564, 565, 568, 570, 574, 575, 577, 580, 581], "first": [2, 3, 4, 5, 8, 48, 74, 120, 163, 178, 181, 199, 215, 237, 251, 253, 259, 263, 305, 337, 340, 426, 546, 549, 556, 562, 565, 573, 574, 575, 577, 578, 580, 581], "pass": [2, 4, 5, 8, 104, 108, 168, 179, 215, 251, 259, 279, 281, 286, 291, 297, 300, 332, 362, 460, 516, 529, 530, 547, 548, 549, 551, 553, 556, 559, 564, 567, 570, 573, 574, 575, 581], "non": [2, 4, 145, 223, 295, 569, 570, 580], "traceabl": [2, 72], "class": [2, 3, 4, 139, 284, 330, 336, 440, 441, 547, 548, 549, 551, 554, 564, 567, 568, 578, 580, 581], "name": [2, 4, 7, 39, 41, 46, 47, 70, 71, 72, 74, 80, 89, 90, 94, 95, 97, 133, 138, 139, 155, 162, 168, 170, 175, 177, 181, 199, 200, 201, 204, 205, 208, 209, 210, 213, 214, 216, 217, 218, 220, 221, 223, 224, 225, 237, 238, 239, 242, 243, 246, 247, 248, 250, 252, 254, 255, 256, 262, 263, 266, 267, 272, 273, 275, 281, 286, 289, 291, 294, 296, 298, 300, 304, 305, 308, 309, 314, 318, 319, 321, 324, 331, 333, 334, 353, 356, 362, 382, 386, 387, 389, 392, 393, 394, 395, 396, 398, 417, 426, 428, 446, 449, 451, 452, 458, 465, 466, 467, 468, 479, 495, 502, 505, 517, 519, 520, 541, 546, 547, 549, 553, 554, 558, 563, 564, 566, 569, 576, 577, 578, 580, 581, 582], "select": [2, 3, 199, 237, 271, 275, 282, 333, 345, 546, 561, 562, 571, 574, 578, 580], "proxi": 2, "object": [2, 3, 4, 7, 14, 39, 41, 44, 46, 47, 65, 71, 72, 74, 83, 84, 85, 86, 87, 88, 89, 90, 100, 101, 105, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 127, 128, 131, 132, 133, 136, 139, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161, 162, 170, 174, 175, 177, 179, 180, 181, 187, 188, 189, 190, 192, 193, 197, 199, 200, 201, 205, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 230, 235, 237, 238, 239, 243, 246, 247, 248, 250, 251, 252, 253, 256, 258, 259, 260, 263, 266, 267, 268, 271, 272, 274, 282, 283, 285, 286, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 308, 309, 312, 313, 314, 315, 318, 319, 321, 324, 331, 332, 333, 334, 335, 336, 339, 347, 353, 355, 356, 357, 361, 362, 379, 394, 395, 398, 401, 442, 507, 510, 517, 527, 529, 530, 534, 546, 547, 548, 549, 557, 564, 565, 566, 568, 573, 574, 579, 580], "them": [2, 89, 133, 199, 237, 548, 558, 559, 568, 570, 580], "prepar": [2, 4, 5, 7, 46, 72, 226, 253, 259, 286, 291, 297, 299, 404, 409, 497, 549, 553, 574], "dict": [2, 39, 41, 44, 46, 47, 48, 72, 74, 136, 138, 139, 145, 168, 170, 174, 175, 177, 180, 181, 187, 188, 198, 201, 217, 218, 223, 236, 239, 254, 255, 256, 259, 262, 263, 264, 265, 267, 270, 272, 275, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 294, 295, 296, 297, 298, 304, 305, 306, 307, 309, 313, 318, 321, 324, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 351, 353, 355, 356, 361, 362, 363, 365, 368, 375, 376, 377, 379, 380, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 422, 423, 426, 434, 443, 446, 453, 461, 462, 463, 465, 467, 468, 469, 470, 475, 479, 482, 485, 486, 487, 488, 490, 492, 493, 495, 502, 503, 505, 507, 509, 510, 513, 515, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 529, 530, 533, 534, 536, 538, 540, 541, 543, 564, 573, 578, 580], "http": [2, 4, 7, 170, 199, 201, 237, 239, 260, 261, 263, 264, 265, 281, 294, 296, 297, 302, 303, 305, 306, 307, 321, 324, 332, 542, 546, 549, 562, 563, 576], "tutori": [2, 572], "prototyp": 2, "guid": [2, 7, 199, 237, 549, 551, 562], "html": 2, "highlight": [2, 431, 434, 546], "decor": [2, 3, 8, 39, 65, 94, 95, 97, 168, 175, 177, 210, 213, 216, 223, 248, 250, 252, 266, 267, 284, 289, 294, 296, 298, 308, 309, 320, 324, 330, 331, 334, 347, 362, 512, 580], "untrac": 2, "part": [2, 48, 253, 259, 263, 294, 296, 305, 331, 548, 551, 562, 565, 570], "global": [2, 138, 184, 294, 301, 324, 331, 530, 573, 580], "function": [2, 3, 5, 8, 41, 44, 47, 70, 74, 89, 133, 162, 187, 188, 200, 226, 238, 258, 259, 270, 281, 282, 283, 286, 291, 297, 300, 317, 332, 353, 356, 546, 547, 548, 551, 559, 561, 562, 564, 565, 570, 571, 574, 577, 578, 580], "call": [2, 3, 8, 38, 46, 145, 226, 259, 263, 274, 275, 286, 291, 294, 296, 297, 305, 331, 381, 414, 502, 510, 511, 546, 548, 559, 570, 574, 578, 579], "want": [2, 8, 94, 95, 97, 133, 197, 199, 235, 237, 296, 340, 352, 546, 547, 549, 553, 564, 567, 568, 577, 578, 580], "move": [2, 74, 573, 576], "keep": [2, 8, 294, 295, 335, 340, 576, 580], "should": [2, 3, 4, 8, 41, 44, 47, 48, 70, 72, 73, 74, 81, 101, 138, 139, 163, 167, 187, 188, 197, 199, 201, 205, 210, 215, 216, 220, 221, 235, 237, 239, 243, 248, 251, 252, 256, 261, 266, 267, 296, 300, 303, 308, 309, 324, 331, 336, 347, 362, 426, 507, 546, 549, 553, 564, 567, 571, 574, 579, 580, 581], "try": [2, 197, 235, 446, 449, 458, 530, 556, 574], "detect": [2, 72, 170, 174, 263, 267, 305, 309, 314, 446, 449, 458, 517, 546], "ssd": [2, 582], "resnet34": [2, 582], "ptq": [2, 553, 561, 574, 578, 580], "r34": 2, "py": [2, 4, 8, 133, 168, 170, 261, 263, 264, 265, 296, 303, 305, 306, 307, 331, 533, 546, 553, 562, 574, 576, 578], "def": [2, 4, 5, 8, 94, 95, 97, 155, 187, 188, 336, 549, 551, 553, 564, 567, 570, 574, 578, 580], "bboxes_labels_scor": 2, "bbox": [2, 263, 305, 564], "prob": 2, "criteria": [2, 258, 259, 286, 291, 294, 296, 299, 301, 322, 345], "0": [2, 4, 5, 7, 11, 39, 41, 44, 70, 71, 72, 73, 80, 118, 162, 168, 176, 184, 189, 191, 194, 195, 196, 198, 199, 202, 203, 206, 212, 216, 218, 219, 220, 227, 229, 232, 233, 234, 236, 237, 240, 241, 244, 249, 252, 254, 256, 258, 259, 267, 272, 274, 275, 279, 281, 284, 286, 291, 294, 299, 301, 309, 324, 334, 340, 502, 510, 546, 547, 548, 549, 551, 553, 554, 556, 558, 563, 564, 565, 567, 569, 570, 571, 573, 574, 577, 578, 579, 580, 581], "45": [2, 274, 582], "max_output": 2, "200": [2, 215, 251, 580, 582], "box": [2, 216, 252, 263, 267, 305, 309, 339, 546, 564, 578, 579, 580], "label": [2, 14, 39, 41, 74, 187, 188, 199, 201, 202, 203, 204, 207, 212, 216, 218, 220, 221, 237, 239, 240, 241, 242, 245, 249, 252, 260, 262, 266, 267, 272, 273, 302, 304, 308, 309, 336, 434, 549, 564, 570, 579], "score": [2, 14, 260, 261, 263, 264, 265, 267, 280, 294, 296, 302, 303, 305, 306, 307, 309, 321, 324, 331, 333, 342, 345, 564, 567, 570, 571, 577, 580], "zip": 2, "split": [2, 40, 49, 61, 71, 162, 215, 216, 251, 252, 272, 579], "squeez": 2, "dbox": 2, "dlabel": 2, "dscore": 2, "decode_singl": 2, "append": [2, 4, 174, 300, 339, 567, 568], "return": [2, 3, 4, 5, 14, 39, 41, 44, 46, 47, 48, 72, 74, 77, 80, 83, 84, 87, 88, 89, 90, 94, 95, 97, 101, 108, 112, 113, 117, 118, 119, 120, 121, 122, 130, 133, 136, 138, 139, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 168, 170, 174, 175, 177, 181, 187, 188, 189, 191, 198, 201, 205, 208, 209, 210, 212, 213, 215, 216, 217, 218, 223, 227, 229, 236, 239, 243, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 275, 281, 282, 283, 284, 285, 286, 289, 291, 294, 295, 296, 297, 298, 300, 302, 303, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 318, 319, 320, 324, 330, 331, 332, 333, 334, 335, 336, 339, 340, 344, 347, 348, 351, 352, 355, 356, 357, 361, 362, 382, 383, 385, 392, 393, 394, 395, 396, 398, 399, 401, 402, 426, 429, 430, 431, 432, 463, 502, 505, 507, 509, 510, 511, 517, 520, 529, 530, 533, 549, 553, 564, 565, 566, 567, 574, 578, 580], "process": [3, 5, 8, 39, 41, 44, 47, 72, 74, 139, 170, 187, 188, 199, 200, 201, 210, 212, 213, 216, 217, 226, 237, 238, 239, 248, 249, 250, 252, 253, 254, 256, 259, 270, 271, 274, 280, 282, 283, 286, 291, 294, 296, 297, 298, 300, 301, 324, 331, 332, 334, 335, 336, 339, 361, 378, 461, 462, 465, 498, 502, 506, 509, 510, 518, 546, 547, 548, 549, 551, 552, 553, 556, 568, 570, 571, 574, 578, 579, 580, 581], "autom": 3, "design": [3, 145, 198, 220, 221, 226, 236, 259, 274, 299, 308, 309, 340, 570, 571, 574], "artifici": 3, "network": [3, 4, 7, 170, 272, 275, 296, 321, 324, 342, 546, 551, 552, 556, 572, 574, 580], "ann": 3, "par": 3, "outperform": 3, "hand": [3, 263, 305, 546], "our": [3, 4, 7, 163, 556, 577], "leverag": [3, 102, 551, 568, 574], "algorithm": [3, 7, 8, 14, 46, 180, 215, 251, 260, 267, 270, 274, 282, 283, 285, 301, 302, 309, 339, 356, 357, 551, 558, 561, 570, 571, 574, 578, 580, 581], "built": [3, 8, 102, 145, 190, 195, 199, 200, 205, 207, 209, 210, 212, 213, 216, 220, 221, 223, 228, 231, 233, 237, 238, 243, 245, 247, 248, 249, 250, 252, 300, 308, 309, 547, 553, 567, 579, 580, 581], "grid": [3, 285], "bayesian": [3, 285, 301, 343, 563, 573], "optim": [3, 4, 5, 7, 12, 47, 72, 80, 84, 87, 88, 90, 101, 102, 112, 113, 119, 120, 121, 122, 139, 162, 180, 184, 220, 226, 253, 258, 259, 273, 285, 296, 297, 299, 301, 321, 331, 332, 333, 339, 352, 353, 356, 363, 365, 369, 371, 373, 390, 394, 395, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 417, 418, 419, 420, 421, 424, 425, 438, 492, 498, 499, 509, 515, 518, 521, 525, 532, 537, 551, 553, 558, 561, 562, 563, 566, 569, 570, 572, 573, 574, 575, 577, 578, 580, 581], "propos": [3, 8, 283, 324, 551, 565, 570], "base": [3, 8, 14, 39, 41, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 136, 139, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 175, 176, 177, 178, 179, 180, 181, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 259, 260, 263, 266, 267, 268, 270, 271, 272, 274, 275, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 294, 296, 298, 299, 300, 301, 302, 305, 308, 309, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 324, 331, 333, 334, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 353, 356, 357, 362, 367, 368, 369, 371, 372, 373, 374, 377, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 421, 422, 423, 425, 428, 430, 431, 434, 444, 446, 449, 451, 453, 454, 456, 457, 458, 459, 467, 470, 475, 479, 482, 485, 495, 499, 501, 503, 505, 509, 510, 511, 512, 515, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 530, 531, 533, 535, 539, 540, 549, 552, 553, 554, 558, 569, 571, 577, 578, 580, 582], "given": [3, 38, 46, 47, 48, 70, 74, 94, 95, 97, 138, 139, 168, 215, 216, 251, 252, 263, 305, 317, 324, 331, 336, 347, 426, 432, 446, 449, 451, 452, 454, 456, 457, 459, 503, 517, 530, 548, 570, 571, 579], "train": [3, 4, 7, 8, 39, 41, 44, 47, 72, 74, 89, 145, 187, 188, 199, 201, 216, 226, 237, 239, 252, 253, 259, 269, 270, 272, 273, 280, 282, 286, 291, 296, 297, 299, 300, 331, 332, 336, 347, 355, 525, 545, 549, 551, 552, 556, 561, 565, 568, 570, 571, 572, 577, 580, 581, 582], "evalu": [3, 4, 5, 8, 14, 39, 41, 44, 47, 72, 74, 179, 187, 188, 199, 217, 226, 237, 253, 258, 259, 260, 263, 264, 265, 266, 267, 269, 270, 271, 274, 275, 282, 283, 286, 291, 296, 297, 300, 301, 302, 305, 306, 307, 308, 309, 324, 331, 332, 336, 347, 355, 367, 369, 371, 373, 374, 375, 498, 506, 518, 522, 548, 549, 551, 559, 561, 564, 565, 567, 570, 574, 577, 578, 580, 581], "after": [3, 4, 5, 46, 48, 72, 174, 199, 212, 216, 219, 220, 226, 237, 249, 252, 253, 254, 256, 259, 272, 294, 296, 297, 298, 321, 324, 331, 332, 333, 334, 340, 503, 546, 547, 548, 549, 551, 556, 561, 564, 567, 568, 570, 571, 574, 575, 577, 578, 579, 580], "sever": [3, 4, 162, 216, 252, 298, 334, 546, 551, 561, 565, 570, 571, 573, 579, 580, 581], "procedur": [3, 180, 324, 340], "lie": [3, 283], "pareto": [3, 283, 284], "front": [3, 283, 284], "dyna": [3, 259, 272, 273, 274, 275, 276, 282, 301, 561, 573], "super": [3, 4, 5, 265, 272, 275, 307, 567], "metric": [3, 7, 8, 12, 14, 39, 41, 44, 47, 72, 74, 187, 188, 217, 220, 253, 258, 259, 269, 270, 271, 273, 275, 282, 283, 284, 285, 286, 291, 299, 300, 301, 336, 355, 375, 379, 385, 390, 404, 407, 409, 414, 438, 498, 506, 509, 514, 517, 518, 520, 536, 546, 547, 548, 553, 565, 577, 578, 580, 581, 582], "predictor": [3, 271, 272, 273, 275, 282], "predict": [3, 4, 14, 168, 216, 220, 221, 252, 260, 264, 265, 266, 267, 273, 275, 302, 306, 307, 308, 309, 551, 564, 578, 579], "4x": [3, 4, 574], "more": [3, 4, 5, 6, 7, 89, 162, 168, 187, 216, 252, 263, 279, 281, 294, 305, 324, 347, 546, 549, 551, 553, 561, 562, 564, 565, 567, 568, 570, 571, 575, 580, 582], "sampl": [3, 7, 104, 130, 189, 192, 197, 199, 200, 201, 205, 210, 212, 216, 227, 230, 235, 237, 238, 239, 243, 248, 249, 252, 266, 267, 284, 308, 309, 339, 393, 449, 518, 548, 549, 561, 574, 579, 580, 581, 582], "effici": [3, 548, 551, 568, 572], "than": [3, 4, 5, 81, 89, 179, 199, 216, 237, 252, 263, 305, 549, 559, 564, 567, 568, 570, 574, 577, 579, 580], "typic": [3, 89, 138, 145, 259, 269, 300, 552, 570, 571], "one": [3, 7, 8, 14, 74, 133, 138, 155, 190, 193, 210, 216, 226, 252, 259, 260, 263, 266, 267, 269, 272, 294, 297, 298, 302, 305, 308, 309, 324, 332, 334, 352, 511, 546, 548, 551, 552, 553, 558, 561, 562, 564, 565, 567, 568, 570, 571, 573, 574, 576, 579, 580], "shot": [3, 7, 226, 259, 296, 298, 321, 334, 561, 570, 571, 572], "shown": [3, 426, 546, 551, 564, 567, 568, 580], "figur": [3, 570], "phase": [3, 175, 177, 300, 331, 332, 570, 571, 574, 575, 580], "small": [3, 5, 263, 305, 342, 546, 580], "popul": [3, 274], "sub": [3, 72, 79, 80, 81, 82, 85, 86, 91, 92, 93, 96, 98, 99, 100, 102, 104, 105, 107, 109, 110, 111, 114, 116, 117, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 217, 256, 259, 275, 347, 547, 580], "randomli": [3, 216, 252, 285, 339, 346, 579, 580], "measur": [3, 8, 39, 41, 44, 47, 72, 74, 168, 217, 274, 275, 280, 320, 536, 547, 551, 564, 578, 580], "provid": [3, 8, 133, 145, 187, 188, 210, 213, 216, 226, 248, 250, 252, 258, 259, 263, 272, 281, 286, 291, 299, 300, 305, 336, 426, 446, 452, 502, 511, 536, 545, 546, 547, 548, 552, 553, 554, 555, 556, 561, 562, 565, 566, 573, 574, 578, 580, 581, 582], "initi": [3, 4, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 139, 168, 187, 188, 196, 199, 218, 226, 234, 237, 253, 259, 270, 271, 282, 283, 295, 296, 300, 317, 331, 347, 381, 404, 405, 414, 463, 495, 497, 505, 518, 525, 548, 549, 564, 565, 570, 571, 580], "inner": 3, "multi": [3, 101, 217, 259, 263, 274, 279, 281, 305, 345, 375, 548, 549, 561, 567, 570, 580], "evolutionari": 3, "extens": [3, 8, 72, 300, 452, 517, 558, 561, 565, 566, 572, 580, 581], "next": [3, 187, 192, 230, 257, 283, 298, 334, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 546, 565, 573, 580], "cycl": [3, 548], "continu": [3, 263, 294, 305, 324, 340, 570], "until": [3, 345, 580], "conclud": 3, "count": [3, 4, 46, 283, 324, 340, 549], "met": [3, 188, 347, 558, 565, 574, 578], "tensorflow": [3, 4, 7, 8, 80, 102, 104, 108, 133, 145, 168, 198, 199, 200, 201, 204, 205, 206, 208, 209, 210, 213, 216, 218, 223, 236, 237, 238, 239, 242, 243, 244, 246, 247, 248, 250, 252, 256, 257, 258, 259, 261, 263, 266, 267, 268, 269, 299, 303, 305, 308, 309, 318, 336, 345, 424, 425, 437, 438, 445, 494, 495, 496, 498, 546, 551, 555, 556, 558, 561, 562, 563, 565, 566, 570, 572, 573, 574, 577, 580, 581], "Not": [3, 217, 226, 259, 286, 291, 501], "yet": [3, 44, 47, 74, 324, 546], "simplest": [3, 551], "launcher": [3, 551, 570], "experiment": [3, 5, 14, 211, 301, 495, 547, 548, 549, 551, 553, 556, 565, 566, 567, 568, 570, 573, 575, 576, 579], "agent": 3, "nasconfig": [3, 180, 259, 271, 282, 283], "argument": [3, 259, 279, 281, 286, 291, 297, 300, 332, 364, 472, 476, 481, 484, 490, 502, 510, 530, 547, 551], "config": [3, 7, 44, 46, 47, 48, 72, 73, 74, 136, 138, 139, 145, 179, 187, 188, 199, 217, 226, 237, 258, 259, 272, 280, 283, 286, 291, 294, 295, 296, 297, 298, 301, 321, 324, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 351, 352, 355, 361, 362, 363, 364, 367, 368, 369, 371, 373, 374, 377, 403, 409, 411, 412, 416, 417, 461, 463, 470, 472, 475, 476, 479, 481, 482, 484, 485, 492, 495, 498, 506, 517, 520, 521, 522, 523, 525, 527, 528, 530, 538, 540, 543, 546, 549, 551, 553, 556, 561, 566, 570, 573, 575, 577, 578, 580], "search_algorithm": [3, 180, 259, 282, 283, 301], "nsga2": [3, 274], "supernet": [3, 274, 275, 277, 278], "ofa_mbv3_d234_e346_k357_w1": 3, "acc": [3, 4, 44, 47, 267, 275, 309, 320, 578, 582], "mac": [3, 271, 273, 275, 280, 282], "50": [3, 263, 265, 274, 305, 307, 582], "num_ev": [3, 274], "250": 3, "results_csv_path": 3, "search_result": 3, "csv": [3, 272, 275, 517, 546], "batch_siz": [3, 4, 189, 191, 194, 195, 196, 197, 198, 199, 200, 219, 220, 227, 229, 232, 233, 234, 235, 236, 237, 238, 254, 256, 275, 280, 368, 382, 393, 495, 518, 547, 548, 549, 553, 556, 559, 574], "64": [3, 4, 216, 252, 579, 582], "dataset_path": [3, 275, 280, 518], "dataset": [3, 5, 7, 8, 16, 39, 41, 44, 47, 72, 74, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 210, 219, 220, 227, 229, 230, 232, 233, 234, 235, 236, 248, 258, 259, 263, 264, 265, 267, 269, 275, 299, 300, 301, 305, 306, 307, 309, 336, 382, 390, 393, 396, 404, 409, 413, 414, 415, 426, 438, 515, 517, 518, 519, 547, 548, 553, 554, 564, 570, 571, 574, 580, 581, 582], "imagenet": [3, 5, 201, 204, 212, 239, 242, 249, 275, 578, 579, 581, 582], "ilsvrc2012": [3, 275], "under": [3, 4, 133, 145, 201, 239, 361, 546, 549, 563, 564, 568, 570, 571, 574, 578, 580], "file": [3, 8, 72, 162, 168, 177, 179, 180, 187, 188, 199, 200, 201, 204, 215, 216, 225, 237, 238, 239, 242, 251, 252, 253, 256, 258, 259, 263, 269, 270, 271, 272, 273, 275, 282, 283, 286, 291, 295, 297, 299, 300, 301, 305, 332, 335, 336, 361, 362, 367, 368, 369, 370, 371, 372, 373, 374, 426, 463, 472, 476, 486, 502, 509, 510, 516, 517, 518, 530, 534, 538, 540, 542, 543, 546, 549, 553, 557, 559, 563, 564, 566, 567, 570, 573, 578, 579], "input": [3, 8, 39, 41, 46, 48, 70, 71, 72, 74, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 98, 99, 100, 101, 105, 107, 108, 109, 110, 111, 112, 114, 117, 118, 127, 128, 130, 131, 132, 133, 138, 139, 145, 162, 168, 170, 174, 187, 188, 199, 200, 201, 203, 212, 215, 216, 218, 220, 221, 226, 237, 238, 239, 241, 249, 251, 252, 253, 254, 255, 256, 258, 259, 263, 268, 275, 279, 281, 286, 291, 300, 305, 308, 309, 314, 317, 318, 319, 324, 331, 336, 362, 364, 375, 398, 403, 404, 406, 409, 410, 411, 412, 413, 446, 449, 456, 457, 458, 460, 472, 476, 481, 484, 490, 515, 518, 524, 546, 548, 549, 551, 553, 556, 558, 559, 564, 565, 566, 570, 573, 574, 578, 579, 581], "aim": [3, 548, 571, 580], "accord": [3, 8, 46, 74, 145, 187, 199, 200, 201, 210, 213, 216, 237, 238, 239, 248, 250, 252, 259, 281, 298, 299, 319, 324, 334, 337, 339, 340, 342, 344, 347, 516, 549, 553, 570, 571, 575, 579, 580], "note": [3, 4, 7, 39, 41, 44, 47, 72, 74, 81, 259, 263, 286, 291, 297, 305, 324, 332, 345, 398, 409, 413, 546, 547, 553, 554, 558, 570, 574, 578, 580, 581], "regist": [3, 8, 39, 65, 175, 177, 201, 205, 208, 209, 210, 213, 216, 218, 223, 226, 239, 243, 246, 247, 248, 250, 252, 253, 259, 266, 267, 284, 285, 286, 287, 288, 289, 291, 294, 296, 298, 308, 309, 320, 321, 324, 330, 331, 333, 334, 339, 347, 547, 549, 553, 564, 567, 580], "inherit": [3, 8, 41, 44, 47, 72, 73, 74, 196, 216, 218, 226, 234, 252, 259, 296, 298, 331, 334, 548], "nasbas": [3, 270, 271, 282, 283], "own": [3, 41, 44, 47, 72, 73, 74, 101, 197, 216, 235, 252, 546, 548, 549, 561, 564, 567, 577], "just": [3, 4, 5, 38, 189, 210, 213, 214, 216, 219, 220, 221, 222, 224, 227, 252, 568, 574, 579, 580], "registri": [3, 294, 296, 298, 321, 324, 331, 333, 334], "well": [3, 4, 38, 187, 188, 336, 549, 574, 576, 581], "wai": [3, 200, 201, 204, 238, 239, 242, 546, 548, 549, 564, 568, 570, 571, 574, 580, 581], "mobilenetv3": [3, 274, 275], "lt": [3, 278, 549, 569], "wmt": 3, "en": 3, "de": 3, "static": [4, 5, 8, 70, 72, 133, 162, 257, 272, 300, 336, 375, 379, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 418, 446, 449, 451, 452, 454, 456, 457, 458, 459, 469, 486, 488, 493, 495, 500, 502, 507, 509, 515, 516, 518, 520, 525, 530, 534, 541, 542, 556, 561, 580, 582], "quantiz": [4, 8, 23, 39, 40, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 116, 120, 122, 124, 130, 136, 138, 139, 142, 144, 145, 155, 170, 174, 175, 177, 179, 187, 188, 212, 219, 220, 226, 249, 254, 256, 257, 258, 259, 269, 300, 301, 317, 338, 339, 340, 341, 342, 344, 345, 346, 347, 352, 353, 356, 357, 361, 362, 374, 379, 409, 411, 417, 498, 506, 518, 522, 546, 547, 548, 549, 553, 556, 558, 559, 561, 563, 564, 565, 566, 567, 568, 572, 576, 578, 579, 580, 581], "involv": 4, "weight": [4, 5, 7, 8, 39, 41, 48, 70, 71, 72, 74, 87, 88, 89, 145, 162, 163, 170, 178, 254, 256, 266, 267, 281, 290, 294, 296, 298, 308, 309, 318, 319, 321, 324, 331, 333, 334, 342, 422, 527, 545, 546, 552, 556, 558, 559, 564, 567, 570, 571, 573, 574, 578, 580, 581], "float": [4, 5, 14, 39, 41, 44, 47, 71, 72, 74, 133, 162, 170, 199, 212, 237, 249, 259, 260, 261, 263, 264, 265, 272, 274, 275, 286, 291, 294, 296, 297, 298, 302, 303, 305, 306, 307, 318, 319, 324, 331, 332, 333, 334, 339, 365, 383, 392, 401, 402, 417, 423, 478, 486, 502, 503, 507, 509, 515, 517, 518, 525, 527, 528, 536, 545, 549, 554, 564, 573, 574, 579], "int": [4, 39, 41, 44, 46, 47, 71, 72, 74, 133, 162, 168, 189, 198, 199, 200, 212, 216, 227, 236, 237, 238, 249, 252, 254, 256, 261, 263, 267, 272, 274, 275, 284, 303, 305, 309, 320, 324, 340, 368, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 408, 409, 410, 411, 412, 413, 414, 416, 460, 495, 502, 503, 505, 507, 508, 509, 510, 511, 517, 518, 520, 525, 527, 530, 542, 549, 564, 570, 573, 579], "feed": [4, 39, 41, 72, 168, 198, 236, 379, 551], "batch": [4, 5, 39, 41, 44, 46, 74, 89, 138, 189, 191, 192, 197, 198, 219, 220, 226, 227, 229, 230, 235, 236, 259, 275, 279, 281, 286, 291, 345, 352, 382, 393, 515, 546, 548, 551, 570, 579, 580, 582], "data": [4, 7, 8, 12, 39, 41, 44, 46, 47, 48, 71, 72, 74, 82, 130, 133, 162, 168, 170, 174, 179, 187, 188, 217, 218, 219, 220, 254, 256, 257, 259, 275, 280, 294, 300, 301, 317, 324, 336, 339, 345, 362, 363, 365, 368, 375, 376, 377, 379, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 426, 442, 443, 446, 449, 453, 458, 461, 462, 463, 465, 468, 470, 475, 479, 482, 485, 487, 492, 495, 502, 515, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 529, 533, 538, 540, 541, 543, 546, 548, 549, 553, 554, 558, 562, 564, 565, 574, 575, 577, 578, 579, 580], "through": [4, 170, 187, 188, 215, 251, 336, 340, 558, 559, 561, 562, 564, 567, 568, 573], "comput": [4, 5, 14, 71, 74, 89, 145, 170, 226, 253, 259, 260, 261, 263, 264, 265, 267, 273, 302, 303, 305, 306, 307, 309, 552, 564, 565, 570, 571, 574, 580], "distribut": [4, 7, 46, 163, 178, 189, 191, 192, 194, 195, 196, 197, 198, 219, 220, 227, 229, 230, 232, 233, 234, 235, 236, 253, 259, 286, 291, 339, 505, 551, 562, 574, 576, 580, 582], "activ": [4, 5, 7, 8, 39, 40, 41, 44, 47, 48, 49, 61, 72, 74, 151, 170, 225, 254, 256, 422, 545, 546, 552, 554, 558, 569, 573, 574, 578, 581], "observ": [4, 554, 577, 578, 580], "point": [4, 5, 48, 70, 71, 212, 249, 264, 265, 284, 306, 307, 320, 339, 545, 554, 564, 574, 579, 580], "record": [4, 199, 200, 201, 207, 218, 225, 237, 238, 239, 245, 549, 577, 578, 580], "These": [4, 561], "infer": [4, 5, 7, 8, 46, 48, 155, 162, 258, 259, 299, 318, 336, 545, 548, 551, 565, 567, 570, 571, 572, 574, 578, 580], "time": [4, 5, 168, 216, 252, 267, 279, 309, 320, 339, 362, 503, 509, 510, 515, 530, 553, 557, 567, 570, 571, 572, 574, 577, 578, 579, 580], "A": [4, 7, 41, 47, 72, 74, 81, 83, 97, 101, 102, 133, 136, 138, 139, 145, 162, 168, 174, 175, 177, 201, 205, 210, 215, 216, 219, 220, 221, 222, 239, 243, 248, 251, 252, 253, 259, 260, 263, 264, 265, 267, 270, 282, 283, 284, 285, 286, 287, 288, 289, 291, 294, 295, 296, 297, 298, 302, 305, 306, 307, 308, 309, 312, 314, 321, 324, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 344, 345, 346, 348, 351, 548, 555, 558, 564, 566, 570, 572, 579, 580, 581], "simpl": [4, 7, 216, 252, 546, 562, 577, 580], "techniqu": [4, 5, 7, 259, 561, 568, 570, 571, 573, 574, 581], "simpli": [4, 296, 553, 566], "divid": [4, 580], "rang": [4, 5, 8, 202, 203, 216, 240, 241, 252, 263, 272, 305, 352, 549, 551, 553, 554, 570, 574, 579], "256": [4, 206, 212, 244, 249, 547, 548, 549, 553, 579, 582], "support": [4, 41, 44, 46, 47, 71, 72, 73, 74, 101, 108, 125, 187, 188, 189, 198, 199, 201, 205, 208, 209, 210, 212, 213, 216, 217, 218, 219, 220, 223, 226, 227, 236, 237, 239, 243, 246, 247, 248, 249, 250, 252, 259, 266, 267, 269, 274, 275, 281, 284, 286, 287, 288, 289, 291, 294, 296, 300, 308, 309, 314, 320, 324, 331, 336, 345, 355, 356, 357, 379, 446, 449, 451, 452, 454, 456, 457, 458, 459, 465, 499, 507, 517, 546, 547, 554, 571, 572, 575, 577, 580, 582], "sophist": 4, "addit": [4, 89, 97, 174, 187, 352, 502, 546, 551, 576], "step": [4, 5, 39, 41, 44, 74, 120, 226, 259, 294, 296, 297, 298, 320, 321, 324, 331, 332, 333, 334, 352, 546, 551, 552, 553, 565, 570, 571, 573, 575, 577, 578, 580], "allow": [4, 5, 223, 339, 534, 546, 547, 551, 553, 554, 564, 565, 573, 581], "u": [4, 97, 163, 178], "instead": [4, 180, 181, 198, 236, 362], "back": [4, 39, 41, 44, 47, 72, 74, 145, 216, 252, 272], "everi": [4, 8, 44, 73, 94, 95, 97, 294, 296, 297, 324, 331, 332, 570, 580], "signific": [4, 7, 572, 574], "speed": [4, 7, 571, 572, 574], "up": [4, 7, 46, 97, 128, 216, 252, 259, 275, 286, 291, 295, 320, 403, 546, 553, 558, 561, 572, 573, 574, 577, 579, 581], "pre": [4, 139, 187, 188, 199, 237, 280, 336, 549, 551, 565, 570, 572, 574, 578, 580], "notabl": 4, "modif": [4, 8, 486, 548, 558], "enabl": [4, 7, 72, 74, 281, 296, 331, 505, 546, 553, 565, 569, 570, 571, 572, 575, 580], "replac": [4, 47, 112, 113, 133, 265, 307, 340, 517, 553, 576], "quantstub": 4, "dequantstub": 4, "begin": [4, 139, 226, 259, 286, 291, 296, 297, 321, 331, 332, 551, 570, 580], "end": [4, 5, 8, 133, 168, 199, 215, 216, 226, 237, 251, 252, 259, 272, 296, 297, 320, 331, 332, 551, 558, 562, 567, 570, 571, 578, 579, 580], "relu6": [4, 101, 558], "_make_divis": 4, "v": [4, 97, 581], "divisor": 4, "min_valu": 4, "none": [4, 8, 14, 39, 41, 44, 46, 47, 48, 70, 71, 72, 74, 90, 117, 133, 139, 145, 162, 168, 170, 174, 179, 180, 181, 184, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 212, 216, 217, 218, 219, 220, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 249, 252, 253, 254, 256, 258, 259, 260, 263, 266, 267, 268, 269, 270, 272, 274, 275, 279, 281, 282, 283, 286, 290, 291, 295, 296, 299, 300, 301, 302, 305, 308, 309, 315, 318, 319, 320, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 352, 353, 355, 356, 361, 362, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 381, 383, 384, 385, 386, 387, 389, 391, 393, 394, 395, 397, 400, 403, 404, 405, 408, 409, 412, 414, 415, 416, 431, 446, 449, 451, 458, 463, 465, 470, 472, 475, 476, 479, 481, 482, 484, 485, 486, 487, 491, 492, 495, 497, 500, 502, 503, 505, 508, 510, 511, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 529, 530, 534, 542, 549, 564, 574, 578, 579, 580], "taken": [4, 187, 188, 336], "tf": [4, 7, 74, 139, 145, 168, 198, 199, 200, 201, 216, 236, 237, 238, 239, 252, 318, 365, 546, 553, 566, 572, 575, 579], "repo": [4, 199, 237, 549, 555], "It": [4, 7, 8, 72, 80, 89, 187, 188, 225, 259, 265, 267, 272, 273, 284, 294, 299, 300, 307, 309, 324, 336, 339, 340, 341, 344, 347, 546, 547, 551, 570, 571, 574, 577, 580, 581], "ensur": [4, 46, 48, 216, 252, 297, 332, 339, 381, 414, 446, 449, 451, 458, 500, 546, 553, 554, 556, 574, 579], "layer": [4, 8, 39, 41, 44, 47, 72, 73, 74, 97, 138, 139, 145, 218, 225, 259, 281, 286, 291, 294, 295, 297, 324, 332, 335, 353, 355, 356, 362, 529, 548, 552, 561, 570, 571, 576], "channel": [4, 8, 70, 71, 163, 178, 212, 216, 249, 252, 275, 279, 294, 324, 446, 449, 458, 561, 562, 570, 571, 579, 582], "number": [4, 5, 72, 94, 95, 175, 177, 189, 197, 200, 212, 216, 227, 235, 238, 249, 252, 264, 265, 267, 274, 283, 294, 306, 307, 309, 324, 331, 334, 339, 356, 357, 449, 505, 515, 518, 546, 549, 553, 554, 564, 570, 574, 577, 579, 580], "divis": 4, "seen": [4, 8, 362], "here": [4, 5, 7, 38, 97, 145, 263, 270, 281, 282, 305, 546, 549, 553, 556, 558, 564, 567, 570, 574, 576, 577], "blob": [4, 170, 260, 261, 264, 265, 294, 302, 303, 306, 307, 324], "master": [4, 260, 261, 264, 265, 294, 297, 302, 303, 306, 307, 324, 332], "research": [4, 563], "slim": [4, 263, 305, 318, 566], "net": 4, "mobilenet": [4, 577, 582], "param": [4, 8, 48, 72, 73, 74, 88, 94, 95, 97, 117, 118, 133, 162, 168, 170, 174, 189, 217, 223, 227, 263, 266, 267, 281, 305, 308, 309, 314, 318, 336, 339, 362, 384, 416, 517, 520, 566, 580], "new_v": 4, "max": [4, 47, 48, 71, 74, 163, 178, 216, 252, 264, 265, 306, 307, 339, 527, 545, 546, 574, 579, 580], "sure": [4, 162, 294, 296, 298, 324, 331, 334, 446, 546], "round": [4, 5, 163, 178, 545, 554, 574], "down": [4, 89], "doe": [4, 5, 14, 260, 263, 272, 302, 305, 337, 549, 554, 564, 576, 579], "go": [4, 340, 558, 573, 579], "10": [4, 7, 201, 239, 263, 305, 339, 495, 546, 549, 562, 573, 579, 580], "convbnrelu": 4, "sequenti": [4, 74, 197, 235, 300, 341, 568, 580], "__init__": [4, 8, 549, 564, 567, 580], "self": [4, 8, 90, 120, 259, 263, 286, 296, 305, 339, 530, 546, 549, 561, 564, 567, 577, 578, 580], "in_plan": 4, "out_plan": 4, "kernel_s": 4, "stride": [4, 216, 252, 579], "group": [4, 333, 434, 561, 570, 571, 578, 579, 580, 582], "pad": [4, 40, 49, 61, 98, 99, 199, 216, 237, 252, 279, 281, 549, 579], "conv2d": [4, 44, 73, 87, 88, 92, 93, 98, 99, 163, 311, 312, 313, 317, 318, 319, 558, 578, 580], "bia": [4, 70, 74, 162, 163, 254, 256, 279, 578], "fals": [4, 5, 8, 39, 41, 44, 46, 47, 48, 70, 72, 74, 90, 98, 99, 117, 120, 127, 133, 136, 147, 154, 159, 163, 166, 167, 168, 188, 189, 191, 194, 195, 196, 198, 199, 201, 212, 216, 217, 218, 219, 220, 225, 227, 229, 232, 233, 234, 236, 237, 239, 249, 252, 263, 266, 267, 272, 273, 274, 275, 279, 280, 281, 294, 305, 308, 309, 317, 324, 347, 355, 434, 453, 502, 505, 510, 511, 517, 536, 542, 548, 549, 558, 564, 567, 573, 574, 578, 579, 581], "batchnorm2d": 4, "momentum": [4, 296, 321, 561, 570, 571, 581], "inplac": [4, 5], "invertedresidu": 4, "inp": 4, "oup": 4, "expand_ratio": 4, "assert": [4, 567], "hidden_dim": 4, "use_res_connect": 4, "pw": 4, "extend": [4, 89], "dw": 4, "skip_add": 4, "forward": [4, 5, 46, 218, 279, 281, 573, 574, 578], "x": [4, 46, 198, 216, 236, 252, 275, 279, 281, 339, 551, 553, 566, 570, 574, 578, 579], "els": [4, 46, 89, 90, 168, 197, 235, 340, 502, 517, 578], "num_class": [4, 267, 309], "1000": [4, 274, 515, 581], "width_mult": 4, "inverted_residual_set": 4, "round_nearest": 4, "v2": [4, 7, 170, 342, 553, 580, 582], "arg": [4, 46, 72, 80, 130, 199, 200, 201, 237, 238, 239, 258, 259, 269, 281, 291, 294, 299, 300, 311, 312, 313, 318, 319, 320, 332, 339, 352, 367, 369, 371, 372, 373, 374, 384, 386, 387, 389, 391, 394, 395, 400, 502, 510, 530, 548, 549, 551, 553, 566, 570, 574, 578, 579], "width": [4, 212, 216, 249, 252, 275, 294, 324, 553, 574, 579, 581], "multipli": [4, 554], "adjust": [4, 5, 275, 324, 574], "amount": 4, "structur": [4, 133, 296, 331, 351, 442, 561, 570, 571, 574, 578, 582], "multipl": [4, 89, 138, 190, 191, 199, 200, 202, 203, 204, 205, 206, 210, 213, 216, 223, 228, 229, 231, 237, 238, 240, 241, 242, 243, 244, 248, 250, 252, 268, 296, 331, 338, 502, 549, 556, 568, 577, 580], "turn": [4, 564], "block": [4, 259, 272, 281, 286, 291, 294, 297, 324, 332, 534, 561, 567, 570, 571], "input_channel": 4, "32": [4, 170, 263, 305, 553, 559, 570, 582], "last_channel": 4, "1280": 4, "c": [4, 97, 101, 201, 239, 546, 549, 557, 562, 580], "n": [4, 97, 200, 216, 238, 252, 261, 294, 303, 324, 505, 549, 551, 570, 571, 579], "16": [4, 34, 570, 582], "6": [4, 7, 44, 546, 558, 574, 580, 582], "24": [4, 34, 580, 582], "96": [4, 263, 305, 582], "160": 4, "320": 4, "onli": [4, 8, 41, 44, 47, 48, 72, 74, 80, 83, 84, 85, 86, 87, 88, 89, 90, 97, 100, 101, 105, 107, 108, 109, 110, 111, 114, 117, 118, 127, 128, 131, 132, 138, 163, 178, 199, 217, 219, 220, 223, 237, 259, 269, 281, 294, 296, 324, 331, 345, 517, 527, 529, 530, 547, 548, 553, 556, 558, 562, 565, 571, 573, 578, 580, 581], "element": [4, 48, 197, 235, 259, 263, 279, 281, 286, 291, 294, 297, 305, 324, 332, 380, 549, 561, 564, 570], "assum": [4, 8, 215, 251, 263, 284, 305, 558], "know": [4, 133, 219, 220, 253, 259, 286, 291, 503, 553, 576], "len": [4, 170, 216, 252, 339, 549, 553, 570, 579], "rais": [4, 14, 89, 94, 95, 97, 108, 133, 218, 260, 263, 266, 267, 294, 295, 296, 302, 305, 308, 309, 324, 331, 335, 339, 517, 530, 570, 571], "valueerror": [4, 14, 89, 94, 95, 97, 108, 133, 260, 263, 267, 302, 305, 309, 557], "empti": [4, 138, 263, 305, 339], "got": [4, 168, 557, 578], "format": [4, 39, 41, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 80, 168, 199, 200, 201, 205, 210, 237, 238, 239, 243, 248, 254, 256, 259, 263, 269, 272, 283, 305, 344, 468, 507, 525, 549, 551, 553, 556, 564, 565, 566, 574], "build": [4, 7, 8, 46, 138, 145, 155, 175, 176, 177, 178, 256, 257, 270, 272, 282, 283, 313, 315, 318, 319, 382, 383, 385, 396, 397, 399, 402, 426, 486, 495, 517, 534, 546, 562, 566, 572, 577, 580], "invert": 4, "residu": [4, 281], "output_channel": 4, "last": [4, 72, 74, 120, 174, 187, 189, 227, 281, 294, 321, 324, 347, 486, 546, 565, 574], "classifi": [4, 199, 237, 267, 309, 340, 549, 551], "dropout": [4, 279, 281], "m": [4, 46, 71, 97, 294, 324, 551, 582], "isinst": 4, "init": [4, 49, 177, 218, 322, 347, 549, 564, 567], "kaiming_normal_": 4, "mode": [4, 8, 38, 39, 41, 44, 47, 52, 70, 71, 72, 74, 133, 208, 217, 246, 259, 263, 305, 318, 331, 347, 362, 382, 509, 546, 547, 561, 574, 575, 580], "fan_out": 4, "zeros_": 4, "elif": 4, "ones_": 4, "normal_": 4, "01": [4, 554, 573, 580, 581, 582], "bn": [4, 39, 89, 108, 582], "prior": [4, 46, 116, 339, 580], "numer": [4, 5, 267, 309, 545, 565, 572], "fuse_model": [4, 5], "fuse_modul": 4, "true": [4, 5, 46, 48, 70, 72, 74, 89, 90, 112, 133, 136, 138, 166, 168, 170, 188, 189, 197, 199, 201, 202, 215, 216, 217, 227, 235, 237, 239, 240, 251, 252, 254, 256, 261, 263, 267, 272, 279, 281, 289, 294, 303, 305, 309, 324, 347, 463, 502, 505, 510, 511, 517, 549, 553, 558, 564, 567, 573, 574, 575, 578, 579, 580, 581], "idx": [4, 284, 549], "str": [4, 14, 39, 41, 46, 47, 48, 72, 133, 162, 170, 175, 177, 189, 199, 200, 201, 205, 208, 209, 210, 212, 213, 216, 218, 223, 227, 237, 238, 239, 243, 246, 247, 248, 249, 250, 252, 254, 256, 257, 260, 261, 263, 265, 266, 267, 272, 274, 275, 284, 289, 302, 303, 305, 307, 308, 309, 311, 312, 313, 319, 324, 344, 352, 355, 363, 364, 365, 368, 375, 376, 377, 379, 381, 382, 385, 386, 387, 389, 392, 393, 394, 395, 396, 397, 398, 401, 404, 405, 406, 408, 409, 414, 415, 416, 417, 422, 423, 426, 428, 429, 430, 431, 432, 434, 443, 444, 446, 447, 449, 451, 452, 453, 454, 456, 457, 458, 459, 461, 462, 463, 465, 467, 468, 470, 472, 475, 476, 479, 481, 482, 484, 485, 486, 487, 490, 491, 492, 495, 502, 504, 505, 507, 509, 510, 513, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 529, 530, 533, 534, 541, 542, 549, 564, 573, 578, 579], "help": [4, 7, 83, 225, 269, 317, 379, 517, 548, 566, 580], "averagemet": 4, "store": [4, 48, 201, 239, 263, 281, 287, 288, 289, 294, 296, 305, 321, 324, 331, 333, 334, 339, 559], "averag": [4, 170, 263, 264, 265, 267, 305, 306, 307, 309, 551, 564, 567, 570, 580], "fmt": 4, "f": [4, 97, 551, 553, 574], "reset": [4, 14, 260, 266, 267, 302, 308, 309, 320, 530, 564], "val": [4, 74, 168, 201, 204, 239, 242, 295, 335, 567], "avg": [4, 5, 574], "sum": [4, 267, 309, 551], "updat": [4, 14, 34, 89, 101, 133, 138, 145, 256, 260, 266, 267, 275, 294, 296, 302, 308, 309, 319, 321, 324, 331, 334, 335, 347, 365, 382, 383, 384, 385, 393, 396, 398, 399, 401, 403, 409, 411, 412, 413, 416, 486, 509, 513, 518, 521, 523, 527, 546, 548, 556, 564, 569, 570, 571, 580], "__str__": 4, "fmtstr": 4, "__dict__": 4, "target": [4, 5, 46, 71, 72, 117, 118, 133, 162, 218, 272, 295, 298, 324, 334, 335, 337, 339, 430, 431, 548, 549, 551, 553, 565, 570, 571, 578, 579, 580, 581], "topk": [4, 547, 548, 553, 564], "over": [4, 5, 7, 201, 205, 210, 239, 243, 248, 263, 267, 305, 309, 339, 561, 564, 573, 580], "k": [4, 267, 309, 564, 570], "top": [4, 133, 216, 252, 258, 259, 267, 286, 291, 299, 309, 564, 579, 582], "specifi": [4, 41, 44, 47, 48, 72, 73, 74, 133, 162, 187, 188, 216, 217, 252, 258, 259, 263, 266, 267, 270, 273, 275, 282, 283, 286, 291, 299, 300, 305, 308, 309, 336, 361, 362, 379, 382, 385, 392, 393, 394, 396, 397, 398, 403, 404, 406, 407, 409, 411, 412, 416, 417, 418, 431, 463, 467, 468, 469, 488, 493, 509, 513, 517, 530, 534, 546, 552, 553, 554, 558, 564, 567, 573, 574, 579, 580, 581], "no_grad": 4, "maxk": 4, "pred": [4, 168, 266, 267, 308, 309, 564], "eq": 4, "expand_a": 4, "re": [4, 72, 74, 339], "correct_k": 4, "keepdim": 4, "mul_": 4, "100": [4, 201, 239, 263, 272, 305, 548, 549, 553, 559, 573, 574, 579, 580, 581, 582], "criterion": [4, 5, 12, 72, 170, 184, 220, 223, 253, 259, 301, 321, 324, 331, 485, 525, 551, 556, 570, 571, 574, 580, 581], "data_load": [4, 5, 8, 47, 74], "neval_batch": [4, 5], "top1": [4, 5, 275, 574], "2f": [4, 5], "top5": [4, 5], "5": [4, 8, 203, 212, 218, 241, 249, 263, 267, 305, 309, 340, 546, 549, 558, 564, 569, 573, 579, 580, 581, 582], "cnt": [4, 5, 324, 551], "imag": [4, 5, 200, 201, 204, 206, 212, 216, 238, 239, 242, 244, 249, 252, 263, 275, 305, 515, 546, 549, 553, 573, 578, 579, 582], "loss": [4, 5, 7, 72, 145, 184, 218, 226, 258, 259, 267, 286, 291, 299, 301, 309, 352, 551, 552, 553, 554, 564, 565, 570, 571, 574, 580, 581], "acc1": 4, "acc5": 4, "print": [4, 5, 170, 267, 309, 546, 551, 553, 564, 580], "load_model": 4, "model_fil": 4, "state_dict": [4, 170, 281, 553, 578], "load": [4, 39, 41, 199, 201, 215, 216, 237, 239, 251, 252, 263, 273, 283, 305, 318, 336, 361, 362, 409, 411, 490, 517, 518, 548, 573, 574], "load_state_dict": 4, "cpu": [4, 5, 119, 120, 121, 122, 130, 133, 162, 275, 561, 565, 569, 572, 573, 575, 578], "print_size_of_model": 4, "temp": 4, "p": [4, 263, 305, 546], "mb": [4, 517], "o": [4, 7, 46, 97, 426, 569], "getsiz": 4, "1e6": 4, "num_calibration_batch": 4, "mymodel": 4, "saved_model_dir": [4, 318], "float_model_fil": 4, "start": [4, 74, 216, 252, 260, 263, 274, 302, 305, 320, 331, 337, 340, 510, 530, 562, 579, 580], "min": [4, 48, 74, 163, 178, 545, 546, 574, 579, 580], "estim": [4, 5, 170, 267, 270, 271, 275, 282, 283, 309, 318, 580], "per": [4, 8, 41, 44, 47, 70, 71, 72, 73, 74, 189, 198, 217, 227, 236, 263, 275, 305, 324, 356, 357, 382, 546, 569, 575, 582], "qconfig": [4, 5, 46, 578], "default_qconfig": 4, "calibr": [4, 8, 39, 40, 41, 44, 46, 47, 49, 72, 174, 175, 177, 179, 187, 188, 258, 259, 299, 300, 301, 336, 356, 357, 526, 548, 559, 561, 574, 580, 581], "data_loader_test": [4, 5], "num_eval_batch": [4, 5], "d": [4, 5, 97, 101, 272, 551, 559], "eval_batch_s": [4, 5], "functool": 4, "partial": [4, 509, 574], "minmaxobserv": 4, "reduce_rang": [4, 48, 70, 573], "dtype": [4, 70, 71, 133, 162, 202, 203, 212, 216, 240, 241, 249, 252, 254, 256, 257, 548, 549, 556, 558, 573, 578, 579, 581], "qint8": 4, "qscheme": 4, "per_tensor_symmetr": 4, "convrelu2d": 4, "activation_post_process": [4, 578], "min_val": [4, 356, 357], "max_val": [4, 356, 357], "quantizedconvrelu2d": 4, "scale": [4, 5, 39, 41, 48, 70, 71, 74, 89, 163, 178, 212, 216, 249, 252, 256, 317, 545, 554, 556, 574, 577, 579], "15583468973636627": 4, "zero_point": [4, 71, 256, 317, 324], "quantizedconv2d": [4, 74], "19358506798744202": 4, "74": [4, 582], "631847": 4, "300": [4, 548], "67": [4, 582], "significantli": [4, 565, 570, 571], "lower": [4, 215, 216, 251, 252, 265, 307, 340, 517, 545, 552, 570, 571, 572, 574, 579, 580], "62": [4, 582], "same": [4, 8, 74, 83, 168, 199, 216, 237, 252, 263, 286, 291, 305, 324, 340, 344, 362, 547, 548, 549, 551, 553, 558, 569, 573, 574, 578, 579, 580], "nevertheless": [4, 5], "did": 4, "reduc": [4, 8, 89, 289, 324, 548, 552, 565, 571, 572, 574, 575, 580, 581], "almost": 4, "decreas": [4, 126], "repeat": [4, 290, 580], "exercis": 4, "recommend": [4, 8, 220, 221, 308, 309, 548, 556, 558, 570, 573, 580], "x86": [4, 565], "basi": 4, "histogram": [4, 353, 356, 362, 406, 409, 417, 578], "collect": [4, 46, 71, 74, 210, 213, 214, 216, 219, 220, 221, 222, 224, 248, 250, 252, 260, 265, 266, 267, 302, 307, 308, 309, 353, 356, 362, 363, 468, 492, 503, 505, 517, 518, 556, 574, 578, 580], "pick": 4, "manner": [4, 551, 566], "per_channel_quantized_model": 4, "get_default_qconfig": 4, "fbgemm": [4, 5, 545], "jit": [4, 578], "script": [4, 38, 260, 261, 264, 265, 302, 303, 306, 307, 364, 365, 451, 468, 470, 472, 475, 476, 478, 479, 481, 482, 484, 485, 490, 553, 561, 572], "scripted_quantized_model_fil": 4, "histogramobserv": 4, "perchannelminmaxobserv": 4, "per_channel_symmetr": 4, "76": [4, 582], "increas": [4, 550, 561, 580], "resnet50": [4, 7, 275, 553, 574, 577, 582], "qat": [5, 72, 256, 259, 269, 552, 553, 556, 561, 574], "simul": 5, "low": [5, 7, 8, 44, 71, 73, 74, 187, 188, 202, 203, 240, 241, 258, 259, 268, 299, 547, 549, 553, 565, 572, 574, 580], "precis": [5, 7, 8, 39, 41, 44, 47, 72, 73, 74, 187, 188, 258, 259, 263, 265, 267, 268, 299, 305, 307, 309, 320, 337, 340, 347, 379, 390, 393, 394, 404, 405, 406, 407, 408, 409, 414, 438, 467, 472, 474, 475, 476, 499, 518, 521, 523, 545, 546, 547, 552, 553, 558, 561, 572, 573, 574, 580], "fake": [5, 74, 136, 574], "dure": [5, 46, 74, 89, 145, 272, 275, 281, 294, 298, 300, 317, 324, 334, 511, 565, 566, 567, 568, 570, 571, 574, 578, 581], "backward": [5, 263, 305, 352, 551, 553, 570, 574, 576], "mimic": [5, 574], "still": [5, 259, 286, 291, 297, 332, 574, 575], "thu": [5, 263, 305, 574], "made": [5, 8, 97, 273, 275, 342, 574, 576, 580], "while": [5, 7, 8, 41, 74, 281, 296, 331, 339, 546, 548, 561, 565, 573, 574], "fact": [5, 574], "ultim": [5, 574], "usual": [5, 39, 41, 44, 47, 72, 74, 199, 237, 259, 286, 291, 548, 551, 568, 574], "yield": [5, 187, 188, 197, 219, 220, 235, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 574, 580], "either": [5, 188, 263, 305, 347, 565, 568, 573, 574], "dynam": [5, 8, 89, 189, 227, 254, 256, 300, 370, 548, 551, 556, 561, 572, 580, 582], "training_func_for_nc": 5, "epoch": [5, 226, 253, 259, 286, 291, 296, 297, 331, 332, 352, 551, 553, 570, 581], "30": [5, 7, 216, 252, 547, 548, 561, 579, 582], "sgd": [5, 184, 223, 301, 573, 581], "lr": [5, 553], "0001": [5, 184, 301, 573], "nepoch": [5, 551], "train_load": [5, 553], "zero_grad": [5, 551, 553, 570], "break": [5, 551, 553], "freez": [5, 116, 570, 571], "disable_observ": 5, "norm": [5, 281], "varianc": [5, 163, 178], "intrins": 5, "freeze_bn_stat": 5, "get_default_qat_qconfig": 5, "final": [5, 89, 296, 324, 331, 509, 567, 570, 571, 574, 576, 580], "alreadi": [5, 8, 201, 215, 217, 239, 251, 503, 530, 546, 549, 561, 580], "implement": [5, 7, 14, 41, 44, 47, 72, 73, 74, 79, 80, 81, 82, 85, 86, 91, 92, 93, 96, 98, 99, 100, 102, 104, 105, 107, 109, 110, 111, 114, 116, 117, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 167, 187, 188, 194, 197, 198, 199, 201, 205, 210, 232, 235, 236, 237, 239, 243, 248, 260, 266, 267, 289, 294, 298, 302, 308, 309, 324, 331, 332, 333, 334, 336, 342, 347, 547, 548, 549, 571, 576, 578, 580, 581], "hook": [5, 72, 187, 218, 225, 226, 253, 259, 286, 291, 347, 355, 551, 570, 578], "prepare_qat": [5, 226, 259], "high": [5, 71, 202, 203, 240, 241, 549, 562, 572, 580], "accur": 5, "switch": [5, 72, 112, 578], "better": [5, 74, 124, 187, 188, 284, 336, 552, 564, 565, 570, 571, 572, 574, 577, 580], "match": [5, 133, 145, 215, 251, 263, 264, 305, 306, 551, 554], "zero": [5, 48, 70, 71, 216, 252, 259, 267, 286, 291, 294, 296, 297, 309, 324, 331, 332, 545, 570, 571, 579, 580], "fine": [5, 7, 199, 237, 331, 549, 572, 574], "tune": [5, 7, 8, 39, 41, 44, 46, 47, 72, 74, 179, 187, 188, 199, 201, 237, 239, 258, 259, 299, 301, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 362, 374, 393, 401, 402, 409, 411, 415, 438, 468, 473, 486, 498, 506, 518, 522, 546, 548, 549, 553, 554, 561, 563, 565, 567, 572, 575, 576, 577, 578, 581], "num_train_batch": 5, "20": [5, 7, 216, 252, 274, 569, 579, 581, 582], "train_one_epoch": 5, "qat_model": 5, "devic": [5, 46, 117, 118, 119, 120, 121, 122, 125, 130, 133, 154, 159, 162, 167, 218, 275, 551, 570, 573], "quantized_model": 5, "yaml": [5, 8, 72, 73, 74, 179, 180, 181, 187, 188, 199, 201, 217, 226, 237, 239, 253, 258, 259, 269, 270, 271, 282, 283, 286, 291, 299, 300, 301, 335, 336, 361, 362, 363, 367, 368, 369, 370, 371, 373, 374, 376, 377, 461, 463, 470, 475, 479, 482, 485, 517, 528, 549, 551, 554, 559, 564, 567, 570, 573, 578, 579], "q_func": [5, 8, 39, 41, 44, 47, 72, 74, 187, 188, 259, 299, 300, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 580], "eval_dataload": [5, 7, 187, 188, 226, 258, 259, 269, 300, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 548, 559, 580], "val_load": [5, 574], "timeout": [5, 188, 347, 527, 554, 573, 580, 581], "constrain": 5, "71": [5, 582], "close": [5, 163, 178], "debug": [5, 419, 420, 424, 546, 580], "analyz": [5, 133, 162, 318, 570, 571, 577, 578], "limit": [5, 339, 551, 570, 578], "sinc": [5, 14, 258, 259, 260, 286, 291, 299, 302, 486, 551, 554, 556, 564, 568], "actual": [5, 74, 267, 309, 553], "arithmet": [5, 558], "easili": [5, 8, 567, 570, 571], "relat": [5, 253, 259, 263, 277, 278, 286, 291, 294, 305, 333, 355, 445, 448, 450, 455, 535, 538, 539, 540, 543, 581], "center": [6, 7, 216, 252, 579, 580], "work": [6, 258, 259, 286, 291, 299, 548, 551, 570, 571, 575, 576, 578], "guidelin": [6, 7], "popular": [7, 8, 259, 549, 551, 556, 570, 574, 580], "compress": [7, 226, 259, 286, 291, 352, 551, 561, 567, 568, 570, 571, 572, 574], "mainstream": 7, "deep": [7, 8, 181, 545, 548, 561, 562, 565, 572, 574, 580], "learn": [7, 8, 281, 545, 548, 549, 556, 559, 561, 562, 565, 570, 571, 572, 574, 578, 580], "framework": [7, 8, 39, 41, 44, 46, 47, 72, 74, 179, 190, 191, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 213, 216, 218, 219, 220, 223, 228, 229, 231, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 250, 252, 258, 259, 266, 267, 268, 275, 299, 300, 308, 309, 311, 312, 313, 314, 315, 317, 318, 319, 345, 347, 355, 364, 379, 390, 407, 409, 414, 416, 418, 438, 446, 449, 451, 452, 458, 465, 467, 472, 476, 481, 484, 488, 499, 505, 517, 518, 545, 546, 548, 549, 553, 554, 555, 559, 561, 562, 564, 565, 570, 572, 574, 578, 579, 580, 581, 582], "mxnet": [7, 8, 46, 194, 198, 201, 204, 205, 208, 209, 210, 213, 216, 232, 236, 239, 242, 243, 246, 247, 248, 250, 252, 258, 259, 266, 267, 299, 308, 309, 315, 336, 555, 558, 561, 565, 566, 573, 580, 581], "formerli": 7, "known": [7, 219, 220, 339, 556, 570, 578, 580], "tool": [7, 8, 168, 362, 548, 563, 572, 574], "deliv": [7, 572], "unifi": [7, 8, 190, 193, 210, 258, 259, 299, 509, 548, 559, 561, 566], "interfac": [7, 41, 44, 47, 72, 73, 74, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 102, 104, 105, 107, 108, 109, 110, 111, 114, 116, 117, 118, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 136, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 167, 180, 184, 190, 193, 210, 258, 259, 274, 275, 286, 291, 299, 300, 301, 320, 347, 355, 356, 357, 363, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 479, 485, 492, 504, 561, 574, 576], "across": [7, 48, 258, 259, 268, 299, 550, 570, 571], "technologi": [7, 201, 239, 569], "prune": [7, 23, 162, 226, 259, 287, 288, 289, 291, 292, 294, 295, 296, 298, 300, 301, 319, 321, 322, 324, 331, 333, 334, 335, 352, 373, 380, 393, 399, 409, 411, 438, 446, 458, 473, 498, 506, 517, 522, 553, 558, 561, 568, 572, 574, 581], "knowledg": [7, 218, 253, 259, 552, 561, 566, 581], "distil": [7, 23, 184, 218, 225, 226, 259, 301, 352, 561, 568, 581], "driven": [7, 565, 567, 578], "strategi": [7, 8, 11, 39, 41, 44, 46, 47, 72, 74, 174, 201, 239, 259, 299, 301, 379, 401, 499, 517, 527, 553, 561, 572, 573, 574, 575, 576, 581], "quickli": [7, 580], "find": [7, 8, 71, 94, 95, 97, 168, 267, 283, 284, 309, 317, 339, 362, 463, 533, 546, 570, 577, 578, 580], "predefin": [7, 368, 404, 408, 409, 517], "sparsiti": [7, 259, 286, 290, 291, 294, 296, 297, 298, 318, 319, 324, 331, 332, 334, 549, 561, 570, 571, 582], "goal": [7, 179, 188, 253, 258, 259, 286, 291, 299, 301, 336, 347, 518, 568, 574, 580], "teacher": [7, 184, 218, 253, 259, 281, 301, 551, 552, 582], "student": [7, 199, 218, 225, 237, 253, 259, 549, 551, 552, 582], "ai": [7, 572, 575], "oneapi": [7, 562, 572], "analyt": [7, 562, 572], "visit": [7, 582], "websit": [7, 562], "io": [7, 46, 548], "7": [7, 547, 548, 557, 558, 562, 574, 576, 580], "releas": [7, 504, 517, 560, 562], "binari": [7, 53, 168, 267, 279, 281, 309, 557, 564], "stabl": [7, 546, 562, 572], "basic": [7, 215, 251, 270, 282, 294, 301, 324, 343, 347, 561, 562, 573, 577], "pip": [7, 546, 553, 557, 562, 576], "Or": [7, 296], "full": [7, 71, 74, 199, 200, 201, 217, 237, 238, 239, 259, 546, 549, 557, 562, 563], "nightli": [7, 546, 562], "git": [7, 546, 562], "clone": [7, 546, 562], "cd": [7, 546, 553, 562], "r": [7, 71, 97, 163, 178, 275, 546, 562, 569, 574, 582], "txt": [7, 204, 242, 510, 546, 549, 562], "pypi": [7, 546, 562], "found": [7, 253, 259, 270, 271, 282, 283, 317, 339, 345, 501, 517, 534, 546, 565, 580], "fp32": [7, 8, 39, 41, 44, 70, 72, 73, 74, 119, 121, 163, 170, 178, 187, 188, 254, 256, 267, 309, 340, 344, 361, 417, 546, 558, 564, 565, 573, 574, 575, 576, 577, 578, 580, 581, 582], "wget": 7, "storag": [7, 263, 305, 564], "googleapi": 7, "v1_6": 7, "mobilenet_v1_1": 7, "0_224_frozen": 7, "pb": [7, 74, 318, 336, 454, 457, 468, 553, 566, 578, 582], "dummi": [7, 202, 203, 240, 241, 257, 267, 309, 409, 413, 519, 546, 549, 564], "shape": [7, 133, 145, 162, 202, 203, 212, 216, 240, 241, 249, 252, 263, 279, 281, 294, 305, 324, 438, 445, 446, 449, 458, 460, 498, 546, 549, 558, 579], "224": [7, 212, 249, 275, 547, 548, 549, 553, 556, 579, 581], "search": [7, 14, 23, 97, 180, 187, 188, 258, 259, 260, 270, 271, 272, 274, 275, 282, 283, 284, 285, 299, 302, 339, 341, 342, 346, 404, 405, 432, 561, 564, 572, 578, 580], "jupyt": 7, "lab": 7, "manag": [7, 272, 273, 274, 275, 381, 414, 416, 439, 500, 516], "click": [7, 546, 561, 572, 578], "12": [7, 33, 546], "onnxruntim": [7, 8, 47, 195, 233, 259, 268, 421, 425, 554, 561, 573], "raw": [7, 200, 204, 207, 238, 242, 245, 344, 564, 580], "vision": 7, "classif": [7, 199, 216, 237, 252, 267, 297, 309, 332, 551, 564, 572], "resnet": [7, 553, 582], "v1": [7, 34, 35, 36, 74, 168, 211, 212, 249, 264, 265, 267, 306, 307, 309, 318, 553, 564, 566, 576, 577, 582], "inc_bench": [7, 301, 498, 546], "xeon": [7, 563, 565, 569, 572, 574, 575, 582], "scalabl": [7, 565, 569, 572, 574, 575, 582], "skylak": 7, "cascad": 7, "lake": [7, 565, 572], "cooper": [7, 565, 572], "icelak": 7, "futur": [7, 89, 187, 188, 219, 220, 561, 565], "sapphir": 7, "rapid": 7, "flex": 7, "seri": [7, 212, 249, 579], "amd": [7, 561, 582], "arm": [7, 561, 582], "nvidia": [7, 561, 570, 574, 582], "cento": [7, 510], "ubuntu": [7, 569], "04": [7, 507, 569, 582], "11": [7, 36, 507, 546, 564, 565], "variabl": [7, 145, 201, 217, 239, 259, 268, 274, 333, 339, 505, 530, 546, 571, 580], "tf_enable_onednn_opt": [7, 546], "onednn": [7, 545], "420": [7, 561], "speedup": [7, 561, 574], "geomean": [7, 561], "2x": [7, 561, 569], "vnni": [7, 561, 573, 574], "minim": [7, 163, 178, 339, 551, 564, 570, 571, 574, 580], "avail": [7, 9, 11, 12, 16, 23, 30, 31, 38, 314, 379, 384, 386, 387, 391, 394, 395, 400, 465, 546, 561, 569, 580], "overview": 7, "dive": [7, 558], "mix": [7, 8, 74, 337, 474, 475, 476, 523, 561], "orchestr": [7, 352, 561], "benchmark": [7, 12, 39, 41, 44, 74, 219, 220, 259, 300, 301, 320, 383, 390, 393, 403, 409, 411, 414, 415, 438, 498, 499, 509, 515, 532, 537, 548, 566, 580, 581, 582], "tensorboard": [7, 8, 39, 41, 44, 47, 72, 74, 352, 355], "coder": [7, 561, 572], "topic": 7, "adaptor": [7, 11, 175, 177, 226, 259, 355, 561, 575, 576, 578], "togeth": [7, 216, 252, 294, 300, 324, 548, 551, 562, 572, 578, 579], "tencent": [7, 572], "deepen": [7, 572], "cloud": [7, 572], "foundat": [7, 572], "digit": [7, 260, 302, 572], "intellig": [7, 572], "industri": [7, 549, 564, 572], "dec": [7, 572], "2022": [7, 33, 34, 35, 36, 582], "fast": [7, 572], "achiev": [7, 258, 259, 299, 556, 564, 568, 570, 571, 572, 574, 578, 580], "sota": [7, 572], "nov": [7, 572], "virtual": [7, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 167, 572], "applianc": [7, 572], "packag": [7, 8, 339, 370, 378, 384, 386, 387, 389, 390, 391, 394, 395, 398, 400, 419, 420, 424, 427, 433, 435, 438, 439, 445, 464, 466, 471, 474, 477, 478, 480, 483, 489, 494, 498, 532, 546, 557, 562, 572, 576, 580], "bitnami": [7, 572], "diffus": [7, 572], "few": [7, 546, 572, 580], "distilbert": [7, 199, 237, 549, 572, 582], "oct": [7, 572], "innov": [7, 572], "acceler": [7, 551, 570, 571, 572, 575, 580], "legal": [7, 560], "secur": [7, 569, 572], "resum": [7, 187, 188, 337, 338, 341, 342, 345, 346, 347, 352], "solut": [8, 163, 178, 272, 557, 572, 580], "onnx": [8, 47, 48, 61, 70, 71, 195, 233, 254, 255, 256, 257, 311, 312, 313, 317, 319, 352, 365, 468, 555, 556, 558, 561, 565, 566, 572, 573, 574, 580], "runtim": [8, 510, 554, 555, 558, 561, 573, 574], "bridg": [8, 561], "vanilla": [8, 561], "complet": [8, 90, 546, 580, 581, 582], "subclass": [8, 39, 65, 175, 177, 194, 198, 201, 205, 208, 209, 210, 213, 216, 223, 232, 236, 239, 243, 246, 247, 248, 250, 252, 266, 267, 284, 287, 288, 289, 294, 296, 298, 308, 309, 320, 324, 330, 331, 334, 347], "adaptor_registri": [8, 39], "abc": [8, 136, 265, 307, 446, 509, 578, 580], "abcadaptor": 8, "framework_specific_info": [8, 39, 41, 44, 47, 72, 74], "tune_cfg": [8, 39, 41, 44, 46, 47, 72, 74, 174, 340, 580], "postprocess": [8, 39, 41, 44, 47, 72, 74, 210, 213, 216, 217, 220, 248, 250, 252, 258, 259, 269, 281, 299, 300, 301, 520, 525, 547, 548, 578, 579], "query_fw_cap": [8, 39, 41, 44, 47, 72, 74], "query_fused_pattern": [8, 39], "awar": [8, 39, 41, 44, 47, 72, 74, 170, 190, 193, 210, 226, 259, 269, 294, 299, 300, 342, 347, 552, 553, 556, 561, 565, 568, 580, 582], "convers": [8, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 81, 108, 259, 269, 565, 574, 575], "he": 8, "intersect": [8, 267, 309, 564], "decid": [8, 74, 138, 139, 261, 296, 303, 426, 554, 576, 580], "besid": [8, 551, 568], "describ": [8, 41, 47, 72, 74, 275, 546, 558, 578], "op": [8, 39, 40, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 83, 87, 89, 92, 93, 96, 97, 98, 99, 101, 108, 112, 113, 116, 119, 120, 121, 122, 124, 130, 133, 162, 163, 166, 168, 254, 256, 337, 338, 340, 342, 344, 345, 348, 351, 356, 357, 406, 409, 417, 422, 423, 431, 533, 546, 558, 565, 574, 575, 576, 578, 580, 581], "sequenc": [8, 14, 74, 90, 199, 215, 216, 237, 251, 252, 260, 261, 265, 294, 302, 303, 307, 324, 549, 558, 571, 579], "past": 8, "abov": [8, 80, 263, 305, 547, 570], "wa": [8, 162, 486, 546, 572, 580], "hidden": [8, 294, 324, 517, 570], "corner": [8, 216, 252, 579], "effect": [8, 570, 571], "mainten": 8, "difficult": 8, "correspond": [8, 14, 74, 145, 170, 199, 237, 260, 263, 267, 294, 296, 300, 302, 305, 309, 331, 339, 347, 558, 570, 573, 574, 577, 580], "abil": [8, 548, 558], "clear": [8, 14, 138, 197, 235, 260, 266, 267, 275, 302, 308, 309, 558, 564], "fragment": 8, "enumer": [8, 284, 352, 362, 366, 467, 473, 499, 553, 570, 578], "scenario": [8, 38, 379, 546, 547, 551, 570, 571], "doesn": [8, 133, 216, 252, 300, 516, 547, 548, 553, 581], "bf16": [8, 44, 73, 108, 119, 121, 340, 558, 565, 575, 580], "granular": [8, 44, 73, 558, 561, 570, 581], "scheme": [8, 44, 48, 70, 71, 73, 534, 548, 558, 580, 581], "semant": [8, 558], "pattern": [8, 39, 44, 73, 74, 88, 89, 97, 120, 124, 130, 133, 158, 180, 184, 201, 239, 259, 287, 292, 296, 301, 322, 331, 333, 406, 409, 422, 431, 432, 509, 533, 549, 558, 561, 568, 573, 582], "abstract": [8, 39, 44, 46, 73, 83, 84, 85, 86, 87, 88, 89, 90, 100, 105, 107, 108, 109, 110, 111, 114, 117, 118, 127, 128, 131, 132, 136, 145, 216, 218, 252, 253, 258, 259, 266, 267, 283, 285, 289, 294, 298, 299, 308, 309, 311, 312, 313, 315, 317, 318, 319, 320, 324, 334, 347, 368, 380, 446, 457, 458, 479, 491, 509, 533, 559], "querybackendcap": [8, 41, 44, 47, 72, 73, 74], "tensorflowqueri": [8, 74], "look": [8, 558, 564, 567, 581], "microsoft": 8, "mla": [8, 545], "kernel": [8, 505, 569, 570, 580], "becom": [8, 89, 556, 571], "integr": [8, 168, 218, 546], "explor": 8, "attribut": [8, 71, 89, 133, 145, 162, 174, 180, 181, 226, 299, 433, 434, 438, 498, 515, 558, 559, 565, 573, 581], "whether": [8, 46, 47, 48, 72, 74, 138, 139, 168, 189, 197, 199, 212, 216, 227, 235, 237, 249, 252, 253, 259, 261, 263, 267, 281, 286, 291, 294, 296, 303, 305, 309, 324, 340, 362, 468, 549, 564, 579], "qlinear": [8, 201, 208, 239, 246, 267, 309, 556, 582], "qdq": [8, 50, 52, 53, 54, 55, 57, 59, 60, 63, 65, 67, 69, 70, 136, 174, 254, 255, 256, 556, 561, 574], "integ": [8, 145, 253, 259, 263, 267, 284, 294, 296, 298, 305, 309, 324, 331, 334, 356, 357, 574, 580], "qtype": [8, 48, 71], "choic": [8, 199, 237, 546, 549, 564], "float32": [8, 202, 203, 216, 240, 241, 252, 263, 305, 515, 547, 549, 574, 579], "uint8": [8, 71, 212, 249, 263, 305, 356, 357, 545, 549, 558, 573, 574, 579, 581], "node": [8, 46, 48, 54, 56, 65, 69, 70, 71, 74, 77, 80, 81, 82, 83, 89, 90, 91, 94, 95, 97, 101, 113, 126, 133, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161, 162, 168, 254, 255, 256, 311, 312, 313, 317, 318, 319, 415, 428, 429, 430, 431, 432, 433, 438, 446, 449, 456, 457, 458, 495, 496, 498, 546, 553, 578], "exclud": [8, 113, 279, 281], "onnxrt": [8, 9, 71, 199, 201, 208, 209, 210, 213, 216, 237, 239, 246, 247, 248, 250, 252, 266, 267, 308, 309, 420, 421, 436, 438, 445, 498], "onnxrt_qlinearopsadaptor": [8, 47], "dump_elapsed_tim": [8, 362], "recov": [8, 44, 47, 74, 362, 552], "q_config": [8, 44, 47, 48, 70, 73, 74, 254, 256], "inspect_tensor": [8, 39, 41, 44, 47, 72, 74], "op_list": [8, 39, 41, 44, 47, 72, 74, 344, 578], "iteration_list": [8, 39, 41, 44, 47, 72, 74], "inspect_typ": [8, 39, 41, 44, 47, 72, 74, 417], "save_to_disk": [8, 39, 41, 44, 47, 72, 74], "save_path": [8, 44, 47, 74, 254, 256, 311, 312, 313, 317, 319, 352, 566], "quantization_cfg": [8, 44, 47, 74], "set_tensor": [8, 39, 41, 44, 47, 72, 74], "tensor_dict": [8, 39, 41, 44, 47, 72, 74], "input_graph": [8, 47, 154, 155, 159, 162, 163, 364, 472, 476, 481, 484, 491], "fp32_baselin": [8, 41, 44, 47, 72, 74, 355], "diagnosis_help": 8, "fp32_model": [8, 72, 74, 170, 254, 256, 319, 344, 362, 548], "int8_model": [8, 254, 256], "experiement": 11, "deprec": [11, 253, 259, 517, 579], "bilingu": [14, 260, 302], "understudi": [14, 260, 302], "qualiti": [14, 260, 302], "text": [14, 215, 216, 251, 252, 260, 265, 297, 302, 307, 332, 563, 572, 579, 582], "machin": [14, 260, 278, 302, 377, 546, 556, 562, 572, 578], "translat": [14, 74, 260, 261, 272, 275, 278, 280, 302, 303], "natur": [14, 260, 302], "anoth": [14, 39, 41, 74, 133, 216, 252, 259, 260, 269, 302, 352, 548, 551, 579, 580], "approxim": [14, 260, 261, 302, 303, 564], "glue": [14, 260, 267, 302, 309, 549, 564], "word": [14, 215, 251, 260, 302, 564, 582], "piec": [14, 215, 251, 260, 302, 556, 564], "decod": [14, 211, 212, 249, 260, 281, 302, 564, 579], "id": [14, 33, 34, 35, 36, 215, 217, 251, 260, 262, 263, 264, 265, 302, 304, 305, 306, 307, 382, 383, 385, 386, 387, 389, 392, 393, 394, 395, 396, 398, 399, 401, 402, 430, 431, 434, 502, 564, 577, 580], "token": [14, 199, 210, 213, 216, 237, 248, 250, 252, 259, 260, 261, 281, 301, 302, 303, 530, 534, 546, 549, 564, 577, 579, 580], "By": [14, 38, 260, 302, 564, 566, 580], "ngram": [14, 260, 302, 564], "breviti": [14, 260, 261, 302, 303, 564], "penalti": [14, 260, 261, 302, 303, 564], "beam": [14, 260, 302, 564], "cach": [14, 199, 237, 260, 302, 447, 534, 557, 574], "error": [14, 72, 170, 260, 267, 273, 300, 302, 309, 344, 501, 529, 564, 580], "occur": [14, 260, 302], "length": [14, 199, 216, 237, 252, 260, 263, 281, 302, 305, 549, 564, 574, 579], "bleu_scor": [14, 260, 261, 302, 303], "schedul": [23, 259, 292, 296, 301, 322, 331, 333, 352, 568], "mixedprecis": [23, 259, 268, 371, 475, 523, 565], "architectur": [23, 217, 270, 271, 281, 282, 283, 285, 551, 562, 570, 571, 572], "na": [23, 180, 259, 301, 314, 561], "pruning_support": 33, "revis": [33, 34, 35, 36], "644ec953a7dc": 33, "6ece06672ed3": [33, 34], "date": [33, 34, 35, 36, 337, 486], "09": [33, 582], "17": [33, 582], "22": [33, 36, 507, 510, 582], "310141": 33, "14": [34, 35, 254, 256, 556, 582], "6f0d0f71d92e": [34, 35], "08": [34, 216, 252, 579, 582], "31": [34, 582], "07": [34, 35, 581, 582], "229939": 34, "update_dataload": 34, "db_session": [34, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 408, 409, 411, 413, 416], "sqlalchemi": [34, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 408, 409, 411, 413, 414, 416, 557, 562], "orm": [34, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 408, 409, 411, 413, 416], "session": [34, 168, 198, 236, 318, 381, 382, 383, 384, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 408, 409, 411, 413, 414, 416, 578, 580], "exist": [34, 80, 162, 181, 217, 218, 263, 283, 305, 317, 318, 383, 403, 409, 411, 412, 449, 500, 516, 517, 564, 570, 580], "databas": [34, 201, 239, 381, 382, 383, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 411, 412, 413, 414, 486, 500, 516], "update_transform": 34, "13": [35, 36, 336, 546, 582], "9e89549a08c8": [35, 36], "29": [35, 582], "41": [35, 582], "291905": 35, "03": [36, 507, 582], "34": [36, 582], "52": [36, 582], "916541": 36, "run_migrations_offlin": 38, "migrat": [38, 500], "context": [38, 46, 573], "url": [38, 201, 239, 463, 530, 563], "engin": [38, 274, 381, 393, 414], "though": [38, 281], "skip": [38, 320, 578, 580], "creation": [38, 378], "even": [38, 89, 546, 570], "dbapi": 38, "execut": [38, 41, 44, 47, 72, 74, 77, 80, 166, 226, 253, 259, 270, 271, 282, 286, 291, 296, 299, 300, 331, 336, 355, 361, 363, 364, 365, 382, 393, 396, 403, 409, 411, 412, 468, 470, 472, 475, 476, 479, 480, 481, 482, 484, 485, 487, 492, 495, 499, 502, 510, 511, 533, 546, 551, 565, 568, 570, 571, 574, 577, 580, 582], "emit": 38, "string": [38, 39, 41, 44, 47, 70, 71, 72, 73, 74, 83, 90, 133, 138, 139, 162, 168, 179, 180, 199, 201, 218, 223, 237, 239, 253, 256, 258, 259, 260, 263, 269, 270, 271, 274, 282, 283, 284, 286, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 313, 318, 319, 324, 331, 332, 333, 334, 335, 336, 355, 356, 357, 362, 375, 495, 517, 541, 564, 579], "run_migrations_onlin": 38, "associ": [38, 263, 305, 404, 405], "connect": [38, 296, 321, 393, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 546, 570, 571, 577], "cl": [39, 72, 175, 177, 201, 205, 208, 209, 210, 213, 216, 218, 223, 239, 243, 246, 247, 248, 250, 252, 284, 289, 294, 296, 298, 320, 324, 330, 331, 333, 334, 347], "quanit": [39, 44, 47], "chosen": [39, 41, 546], "option": [39, 41, 44, 47, 48, 72, 74, 133, 162, 184, 187, 188, 189, 199, 216, 218, 227, 237, 252, 254, 256, 259, 263, 269, 274, 275, 281, 294, 300, 301, 305, 324, 336, 352, 362, 368, 381, 382, 383, 385, 392, 393, 396, 398, 399, 401, 402, 404, 409, 414, 417, 446, 453, 456, 457, 458, 463, 472, 476, 485, 486, 488, 493, 502, 503, 507, 510, 515, 517, 518, 520, 523, 525, 526, 527, 536, 542, 547, 548, 549, 554, 558, 565, 577, 579, 580, 581], "categori": [39, 41, 74, 201, 239, 262, 263, 304, 305, 549], "mini": [39, 41, 44, 74, 582], "boolean": [39, 41, 44, 46, 74, 83, 274, 331, 517], "inspect": [39, 41, 44, 47, 72, 74, 546, 576, 578], "capabl": [39, 41, 44, 46, 47, 72, 73, 74, 347, 558, 565, 573, 574, 580, 581], "queri": [39, 41, 44, 46, 47, 72, 74, 133, 138, 145, 168, 279, 281, 340, 384, 391, 400, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 574], "dump": [39, 41, 44, 47, 48, 72, 74, 133, 254, 256, 362, 372, 486, 507, 518, 530, 574, 578], "contain": [39, 41, 44, 46, 47, 72, 74, 83, 94, 95, 97, 101, 133, 136, 162, 168, 170, 179, 187, 188, 199, 200, 201, 237, 238, 239, 253, 254, 256, 258, 259, 263, 264, 265, 269, 272, 277, 278, 286, 287, 288, 289, 291, 294, 295, 296, 297, 298, 299, 301, 305, 306, 307, 324, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 361, 366, 370, 378, 384, 386, 387, 389, 390, 391, 394, 395, 398, 400, 404, 409, 414, 419, 420, 424, 427, 433, 438, 439, 445, 464, 471, 473, 474, 477, 478, 480, 483, 489, 494, 498, 502, 510, 548, 549, 551, 561, 564, 570, 571, 578, 580], "bool": [39, 41, 46, 47, 48, 72, 89, 90, 133, 138, 162, 168, 170, 174, 188, 199, 201, 212, 216, 237, 239, 249, 252, 254, 256, 261, 263, 267, 272, 274, 275, 281, 294, 303, 305, 309, 324, 340, 347, 392, 426, 431, 434, 446, 449, 451, 452, 453, 454, 456, 457, 458, 459, 463, 465, 468, 486, 502, 503, 505, 510, 511, 517, 519, 520, 530, 536, 542, 549, 564, 573, 579], "disk": [39, 41, 72, 74], "memori": [39, 41, 72, 101, 258, 259, 286, 291, 299, 548, 552, 565, 567, 570, 571, 574, 580], "numpi": [39, 41, 44, 47, 71, 72, 74, 94, 95, 97, 133, 168, 216, 252, 257, 263, 267, 272, 274, 284, 305, 309, 356, 357, 557, 579], "arrai": [39, 41, 44, 47, 70, 71, 72, 74, 133, 162, 168, 216, 252, 263, 267, 272, 274, 284, 305, 309, 319, 339, 356, 357, 579], "node0_nam": [39, 41, 72, 74], "weight0_nam": [39, 41, 44, 47, 72, 74], "bias0_nam": [39, 41, 44, 47, 72, 74], "node1_nam": [39, 41, 72, 74], "weight1_nam": [39, 41, 72, 74], "bias1_nam": [39, 41, 72, 74], "output0_nam": [39, 41, 72, 74], "output1_nam": [39, 41, 72, 74], "respons": [39, 41, 44, 47, 72, 74, 505, 509, 516, 529, 533, 534, 538, 540, 542, 543, 574], "int32": [39, 41, 44, 47, 72, 74, 254, 256, 549], "someth": [39, 41, 44, 47, 72, 74, 187, 188, 201, 239, 336], "quantize_input": [39, 41, 70, 74], "abl": [39, 41, 74, 108, 187, 188, 215, 251, 336, 570, 574], "where": [39, 41, 44, 48, 71, 72, 74, 145, 263, 267, 279, 281, 283, 285, 294, 305, 309, 324, 551, 554, 570, 578], "destinatin": [39, 41], "destin": [39, 41, 48, 74, 254, 255, 259, 269], "ox_util": 40, "argmax": [40, 49, 61], "binary_op": [40, 49, 61], "concat": [40, 49, 61, 167, 502], "direct_q8": [40, 49, 61], "embed_layernorm": [40, 49, 61], "gather": [40, 46, 48, 49, 61, 294, 324, 505], "gavgpool": [40, 49, 61], "gemm": [40, 49, 61, 570], "lstm": [40, 49, 61], "matmul": [40, 48, 49, 61, 73, 79, 92, 112, 113, 122, 151, 256, 294, 324, 556, 558], "maxpool": [40, 49, 61, 558], "pool": [40, 49, 61], "resiz": [40, 49, 61, 199, 200, 212, 216, 237, 238, 249, 252, 547, 548, 549, 579], "util": [40, 49, 225, 254, 259, 261, 295, 301, 303, 322, 343, 345, 367, 368, 369, 371, 373, 374, 377, 382, 393, 396, 399, 403, 404, 409, 411, 412, 414, 422, 423, 428, 430, 431, 434, 438, 444, 445, 453, 455, 479, 485, 489, 494, 498, 531, 553, 570, 574, 580], "kerasadaptor": 41, "boolen": [41, 47, 72, 74], "compare_label": [41, 44, 47, 72, 74, 267, 309, 564], "pipelin": [41, 44, 47, 72, 74, 253, 259, 270, 271, 282, 297, 300, 552, 568], "get_optype_wise_": [41, 74], "quantizable_op_detail": 41, "get": [41, 44, 46, 47, 48, 72, 73, 74, 94, 95, 97, 133, 138, 145, 162, 168, 174, 175, 177, 179, 181, 189, 192, 210, 213, 216, 217, 223, 225, 226, 227, 230, 248, 250, 252, 256, 257, 258, 259, 268, 275, 279, 285, 286, 291, 294, 296, 298, 299, 300, 301, 317, 318, 319, 320, 321, 324, 331, 333, 334, 339, 344, 356, 357, 362, 363, 368, 375, 376, 377, 379, 382, 385, 386, 387, 389, 392, 393, 394, 395, 396, 397, 398, 403, 404, 406, 408, 409, 410, 411, 412, 413, 416, 417, 418, 421, 425, 426, 431, 443, 446, 447, 449, 451, 452, 456, 457, 458, 460, 463, 465, 467, 468, 469, 470, 475, 479, 482, 485, 486, 488, 492, 493, 495, 497, 504, 505, 509, 513, 515, 517, 518, 520, 524, 527, 529, 530, 533, 534, 538, 540, 541, 542, 543, 546, 547, 548, 549, 561, 562, 580], "wise": [41, 48, 74, 163, 178, 294, 324, 338, 339, 340, 344, 406, 409, 517, 546, 548, 561, 570, 571, 578, 580, 581], "union": [41, 74, 261, 263, 267, 303, 305, 309, 352, 375, 377, 393, 415, 453, 502, 505, 507, 509, 510, 517, 520, 521, 523, 525, 529, 564], "kei": [41, 47, 72, 74, 133, 138, 162, 168, 170, 181, 259, 263, 279, 281, 284, 286, 291, 295, 297, 305, 318, 324, 332, 335, 339, 347, 353, 355, 356, 362, 509, 525, 546, 556, 578], "kerasqueri": 41, "local_config_fil": [41, 44, 47, 72, 74], "get_vers": [41, 44, 47, 73, 74], "infom": [41, 47, 74, 219, 220, 256], "get_precis": [41, 44, 47, 73, 74, 379], "get_op_typ": [41, 44, 47, 72, 73, 74], "compos": [41, 47, 72, 74, 162, 216, 252, 548, 579], "dictionari": [41, 47, 48, 72, 74, 94, 95, 97, 145, 170, 174, 180, 181, 184, 215, 251, 263, 270, 272, 275, 281, 282, 283, 285, 301, 305, 384, 386, 387, 389, 391, 394, 395, 400, 404, 405, 407], "get_quantization_cap": [41, 44, 47, 72, 73, 74], "get_op_types_by_precis": [41, 47, 72, 74], "mxnetadaptor": 44, "nc_model": [44, 46, 286, 291], "unimpl": [44, 47], "mxnetmodel": [44, 315], "data_x": [44, 46], "loader": [44, 46, 187, 188, 300, 336], "modelwis": 44, "opwis": 44, "recover_tuned_model": [44, 74], "mxnetqueri": 44, "g": [44, 47, 73, 272, 274, 300, 324, 509, 551, 570, 571, 576, 580], "fully_connect": 44, "get_fuse_pattern": [44, 73, 74], "etc": [44, 73, 179, 215, 226, 251, 253, 258, 259, 265, 273, 274, 286, 291, 299, 301, 307, 336, 361, 551, 561, 577, 580], "get_mixed_precision_combin": [44, 73, 74], "optyp": [46, 255], "enum": [46, 71, 362, 467, 499], "isiter": 46, "obj": [46, 179, 198, 236, 253, 258, 259, 269, 270, 271, 282, 283, 286, 291, 295, 299, 300, 301, 335, 336, 355, 362], "ensure_list": 46, "check_mx_vers": 46, "mx": [46, 548], "__version__": 46, "combine_cap": 46, "make_nc_model": 46, "sym_model": 46, "ctx": [46, 548], "input_desc": 46, "tupl": [46, 72, 133, 145, 187, 188, 212, 216, 218, 249, 252, 254, 256, 263, 272, 275, 281, 305, 324, 336, 344, 432, 463, 517, 536, 549, 564, 570, 579], "symnet": 46, "aux": 46, "ncmodel": 46, "suppli": [46, 279], "get_framework_nam": [46, 446, 449, 451, 458], "prepare_model_data": 46, "dataloaderwrap": 46, "prepare_model": 46, "create_data_exampl": 46, "prepare_dataload": 46, "ndarray_to_devic": 46, "ndarrai": [46, 94, 95, 97, 133, 216, 252, 272, 274, 319, 339, 353, 356, 557, 579], "is_model_quant": 46, "query_quantizable_nod": 46, "map": [46, 71, 74, 155, 216, 252, 254, 255, 256, 258, 259, 262, 263, 264, 265, 267, 272, 286, 291, 294, 296, 299, 304, 305, 306, 307, 309, 324, 333, 467, 547, 549, 553, 564, 570, 571, 574], "quantize_sym_model": 46, "run_forward": 46, "b_filter": 46, "collector": 46, "pre_batch": 46, "post_batch": 46, "propag": [46, 145], "filter": [46, 199, 200, 201, 202, 203, 204, 206, 210, 237, 238, 239, 240, 241, 242, 244, 248, 259, 301, 385, 426, 449, 519, 549, 561, 570, 571, 578], "make_symbol_block": 46, "gluon": [46, 336, 566], "symbolblock": 46, "make_modul": 46, "parse_tune_config": 46, "quantizable_nod": 46, "distribute_calib_tensor": 46, "calib_tensor": 46, "calib_cfg": 46, "tensor_to_nod": 46, "kl": [46, 353, 356, 357, 558, 580, 581], "minmax": [46, 558, 581], "calib_model": 46, "qsym_model": 46, "calib_data": [46, 548], "calibdata": 46, "threshold": [46, 48, 176, 263, 294, 305, 324, 353, 356, 357, 564], "amp_convert": 46, "amp_cfg": 46, "amp": 46, "dataiterload": 46, "data_it": 46, "collectorbas": 46, "collect_gluon": 46, "arr": [46, 71, 362], "collect_modul": 46, "b": [46, 71, 97, 101, 199, 237, 256, 549, 564, 580], "calibcollector": 46, "include_tensors_kl": 46, "include_tensors_minmax": 46, "num_bin": [46, 353, 356, 357], "8001": [46, 353, 356], "calc_kl_th_dict": 46, "quantized_dtyp": 46, "calcul": [46, 48, 71, 72, 74, 170, 202, 203, 218, 240, 241, 259, 264, 265, 275, 280, 281, 286, 290, 291, 294, 296, 297, 306, 307, 320, 321, 324, 332, 333, 344, 353, 356, 417, 509, 515, 549, 564, 567, 570, 574, 577, 580, 581], "tensorcollector": 46, "include_nod": 46, "qtensor_to_tensor": 46, "preprocess": [46, 199, 210, 213, 216, 237, 248, 250, 252, 253, 259, 281, 548, 553, 579], "namecollector": 46, "onnxruntimeadaptor": 47, "rt": 47, "todo": [47, 199, 202, 237, 240, 263, 305, 356, 357, 515], "func": [47, 218, 300, 517, 534, 581], "onnxdataload": 47, "evalut": 47, "onnxtransform": 47, "onnxmetr": 47, "evaluaton": 47, "visualizaton": 47, "f1": [47, 259, 264, 266, 267, 301, 306, 308, 309, 547, 553, 564, 577, 582], "modelproto": [47, 254, 255, 256, 566], "onnxrt_integeropsadaptor": 47, "onnxrt_qdqadaptor": 47, "onnxrtqueri": 47, "get_graph_optim": 47, "onnxrtaug": 48, "model_wrapp": 48, "dump_op_typ": 48, "black_nod": 48, "white_nod": 48, "cpuexecutionprovid": 48, "augment": 48, "augment_graph": 48, "activation_onli": 48, "weight_onli": 48, "quantization_candid": 48, "get_intermediate_output": 48, "calib_mod": 48, "dump_minmax": 48, "naiv": 48, "dump_calibr": 48, "give": [48, 548, 580], "pair": [48, 70, 130, 138, 565], "minimum": [48, 324, 339, 580], "second": [48, 91, 199, 237, 340, 426, 509, 546, 554, 567, 580, 581], "maximum": [48, 81, 199, 216, 237, 252, 261, 281, 294, 296, 303, 324, 331, 339, 549, 574, 579], "calculate_quantization_param": 48, "quantization_threshold": 48, "param_nam": [48, 375], "dump_tensor": 48, "calculate_scale_zeropoint": 48, "last_nod": 48, "next_nod": 48, "rmin": [48, 71, 545], "rmax": [48, 71, 545], "quantize_rang": [48, 71], "activationoper": 50, "onnx_quant": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69], "onnx_nod": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69], "quantize_check": [50, 53, 54, 56, 58, 60, 64, 65, 66, 67, 68], "quantizaion": [50, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69], "convert_check": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69], "convert_format": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69], "qoper": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70], "removableactivationoper": 50, "qactivationoper": 50, "children": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69], "argmaxoper": 51, "qargmaxoper": 51, "attentionoper": 52, "qattentionoper": 52, "qattent": 52, "binaryoper": 53, "qbinaryoper": 53, "qbinari": 53, "concatoper": 54, "cast": [54, 56, 65, 69, 70, 71, 556, 575, 579], "qconcatoper": 54, "qconcat": 54, "convoper": 55, "qconvoper": 55, "qlinearconv": 55, "direct8bit": 56, "direct8bitoper": 56, "directcastoper": 56, "qdirectoper": 56, "qdirect": 56, "embedlayernorm": 57, "embedlayernormalizationoper": 57, "qembedlayernormalizationoper": 57, "qembedlayernorm": 57, "gatheroper": 58, "qgatheroper": 58, "qgather": 58, "globalaveragepool": 59, "globalaveragepooloper": 59, "qglobalaveragepooloper": 59, "qlinearglobalaveragepool": 59, "gemmoper": 60, "qgemmoper": 60, "qgemm": 60, "lstmoper": 62, "matmuloper": 63, "qmatmuloper": 63, "qlinearmatmul": 63, "maxpooloper": 64, "qmaxpooloper": 64, "qmaxpool": 64, "op_registri": 65, "op_typ": [65, 72, 340, 344, 347, 348, 351], "qop_registri": 65, "padoper": 66, "qpadoper": 66, "qpad": 66, "averagepool": 67, "pooloper": 67, "qpooloper": 67, "qlinearaveragepool": 67, "resizeoper": 68, "qresizeoper": 68, "qresiz": 68, "splitoper": 69, "qsplitoper": 69, "qsplit": 69, "quantization_param": 70, "op_types_to_quant": 70, "fallback_list": 70, "check_opset_vers": 70, "opset": [70, 254, 256], "should_quant": 70, "quantize_model": 70, "merge_dedicated_qdq_pair": 70, "merg": [70, 191, 229, 578, 580], "dedic": 70, "q": [70, 71, 130], "dq": [70, 130], "should_cast": 70, "insert_qdq": 70, "should_convert": 70, "convert_qdq_to_operator_ori": 70, "remove_redundant_pair": 70, "redud": 70, "dtype_cast": 70, "cfg": [70, 74, 98, 99, 180], "keep_io_typ": 70, "quantize_output": 70, "initializer_use_weight_qtyp": 70, "direct_int8": 70, "quantize_bias_tensor": 70, "quantize_bia": 70, "bias_nam": [70, 256], "input_nam": [70, 254, 256, 319, 556], "weight_nam": 70, "beta": [70, 97, 321], "input_scal": 70, "weight_scal": 70, "quantize_weights_per_channel": 70, "weight_qtyp": 70, "axi": [70, 71, 324], "quantize_weight_per_channel": 70, "channel_axi": [70, 136, 176, 178], "tensor_proto_to_arrai": 70, "tensorproto": [70, 71], "get_bias_add_nod": 70, "last_output": 70, "quantized_bias_nam": 70, "ad": [70, 145, 199, 237, 260, 302, 324, 331, 339, 382, 383, 385, 392, 393, 394, 395, 396, 399, 401, 402, 546, 565, 578], "reshap": [70, 88, 97, 289, 324], "nodeproto": [70, 256], "_type_": [70, 256], "previou": [70, 74, 281, 283, 324, 345, 546, 576, 578, 580], "is_valid_quantize_weight": 70, "dequantize_tensor": [70, 170, 417], "value_nam": 70, "helper": [71, 72, 170, 174, 199, 200, 201, 215, 237, 238, 239, 251, 255, 256, 279, 511], "dtype_to_nam": 71, "dtype_map": 71, "quanttyp": 71, "make_quant_nod": 71, "quantizelinear": [71, 556], "make_dquant_nod": 71, "dequantizelinear": [71, 556], "is_b_transpos": 71, "wheter": 71, "inuput": 71, "transpos": [71, 216, 252, 294, 324, 579], "split_shared_bia": 71, "share": [71, 126, 162, 557, 558, 580], "cast_tensor": 71, "remove_init_from_model_input": 71, "collate_pr": 71, "quantize_data_with_scale_zero": 71, "pack": [71, 88], "ab": [71, 281, 296, 321, 545, 574], "np": [71, 133, 162, 216, 252, 339, 553, 579], "sym": [71, 558, 581], "asym": [71, 558, 581], "calculate_scale_zp": 71, "quantize_data": 71, "trasnform": 71, "equat": [71, 265, 267, 307, 309, 574], "z": [71, 551], "real": [71, 72, 202, 219, 220, 240, 553, 572, 574], "quantize_data_per_channel": 71, "tensor_valu": 71, "scale_valu": 71, "zo_valu": 71, "dequantize_data_with_scale_zero": 71, "sacal": 71, "dequantize_data": 71, "valueinfo": 71, "tensor_nam": [71, 168, 319], "new_dtyp": 71, "quantizedvalu": 71, "new_quantized_nam": 71, "scale_nam": 71, "zero_point_nam": 71, "quantized_value_typ": 71, "quint8": 71, "linearli": 71, "intial": 71, "quantizediniti": 71, "quantized_data": 71, "quantizationmod": 71, "quantizedvaluetyp": 71, "quantformat": [71, 256], "quantize_nparrai": 71, "attribute_to_kwarg": 71, "kwarg": [71, 72, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161, 184, 201, 210, 213, 214, 216, 220, 221, 224, 239, 252, 258, 259, 269, 275, 281, 286, 291, 297, 299, 300, 301, 308, 309, 311, 312, 313, 315, 317, 318, 319, 332, 336, 348, 351, 352, 361, 362, 367, 369, 371, 372, 373, 374, 384, 386, 387, 389, 391, 394, 395, 400], "make_nod": 71, "find_by_nam": 71, "item_list": 71, "item": [71, 181, 215, 251, 295, 335, 347, 415, 503, 536, 553, 580], "get_ops_recurs": 72, "prefix": [72, 168, 217, 259, 260, 302, 530, 578], "graph_info": [72, 74, 311, 312, 313, 317, 318, 319], "templateadaptor": 72, "tampl": 72, "is_fused_modul": [72, 170, 174], "_propagate_qconfig_help": [72, 170, 174], "calculate_hessian_trac": 72, "enable_act": [72, 170], "hessian": [72, 170, 342, 580], "gradient": [72, 145, 296, 319, 321, 561, 570, 571, 582], "amap": 72, "op_nam": [72, 180, 184, 301, 340, 344, 347, 348, 351, 417, 422, 423, 431, 432, 578], "hessian_trac": [72, 170], "pytorchadaptor": 72, "objext": 72, "summari": [72, 125, 126, 217, 259, 546, 569, 578], "optimizer_tupl": 72, "criterion_tupl": 72, "is_fused_child": 72, "_post_eval_hook": [72, 578], "is_fused_op": 72, "is_last_fused_child": 72, "q_capabl": 72, "get_non_quant_modul": 72, "model_kwarg": 72, "non_quant_modul": 72, "custom": [72, 138, 179, 272, 300, 361, 404, 409, 551, 570, 577], "keyword": 72, "custom_non_quant_dict": 72, "pytorch_ipexadaptor": 72, "ipex": [72, 561, 574, 582], "unspport": 72, "No": [72, 557, 569, 572], "pytorch_fxadaptor": 72, "fx": [72, 174, 336, 345, 561, 572, 574, 575, 582], "prepare_sub_graph": 72, "sub_module_list": 72, "fx_op_cfg": 72, "is_qat": 72, "example_input": [72, 254, 256, 556], "recurs": [72, 362], "qconfigmap": 72, "prepare_fx": 72, "dir": [72, 174, 199, 237, 361, 549, 557, 559], "convert_sub_graph": 72, "fuse_fx_model": 72, "fused_model": 72, "calculate_op_sensit": [72, 74], "output_op_nam": [72, 74], "confidence_batch": [72, 74, 580], "fallback": [72, 74, 174, 337, 338, 342, 344, 345, 565, 575, 580], "requantize_cfg": [72, 74], "stage": [72, 74, 120, 337, 345, 510, 551, 578, 580], "sort": [72, 74, 162, 344, 426, 580], "sensit": [72, 74, 296, 321, 561, 570, 571], "ops_lst": 72, "pytorchqueri": 72, "set_quantization_config": 73, "organ": [73, 546, 581], "unsupported_precis": 73, "tensorflowadaptor": 74, "graphdef": [74, 83, 84, 87, 88, 90, 97, 101, 112, 113, 119, 120, 121, 122, 133, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161, 162, 168, 318, 495, 566], "graph_def": [74, 80, 168, 318, 336, 460, 495, 496], "frozen": [74, 83, 318, 336, 454, 457, 546, 566], "ckpt": [74, 168, 318, 336, 582], "savedmodel": [74, 318, 336, 582], "folder": [74, 168, 201, 206, 239, 244, 336, 361, 549, 578], "larger": [74, 324], "tuning_cfg_to_fw": 74, "tuning_cfg": 74, "pars": [74, 162, 199, 200, 212, 216, 237, 238, 249, 252, 281, 364, 375, 380, 403, 404, 406, 409, 410, 411, 412, 415, 468, 472, 476, 481, 484, 490, 509, 517, 525, 536, 579], "compat": [74, 108, 168, 263, 272, 305, 318, 553, 566, 576], "definit": [74, 133, 192, 197, 230, 235, 431, 444, 453, 502, 533], "inspect_weight_and_bia": 74, "node_list": 74, "graph_node_name_map": [74, 168], "fused_node_map": 74, "pattern_map": 74, "seq": 74, "fused_mapping_revers": 74, "fused_map": 74, "inspect_activ": 74, "local": [74, 294, 324, 331, 347, 362, 377, 409, 414, 427, 447, 546, 577], "tensorflowbasemodel": [74, 318, 458], "quantizedv2": 74, "qat_convert": 74, "quantize_recip": [74, 138, 139], "kera": [74, 97, 139, 145, 223, 313, 318, 438, 445, 455, 553, 566], "converted_model": [74, 565], "mse": [74, 174, 267, 301, 309, 343, 417, 423, 546, 564, 573, 576], "backup": 74, "fallen": 74, "denot": 74, "tensorflow_itexadaptor": 74, "performance_onli": [74, 130, 154, 159, 167, 527], "get_eightbit_pattern": 74, "qdq_enabl": 74, "eightbit": [74, 578], "generate_internal_pattern": 74, "intern": [74, 133, 170, 279, 501, 548, 571], "bf16convert": [77, 575], "fp32_op": [77, 130], "bf16_op": [77, 130, 575], "graph_bas": [77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132], "graphrewriterbas": [77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132], "do_transform": [77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 147, 154, 155, 159, 163, 166, 167], "convertaddtobiasaddoptim": 79, "addv2": [79, 96, 97, 558], "biasadd": [79, 91, 93, 151, 158, 558], "convertlayoutoptim": 80, "layout": 80, "nchw": 80, "nhwc": 80, "convertleakyreluoptim": 81, "subgraph": [81, 89, 93, 97, 556], "leakyrelu": 81, "mul": [81, 92, 93, 96, 97, 151, 556], "coeffici": [81, 273], "less": [81, 551, 570], "convertnantorandom": 82, "const": [82, 90, 91, 94, 95, 97, 112, 113, 126, 133, 301, 382, 393, 396, 403, 409, 411, 412, 416, 498, 506, 516], "nan": 82, "convertplaceholdertoconst": 83, "rewrit": [83, 84, 85, 86, 87, 88, 89, 90, 100, 105, 107, 108, 109, 110, 111, 114, 117, 118, 127, 128, 131, 132], "renam": [83, 108, 281, 576], "placeholderwithdefault": 83, "constant": [83, 89, 133, 162, 254, 256, 339, 499, 548, 558, 579], "simplifi": 83, "input_graph_def": [83, 84, 87, 88, 90, 97, 101, 112, 113, 133, 162], "nodes_to_convert": 83, "placehold": [83, 197, 235], "strtobool": 83, "val_str": 83, "equival": [83, 272], "dequantizecastoptim": 84, "dilatedcontract": 85, "injectdummybiasaddoptim": 86, "expanddimsoptim": 87, "expanddim": 87, "whose": [87, 112, 113, 295, 324, 559, 570, 580], "fetchweightfromreshapeoptim": 88, "fetch": [88, 177, 192, 230, 263, 305, 548], "foldbatchnormnodesoptim": 89, "scale_after_norm": 89, "batchnormwithglobalnorm": 89, "nodedef": [89, 94, 95, 97, 133, 162, 495], "normal": [89, 97, 216, 252, 265, 307, 517, 547, 548, 567, 579], "fold": [89, 90, 254, 256, 558], "convolut": [89, 551, 570, 572], "onc": [89, 133, 168, 223, 298, 334, 546, 548, 570, 571, 572, 580, 582], "That": [89, 546, 548], "opportun": 89, "rather": [89, 559], "expens": [89, 551, 580], "bake": 89, "identifi": [89, 94, 95, 97, 263, 305, 318], "simpler": 89, "form": [89, 97, 108, 263, 265, 305, 307, 409, 411, 510, 546, 551], "spot": 89, "fusedbatchnorm": [89, 108], "fusedbatchnormv3": 89, "_fusedbatchnormex": 89, "newer": 89, "badli": [89, 97, 108], "duplic": [89, 97, 126, 339], "graphfoldconstantoptim": 90, "check_all_fold": 90, "check_const_input": 90, "node_nam": [90, 94, 95, 97, 133, 162, 168, 256, 317, 318, 397, 495], "supported_op_typ": 90, "fusebiasaddandaddoptim": 91, "fusecolumnwisemuloptim": 92, "depthwiseconv2dn": [92, 558], "fuseconvwithmathoptim": 93, "elimin": 93, "math": [93, 574], "realdiv": [93, 96], "node_name_from_input": [94, 95, 97, 133, 162], "strip": [94, 95, 97, 168, 578], "port": [94, 95, 97, 162, 530, 534, 546], "underli": [94, 95, 97, 273], "node_from_map": [94, 95, 97], "node_map": [94, 95, 97], "pull": [94, 95, 97, 510], "entri": [94, 95, 97, 170, 223, 258, 300, 380, 423, 426, 509, 517, 563], "index": [94, 95, 97, 138, 145, 192, 197, 201, 205, 210, 217, 230, 235, 239, 243, 248, 259, 284, 320, 362, 534, 548, 564], "isn": [94, 95, 97, 133], "present": [94, 95, 97, 546, 572], "values_from_const": [94, 95, 97, 133], "node_def": [94, 95, 97, 133], "extract": [94, 95, 97, 133, 201, 239, 536, 549], "access": [94, 95, 97, 133, 145, 180, 181, 501, 517, 530, 534, 546], "get_const_dim_count": [94, 95], "dimens": [94, 95, 191, 216, 229, 252, 275, 290, 324, 339, 549, 551, 570, 579], "fusegeluoptim": 96, "sqrt": 96, "erf": 96, "gelu": 96, "fuselayernormoptim": 97, "remap": 97, "smaller": [97, 216, 252, 551, 570, 571, 579], "layernorm": [97, 281], "case": [97, 101, 198, 215, 216, 217, 236, 251, 252, 258, 259, 267, 286, 291, 299, 300, 309, 507, 511, 517, 546, 547, 548, 551, 553, 558, 559, 564, 567, 570, 572, 574, 579, 581], "fusedbatcnormv3": 97, "restrict": [97, 570, 571, 577], "2d": 97, "3d": [97, 572, 582], "contraint": 97, "fusedop": 97, "fill": [97, 384, 386, 387, 389, 391, 394, 395, 400, 546, 577, 579], "gamma": 97, "h": [97, 216, 252, 553, 579], "_mkllayernorm": 97, "fusepadwithconv2doptim": 98, "excluded_op_nam": [98, 99, 180, 184, 301], "new_api": [98, 99, 104, 120, 127, 154, 159, 163], "itex_qdq_mod": [98, 99], "fusepadwithfp32conv2doptim": 99, "fusetransposereshapeoptim": 100, "graphcseoptim": 101, "cse": 101, "those": [101, 344, 362, 551, 559, 568, 570, 571, 574, 580], "child": [101, 578], "b1": 101, "c1c2": 101, "d1": [101, 362], "c1": 101, "c2": 101, "bound": [101, 216, 217, 252, 259, 263, 272, 305, 339, 564, 579], "elim": 101, "grappleroptim": 102, "input_output_nam": 102, "opt_cfg": 102, "wrapper": [102, 145, 198, 210, 213, 216, 218, 219, 220, 221, 222, 236, 248, 250, 252, 263, 267, 305, 308, 309, 312, 314, 534, 542, 575], "grappler": [102, 558], "insertprintminmaxnod": 104, "pre_node_nam": 104, "post_node_nam": 104, "movesqueezeafterreluoptim": 105, "removetrainingnodesoptim": 107, "protected_nod": [107, 162], "types_to_splic": [107, 162], "checknumer": [107, 162], "stopgradi": 107, "renamebatchnormoptim": 108, "fusedbatchnormv2": 108, "due": [108, 570, 571, 574, 578], "histor": 108, "latter": [108, 138], "former": 108, "platform": [108, 505, 561, 572, 574, 582], "vnni_bf16": 108, "amx": 108, "instruct": [108, 546, 551, 562, 565, 572, 573, 574], "splitsharedinputoptim": 109, "stripequivalentnodesoptim": 110, "output_node_nam": [110, 111, 154, 155, 159, 162, 168], "stripunusednodesoptim": 111, "input_node_nam": [111, 154, 159, 162, 168], "switchoptim": 112, "condit": [112, 199, 200, 201, 216, 237, 238, 239, 252, 549, 563, 579, 580], "enter": [112, 113], "updateenteroptim": 113, "workaround": 113, "freezefakequantopoptim": 116, "fake_qu": [116, 130, 154, 159], "freezevaluetransform": 117, "max_min_data": [117, 118], "postfix": [117, 118], "tensor_data": 117, "th": [117, 118], "gpu": [117, 118, 130, 133, 162, 561, 570, 573, 574], "itex_mod": [117, 130, 154, 159], "generate_output_graph": [117, 118], "max_name_valu": [117, 118], "freeze_max": [117, 118], "freeze_min": [117, 118], "generate_output_graph_rang": [117, 118], "freezevaluewithoutcalibtransform": 118, "95": [118, 263, 267, 305, 309, 564, 582], "fuseconvredundantdequantizetransform": 119, "_quantizedconv": 119, "_quantizeddeconv": 119, "successor": [119, 120, 121, 122], "fuseconvrequantizetransform": 120, "requant": [120, 122, 578], "fuse_pattern": 120, "sum_pattern": 120, "fusematmulredundantdequantizetransform": 121, "_quantizedmatmul": [121, 122], "fusematmulrequantizedequantizetransform": 122, "quantizedmatmul": 122, "quantizedmatmulwithbiasanddequant": 122, "fusematmulrequantizetransform": 122, "rtype": [122, 511], "fusematmulrequantizedequantizenewapitransform": 122, "fusematmulrequantizenewapitransform": 122, "newapi": 122, "metainfochangingmemopoptim": 124, "metaop": 124, "posthostconstconvert": 125, "hostconst": 125, "postcseoptim": 126, "quantizev2": [126, 151], "quantizedrnnconvert": 127, "calibration_data": [127, 130], "rnn_detail": 127, "scalepropagationtransform": 128, "direct": [128, 294, 324, 467], "generategraphwithqdqpattern": 130, "op_wise_config": [130, 154, 159], "quantized_nod": 130, "mergeduplicatedqdqoptim": 131, "shareqdqforitexypatternoptim": 132, "graphanalyz": 133, "extend_engin": 133, "singleton": [133, 301, 498, 506], "properti": [133, 145, 175, 177, 189, 191, 199, 201, 217, 218, 226, 227, 229, 237, 239, 253, 258, 259, 266, 267, 268, 269, 283, 286, 291, 299, 300, 308, 309, 311, 312, 313, 315, 317, 318, 319, 332, 339, 347, 363, 381, 414, 421, 425, 430, 431, 434, 446, 449, 454, 458, 467, 470, 475, 479, 482, 485, 492, 502, 509, 510, 511, 515, 520, 524, 527, 529, 530, 563, 569], "getter": [133, 226, 253, 259, 283, 286, 291, 299, 300, 318, 319, 447], "_graph": 133, "has_positive_input": 133, "retrun": 133, "neg": 133, "get_graph_input_output": 133, "clearli": 133, "similar": [133, 281, 573, 580, 581], "summarize_graph": 133, "writtern": 133, "googl": [133, 565, 572], "query_fusion_pattern_nod": 133, "aggreg": [133, 511], "_search_pattern": 133, "remove_node_with_single_input_output": 133, "rebuild": 133, "except": [133, 301, 362, 498, 506, 507, 517, 532, 542], "remove_nod": 133, "replace_const_nod": 133, "new_const_nod": 133, "target_nod": 133, "old_constant_node_nam": 133, "replace_al": 133, "outdat": 133, "replace_constant_graph_with_constant_nod": 133, "new_nod": 133, "old_end_node_nam": 133, "replace_single_nod": 133, "old_output_node_nam": 133, "old_output_nam": 133, "old_input_node_nam": 133, "old_input_nam": 133, "bottom": [133, 546], "replace_nod": 133, "old_node_nam": 133, "output_nodes_nam": 133, "node_name_detail": 133, "parent": [133, 290, 296, 298, 331, 334, 578], "add_nod": [133, 431], "start_node_nam": 133, "end_node_nam": 133, "dump_graph": 133, "parse_graph": 133, "graphrewriterhelp": 133, "encapsul": [133, 187, 188, 336, 566], "compare_node_attr": 133, "node_a": 133, "node_b": 133, "compar": [133, 170, 267, 309, 546, 548, 552, 564, 571, 574, 577, 578, 580], "create_nod": [133, 162], "create_constant_nod": [133, 162], "datatyp": [133, 162, 575, 580], "set_attr_dtyp": [133, 162], "set_attr_tensor": [133, 162], "set_attr_type_list": [133, 162], "attr": [133, 162, 168], "set_attr_string_list": [133, 162], "set_attr_str": [133, 162], "set_attr_int_list": 133, "set_attr_int": [133, 162], "set_attr_float": [133, 162], "set_attr_bool": [133, 162], "fakequantizebas": 136, "get_config": [136, 145, 543], "serial": [136, 199, 237, 415, 422, 423, 453, 505, 507, 519, 520, 524, 525, 548], "fakequant": 136, "classmethod": [136, 145, 175, 177, 287, 288, 289, 348, 351, 504, 538, 540, 543], "from_config": [136, 145], "instanti": [136, 568], "per_channel": [136, 558, 581], "num_bit": 136, "symmetr": [136, 545, 574, 579, 580], "narrow_rang": 136, "quantizeconfig": [138, 139, 145], "There": [138, 267, 300, 309, 546, 551, 558, 561, 564, 565, 580, 581], "add_quantize_recip": 138, "recip": [138, 254, 256, 258, 259, 299, 556, 580], "layer_nam": [138, 294, 324], "some": [138, 187, 199, 226, 237, 259, 295, 347, 517, 546, 554, 562, 564, 567, 570, 571, 574, 575, 578, 580], "conv5_block3_3_conv": 138, "flase": 138, "conv5_block3_3_add": 138, "query_lay": 138, "layer_recip": 138, "remove_lay": 138, "layers_nam": 138, "get_quantize_recip": 138, "is_empti": 138, "clear_quantize_recip": 138, "init_quantize_config": 139, "model_nam": [139, 275, 392, 398, 517], "qat_clone_funct": 139, "leav": 139, "quantizewrapp": [139, 145], "wrapped_lay": 139, "quantizelayeradd": 142, "quantize_layer_bas": [142, 144], "quantizelayerbas": [142, 144], "quantizelayerbatchnorm": 144, "quantizewrapperbas": 145, "trainabl": 145, "sublay": 145, "trainable_weight": 145, "track": [145, 347, 577], "descent": 145, "non_trainable_weight": 145, "manual": [145, 201, 239, 549], "add_loss": 145, "regular": [145, 260, 295, 302, 333, 570], "eager": [145, 297, 332, 364, 472, 476, 484, 553, 561, 574, 575, 578, 582], "gradienttap": 145, "input_shap": [145, 203, 241, 446, 449, 458, 549], "tensorshap": 145, "compute_output_shap": 145, "caus": [145, 570, 571], "state": [145, 170, 266, 267, 279, 281, 308, 309, 348, 351, 570, 571], "happen": 145, "later": [145, 362, 578], "output_shap": 145, "query_input_index": 145, "logic": [145, 187, 188, 347, 529, 581], "live": 145, "output_obj": 145, "fusenodestartwithfusedbatchnormv3": [146, 156], "quantize_graph_bas": [146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161], "quantizenodebas": [146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161], "get_longest_fus": [146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161], "deriv": [146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 226, 253, 259, 294, 296, 298, 321, 324, 331, 333, 334, 362], "apply_the_transform": [146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 160, 161], "fusenodestartwithconcatv2": [147, 157], "fusenodestartwithconv2d": [148, 158], "fusenodestartwithdeconv2d": 149, "fusenodestartwithfusedinstancenorm": 150, "fusenodestartwithmatmul": [151, 160], "apply_matmul_biasadd_relu_fus": 151, "match_node_nam": [151, 158], "apply_matmul_biasadd_fus": 151, "apply_batchmatmulv2_fus": 151, "batchmatmul": 151, "batchmatmulv2": 151, "apply_batchmatmulv2_mul_add_fus": 151, "fusenodestartwithpool": [152, 161], "optimizeqdqgraph": 154, "op_wise_sequ": [154, 159], "quantizegraphbas": [154, 155, 159], "remove_dead_nod": 155, "output_nam": [155, 254, 256, 556], "longer": [155, 199, 216, 237, 252, 549, 579], "add_output_graph_nod": 155, "output_nod": [155, 392], "create_nodes_map": 155, "apply_conv_biasadd_relu_fus": 158, "quantizegraphforintel": 159, "quantizegraphhelp": 162, "staticmethod": 162, "get_sorted_graph": 162, "reorder": [162, 279, 281], "easier": [162, 546, 572], "split_shared_input": 162, "in_graph": [162, 168], "ouput": 162, "remove_training_nod": 162, "aren": 162, "uncondition": 162, "copy_attr": 162, "attr_valu": 162, "copi": [162, 295], "unique_node_name_from_input": 162, "ensure_tensor_name_has_port": 162, "biascorrect": 163, "fp32_graph": 163, "weight_empir": 163, "graph_transform_bas": [163, 166, 167], "graphtransformbas": [163, 166, 167], "Will": [163, 190, 193, 210, 530, 551, 561], "task": [163, 199, 206, 237, 244, 267, 281, 309, 549, 551, 561, 564, 570, 571], "w_int8": [163, 178], "w_fp32": [163, 178], "ratio": [163, 178, 212, 216, 249, 252, 259, 286, 291, 294, 296, 297, 298, 324, 331, 332, 334, 549, 570, 571, 579, 582], "equal": [163, 178, 564], "scale_c": [163, 178], "shift": [163, 178, 212, 249, 579], "notic": [163, 178, 217, 259, 563], "empir": [163, 178], "insertlog": 166, "input_pb": [166, 167], "node_name_list": 166, "show_nam": 166, "show_op": 166, "first_n": 166, "summar": [166, 551], "1024": [166, 201, 239], "messag": [166, 517, 529, 534, 580], "dump_fp32": 166, "rerangequantizedconcat": 167, "rerange_quant": 167, "disable_random": 168, "seed": [168, 272, 274, 285, 527, 548, 554, 581], "read_graph": 168, "in_graph_is_binari": 168, "read": [168, 201, 204, 216, 239, 242, 252, 259, 286, 291, 295, 297, 332, 432, 436, 437, 549, 575, 577], "write_graph": 168, "out_graph_def": 168, "out_graph_fil": 168, "write": [168, 208, 209, 210, 246, 247, 248, 263, 305, 362, 553, 559, 578], "is_ckpt_format": 168, "model_path": [168, 432, 447, 452, 517], "is_saved_model_format": 168, "saved_model": [168, 259, 269, 438, 445, 455], "get_tensor_by_nam": 168, "try_cnt": 168, "scope": [168, 226, 259], "suffix": 168, "iterator_sess_run": 168, "sess": [168, 318], "iter_op": 168, "feed_dict": [168, 198, 236], "output_tensor": [168, 318], "makeiter": 168, "strip_unused_nod": 168, "strip_unused_lib": 168, "r1": 168, "15": [168, 274, 558, 582], "branch": 168, "strip_equivalent_nod": 168, "get_tensor_val_from_graph_nod": 168, "tensor_v": 168, "hessiantrac": 170, "yao": 170, "zhewei": 170, "et": [170, 281], "al": [170, 281], "pyhessian": 170, "2020": [170, 563], "ieee": [170, 565], "confer": [170, 571], "big": 170, "dong": 170, "zhen": 170, "hawq": [170, 342, 580], "system": [170, 217, 362, 505, 532, 533, 570], "33": [170, 272, 582], "18518": 170, "18529": 170, "openvinotoolkit": 170, "nncf": 170, "mse_metric_gap": [170, 417], "fp32_tensor": [170, 417], "euclidean": [170, 417, 551], "distanc": [170, 417, 551], "get_act_gap": 170, "gap": [170, 556, 566], "get_avg_trac": 170, "num_sampl": [170, 267, 309], "compare_weight": 170, "float_dict": 170, "quantized_dict": 170, "being": [170, 263, 275, 300, 305, 356, 357, 434], "usag": [170, 198, 236, 259, 263, 269, 300, 305, 517, 546, 549, 553, 555, 564, 567, 573, 579], "wt_compare_dict": 170, "float_model": 170, "qmodel": 170, "compute_error": 170, "weight_dict": 170, "get_embedding_contigu": 174, "embed": [174, 281], "contigu": [174, 570], "append_attr": 174, "fx_model": 174, "get_mse_order_per_fp32": 174, "example_inp": 174, "influenc": 174, "fallback_ord": 174, "algorithm_registri": [175, 177], "algorithm_typ": [175, 177], "registr": [175, 177, 201, 205, 208, 209, 210, 213, 216, 223, 239, 243, 246, 247, 248, 250, 252, 289], "support_algorithm": [175, 177], "algorithmschedul": [175, 177], "origin_model": [175, 177], "calib_it": [175, 177], "fastbiascorrect": [176, 178], "fast_bias_correct": [177, 301], "weight_correct": [177, 301], "weightcorrect": 178, "ep": 178, "1e": [178, 581], "05": [178, 263, 267, 305, 309, 510, 564, 582], "conf_fname_or_obj": [179, 217, 226, 253, 258, 259, 268, 269, 270, 271, 282, 283, 286, 291, 299, 300, 301], "benchmark_conf": [179, 180, 301], "prefer": [179, 258, 259, 299, 301, 336], "b_dataload": [179, 217, 259, 547], "b_func": [179, 217, 259], "benchmarkconfig": 179, "prunerv2": 180, "target_spars": [180, 184, 301, 324, 573, 581], "pruning_typ": [180, 184, 301], "start_step": [180, 184, 296, 301, 331, 573], "end_step": [180, 184, 296, 301, 331, 573], "pruning_scop": [180, 184, 301], "pruning_frequ": [180, 184, 301, 331], "min_sparsity_ratio_per_op": [180, 184, 301, 324], "max_sparsity_ratio_per_op": [180, 184, 301, 324, 331], "sparsity_decay_typ": [180, 184, 301], "pruning_op_typ": [180, 184, 301], "reg_typ": 180, "criterion_reduce_typ": 180, "resume_from_pruned_checkpoint": 180, "similiar": [180, 184, 301], "cfg_fname": 180, "parser": [180, 301, 375, 380, 498, 502, 506, 536], "quantization_conf": 180, "dotdict": 180, "pruning_conf": 180, "graph_optimization_conf": [180, 258, 259], "mixedprecision_conf": 180, "distillation_conf": [180, 253, 259], "search_spac": [180, 270, 282, 283, 284, 285], "defaultconf": 180, "notat": [180, 181], "deep_get": 181, "dot": [181, 517, 565, 574], "nest": 181, "eg": [181, 201, 205, 210, 239, 243, 248, 549, 573], "john": 181, "deep_set": 181, "male": 181, "weightpruningconfig": [184, 301], "pruning_config": [184, 301], "snip_momentum": [184, 301, 321], "4x1": [184, 290, 301, 324, 582], "98": [184, 301, 573, 582], "exp": [184, 301], "distillationconfig": [184, 301], "teacher_model": [184, 218, 253, 259, 301, 551], "learning_r": [184, 301, 573, 581], "callabl": [184, 265, 301, 307, 352, 513, 517, 533, 534], "altern": [184, 301], "sigopttunestrategi": 187, "q_dataload": [187, 188, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 559, 580], "q_hook": [187, 188, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347], "tunestrategi": [187, 188, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 580], "hpo": 187, "mandatori": [187, 188, 336, 554, 581], "reserv": [187, 188, 226, 259, 300], "tuner": [187, 188, 258, 259, 299, 336], "scalar": [187, 188, 336, 356, 357, 564, 565, 574], "pseudo": [187, 188, 336, 578], "next_tune_cfg": [187, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 580], "travers": [187, 188, 337, 340, 341, 347], "concret": [187, 347, 580], "overrid": [187, 226, 259, 299, 347, 362, 507], "constraint": [187, 258, 259, 299, 548, 577, 580, 581], "tpetunestrategi": 188, "stop": [188, 340, 347, 486, 510, 554, 580, 581], "trials_count": [188, 340, 347], "basedatalod": [189, 227], "basedataload": [189, 191, 194, 195, 196, 198, 227, 229, 232, 233, 234, 236], "last_batch": [189, 191, 194, 195, 196, 198, 219, 220, 227, 229, 232, 233, 234, 236], "rollov": [189, 191, 194, 195, 196, 198, 219, 220, 227, 229, 232, 233, 234, 236], "collate_fn": [189, 191, 192, 194, 195, 196, 198, 219, 220, 227, 229, 230, 232, 233, 234, 236, 549], "sampler": [189, 191, 193, 194, 195, 196, 198, 219, 220, 227, 229, 231, 232, 233, 234, 236, 248, 259, 349, 553], "batch_sampl": [189, 191, 194, 195, 196, 198, 219, 220, 227, 229, 232, 233, 234, 236], "num_work": [189, 191, 194, 195, 196, 198, 219, 220, 227, 229, 232, 233, 234, 236, 574], "pin_memori": [189, 191, 194, 195, 196, 198, 219, 220, 227, 229, 232, 233, 234, 236], "shuffl": [189, 191, 194, 195, 196, 198, 219, 220, 227, 229, 232, 233, 234, 236, 548, 574], "_generate_dataload": [189, 227], "drop": [189, 227, 263, 295, 305, 565, 570, 571, 582], "incomplet": [189, 227], "discard": [189, 227], "entranc": [190, 193, 210], "dispatch": [190, 193, 210, 561], "default_col": [191, 229], "outer": [191, 229], "defaultdataload": [191, 195, 198, 229, 233, 236], "base_dataload": [191, 193, 194, 195, 196, 198, 229, 231, 232, 233, 234, 236, 248, 259], "drop_last": [192, 197, 230, 235], "iterablefetch": [192, 230], "indexfetch": [192, 230], "default_dataload": [193, 195, 198, 231, 233, 236, 248, 259], "fetcher": [193, 231, 248, 259], "mxnet_dataload": [193, 231, 248, 259], "onnxrt_dataload": [193, 231, 248, 259], "pytorch_dataload": [193, 231, 248, 259], "tensorflow_dataload": [193, 231, 248, 259, 495], "mxnetdataload": [194, 232], "onnxrtbertdataload": [195, 233], "bert": [195, 198, 199, 216, 233, 236, 237, 252, 549, 551, 554, 564, 570, 579, 582], "varient": [195, 233], "onnxrtdataload": [195, 233], "pytorchdataload": [196, 234], "data_sourc": [197, 235], "__iter__": [197, 201, 205, 210, 235, 239, 243, 248, 547, 548], "matter": [197, 235, 575], "iterablesampl": [197, 235], "squential": [197, 235], "iterabledataset": [197, 200, 201, 203, 204, 205, 210, 235, 238, 239, 241, 242, 243, 248], "indexdataset": [197, 235], "__getitem__": [197, 201, 205, 210, 213, 216, 235, 239, 243, 248, 250, 252, 547, 548, 549], "__len__": [197, 201, 205, 210, 235, 239, 243, 248, 548, 549], "inter": [197, 201, 205, 210, 235, 239, 243, 248], "retriev": [197, 235, 511], "sequentialsampl": [197, 235], "batchsampl": [197, 235], "tfdatadataload": [198, 236], "tensorflow1": [198, 236], "coupl": [198, 236], "satisfi": [198, 236, 562], "tf1": [198, 236, 566], "although": [198, 236, 577], "tensorflowbertdataload": [198, 236], "tensorflowmodelzoobertdataload": [198, 236], "zoo": [198, 216, 236, 252, 582], "tensorflowdataload": [198, 236, 495], "directli": [198, 236, 263, 267, 295, 305, 309, 556, 564, 573, 574, 578], "pytorchbertdataset": [199, 237], "model_typ": [199, 237, 417, 447, 549], "tensordataset": [199, 237, 549], "link": [199, 237, 546, 549, 582], "huggingfac": [199, 237, 549], "easi": [199, 237, 259, 299, 546, 548, 556, 572, 574, 577], "squad": [199, 216, 237, 252, 264, 265, 267, 306, 307, 309, 549, 564, 579, 582], "xlnet": [199, 237, 549], "xlm": [199, 237, 549, 582], "101": [199, 237, 267, 309, 564, 582], "2043": [199, 237], "2001": [199, 237], "onnxrtbertdataset": [199, 237], "data_dir": [199, 237, 549], "model_name_or_path": [199, 237, 549], "max_seq_length": [199, 216, 237, 252, 549, 579], "128": [199, 202, 203, 216, 237, 240, 241, 252, 549, 574, 579, 582], "do_lower_cas": [199, 215, 216, 237, 251, 252, 549, 579], "mrpc": [199, 237, 267, 309, 549, 564, 582], "dynamic_length": [199, 237, 549], "shortcut": [199, 237, 549], "truncat": [199, 216, 237, 252, 549, 579], "shorter": [199, 216, 237, 252, 549, 579], "lowercas": [199, 237, 549], "qqp": [199, 237, 549, 564, 582], "qnli": [199, 237, 549, 564, 582], "rte": [199, 237, 549, 564, 582], "st": [199, 237, 549, 564], "cola": [199, 237, 549, 564, 582], "mnli": [199, 237, 549, 564, 582], "wnli": [199, 237, 549, 564, 582], "mobilebert": [199, 237, 549, 551, 582], "roberta": [199, 237, 549, 582], "uncas": [199, 216, 237, 252, 549, 579, 582], "load_and_cache_exampl": [199, 237], "convert_examples_to_featur": [199, 216, 237, 252], "max_length": [199, 237], "label_list": [199, 237, 267, 309], "output_mod": [199, 237], "pad_token": [199, 237], "pad_token_segment_id": [199, 237], "mask_padding_with_zero": [199, 237], "inputfeatur": [199, 216, 237, 252], "input_id": [199, 216, 237, 252, 551, 570], "vocabulari": [199, 215, 216, 237, 251, 252, 281, 579], "attention_mask": [199, 237, 570], "mask": [199, 237, 263, 279, 281, 290, 294, 296, 298, 305, 319, 324, 331, 334, 570, 571, 582], "NOT": [199, 237, 558], "token_type_id": [199, 237, 570], "segment": [199, 237, 261, 263, 303, 305], "portion": [199, 237], "problem": [199, 237, 267, 274, 309, 564, 565], "regress": [199, 237], "seq_length": [199, 237], "to_json_str": [199, 237], "json": [199, 200, 216, 237, 238, 252, 372, 490, 492, 500, 507, 517, 549, 566, 579], "tensorflowbertdataset": [199, 237], "root": [199, 200, 201, 204, 237, 238, 239, 242, 267, 273, 309, 311, 312, 313, 315, 317, 318, 319, 352, 534, 547, 548, 549, 553, 564, 581], "label_fil": [199, 216, 237, 252, 549, 579], "tfrecord": [199, 200, 201, 205, 210, 237, 238, 239, 243, 248, 549], "parsedecodebert": [199, 237], "tensorflowmodelzoobertdataset": [199, 200, 237, 238], "num_cor": [199, 200, 204, 237, 238, 242, 549], "28": [199, 200, 204, 237, 238, 242, 549, 582], "coco": [200, 207, 211, 238, 245, 263, 267, 305, 309, 564], "parsedecodecoco": [200, 238], "cocorecorddataset": [200, 238], "directori": [200, 201, 238, 239, 318, 361, 362, 426, 479, 500, 517, 530, 549, 553, 557, 578], "interleav": [200, 238, 549], "parallel": [200, 238, 549, 570], "cocoraw": [200, 238, 549], "img_dir": [200, 238, 549], "val2017": [200, 238, 549], "anno_dir": [200, 238, 549], "annot": [200, 238, 263, 305, 549, 564], "instances_val2017": [200, 238, 549], "arrang": [200, 201, 204, 238, 239, 242, 331, 549, 570], "jpg": [200, 204, 206, 238, 242, 244, 549], "coconpi": [200, 238, 549], "npy_dir": [200, 238, 549], "npy": [200, 238, 549], "tensorflowdataset": [201, 239], "pytorchdataset": [201, 239], "mxnetdataset": [201, 239], "onnxrtqldataset": [201, 239], "onnxrtitdataset": [201, 239], "IT": [201, 208, 239, 246], "pytorchmxnetwrapdataset": [201, 239], "datafunc": [201, 239], "pytorchmxnetwrapfunct": [201, 216, 239, 252], "framework_dataset": [201, 239], "convent": [201, 239, 263, 305, 551], "imageclassifi": [201, 239], "choos": [201, 239, 346, 546, 561, 576, 580, 581], "tensorflow_itex": [201, 204, 205, 206, 208, 209, 210, 239, 242, 243, 244, 246, 247, 248, 573], "onnxrt_qdq": [201, 205, 208, 209, 210, 239, 243, 246, 247, 248, 573], "onnxrt_qlinearop": [201, 205, 208, 209, 210, 216, 239, 243, 246, 247, 248, 252, 573], "onnxrt_integerop": [201, 205, 208, 209, 210, 216, 239, 243, 246, 247, 248, 252, 554, 573], "pytorch_ipex": [201, 205, 208, 209, 210, 239, 243, 246, 247, 248, 573, 581], "pytorch_fx": [201, 205, 208, 209, 210, 239, 243, 246, 247, 248, 573], "onnxrt_qoper": [201, 205, 208, 209, 210, 239, 243, 246, 247, 248, 573], "dataset_registri": [201, 205, 210, 239, 243, 248], "dataset_typ": [201, 205, 210, 239, 243, 248, 258, 259, 269, 299, 385], "dataset_format": [201, 205, 210, 239, 243, 248], "data_format": [201, 205, 210, 212, 239, 243, 248, 249], "raw_imag": [201, 205, 210, 239, 243, 248], "overwrit": [201, 205, 210, 239, 243, 248], "download_url": [201, 239], "filenam": [201, 239, 273, 362, 363, 463, 479, 486, 492, 502, 510, 549], "md5": [201, 239], "download": [201, 239, 438, 461, 462, 464, 465, 498, 546, 549, 562, 576], "gen_bar_updat": [201, 239], "progress": [201, 239, 298, 324, 331, 334, 571], "bar": [201, 239, 546], "check_integr": [201, 239], "fpath": [201, 239], "checksum": [201, 239], "calculate_md5": [201, 239], "chunk_siz": [201, 239], "cifar10": [201, 239, 549], "cifar100": [201, 239, 549], "www": [201, 239, 549, 582], "toronto": [201, 239, 549], "edu": [201, 239, 549], "kriz": [201, 239, 549], "cifar": [201, 239, 549, 582], "tar": [201, 239, 549], "gz": [201, 239, 549], "subset": [201, 204, 239, 242, 549], "internet": [201, 239, 546, 549], "put": [201, 239, 549, 551, 570], "again": [201, 239, 549, 575], "load_meta": [201, 239], "meta": [201, 239], "pytorchcifar10": [201, 239], "mxnetcifar10": [201, 239], "tensorflowcifar10": [201, 239], "pytorchcifar100": [201, 239], "mxnetcifar100": [201, 239], "tensorflowcifar100": [201, 239], "mnist": [201, 239, 549, 553], "institut": [201, 239], "standard": [201, 216, 239, 252, 556, 564, 579, 580], "fashionmnist": [201, 239, 549], "npz": [201, 239, 549], "idx1": [201, 239, 549], "ubyt": [201, 239, 549], "idx3": [201, 239, 549], "t10k": [201, 239, 549], "class_to_idx": [201, 239], "read_data": [201, 239], "pytorchmnist": [201, 239], "mxnetmnist": [201, 239], "tensorflowmnist": [201, 239], "pytorchfashionmnist": [201, 239], "mxnetfashionmnist": [201, 239], "tensorflowfashionmnist": [201, 239], "imagefold": [201, 239, 547, 548, 549, 553], "subfold": [201, 239], "belong": [201, 239, 256, 314, 574], "class_1": [201, 239, 549], "png": [201, 239, 549], "xxy": [201, 239, 549], "xxz": [201, 239, 549], "class_n": [201, 239, 549], "123": [201, 239, 549, 579], "nsdf3": [201, 239, 549], "asd932_": [201, 239, 549], "mxnetimagefold": [201, 239], "tensorflowimagefold": [201, 239], "tensorflowtfrecorddataset": [201, 239], "tensorflowimagerecord": [201, 239], "000": [201, 239, 549], "001": [201, 239, 549, 553, 581], "099": [201, 239, 549], "tensorflowvocrecord": [201, 239], "pascal": [201, 239], "voc": [201, 239, 267, 309], "2012": [201, 239], "00000": [201, 239], "00004": [201, 239], "00001": [201, 239], "00003": [201, 239], "dummydataset": [202, 203, 240, 241], "127": [202, 203, 240, 241, 549, 574, 582], "stand_norm": [202, 203, 240, 241, 549], "dummy_v2": [203, 241, 549], "sparse_dummy_v2": [203, 241, 549], "label_shap": [203, 241, 549], "sparsedummydataset": [203, 241], "dense_shap": [203, 241, 549], "sparse_ratio": [203, 241, 549], "imagenetraw": [204, 242, 549], "data_path": [204, 242, 549], "image_list": [204, 242, 549], "img1": [204, 242, 549], "img2": [204, 242, 549], "imgx": [204, 242, 549], "val_map": [204, 242, 549], "pytorchimagenetraw": [204, 242], "mxnetimagenetraw": [204, 242], "tensorflowimagenetraw": [204, 242], "inteltensorflow": [204, 206, 242, 244], "tensorflowimagenetdataset": [204, 242], "onnxrtimagenetdataset": [204, 242], "bert_dataset": [205, 210, 243, 248, 259, 301], "coco_dataset": [205, 210, 243, 248, 259, 301], "dummy_dataset": [205, 210, 243, 248, 259, 301], "dummy_dataset_v2": [205, 210, 243, 248, 259, 301], "imagenet_dataset": [205, 210, 243, 248, 259, 301], "style_transfer_dataset": [205, 210, 243, 248, 259, 301], "transfer": [206, 244, 253, 259, 549, 551, 552], "styletransferdataset": [206, 244], "content_fold": [206, 244, 549], "style_fold": [206, 244, 549], "crop_ratio": [206, 244, 549], "resize_shap": [206, 244, 549], "image_format": [206, 244, 549], "holder": [206, 244, 549], "labelbalancecocorecordfilt": [207, 245], "balanc": [207, 245, 569], "labelbalancecocorawfilt": [207, 245], "tensorflowfilt": [208, 246], "onnxrtqlfilt": [208, 246], "onnxrtitfilt": [208, 246], "pytorchfilt": [208, 246], "mxnetfilt": [208, 246], "filter_registri": [208, 209, 210, 246, 247, 248], "filter_typ": [208, 209, 210, 246, 247, 248], "__call__": [208, 209, 210, 246, 247, 248, 548], "coco_filt": [209, 210, 247, 248, 259, 301], "imagenet_transform": [210, 213, 248, 250, 259, 301], "transform_cl": [210, 213, 216, 248, 250, 252], "basetransform": [210, 211, 212, 213, 216, 248, 249, 250, 252], "transform_registri": [210, 213, 216, 248, 250, 252], "transform_typ": [210, 213, 216, 248, 250, 252], "postprocess_cl": [210, 213, 214, 220, 224, 547], "user_postprocess": [210, 213, 214, 220, 224], "parsedecodecocotransform": 211, "quantizedinput": [212, 249, 579], "desir": [212, 216, 249, 252, 281, 579], "labelshift": [212, 249, 520, 579], "label_shift": [212, 249, 579], "parsedecodeimagenet": [212, 249, 579], "proto": [212, 216, 249, 252, 579], "parsedecodeimagenettransform": [212, 249], "tensorflowresizecropimagenettransform": [212, 249], "height": [212, 216, 249, 252, 275, 294, 324, 553, 570, 579, 581], "random_crop": [212, 249, 579], "resize_sid": [212, 249, 579], "resize_method": [212, 249], "bilinear": [212, 216, 249, 252, 579], "random_flip_left_right": [212, 249, 579], "mean_valu": [212, 249, 579], "channels_last": [212, 249], "subpixel": [212, 249], "rgb": [212, 249], "applic": [212, 249, 501, 530, 532, 534, 546, 556, 572, 578, 579], "crop": [212, 216, 249, 252, 549, 579], "flip": [212, 216, 249, 252, 579], "left": [212, 216, 249, 252, 324, 546, 579], "std": [212, 216, 249, 252, 275, 547, 548, 579], "bilinearimagenettransform": [212, 249], "central_fract": [212, 249, 579], "875": [212, 249, 579], "fraction": [212, 249, 579], "onnxbilinearimagenettransform": [212, 249], "onnxresizecropimagenettransform": [212, 249], "std_valu": [212, 249], "229": [212, 249, 547, 548], "225": [212, 249, 547, 548], "resizewithaspectratio": [212, 249], "87": [212, 249, 582], "inter_pol": [212, 249], "cv2": [212, 249], "inter_area": [212, 249], "aspect": [212, 216, 249, 252, 579], "convert_to_unicod": [215, 251], "unicod": [215, 251, 260, 302], "utf": [215, 251], "load_vocab": [215, 251], "vocab_fil": [215, 216, 251, 252, 579], "convert_by_vocab": [215, 251], "vocab": [215, 251, 281], "whitespace_token": [215, 251], "whitespac": [215, 251, 265, 307], "fulltoken": [215, 251], "tokenzi": [215, 251], "convert_tokens_to_id": [215, 251], "convert_ids_to_token": [215, 251], "basictoken": [215, 251], "punctuat": [215, 251, 260, 265, 302, 307], "wordpiecetoken": [215, 251], "unk_token": [215, 251], "unk": [215, 251], "max_input_chars_per_word": [215, 251], "wordpiec": [215, 216, 251, 252, 579], "greedi": [215, 251], "longest": [215, 216, 251, 252, 579], "unaff": [215, 251], "un": [215, 251], "aff": [215, 251], "concat_gener": [216, 252], "tensorflowtransform": [216, 252], "mxnettransform": [216, 252], "pytorchtransform": [216, 252], "onnxrtqltransform": [216, 252], "onnxrtittransform": [216, 252], "tensorflowwrapfunct": [216, 252], "transform_func": [216, 252], "pytorchmxnettransform": [216, 252], "get_torchvision_map": [216, 252], "interpol": [216, 252, 331, 564, 571, 579], "torchvis": [216, 252, 275], "composetransform": [216, 252], "transform_list": [216, 252, 579], "croptoboundingbox": [216, 252, 579], "offset_height": [216, 252, 579], "offset_width": [216, 252, 579], "target_height": [216, 252, 579], "target_width": [216, 252, 579], "vertic": [216, 252, 294, 324, 579], "coordin": [216, 252, 339, 579], "horizont": [216, 252, 579], "mxnetcroptoboundingbox": [216, 252], "onnxrtcroptoboundingbox": [216, 252], "tensorflowcroptoboundingbox": [216, 252], "resizewithratio": [216, 252, 579], "min_dim": [216, 252, 579], "800": [216, 252, 579], "max_dim": [216, 252, 579], "1365": [216, 252, 579], "constant_valu": [216, 252], "side": [216, 252, 281, 546, 549, 579], "exce": [216, 252, 579], "tensorflowresizewithratio": [216, 252], "perm": [216, 252, 579], "permut": [216, 252, 324, 579], "tensorflowtranspos": [216, 252], "mxnettranspos": [216, 252], "pytorchtranspos": [216, 252], "randomverticalflip": [216, 252, 579], "tensorflowrandomverticalflip": [216, 252], "randomhorizontalflip": [216, 252, 548, 579], "tensorflowrandomhorizontalflip": [216, 252], "toarrai": [216, 252, 579], "pil": [216, 252, 579], "casttftransform": [216, 252], "castonnxtransform": [216, 252], "castpytorchtransform": [216, 252], "centercroptftransform": [216, 252], "paddedcentercroptransform": [216, 252], "crop_pad": [216, 252], "resizetftransform": [216, 252], "nearest": [216, 252, 579], "bicub": [216, 252, 579], "resizepytorchtransform": [216, 252], "randomcroptftransform": [216, 252], "locat": [216, 252, 547, 553, 574, 576, 579, 581], "randomresizedcroppytorchtransform": [216, 252], "randomresizedcropmxnettransform": [216, 252], "randomresizedcroptftransform": [216, 252], "get_param": [216, 252], "pramet": [216, 252], "normalizetftransform": [216, 252], "rescal": [216, 252, 579], "deviat": [216, 252, 579], "broadcast": [216, 252, 553, 579], "rescalekeraspretraintransform": [216, 252], "rescaletftransform": [216, 252], "rescaletransform": [216, 252], "alignimagechanneltransform": [216, 252], "dim": [216, 252, 289, 324, 339, 579], "w": [216, 252, 275, 570, 571, 579], "pytorchalignimagechannel": [216, 252], "tondarraytransform": [216, 252], "resizemxnettransform": [216, 252], "resizetransform": [216, 252], "cropresizetftransform": [216, 252], "y": [216, 252, 339, 579], "boundari": [216, 252, 415, 579], "area": [216, 252, 263, 305, 564, 579], "pytorchcropresizetransform": [216, 252], "mxnetcropresizetransform": [216, 252], "cropresizetransform": [216, 252], "centercroptransform": [216, 252], "mxnetnormalizetransform": [216, 252], "pytorchnormalizetransform": [216, 252], "normalizetransform": [216, 252], "randomcroptransform": [216, 252], "randomresizedcroptransform": [216, 252], "get_final_text": [216, 252], "pred_text": [216, 252], "orig_text": [216, 252], "squadexampl": [216, 252], "qas_id": [216, 252], "question_text": [216, 252], "doc_token": [216, 252], "orig_answer_text": [216, 252], "start_posit": [216, 252], "end_posit": [216, 252], "is_imposs": [216, 252], "unique_id": [216, 252], "example_index": [216, 252], "doc_span_index": [216, 252], "token_to_orig_map": [216, 252], "token_is_max_context": [216, 252], "input_mask": [216, 252, 331, 551], "segment_id": [216, 252, 551], "read_squad_exampl": [216, 252], "input_fil": [216, 252], "doc_strid": [216, 252, 579], "max_query_length": [216, 252, 579], "output_fn": [216, 252], "inputbatch": [216, 252], "collecttransform": [216, 252], "10833": [216, 252], "tfsquadv1posttransform": [216, 252], "n_best_siz": [216, 252, 579], "384": [216, 252, 579], "max_answer_length": [216, 252, 579], "total": [216, 252, 267, 296, 298, 309, 318, 319, 320, 324, 331, 334, 340, 549, 579], "nbest_predict": [216, 252, 579], "long": [216, 252, 557, 579], "chunk": [216, 252, 579], "much": [216, 252, 253, 259, 321, 551, 554, 570, 571, 579], "process_result": [216, 252], "get_postprocess_result": [216, 252], "tfmodelzoocollecttransform": [216, 252], "tfsquadv1modelzooposttransform": [216, 252], "squadv1": [216, 252, 579], "parsedecodevoctransform": [216, 252], "set_env_var": 217, "env_var": 217, "overwrite_exist": 217, "env": [217, 502, 510], "set_all_env_var": 217, "core": [217, 259, 274, 382, 546, 563, 569, 582], "get_architectur": 217, "get_threads_per_cor": 217, "thread": [217, 533, 546, 548, 569], "get_thread": 217, "get_physical_id": 217, "socket": [217, 505, 534, 569, 582], "get_core_id": 217, "get_bounded_thread": 217, "core_id": 217, "bind": 217, "command": [217, 259, 281, 382, 393, 396, 403, 409, 411, 412, 479, 502, 510, 530, 546, 553], "possibl": [217, 259, 272, 337, 341, 379, 446, 546, 554, 568, 575, 580], "unnecessari": [217, 259], "summary_benchmark": [217, 259], "config_inst": [217, 259], "generate_prefix": [217, 259], "core_list": [217, 259], "numactl": [217, 259], "run_inst": [217, 259], "critet": 218, "tensorflowcrossentropyloss": 218, "pytorchcrossentropyloss": 218, "tensorflowknowledgedistillationloss": 218, "pytorchknowledgedistillationloss": [218, 551], "pytorchintermediatelayersknowledgedistillationloss": 218, "tensorflowcriterion": 218, "pytorchcriterion": 218, "criterion_cl": 218, "criterion_registri": 218, "criterion_typ": 218, "registry_criterion": 218, "param_dict": [218, 223, 272], "crossentropyloss": 218, "tensorflowsparsecategoricalcrossentropi": 218, "sparsecategoricalcrossentropyloss": 218, "knowledgedistillationframework": 218, "student_model": [218, 253, 259, 551], "knowledgedistillationloss": [218, 581], "temperatur": [218, 581], "loss_typ": [218, 581], "ce": [218, 581], "loss_weight": [218, 581], "teacher_model_forward": 218, "notimplementederror": [218, 266, 267, 308, 309], "teacher_student_loss_c": 218, "student_output": [218, 226, 259, 551], "teacher_output": [218, 226, 253, 259], "student_targets_loss_c": 218, "groud": 218, "truth": [218, 264, 265, 306, 307], "loss_cal": 218, "loss_cal_sloss": 218, "student_loss": [218, 226, 259, 551], "softcrossentropi": 218, "logit": [218, 551], "ground": [218, 264, 265, 306, 307], "kullbackleiblerdiverg": 218, "pytorchknowledgedistillationlosswrapp": 218, "tensorflowknowledgedistillationlosswrapp": 218, "tensorflowknowledgedistillationlossextern": 218, "intermediatelayersknowledgedistillationloss": [218, 525], "layer_map": 218, "add_origin_loss": 218, "init_loss_func": 218, "init_feature_match": 218, "student_featur": 218, "teacher_featur": 218, "matcher": 218, "clear_featur": 218, "register_hooks_for_model": 218, "attributeerror": 218, "remove_all_hook": 218, "pytorch_linear_feature_match": 218, "pytorchintermediatelayersknowledgedistillationlosswrapp": 218, "selfknowledgedistillationloss": [218, 525], "selfknowledg": 218, "pytorchselfknowledgedistillationloss": 218, "l2diverg": 218, "feature1": 218, "feature2": 218, "pytorchselfknowledgedistillationlosswrapp": 218, "setter": [219, 220], "torch_util": [220, 259, 301], "metric_cl": [220, 221, 266, 267, 308, 309, 547], "user_metr": [220, 221, 308, 309], "alwai": [220, 221, 263, 305, 308, 309, 547, 564, 570], "tensorflowoptim": 223, "pytorchoptim": 223, "optimizer_cl": 223, "optimizer_registri": 223, "optimizer_typ": 223, "cross": [223, 266, 267, 308, 309, 559, 580], "tensorflowsgd": 223, "tensorflowadamw": 223, "tensorflow_addon": 223, "adamw": 223, "tensorflowadam": 223, "adam": [223, 581], "pytorchsgd": 223, "record_output": 225, "output_process": 225, "get_activ": 225, "mainli": [226, 259, 298, 324, 334, 571, 574], "train_func": [226, 259, 300, 551, 553, 570], "train_dataload": [226, 259, 551, 570], "pre_process": [226, 253, 259, 270, 282, 286, 291, 299, 553], "post_process": [226, 259], "Be": [226, 259, 263, 305], "on_train_end": [226, 259, 286, 291, 296, 297, 331, 332, 352], "pre_epoch_begin": [226, 259, 286, 291], "post_epoch_end": [226, 259, 286, 291], "on_epoch_begin": [226, 259, 286, 291, 296, 297, 331, 332, 352, 355, 570], "on_step_begin": [226, 259, 286, 291, 296, 297, 321, 331, 332, 355, 570], "batch_id": [226, 259], "on_batch_begin": [226, 259, 286, 291], "on_after_compute_loss": [226, 259, 286, 291, 352, 551], "on_before_optimizer_step": [226, 259, 296, 297, 331, 332, 333, 352, 570], "on_after_optimizer_step": [226, 259, 296, 297, 321, 331, 332, 333], "on_before_ev": [226, 259, 296, 297, 331, 332], "on_after_ev": [226, 259, 296, 297, 331, 332], "on_post_grad": [226, 259], "on_step_end": [226, 259, 286, 291, 296, 297, 331, 332, 352, 355, 570], "on_batch_end": [226, 259, 286, 291], "on_epoch_end": [226, 259, 286, 291, 296, 297, 331, 332, 352, 355, 551, 570], "register_hook": [226, 259], "input_arg": [226, 259], "input_kwarg": [226, 259], "_epoch_ran": [253, 259], "ran": [253, 259], "eval_frequ": [253, 259], "frequenc": [253, 259, 296, 331, 569, 581], "best_scor": [253, 259], "best_model": [253, 259], "train_cfg": [253, 259, 355], "evaluation_distribut": [253, 259, 286, 291], "train_distribut": [253, 259, 286, 291], "on_post_forward": [253, 259], "init_train_cfg": [253, 259], "create_criterion": [253, 259], "create_optim": [253, 259], "disil": [253, 259], "generate_hook": [253, 259, 286, 291], "qlinear2qdq": [254, 259, 301], "torch2onnx": [254, 259, 301], "torch_to_fp32_onnx": [254, 256], "opset_vers": [254, 256, 556], "dynamic_ax": [254, 256, 556], "do_constant_fold": [254, 256], "verbos": [254, 256, 272, 273, 274, 339], "ax": [254, 256], "torch_to_int8_onnx": [254, 256], "quant_format": [254, 256, 556], "u8s8": [254, 256], "qdq_op_fp32_bia": [254, 256, 556], "optionl": [254, 256], "qdq_op_int32_bia": [254, 256, 556], "qdq_op_fp32_bias_qdq": [254, 256, 556], "onnx_qlinear_to_qdq": [254, 255], "input_name_to_nod": [254, 255], "qlinearop": [254, 255, 561, 574], "check_model": 255, "update_weight_bia": 256, "fp32_onnx_path": [256, 257], "wegiht": 256, "set_data_typ": 256, "weight_typ": 256, "activation_typ": 256, "get_node_map": 256, "module_node_map": 256, "get_quantizable_onnx_op": 256, "quantize_nod": 256, "build_scale_map": 256, "int8_scale_info": 256, "scale_zp_dict": 256, "set_scale_info": 256, "int8_onnx_model": 256, "int8_onnx_path": 256, "recalculate_bia": 256, "recalcul": [256, 324], "remove_nodes_by_nam": 256, "sub_graph_with_int32_bia": 256, "a_info": 256, "b_info": 256, "qdq_fp32_bia": 256, "excut": 256, "qdq_int32_bia": 256, "qdq_fp32_bias_qdq": 256, "onnx2numpy_dtyp": 257, "onnx_node_typ": 257, "dummydataread": 257, "ortq": 257, "dataread": 257, "get_next": 257, "variou": [258, 259, 268, 299, 561, 571, 573], "dl": [258, 259, 268, 286, 291, 299, 559, 572], "bring": [258, 259, 299, 574], "vari": [258, 259, 286, 291, 299, 569, 582], "roc": [258, 259, 267, 286, 291, 299, 309], "footprint": [258, 259, 286, 291, 299, 320, 552, 567, 570, 571, 573], "flexibl": [258, 259, 286, 291, 299, 547, 551, 570, 571], "set_config_by_model": [258, 259, 268], "model_obj": [258, 259, 268], "export": [259, 263, 301, 305, 311, 312, 313, 317, 319, 352, 517, 578], "bleu": [259, 261, 266, 280, 301, 303, 308, 564], "bleu_util": [259, 266, 301, 308], "coco_label_map": [259, 266, 301, 308], "coco_tool": [259, 266, 301, 308], "evaluate_squad": [259, 266, 301, 308], "dynast": [259, 282, 301], "supernetwork": [259, 272, 275, 276, 282], "dynas_manag": [259, 275, 276, 282], "dynas_predictor": [259, 275, 276, 282], "dynas_search": [259, 276, 282], "dynas_util": [259, 274, 276, 282], "basic_na": [259, 282, 301], "nas_util": [259, 282, 301], "pruning_recip": [259, 301], "tile_pattern": [259, 287, 288], "pytorch_prun": [259, 301, 332], "logger": [259, 292, 301, 322, 353, 356, 498, 502, 506], "prune_util": [259, 292, 301], "pruner": [259, 286, 291, 292, 294, 297, 301, 525, 528, 581], "graph_optim": [259, 268, 301, 369, 438, 473, 477, 478, 498, 506, 522], "mixed_precis": [259, 301, 371, 438, 473, 498, 506, 522], "model_convers": [259, 301], "pruning_v2": [259, 301], "quantconf": [259, 299, 336], "qfunc": [259, 299], "routinu": [259, 299], "pruningconf": [259, 286, 291], "pruning_func": [259, 286, 291, 570], "update_items_for_all_prun": [259, 286, 297], "howev": [259, 286, 291, 297, 332, 556, 570], "analys": [259, 286, 291, 297], "generate_prun": [259, 286, 291], "dens": [259, 286, 291, 298, 334, 570, 571, 582], "spars": [259, 286, 291, 296, 331, 549, 570, 571, 572], "get_sparsity_ratio": [259, 286, 291, 294, 297, 324, 332], "elementwise_over_matmul_gemm_conv": [259, 286, 291, 297, 332], "elementwise_over_al": [259, 286, 291, 297, 332], "blockwise_over_matmul_gemm_conv": [259, 286, 291, 297, 332], "graphoptim": [259, 268, 369, 470, 521], "modelconvers": [259, 269], "unicoderegex": [260, 302], "hoc": [260, 302], "hack": [260, 302], "recogn": [260, 302], "nondigit_punct_r": [260, 302], "compil": [260, 302, 569], "preced": [260, 302], "punct_nondigit_r": [260, 302], "symbol_r": [260, 302], "property_char": [260, 302], "join": [260, 302], "bleu_token": [260, 302], "mose": [260, 302], "smt": [260, 302], "mosesdecod": [260, 302], "mteval": [260, 302], "v14": [260, 302], "pl": [260, 302], "l954": [260, 302], "l983": [260, 302], "tensor2tensor": [261, 281, 303], "bleu_hook": [261, 303], "compute_bleu": [261, 280, 303], "reference_corpu": [261, 303], "translation_corpu": [261, 303], "max_ord": [261, 303], "use_bp": [261, 303], "against": [261, 303], "gram": [261, 303], "flag": [261, 303, 352, 527], "third": [263, 305, 548], "parti": [263, 305, 574], "pycocotool": [263, 305, 557, 562], "object_detect": [263, 305], "noth": [263, 305, 510, 580], "jonathanhuang": [263, 305], "image_id": [263, 305, 564], "encod": [263, 272, 281, 305, 579], "groundtruth": [263, 305], "invok": [263, 305], "groundtruth_dict": [263, 305], "exportgroundtruthtococo": [263, 305], "groundtruth_boxes_list": [263, 305], "groundtruth_classes_list": [263, 305], "max_num_class": [263, 305], "output_path": [263, 305, 317, 510, 565], "detections_list": [263, 305], "exportdetectionstococo": [263, 305], "detection_boxes_list": [263, 305], "detection_scores_list": [263, 305], "detection_classes_list": [263, 305], "cocowrapp": [263, 305], "loadannot": [263, 305], "cocoevalwrapp": [263, 305], "agnostic_mod": [263, 305], "computemetr": [263, 305], "detection_typ": [263, 305], "hold": [263, 305, 339, 548], "datastructur": [263, 305], "mscoco": [263, 305], "replic": [263, 305], "extern": [263, 305, 317, 546], "category_id": [263, 305], "iou_typ": [263, 305], "iou_thr": [263, 267, 305, 309, 564], "map_point": [263, 267, 305, 309, 564], "cocoev": [263, 305], "Then": [263, 305, 546, 580], "getcategori": [263, 305], "getagnosticmod": [263, 305], "agnost": [263, 305, 551], "getcategoryidlist": [263, 305], "accumul": [263, 305, 338, 580], "include_metrics_per_categori": [263, 305], "all_metrics_per_categori": [263, 305], "summeri": [263, 305], "per_category_ap": [263, 305], "care": [263, 305], "pollut": [263, 305], "mldash": [263, 305], "summary_metr": [263, 305], "iou": [263, 267, 305, 309], "increment": [263, 279, 281, 305, 580], "50iou": [263, 305], "75iou": [263, 305], "75": [263, 305, 582], "pixel": [263, 305, 579], "medium": [263, 305], "larg": [263, 305, 548, 551, 570, 571, 582], "10000": [263, 305, 339], "recal": [263, 265, 267, 305, 307, 309], "bycategori": [263, 305], "supercategori": [263, 305], "performancebycategori": [263, 305], "category_stat": [263, 305], "exportsingleimagegroundtruthtococo": [263, 305], "next_annotation_id": [263, 305], "category_id_set": [263, 305], "groundtruth_box": [263, 305], "groundtruth_class": [263, 305], "groundtruth_mask": [263, 305], "groundtruth_is_crowd": [263, 305], "ingest": [263, 305], "ones": [263, 305, 571], "exportsingleimagedetectionstococo": [263, 305], "uniqu": [263, 275, 300, 305, 339, 404, 405, 574], "assign": [263, 305, 362, 403, 404, 409, 410, 411, 412, 546, 553, 565, 573], "num_gt_box": [263, 305], "num_detect": [263, 267, 305, 309, 564, 581], "image_height": [263, 305], "image_width": [263, 305], "detection_mask": [263, 305], "crowd": [263, 305], "insid": [263, 305, 551, 570, 580], "exportsingleimagedetectionboxestococo": [263, 305], "detection_box": [263, 305, 581], "detection_scor": [263, 305, 581], "detection_class": [263, 305, 581], "exporsingleimagedetectionboxestococo": [263, 305], "exportsingleimagedetectionmaskstococo": [263, 305], "allenai": [264, 265, 306, 307], "bi": [264, 265, 306, 307], "att": [264, 265, 306, 307], "f1_score": [264, 265, 306, 307], "ground_truth": [264, 265, 306, 307], "metric_max_over_ground_truth": [264, 265, 306, 307], "metric_fn": [264, 265, 306, 307], "exact_match_scor": [264, 306], "exact": [264, 306], "articl": [264, 265, 306, 307], "paragraph": [264, 265, 306, 307], "qa": [264, 265, 306, 307], "cantain": [264, 265, 306, 307], "normalize_answ": [265, 307], "extra": [265, 307], "newlin": [265, 307], "tab": [265, 307, 406, 409, 415, 533, 578], "harmon": [265, 267, 307, 309], "answer_start": [265, 307], "177": [265, 307], "denver": [265, 307], "bronco": [265, 307], "nfl": [265, 307], "afc": [265, 307], "bowl": [265, 307], "56be4db0acb8001400a502ec": [265, 307], "percentag": [265, 273, 307, 581], "basemetr": [266, 267, 308, 309], "single_output": [266, 267, 308, 309], "hvd": [266, 267, 308, 309, 553], "sample_weight": [266, 267, 308, 309], "metric_registri": [266, 267, 308, 309], "metric_typ": [266, 267, 308, 309], "decorator_metr": [266, 267, 308, 309], "tensorflowmetr": [267, 309], "pytorchmetr": [267, 309], "mxnetmetr": [267, 309], "onnxrtqlmetr": [267, 309], "onnxrtitmetr": [267, 309], "wrappytorchmetr": [267, 309], "wrapmxnetmetr": [267, 309], "wraponnxrtmetr": [267, 309], "proport": [267, 309], "were": [267, 309], "pred_list": [267, 309], "pytorchloss": [267, 309], "least": [267, 297, 309, 324, 332, 511, 570, 571, 580], "mae": [267, 309, 564], "absolut": [267, 273, 309, 321, 510, 554, 564, 569, 570, 571, 574, 580], "magnitud": [267, 309, 321, 561, 570, 571, 582], "rmse": [267, 273, 309, 564, 580], "squar": [267, 273, 309, 344, 564, 580], "tensorflowtopk": [267, 309], "among": [267, 309], "most": [267, 309, 339, 546, 565, 570, 574, 580], "outcom": [267, 309], "num_correct": [267, 309], "generaltopk": [267, 309], "cocomapv2": [267, 309, 564], "anno_path": [267, 309, 564], "map_kei": [267, 309], "detectionboxes_precis": [267, 309], "output_index_map": [267, 309, 564], "tensorflowmap": [267, 309], "tensorflowcocomap": [267, 309], "tensorflowvocmap": [267, 309], "squadf1": [267, 309, 564], "miou": [267, 309], "21": [267, 309, 582], "hist": [267, 309, 356, 357], "onnxrtglu": [267, 309], "dlrm": [267, 309, 582], "basicna": [270, 282], "model_build": [270, 282, 283], "conf_fnam": [270, 282], "init_by_cfg": [270, 282], "init_for_search": [271, 282], "select_model_arch": [271, 282, 283], "create_acc_predictor": [271, 282], "create_macs_predictor": [271, 282], "create_latency_predictor": [271, 282], "latenc": [271, 272, 273, 275, 280, 282, 515, 577, 580], "init_cfg": [271, 282], "parametermanag": [272, 275], "hot": 272, "pymoo": [272, 274, 275], "process_param_dict": 272, "upper": [272, 274], "vector": [272, 283, 285], "onehot_gener": 272, "in_arrai": 272, "onehot": 272, "unus": [272, 281], "depth": [272, 551, 575], "input_arrai": 272, "elast": 272, "mapper": [272, 403, 466, 467], "random_sampl": [272, 339], "subnetwork": [272, 275], "trial_limit": 272, "100000": 272, "translate2param": 272, "pymoo_vector": 272, "translate2pymoo": 272, "import_csv": 272, "filepath": 272, "column_nam": 272, "drop_dupl": 272, "panda": 272, "datafram": [272, 318, 319], "purpos": [272, 558, 565, 573], "subnet": [272, 275], "column": [272, 546, 570, 571], "df": [272, 318, 319], "set_se": 272, "create_training_set": 272, "train_with_al": 272, "sklearn": 272, "transformerltencod": 272, "alpha": [273, 321, 333], "default_alpha": 273, "cost_factor": 273, "default_cost_factor": 273, "max_iter": 273, "default_max_iter": 273, "regressor": 273, "get_paramet": 273, "get_metr": [273, 379], "mape": 273, "kendal": 273, "rank": [273, 553], "correl": 273, "spearman": 273, "searcher": [273, 285], "searchalgomanag": 274, "optuna": 274, "configure_nsga2": 274, "warm_pop": 274, "crossover_prob": 274, "crossover_eta": 274, "mutation_prob": 274, "02": [274, 582], "mutation_eta": 274, "configure_ag": 274, "run_search": 274, "save_histori": 274, "previous": [274, 548], "problemmultiobject": 274, "evaluation_interfac": 274, "evaluationinterfac": [274, 275], "param_count": 274, "param_upperbound": 274, "ofa": [274, 275], "mani": [274, 275, 320, 337, 548, 562, 580, 581], "get_mac": 275, "input_s": 275, "measure_lat": 275, "warmup_step": 275, "measure_step": 275, "resolut": 275, "warm": [275, 320], "runner": 275, "ofarunn": 275, "acc_predictor": 275, "macs_predictor": 275, "latency_predictor": 275, "datasetpath": 275, "w1": 275, "estimate_accuracy_top1": 275, "subnet_cfg": 275, "estimate_mac": 275, "estimate_lat": 275, "validate_top1": 275, "validate_mac": 275, "flop": 275, "fvcore": 275, "get_subnet": 275, "transformerltrunn": 275, "checkpoint_path": [275, 280], "predictor_mod": 275, "csv_path": 275, "written": 275, "eval_subnet": 275, "clear_csv": 275, "evaluationinterfaceresnet50": 275, "evaluationinterfacemobilenetv3": 275, "evaluationinterfacetransformerlt": 275, "get_torchvision_model": 275, "torchvisionrefer": 275, "baselin": [275, 347, 577, 578], "machine_transl": [276, 277, 282], "transformer_interfac": [276, 277, 278], "get_incremental_st": 279, "incremental_st": [279, 281], "set_incremental_st": 279, "multiheadattentionsup": 279, "super_embed_dim": 279, "num_head": 279, "is_encod": 279, "super_kdim": 279, "super_vdim": 279, "add_bias_kv": [279, 281], "add_zero_attn": [279, 281], "self_attent": 279, "encoder_decoder_attent": 279, "out_dim": 279, "qkv_dim": 279, "head": [279, 281, 570], "key_padding_mask": 279, "need_weight": 279, "static_kv": 279, "attn_mask": [279, 281], "timestep": 279, "bytetensor": [279, 281], "src_len": [279, 281], "reorder_incremental_st": 279, "new_ord": [279, 281], "buffer": 279, "compute_lat": 280, "get_model_paramet": 280, "compute_mac": 280, "transformersupernetwork": 281, "fairseq": 281, "vaswani": 281, "2017": 281, "arxiv": [281, 296, 321], "1706": 281, "03762": 281, "transformerencod": 281, "transformerdecod": 281, "line": [281, 509, 510, 530, 546, 553, 561, 578], "encoder_config": 281, "embed_token": 281, "encoder_lay": 281, "transformerencoderlay": 281, "argpars": 281, "namespac": 281, "src_token": 281, "src_length": 281, "longtensor": 281, "sentenc": 281, "encoder_out": 281, "embed_dim": 281, "encoder_padding_mask": 281, "reorder_encoder_out": 281, "rearrang": 281, "max_posit": 281, "upgrade_state_dict_nam": 281, "upgrad": 281, "possibli": 281, "old": [281, 297, 362, 576], "decoder_config": 281, "no_encoder_attn": 281, "decoder_lay": 281, "transformerdecoderlay": 281, "attend": 281, "prev_output_token": 281, "tgt_len": 281, "forc": [281, 565, 575], "extract_featur": 281, "output_lay": 281, "layer_idx": 281, "paper": [281, 551, 570, 571], "ffn": 281, "robust": 281, "encoder_normalize_befor": 281, "layer_norm": 281, "self_attn_layer_norm": 281, "final_layer_norm": 281, "seq_len": 281, "t_tgt": 281, "t_src": 281, "decoder_normalize_befor": 281, "prev_self_attn_st": 281, "prev_attn_st": 281, "self_attn_mask": 281, "self_attn_padding_mask": 281, "builder": 283, "res_save_path": 283, "count_model_paramet": 283, "load_search_result": 283, "dump_search_result": 283, "params_vec2params_dict": [283, 285], "paras_vec": 283, "find_best_model_arch": 283, "metrics_convers": 283, "init_search_cfg": 283, "nas_registri": 284, "nas_method": 284, "create_search_space_pool": 284, "find_pareto_front": 284, "n_point": 284, "n_metric": 284, "n_pareto_point": 284, "get_feedback": 285, "feedback": 285, "para_vec": 285, "gridsearch": 285, "whole": [285, 532, 546, 554, 574, 582], "exhaust": [285, 301, 343, 573], "randomsearch": 285, "42": [285, 569, 582], "bayesianoptimizationsearch": 285, "indices2params_vec": 285, "tfpruningcallback": [286, 291], "input_model": [286, 291, 566, 578], "pure": [286, 291], "s_output": [286, 291], "s_loss": [286, 291], "t_output": [286, 291], "support_pattern": [287, 288, 289], "pattern_registri": 289, "pattern_typ": 289, "patternbas": [289, 290], "mask_shap": [289, 290], "is_contigu": 289, "compute_spars": [289, 290], "abs_sum": 289, "abs_max": 289, "tile": 290, "tilepatternbas": 290, "nxm": [290, 294, 324, 331, 571], "matrix": [290, 571], "repeat_mask": 290, "ori_shap": 290, "tilepattern_1x1": 290, "1x1": [290, 551], "unstructur": [290, 561, 570, 571, 582], "tilepattern_2x2": 290, "2x2": 290, "tilepattern_1x16": 290, "1x16": 290, "tilepattern_4x1": 290, "tilepattern_1x2": 290, "1x2": 290, "update_config": [291, 332], "register_pattern": [294, 324], "get_pattern": [294, 324], "assertionerror": [294, 295, 296, 324, 331, 335], "is_glob": [294, 324], "contrast": [294, 324, 579], "get_mask": [294, 324], "target_sparsity_ratio": [294, 296, 324, 331], "pre_mask": [294, 324], "max_sparsity_ratio_per_lay": [294, 296, 573], "get_masks_glob": [294, 324], "get_mask_singl": 294, "exact_sparsity_ratio": [294, 324], "get_block_size_dict": [294, 324], "get_masks_loc": [294, 324], "calul": [294, 324], "ration": [294, 324], "get_pattern_lock_mask": [294, 324], "lock": [294, 324, 561, 568, 570, 571], "patternnxm": [294, 324], "kept": [294, 324], "block_siz": [294, 324], "block_size_1": [294, 324], "block_size_2": [294, 324], "keep_pre_mask": [294, 324], "unchang": [294, 324], "patternninm": [294, 324], "doc": [294, 324, 564, 570], "md": [294, 324, 553], "check_config": [295, 335], "prune_config": [295, 335], "everyth": [295, 335], "reset_non_value_to_default": 295, "undefin": [295, 335], "process_and_check_config": [295, 335], "obejct": 295, "process_config": [295, 335], "parse_to_prun": [295, 335], "parse_not_to_prun": 295, "register_prun": [296, 331], "get_prun": [296, 331], "module_nam": [296, 298, 321, 331, 333, 334, 362, 517], "cuurent": [296, 331], "current_sparsity_ratio": [296, 331], "global_step": [296, 331], "update_frequency_on_step": [296, 573], "mask_weight": [296, 331], "formal": [296, 331], "local_step": [296, 297, 331, 332], "judg": 296, "check_is_pruned_step": [296, 331], "update_scor": 296, "magnitudeprun": 296, "snipprun": 296, "snip": [296, 321, 561, 570, 571, 582], "1810": [296, 321], "02340": [296, 321], "snipmomentumprun": 296, "moreoev": 296, "patternlockprun": [296, 331], "templat": [297, 301, 332, 385, 404, 409, 498, 506, 543, 546], "tree": [297, 332, 380, 409, 411], "nlp": [297, 332, 554, 570, 571, 574], "huggingface_model": [297, 332], "config_file_path": [297, 332], "pruner_info": [297, 332], "register_schedul": [298, 334], "get_schedul": [298, 334], "gradual": [298, 334, 570, 571], "update_sparsity_ratio": [298, 334], "aggressive_ratio": 298, "current_prune_step": [298, 334], "total_prune_step": [298, 334], "oneshotschedul": [298, 334], "aggress": 298, "iterativeschedul": [298, 334], "target_ratio": [298, 334], "server": [300, 301, 438, 445, 497, 498, 505, 506, 514, 517, 528, 530, 532, 546], "seper": 300, "opt_model": [300, 568], "fulli": [300, 574], "saniti": 300, "illeg": 300, "sync": 300, "accordingli": 300, "reg": [301, 322, 331], "tuning_sampl": [301, 343, 348], "tuning_spac": [301, 343, 348, 351], "tuning_struct": [301, 343, 348], "auto_mixed_precis": [301, 343], "conserv": [301, 343], "hawq_v2": [301, 343], "mse_v2": [301, 343], "ux": 301, "config_gener": [301, 438, 498], "configuration_wizard": [301, 438, 498], "db_manag": [301, 438, 498, 536], "diagnosi": [301, 406, 409, 415, 438, 498, 527, 533], "file_brows": [301, 438, 498], "jobs_manag": [301, 438, 498], "model_zoo": [301, 438, 498], "names_mapp": [301, 438, 498], "profil": [301, 372, 390, 397, 399, 409, 412, 414, 415, 438, 446, 454, 498, 499, 509, 515, 532, 537], "manage_workspac": [301, 438, 498], "workload": [301, 367, 368, 369, 371, 373, 374, 377, 399, 404, 409, 469, 486, 493, 498, 500, 506, 516, 517, 532, 535, 537, 538, 539, 540, 572], "executor": [301, 365, 498, 506], "expiring_dict": [301, 498, 506], "github_info": [301, 498, 506], "hw_info": [301, 498, 506], "json_seri": [301, 368, 422, 423, 428, 430, 431, 434, 444, 453, 479, 485, 498, 505, 506, 515, 518, 519, 520, 521, 523, 524, 525, 526, 527], "proc": [301, 498, 506], "status_upd": [301, 498, 506], "yaml_util": [301, 498, 506], "web": [301, 497, 498, 546, 578], "servic": [301, 498, 531, 532, 569], "router": [301, 498, 532], "basemodel": [311, 312, 313, 315, 317, 318, 319], "plai": [311, 312, 317, 319, 570, 572], "role": [311, 312, 317, 319, 570], "itself": [311, 312, 313, 315, 317, 318], "node_typ": [311, 312, 313, 317, 318, 319], "conv0": [311, 312, 313, 317, 318, 319, 578], "kerasmodel": [313, 456], "base_model": [313, 315, 317, 318, 319], "get_model_fwk_nam": 314, "fwk": 314, "onnxmodel": [317, 449], "find_node_by_nam": 317, "new_nodes_list": 317, "find_nodes_by_initi": 317, "get_scale_zero": 317, "save_model_to_fil": 317, "use_external_data_format": 317, "2gb": 317, "get_model_typ": [318, 447], "validate_graph_nod": 318, "validate_and_inference_input_output": 318, "input_tensor_nam": 318, "output_tensor_nam": 318, "graph_sess": 318, "graph_def_sess": 318, "frozen_pb_sess": 318, "load_saved_model": 318, "saved_model_tag": 318, "serv": [318, 534, 542], "signatur": 318, "tag": [318, 504, 517, 578], "metagraphdef": 318, "input_tensor": [318, 319], "keras_sess": 318, "slim_sess": 318, "checkpoint_sess": 318, "estimator_sess": 318, "input_fn": 318, "saved_model_sess": 318, "tensorflowsavedmodelmodel": 318, "report_spars": [318, 319], "total_spars": [318, 319], "tensorflowqatmodel": 318, "tensorflowcheckpointmodel": 318, "pytorchbasemodel": 319, "get_all_weight_nam": 319, "get_weight": 319, "update_weight": 319, "new_tensor": 319, "update_gradi": 319, "grad_nam": 319, "new_grad": 319, "grad": 319, "prune_weights_": 319, "place": [319, 562, 578], "get_input": 319, "get_gradi": 319, "pytorchmodel": 319, "pytorchfxmodel": 319, "ipexmodel": 319, "objective_registri": 320, "sart": 320, "result_list": 320, "models": [320, 567, 573], "register_criterion": 321, "get_criterion": 321, "pruningcriterion": 321, "magnitudecriterion": 321, "criterion_class": 321, "magtinud": 321, "gradientcriterion": 321, "snipcriterion": 321, "product": [321, 561, 565, 569, 572, 574, 577, 580], "snipmomentumcriterion": 321, "mechan": [321, 577], "preserv": [321, 554], "basepattern": [324, 333], "keep_mask_lay": 324, "invalid_lay": 324, "reduce_tensor": 324, "along": [324, 510, 562], "unprun": 324, "get_single_mask_per_target_ratio": 324, "return_dict": 324, "zero_cnt": 324, "total_cnt": 324, "check_layer_valid": 324, "get_reduced_masks_from_data": 324, "update_residual_cnt": 324, "get_sparsity_ratio_each_lay": 324, "sparsity_ratio": 324, "sparsityinfo": 324, "adjust_ratio": 324, "key_new_spars": 324, "max_sparsity_ratio": 324, "min_sparsity_ratio": 324, "final_target_sparsity_ratio": 324, "examin": [324, 570], "adjust_sparsity_ratio": 324, "block_wis": 324, "get_sparsity_ratio_progress": 324, "reshape_orig_to_pattern": 324, "s1": 324, "s2": 324, "reshape_reduced_to_orig": 324, "orig_shap": 324, "reduce_scor": 324, "get_mask_per_threshold": 324, "cur_target_sparsity_ratio": 324, "keep_exact_sparsity_ratio": 324, "remain": 324, "count_new_masked_cnt": 324, "new_added_mask": 324, "update_new_added_mask": 324, "cur_mask": 324, "bacaus": 324, "update_progressive_mask": 324, "progressive_step": 324, "progressive_config": 324, "update_progressive_masks_linear": 324, "update_progressive_masks_scor": 324, "update_progressive_masks_loc": 324, "domain": [324, 379, 387, 390, 407, 409, 414, 438, 445, 446, 449, 467, 498, 499, 501, 517, 529, 534, 546, 570, 571, 580], "update_progressive_masks_glob": 324, "get_least_ninm_mask_from_data": 324, "elementwis": 324, "sparisti": 324, "get_ele_mask_per_threshold": 324, "least_ninm_mask": 324, "least_m_in_m_mask": 324, "pruner_registri": 330, "parse_valid_pruner_typ": 331, "baseprun": 331, "mask_weights_gener": 331, "update_mask": 331, "basicprun": 331, "proce": 331, "regul": 331, "set_global_step": 331, "progressiveprun": 331, "grain": [331, 572], "interv": [331, 571], "check_progressive_valid": 331, "check_is_pruned_progressive_step": 331, "update_masks_progress": 331, "print_progressive_spars": 331, "register_reg": 333, "regulariz": 333, "get_reg_typ": 333, "get_reg": 333, "basereg": 333, "grouplasso": 333, "coeff": 333, "lasso": [333, 561, 570, 571], "reg_term": 333, "coeffient": 333, "pruningschedul": 334, "init_ratio": 334, "init_sparsity_ratio": 334, "reset_none_to_default": 335, "update_param": [335, 384], "process_weight_config": 335, "global_config": 335, "local_config": 335, "default_config": 335, "pruners_info": 335, "process_yaml_config": 335, "calib_func": 336, "eval_metr": 336, "hybirdblock": 336, "paramt": 336, "automixedprecisiontunestrategi": 337, "rule": [337, 570], "tri": [337, 530, 580], "tune_config": [337, 338, 339, 340, 341, 342, 344, 345, 346, 347], "basictunestrategi": 338, "One": [338, 546, 548, 553, 561, 570, 571, 572, 580], "bayesiantunestrategi": 339, "come": [339, 580], "discret": [339, 580], "gaussian": [339, 580], "posterior": [339, 580], "black": [339, 580], "histori": [339, 347, 361, 402, 409, 411, 415, 468, 486, 536, 580], "maxim": [339, 570, 571, 580], "acq_max": 339, "ac": 339, "gp": 339, "y_max": 339, "random_se": [339, 352, 401, 527, 554, 581], "n_warmup": 339, "n_iter": 339, "acquisit": 339, "relev": 339, "acq": 339, "randomst": 339, "scipi": 339, "x_max": 339, "targetspac": 339, "pbound": 339, "9527": [339, 554, 581], "params_to_arrai": 339, "array_to_param": 339, "amort": 339, "keyerror": 339, "get_target": 339, "num": [339, 362, 564], "_kei": 339, "bayesianoptim": 339, "promis": [339, 552, 570, 571], "gen_next_param": 339, "conservativetunestrategi": 340, "o0": 340, "quantifi": 340, "quant_queu": 340, "prioriti": [340, 580], "fp16": [340, 565, 574], "trail": 340, "exhaustivetunestrategi": 341, "hawq_v2tunestrategi": 342, "impact": [342, 344, 345, 576, 580], "msetunestrategi": 344, "mse_impact_lst": 344, "best_qmodel": 344, "current_best_model": 344, "ordered_op_name_typ": 344, "mse_v2tunestrategi": 345, "highest": [345, 580], "revert": [345, 580], "lowest": [345, 570, 571, 580], "randomtunestrategi": 346, "strategy_registri": [347, 580], "evaluation_result": [347, 553], "initial_tuning_cfg": 347, "quant_mode_wise_item": 347, "ordereddict": [347, 404, 409, 518], "quant_mod": 347, "initial_op_tuning_cfg": 347, "op_item_dtype_dict": 347, "show_baseline_info": 347, "displai": [347, 433, 446], "durat": [347, 382, 393, 396, 403, 409, 411, 412, 502, 567, 577], "initial_best_acc": 347, "set_tuning_spac": 347, "setup_resum": 347, "set_q_func": 347, "update_best_op_tuning_cfg": 347, "op_tuning_cfg": 347, "deploy_config": 347, "deploy": [347, 550], "optuningconfig": [348, 351], "op_quant_mod": [348, 351], "get_stat": [348, 351], "from_stat": [348, 351], "compressionmanag": 352, "uesd": 352, "deal": 352, "commpon": 352, "train_loop": 352, "path_to_sav": 352, "_summary_": 352, "workspac": [352, 361, 403, 404, 409, 411, 412, 413, 443, 516, 518, 527, 566], "layerhistogramcollector": [353, 356], "layer_tensor": [353, 356], "include_lay": [353, 356], "diverg": [353, 356, 357, 551, 580], "create_eval_func": 355, "postprocess_cfg": 355, "create_train_func": 355, "Their": 355, "kl_diverg": 356, "expand_quantized_bin": [356, 357], "quantized_bin": [356, 357], "reference_bin": [356, 357], "expand": [356, 357], "bin": [356, 357], "safe_entropi": [356, 357], "reference_distr_p": [356, 357], "p_sum": [356, 357], "candidate_distr_q": [356, 357], "q_sum": [356, 357], "entropi": [356, 357, 580], "get_threshold": [356, 357], "hist_edg": [356, 357], "quantized_typ": [356, 357], "num_quantized_bin": [356, 357], "255": [356, 357, 574], "historgram": [356, 357], "number_bin": [356, 357], "checkpoint_dir": 361, "history_cfg": 361, "checkpoint": [361, 566], "best_configur": 361, "best_model_weight": 361, "pt": [361, 566, 572, 575], "snapshot": [361, 415, 536], "cfg_from_fil": 362, "yaml_fil": [362, 549, 553, 564, 567], "lazyimport": 362, "lazi": 362, "till": [362, 580], "get_siz": [362, 517], "equal_dict": 362, "d2": 362, "compare_kei": 362, "ignore_kei": 362, "ignor": [362, 549], "customized_msg": 362, "elaps": 362, "combine_histogram": 362, "old_hist": 362, "get_tuning_histori": 362, "tuning_history_path": [362, 486], "load_data_from_pkl": 362, "pkl": 362, "dump_data_to_loc": 362, "project_data": [363, 469, 470, 475, 479, 482, 485, 492], "benchmark_data": 363, "workdir": [363, 479, 492, 498, 502, 506, 514], "config_filenam": [363, 479, 492], "configuration_data": [363, 470, 475, 479, 482, 485], "generate_config": [363, 470, 475, 479, 482, 485, 492], "dataloaderinterfac": [363, 479, 492], "dataloader_data": [363, 375, 404, 409, 479, 492], "parse_arg": [364, 472, 476, 481, 484, 490], "benchmark_mod": [364, 509], "set_eager_execut": [364, 472, 476, 484], "request_id": [365, 468, 486, 487, 502, 510], "asd": [365, 487], "benchmark_id": [365, 382, 383, 393], "benchmark_result_upd": 365, "benchmark_result_update_pytorch_script": 365, "neural_coder_perform": 365, "neural_coder_tim": 365, "pytorch_script_bench_optim": 365, "command_line_of_script": 365, "pytorch_script_bench_original_model": 365, "execute_real_benchmark": 365, "project_detail": [365, 398, 468, 487], "benchmark_detail": 365, "benchmark_model": [366, 438, 498], "execute_benchmark": [366, 438, 498], "benchmarkconfiggener": 367, "configgener": [367, 368, 369, 371, 372, 373, 374], "generate_evaluation_config": [367, 369, 371, 373, 374], "generate_accuracy_config": 367, "generate_performance_config": 367, "workload_directori": 368, "configuration_path": 368, "jsonseri": [368, 422, 423, 428, 430, 431, 434, 444, 453, 479, 485, 505, 507, 515, 518, 519, 520, 521, 523, 524, 525, 526, 527], "get_predefined_config_path": [368, 517], "generate_model_config": 368, "generate_dataloader_config": 368, "graphoptimizationconfiggener": 369, "generate_graph_optimization_config": 369, "benchmark_config_gener": [370, 438, 498], "graph_optimization_config_gener": [370, 438, 498], "mixed_precision_config_gener": [370, 438, 498], "profiling_config_gener": [370, 438, 498], "pruning_config_gener": [370, 438, 498], "quantization_config_gener": [370, 438, 498], "mixedprecisionconfiggener": 371, "generate_mixed_precision_config": 371, "profilingconfiggener": 372, "pruningconfiggener": 373, "generate_pruning_config": 373, "quantizationconfiggener": 374, "generate_tuning_config": 374, "generate_quantization_config": 374, "configurationpars": 375, "input_data": [375, 380], "parse_evaluation_data": 375, "evaluation_data": 375, "parse_transform": 375, "transforms_data": [375, 404, 409], "parse_dataload": 375, "parse_metr": 375, "metric_data": 375, "get_param_typ": 375, "param_group": 375, "parse_valu": 375, "required_typ": 375, "parse_list_valu": 375, "parse_multidim_list": 375, "dimension": 375, "normalize_string_list": 375, "string_list": 375, "bracket": 375, "miss": [375, 574], "get_predefined_configur": 377, "update_config_to_machine_specif": 377, "configuration_pars": [378, 438, 498], "get_boundary_nod": [378, 438, 498], "get_configur": [378, 438, 498], "params_feed": [378, 438, 498], "pruning_config_pars": [378, 438, 498], "feeder": 379, "get_framework": [379, 452], "get_domain": 379, "get_model": [379, 452, 538], "get_dataload": 379, "get_transform": 379, "get_object": 379, "get_strategi": 379, "get_quantization_approach": 379, "get_possible_valu": 379, "pruningconfigpars": 380, "generate_tre": 380, "parse_entri": 380, "bench": [381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 468, 497], "dbmanag": [381, 414], "database_loc": [381, 414], "log_level": [381, 414, 508], "initialize_databas": [381, 414], "create_sqlalchemy_engin": [381, 414], "create_al": [381, 414], "tabl": [381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 404, 405, 414], "project_id": [382, 385, 392, 393, 396, 398, 404, 408, 409], "model_id": [382, 392, 393, 396], "dataset_id": [382, 385, 393, 396, 404, 408, 409], "warmup_iter": 382, "number_of_inst": 382, "cores_per_inst": [382, 518, 547, 548, 573], "execution_command": [382, 393, 396], "benchark": 382, "delete_benchmark": [382, 403, 409], "benchmark_nam": 382, "update_statu": [382, 393, 396], "execution_statu": [382, 393, 396], "executionstatu": [382, 393, 396, 403, 409, 411, 412, 499, 516], "update_dur": [382, 393, 396], "update_execution_command": [382, 393, 396, 403, 409, 411, 412], "update_log_path": [382, 393, 396, 409, 412], "update_config_path": [382, 393], "update_dataset": [382, 393, 396], "update_batch_s": [382, 393], "update_mod": 382, "update_cores_per_inst": 382, "update_number_of_inst": 382, "clean_statu": [382, 393, 396, 403, 409, 411, 412, 516], "status_to_clean": [382, 393, 396, 403, 409, 411, 412, 516], "build_info": [382, 383, 385, 392, 393, 396, 397, 399, 402], "benchmark_result": [382, 390, 414, 438], "benchmarkresult": [382, 383], "update_accuraci": 383, "update_perform": 383, "list_by_framework": [384, 391, 400], "framework_id": [384, 391, 392, 400, 416], "query_to_list": [384, 391, 400], "dataloaders_queri": 384, "dataloader_id": 384, "fill_dictionari": [384, 386, 387, 389, 391, 394, 395, 400], "dataset_nam": [385, 404, 409], "template_path": 385, "delete_dataset": [385, 404, 409], "update_template_path": 385, "get_domain_id": 386, "domain_nam": 386, "domainflavour": [387, 499], "db": [387, 394, 395, 415, 416], "get_domain_flavour_id": 387, "domain_flavour_nam": 387, "flavour": [387, 407, 409, 467, 499], "get_framework_id": 389, "framework_nam": [389, 465, 505], "domain_flavour": [390, 414, 438, 444, 517], "optimization_typ": [390, 393, 414, 438], "profiling_result": [390, 396, 414, 438], "pruning_detail": [390, 393, 414, 438], "tuning_detail": [390, 393, 414, 438], "tuning_histori": [390, 393, 409, 411, 414, 438, 473, 498], "metrics_queri": 391, "input_nod": 392, "precision_id": [392, 393, 394, 395], "domain_id": [392, 400], "domain_flavour_id": 392, "supports_profil": [392, 446, 454], "supports_graph": [392, 446], "supports_prun": [392, 446, 458], "delete_model": [392, 409, 410], "optimization_type_id": 393, "sampling_s": [393, 518, 548, 581], "tuning_details_id": [393, 401], "pruning_details_id": [393, 399], "diagnosis_config": 393, "delete_optim": [393, 409, 411], "optimization_id": [393, 394, 409, 411, 468], "optimization_nam": [393, 394, 408, 409], "update_optimized_model": [393, 409, 411], "optimized_model_id": 393, "update_sampling_s": 393, "update_precis": 393, "update_tuning_detail": 393, "update_pruning_detail": 393, "pin_accuracy_benchmark": [393, 409, 411], "pin": [393, 409, 411], "pin_performance_benchmark": [393, 409, 411], "get_optimization_by_project_and_model": 393, "unpin_benchmark": 393, "db_connect": 393, "unpin": 393, "optimizationtyp": [393, 394, 499], "tuningdetail": [393, 401, 485], "tuninghistori": [393, 402, 486], "pruningdetail": [393, 399], "optimized_model": 393, "get_pinned_benchmark": 393, "list_for_precis": 394, "precision_nam": [394, 395], "get_optimization_type_for_precis": 394, "get_optimization_type_id": 394, "get_optimization_type_by_nam": 394, "get_optimization_type_by_id": 394, "get_precision_id": 395, "get_precision_by_nam": 395, "get_precision_by_id": 395, "num_thread": 396, "delete_profil": [396, 409, 412], "profiling_id": [396, 397, 409, 412, 487], "profiling_nam": 396, "update_num_thread": 396, "profilingresult": [396, 397], "total_execution_tim": 397, "accelerator_execution_tim": 397, "cpu_execution_tim": 397, "op_run": 397, "op_defin": 397, "get_result": 397, "bulk_add": 397, "params_interfac": [397, 403, 404, 406, 408, 409, 410, 411, 412, 414, 438, 498, 536], "profilingresultaddparamsinterfac": [397, 409, 412, 415], "bulk": [397, 409, 412], "delete_result": 397, "delet": [397, 403, 404, 409, 410, 411, 412, 413, 570, 571], "create_project": [398, 408, 409, 413], "delete_project": [398, 409, 413], "project_nam": [398, 404, 409], "get_model_by_nam": 398, "list_project": [398, 409, 413], "update_not": 398, "pruning_details_data": 399, "delete_pruning_detail": 399, "list_by_domain": 400, "transforms_queri": 400, "accuracy_criterion_typ": 401, "accuracy_criterion_threshold": 401, "exit_polici": [401, 554, 581], "tuning_details_data": 401, "delete_tuning_detail": 401, "update_tuning_histori": 401, "tuning_history_id": 401, "minimal_accuraci": 402, "baseline_accuraci": 402, "baseline_perform": 402, "last_tune_accuraci": 402, "last_tune_perform": 402, "best_tune_accuraci": 402, "best_tune_perform": 402, "benchmarkapiinterfac": [403, 409], "get_benchmark_detail": [403, 409], "list_benchmark": [403, 409], "update_benchmark_accuraci": [403, 409], "update_benchmark_perform": [403, 409], "update_benchmark_statu": [403, 409], "update_benchmark_dur": [403, 409], "update_path": [403, 409, 411], "add_benchmark": [403, 409], "add_result": [403, 409, 412], "edit_benchmark": [403, 409], "parse_benchmark_data": [403, 409], "benchmarkaddparamsinterfac": [403, 409, 415], "parse_benchmark_edit_data": [403, 409], "benchmarkeditparamsinterfac": [403, 409, 415], "before_delete_benchmark_entri": 403, "sqlite3": 403, "db_model": [403, 414, 438, 498], "datasetapiinterfac": [404, 409], "get_dataset_detail": [404, 409], "list_dataset": [404, 409], "add_dataset": [404, 409], "set_template_path": [404, 409], "parsed_dataset_data": [404, 409], "datasetaddparamsinterfac": [404, 409, 415], "check_if_custom_metric_or_dataload": [404, 409], "dataset_data": [404, 409, 469, 470, 475, 479, 482, 485, 519], "generate_custom_templ": [404, 409], "dataloader_path": [404, 409], "generate_templ": [404, 409], "template_typ": [404, 409], "parse_dataset_data": [404, 409], "get_predefined_dataset": [404, 409], "prepare_predefined_dataload": [404, 409], "prepare_predefined_transform": [404, 409], "set_database_vers": [404, 405], "version_num": [404, 405], "alembic_vers": [404, 405], "initialize_associ": [404, 405], "initialize_precision_optimization_types_associ": [404, 405], "search_in_list_of_dict_for_unique_valu": [404, 405], "list_of_dict": [404, 405], "search_in_list_of_dict": [404, 405], "diagnosisapiinterfac": [406, 409], "get_op_list": [406, 409, 417], "get_op_detail": [406, 409, 417], "generate_optim": [406, 409], "model_wise_param": [406, 409], "parse_optimization_data": [406, 409, 411], "diagnosisoptimizationparamsinterfac": [406, 409, 415], "parse_op_wise_config": [406, 409], "op_wise_param": [406, 409], "parse_wise_paramet": [406, 409], "params_per_typ": [406, 409], "set_op_wise_pattern_precis": [406, 409], "parse_model_wise_config": [406, 409], "dictionariesapiinterfac": [407, 409], "dictonari": [407, 409], "list_domain": [407, 409], "list_domain_flavour": [407, 409], "list_optimization_typ": [407, 409], "list_optimization_types_for_precis": [407, 409], "list_precis": [407, 409], "list_dataload": [407, 409], "list_dataloaders_by_framework": [407, 409], "list_transform": [407, 409], "list_transforms_by_framework": [407, 409], "list_transforms_by_domain": [407, 409], "list_metr": [407, 409], "list_metrics_by_framework": [407, 409], "examplesapiinterfac": [408, 409], "get_optimization_data": [408, 409], "optimizationaddparamsinterfac": [408, 409, 411, 415], "benchmark_api_interfac": [409, 414, 438], "dataset_api_interfac": [409, 414, 438], "diagnosis_api_interfac": [409, 414, 438], "dictionaries_api_interfac": [409, 414, 438], "examples_api_interfac": [409, 414, 438], "model_api_interfac": [409, 414, 438], "optimization_api_interfac": [409, 414, 438], "profiling_api_interfac": [409, 414, 438], "project_api_interfac": [409, 414, 438], "modelapiinterfac": [409, 410], "add_model": [409, 410, 413], "get_model_detail": [409, 410], "list_model": [409, 410, 438, 464, 498], "parse_model_data": [409, 410], "modeladdparamsinterfac": [409, 410, 415], "optimizationapiinterfac": [409, 411], "get_optimization_detail": [409, 411], "list_optim": [409, 411], "update_optimization_statu": [409, 411], "update_optimization_dur": [409, 411], "add_optim": [409, 411], "add_quantization_optim": [409, 411], "optimization_data": [409, 411, 469, 470, 475, 479, 482, 485], "add_pruning_optim": [409, 411], "add_standard_optim": [409, 411], "edit_optim": [409, 411], "get_pruning_detail": [409, 411], "gat": [409, 411], "edit_tuning_detail": [409, 411], "parsed_optimization_data": [409, 411], "optimizationeditparamsinterfac": [409, 411, 415], "edit_pruning_detail": [409, 411], "pruning_data": [409, 411], "add_tuning_histori": [409, 411], "parse_tuning_histori": [409, 411], "tuninghistoryinterfac": [409, 411, 415, 536], "parse_optimization_edit_data": [409, 411], "load_pruning_details_config": [409, 411, 517], "profilingapiinterfac": [409, 412], "get_profiling_detail": [409, 412], "list_profil": [409, 412], "update_profiling_statu": [409, 412], "update_profiling_dur": [409, 412], "add_profil": [409, 412], "edit_profil": [409, 412], "bulk_add_result": [409, 412], "parse_profiling_data": [409, 412], "profilingaddparamsinterfac": [409, 412, 415], "parse_profiling_result_data": [409, 412], "parse_profiling_edit_data": [409, 412], "profilingeditparamsinterfac": [409, 412, 415], "projectapiinterfac": [409, 413], "get_project_detail": [409, 413], "add_dummy_dataset": [409, 413], "update_project_not": [409, 413], "db_oper": [414, 438, 498], "parse_nod": 415, "tuninghistoryiteminterfac": [415, 536], "update_dataloaders_param": 416, "dataloaders_to_upd": 416, "framework_dataloaders_config": 416, "get_framework_dataloaders_config": 416, "get_framework_transforms_config": 416, "get_tensors_info": [417, 446], "load_quantization_config": 417, "calculate_ms": 417, "input_model_tensor": 417, "optimized_model_tensor": 417, "op_detail": [417, 419, 438, 498], "opdetail": [417, 422], "get_histogram_data": 417, "draw": [417, 577, 580], "diagnosisfactori": 418, "get_diagnosi": 418, "onnx_diagnosi": [419, 438, 498], "onnxrt_diagnosi": [419, 420, 438], "tensorflow_diagnosi": [419, 438, 498], "factori": [419, 438, 473, 489, 494, 498, 509, 513], "op_entri": [419, 438, 498], "onnxrtdiagnosi": 421, "onnxrtmodel": [421, 449], "serialization_typ": [422, 423, 453, 505, 507, 519, 520, 524, 525], "oppattern": 422, "pattern_data": 422, "opweight": 422, "weights_data": 422, "opactiv": 422, "op_activ": 422, "opentri": 423, "activation_min": 423, "activation_max": 423, "tensorflowdiagnosi": 425, "tensorflowmodel": [425, 454, 456, 457, 458, 459], "browser": [426, 546], "get_directory_entri": 426, "get_requested_path": 426, "request": [426, 438, 439, 440, 461, 462, 465, 486, 498, 502, 529, 531, 533, 534, 538, 540, 541, 543, 546, 548, 574], "get_non_hidden_directory_entri": 426, "create_dir_entri": 426, "direntri": 426, "create_file_entri": 426, "create_entri": 426, "is_directori": 426, "sort_entri": 426, "should_show_fil": 426, "should_show_only_model_fil": 426, "get_setting_valu": 426, "get_filter_valu": 426, "filter_requested_entri": 426, "filter_nam": 426, "is_directory_entri": 426, "is_model_or_directory_entri": 426, "is_dataset_or_directory_entri": 426, "brows": 427, "filesystem": [427, 517, 542], "attribute_typ": 428, "expanded_group": [429, 432], "edg": [431, 433, 438, 498, 579], "add_edg": 431, "source_id": 431, "target_id": 431, "get_nod": 431, "highlight_pattern": 431, "get_target_nod": 431, "reader": [432, 433, 438, 498], "graphread": 432, "find_pattern_in_graph": [432, 533], "onnxrt_read": [433, 435, 438], "tensorflow_read": [433, 435, 438], "collaps": [433, 438, 498, 546], "graph_read": [433, 438, 498], "groupnod": 434, "group_nam": 434, "onnxrtread": 436, "tensorflowread": 437, "jobs_control_queu": [438, 439, 498], "frozen_pb": [438, 445, 455], "meta_graph": [438, 445, 455], "model_type_gett": [438, 445, 498], "repositori": [438, 443, 445, 498, 504, 560], "download_config": [438, 463, 464, 498], "download_model": [438, 463, 464, 498], "optimize_model": [438, 471, 473, 474, 477, 480], "neural_coder_optim": [438, 473, 498], "tune_model": [438, 473, 483], "execute_optim": [438, 473, 498], "tensorflow_profil": [438, 489, 498], "execute_profil": [438, 489, 498], "profile_model": [438, 489, 491, 495, 498], "job": [439, 513], "_jobscontrolqueu": 440, "queu": 440, "jobsmanag": 440, "_jobsmmanag": 441, "_job": 441, "get_default_path": 443, "shape_elements_ord": [446, 449, 458, 517], "get_input_nod": [446, 456, 457, 458], "get_output_nod": [446, 456, 457, 458], "ensure_supported_path": 446, "get_model_graph": [446, 449, 457, 458, 533], "supports_path": [446, 449, 451, 454, 456, 457, 459], "guard_requirements_instal": [446, 449, 451, 458], "instal": [446, 449, 451, 458, 465, 553, 557, 569], "nc_model_inst": [449, 458], "onnx_model": 449, "filtered_input_nod": 449, "remove_number_of_samples_from_shap": 449, "pytorchscriptmodel": 451, "modelrepositori": 452, "get_framework_from_path": [452, 517], "get_supported_framework": 452, "is_model_path": 452, "trust": [453, 546], "frozenpbmodel": 454, "metagraphmodel": 457, "metagraph": 457, "savedmodelmodel": 459, "get_input_shap": 460, "fix_dynamic_shap": 460, "resourc": [463, 551, 570], "download_yaml_config": 463, "model_info": 463, "download_fil": 463, "download_path": 463, "header": [463, 542, 557], "report_progress": 463, "unpack_arch": 463, "archive_path": 463, "unpack": 463, "archiv": 463, "get_yaml_url": 463, "model_src_dir": 463, "yaml_relative_loc": 463, "get_available_model": 465, "check_vers": 465, "framework_vers": 465, "supported_vers": 465, "validate_model_list": 465, "model_list": 465, "get_framework_module_nam": 465, "get_installed_framework": 465, "mappingdirect": 467, "namesmapp": 467, "framework_map": 467, "domain_map": 467, "domain_flavour_map": 467, "precision_map": 467, "map_nam": 467, "parameter_typ": 467, "execute_optimization_pytorch_script": 468, "execute_optimization_regular": 468, "parse_model_data_to_bench_nam": 468, "parse_log": 468, "optimization_detail": 468, "check_if_collect_tuning_histori": 468, "optimizationfactori": 469, "get_optim": 469, "optimization_script": [470, 475, 479, 482, 485], "optimize_graph": [472, 476], "output_graph": [472, 476, 481, 484], "optimize_graph_config": [472, 476], "optimize_pt_script": 478, "output_model_nam": 479, "output_model_dir": 479, "optimizationinterfac": 479, "accuracycriterion": [485, 580], "optimization_workdir": 486, "watcher": 486, "process_succeed": 486, "signal": [486, 517, 554], "was_history_file_chang": 486, "history_file_modification_tim": 486, "send_history_snapshot": 486, "execute_real_profil": 487, "profiling_detail": 487, "profilerfactori": [488, 493], "get_profil": [488, 493], "profiling_data": [488, 492, 493, 495, 515], "load_profiling_detail": 490, "json_path": 490, "config_path": 492, "initialize_graph": 495, "tf_modul": 495, "create_tf_config": 495, "num_warmup": 495, "get_node_by_nam": 495, "convert_nodes_to_list": 495, "build_dataload": 495, "delete_assign": 496, "wsgi": 497, "prepare_environ": 497, "app": [498, 532], "history_snapshot_pars": [498, 532, 537], "request_data_processor": [498, 532, 537], "response_gener": [498, 532, 537, 538, 540, 543], "status": [499, 511, 516], "ensure_workdir_exists_and_writ": 500, "clean_workloads_wip_statu": 500, "wip": [500, 582], "workloads_list": 500, "migrate_databas": 500, "latest": [500, 510, 562, 572, 576], "alemb": [500, 557, 562], "notfoundexcept": [501, 530, 531], "accessdeniedexcept": 501, "deni": 501, "clienterrorexcept": 501, "internalexcept": 501, "workspace_path": [502, 517], "subject": [502, 529, 563], "send_respons": 502, "log_nam": 502, "additional_log_nam": [502, 510], "shell": [502, 510, 578], "process_dur": 502, "call_on": 502, "cwd": [502, 510], "universal_newlin": [502, 510], "startupinfo": [502, 510], "creationflag": [502, 510], "ignore_exit_cod": [502, 510], "pid": [502, 510], "env_arg": 502, "ncprocess": [502, 511], "refresh_workdir": 502, "is_multi_command": 502, "expir": 503, "expiringdictitem": 503, "expires_at": 503, "is_expir": 503, "expiringdict": 503, "initial_valu": 503, "ttl": 503, "120": 503, "userdict": 503, "githubinfo": 504, "hw": 505, "hwinfo": 505, "get_number_of_socket": 505, "get_distribut": 505, "distibut": 505, "get_bios_vers": 505, "bio": [505, 569], "is_turbo_boost_en": 505, "turbo": [505, 569], "boost": [505, 565, 572], "get_kernel_vers": 505, "get_framework_info": 505, "get_framework_dependency_info": 505, "subdepend": 505, "serializ": 507, "serialize_item": 507, "datetim": 507, "throw": 507, "typeerror": 507, "2016": 507, "84913": 507, "08t11": 507, "084913": 507, "change_log_level": 508, "optimizationpars": 509, "performancepars": 509, "update_parti": 509, "parsed_result": 509, "summarize_parti": 509, "summarize_valu": 509, "accuracypars": 509, "benchmarkparserfactori": 509, "get_pars": 509, "profilingpars": 509, "unify_tim": 509, "string_valu": 509, "micro": 509, "125": [509, 582], "6m": 509, "microsecond": 509, "output_dir": 510, "cmd": 510, "docker": 510, "hub": 510, "aibt_tensorflow": 510, "7_3_mkldnn_tensorflow": 510, "111224": 510, "pull_imag": 510, "0c750a01": 510, "90e0": 510, "4aa8": 510, "99fe": 510, "a194d55a2046": 510, "time_start": 510, "2018": 510, "17t14": 510, "47": [510, 582], "352502": 510, "time_stop": 510, "25": [510, 582], "110410": 510, "info_path": 510, "tail": 510, "is_ok": [510, 511], "subprocess": [510, 533], "popen": 510, "remove_log": 510, "properli": 511, "return_code_al": 511, "remove_successful_log": 511, "success": [511, 529, 562], "get_status_update_funct": 513, "job_typ": 513, "sent": 515, "throughput": 515, "acc_input_model": 515, "acc_optimized_model": 515, "size_input_model": 515, "size_optimized_model": 515, "path_optimized_model": 515, "optimization_tim": 515, "insert_data": 515, "calculate_throughput": 515, "readi": 515, "ensure_working_path_exist": 516, "clean_log": 516, "workdir_path": 516, "is_hidden": 517, "get_dataset_path": 517, "get_file_extens": 517, "lead": [517, 551, 565, 570, 571], "is_dataset_fil": 517, "normalize_domain": 517, "underscor": 517, "normalize_framework": 517, "normalize_str": 517, "string_to_norm": 517, "get_model_zoo_config_path": 517, "model_dict": 517, "get_model_zoo_model_path": 517, "check_modul": 517, "get_module_vers": 517, "add_unit": 517, "load_model_config": 517, "load_dataloader_config": 517, "load_transforms_config": 517, "load_transforms_filter_config": 517, "meaning": [517, 568], "load_precisions_config": 517, "get_default_pruning_config_path": 517, "load_model_wise_param": 517, "load_metrics_config": 517, "get_metrics_dict": 517, "load_help_nc_param": 517, "replace_with_valu": 517, "file_path": 517, "verify_file_path": 517, "determine_ip": 517, "ip": 517, "is_development_env": 517, "nc_mode": 517, "filter_transform": 517, "parse_bool_valu": 517, "release_tag": 517, "get_shape_from_transform": 517, "get_height_width_from_s": 517, "parse_to_string_list": 517, "parse_to_float_list": 517, "export_to_csv": 517, "parse_vers": 517, "string_vers": 517, "remove_dataload": 518, "datalad": 518, "remove_accuracy_metr": 518, "set_evaluation_dataload": 518, "udpat": 518, "set_evaluation_dataset_path": 518, "get_performance_config": 518, "set_performance_cores_per_inst": 518, "get_performance_cores_per_inst": 518, "set_performance_num_of_inst": 518, "num_of_inst": [518, 547, 548, 573], "get_performance_num_of_inst": 518, "set_accuracy_and_performance_batch_s": 518, "set_quantization_dataload": 518, "set_quantization_dataset_path": 518, "set_quantization_batch_s": 518, "set_workspac": [518, 527], "set_accuracy_go": 518, "accuracy_go": 518, "set_accuracy_metr": 518, "set_transform": 518, "process_transform": 518, "set_quantization_approach": 518, "set_input": 518, "set_output": 518, "set_quantization_sampling_s": 518, "set_performance_warmup": 518, "warmup": [518, 573], "set_performance_iter": 518, "set_optimization_precis": 518, "yaml_path": 518, "is_dummi": 519, "labelbal": 519, "set_transforms_from_list": 519, "transforms_list": 519, "set_dataset": 519, "postprocessschema": 520, "get_label_shift_valu": 520, "set_accuracy_postprocess_transform": 520, "set_precis": [521, 523], "sgdoptim": 525, "adamwoptim": 525, "adamoptim": 525, "crossentropylosscriterion": 525, "sparsecategoricalcrossentropycriterion": 525, "knowledgedistillationlosscriterion": 525, "set_postprocess_transform": 525, "weightcompressionapproach": 525, "initialize_prun": 525, "pruner_dict_list": 525, "serialize_prun": 525, "parse_dict_value_to_float": 525, "parse_dict_value_to_int": 525, "wiseconfigdetail": 526, "wiseconfig": 526, "multiobject": 527, "acccriterion": 527, "exitpolici": 527, "set_timeout": 527, "set_max_tri": 527, "max_trial": [527, 554, 580], "trial": [527, 580], "set_performance_onli": 527, "set_random_se": 527, "float_represent": 528, "dumper": 528, "pruner_represent": 528, "outsid": 529, "create_simple_respons": 529, "gui": [529, 530, 534, 546, 561, 562], "messagequeu": 529, "queue": [529, 534], "post_failur": 529, "post_success": 529, "post_error": 529, "wait": 529, "global_config_directori": 530, "set_up": 530, "determine_values_from_environ": 530, "get_command_line_arg": 530, "determine_server_port": 530, "max_ports_tri": 530, "port_default": 530, "determine_gui_port": 530, "client": [530, 546], "server_port": 530, "unless": [530, 558], "is_port_taken": 530, "determine_log_level": 530, "determine_url_prefix": 530, "get_url": 530, "dump_token_to_fil": 530, "servicenotfoundexcept": 531, "unknown": 531, "connector": 533, "routingdefinit": 533, "rout": 533, "realtimeroutingdefinit": 533, "realtim": 533, "deferredroutingdefinit": 533, "deferredsubprocessroutingdefinit": 533, "spawn": 533, "get_system_info": 533, "endpoint": 534, "run_serv": 534, "webserv": 534, "get_tls_arg": 534, "tl": [534, 546], "block_ifram": 534, "werkzeug": [534, 542], "ifram": 534, "csp": 534, "block_snif": 534, "mime": 534, "snif": 534, "require_api_token": 534, "author": [534, 563], "handle_api_cal": 534, "subpath": 534, "allow_api_cal": 534, "page_not_found": 534, "disable_cach": 534, "build_paramet": 534, "flask": [534, 546], "web_socket_publish": 534, "web_socket": 534, "flask_socketio": 534, "socketio": [534, 546], "benchmarkservic": 535, "workloadservic": [535, 539, 540, 543], "historysnapshotpars": 536, "history_snapshot": 536, "provide_perform": 536, "parse_history_snapshot": 536, "parse_history_item": 536, "history_item": 536, "extract_accuraci": 536, "extract_perform": 536, "modelservic": 538, "optimizationservic": 539, "profilingservic": 540, "generate_csv": 540, "processor": [541, 565, 569, 572, 574, 575, 582], "requestdataprocessor": 541, "get_string_valu": 541, "responsegener": 542, "serve_from_filesystem": 542, "mimetyp": 542, "as_attach": 542, "add_refresh": 542, "refresh_tim": 542, "refresh": 542, "from_except": 542, "get_status_code_for_except": 542, "get_code_templ": 543, "get_output": 543, "asymmetr": [545, 574, 580], "conda": [546, 557, 562, 576], "forg": [546, 557, 562], "setup": [546, 558, 562], "ui": 546, "5000": 546, "338174d13706855fc6924cec7b3a8ae8": 546, "listen": 546, "firewal": 546, "8080": 546, "cert": 546, "path_to_cert": 546, "crt": 546, "path_to_private_kei": 546, "encrypt": 546, "insecur": 546, "expos": 546, "forfeit": 546, "threat": 546, "button": [546, 561], "pop": 546, "recognit": [546, 553, 578], "finish": 546, "synthet": 546, "plu": 546, "icon": 546, "section": [546, 551, 570, 573, 581], "unfold": 546, "On": [546, 574], "panel": 546, "navig": 546, "trash": 546, "visibl": 546, "cursor": 546, "prompt": [546, 553], "confirm": 546, "revers": 546, "exit": [546, 554, 565, 581], "pencil": 546, "light": [546, 552], "blue": 546, "color": 546, "row": [546, 570, 571], "arrow": 546, "checkbox": 546, "chart": [546, 574, 577, 578], "offer": [546, 549], "conveni": 546, "variat": 546, "yellow": 546, "warn": 546, "remind": 546, "dialog": 546, "cryptographi": 546, "centercrop": [547, 548, 579], "totensor": [547, 548, 579], "485": [547, 548, 582], "456": [547, 548], "406": [547, 548], "enough": [547, 574], "benchmarkconf": 547, "lpot": [547, 572, 576], "often": [548, 551, 568, 570, 571], "encount": 548, "consum": 548, "lack": 548, "faster": [548, 550, 572, 582], "dataloadermodul": 548, "hard": 548, "treat": 548, "eas": [548, 562, 572], "advantag": [548, 573], "life": 548, "launch": [548, 565], "__next__": 548, "randomresizedcrop": [548, 579], "imagerecordit": 548, "path_imgrec": 548, "label_width": 548, "preprocess_thread": 548, "data_nthread": 548, "data_shap": 548, "label_nam": 548, "rand_crop": 548, "rand_mirror": 548, "shuffle_dataset": 548, "shuffle_chunk_se": 548, "shuffle_se": 548, "data_layer_typ": 548, "combine_mean_std": 548, "helloworld": [549, 579], "ensp": [549, 564, 579], "imagerecord": [549, 553, 581], "image_nam": 549, "cocorecord": 549, "gt": [549, 556, 579], "float16": 549, "int64": 549, "style_transf": 549, "content": 549, "tfrecorddataset": 549, "aid": 550, "infrastructur": 550, "deploi": [551, 580], "power": [551, 569], "mobil": [551, 582], "workflow": [551, 562, 565, 578], "produc": 551, "softmax": 551, "l": [551, 578, 580], "kd": 551, "kullback": 551, "leibler": 551, "patient": 551, "compact": [551, 570, 571], "ia": 551, "attach": 551, "shallow": 551, "deepest": 551, "deeper": 551, "10006": 551, "distillationconf": 551, "blendcnn": [551, 582], "loss_sum": 551, "iter_bar": 551, "tqdm": 551, "desc": [551, 570], "teacher_logit": 551, "huge": [552, 571], "bit": [552, 565, 572, 574], "heavi": 552, "booster": 552, "degrad": 552, "retrain": [552, 570, 571], "incorpor": [552, 580], "novel": 552, "horovod": 553, "builtin": 553, "program": [553, 565], "addition": [553, 580], "enable_eager_execut": 553, "yaml_file_path": 553, "evaluation_time_cost": 553, "partit": 553, "distributedsampl": 553, "train_sampl": 553, "train_dataset": 553, "num_replica": 553, "train_kwarg": 553, "adadelta": 553, "distributedoptim": 553, "named_paramet": 553, "broadcast_paramet": 553, "root_rank": 553, "broadcast_optimizer_st": 553, "set_epoch": 553, "batch_idx": 553, "nll_loss": 553, "log_interv": 553, "0f": 553, "tloss": 553, "6f": 553, "dry_run": 553, "test_func": 553, "host": 553, "num_of_process": 553, "002": 553, "ssh": 553, "readm": 553, "exactli": 553, "resnet50_v1": 553, "resizecropimagenet": [553, 579], "realiz": [553, 564, 567, 575, 577], "tow": 553, "situat": 553, "node1": 553, "node2": 553, "TO": 553, "your_node1_nam": 553, "your_node2_nam": 553, "resnet50_fp32_pretrained_model": 553, "nc_resnet50_v1": 553, "factor": [554, 569, 582], "oppos": 554, "entail": 554, "post_training_dynamic_qu": [554, 573, 580], "post_training_static_qu": [554, 573, 580], "accuracy_criterion": [554, 567, 573, 580, 581], "rel": [554, 573, 580, 581, 582], "earli": [554, 574, 580, 581], "determinist": 554, "wide": [555, 565, 571, 574], "varieti": [555, 573, 580], "demonstr": [555, 570, 578], "exchang": 556, "hope": 556, "briefli": [556, 570], "matur": 556, "major": [556, 559, 574], "reus": 556, "torch2onnxconfig": 556, "inc_model": [556, 566], "fp32_onnx_config": 556, "randn": 556, "int8_onnx_config": 556, "matmulintegertofloat": 556, "matmulinteg": 556, "incompat": 557, "88": [557, 577, 582], "80": [557, 578, 582], "pyobject": 557, "reinstal": 557, "importerror": 557, "libgl": 557, "apt": [557, 562], "yum": [557, 562], "opencv": 557, "conflict": 557, "pend": 557, "27": [557, 562, 582], "quick": [558, 581], "friendli": [558, 581], "let": [558, 573, 581], "syntax": 558, "up1": 558, "up2": 558, "valid_mixed_precis": 558, "concatv2": 558, "avgpool": 558, "per_tensor": [558, 581], "addn": 558, "grappler_optim": 558, "constfold": 558, "debug_stripp": 558, "concept": [559, 577], "custom_metr": 559, "explicitli": 559, "refin": 559, "broad": 561, "snippet": 561, "upload": 561, "qintegerop": [561, 574], "plan": [561, 565], "frequent": 562, "ask": 562, "consolid": 562, "streamlin": 562, "scienc": 562, "anaconda": 562, "suit": [562, 578], "esri": 562, "apach": 563, "softwar": [563, 565, 569, 572, 576], "copyright": 563, "mit": 563, "accompani": 563, "wish": 563, "bibtex": 563, "misc": 563, "feng": 563, "tian": 563, "chuanqi": 563, "wang": 563, "guom": 563, "zhang": 563, "penghui": 563, "cheng": 563, "pengxin": 563, "yuan": 563, "haihao": 563, "shen": 563, "jiong": 563, "gong": 563, "titl": 563, "howpublish": 563, "year": 563, "logo": [563, 569], "atom": 563, "phi": 563, "pentium": 563, "vtune": 563, "corpor": [563, 569], "subsidiari": [563, 569], "brand": [563, 569], "claim": [563, 569], "popularli": 564, "label_map": 564, "decis": 564, "ap": 564, "curv": 564, "target_boxes_num": 564, "str_label": 564, "int_label": 564, "inturn": 564, "cocomap": 564, "vocmap": 564, "categor": 564, "multiclass": 564, "multilabel": 564, "multi_metr": 564, "higher_is_bett": [564, 567, 580, 581], "newmetr": 564, "reflect": [564, 569, 579], "recent": 565, "growth": 565, "complex": [565, 571], "bfloat16": [565, 575], "half": 565, "sixteen": 565, "bandwidth": 565, "3rd": [565, 572, 574, 575], "gen": [565, 572, 575], "codenam": 565, "avx512": [565, 574], "vcvtne2ps2bf16": 565, "vcvtneps2bf16": 565, "vdpbf16p": 565, "user_defined_funct": 565, "avx512_bf16": 565, "consequ": 565, "persist": 566, "brought": [566, 574], "tf2": 566, "h5": 566, "onnx_ml_pb2": 566, "hybridblock": 566, "0000": 566, "saved_result": 566, "multi_object": 567, "peak": 567, "start_tim": 567, "_result_list": 567, "customobj": 567, "simultan": [568, 573], "arbitrari": 568, "gain": [568, 572], "benefit": [568, 570], "Of": 568, "cours": 568, "prune_conf": 568, "post_training_quantization_conf": 568, "quantization_aware_training_conf": 568, "configurationintel": 569, "platinum": [569, 582], "8380": [569, 582], "manufactur": 569, "m50cyp2sbstd": 569, "se5c6200": 569, "86b": 569, "0022": 569, "d64": 569, "2105220049": 569, "microcod": 569, "0xd0002b1": 569, "30ghz": 569, "3ghz": 569, "40": [569, 581, 582], "perf": 569, "256gb": 569, "16x16gb": 569, "ddr4": 569, "3200mt": 569, "nic": 569, "ethernet": 569, "10g": 569, "x550t": 569, "drive": 569, "1x": 569, "intel_ssdsc2kw01": 569, "953": 569, "9g": 569, "ct1000mx500ssd1": 569, "931": 569, "5g": 569, "publicli": 569, "degre": 569, "mark": 569, "trademark": 569, "art": [570, 571], "increasingli": [570, 571], "crucial": [570, 571], "salient": [570, 571], "nonzero": [570, 571], "irregular": [570, 571], "anywher": [570, 571], "2in4": 570, "amper": 570, "ic": [570, 572], "oc": 570, "kh": 570, "kw": 570, "fastform": 570, "finetun": [570, 571, 582], "downstream": [570, 571], "formula": [570, 571], "num_train_epoch": 570, "pbar": 570, "progressbar": 570, "n_total": 570, "n_gpu": 570, "gradient_accumulation_step": 570, "clip_grad_norm_": 570, "max_grad_norm": 570, "rate": [570, 574], "cv": [570, 571], "grown": 571, "unpreced": 571, "smooth": 571, "discourag": 571, "namhoon": 571, "lee": 571, "thalaiyasingam": 571, "ajanthan": 571, "philip": 571, "torr": 571, "2019": 571, "plug": 572, "twitter": 572, "linkedin": 572, "zone": 572, "hug": 572, "land": 572, "gcp": 572, "aw": [572, 582], "azur": 572, "marketplac": 572, "pat": 572, "keynot": 572, "intelon": 572, "sep": 572, "alibaba": 572, "chines": 572, "aug": 572, "purif": 572, "sacrif": 572, "jun": 572, "partner": 572, "democrat": 572, "apr": 572, "ecosystem": 572, "mar": 572, "feb": 572, "sigopt": 572, "jan": 572, "bilibili": 572, "ml": 572, "doubl": 572, "mlperf": 572, "reconstruct": 572, "abound": 572, "cern": 572, "gan": 572, "3dgan": 572, "4th": 572, "iml": 572, "workshop": 572, "highli": 572, "intelcaff": 572, "aris": 573, "tell": 573, "henc": 573, "quant_aware_train": 573, "op_type_list": [573, 580], "use_bf16": [573, 575], "weight_compress": [573, 581], "initial_spars": [573, 581], "prune_typ": [573, 581], "basic_magnitud": [573, 581], "start_epoch": [573, 581], "end_epoch": [573, 581], "update_frequ": 573, "prune_domain": 573, "tile_pattern_1x1": 573, "inter_num_of_thread": 573, "intra_num_of_thread": 573, "graph_optimization_level": 573, "disable_al": 573, "veri": [574, 580], "invent": 574, "int4": 574, "cost": 574, "theoret": 574, "affin": 574, "zeropoint": 574, "overflow": 574, "solv": [574, 576], "unseen": 574, "peopl": 574, "emul": 574, "pain": 574, "lossi": 574, "understand": [574, 578], "philosophi": 574, "val_dataset": 574, "val_dataload": 574, "worker": 574, "ping_memori": 574, "enhanc": 575, "bf16wrapper": 575, "retrac": 575, "site": 576, "assist": 576, "comparison": [576, 578], "sed": 576, "your_script": 576, "visual": [577, 578, 580], "hyperparamet": [577, 580], "backbon": 577, "interact": 577, "sigopt_api_token": [577, 580], "sigopt_project_id": [577, 580], "sigopt_experiment_id": 577, "nc": [577, 580], "login": 577, "certain": 577, "suffici": 577, "ordinari": 577, "capac": 577, "sigopt_experiment_nam": [577, 580], "receiv": 577, "tuning_criterion": [577, 580], "tuningcriterion": [577, 580], "strategy_kwarg": [577, 580], "analysi": 577, "8266": 577, "8372": 577, "2132": 577, "83": [577, 582], "7495": 577, "8299": 577, "8294": 577, "85": [577, 582], "0837": 577, "8291": 577, "4469": 577, "discov": 578, "why": 578, "valuabl": 578, "instrument": 578, "writer": 578, "_pre_eval_hook": 578, "submodul": 578, "whitelist": 578, "_recordingobserv": 578, "output_tensors_dict": 578, "current_it": 578, "get_tensor_valu": 578, "_observer_forward_hook": 578, "_add_observer_": 578, "named_children": 578, "leaf": 578, "add_modul": 578, "register_forward_hook": 578, "dump_tim": 578, "summarywrit": 578, "_acc": 578, "tune_": 578, "add_graph": 578, "get_observer_dict": 578, "observer_dict": 578, "is_quant": 578, "add_histogram": 578, "bind_al": 578, "logdir_spec": 578, "tune_0_acc0": 578, "tune_1": 578, "tune_1_acc0": 578, "79": [578, 582], "four": 578, "baseline_acc_0": 578, "776": 578, "tune_1_acc_0": 578, "095": 578, "runs_v3": 578, "image_recognit": 578, "run_tuning_dump_tensor": 578, "sh": 578, "inceptionv3": 578, "v0": 578, "cg": 578, "op_wis": [578, 581], "bash": 578, "run_tun": 578, "topologi": 578, "inception_v3": 578, "dataset_loc": 578, "inceptionv3_fp32_pretrained_model": 578, "output_model": 578, "nc_inceptionv3": 578, "inceptionv3_dump_tensor": 578, "poor": 578, "disappear": 578, "randomcrop": 579, "cropres": 579, "decodeimag": 579, "jpeg": 579, "encodejp": 579, "alignimagechannel": 579, "68": [579, 582], "116": 579, "78": [579, 582], "103": 579, "94": [579, 582], "017": 579, "bilinearimagenet": [579, 581], "topilimag": 579, "padding_mod": 579, "border": 579, "colorjitt": 579, "bright": 579, "satur": 579, "hue": 579, "jitter": 579, "tondarrai": 579, "human": 580, "op_name_list": 580, "tolerable_loss": 580, "quant_level": 580, "post_training_auto_qu": 580, "ii": 580, "iii": 580, "classic": 580, "idea": 580, "primari": 580, "spent": 580, "hawq_v2_loss": 580, "model_loss": 580, "compli": 580, "focu": 580, "short": 580, "never": 580, "loglevel": 580, "endlessli": 580, "perspect": 580, "smbo": 580, "appl": 580, "surrog": 580, "quantil": 580, "x1": 580, "x2": 580, "densiti": 580, "parzen": 580, "greatest": 580, "hour": 580, "dai": 580, "abctunestrategi": 580, "overridden": 580, "mobilenet_v1": 581, "onnxrt_integ": 581, "onnxrt_qlinear": 581, "image_tensor": 581, "subsect": 581, "model_wis": 581, "conv1": 581, "hyper": 581, "06": [581, 582], "beta_1": 581, "beta_2": 581, "999": 581, "epsilon": 581, "sparsecategoricalcrossentropi": 581, "reduct": 581, "sum_over_batch_s": 581, "from_logit": 581, "54": [581, 582], "19": [581, 582], "90": [581, 582], "nesterov": 581, "weight_decai": 581, "overal": 581, "ye": 582, "rnn": 582, "unet": 582, "performancethroughput": 582, "sec": 582, "efficientnet": 582, "91": 582, "43": 582, "69": 582, "32x": 582, "cnn": 582, "incept": 582, "37": 582, "65": 582, "38": 582, "77": 582, "53": 582, "57x": 582, "46": 582, "61": 582, "58x": 582, "resnet101": 582, "39": 582, "63": 582, "11x": 582, "51x": 582, "26": 582, "59": 582, "23": 582, "06x": 582, "25x": 582, "70": 582, "44": 582, "00": 582, "163": 582, "133": 582, "22x": 582, "73": 582, "97": 582, "49": 582, "111": 582, "20x": 582, "v3": 582, "43x": 582, "v4": 582, "18": 582, "56": 582, "53x": 582, "36": 582, "33x": 582, "44x": 582, "374": 582, "226": 582, "66x": 582, "92": 582, "41x": 582, "fashion": 582, "359": 582, "244": 582, "47x": 582, "172": 582, "66": 582, "98x": 582, "153": 582, "76x": 582, "151": 582, "112": 582, "35x": 582, "26x": 582, "72": 582, "99": 582, "56x": 582, "82": 582, "93x": 582, "vgg16": 582, "89": 582, "178": 582, "14x": 582, "vgg19": 582, "156": 582, "18x": 582, "albert": 582, "23x": 582, "barthez": 582, "81": 582, "86": 582, "82x": 582, "203": 582, "01x": 582, "216": 582, "102": 582, "10x": 582, "sst2": 582, "218": 582, "stsb": 582, "57": 582, "48": 582, "49x": 582, "93": 582, "70x": 582, "50x": 582, "40x": 582, "3878": 582, "3717": 582, "04x": 582, "camembert": 582, "188": 582, "91x": 582, "ctrl": 582, "deberta": 582, "124": 582, "81x": 582, "347": 582, "73x": 582, "382": 582, "198": 582, "flaubert": 582, "561": 582, "35": 582, "370": 582, "52x": 582, "hubert": 582, "84": 582, "36x": 582, "409": 582, "181": 582, "longform": 582, "28x": 582, "mbart": 582, "16x": 582, "639": 582, "490": 582, "31x": 582, "lvwerra": 582, "pegasu": 582, "samsum": 582, "19x": 582, "peleenet": 582, "419": 582, "316": 582, "resnet18": 582, "686": 582, "332": 582, "07x": 582, "611": 582, "333": 582, "83x": 582, "327": 582, "162": 582, "resnext101_32x8d": 582, "175": 582, "88x": 582, "197": 582, "99x": 582, "se_resnext50_32x4d": 582, "308": 582, "144": 582, "13x": 582, "squeezebert": 582, "186": 582, "155": 582, "78x": 582, "transfo": 582, "xl": 582, "37x": 582, "wave2vec2": 582, "60": 582, "58": 582, "21x": 582, "114": 582, "15x": 582, "yolo": 582, "29x": 582, "690": 582, "330": 582, "09x": 582, "614": 582, "334": 582, "84x": 582, "54x": 582, "410": 582, "168": 582, "resnext101_32x16d_wsl": 582, "1189": 582, "680": 582, "75x": 582, "677": 582, "381": 582, "59x": 582, "alexnet": 582, "960": 582, "469": 582, "05x": 582, "962": 582, "466": 582, "arcfac": 582, "235": 582, "130": 582, "294": 582, "34x": 582, "604": 582, "51": 582, "80x": 582, "caffenet": 582, "1501": 582, "536": 582, "1493": 582, "533": 582, "1372": 582, "541": 582, "480": 582, "1250": 582, "753": 582, "1130": 582, "748": 582, "emot": 582, "ferplu": 582, "336": 582, "65x": 582, "fcn": 582, "googlenet": 582, "740": 582, "587": 582, "770": 582, "567": 582, "824": 582, "601": 582, "819": 582, "597": 582, "45x": 582, "613": 582, "506": 582, "2454": 582, "1543": 582, "2164": 582, "1564": 582, "38x": 582, "2147": 582, "1046": 582, "1877": 582, "1054": 582, "mobilenetv2": 582, "2751": 582, "1797": 582, "2656": 582, "1835": 582, "7615": 582, "7646": 582, "764": 582, "901": 582, "434": 582, "141": 582, "7614": 582, "575": 582, "952": 582, "433": 582, "7226": 582, "7229": 582, "761": 582, "432": 582, "615": 582, "722": 582, "032": 582, "894": 582, "885": 582, "454": 582, "95x": 582, "603": 582, "455": 582, "644": 582, "636": 582, "254": 582, "791": 582, "shufflenet": 582, "2298": 582, "55": 582, "1480": 582, "55x": 582, "1951": 582, "1490": 582, "squeezenet": 582, "2588": 582, "1605": 582, "61x": 582, "2566": 582, "1936": 582, "725": 582, "570": 582, "27x": 582, "666": 582, "539": 582, "641": 582, "519": 582, "633": 582, "492": 582, "542": 582, "401": 582, "68x": 582, "tini": 582, "yolov3": 582, "648": 582, "518": 582, "221": 582, "319": 582, "307": 582, "30x": 582, "yolov4": 582, "zfnet": 582, "459": 582, "261": 582, "460": 582, "264": 582, "74x": 582, "441": 582, "337": 582, "272": 582, "211": 582, "152": 582, "423": 582, "180": 582, "311": 582, "69x": 582, "taskdataset": 582, "accuracyspars": 582, "ratiospars": 582, "commentsbalanc": 582, "unbalanc": 582, "classificationimagenet": 582, "76top": 582, "13top": 582, "magnitudepost": 582, "magnitudequant": 582, "answeringsquad": 582, "34f1": 582, "2x1": 582, "lassounbalanc": 582, "classificationmnli": 582, "mm": 582, "allbalanc": 582, "classificationsst": 582, "32accuraci": 582, "sensitivitybalanc": 582, "classificationqqp": 582, "classificationqnli": 582, "54accuraci": 582, "em": 582, "87f1": 582, "momentumunbalanc": 582, "momentumbalanc": 582, "classificationmrpc": 582, "52f1": 582, "61accuraci": 582, "7965": 582, "wideresnet40": 582, "9522": 582, "8178": 582, "0213": 582, "8235": 582, "027": 582, "5494": 582, "7153": 582, "5540": 582, "0046": 582, "5523": 582, "0029": 582, "vgg": 582, "7022": 582, "7415": 582, "7025": 582, "0003": 582, "6739": 582, "7399": 582, "6845": 582, "0106": 582, "7034": 582, "8382": 582, "bilstm": 582, "sst": 582, "8314": 582, "9403": 582, "9048": 582, "0734": 582, "7323": 582, "8256": 582, "8084": 582, "8814": 582, "7442": 582, "8371": 582, "0119": 582, "0115": 582, "tinybert": 582, "8018": 582, "8044": 582, "8363": 582, "8411": 582, "8025": 582, "8074": 582, "0007": 582, "0030": 582, "8626": 582, "8213": 582, "9091": 582, "8782": 582, "8684": 582, "8259": 582, "0058": 582, "distilroberta": 582, "6057": 582, "6455": 582, "6187": 582, "0130": 582, "c6i": 582, "2xlarg": 582, "c6a": 582, "c6g": 582, "a100cuda": 582}, "objects": {"": [[33, 0, 0, "-", "644ec953a7dc_pruning_support"], [34, 0, 0, "-", "6ece06672ed3_v1_14"], [35, 0, 0, "-", "6f0d0f71d92e_v1_13"], [36, 0, 0, "-", "9e89549a08c8_v1_11"], [37, 0, 0, "-", "block_mask"], [38, 0, 0, "-", "env"], [301, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[34, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [34, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[38, 1, 1, "", "run_migrations_offline"], [38, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[301, 2, 1, "", "Benchmark"], [301, 2, 1, "", "DistillationConfig"], [301, 2, 1, "", "WeightPruningConfig"], [40, 0, 0, "-", "adaptor"], [177, 0, 0, "-", "algorithm"], [179, 0, 0, "-", "benchmark"], [182, 0, 0, "-", "conf"], [184, 0, 0, "-", "config"], [185, 0, 0, "-", "contrib"], [210, 0, 0, "-", "data"], [259, 0, 0, "-", "experimental"], [308, 0, 0, "-", "metric"], [310, 0, 0, "-", "mix_precision"], [312, 0, 0, "-", "model"], [320, 0, 0, "-", "objective"], [322, 0, 0, "-", "pruner"], [336, 0, 0, "-", "quantization"], [343, 0, 0, "-", "strategy"], [352, 0, 0, "-", "training"], [356, 0, 0, "-", "utils"], [498, 0, 0, "-", "ux"], [544, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[39, 0, 0, "-", "adaptor"], [41, 0, 0, "-", "keras"], [42, 0, 0, "-", "keras_utils"], [44, 0, 0, "-", "mxnet"], [45, 0, 0, "-", "mxnet_utils"], [47, 0, 0, "-", "onnxrt"], [49, 0, 0, "-", "ox_utils"], [72, 0, 0, "-", "pytorch"], [73, 0, 0, "-", "query"], [74, 0, 0, "-", "tensorflow"], [134, 0, 0, "-", "tf_utils"], [171, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[39, 2, 1, "", "Adaptor"], [39, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[39, 3, 1, "", "convert"], [39, 3, 1, "", "evaluate"], [39, 3, 1, "", "inspect_tensor"], [39, 3, 1, "", "quantize"], [39, 3, 1, "", "quantize_input"], [39, 3, 1, "", "query_fused_patterns"], [39, 3, 1, "", "query_fw_capability"], [39, 3, 1, "", "save"], [39, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[41, 2, 1, "", "KerasAdaptor"], [41, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[41, 3, 1, "", "convert"], [41, 3, 1, "", "evaluate"], [41, 3, 1, "", "get_optype_wise_ability"], [41, 3, 1, "", "inspect_tensor"], [41, 3, 1, "", "quantize"], [41, 3, 1, "", "quantize_input"], [41, 3, 1, "", "query_fw_capability"], [41, 3, 1, "", "save"], [41, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[41, 3, 1, "", "get_op_types"], [41, 3, 1, "", "get_op_types_by_precision"], [41, 3, 1, "", "get_precisions"], [41, 3, 1, "", "get_quantization_capability"], [41, 3, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[43, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[44, 2, 1, "", "MXNetQuery"], [44, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MXNetQuery": [[44, 3, 1, "", "get_fuse_patterns"], [44, 3, 1, "", "get_mixed_precision_combination"], [44, 3, 1, "", "get_op_types"], [44, 3, 1, "", "get_precisions"], [44, 3, 1, "", "get_quantization_capability"], [44, 3, 1, "", "get_version"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[44, 3, 1, "", "evaluate"], [44, 3, 1, "", "inspect_tensor"], [44, 3, 1, "", "quantize"], [44, 3, 1, "", "query_fw_capability"], [44, 3, 1, "", "recover_tuned_model"], [44, 3, 1, "", "save"], [44, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[46, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[46, 2, 1, "", "CalibCollector"], [46, 2, 1, "", "CollectorBase"], [46, 2, 1, "", "DataIterLoader"], [46, 2, 1, "", "DataLoaderWrap"], [46, 2, 1, "", "NameCollector"], [46, 2, 1, "", "OpType"], [46, 2, 1, "", "TensorCollector"], [46, 1, 1, "", "amp_convert"], [46, 1, 1, "", "calib_model"], [46, 1, 1, "", "check_mx_version"], [46, 1, 1, "", "combine_capabilities"], [46, 1, 1, "", "create_data_example"], [46, 1, 1, "", "distribute_calib_tensors"], [46, 1, 1, "", "ensure_list"], [46, 1, 1, "", "fuse"], [46, 1, 1, "", "get_framework_name"], [46, 1, 1, "", "is_model_quantized"], [46, 1, 1, "", "isiterable"], [46, 1, 1, "", "make_module"], [46, 1, 1, "", "make_nc_model"], [46, 1, 1, "", "make_symbol_block"], [46, 1, 1, "", "ndarray_to_device"], [46, 1, 1, "", "parse_tune_config"], [46, 1, 1, "", "prepare_dataloader"], [46, 1, 1, "", "prepare_model"], [46, 1, 1, "", "prepare_model_data"], [46, 1, 1, "", "quantize_sym_model"], [46, 1, 1, "", "query_quantizable_nodes"], [46, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.mxnet_utils.util.CalibCollector": [[46, 3, 1, "", "calc_kl_th_dict"], [46, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.CollectorBase": [[46, 3, 1, "", "collect_gluon"], [46, 3, 1, "", "collect_module"], [46, 3, 1, "", "post_batch"], [46, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.mxnet_utils.util.NameCollector": [[46, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.TensorCollector": [[46, 3, 1, "", "collect_gluon"], [46, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.onnxrt": [[47, 2, 1, "", "ONNXRTQuery"], [47, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [47, 2, 1, "", "ONNXRT_QDQAdaptor"], [47, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [47, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[47, 3, 1, "", "get_graph_optimization"], [47, 3, 1, "", "get_op_types"], [47, 3, 1, "", "get_op_types_by_precision"], [47, 3, 1, "", "get_precisions"], [47, 3, 1, "", "get_quantization_capability"], [47, 3, 1, "", "get_version"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[47, 3, 1, "", "evaluate"], [47, 3, 1, "", "inspect_tensor"], [47, 3, 1, "", "quantize"], [47, 3, 1, "", "query_fw_capability"], [47, 3, 1, "", "recover"], [47, 3, 1, "", "save"], [47, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.ox_utils": [[48, 0, 0, "-", "calibration"], [61, 0, 0, "-", "operators"], [70, 0, 0, "-", "quantizer"], [71, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[48, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[48, 3, 1, "", "augment_graph"], [48, 3, 1, "", "calculate_quantization_params"], [48, 3, 1, "", "calculate_scale_zeropoint"], [48, 3, 1, "", "dump_calibration"], [48, 3, 1, "", "dump_minmax"], [48, 3, 1, "", "dump_tensor"], [48, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[50, 0, 0, "-", "activation"], [51, 0, 0, "-", "argmax"], [52, 0, 0, "-", "attention"], [53, 0, 0, "-", "binary_op"], [54, 0, 0, "-", "concat"], [55, 0, 0, "-", "conv"], [56, 0, 0, "-", "direct_q8"], [57, 0, 0, "-", "embed_layernorm"], [58, 0, 0, "-", "gather"], [59, 0, 0, "-", "gavgpool"], [60, 0, 0, "-", "gemm"], [62, 0, 0, "-", "lstm"], [63, 0, 0, "-", "matmul"], [64, 0, 0, "-", "maxpool"], [65, 0, 0, "-", "ops"], [66, 0, 0, "-", "pad"], [67, 0, 0, "-", "pooling"], [68, 0, 0, "-", "resize"], [69, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[50, 2, 1, "", "ActivationOperator"], [50, 2, 1, "", "QActivationOperator"], [50, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator": [[50, 3, 1, "", "convert"], [50, 3, 1, "", "convert_check"], [50, 3, 1, "", "quantize"], [50, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator": [[50, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator": [[50, 3, 1, "", "quantize"], [50, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[51, 2, 1, "", "ArgMaxOperator"], [51, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator": [[51, 3, 1, "", "convert"], [51, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[52, 2, 1, "", "AttentionOperator"], [52, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator": [[52, 3, 1, "", "convert"], [52, 3, 1, "", "convert_check"], [52, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator": [[52, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[53, 2, 1, "", "BinaryOperator"], [53, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator": [[53, 3, 1, "", "convert"], [53, 3, 1, "", "convert_check"], [53, 3, 1, "", "quantize"], [53, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator": [[53, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[54, 2, 1, "", "ConcatOperator"], [54, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator": [[54, 3, 1, "", "cast"], [54, 3, 1, "", "convert"], [54, 3, 1, "", "convert_check"], [54, 3, 1, "", "quantize"], [54, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator": [[54, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[55, 2, 1, "", "ConvOperator"], [55, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator": [[55, 3, 1, "", "convert"], [55, 3, 1, "", "convert_check"], [55, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator": [[55, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[56, 2, 1, "", "Direct8BitOperator"], [56, 2, 1, "", "DirectCastOperator"], [56, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator": [[56, 3, 1, "", "cast"], [56, 3, 1, "", "convert"], [56, 3, 1, "", "convert_check"], [56, 3, 1, "", "quantize"], [56, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator": [[56, 3, 1, "", "cast"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[57, 2, 1, "", "EmbedLayerNormalizationOperator"], [57, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator": [[57, 3, 1, "", "convert"], [57, 3, 1, "", "convert_check"], [57, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator": [[57, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[58, 2, 1, "", "GatherOperator"], [58, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator": [[58, 3, 1, "", "convert"], [58, 3, 1, "", "convert_check"], [58, 3, 1, "", "quantize"], [58, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[59, 2, 1, "", "GlobalAveragePoolOperator"], [59, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator": [[59, 3, 1, "", "convert"], [59, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator": [[59, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[60, 2, 1, "", "GemmOperator"], [60, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator": [[60, 3, 1, "", "convert"], [60, 3, 1, "", "convert_check"], [60, 3, 1, "", "quantize"], [60, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator": [[60, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[62, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator": [[62, 3, 1, "", "convert"], [62, 3, 1, "", "convert_check"], [62, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[63, 2, 1, "", "MatMulOperator"], [63, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator": [[63, 3, 1, "", "convert"], [63, 3, 1, "", "convert_check"], [63, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator": [[63, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[64, 2, 1, "", "MaxPoolOperator"], [64, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator": [[64, 3, 1, "", "convert"], [64, 3, 1, "", "convert_check"], [64, 3, 1, "", "quantize"], [64, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[65, 2, 1, "", "Operator"], [65, 2, 1, "", "QOperator"], [65, 1, 1, "", "op_registry"], [65, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.ops.Operator": [[65, 3, 1, "", "cast"], [65, 3, 1, "", "convert"], [65, 3, 1, "", "convert_check"], [65, 3, 1, "", "quantize"], [65, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops.QOperator": [[65, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[66, 2, 1, "", "PadOperator"], [66, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator": [[66, 3, 1, "", "convert"], [66, 3, 1, "", "convert_check"], [66, 3, 1, "", "quantize"], [66, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[67, 2, 1, "", "PoolOperator"], [67, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator": [[67, 3, 1, "", "convert"], [67, 3, 1, "", "convert_check"], [67, 3, 1, "", "quantize"], [67, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator": [[67, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[68, 2, 1, "", "QResizeOperator"], [68, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator": [[68, 3, 1, "", "convert"], [68, 3, 1, "", "convert_check"], [68, 3, 1, "", "quantize"], [68, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[69, 2, 1, "", "QSplitOperator"], [69, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator": [[69, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator": [[69, 3, 1, "", "cast"], [69, 3, 1, "", "convert"], [69, 3, 1, "", "convert_check"], [69, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.quantizer": [[70, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer.Quantizer": [[70, 3, 1, "", "check_opset_version"], [70, 3, 1, "", "convert_qdq_to_operator_oriented"], [70, 3, 1, "", "dequantize_tensor"], [70, 3, 1, "", "dtype_cast"], [70, 3, 1, "", "get_bias_add_nodes"], [70, 3, 1, "", "insert_qdq"], [70, 3, 1, "", "is_valid_quantize_weight"], [70, 3, 1, "", "merge_dedicated_qdq_pair"], [70, 3, 1, "", "quantize_bias"], [70, 3, 1, "", "quantize_bias_tensor"], [70, 3, 1, "", "quantize_inputs"], [70, 3, 1, "", "quantize_model"], [70, 3, 1, "", "quantize_outputs"], [70, 3, 1, "", "quantize_weight_per_channel"], [70, 3, 1, "", "quantize_weights_per_channel"], [70, 3, 1, "", "remove_redundant_pairs"], [70, 3, 1, "", "should_cast"], [70, 3, 1, "", "should_convert"], [70, 3, 1, "", "should_quantize"], [70, 3, 1, "", "tensor_proto_to_array"]], "neural_compressor.adaptor.ox_utils.util": [[71, 2, 1, "", "QuantFormat"], [71, 2, 1, "", "QuantType"], [71, 2, 1, "", "QuantizationMode"], [71, 2, 1, "", "QuantizedInitializer"], [71, 2, 1, "", "QuantizedValue"], [71, 2, 1, "", "QuantizedValueType"], [71, 2, 1, "", "ValueInfo"], [71, 1, 1, "", "attribute_to_kwarg"], [71, 1, 1, "", "calculate_scale_zp"], [71, 1, 1, "", "cast_tensor"], [71, 1, 1, "", "collate_preds"], [71, 1, 1, "", "dequantize_data"], [71, 1, 1, "", "dequantize_data_with_scale_zero"], [71, 1, 1, "", "dtype_to_name"], [71, 1, 1, "", "find_by_name"], [71, 1, 1, "", "is_B_transposed"], [71, 1, 1, "", "make_dquant_node"], [71, 1, 1, "", "make_quant_node"], [71, 1, 1, "", "quantize_data"], [71, 1, 1, "", "quantize_data_per_channel"], [71, 1, 1, "", "quantize_data_with_scale_zero"], [71, 1, 1, "", "quantize_nparray"], [71, 1, 1, "", "remove_init_from_model_input"], [71, 1, 1, "", "split_shared_bias"]], "neural_compressor.adaptor.pytorch": [[72, 2, 1, "", "PyTorchAdaptor"], [72, 2, 1, "", "PyTorchQuery"], [72, 2, 1, "", "PyTorch_FXAdaptor"], [72, 2, 1, "", "PyTorch_IPEXAdaptor"], [72, 2, 1, "", "TemplateAdaptor"], [72, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[72, 3, 1, "", "evaluate"], [72, 3, 1, "", "get_non_quant_modules"], [72, 3, 1, "", "inspect_tensor"], [72, 3, 1, "", "is_fused_child"], [72, 3, 1, "", "is_fused_op"], [72, 3, 1, "", "is_last_fused_child"], [72, 3, 1, "", "quantize"], [72, 3, 1, "", "query_fw_capability"], [72, 3, 1, "", "save"], [72, 3, 1, "", "set_tensor"], [72, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[72, 3, 1, "", "get_op_types"], [72, 3, 1, "", "get_op_types_by_precision"], [72, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[72, 3, 1, "", "calculate_op_sensitivity"], [72, 3, 1, "", "convert_sub_graph"], [72, 3, 1, "", "evaluate"], [72, 3, 1, "", "fuse_fx_model"], [72, 3, 1, "", "prepare_sub_graph"], [72, 3, 1, "", "quantize"], [72, 3, 1, "", "query_fw_capability"], [72, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[72, 3, 1, "", "evaluate"], [72, 3, 1, "", "inspect_tensor"], [72, 3, 1, "", "quantize"], [72, 3, 1, "", "query_fw_capability"], [72, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[72, 3, 1, "", "calculate_hessian_trace"], [72, 3, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[73, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[73, 3, 1, "", "get_fuse_patterns"], [73, 3, 1, "", "get_mixed_precision_combination"], [73, 3, 1, "", "get_op_types"], [73, 3, 1, "", "get_precisions"], [73, 3, 1, "", "get_quantization_capability"], [73, 3, 1, "", "get_version"], [73, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[74, 2, 1, "", "TensorFlowAdaptor"], [74, 2, 1, "", "TensorflowQuery"], [74, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[74, 3, 1, "", "calculate_op_sensitivity"], [74, 3, 1, "", "convert"], [74, 3, 1, "", "evaluate"], [74, 3, 1, "", "fused_node_mapping"], [74, 3, 1, "", "get_optype_wise_ability"], [74, 3, 1, "", "inspect_activation"], [74, 3, 1, "", "inspect_tensor"], [74, 3, 1, "", "inspect_weight_and_bias"], [74, 3, 1, "", "qat_convert"], [74, 3, 1, "", "quantize"], [74, 3, 1, "", "quantize_input"], [74, 3, 1, "", "query_fw_capability"], [74, 3, 1, "", "recover_tuned_model"], [74, 3, 1, "", "save"], [74, 3, 1, "", "set_tensor"], [74, 3, 1, "", "tuning_cfg_to_fw"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[74, 3, 1, "", "generate_internal_patterns"], [74, 3, 1, "", "get_eightbit_patterns"], [74, 3, 1, "", "get_fuse_patterns"], [74, 3, 1, "", "get_mixed_precision_combination"], [74, 3, 1, "", "get_op_types"], [74, 3, 1, "", "get_op_types_by_precision"], [74, 3, 1, "", "get_precisions"], [74, 3, 1, "", "get_quantization_capability"], [74, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[74, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[75, 0, 0, "-", "graph_converter"], [76, 0, 0, "-", "graph_converter_without_calib"], [115, 0, 0, "-", "graph_rewriter"], [133, 0, 0, "-", "graph_util"], [135, 0, 0, "-", "quantize_graph"], [162, 0, 0, "-", "quantize_graph_common"], [165, 0, 0, "-", "transform_graph"], [168, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[78, 0, 0, "-", "bf16"], [103, 0, 0, "-", "generic"], [114, 0, 0, "-", "graph_base"], [123, 0, 0, "-", "int8"], [129, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[77, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[77, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[77, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[79, 0, 0, "-", "convert_add_to_biasadd"], [80, 0, 0, "-", "convert_layout"], [81, 0, 0, "-", "convert_leakyrelu"], [82, 0, 0, "-", "convert_nan_to_random"], [83, 0, 0, "-", "convert_placeholder_to_const"], [84, 0, 0, "-", "dequantize_cast_optimizer"], [85, 0, 0, "-", "dilated_contraction"], [86, 0, 0, "-", "dummy_biasadd"], [87, 0, 0, "-", "expanddims_optimizer"], [88, 0, 0, "-", "fetch_weight_from_reshape"], [89, 0, 0, "-", "fold_batch_norm"], [90, 0, 0, "-", "fold_constant"], [91, 0, 0, "-", "fuse_biasadd_add"], [92, 0, 0, "-", "fuse_column_wise_mul"], [93, 0, 0, "-", "fuse_conv_with_math"], [94, 0, 0, "-", "fuse_decomposed_bn"], [95, 0, 0, "-", "fuse_decomposed_in"], [96, 0, 0, "-", "fuse_gelu"], [97, 0, 0, "-", "fuse_layer_norm"], [98, 0, 0, "-", "fuse_pad_with_conv"], [99, 0, 0, "-", "fuse_pad_with_fp32_conv"], [100, 0, 0, "-", "fuse_reshape_transpose"], [101, 0, 0, "-", "graph_cse_optimizer"], [102, 0, 0, "-", "grappler_pass"], [104, 0, 0, "-", "insert_print_node"], [105, 0, 0, "-", "move_squeeze_after_relu"], [106, 0, 0, "-", "pre_optimize"], [107, 0, 0, "-", "remove_training_nodes"], [108, 0, 0, "-", "rename_batch_norm"], [109, 0, 0, "-", "split_shared_input"], [110, 0, 0, "-", "strip_equivalent_nodes"], [111, 0, 0, "-", "strip_unused_nodes"], [112, 0, 0, "-", "switch_optimizer"], [113, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[79, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[79, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[80, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[80, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[81, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[81, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[82, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[82, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[83, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[83, 3, 1, "", "do_transformation"], [83, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[84, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[84, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[85, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[85, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[86, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[86, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[87, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[87, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[88, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[89, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[89, 3, 1, "", "do_transformation"], [89, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[90, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[90, 3, 1, "", "check_all_folded"], [90, 3, 1, "", "check_const_inputs"], [90, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[91, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[91, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[92, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[92, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[93, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[93, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[94, 1, 1, "", "get_const_dim_count"], [94, 1, 1, "", "node_from_map"], [94, 1, 1, "", "node_name_from_input"], [94, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[95, 1, 1, "", "get_const_dim_count"], [95, 1, 1, "", "node_from_map"], [95, 1, 1, "", "node_name_from_input"], [95, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[96, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[96, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[97, 2, 1, "", "FuseLayerNormOptimizer"], [97, 1, 1, "", "node_from_map"], [97, 1, 1, "", "node_name_from_input"], [97, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[97, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[98, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[98, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[99, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[99, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[100, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[100, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[101, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[101, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[102, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[102, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[104, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[104, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[105, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[105, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[107, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[107, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[108, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[108, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[109, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[109, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[110, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[110, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[111, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[111, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[112, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[112, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[113, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[113, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[114, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[114, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[116, 0, 0, "-", "freeze_fake_quant"], [117, 0, 0, "-", "freeze_value"], [118, 0, 0, "-", "freeze_value_without_calib"], [119, 0, 0, "-", "fuse_conv_redundant_dequantize"], [120, 0, 0, "-", "fuse_conv_requantize"], [121, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [122, 0, 0, "-", "fuse_matmul_requantize"], [124, 0, 0, "-", "meta_op_optimizer"], [125, 0, 0, "-", "post_hostconst_converter"], [126, 0, 0, "-", "post_quantized_op_cse"], [127, 0, 0, "-", "rnn_convert"], [128, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[116, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[117, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[117, 3, 1, "", "do_transformation"], [117, 3, 1, "", "generate_output_graph"], [117, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[118, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[118, 3, 1, "", "generate_output_graph"], [118, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[119, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[119, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[120, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[120, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[121, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[121, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[122, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [122, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [122, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [122, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[122, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[122, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[122, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[122, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[124, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[124, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[125, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[125, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[126, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[126, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[127, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[127, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[128, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[128, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[130, 0, 0, "-", "insert_qdq_pattern"], [131, 0, 0, "-", "merge_duplicated_qdq"], [132, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[130, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[130, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[131, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[131, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[132, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[132, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[133, 2, 1, "", "GraphAnalyzer"], [133, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[133, 3, 1, "", "add_node"], [133, 3, 1, "", "dump_graph"], [133, 3, 1, "", "get_graph_input_output"], [133, 4, 1, "", "graph"], [133, 3, 1, "", "has_positive_input"], [133, 3, 1, "", "parse_graph"], [133, 3, 1, "", "query_fusion_pattern_nodes"], [133, 3, 1, "", "remove_node"], [133, 3, 1, "", "remove_node_with_single_input_output"], [133, 3, 1, "", "replace_const_node"], [133, 3, 1, "", "replace_constant_graph_with_constant_node"], [133, 3, 1, "", "replace_node"], [133, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[133, 3, 1, "", "compare_node_attr"], [133, 3, 1, "", "create_constant_node"], [133, 3, 1, "", "create_node"], [133, 3, 1, "", "node_name_from_input"], [133, 3, 1, "", "set_attr_bool"], [133, 3, 1, "", "set_attr_dtype"], [133, 3, 1, "", "set_attr_float"], [133, 3, 1, "", "set_attr_int"], [133, 3, 1, "", "set_attr_int_list"], [133, 3, 1, "", "set_attr_string"], [133, 3, 1, "", "set_attr_string_list"], [133, 3, 1, "", "set_attr_tensor"], [133, 3, 1, "", "set_attr_type_list"], [133, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[137, 0, 0, "-", "qat"], [153, 0, 0, "-", "qdq"], [155, 0, 0, "-", "quantize_graph_base"], [156, 0, 0, "-", "quantize_graph_bn"], [157, 0, 0, "-", "quantize_graph_concatv2"], [158, 0, 0, "-", "quantize_graph_conv"], [159, 0, 0, "-", "quantize_graph_for_intel_cpu"], [160, 0, 0, "-", "quantize_graph_matmul"], [161, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[136, 0, 0, "-", "fake_quantize"], [138, 0, 0, "-", "quantize_config"], [139, 0, 0, "-", "quantize_helper"], [140, 0, 0, "-", "quantize_layers"], [145, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[136, 2, 1, "", "FakeQuantize"], [136, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[136, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[136, 3, 1, "", "from_config"], [136, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[138, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[138, 3, 1, "", "add_quantize_recipe"], [138, 3, 1, "", "clear_quantize_recipe"], [138, 3, 1, "", "get_quantize_recipe"], [138, 3, 1, "", "is_empty"], [138, 3, 1, "", "query_layer"], [138, 3, 1, "", "remove_layer"], [138, 3, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[139, 1, 1, "", "init_quantize_config"], [139, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[141, 0, 0, "-", "optimize_layer"], [142, 0, 0, "-", "quantize_layer_add"], [143, 0, 0, "-", "quantize_layer_base"], [144, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[142, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[144, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[145, 2, 1, "", "QuantizeWrapper"], [145, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[145, 3, 1, "", "build"], [145, 3, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[145, 3, 1, "", "build"], [145, 3, 1, "", "call"], [145, 3, 1, "", "compute_output_shape"], [145, 3, 1, "", "from_config"], [145, 3, 1, "", "get_config"], [145, 4, 1, "", "losses"], [145, 4, 1, "", "non_trainable_weights"], [145, 3, 1, "", "query_input_index"], [145, 4, 1, "", "trainable"], [145, 4, 1, "", "trainable_weights"], [145, 4, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[146, 0, 0, "-", "fuse_qdq_bn"], [147, 0, 0, "-", "fuse_qdq_concatv2"], [148, 0, 0, "-", "fuse_qdq_conv"], [149, 0, 0, "-", "fuse_qdq_deconv"], [150, 0, 0, "-", "fuse_qdq_in"], [151, 0, 0, "-", "fuse_qdq_matmul"], [152, 0, 0, "-", "fuse_qdq_pooling"], [154, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[146, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[146, 3, 1, "", "apply_the_transform"], [146, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[147, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[147, 3, 1, "", "apply_the_transform"], [147, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[148, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[148, 3, 1, "", "apply_the_transform"], [148, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[149, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[149, 3, 1, "", "apply_the_transform"], [149, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[150, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[150, 3, 1, "", "apply_the_transform"], [150, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[151, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[151, 3, 1, "", "apply_batchmatmulv2_fusion"], [151, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [151, 3, 1, "", "apply_matmul_biasadd_fusion"], [151, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [151, 3, 1, "", "apply_the_transform"], [151, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[152, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[152, 3, 1, "", "apply_the_transform"], [152, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[154, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[154, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[155, 2, 1, "", "QuantizeGraphBase"], [155, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[155, 3, 1, "", "do_transform"], [155, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[155, 3, 1, "", "add_output_graph_node"], [155, 3, 1, "", "apply_the_transform"], [155, 3, 1, "", "create_nodes_map"], [155, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[156, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[156, 3, 1, "", "apply_the_transform"], [156, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[157, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[157, 3, 1, "", "apply_the_transform"], [157, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[158, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[158, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [158, 3, 1, "", "apply_the_transform"], [158, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[159, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[159, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[160, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[160, 3, 1, "", "apply_the_transform"], [160, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[161, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[161, 3, 1, "", "apply_the_transform"], [161, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[162, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[162, 3, 1, "", "copy_attr"], [162, 3, 1, "", "create_constant_node"], [162, 3, 1, "", "create_node"], [162, 3, 1, "", "ensure_tensor_name_has_port"], [162, 3, 1, "", "get_sorted_graph"], [162, 3, 1, "", "node_name_from_input"], [162, 3, 1, "", "remove_training_nodes"], [162, 3, 1, "", "set_attr_bool"], [162, 3, 1, "", "set_attr_dtype"], [162, 3, 1, "", "set_attr_float"], [162, 3, 1, "", "set_attr_int"], [162, 3, 1, "", "set_attr_string"], [162, 3, 1, "", "set_attr_string_list"], [162, 3, 1, "", "set_attr_tensor"], [162, 3, 1, "", "set_attr_type_list"], [162, 3, 1, "", "split_shared_inputs"], [162, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[163, 0, 0, "-", "bias_correction"], [164, 0, 0, "-", "graph_transform_base"], [166, 0, 0, "-", "insert_logging"], [167, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[163, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[163, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[166, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[166, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[167, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[167, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[168, 1, 1, "", "disable_random"], [168, 1, 1, "", "get_tensor_by_name"], [168, 1, 1, "", "get_tensor_val_from_graph_node"], [168, 1, 1, "", "is_ckpt_format"], [168, 1, 1, "", "is_saved_model_format"], [168, 1, 1, "", "iterator_sess_run"], [168, 1, 1, "", "read_graph"], [168, 1, 1, "", "strip_equivalent_nodes"], [168, 1, 1, "", "strip_unused_nodes"], [168, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[169, 0, 0, "-", "bf16_convert"], [170, 0, 0, "-", "hawq_metric"], [172, 0, 0, "-", "onnx"], [173, 0, 0, "-", "symbolic_trace"], [174, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[170, 2, 1, "", "HessianTrace"], [170, 1, 1, "", "compare_weights"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[170, 3, 1, "", "get_act_gap"], [170, 3, 1, "", "get_avg_traces"], [170, 3, 1, "", "is_fused_module"], [170, 3, 1, "", "mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.util": [[174, 1, 1, "", "append_attr"], [174, 1, 1, "", "get_embedding_contiguous"], [174, 1, 1, "", "get_mse_order_per_fp32"], [174, 1, 1, "", "is_fused_module"]], "neural_compressor.algorithm": [[177, 2, 1, "", "ALGORITHMS"], [177, 2, 1, "", "Algorithm"], [177, 2, 1, "", "AlgorithmScheduler"], [175, 0, 0, "-", "algorithm"], [177, 1, 1, "", "algorithm_registry"], [176, 0, 0, "-", "fast_bias_correction"], [178, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.ALGORITHMS": [[177, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.AlgorithmScheduler": [[177, 4, 1, "", "adaptor"], [177, 4, 1, "", "calib_iter"], [177, 4, 1, "", "dataloader"], [177, 4, 1, "", "origin_model"], [177, 4, 1, "", "q_model"]], "neural_compressor.algorithm.algorithm": [[175, 2, 1, "", "ALGORITHMS"], [175, 2, 1, "", "Algorithm"], [175, 2, 1, "", "AlgorithmScheduler"], [175, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.algorithm.ALGORITHMS": [[175, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.algorithm.AlgorithmScheduler": [[175, 4, 1, "", "adaptor"], [175, 4, 1, "", "calib_iter"], [175, 4, 1, "", "dataloader"], [175, 4, 1, "", "origin_model"], [175, 4, 1, "", "q_model"]], "neural_compressor.algorithm.fast_bias_correction": [[176, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[178, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[179, 2, 1, "", "Benchmark"], [179, 1, 1, "", "fit"]], "neural_compressor.conf": [[180, 0, 0, "-", "config"], [181, 0, 0, "-", "dotdict"], [183, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[180, 2, 1, "", "Benchmark_Conf"], [180, 2, 1, "", "Conf"], [180, 2, 1, "", "DefaultConf"], [180, 2, 1, "", "Distillation_Conf"], [180, 2, 1, "", "Graph_Optimization_Conf"], [180, 2, 1, "", "MixedPrecision_Conf"], [180, 2, 1, "", "NASConfig"], [180, 2, 1, "", "PrunerV2"], [180, 2, 1, "", "Pruning_Conf"], [180, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[181, 2, 1, "", "DotDict"], [181, 1, 1, "", "deep_get"], [181, 1, 1, "", "deep_set"]], "neural_compressor.config": [[184, 2, 1, "", "DistillationConfig"], [184, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[186, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[187, 0, 0, "-", "sigopt"], [188, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[187, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[187, 3, 1, "", "next_tune_cfg"], [187, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[188, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[188, 3, 1, "", "stop"], [188, 3, 1, "", "traverse"]], "neural_compressor.data": [[210, 2, 1, "", "BaseTransform"], [210, 2, 1, "", "DataLoader"], [210, 2, 1, "", "Dataset"], [210, 2, 1, "", "Datasets"], [210, 2, 1, "", "FILTERS"], [210, 2, 1, "", "Filter"], [210, 2, 1, "", "IterableDataset"], [210, 2, 1, "", "Postprocess"], [210, 2, 1, "", "TRANSFORMS"], [193, 0, 0, "-", "dataloaders"], [210, 1, 1, "", "dataset_registry"], [205, 0, 0, "-", "datasets"], [210, 1, 1, "", "filter_registry"], [209, 0, 0, "-", "filters"], [210, 1, 1, "", "transform_registry"], [213, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[210, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[193, 2, 1, "", "DataLoader"], [189, 0, 0, "-", "base_dataloader"], [190, 0, 0, "-", "dataloader"], [191, 0, 0, "-", "default_dataloader"], [192, 0, 0, "-", "fetcher"], [194, 0, 0, "-", "mxnet_dataloader"], [195, 0, 0, "-", "onnxrt_dataloader"], [196, 0, 0, "-", "pytorch_dataloader"], [197, 0, 0, "-", "sampler"], [198, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[189, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[189, 3, 1, "", "batch"], [189, 4, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[190, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[191, 2, 1, "", "DefaultDataLoader"], [191, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[191, 3, 1, "", "batch"], [191, 4, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[192, 2, 1, "", "Fetcher"], [192, 2, 1, "", "IndexFetcher"], [192, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[194, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[195, 2, 1, "", "ONNXRTBertDataLoader"], [195, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[196, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[197, 2, 1, "", "BatchSampler"], [197, 2, 1, "", "IterableSampler"], [197, 2, 1, "", "Sampler"], [197, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[198, 2, 1, "", "TFDataDataLoader"], [198, 2, 1, "", "TensorflowBertDataLoader"], [198, 2, 1, "", "TensorflowDataLoader"], [198, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[198, 3, 1, "", "batch"]], "neural_compressor.data.datasets": [[205, 2, 1, "", "Dataset"], [205, 2, 1, "", "Datasets"], [205, 2, 1, "", "IterableDataset"], [199, 0, 0, "-", "bert_dataset"], [200, 0, 0, "-", "coco_dataset"], [201, 0, 0, "-", "dataset"], [205, 1, 1, "", "dataset_registry"], [202, 0, 0, "-", "dummy_dataset"], [203, 0, 0, "-", "dummy_dataset_v2"], [204, 0, 0, "-", "imagenet_dataset"], [206, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[199, 2, 1, "", "InputFeatures"], [199, 2, 1, "", "ONNXRTBertDataset"], [199, 2, 1, "", "ParseDecodeBert"], [199, 2, 1, "", "PytorchBertDataset"], [199, 2, 1, "", "TensorflowBertDataset"], [199, 2, 1, "", "TensorflowModelZooBertDataset"], [199, 1, 1, "", "convert_examples_to_features"], [199, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[199, 3, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[200, 2, 1, "", "COCONpy"], [200, 2, 1, "", "COCORaw"], [200, 2, 1, "", "COCORecordDataset"], [200, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[201, 2, 1, "", "CIFAR10"], [201, 2, 1, "", "CIFAR100"], [201, 2, 1, "", "Dataset"], [201, 2, 1, "", "Datasets"], [201, 2, 1, "", "FashionMNIST"], [201, 2, 1, "", "ImageFolder"], [201, 2, 1, "", "IterableDataset"], [201, 2, 1, "", "MNIST"], [201, 2, 1, "", "MXNetCIFAR10"], [201, 2, 1, "", "MXNetCIFAR100"], [201, 2, 1, "", "MXNetDatasets"], [201, 2, 1, "", "MXNetFashionMNIST"], [201, 2, 1, "", "MXNetImageFolder"], [201, 2, 1, "", "MXNetMNIST"], [201, 2, 1, "", "ONNXRTITDatasets"], [201, 2, 1, "", "ONNXRTQLDatasets"], [201, 2, 1, "", "PyTorchDatasets"], [201, 2, 1, "", "PytorchCIFAR10"], [201, 2, 1, "", "PytorchCIFAR100"], [201, 2, 1, "", "PytorchFashionMNIST"], [201, 2, 1, "", "PytorchMNIST"], [201, 2, 1, "", "PytorchMxnetWrapDataset"], [201, 2, 1, "", "PytorchMxnetWrapFunction"], [201, 2, 1, "", "TensorflowCIFAR10"], [201, 2, 1, "", "TensorflowCIFAR100"], [201, 2, 1, "", "TensorflowDatasets"], [201, 2, 1, "", "TensorflowFashionMNIST"], [201, 2, 1, "", "TensorflowImageFolder"], [201, 2, 1, "", "TensorflowImageRecord"], [201, 2, 1, "", "TensorflowMNIST"], [201, 2, 1, "", "TensorflowTFRecordDataset"], [201, 2, 1, "", "TensorflowVOCRecord"], [201, 1, 1, "", "calculate_md5"], [201, 1, 1, "", "check_integrity"], [201, 1, 1, "", "dataset_registry"], [201, 1, 1, "", "download_url"], [201, 5, 1, "", "framework_datasets"], [201, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[201, 3, 1, "", "download"], [201, 3, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[201, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[201, 4, 1, "", "class_to_idx"], [201, 3, 1, "", "download"], [201, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[202, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[203, 2, 1, "", "DummyDataset"], [203, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[204, 2, 1, "", "ImagenetRaw"], [204, 2, 1, "", "MXNetImagenetRaw"], [204, 2, 1, "", "ONNXRTImagenetDataset"], [204, 2, 1, "", "PytorchImagenetRaw"], [204, 2, 1, "", "TensorflowImagenetDataset"], [204, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[206, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[209, 2, 1, "", "FILTERS"], [209, 2, 1, "", "Filter"], [207, 0, 0, "-", "coco_filter"], [208, 0, 0, "-", "filter"], [209, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[207, 2, 1, "", "LabelBalanceCOCORawFilter"], [207, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[208, 2, 1, "", "FILTERS"], [208, 2, 1, "", "Filter"], [208, 2, 1, "", "MXNetFilters"], [208, 2, 1, "", "ONNXRTITFilters"], [208, 2, 1, "", "ONNXRTQLFilters"], [208, 2, 1, "", "PyTorchFilters"], [208, 2, 1, "", "TensorflowFilters"], [208, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[213, 2, 1, "", "BaseTransform"], [213, 2, 1, "", "Postprocess"], [213, 2, 1, "", "TRANSFORMS"], [211, 0, 0, "-", "coco_transform"], [212, 0, 0, "-", "imagenet_transform"], [214, 0, 0, "-", "postprocess"], [215, 0, 0, "-", "tokenization"], [216, 0, 0, "-", "transform"], [213, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TRANSFORMS": [[213, 3, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[211, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[212, 2, 1, "", "BilinearImagenetTransform"], [212, 2, 1, "", "LabelShift"], [212, 2, 1, "", "ONNXResizeCropImagenetTransform"], [212, 2, 1, "", "OnnxBilinearImagenetTransform"], [212, 2, 1, "", "ParseDecodeImagenet"], [212, 2, 1, "", "ParseDecodeImagenetTransform"], [212, 2, 1, "", "QuantizedInput"], [212, 2, 1, "", "ResizeWithAspectRatio"], [212, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[214, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[215, 2, 1, "", "BasicTokenizer"], [215, 2, 1, "", "FullTokenizer"], [215, 2, 1, "", "WordpieceTokenizer"], [215, 1, 1, "", "convert_by_vocab"], [215, 1, 1, "", "convert_to_unicode"], [215, 1, 1, "", "load_vocab"], [215, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[215, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[215, 3, 1, "", "convert_ids_to_tokens"], [215, 3, 1, "", "convert_tokens_to_ids"], [215, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[215, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[216, 2, 1, "", "AlignImageChannelTransform"], [216, 2, 1, "", "BaseTransform"], [216, 2, 1, "", "CastONNXTransform"], [216, 2, 1, "", "CastPyTorchTransform"], [216, 2, 1, "", "CastTFTransform"], [216, 2, 1, "", "CenterCropTFTransform"], [216, 2, 1, "", "CenterCropTransform"], [216, 2, 1, "", "CollectTransform"], [216, 2, 1, "", "ComposeTransform"], [216, 2, 1, "", "CropResizeTFTransform"], [216, 2, 1, "", "CropResizeTransform"], [216, 2, 1, "", "CropToBoundingBox"], [216, 2, 1, "", "InputFeatures"], [216, 2, 1, "", "MXNetCropResizeTransform"], [216, 2, 1, "", "MXNetCropToBoundingBox"], [216, 2, 1, "", "MXNetNormalizeTransform"], [216, 2, 1, "", "MXNetTransforms"], [216, 2, 1, "", "MXNetTranspose"], [216, 2, 1, "", "NormalizeTFTransform"], [216, 2, 1, "", "NormalizeTransform"], [216, 2, 1, "", "ONNXRTCropToBoundingBox"], [216, 2, 1, "", "ONNXRTITTransforms"], [216, 2, 1, "", "ONNXRTQLTransforms"], [216, 2, 1, "", "PaddedCenterCropTransform"], [216, 2, 1, "", "ParseDecodeVocTransform"], [216, 2, 1, "", "PyTorchAlignImageChannel"], [216, 2, 1, "", "PyTorchCropResizeTransform"], [216, 2, 1, "", "PyTorchNormalizeTransform"], [216, 2, 1, "", "PyTorchTransforms"], [216, 2, 1, "", "PyTorchTranspose"], [216, 2, 1, "", "PytorchMxnetTransform"], [216, 2, 1, "", "PytorchMxnetWrapFunction"], [216, 2, 1, "", "RandomCropTFTransform"], [216, 2, 1, "", "RandomCropTransform"], [216, 2, 1, "", "RandomHorizontalFlip"], [216, 2, 1, "", "RandomResizedCropMXNetTransform"], [216, 2, 1, "", "RandomResizedCropPytorchTransform"], [216, 2, 1, "", "RandomResizedCropTFTransform"], [216, 2, 1, "", "RandomResizedCropTransform"], [216, 2, 1, "", "RandomVerticalFlip"], [216, 2, 1, "", "RescaleKerasPretrainTransform"], [216, 2, 1, "", "RescaleTFTransform"], [216, 2, 1, "", "RescaleTransform"], [216, 2, 1, "", "ResizeMXNetTransform"], [216, 2, 1, "", "ResizePytorchTransform"], [216, 2, 1, "", "ResizeTFTransform"], [216, 2, 1, "", "ResizeTransform"], [216, 2, 1, "", "ResizeWithRatio"], [216, 2, 1, "", "SquadExample"], [216, 2, 1, "", "TFModelZooCollectTransform"], [216, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [216, 2, 1, "", "TFSquadV1PostTransform"], [216, 2, 1, "", "TRANSFORMS"], [216, 2, 1, "", "TensorflowCropToBoundingBox"], [216, 2, 1, "", "TensorflowRandomHorizontalFlip"], [216, 2, 1, "", "TensorflowRandomVerticalFlip"], [216, 2, 1, "", "TensorflowResizeWithRatio"], [216, 2, 1, "", "TensorflowTransform"], [216, 2, 1, "", "TensorflowTransforms"], [216, 2, 1, "", "TensorflowTranspose"], [216, 2, 1, "", "TensorflowWrapFunction"], [216, 2, 1, "", "ToArray"], [216, 2, 1, "", "ToNDArrayTransform"], [216, 2, 1, "", "Transforms"], [216, 2, 1, "", "Transpose"], [216, 1, 1, "", "convert_examples_to_features"], [216, 1, 1, "", "get_final_text"], [216, 1, 1, "", "get_torchvision_map"], [216, 1, 1, "", "read_squad_examples"], [216, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[216, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[216, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[216, 3, 1, "", "get_postprocess_result"], [216, 3, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[216, 3, 1, "", "register"]], "neural_compressor.experimental": [[259, 2, 1, "", "Benchmark"], [259, 2, 1, "", "Component"], [259, 2, 1, "", "Distillation"], [259, 2, 1, "", "Graph_Optimization"], [259, 2, 1, "", "MixedPrecision"], [259, 2, 1, "", "ModelConversion"], [259, 2, 1, "", "NAS"], [259, 2, 1, "", "Pruning"], [259, 2, 1, "", "Quantization"], [217, 0, 0, "-", "benchmark"], [220, 0, 0, "-", "common"], [226, 0, 0, "-", "component"], [248, 0, 0, "-", "data"], [253, 0, 0, "-", "distillation"], [254, 0, 0, "-", "export"], [258, 0, 0, "-", "graph_optimization"], [266, 0, 0, "-", "metric"], [268, 0, 0, "-", "mixed_precision"], [269, 0, 0, "-", "model_conversion"], [282, 0, 0, "-", "nas"], [286, 0, 0, "-", "pruning"], [287, 0, 0, "-", "pruning_recipes"], [291, 0, 0, "-", "pruning_v2"], [292, 0, 0, "-", "pytorch_pruner"], [299, 0, 0, "-", "quantization"], [300, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[259, 4, 1, "", "b_dataloader"], [259, 4, 1, "", "b_func"], [259, 3, 1, "", "config_instance"], [259, 3, 1, "", "generate_prefix"], [259, 4, 1, "", "metric"], [259, 4, 1, "", "model"], [259, 4, 1, "", "postprocess"], [259, 4, 1, "", "results"], [259, 3, 1, "", "run_instance"], [259, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[259, 4, 1, "", "eval_dataloader"], [259, 4, 1, "", "eval_func"], [259, 3, 1, "", "execute"], [259, 4, 1, "", "model"], [259, 3, 1, "", "on_after_compute_loss"], [259, 3, 1, "", "on_after_eval"], [259, 3, 1, "", "on_after_optimizer_step"], [259, 3, 1, "", "on_batch_begin"], [259, 3, 1, "", "on_batch_end"], [259, 3, 1, "", "on_before_eval"], [259, 3, 1, "", "on_before_optimizer_step"], [259, 3, 1, "", "on_epoch_begin"], [259, 3, 1, "", "on_epoch_end"], [259, 3, 1, "", "on_post_grad"], [259, 3, 1, "", "on_step_begin"], [259, 3, 1, "", "on_step_end"], [259, 3, 1, "", "on_train_begin"], [259, 3, 1, "", "on_train_end"], [259, 3, 1, "", "post_epoch_end"], [259, 3, 1, "", "post_process"], [259, 3, 1, "", "pre_epoch_begin"], [259, 3, 1, "", "pre_process"], [259, 3, 1, "", "prepare"], [259, 3, 1, "", "prepare_qat"], [259, 3, 1, "", "register_hook"], [259, 4, 1, "", "train_dataloader"], [259, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[259, 6, 1, "", "_epoch_ran"], [259, 6, 1, "", "best_model"], [259, 6, 1, "", "best_score"], [259, 3, 1, "", "create_criterion"], [259, 3, 1, "", "create_optimizer"], [259, 4, 1, "", "criterion"], [259, 6, 1, "", "eval_frequency"], [259, 4, 1, "", "evaluation_distributed"], [259, 3, 1, "", "execute"], [259, 3, 1, "", "generate_hooks"], [259, 3, 1, "", "init_train_cfg"], [259, 3, 1, "", "on_post_forward"], [259, 4, 1, "", "optimizer"], [259, 3, 1, "", "pre_process"], [259, 3, 1, "", "prepare"], [259, 4, 1, "", "student_model"], [259, 4, 1, "", "teacher_model"], [259, 4, 1, "", "train_cfg"], [259, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[259, 3, 1, "", "dataset"], [259, 4, 1, "", "eval_dataloader"], [259, 4, 1, "", "eval_func"], [259, 4, 1, "", "input"], [259, 4, 1, "", "metric"], [259, 4, 1, "", "model"], [259, 4, 1, "", "output"], [259, 4, 1, "", "postprocess"], [259, 4, 1, "", "precisions"], [259, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[259, 4, 1, "", "precisions"], [259, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[259, 3, 1, "", "dataset"], [259, 4, 1, "", "destination"], [259, 4, 1, "", "eval_dataloader"], [259, 4, 1, "", "eval_func"], [259, 4, 1, "", "metric"], [259, 4, 1, "", "model"], [259, 4, 1, "", "postprocess"], [259, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[259, 6, 1, "", "conf"], [259, 4, 1, "", "evaluation_distributed"], [259, 3, 1, "", "execute"], [259, 3, 1, "", "generate_hooks"], [259, 3, 1, "", "generate_pruners"], [259, 3, 1, "", "get_sparsity_ratio"], [259, 3, 1, "", "pre_process"], [259, 3, 1, "", "prepare"], [259, 6, 1, "", "pruners"], [259, 4, 1, "", "pruning_func"], [259, 4, 1, "", "train_distributed"], [259, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.Quantization": [[259, 4, 1, "", "calib_dataloader"], [259, 3, 1, "", "dataset"], [259, 3, 1, "", "execute"], [259, 4, 1, "", "metric"], [259, 4, 1, "", "model"], [259, 4, 1, "", "objective"], [259, 4, 1, "", "postprocess"], [259, 3, 1, "", "pre_process"], [259, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[217, 2, 1, "", "Benchmark"], [217, 1, 1, "", "get_architecture"], [217, 1, 1, "", "get_bounded_threads"], [217, 1, 1, "", "get_core_ids"], [217, 1, 1, "", "get_physical_ids"], [217, 1, 1, "", "get_threads"], [217, 1, 1, "", "get_threads_per_core"], [217, 1, 1, "", "set_all_env_var"], [217, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[217, 4, 1, "", "b_dataloader"], [217, 4, 1, "", "b_func"], [217, 3, 1, "", "config_instance"], [217, 3, 1, "", "generate_prefix"], [217, 4, 1, "", "metric"], [217, 4, 1, "", "model"], [217, 4, 1, "", "postprocess"], [217, 4, 1, "", "results"], [217, 3, 1, "", "run_instance"], [217, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[220, 2, 1, "", "DataLoader"], [220, 2, 1, "", "Metric"], [220, 2, 1, "", "Model"], [220, 2, 1, "", "Postprocess"], [218, 0, 0, "-", "criterion"], [219, 0, 0, "-", "dataloader"], [221, 0, 0, "-", "metric"], [222, 0, 0, "-", "model"], [223, 0, 0, "-", "optimizer"], [224, 0, 0, "-", "postprocess"], [225, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[218, 2, 1, "", "Criterions"], [218, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [218, 2, 1, "", "KnowledgeDistillationFramework"], [218, 2, 1, "", "KnowledgeDistillationLoss"], [218, 2, 1, "", "PyTorchCriterions"], [218, 2, 1, "", "PyTorchCrossEntropyLoss"], [218, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [218, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [218, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [218, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [218, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [218, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [218, 2, 1, "", "SelfKnowledgeDistillationLoss"], [218, 2, 1, "", "TensorFlowCrossEntropyLoss"], [218, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [218, 2, 1, "", "TensorflowCriterions"], [218, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [218, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [218, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [218, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[218, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[218, 3, 1, "", "clear_features"], [218, 3, 1, "", "init_feature_matcher"], [218, 3, 1, "", "init_loss_funcs"], [218, 3, 1, "", "loss_cal"], [218, 3, 1, "", "loss_cal_sloss"], [218, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[218, 4, 1, "", "student_model"], [218, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[218, 3, 1, "", "loss_cal"], [218, 3, 1, "", "loss_cal_sloss"], [218, 3, 1, "", "student_targets_loss_cal"], [218, 3, 1, "", "teacher_model_forward"], [218, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[218, 3, 1, "", "init_feature_matcher"], [218, 3, 1, "", "init_loss_funcs"], [218, 3, 1, "", "loss_cal"], [218, 3, 1, "", "loss_cal_sloss"], [218, 3, 1, "", "register_hooks_for_models"], [218, 3, 1, "", "remove_all_hooks"], [218, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[218, 3, 1, "", "KullbackLeiblerDivergence"], [218, 3, 1, "", "SoftCrossEntropy"], [218, 3, 1, "", "student_targets_loss_cal"], [218, 3, 1, "", "teacher_model_forward"], [218, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[218, 3, 1, "", "KullbackLeiblerDivergence"], [218, 3, 1, "", "L2Divergence"], [218, 3, 1, "", "SoftCrossEntropy"], [218, 3, 1, "", "init_loss_funcs"], [218, 3, 1, "", "loss_cal"], [218, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[218, 3, 1, "", "init_loss_funcs"], [218, 3, 1, "", "loss_cal"], [218, 3, 1, "", "loss_cal_sloss"], [218, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[218, 3, 1, "", "SoftCrossEntropy"], [218, 3, 1, "", "student_targets_loss_cal"], [218, 3, 1, "", "teacher_model_forward"], [218, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[218, 3, 1, "", "student_targets_loss_cal"], [218, 3, 1, "", "teacher_model_forward"], [218, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[219, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[221, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[222, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[223, 2, 1, "", "Optimizers"], [223, 2, 1, "", "PyTorchOptimizers"], [223, 2, 1, "", "PyTorchSGD"], [223, 2, 1, "", "TensorFlowAdam"], [223, 2, 1, "", "TensorFlowAdamW"], [223, 2, 1, "", "TensorFlowSGD"], [223, 2, 1, "", "TensorflowOptimizers"], [223, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[223, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[224, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[225, 1, 1, "", "get_activation"], [225, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[226, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[226, 4, 1, "", "eval_dataloader"], [226, 4, 1, "", "eval_func"], [226, 3, 1, "", "execute"], [226, 4, 1, "", "model"], [226, 3, 1, "", "on_after_compute_loss"], [226, 3, 1, "", "on_after_eval"], [226, 3, 1, "", "on_after_optimizer_step"], [226, 3, 1, "", "on_batch_begin"], [226, 3, 1, "", "on_batch_end"], [226, 3, 1, "", "on_before_eval"], [226, 3, 1, "", "on_before_optimizer_step"], [226, 3, 1, "", "on_epoch_begin"], [226, 3, 1, "", "on_epoch_end"], [226, 3, 1, "", "on_post_grad"], [226, 3, 1, "", "on_step_begin"], [226, 3, 1, "", "on_step_end"], [226, 3, 1, "", "on_train_begin"], [226, 3, 1, "", "on_train_end"], [226, 3, 1, "", "post_epoch_end"], [226, 3, 1, "", "post_process"], [226, 3, 1, "", "pre_epoch_begin"], [226, 3, 1, "", "pre_process"], [226, 3, 1, "", "prepare"], [226, 3, 1, "", "prepare_qat"], [226, 3, 1, "", "register_hook"], [226, 4, 1, "", "train_dataloader"], [226, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[248, 2, 1, "", "BaseTransform"], [248, 2, 1, "", "Dataset"], [248, 2, 1, "", "Datasets"], [248, 2, 1, "", "FILTERS"], [248, 2, 1, "", "Filter"], [248, 2, 1, "", "IterableDataset"], [248, 2, 1, "", "TRANSFORMS"], [231, 0, 0, "-", "dataloaders"], [248, 1, 1, "", "dataset_registry"], [243, 0, 0, "-", "datasets"], [248, 1, 1, "", "filter_registry"], [247, 0, 0, "-", "filters"], [248, 1, 1, "", "transform_registry"], [250, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[248, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[227, 0, 0, "-", "base_dataloader"], [228, 0, 0, "-", "dataloader"], [229, 0, 0, "-", "default_dataloader"], [230, 0, 0, "-", "fetcher"], [232, 0, 0, "-", "mxnet_dataloader"], [233, 0, 0, "-", "onnxrt_dataloader"], [234, 0, 0, "-", "pytorch_dataloader"], [235, 0, 0, "-", "sampler"], [236, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[227, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[227, 3, 1, "", "batch"], [227, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[229, 2, 1, "", "DefaultDataLoader"], [229, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[229, 3, 1, "", "batch"], [229, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[230, 2, 1, "", "Fetcher"], [230, 2, 1, "", "IndexFetcher"], [230, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[232, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[233, 2, 1, "", "ONNXRTBertDataLoader"], [233, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[234, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[235, 2, 1, "", "BatchSampler"], [235, 2, 1, "", "IterableSampler"], [235, 2, 1, "", "Sampler"], [235, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[236, 2, 1, "", "TFDataDataLoader"], [236, 2, 1, "", "TensorflowBertDataLoader"], [236, 2, 1, "", "TensorflowDataLoader"], [236, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[236, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[243, 2, 1, "", "Dataset"], [243, 2, 1, "", "Datasets"], [243, 2, 1, "", "IterableDataset"], [237, 0, 0, "-", "bert_dataset"], [238, 0, 0, "-", "coco_dataset"], [239, 0, 0, "-", "dataset"], [243, 1, 1, "", "dataset_registry"], [240, 0, 0, "-", "dummy_dataset"], [241, 0, 0, "-", "dummy_dataset_v2"], [242, 0, 0, "-", "imagenet_dataset"], [244, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[237, 2, 1, "", "InputFeatures"], [237, 2, 1, "", "ONNXRTBertDataset"], [237, 2, 1, "", "ParseDecodeBert"], [237, 2, 1, "", "PytorchBertDataset"], [237, 2, 1, "", "TensorflowBertDataset"], [237, 2, 1, "", "TensorflowModelZooBertDataset"], [237, 1, 1, "", "convert_examples_to_features"], [237, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[237, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[238, 2, 1, "", "COCONpy"], [238, 2, 1, "", "COCORaw"], [238, 2, 1, "", "COCORecordDataset"], [238, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[239, 2, 1, "", "CIFAR10"], [239, 2, 1, "", "CIFAR100"], [239, 2, 1, "", "Dataset"], [239, 2, 1, "", "Datasets"], [239, 2, 1, "", "FashionMNIST"], [239, 2, 1, "", "ImageFolder"], [239, 2, 1, "", "IterableDataset"], [239, 2, 1, "", "MNIST"], [239, 2, 1, "", "MXNetCIFAR10"], [239, 2, 1, "", "MXNetCIFAR100"], [239, 2, 1, "", "MXNetDatasets"], [239, 2, 1, "", "MXNetFashionMNIST"], [239, 2, 1, "", "MXNetImageFolder"], [239, 2, 1, "", "MXNetMNIST"], [239, 2, 1, "", "ONNXRTITDatasets"], [239, 2, 1, "", "ONNXRTQLDatasets"], [239, 2, 1, "", "PyTorchDatasets"], [239, 2, 1, "", "PytorchCIFAR10"], [239, 2, 1, "", "PytorchCIFAR100"], [239, 2, 1, "", "PytorchFashionMNIST"], [239, 2, 1, "", "PytorchMNIST"], [239, 2, 1, "", "PytorchMxnetWrapDataset"], [239, 2, 1, "", "PytorchMxnetWrapFunction"], [239, 2, 1, "", "TensorflowCIFAR10"], [239, 2, 1, "", "TensorflowCIFAR100"], [239, 2, 1, "", "TensorflowDatasets"], [239, 2, 1, "", "TensorflowFashionMNIST"], [239, 2, 1, "", "TensorflowImageFolder"], [239, 2, 1, "", "TensorflowImageRecord"], [239, 2, 1, "", "TensorflowMNIST"], [239, 2, 1, "", "TensorflowTFRecordDataset"], [239, 2, 1, "", "TensorflowVOCRecord"], [239, 1, 1, "", "calculate_md5"], [239, 1, 1, "", "check_integrity"], [239, 1, 1, "", "dataset_registry"], [239, 1, 1, "", "download_url"], [239, 5, 1, "", "framework_datasets"], [239, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[239, 3, 1, "", "download"], [239, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[239, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[239, 4, 1, "", "class_to_idx"], [239, 3, 1, "", "download"], [239, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[240, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[241, 2, 1, "", "DummyDataset"], [241, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[242, 2, 1, "", "ImagenetRaw"], [242, 2, 1, "", "MXNetImagenetRaw"], [242, 2, 1, "", "ONNXRTImagenetDataset"], [242, 2, 1, "", "PytorchImagenetRaw"], [242, 2, 1, "", "TensorflowImagenetDataset"], [242, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[244, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[247, 2, 1, "", "FILTERS"], [247, 2, 1, "", "Filter"], [245, 0, 0, "-", "coco_filter"], [246, 0, 0, "-", "filter"], [247, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[245, 2, 1, "", "LabelBalanceCOCORawFilter"], [245, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[246, 2, 1, "", "FILTERS"], [246, 2, 1, "", "Filter"], [246, 2, 1, "", "MXNetFilters"], [246, 2, 1, "", "ONNXRTITFilters"], [246, 2, 1, "", "ONNXRTQLFilters"], [246, 2, 1, "", "PyTorchFilters"], [246, 2, 1, "", "TensorflowFilters"], [246, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[250, 2, 1, "", "BaseTransform"], [250, 2, 1, "", "TRANSFORMS"], [249, 0, 0, "-", "imagenet_transform"], [251, 0, 0, "-", "tokenization"], [252, 0, 0, "-", "transform"], [250, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[250, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[249, 2, 1, "", "BilinearImagenetTransform"], [249, 2, 1, "", "LabelShift"], [249, 2, 1, "", "ONNXResizeCropImagenetTransform"], [249, 2, 1, "", "OnnxBilinearImagenetTransform"], [249, 2, 1, "", "ParseDecodeImagenet"], [249, 2, 1, "", "ParseDecodeImagenetTransform"], [249, 2, 1, "", "QuantizedInput"], [249, 2, 1, "", "ResizeWithAspectRatio"], [249, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[251, 2, 1, "", "BasicTokenizer"], [251, 2, 1, "", "FullTokenizer"], [251, 2, 1, "", "WordpieceTokenizer"], [251, 1, 1, "", "convert_by_vocab"], [251, 1, 1, "", "convert_to_unicode"], [251, 1, 1, "", "load_vocab"], [251, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[251, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[251, 3, 1, "", "convert_ids_to_tokens"], [251, 3, 1, "", "convert_tokens_to_ids"], [251, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[251, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[252, 2, 1, "", "AlignImageChannelTransform"], [252, 2, 1, "", "BaseTransform"], [252, 2, 1, "", "CastONNXTransform"], [252, 2, 1, "", "CastPyTorchTransform"], [252, 2, 1, "", "CastTFTransform"], [252, 2, 1, "", "CenterCropTFTransform"], [252, 2, 1, "", "CenterCropTransform"], [252, 2, 1, "", "CollectTransform"], [252, 2, 1, "", "ComposeTransform"], [252, 2, 1, "", "CropResizeTFTransform"], [252, 2, 1, "", "CropResizeTransform"], [252, 2, 1, "", "CropToBoundingBox"], [252, 2, 1, "", "InputFeatures"], [252, 2, 1, "", "MXNetCropResizeTransform"], [252, 2, 1, "", "MXNetCropToBoundingBox"], [252, 2, 1, "", "MXNetNormalizeTransform"], [252, 2, 1, "", "MXNetTransforms"], [252, 2, 1, "", "MXNetTranspose"], [252, 2, 1, "", "NormalizeTFTransform"], [252, 2, 1, "", "NormalizeTransform"], [252, 2, 1, "", "ONNXRTCropToBoundingBox"], [252, 2, 1, "", "ONNXRTITTransforms"], [252, 2, 1, "", "ONNXRTQLTransforms"], [252, 2, 1, "", "PaddedCenterCropTransform"], [252, 2, 1, "", "ParseDecodeVocTransform"], [252, 2, 1, "", "PyTorchAlignImageChannel"], [252, 2, 1, "", "PyTorchCropResizeTransform"], [252, 2, 1, "", "PyTorchNormalizeTransform"], [252, 2, 1, "", "PyTorchTransforms"], [252, 2, 1, "", "PyTorchTranspose"], [252, 2, 1, "", "PytorchMxnetTransform"], [252, 2, 1, "", "PytorchMxnetWrapFunction"], [252, 2, 1, "", "RandomCropTFTransform"], [252, 2, 1, "", "RandomCropTransform"], [252, 2, 1, "", "RandomHorizontalFlip"], [252, 2, 1, "", "RandomResizedCropMXNetTransform"], [252, 2, 1, "", "RandomResizedCropPytorchTransform"], [252, 2, 1, "", "RandomResizedCropTFTransform"], [252, 2, 1, "", "RandomResizedCropTransform"], [252, 2, 1, "", "RandomVerticalFlip"], [252, 2, 1, "", "RescaleKerasPretrainTransform"], [252, 2, 1, "", "RescaleTFTransform"], [252, 2, 1, "", "RescaleTransform"], [252, 2, 1, "", "ResizeMXNetTransform"], [252, 2, 1, "", "ResizePytorchTransform"], [252, 2, 1, "", "ResizeTFTransform"], [252, 2, 1, "", "ResizeTransform"], [252, 2, 1, "", "ResizeWithRatio"], [252, 2, 1, "", "SquadExample"], [252, 2, 1, "", "TFModelZooCollectTransform"], [252, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [252, 2, 1, "", "TFSquadV1PostTransform"], [252, 2, 1, "", "TRANSFORMS"], [252, 2, 1, "", "TensorflowCropToBoundingBox"], [252, 2, 1, "", "TensorflowRandomHorizontalFlip"], [252, 2, 1, "", "TensorflowRandomVerticalFlip"], [252, 2, 1, "", "TensorflowResizeWithRatio"], [252, 2, 1, "", "TensorflowTransform"], [252, 2, 1, "", "TensorflowTransforms"], [252, 2, 1, "", "TensorflowTranspose"], [252, 2, 1, "", "TensorflowWrapFunction"], [252, 2, 1, "", "ToArray"], [252, 2, 1, "", "ToNDArrayTransform"], [252, 2, 1, "", "Transforms"], [252, 2, 1, "", "Transpose"], [252, 1, 1, "", "convert_examples_to_features"], [252, 1, 1, "", "get_final_text"], [252, 1, 1, "", "get_torchvision_map"], [252, 1, 1, "", "read_squad_examples"], [252, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[252, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[252, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[252, 3, 1, "", "get_postprocess_result"], [252, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[252, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[253, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[253, 6, 1, "", "_epoch_ran"], [253, 6, 1, "", "best_model"], [253, 6, 1, "", "best_score"], [253, 3, 1, "", "create_criterion"], [253, 3, 1, "", "create_optimizer"], [253, 4, 1, "", "criterion"], [253, 6, 1, "", "eval_frequency"], [253, 4, 1, "", "evaluation_distributed"], [253, 3, 1, "", "execute"], [253, 3, 1, "", "generate_hooks"], [253, 3, 1, "", "init_train_cfg"], [253, 3, 1, "", "on_post_forward"], [253, 4, 1, "", "optimizer"], [253, 3, 1, "", "pre_process"], [253, 3, 1, "", "prepare"], [253, 4, 1, "", "student_model"], [253, 4, 1, "", "teacher_model"], [253, 4, 1, "", "train_cfg"], [253, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[254, 1, 1, "", "onnx_qlinear_to_qdq"], [255, 0, 0, "-", "qlinear2qdq"], [256, 0, 0, "-", "torch2onnx"], [254, 1, 1, "", "torch_to_fp32_onnx"], [254, 1, 1, "", "torch_to_int8_onnx"], [257, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[255, 1, 1, "", "check_model"], [255, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.torch2onnx": [[256, 1, 1, "", "build_scale_mapping"], [256, 1, 1, "", "get_node_mapping"], [256, 1, 1, "", "get_quantizable_onnx_ops"], [256, 1, 1, "", "qdq_fp32_bias"], [256, 1, 1, "", "qdq_fp32_bias_qdq"], [256, 1, 1, "", "qdq_int32_bias"], [256, 1, 1, "", "recalculate_bias"], [256, 1, 1, "", "remove_nodes_by_name"], [256, 1, 1, "", "set_data_type"], [256, 1, 1, "", "set_scale_info"], [256, 1, 1, "", "sub_graph_with_int32_bias"], [256, 1, 1, "", "torch_to_fp32_onnx"], [256, 1, 1, "", "torch_to_int8_onnx"], [256, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[257, 2, 1, "", "DummyDataReader"], [257, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[257, 3, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[258, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[258, 3, 1, "", "dataset"], [258, 4, 1, "", "eval_dataloader"], [258, 4, 1, "", "eval_func"], [258, 4, 1, "", "input"], [258, 4, 1, "", "metric"], [258, 4, 1, "", "model"], [258, 4, 1, "", "output"], [258, 4, 1, "", "postprocess"], [258, 4, 1, "", "precisions"], [258, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[266, 2, 1, "", "BaseMetric"], [266, 2, 1, "", "METRICS"], [260, 0, 0, "-", "bleu"], [261, 0, 0, "-", "bleu_util"], [262, 0, 0, "-", "coco_label_map"], [263, 0, 0, "-", "coco_tools"], [264, 0, 0, "-", "evaluate_squad"], [265, 0, 0, "-", "f1"], [267, 0, 0, "-", "metric"], [266, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[266, 4, 1, "", "hvd"], [266, 4, 1, "", "metric"], [266, 3, 1, "", "reset"], [266, 3, 1, "", "result"], [266, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[266, 6, 1, "", "metrics"], [266, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[260, 2, 1, "", "BLEU"], [260, 2, 1, "", "UnicodeRegex"], [260, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[260, 6, 1, "", "labels"], [260, 6, 1, "", "predictions"], [260, 3, 1, "", "reset"], [260, 3, 1, "", "result"], [260, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[260, 6, 1, "", "nondigit_punct_re"], [260, 3, 1, "", "property_chars"], [260, 6, 1, "", "punct_nondigit_re"], [260, 6, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[261, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[263, 2, 1, "", "COCOEvalWrapper"], [263, 2, 1, "", "COCOWrapper"], [263, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [263, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [263, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[263, 3, 1, "", "ComputeMetrics"], [263, 3, 1, "", "GetAgnosticMode"], [263, 3, 1, "", "GetCategory"], [263, 3, 1, "", "GetCategoryIdList"], [263, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[263, 3, 1, "", "LoadAnnotations"], [263, 6, 1, "", "dataset"], [263, 6, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[264, 1, 1, "", "evaluate"], [264, 1, 1, "", "exact_match_score"], [264, 1, 1, "", "f1_score"], [264, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[265, 1, 1, "", "evaluate"], [265, 1, 1, "", "f1_score"], [265, 1, 1, "", "metric_max_over_ground_truths"], [265, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[267, 2, 1, "", "Accuracy"], [267, 2, 1, "", "BaseMetric"], [267, 2, 1, "", "COCOmAPv2"], [267, 2, 1, "", "F1"], [267, 2, 1, "", "GeneralTopK"], [267, 2, 1, "", "Loss"], [267, 2, 1, "", "MAE"], [267, 2, 1, "", "METRICS"], [267, 2, 1, "", "MSE"], [267, 2, 1, "", "MXNetMetrics"], [267, 2, 1, "", "ONNXRTGLUE"], [267, 2, 1, "", "ONNXRTITMetrics"], [267, 2, 1, "", "ONNXRTQLMetrics"], [267, 2, 1, "", "PyTorchLoss"], [267, 2, 1, "", "PyTorchMetrics"], [267, 2, 1, "", "RMSE"], [267, 2, 1, "", "ROC"], [267, 2, 1, "", "SquadF1"], [267, 2, 1, "", "TensorflowCOCOMAP"], [267, 2, 1, "", "TensorflowMAP"], [267, 2, 1, "", "TensorflowMetrics"], [267, 2, 1, "", "TensorflowTopK"], [267, 2, 1, "", "TensorflowVOCMAP"], [267, 2, 1, "", "WrapMXNetMetric"], [267, 2, 1, "", "WrapONNXRTMetric"], [267, 2, 1, "", "WrapPyTorchMetric"], [267, 2, 1, "", "mIOU"], [267, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[267, 6, 1, "", "label_list"], [267, 6, 1, "", "pred_list"], [267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 6, 1, "", "sample"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[267, 4, 1, "", "hvd"], [267, 4, 1, "", "metric"], [267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[267, 6, 1, "", "k"], [267, 6, 1, "", "num_correct"], [267, 6, 1, "", "num_sample"], [267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 6, 1, "", "sample"], [267, 6, 1, "", "sum"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[267, 6, 1, "", "compare_label"], [267, 6, 1, "", "label_list"], [267, 6, 1, "", "pred_list"], [267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[267, 6, 1, "", "metrics"], [267, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[267, 6, 1, "", "compare_label"], [267, 6, 1, "", "label_list"], [267, 6, 1, "", "pred_list"], [267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[267, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[267, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[267, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[267, 3, 1, "", "compute"], [267, 3, 1, "", "reset"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[267, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[267, 6, 1, "", "mse"], [267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[267, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[267, 6, 1, "", "k"], [267, 6, 1, "", "num_correct"], [267, 6, 1, "", "num_sample"], [267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[268, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[268, 4, 1, "", "precisions"], [268, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[269, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[269, 3, 1, "", "dataset"], [269, 4, 1, "", "destination"], [269, 4, 1, "", "eval_dataloader"], [269, 4, 1, "", "eval_func"], [269, 4, 1, "", "metric"], [269, 4, 1, "", "model"], [269, 4, 1, "", "postprocess"], [269, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[282, 2, 1, "", "BasicNAS"], [282, 2, 1, "", "DyNAS"], [282, 2, 1, "", "NAS"], [270, 0, 0, "-", "basic_nas"], [271, 0, 0, "-", "dynas"], [276, 0, 0, "-", "dynast"], [283, 0, 0, "-", "nas"], [284, 0, 0, "-", "nas_utils"], [285, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[282, 3, 1, "", "estimate"], [282, 3, 1, "", "execute"], [282, 3, 1, "", "init_by_cfg"], [282, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[282, 3, 1, "", "create_acc_predictor"], [282, 3, 1, "", "create_latency_predictor"], [282, 3, 1, "", "create_macs_predictor"], [282, 3, 1, "", "estimate"], [282, 3, 1, "", "init_cfg"], [282, 3, 1, "", "init_for_search"], [282, 3, 1, "", "search"], [282, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[270, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[270, 3, 1, "", "estimate"], [270, 3, 1, "", "execute"], [270, 3, 1, "", "init_by_cfg"], [270, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[271, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[271, 3, 1, "", "create_acc_predictor"], [271, 3, 1, "", "create_latency_predictor"], [271, 3, 1, "", "create_macs_predictor"], [271, 3, 1, "", "estimate"], [271, 3, 1, "", "init_cfg"], [271, 3, 1, "", "init_for_search"], [271, 3, 1, "", "search"], [271, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[272, 0, 0, "-", "dynas_manager"], [273, 0, 0, "-", "dynas_predictor"], [274, 0, 0, "-", "dynas_search"], [275, 0, 0, "-", "dynas_utils"], [277, 0, 0, "-", "supernetwork"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[272, 2, 1, "", "ParameterManager"], [272, 2, 1, "", "TransformerLTEncoding"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[272, 3, 1, "", "create_training_set"], [272, 3, 1, "", "import_csv"], [272, 3, 1, "", "onehot_generic"], [272, 3, 1, "", "process_param_dict"], [272, 3, 1, "", "random_sample"], [272, 3, 1, "", "random_samples"], [272, 3, 1, "", "set_seed"], [272, 3, 1, "", "translate2param"], [272, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding": [[272, 3, 1, "", "create_training_set"], [272, 3, 1, "", "import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[273, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[273, 3, 1, "", "get_metrics"], [273, 3, 1, "", "get_parameters"], [273, 3, 1, "", "load"], [273, 3, 1, "", "predict"], [273, 3, 1, "", "save"], [273, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[274, 2, 1, "", "ProblemMultiObjective"], [274, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[274, 3, 1, "", "configure_age"], [274, 3, 1, "", "configure_nsga2"], [274, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[275, 2, 1, "", "EvaluationInterface"], [275, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [275, 2, 1, "", "EvaluationInterfaceResNet50"], [275, 2, 1, "", "EvaluationInterfaceTransformerLT"], [275, 2, 1, "", "OFARunner"], [275, 2, 1, "", "Runner"], [275, 2, 1, "", "TorchVisionReference"], [275, 2, 1, "", "TransformerLTRunner"], [275, 1, 1, "", "get_macs"], [275, 1, 1, "", "get_torchvision_model"], [275, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[275, 3, 1, "", "clear_csv"], [275, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[275, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[275, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT": [[275, 3, 1, "", "clear_csv"], [275, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[275, 3, 1, "", "estimate_accuracy_top1"], [275, 3, 1, "", "estimate_latency"], [275, 3, 1, "", "estimate_macs"], [275, 3, 1, "", "get_subnet"], [275, 3, 1, "", "measure_latency"], [275, 3, 1, "", "validate_macs"], [275, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[275, 3, 1, "", "measure_latency"], [275, 3, 1, "", "validate_macs"], [275, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner": [[275, 3, 1, "", "measure_latency"], [275, 3, 1, "", "validate_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[278, 0, 0, "-", "machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[279, 0, 0, "-", "modules_supernetwork"], [280, 0, 0, "-", "transformer_interface"], [281, 0, 0, "-", "transformer_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[279, 2, 1, "", "MultiheadAttentionSuper"], [279, 1, 1, "", "get_incremental_state"], [279, 1, 1, "", "set_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper": [[279, 3, 1, "", "forward"], [279, 3, 1, "", "reorder_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[280, 1, 1, "", "compute_bleu"], [280, 1, 1, "", "compute_latency"], [280, 1, 1, "", "compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[281, 2, 1, "", "TransformerDecoder"], [281, 2, 1, "", "TransformerDecoderLayer"], [281, 2, 1, "", "TransformerEncoder"], [281, 2, 1, "", "TransformerEncoderLayer"], [281, 2, 1, "", "TransformerSuperNetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder": [[281, 3, 1, "", "extract_features"], [281, 3, 1, "", "forward"], [281, 3, 1, "", "max_positions"], [281, 3, 1, "", "output_layer"], [281, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer": [[281, 3, 1, "", "forward"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder": [[281, 3, 1, "", "forward"], [281, 3, 1, "", "max_positions"], [281, 3, 1, "", "reorder_encoder_out"], [281, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer": [[281, 3, 1, "", "forward"], [281, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.nas": [[283, 2, 1, "", "NAS"], [283, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[283, 3, 1, "", "count_model_parameters"], [283, 3, 1, "", "dump_search_results"], [283, 3, 1, "", "estimate"], [283, 3, 1, "", "find_best_model_archs"], [283, 3, 1, "", "init_search_cfg"], [283, 3, 1, "", "load_search_results"], [283, 3, 1, "", "metrics_conversion"], [283, 4, 1, "", "model_builder"], [283, 3, 1, "", "params_vec2params_dict"], [283, 3, 1, "", "search"], [283, 4, 1, "", "search_algorithm"], [283, 4, 1, "", "search_space"], [283, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[284, 1, 1, "", "create_search_space_pool"], [284, 1, 1, "", "find_pareto_front"], [284, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[285, 2, 1, "", "BayesianOptimizationSearcher"], [285, 2, 1, "", "GridSearcher"], [285, 2, 1, "", "RandomSearcher"], [285, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[285, 3, 1, "", "get_feedback"], [285, 3, 1, "", "indices2params_vec"], [285, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[285, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[285, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[285, 3, 1, "", "get_feedback"], [285, 3, 1, "", "params_vec2params_dict"], [285, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[286, 2, 1, "", "Pruning"], [286, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[286, 6, 1, "", "conf"], [286, 4, 1, "", "evaluation_distributed"], [286, 3, 1, "", "execute"], [286, 3, 1, "", "generate_hooks"], [286, 3, 1, "", "generate_pruners"], [286, 3, 1, "", "get_sparsity_ratio"], [286, 3, 1, "", "pre_process"], [286, 3, 1, "", "prepare"], [286, 6, 1, "", "pruners"], [286, 4, 1, "", "pruning_func"], [286, 4, 1, "", "train_distributed"], [286, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[286, 3, 1, "", "on_after_compute_loss"], [286, 3, 1, "", "on_batch_begin"], [286, 3, 1, "", "on_batch_end"], [286, 3, 1, "", "on_epoch_begin"], [286, 3, 1, "", "on_epoch_end"], [286, 3, 1, "", "on_step_begin"], [286, 3, 1, "", "on_step_end"], [286, 3, 1, "", "on_train_begin"], [286, 3, 1, "", "on_train_end"], [286, 3, 1, "", "post_epoch_end"], [286, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[287, 2, 1, "", "PATTERNS"], [288, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[287, 6, 1, "", "patterns"], [287, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[288, 2, 1, "", "PATTERNS"], [289, 0, 0, "-", "pattern"], [290, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[288, 6, 1, "", "patterns"], [288, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[289, 2, 1, "", "PATTERNS"], [289, 2, 1, "", "PatternBase"], [289, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[289, 6, 1, "", "patterns"], [289, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[289, 3, 1, "", "compute_sparsity"], [289, 3, 1, "", "reduce"], [289, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[290, 2, 1, "", "TilePatternBase"], [290, 2, 1, "", "TilePattern_1x1"], [290, 2, 1, "", "TilePattern_1x16"], [290, 2, 1, "", "TilePattern_1x2"], [290, 2, 1, "", "TilePattern_2x2"], [290, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[290, 3, 1, "", "compute_sparsity"], [290, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pruning_v2": [[291, 2, 1, "", "Pruning"], [291, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[291, 6, 1, "", "conf"], [291, 4, 1, "", "evaluation_distributed"], [291, 3, 1, "", "execute"], [291, 3, 1, "", "generate_hooks"], [291, 3, 1, "", "get_sparsity_ratio"], [291, 3, 1, "", "pre_process"], [291, 3, 1, "", "prepare"], [291, 6, 1, "", "pruners"], [291, 4, 1, "", "pruning_func"], [291, 4, 1, "", "train_distributed"], [291, 3, 1, "", "update_config"]], "neural_compressor.experimental.pruning_v2.TfPruningCallback": [[291, 3, 1, "", "on_after_compute_loss"], [291, 3, 1, "", "on_batch_begin"], [291, 3, 1, "", "on_batch_end"], [291, 3, 1, "", "on_epoch_begin"], [291, 3, 1, "", "on_epoch_end"], [291, 3, 1, "", "on_step_begin"], [291, 3, 1, "", "on_step_end"], [291, 3, 1, "", "on_train_begin"], [291, 3, 1, "", "on_train_end"], [291, 3, 1, "", "post_epoch_end"], [291, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pytorch_pruner": [[293, 0, 0, "-", "logger"], [294, 0, 0, "-", "patterns"], [295, 0, 0, "-", "prune_utils"], [296, 0, 0, "-", "pruner"], [297, 0, 0, "-", "pruning"], [298, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[294, 2, 1, "", "Pattern"], [294, 2, 1, "", "PatternNInM"], [294, 2, 1, "", "PatternNxM"], [294, 1, 1, "", "get_pattern"], [294, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[294, 3, 1, "", "get_block_size_dict"], [294, 3, 1, "", "get_mask_single"], [294, 3, 1, "", "get_masks"], [294, 3, 1, "", "get_masks_global"], [294, 3, 1, "", "get_masks_local"], [294, 3, 1, "", "get_pattern_lock_masks"], [294, 3, 1, "", "get_sparsity_ratio"], [294, 6, 1, "", "is_global"], [294, 6, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[294, 6, 1, "", "M"], [294, 6, 1, "", "N"], [294, 3, 1, "", "get_masks_global"], [294, 3, 1, "", "get_pattern_lock_masks"], [294, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[294, 6, 1, "", "block_size"], [294, 3, 1, "", "get_block_size_dict"], [294, 3, 1, "", "get_masks_global"], [294, 3, 1, "", "get_pattern_lock_masks"], [294, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[295, 1, 1, "", "check_config"], [295, 1, 1, "", "parse_not_to_prune"], [295, 1, 1, "", "parse_to_prune"], [295, 1, 1, "", "process_and_check_config"], [295, 1, 1, "", "process_config"], [295, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[296, 2, 1, "", "MagnitudePruner"], [296, 2, 1, "", "PatternLockPruner"], [296, 2, 1, "", "Pruner"], [296, 2, 1, "", "SnipMomentumPruner"], [296, 2, 1, "", "SnipPruner"], [296, 1, 1, "", "get_pruner"], [296, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[296, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[296, 3, 1, "", "on_after_optimizer_step"], [296, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[296, 3, 1, "", "check_is_pruned_step"], [296, 6, 1, "", "config"], [296, 6, 1, "", "current_sparsity_ratio"], [296, 6, 1, "", "end_step"], [296, 6, 1, "", "global_step"], [296, 3, 1, "", "mask_weights"], [296, 6, 1, "", "masks"], [296, 6, 1, "", "max_sparsity_ratio_per_layer"], [296, 6, 1, "", "modules"], [296, 3, 1, "", "on_after_eval"], [296, 3, 1, "", "on_after_optimizer_step"], [296, 3, 1, "", "on_before_eval"], [296, 3, 1, "", "on_before_optimizer_step"], [296, 3, 1, "", "on_epoch_begin"], [296, 3, 1, "", "on_epoch_end"], [296, 3, 1, "", "on_step_begin"], [296, 3, 1, "", "on_step_end"], [296, 3, 1, "", "on_train_begin"], [296, 3, 1, "", "on_train_end"], [296, 6, 1, "", "pattern"], [296, 6, 1, "", "scheduler"], [296, 6, 1, "", "scores"], [296, 6, 1, "", "start_step"], [296, 6, 1, "", "target_sparsity_ratio"], [296, 6, 1, "", "update_frequency_on_step"], [296, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[296, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[296, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[297, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[297, 6, 1, "", "config_file_path"], [297, 3, 1, "", "get_sparsity_ratio"], [297, 6, 1, "", "model"], [297, 3, 1, "", "on_after_eval"], [297, 3, 1, "", "on_after_optimizer_step"], [297, 3, 1, "", "on_before_eval"], [297, 3, 1, "", "on_before_optimizer_step"], [297, 3, 1, "", "on_epoch_begin"], [297, 3, 1, "", "on_epoch_end"], [297, 3, 1, "", "on_step_begin"], [297, 3, 1, "", "on_step_end"], [297, 3, 1, "", "on_train_begin"], [297, 3, 1, "", "on_train_end"], [297, 3, 1, "", "prepare"], [297, 6, 1, "", "pruner_info"], [297, 6, 1, "", "pruners"], [297, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[298, 2, 1, "", "IterativeScheduler"], [298, 2, 1, "", "OneshotScheduler"], [298, 2, 1, "", "Scheduler"], [298, 1, 1, "", "get_scheduler"], [298, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[298, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[298, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[298, 6, 1, "", "config"], [298, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[299, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[299, 4, 1, "", "calib_dataloader"], [299, 3, 1, "", "dataset"], [299, 3, 1, "", "execute"], [299, 4, 1, "", "metric"], [299, 4, 1, "", "model"], [299, 4, 1, "", "objective"], [299, 4, 1, "", "postprocess"], [299, 3, 1, "", "pre_process"], [299, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[300, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[300, 3, 1, "", "append"], [300, 3, 1, "", "combine"], [300, 4, 1, "", "eval_func"], [300, 4, 1, "", "model"], [300, 4, 1, "", "train_func"]], "neural_compressor.metric": [[308, 2, 1, "", "BaseMetric"], [308, 2, 1, "", "METRICS"], [308, 2, 1, "", "Metric"], [302, 0, 0, "-", "bleu"], [303, 0, 0, "-", "bleu_util"], [304, 0, 0, "-", "coco_label_map"], [305, 0, 0, "-", "coco_tools"], [306, 0, 0, "-", "evaluate_squad"], [307, 0, 0, "-", "f1"], [309, 0, 0, "-", "metric"], [308, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[308, 4, 1, "", "hvd"], [308, 4, 1, "", "metric"], [308, 3, 1, "", "reset"], [308, 3, 1, "", "result"], [308, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[308, 6, 1, "", "metrics"], [308, 3, 1, "", "register"]], "neural_compressor.metric.bleu": [[302, 2, 1, "", "BLEU"], [302, 2, 1, "", "UnicodeRegex"], [302, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[302, 6, 1, "", "labels"], [302, 6, 1, "", "predictions"], [302, 3, 1, "", "reset"], [302, 3, 1, "", "result"], [302, 3, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[302, 6, 1, "", "nondigit_punct_re"], [302, 3, 1, "", "property_chars"], [302, 6, 1, "", "punct_nondigit_re"], [302, 6, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[303, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[305, 2, 1, "", "COCOEvalWrapper"], [305, 2, 1, "", "COCOWrapper"], [305, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [305, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [305, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[305, 3, 1, "", "ComputeMetrics"], [305, 3, 1, "", "GetAgnosticMode"], [305, 3, 1, "", "GetCategory"], [305, 3, 1, "", "GetCategoryIdList"], [305, 3, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[305, 3, 1, "", "LoadAnnotations"], [305, 6, 1, "", "dataset"], [305, 6, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[306, 1, 1, "", "evaluate"], [306, 1, 1, "", "exact_match_score"], [306, 1, 1, "", "f1_score"], [306, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[307, 1, 1, "", "evaluate"], [307, 1, 1, "", "f1_score"], [307, 1, 1, "", "metric_max_over_ground_truths"], [307, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[309, 2, 1, "", "Accuracy"], [309, 2, 1, "", "BaseMetric"], [309, 2, 1, "", "COCOmAPv2"], [309, 2, 1, "", "F1"], [309, 2, 1, "", "GeneralTopK"], [309, 2, 1, "", "Loss"], [309, 2, 1, "", "MAE"], [309, 2, 1, "", "METRICS"], [309, 2, 1, "", "MSE"], [309, 2, 1, "", "MXNetMetrics"], [309, 2, 1, "", "Metric"], [309, 2, 1, "", "ONNXRTGLUE"], [309, 2, 1, "", "ONNXRTITMetrics"], [309, 2, 1, "", "ONNXRTQLMetrics"], [309, 2, 1, "", "PyTorchLoss"], [309, 2, 1, "", "PyTorchMetrics"], [309, 2, 1, "", "RMSE"], [309, 2, 1, "", "ROC"], [309, 2, 1, "", "SquadF1"], [309, 2, 1, "", "TensorflowCOCOMAP"], [309, 2, 1, "", "TensorflowMAP"], [309, 2, 1, "", "TensorflowMetrics"], [309, 2, 1, "", "TensorflowTopK"], [309, 2, 1, "", "TensorflowVOCMAP"], [309, 2, 1, "", "WrapMXNetMetric"], [309, 2, 1, "", "WrapONNXRTMetric"], [309, 2, 1, "", "WrapPyTorchMetric"], [309, 2, 1, "", "mIOU"], [309, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[309, 6, 1, "", "label_list"], [309, 6, 1, "", "pred_list"], [309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 6, 1, "", "sample"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[309, 4, 1, "", "hvd"], [309, 4, 1, "", "metric"], [309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[309, 6, 1, "", "k"], [309, 6, 1, "", "num_correct"], [309, 6, 1, "", "num_sample"], [309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 6, 1, "", "sample"], [309, 6, 1, "", "sum"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[309, 6, 1, "", "compare_label"], [309, 6, 1, "", "label_list"], [309, 6, 1, "", "pred_list"], [309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[309, 6, 1, "", "metrics"], [309, 3, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[309, 6, 1, "", "compare_label"], [309, 6, 1, "", "label_list"], [309, 6, 1, "", "pred_list"], [309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[309, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[309, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[309, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[309, 3, 1, "", "compute"], [309, 3, 1, "", "reset"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[309, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[309, 6, 1, "", "mse"], [309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[309, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[309, 6, 1, "", "k"], [309, 6, 1, "", "num_correct"], [309, 6, 1, "", "num_sample"], [309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.model": [[312, 2, 1, "", "BaseModel"], [312, 2, 1, "", "Model"], [311, 0, 0, "-", "base_model"], [313, 0, 0, "-", "keras_model"], [314, 0, 0, "-", "model"], [315, 0, 0, "-", "mxnet_model"], [316, 0, 0, "-", "nets_factory"], [317, 0, 0, "-", "onnx_model"], [318, 0, 0, "-", "tensorflow_model"], [319, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[312, 3, 1, "", "export"], [312, 3, 1, "", "framework"], [312, 4, 1, "", "graph_info"], [312, 4, 1, "", "model"], [312, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[311, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[311, 3, 1, "", "export"], [311, 3, 1, "", "framework"], [311, 4, 1, "", "graph_info"], [311, 4, 1, "", "model"], [311, 3, 1, "", "save"]], "neural_compressor.model.keras_model": [[313, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[313, 3, 1, "", "export"], [313, 3, 1, "", "framework"], [313, 4, 1, "", "graph_info"], [313, 4, 1, "", "model"], [313, 3, 1, "", "save"]], "neural_compressor.model.model": [[314, 2, 1, "", "Model"], [314, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[315, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[315, 3, 1, "", "framework"], [315, 4, 1, "", "model"], [315, 3, 1, "", "save"]], "neural_compressor.model.onnx_model": [[317, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[317, 3, 1, "", "export"], [317, 3, 1, "", "find_node_by_name"], [317, 3, 1, "", "find_nodes_by_initializer"], [317, 3, 1, "", "framework"], [317, 3, 1, "", "get_scale_zero"], [317, 4, 1, "", "graph_info"], [317, 4, 1, "", "model"], [317, 3, 1, "", "save"], [317, 3, 1, "", "save_model_to_file"]], "neural_compressor.model.tensorflow_model": [[318, 2, 1, "", "TensorflowBaseModel"], [318, 2, 1, "", "TensorflowCheckpointModel"], [318, 2, 1, "", "TensorflowQATModel"], [318, 2, 1, "", "TensorflowSavedModelModel"], [318, 1, 1, "", "checkpoint_session"], [318, 1, 1, "", "estimator_session"], [318, 1, 1, "", "frozen_pb_session"], [318, 1, 1, "", "get_model_type"], [318, 1, 1, "", "graph_def_session"], [318, 1, 1, "", "graph_session"], [318, 1, 1, "", "keras_session"], [318, 1, 1, "", "load_saved_model"], [318, 1, 1, "", "saved_model_session"], [318, 1, 1, "", "slim_session"], [318, 1, 1, "", "validate_and_inference_input_output"], [318, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[318, 3, 1, "", "framework"], [318, 4, 1, "", "graph_info"], [318, 4, 1, "", "model"], [318, 3, 1, "", "save"], [318, 4, 1, "", "weights"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[318, 4, 1, "", "model"], [318, 3, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[318, 4, 1, "", "model"], [318, 3, 1, "", "report_sparsity"], [318, 3, 1, "", "save"]], "neural_compressor.model.torch_model": [[319, 2, 1, "", "IPEXModel"], [319, 2, 1, "", "PyTorchBaseModel"], [319, 2, 1, "", "PyTorchFXModel"], [319, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[319, 4, 1, "", "graph_info"], [319, 3, 1, "", "save"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[319, 4, 1, "", "fp32_model"], [319, 3, 1, "", "framework"], [319, 3, 1, "", "get_all_weight_names"], [319, 3, 1, "", "get_gradient"], [319, 3, 1, "", "get_inputs"], [319, 3, 1, "", "get_weight"], [319, 4, 1, "", "model"], [319, 3, 1, "", "prune_weights_"], [319, 3, 1, "", "report_sparsity"], [319, 3, 1, "", "update_gradient"], [319, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[319, 3, 1, "", "export"], [319, 4, 1, "", "graph_info"], [319, 3, 1, "", "save"]], "neural_compressor.objective": [[320, 2, 1, "", "Accuracy"], [320, 2, 1, "", "Footprint"], [320, 2, 1, "", "ModelSize"], [320, 2, 1, "", "Objective"], [320, 2, 1, "", "Performance"], [320, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[320, 3, 1, "", "end"], [320, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[320, 3, 1, "", "end"], [320, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[320, 3, 1, "", "end"], [320, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[320, 3, 1, "", "end"], [320, 3, 1, "", "reset"], [320, 3, 1, "", "result"], [320, 3, 1, "", "result_list"], [320, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[320, 3, 1, "", "end"], [320, 3, 1, "", "start"]], "neural_compressor.pruner": [[321, 0, 0, "-", "criteria"], [323, 0, 0, "-", "logger"], [324, 0, 0, "-", "patterns"], [327, 0, 0, "-", "pruner_legacy"], [331, 0, 0, "-", "pruners"], [332, 0, 0, "-", "pruning"], [333, 0, 0, "-", "regs"], [334, 0, 0, "-", "schedulers"], [335, 0, 0, "-", "utils"]], "neural_compressor.pruner.criteria": [[321, 2, 1, "", "GradientCriterion"], [321, 2, 1, "", "MagnitudeCriterion"], [321, 2, 1, "", "PruningCriterion"], [321, 2, 1, "", "SnipCriterion"], [321, 2, 1, "", "SnipMomentumCriterion"], [321, 1, 1, "", "get_criterion"], [321, 1, 1, "", "register_criterion"]], "neural_compressor.pruner.criteria.GradientCriterion": [[321, 3, 1, "", "on_after_optimizer_step"], [321, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.MagnitudeCriterion": [[321, 3, 1, "", "on_step_begin"], [321, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.PruningCriterion": [[321, 3, 1, "", "on_after_optimizer_step"], [321, 3, 1, "", "on_step_begin"], [321, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipCriterion": [[321, 3, 1, "", "on_after_optimizer_step"], [321, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipMomentumCriterion": [[321, 3, 1, "", "on_after_optimizer_step"], [321, 6, 1, "", "scores"]], "neural_compressor.pruner.patterns": [[324, 2, 1, "", "BasePattern"], [324, 2, 1, "", "PatternNInM"], [324, 2, 1, "", "PatternNxM"], [324, 1, 1, "", "get_pattern"], [324, 1, 1, "", "register_pattern"]], "neural_compressor.pruner.patterns.BasePattern": [[324, 3, 1, "", "adjust_ratio"], [324, 3, 1, "", "check_layer_validity"], [324, 6, 1, "", "config"], [324, 3, 1, "", "get_block_size_dict"], [324, 3, 1, "", "get_masks"], [324, 3, 1, "", "get_masks_global"], [324, 3, 1, "", "get_masks_local"], [324, 3, 1, "", "get_pattern_lock_masks"], [324, 3, 1, "", "get_reduced_masks_from_data"], [324, 3, 1, "", "get_single_mask_per_target_ratio"], [324, 3, 1, "", "get_sparsity_ratio"], [324, 3, 1, "", "get_sparsity_ratio_each_layer"], [324, 6, 1, "", "invalid_layers"], [324, 6, 1, "", "is_global"], [324, 6, 1, "", "keep_mask_layers"], [324, 6, 1, "", "max_sparsity_ratio_per_op"], [324, 6, 1, "", "min_sparsity_ratio_per_op"], [324, 6, 1, "", "modules"], [324, 6, 1, "", "pattern"], [324, 3, 1, "", "reduce_tensor"], [324, 6, 1, "", "target_sparsity"], [324, 3, 1, "", "update_residual_cnt"]], "neural_compressor.pruner.patterns.PatternNInM": [[324, 6, 1, "", "M"], [324, 6, 1, "", "N"], [324, 3, 1, "", "check_layer_validity"], [324, 3, 1, "", "get_ele_mask_per_threshold"], [324, 3, 1, "", "get_least_ninm_mask_from_data"], [324, 3, 1, "", "get_masks_global"], [324, 3, 1, "", "get_pattern_lock_masks"], [324, 3, 1, "", "get_reduced_masks_from_data"], [324, 3, 1, "", "get_sparsity_ratio"], [324, 3, 1, "", "reduce_scores"], [324, 3, 1, "", "reshape_orig_to_pattern"], [324, 3, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.pruner.patterns.PatternNxM": [[324, 6, 1, "", "block_size"], [324, 3, 1, "", "check_layer_validity"], [324, 3, 1, "", "count_new_masked_cnts"], [324, 3, 1, "", "get_block_size_dict"], [324, 3, 1, "", "get_mask_per_threshold"], [324, 3, 1, "", "get_masks_global"], [324, 3, 1, "", "get_pattern_lock_masks"], [324, 3, 1, "", "get_reduced_masks_from_data"], [324, 3, 1, "", "get_sparsity_ratio"], [324, 3, 1, "", "get_sparsity_ratio_progressive"], [324, 3, 1, "", "reduce_scores"], [324, 3, 1, "", "reshape_orig_to_pattern"], [324, 3, 1, "", "reshape_reduced_to_orig"], [324, 3, 1, "", "update_new_added_masks"], [324, 3, 1, "", "update_progressive_masks"], [324, 3, 1, "", "update_progressive_masks_global"], [324, 3, 1, "", "update_progressive_masks_linear"], [324, 3, 1, "", "update_progressive_masks_local"], [324, 3, 1, "", "update_progressive_masks_scores"]], "neural_compressor.pruner.pruner_legacy": [[325, 0, 0, "-", "gradient_sensitivity"], [326, 0, 0, "-", "group_lasso"], [328, 0, 0, "-", "magnitude"], [329, 0, 0, "-", "pattern_lock"], [330, 0, 0, "-", "pruner"]], "neural_compressor.pruner.pruner_legacy.pruner": [[330, 1, 1, "", "pruner_registry"]], "neural_compressor.pruner.pruners": [[331, 2, 1, "", "BasePruner"], [331, 2, 1, "", "BasicPruner"], [331, 2, 1, "", "PatternLockPruner"], [331, 2, 1, "", "ProgressivePruner"], [331, 1, 1, "", "get_pruner"], [331, 1, 1, "", "parse_valid_pruner_types"], [331, 1, 1, "", "register_pruner"]], "neural_compressor.pruner.pruners.BasePruner": [[331, 3, 1, "", "check_is_pruned_step"], [331, 6, 1, "", "config"], [331, 6, 1, "", "current_sparsity_ratio"], [331, 6, 1, "", "end_step"], [331, 6, 1, "", "global_step"], [331, 3, 1, "", "mask_weights"], [331, 3, 1, "", "mask_weights_general"], [331, 6, 1, "", "masks"], [331, 6, 1, "", "max_sparsity_ratio_per_op"], [331, 6, 1, "", "modules"], [331, 3, 1, "", "on_after_eval"], [331, 3, 1, "", "on_after_optimizer_step"], [331, 3, 1, "", "on_before_eval"], [331, 3, 1, "", "on_before_optimizer_step"], [331, 3, 1, "", "on_epoch_begin"], [331, 3, 1, "", "on_epoch_end"], [331, 3, 1, "", "on_step_begin"], [331, 3, 1, "", "on_step_end"], [331, 3, 1, "", "on_train_begin"], [331, 3, 1, "", "on_train_end"], [331, 6, 1, "", "pattern"], [331, 6, 1, "", "pruning_frequency"], [331, 6, 1, "", "scheduler"], [331, 6, 1, "", "scores"], [331, 6, 1, "", "start_step"], [331, 6, 1, "", "target_sparsity_ratio"], [331, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.BasicPruner": [[331, 6, 1, "", "criterion"], [331, 3, 1, "", "on_after_optimizer_step"], [331, 3, 1, "", "on_before_optimizer_step"], [331, 6, 1, "", "pattern"], [331, 6, 1, "", "reg"], [331, 6, 1, "", "scheduler"], [331, 3, 1, "", "set_global_step"], [331, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.PatternLockPruner": [[331, 3, 1, "", "on_after_optimizer_step"], [331, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.ProgressivePruner": [[331, 3, 1, "", "check_is_pruned_progressive_step"], [331, 3, 1, "", "check_progressive_validity"], [331, 3, 1, "", "on_after_optimizer_step"], [331, 3, 1, "", "on_before_optimizer_step"], [331, 3, 1, "", "on_step_begin"], [331, 3, 1, "", "print_progressive_sparsity"], [331, 3, 1, "", "update_masks_progressive"]], "neural_compressor.pruner.pruning": [[332, 2, 1, "", "Pruning"]], "neural_compressor.pruner.pruning.Pruning": [[332, 6, 1, "", "config_file_path"], [332, 3, 1, "", "get_sparsity_ratio"], [332, 4, 1, "id0", "model"], [332, 3, 1, "", "on_after_eval"], [332, 3, 1, "", "on_after_optimizer_step"], [332, 3, 1, "", "on_before_eval"], [332, 3, 1, "", "on_before_optimizer_step"], [332, 3, 1, "", "on_epoch_begin"], [332, 3, 1, "", "on_epoch_end"], [332, 3, 1, "", "on_step_begin"], [332, 3, 1, "", "on_step_end"], [332, 3, 1, "", "on_train_begin"], [332, 3, 1, "", "on_train_end"], [332, 6, 1, "", "pruner_info"], [332, 6, 1, "", "pruners"], [332, 3, 1, "", "update_config"]], "neural_compressor.pruner.regs": [[333, 2, 1, "", "BaseReg"], [333, 2, 1, "", "GroupLasso"], [333, 1, 1, "", "get_reg"], [333, 1, 1, "", "get_reg_type"], [333, 1, 1, "", "register_reg"]], "neural_compressor.pruner.regs.BaseReg": [[333, 3, 1, "", "on_after_optimizer_step"], [333, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.regs.GroupLasso": [[333, 6, 1, "", "alpha"], [333, 3, 1, "", "on_after_optimizer_step"], [333, 3, 1, "", "on_before_optimizer_step"], [333, 6, 1, "", "reg_terms"]], "neural_compressor.pruner.schedulers": [[334, 2, 1, "", "IterativeScheduler"], [334, 2, 1, "", "OneshotScheduler"], [334, 2, 1, "", "PruningScheduler"], [334, 1, 1, "", "get_scheduler"], [334, 1, 1, "", "register_scheduler"]], "neural_compressor.pruner.schedulers.IterativeScheduler": [[334, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.OneshotScheduler": [[334, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.PruningScheduler": [[334, 6, 1, "", "config"], [334, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.utils": [[335, 1, 1, "", "check_config"], [335, 1, 1, "", "parse_to_prune"], [335, 1, 1, "", "process_and_check_config"], [335, 1, 1, "", "process_config"], [335, 1, 1, "", "process_weight_config"], [335, 1, 1, "", "process_yaml_config"], [335, 1, 1, "", "reset_none_to_default"], [335, 1, 1, "", "update_params"]], "neural_compressor.quantization": [[336, 1, 1, "", "fit"]], "neural_compressor.strategy": [[337, 0, 0, "-", "auto_mixed_precision"], [338, 0, 0, "-", "basic"], [339, 0, 0, "-", "bayesian"], [340, 0, 0, "-", "conservative"], [341, 0, 0, "-", "exhaustive"], [342, 0, 0, "-", "hawq_v2"], [344, 0, 0, "-", "mse"], [345, 0, 0, "-", "mse_v2"], [346, 0, 0, "-", "random"], [347, 0, 0, "-", "strategy"], [348, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[337, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[337, 3, 1, "", "next_tune_cfg"], [337, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[338, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[338, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[339, 2, 1, "", "BayesianOptimization"], [339, 2, 1, "", "BayesianTuneStrategy"], [339, 2, 1, "", "TargetSpace"], [339, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianOptimization": [[339, 3, 1, "", "gen_next_params"], [339, 4, 1, "", "max"], [339, 4, 1, "", "res"], [339, 4, 1, "", "space"], [339, 3, 1, "", "suggest"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[339, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[339, 3, 1, "", "array_to_params"], [339, 4, 1, "", "bounds"], [339, 4, 1, "", "dim"], [339, 4, 1, "", "empty"], [339, 3, 1, "", "get_target"], [339, 4, 1, "", "keys"], [339, 3, 1, "", "max"], [339, 4, 1, "", "params"], [339, 3, 1, "", "params_to_array"], [339, 3, 1, "", "random_sample"], [339, 3, 1, "", "register"], [339, 3, 1, "", "res"], [339, 4, 1, "", "target"]], "neural_compressor.strategy.conservative": [[340, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[340, 3, 1, "", "next_tune_cfg"], [340, 3, 1, "", "stop"], [340, 3, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[341, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[341, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[342, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[342, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[344, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[344, 3, 1, "", "mse_impact_lst"], [344, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[345, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[345, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[346, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[346, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[347, 2, 1, "", "TuneStrategy"], [347, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[347, 3, 1, "", "deploy_config"], [347, 4, 1, "", "evaluation_result"], [347, 3, 1, "", "initial_best_acc"], [347, 3, 1, "", "initial_tuning_cfg"], [347, 3, 1, "", "next_tune_cfg"], [347, 3, 1, "", "set_q_func"], [347, 3, 1, "", "set_tuning_space"], [347, 3, 1, "", "setup_resume"], [347, 3, 1, "", "show_baseline_info"], [347, 3, 1, "", "stop"], [347, 3, 1, "", "traverse"], [347, 3, 1, "", "update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils": [[348, 2, 1, "", "OpTuningConfig"], [349, 0, 0, "-", "tuning_sampler"], [350, 0, 0, "-", "tuning_space"], [351, 0, 0, "-", "tuning_structs"]], "neural_compressor.strategy.utils.OpTuningConfig": [[348, 3, 1, "", "from_state"], [348, 3, 1, "", "get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[351, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig": [[351, 3, 1, "", "from_state"], [351, 3, 1, "", "get_state"]], "neural_compressor.training": [[352, 2, 1, "", "CompressionManager"], [352, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[352, 3, 1, "", "export"], [352, 3, 1, "", "save"]], "neural_compressor.utils": [[356, 2, 1, "", "KL_Divergence"], [356, 2, 1, "", "LayerHistogramCollector"], [353, 0, 0, "-", "collect_layer_histogram"], [354, 0, 0, "-", "constant"], [355, 0, 0, "-", "create_obj_from_config"], [357, 0, 0, "-", "kl_divergence"], [358, 0, 0, "-", "load_huggingface"], [359, 0, 0, "-", "logger"], [360, 0, 0, "-", "options"], [361, 0, 0, "-", "pytorch"], [362, 0, 0, "-", "utility"]], "neural_compressor.utils.KL_Divergence": [[356, 3, 1, "", "expand_quantized_bins"], [356, 3, 1, "", "get_threshold"], [356, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.LayerHistogramCollector": [[356, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[353, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[353, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[355, 1, 1, "", "create_eval_func"], [355, 1, 1, "", "create_train_func"]], "neural_compressor.utils.kl_divergence": [[357, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[357, 3, 1, "", "expand_quantized_bins"], [357, 3, 1, "", "get_threshold"], [357, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.pytorch": [[361, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[362, 2, 1, "", "LazyImport"], [362, 2, 1, "", "MODE"], [362, 1, 1, "", "combine_histogram"], [362, 1, 1, "", "dump_data_to_local"], [362, 1, 1, "", "dump_elapsed_time"], [362, 1, 1, "", "equal_dicts"], [362, 1, 1, "", "get_size"], [362, 1, 1, "", "get_tuning_history"], [362, 1, 1, "", "load_data_from_pkl"], [362, 1, 1, "", "recover"]], "neural_compressor.ux": [[438, 0, 0, "-", "components"], [497, 0, 0, "-", "inc_bench"], [506, 0, 0, "-", "utils"], [532, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[366, 0, 0, "-", "benchmark"], [370, 0, 0, "-", "config_generator"], [378, 0, 0, "-", "configuration_wizard"], [414, 0, 0, "-", "db_manager"], [419, 0, 0, "-", "diagnosis"], [427, 0, 0, "-", "file_browser"], [433, 0, 0, "-", "graph"], [439, 0, 0, "-", "jobs_management"], [443, 0, 0, "-", "manage_workspace"], [445, 0, 0, "-", "model"], [464, 0, 0, "-", "model_zoo"], [466, 0, 0, "-", "names_mapper"], [473, 0, 0, "-", "optimization"], [489, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[366, 2, 1, "", "Benchmarks"], [363, 0, 0, "-", "benchmark"], [364, 0, 0, "-", "benchmark_model"], [365, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[363, 2, 1, "", "Benchmark"], [363, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[363, 4, 1, "", "config_filename"], [363, 4, 1, "", "configuration_data"], [363, 3, 1, "", "execute"], [363, 3, 1, "", "generate_config"], [363, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[364, 1, 1, "", "benchmark_model"], [364, 1, 1, "", "parse_args"], [364, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[365, 1, 1, "", "benchmark_result_update"], [365, 1, 1, "", "benchmark_result_update_pytorch_script"], [365, 1, 1, "", "execute_benchmark"], [365, 1, 1, "", "execute_real_benchmark"], [365, 1, 1, "", "pytorch_script_bench_optimizations"], [365, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[367, 0, 0, "-", "benchmark_config_generator"], [368, 0, 0, "-", "config_generator"], [369, 0, 0, "-", "graph_optimization_config_generator"], [371, 0, 0, "-", "mixed_precision_config_generator"], [372, 0, 0, "-", "profiling_config_generator"], [373, 0, 0, "-", "pruning_config_generator"], [374, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[367, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[367, 3, 1, "", "generate"], [367, 3, 1, "", "generate_accuracy_config"], [367, 3, 1, "", "generate_evaluation_config"], [367, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[368, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[368, 3, 1, "", "generate"], [368, 3, 1, "", "generate_dataloader_config"], [368, 3, 1, "", "generate_model_config"], [368, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[369, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[369, 3, 1, "", "generate"], [369, 3, 1, "", "generate_evaluation_config"], [369, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[371, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[371, 3, 1, "", "generate"], [371, 3, 1, "", "generate_evaluation_config"], [371, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[372, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[372, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[373, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator": [[373, 3, 1, "", "generate"], [373, 3, 1, "", "generate_evaluation_config"], [373, 3, 1, "", "generate_pruning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[374, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[374, 3, 1, "", "generate"], [374, 3, 1, "", "generate_evaluation_config"], [374, 3, 1, "", "generate_quantization_config"], [374, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[375, 0, 0, "-", "configuration_parser"], [376, 0, 0, "-", "get_boundary_nodes"], [377, 0, 0, "-", "get_configuration"], [379, 0, 0, "-", "params_feeder"], [380, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[375, 2, 1, "", "ConfigurationParser"], [375, 1, 1, "", "normalize_string_list"], [375, 1, 1, "", "parse_list_value"], [375, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[375, 3, 1, "", "get_param_type"], [375, 3, 1, "", "parse"], [375, 3, 1, "", "parse_dataloader"], [375, 3, 1, "", "parse_evaluation_data"], [375, 3, 1, "", "parse_metric"], [375, 3, 1, "", "parse_transforms"], [375, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[376, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[377, 1, 1, "", "get_predefined_configuration"], [377, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[379, 2, 1, "", "Feeder"], [379, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[379, 3, 1, "", "feed"], [379, 3, 1, "", "get_dataloaders"], [379, 3, 1, "", "get_domains"], [379, 3, 1, "", "get_frameworks"], [379, 3, 1, "", "get_metrics"], [379, 3, 1, "", "get_models"], [379, 3, 1, "", "get_objectives"], [379, 3, 1, "", "get_precisions"], [379, 3, 1, "", "get_quantization_approaches"], [379, 3, 1, "", "get_strategies"], [379, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[380, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser": [[380, 3, 1, "", "generate_tree"], [380, 3, 1, "", "parse"], [380, 3, 1, "", "parse_entry"]], "neural_compressor.ux.components.db_manager": [[414, 2, 1, "", "DBManager"], [381, 0, 0, "-", "db_manager"], [390, 0, 0, "-", "db_models"], [409, 0, 0, "-", "db_operations"], [415, 0, 0, "-", "params_interfaces"], [416, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[414, 3, 1, "", "create_all"], [414, 3, 1, "", "create_sqlalchemy_engine"], [414, 4, 1, "", "engine"], [414, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[381, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[381, 3, 1, "", "create_all"], [381, 3, 1, "", "create_sqlalchemy_engine"], [381, 4, 1, "", "engine"], [381, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[382, 0, 0, "-", "benchmark"], [383, 0, 0, "-", "benchmark_result"], [384, 0, 0, "-", "dataloader"], [385, 0, 0, "-", "dataset"], [386, 0, 0, "-", "domain"], [387, 0, 0, "-", "domain_flavour"], [388, 0, 0, "-", "example"], [389, 0, 0, "-", "framework"], [391, 0, 0, "-", "metric"], [392, 0, 0, "-", "model"], [393, 0, 0, "-", "optimization"], [394, 0, 0, "-", "optimization_type"], [395, 0, 0, "-", "precision"], [396, 0, 0, "-", "profiling"], [397, 0, 0, "-", "profiling_result"], [398, 0, 0, "-", "project"], [399, 0, 0, "-", "pruning_details"], [400, 0, 0, "-", "transform"], [401, 0, 0, "-", "tuning_details"], [402, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[382, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[382, 3, 1, "", "add"], [382, 3, 1, "", "build_info"], [382, 3, 1, "", "clean_status"], [382, 3, 1, "", "delete_benchmark"], [382, 3, 1, "", "details"], [382, 3, 1, "", "list"], [382, 3, 1, "", "update_batch_size"], [382, 3, 1, "", "update_config_path"], [382, 3, 1, "", "update_cores_per_instance"], [382, 3, 1, "", "update_dataset"], [382, 3, 1, "", "update_duration"], [382, 3, 1, "", "update_execution_command"], [382, 3, 1, "", "update_log_path"], [382, 3, 1, "", "update_mode"], [382, 3, 1, "", "update_number_of_instance"], [382, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[383, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[383, 3, 1, "", "add"], [383, 3, 1, "", "build_info"], [383, 3, 1, "", "update_accuracy"], [383, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[384, 2, 1, "", "Dataloader"], [384, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[384, 3, 1, "", "list"], [384, 3, 1, "", "list_by_framework"], [384, 3, 1, "", "query_to_list"], [384, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[385, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[385, 3, 1, "", "add"], [385, 3, 1, "", "build_info"], [385, 3, 1, "", "delete_dataset"], [385, 3, 1, "", "details"], [385, 3, 1, "", "list"], [385, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[386, 2, 1, "", "Domain"], [386, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[386, 3, 1, "", "get_domain_id"], [386, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[387, 2, 1, "", "DomainFlavour"], [387, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[387, 3, 1, "", "get_domain_flavour_id"], [387, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[388, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[389, 2, 1, "", "Framework"], [389, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[389, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[391, 2, 1, "", "Metric"], [391, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[391, 3, 1, "", "list"], [391, 3, 1, "", "list_by_framework"], [391, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[392, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[392, 3, 1, "", "add"], [392, 3, 1, "", "build_info"], [392, 3, 1, "", "delete_model"], [392, 3, 1, "", "details"], [392, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[393, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[393, 3, 1, "", "add"], [393, 3, 1, "", "build_info"], [393, 3, 1, "", "clean_status"], [393, 3, 1, "", "delete_optimization"], [393, 3, 1, "", "details"], [393, 3, 1, "", "get_optimization_by_project_and_model"], [393, 3, 1, "", "get_pinned_benchmarks"], [393, 3, 1, "", "list"], [393, 3, 1, "", "pin_accuracy_benchmark"], [393, 3, 1, "", "pin_performance_benchmark"], [393, 3, 1, "", "unpin_benchmark"], [393, 3, 1, "", "update_batch_size"], [393, 3, 1, "", "update_config_path"], [393, 3, 1, "", "update_dataset"], [393, 3, 1, "", "update_duration"], [393, 3, 1, "", "update_execution_command"], [393, 3, 1, "", "update_log_path"], [393, 3, 1, "", "update_optimized_model"], [393, 3, 1, "", "update_precision"], [393, 3, 1, "", "update_pruning_details"], [393, 3, 1, "", "update_sampling_size"], [393, 3, 1, "", "update_status"], [393, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[394, 2, 1, "", "OptimizationType"], [394, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[394, 3, 1, "", "add"], [394, 3, 1, "", "get_optimization_type_by_id"], [394, 3, 1, "", "get_optimization_type_by_name"], [394, 3, 1, "", "get_optimization_type_for_precision"], [394, 3, 1, "", "get_optimization_type_id"], [394, 3, 1, "", "list"], [394, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[395, 2, 1, "", "Precision"], [395, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[395, 3, 1, "", "add"], [395, 3, 1, "", "get_precision_by_id"], [395, 3, 1, "", "get_precision_by_name"], [395, 3, 1, "", "get_precision_id"], [395, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[396, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[396, 3, 1, "", "add"], [396, 3, 1, "", "build_info"], [396, 3, 1, "", "clean_status"], [396, 3, 1, "", "delete_profiling"], [396, 3, 1, "", "details"], [396, 3, 1, "", "list"], [396, 3, 1, "", "update_dataset"], [396, 3, 1, "", "update_duration"], [396, 3, 1, "", "update_execution_command"], [396, 3, 1, "", "update_log_path"], [396, 3, 1, "", "update_num_threads"], [396, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[397, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[397, 3, 1, "", "add"], [397, 3, 1, "", "build_info"], [397, 3, 1, "", "bulk_add"], [397, 3, 1, "", "delete_results"], [397, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[398, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[398, 3, 1, "", "create_project"], [398, 3, 1, "", "delete_project"], [398, 3, 1, "", "get_model_by_name"], [398, 3, 1, "", "list_projects"], [398, 3, 1, "", "project_details"], [398, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[399, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails": [[399, 3, 1, "", "add"], [399, 3, 1, "", "build_info"], [399, 3, 1, "", "delete_pruning_details"], [399, 3, 1, "", "update"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[400, 2, 1, "", "Transform"], [400, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[400, 3, 1, "", "list"], [400, 3, 1, "", "list_by_domain"], [400, 3, 1, "", "list_by_framework"], [400, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[401, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[401, 3, 1, "", "add"], [401, 3, 1, "", "delete_tuning_details"], [401, 3, 1, "", "update"], [401, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[402, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[402, 3, 1, "", "add"], [402, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[409, 2, 1, "", "BenchmarkAPIInterface"], [409, 2, 1, "", "DatasetAPIInterface"], [409, 2, 1, "", "DiagnosisAPIInterface"], [409, 2, 1, "", "DictionariesAPIInterface"], [409, 2, 1, "", "ExamplesAPIInterface"], [409, 2, 1, "", "ModelAPIInterface"], [409, 2, 1, "", "OptimizationAPIInterface"], [409, 2, 1, "", "ProfilingAPIInterface"], [409, 2, 1, "", "ProjectAPIInterface"], [403, 0, 0, "-", "benchmark_api_interface"], [404, 0, 0, "-", "dataset_api_interface"], [405, 0, 0, "-", "db_operations"], [406, 0, 0, "-", "diagnosis_api_interface"], [407, 0, 0, "-", "dictionaries_api_interface"], [408, 0, 0, "-", "examples_api_interface"], [410, 0, 0, "-", "model_api_interface"], [411, 0, 0, "-", "optimization_api_interface"], [412, 0, 0, "-", "profiling_api_interface"], [413, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[409, 3, 1, "", "add_benchmark"], [409, 3, 1, "", "add_result"], [409, 3, 1, "", "clean_status"], [409, 3, 1, "", "delete_benchmark"], [409, 3, 1, "", "edit_benchmark"], [409, 3, 1, "", "get_benchmark_details"], [409, 3, 1, "", "list_benchmarks"], [409, 3, 1, "", "parse_benchmark_data"], [409, 3, 1, "", "parse_benchmark_edit_data"], [409, 3, 1, "", "update_benchmark_accuracy"], [409, 3, 1, "", "update_benchmark_duration"], [409, 3, 1, "", "update_benchmark_performance"], [409, 3, 1, "", "update_benchmark_status"], [409, 3, 1, "", "update_execution_command"], [409, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[409, 3, 1, "", "add_dataset"], [409, 3, 1, "", "check_if_custom_metric_or_dataloader"], [409, 3, 1, "", "dataloader_path"], [409, 3, 1, "", "delete_dataset"], [409, 3, 1, "", "generate_custom_template"], [409, 3, 1, "", "generate_template"], [409, 3, 1, "", "get_dataset_details"], [409, 3, 1, "", "get_predefined_dataset"], [409, 3, 1, "", "list_datasets"], [409, 3, 1, "", "parse_dataset_data"], [409, 3, 1, "", "prepare_predefined_dataloader"], [409, 3, 1, "", "prepare_predefined_transform"], [409, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[409, 3, 1, "", "generate_optimization"], [409, 3, 1, "", "get_op_details"], [409, 3, 1, "", "get_op_list"], [409, 3, 1, "", "histogram"], [409, 3, 1, "", "model_wise_params"], [409, 3, 1, "", "parse_model_wise_config"], [409, 3, 1, "", "parse_op_wise_config"], [409, 3, 1, "", "parse_optimization_data"], [409, 3, 1, "", "parse_wise_parameters"], [409, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[409, 3, 1, "", "list_dataloaders"], [409, 3, 1, "", "list_dataloaders_by_framework"], [409, 3, 1, "", "list_domain_flavours"], [409, 3, 1, "", "list_domains"], [409, 3, 1, "", "list_metrics"], [409, 3, 1, "", "list_metrics_by_framework"], [409, 3, 1, "", "list_optimization_types"], [409, 3, 1, "", "list_optimization_types_for_precision"], [409, 3, 1, "", "list_precisions"], [409, 3, 1, "", "list_transforms"], [409, 3, 1, "", "list_transforms_by_domain"], [409, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[409, 3, 1, "", "create_project"], [409, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[409, 3, 1, "", "add_model"], [409, 3, 1, "", "delete_model"], [409, 3, 1, "", "get_model_details"], [409, 3, 1, "", "list_models"], [409, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[409, 3, 1, "", "add_optimization"], [409, 3, 1, "", "add_pruning_optimization"], [409, 3, 1, "", "add_quantization_optimization"], [409, 3, 1, "", "add_standard_optimization"], [409, 3, 1, "", "add_tuning_history"], [409, 3, 1, "", "clean_status"], [409, 3, 1, "", "delete_optimization"], [409, 3, 1, "", "edit_optimization"], [409, 3, 1, "", "edit_pruning_details"], [409, 3, 1, "", "edit_tuning_details"], [409, 3, 1, "", "get_optimization_details"], [409, 3, 1, "", "get_pruning_details"], [409, 3, 1, "", "list_optimizations"], [409, 3, 1, "", "load_pruning_details_config"], [409, 3, 1, "", "parse_optimization_data"], [409, 3, 1, "", "parse_optimization_edit_data"], [409, 3, 1, "", "parse_tuning_history"], [409, 3, 1, "", "pin_accuracy_benchmark"], [409, 3, 1, "", "pin_performance_benchmark"], [409, 3, 1, "", "update_execution_command"], [409, 3, 1, "", "update_optimization_duration"], [409, 3, 1, "", "update_optimization_status"], [409, 3, 1, "", "update_optimized_model"], [409, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[409, 3, 1, "", "add_profiling"], [409, 3, 1, "", "add_result"], [409, 3, 1, "", "bulk_add_results"], [409, 3, 1, "", "clean_status"], [409, 3, 1, "", "delete_profiling"], [409, 3, 1, "", "edit_profiling"], [409, 3, 1, "", "get_profiling_details"], [409, 3, 1, "", "list_profilings"], [409, 3, 1, "", "parse_profiling_data"], [409, 3, 1, "", "parse_profiling_edit_data"], [409, 3, 1, "", "parse_profiling_result_data"], [409, 3, 1, "", "update_execution_command"], [409, 3, 1, "", "update_log_path"], [409, 3, 1, "", "update_profiling_duration"], [409, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[409, 3, 1, "", "add_dummy_dataset"], [409, 3, 1, "", "add_model"], [409, 3, 1, "", "create_project"], [409, 3, 1, "", "delete_project"], [409, 3, 1, "", "get_project_details"], [409, 3, 1, "", "list_projects"], [409, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[403, 2, 1, "", "BenchmarkAPIInterface"], [403, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[403, 3, 1, "", "add_benchmark"], [403, 3, 1, "", "add_result"], [403, 3, 1, "", "clean_status"], [403, 3, 1, "", "delete_benchmark"], [403, 3, 1, "", "edit_benchmark"], [403, 3, 1, "", "get_benchmark_details"], [403, 3, 1, "", "list_benchmarks"], [403, 3, 1, "", "parse_benchmark_data"], [403, 3, 1, "", "parse_benchmark_edit_data"], [403, 3, 1, "", "update_benchmark_accuracy"], [403, 3, 1, "", "update_benchmark_duration"], [403, 3, 1, "", "update_benchmark_performance"], [403, 3, 1, "", "update_benchmark_status"], [403, 3, 1, "", "update_execution_command"], [403, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[404, 2, 1, "", "DatasetAPIInterface"], [404, 1, 1, "", "initialize_associations"], [404, 1, 1, "", "initialize_precision_optimization_types_association"], [404, 1, 1, "", "search_in_list_of_dict"], [404, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [404, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[404, 3, 1, "", "add_dataset"], [404, 3, 1, "", "check_if_custom_metric_or_dataloader"], [404, 3, 1, "", "dataloader_path"], [404, 3, 1, "", "delete_dataset"], [404, 3, 1, "", "generate_custom_template"], [404, 3, 1, "", "generate_template"], [404, 3, 1, "", "get_dataset_details"], [404, 3, 1, "", "get_predefined_dataset"], [404, 3, 1, "", "list_datasets"], [404, 3, 1, "", "parse_dataset_data"], [404, 3, 1, "", "prepare_predefined_dataloader"], [404, 3, 1, "", "prepare_predefined_transform"], [404, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[405, 1, 1, "", "initialize_associations"], [405, 1, 1, "", "initialize_precision_optimization_types_association"], [405, 1, 1, "", "search_in_list_of_dict"], [405, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [405, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[406, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[406, 3, 1, "", "generate_optimization"], [406, 3, 1, "", "get_op_details"], [406, 3, 1, "", "get_op_list"], [406, 3, 1, "", "histogram"], [406, 3, 1, "", "model_wise_params"], [406, 3, 1, "", "parse_model_wise_config"], [406, 3, 1, "", "parse_op_wise_config"], [406, 3, 1, "", "parse_optimization_data"], [406, 3, 1, "", "parse_wise_parameters"], [406, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[407, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[407, 3, 1, "", "list_dataloaders"], [407, 3, 1, "", "list_dataloaders_by_framework"], [407, 3, 1, "", "list_domain_flavours"], [407, 3, 1, "", "list_domains"], [407, 3, 1, "", "list_metrics"], [407, 3, 1, "", "list_metrics_by_framework"], [407, 3, 1, "", "list_optimization_types"], [407, 3, 1, "", "list_optimization_types_for_precision"], [407, 3, 1, "", "list_precisions"], [407, 3, 1, "", "list_transforms"], [407, 3, 1, "", "list_transforms_by_domain"], [407, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[408, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[408, 3, 1, "", "create_project"], [408, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[410, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[410, 3, 1, "", "add_model"], [410, 3, 1, "", "delete_model"], [410, 3, 1, "", "get_model_details"], [410, 3, 1, "", "list_models"], [410, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[411, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[411, 3, 1, "", "add_optimization"], [411, 3, 1, "", "add_pruning_optimization"], [411, 3, 1, "", "add_quantization_optimization"], [411, 3, 1, "", "add_standard_optimization"], [411, 3, 1, "", "add_tuning_history"], [411, 3, 1, "", "clean_status"], [411, 3, 1, "", "delete_optimization"], [411, 3, 1, "", "edit_optimization"], [411, 3, 1, "", "edit_pruning_details"], [411, 3, 1, "", "edit_tuning_details"], [411, 3, 1, "", "get_optimization_details"], [411, 3, 1, "", "get_pruning_details"], [411, 3, 1, "", "list_optimizations"], [411, 3, 1, "", "load_pruning_details_config"], [411, 3, 1, "", "parse_optimization_data"], [411, 3, 1, "", "parse_optimization_edit_data"], [411, 3, 1, "", "parse_tuning_history"], [411, 3, 1, "", "pin_accuracy_benchmark"], [411, 3, 1, "", "pin_performance_benchmark"], [411, 3, 1, "", "update_execution_command"], [411, 3, 1, "", "update_optimization_duration"], [411, 3, 1, "", "update_optimization_status"], [411, 3, 1, "", "update_optimized_model"], [411, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[412, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[412, 3, 1, "", "add_profiling"], [412, 3, 1, "", "add_result"], [412, 3, 1, "", "bulk_add_results"], [412, 3, 1, "", "clean_status"], [412, 3, 1, "", "delete_profiling"], [412, 3, 1, "", "edit_profiling"], [412, 3, 1, "", "get_profiling_details"], [412, 3, 1, "", "list_profilings"], [412, 3, 1, "", "parse_profiling_data"], [412, 3, 1, "", "parse_profiling_edit_data"], [412, 3, 1, "", "parse_profiling_result_data"], [412, 3, 1, "", "update_execution_command"], [412, 3, 1, "", "update_log_path"], [412, 3, 1, "", "update_profiling_duration"], [412, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[413, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[413, 3, 1, "", "add_dummy_dataset"], [413, 3, 1, "", "add_model"], [413, 3, 1, "", "create_project"], [413, 3, 1, "", "delete_project"], [413, 3, 1, "", "get_project_details"], [413, 3, 1, "", "list_projects"], [413, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[415, 2, 1, "", "BenchmarkAddParamsInterface"], [415, 2, 1, "", "BenchmarkEditParamsInterface"], [415, 2, 1, "", "DatasetAddParamsInterface"], [415, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [415, 2, 1, "", "ModelAddParamsInterface"], [415, 2, 1, "", "OptimizationAddParamsInterface"], [415, 2, 1, "", "OptimizationEditParamsInterface"], [415, 2, 1, "", "ProfilingAddParamsInterface"], [415, 2, 1, "", "ProfilingEditParamsInterface"], [415, 2, 1, "", "ProfilingResultAddParamsInterface"], [415, 2, 1, "", "TuningHistoryInterface"], [415, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[415, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[415, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[415, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[416, 1, 1, "", "get_framework_dataloaders_config"], [416, 1, 1, "", "get_framework_transforms_config"], [416, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[417, 0, 0, "-", "diagnosis"], [418, 0, 0, "-", "factory"], [420, 0, 0, "-", "onnx_diagnosis"], [422, 0, 0, "-", "op_details"], [423, 0, 0, "-", "op_entry"], [424, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[417, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[417, 3, 1, "", "calculate_mse"], [417, 3, 1, "", "get_histogram_data"], [417, 3, 1, "", "get_op_details"], [417, 3, 1, "", "get_op_list"], [417, 3, 1, "", "get_tensors_info"], [417, 3, 1, "", "load_quantization_config"], [417, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[418, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[418, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[421, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[421, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[421, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[422, 2, 1, "", "OpActivation"], [422, 2, 1, "", "OpDetails"], [422, 2, 1, "", "OpPattern"], [422, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[422, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[423, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[423, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[425, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[425, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[425, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[426, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[426, 1, 1, "", "create_dir_entry"], [426, 1, 1, "", "create_entry"], [426, 1, 1, "", "create_file_entry"], [426, 1, 1, "", "filter_requested_entries"], [426, 1, 1, "", "get_directory_entries"], [426, 1, 1, "", "get_filter_value"], [426, 1, 1, "", "get_non_hidden_directory_entries"], [426, 1, 1, "", "get_requested_path"], [426, 1, 1, "", "get_setting_value"], [426, 1, 1, "", "is_dataset_or_directory_entry"], [426, 1, 1, "", "is_directory_entry"], [426, 1, 1, "", "is_model_or_directory_entry"], [426, 1, 1, "", "should_show_files"], [426, 1, 1, "", "should_show_only_model_files"], [426, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[428, 0, 0, "-", "attribute"], [429, 0, 0, "-", "collapser"], [430, 0, 0, "-", "edge"], [431, 0, 0, "-", "graph"], [432, 0, 0, "-", "graph_reader"], [434, 0, 0, "-", "node"], [435, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[428, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[429, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[429, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[430, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[430, 4, 1, "", "source"], [430, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[431, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[431, 3, 1, "", "add_edge"], [431, 3, 1, "", "add_node"], [431, 4, 1, "", "edges"], [431, 3, 1, "", "get_node"], [431, 3, 1, "", "get_target_nodes"], [431, 3, 1, "", "highlight_pattern"], [431, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[432, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[432, 3, 1, "", "find_pattern_in_graph"], [432, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[434, 2, 1, "", "GroupNode"], [434, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[436, 0, 0, "-", "onnxrt_reader"], [437, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[436, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[436, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[437, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[437, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[440, 0, 0, "-", "jobs_control_queue"], [441, 0, 0, "-", "jobs_manager"], [442, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[443, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[444, 0, 0, "-", "domain"], [446, 0, 0, "-", "model"], [447, 0, 0, "-", "model_type_getter"], [448, 0, 0, "-", "onnxrt"], [450, 0, 0, "-", "pytorch"], [452, 0, 0, "-", "repository"], [453, 0, 0, "-", "shape"], [455, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[444, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[446, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[446, 4, 1, "", "domain"], [446, 3, 1, "", "ensure_supported_path"], [446, 3, 1, "", "get_framework_name"], [446, 3, 1, "", "get_input_nodes"], [446, 3, 1, "", "get_model_graph"], [446, 3, 1, "", "get_output_nodes"], [446, 3, 1, "", "get_tensors_info"], [446, 3, 1, "", "guard_requirements_installed"], [446, 4, 1, "", "input_shape"], [446, 4, 1, "", "shape_elements_order"], [446, 4, 1, "", "supports_graph"], [446, 3, 1, "", "supports_path"], [446, 4, 1, "", "supports_profiling"], [446, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.model_type_getter": [[447, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[449, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[449, 2, 1, "", "OnnxrtModel"], [449, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[449, 4, 1, "", "domain"], [449, 4, 1, "", "filtered_input_nodes"], [449, 3, 1, "", "get_framework_name"], [449, 3, 1, "", "get_model_graph"], [449, 3, 1, "", "guard_requirements_installed"], [449, 4, 1, "", "input_shape"], [449, 4, 1, "", "nc_model_instance"], [449, 4, 1, "", "shape_elements_order"], [449, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[451, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[451, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[451, 3, 1, "", "get_framework_name"], [451, 3, 1, "", "guard_requirements_installed"], [451, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[452, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[452, 3, 1, "", "get_framework_from_path"], [452, 3, 1, "", "get_frameworks"], [452, 3, 1, "", "get_model"], [452, 3, 1, "", "get_supported_frameworks"], [452, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[453, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[453, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[454, 0, 0, "-", "frozen_pb"], [456, 0, 0, "-", "keras"], [457, 0, 0, "-", "meta_graph"], [458, 0, 0, "-", "model"], [459, 0, 0, "-", "saved_model"], [460, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[454, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[454, 3, 1, "", "supports_path"], [454, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[456, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[456, 3, 1, "", "get_input_nodes"], [456, 3, 1, "", "get_output_nodes"], [456, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[457, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[457, 3, 1, "", "get_input_nodes"], [457, 3, 1, "", "get_model_graph"], [457, 3, 1, "", "get_output_nodes"], [457, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[458, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[458, 3, 1, "", "get_framework_name"], [458, 3, 1, "", "get_input_nodes"], [458, 3, 1, "", "get_model_graph"], [458, 3, 1, "", "get_output_nodes"], [458, 3, 1, "", "guard_requirements_installed"], [458, 4, 1, "", "input_shape"], [458, 4, 1, "", "nc_model_instance"], [458, 4, 1, "", "shape_elements_order"], [458, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[459, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[459, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[460, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[461, 0, 0, "-", "download_config"], [462, 0, 0, "-", "download_model"], [463, 0, 0, "-", "downloader"], [465, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[461, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[462, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[463, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[463, 3, 1, "", "download"], [463, 3, 1, "", "download_config"], [463, 3, 1, "", "download_file"], [463, 3, 1, "", "download_model"], [463, 3, 1, "", "download_yaml_config"], [463, 3, 1, "", "get_yaml_url"], [463, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[465, 1, 1, "", "check_version"], [465, 1, 1, "", "get_available_models"], [465, 1, 1, "", "get_framework_module_name"], [465, 1, 1, "", "get_installed_frameworks"], [465, 1, 1, "", "list_models"], [465, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[467, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[467, 2, 1, "", "MappingDirection"], [467, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[467, 4, 1, "", "domain_flavour_mappings"], [467, 4, 1, "", "domain_mappings"], [467, 4, 1, "", "framework_mappings"], [467, 3, 1, "", "map_name"], [467, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[473, 2, 1, "", "Optimizations"], [468, 0, 0, "-", "execute_optimization"], [469, 0, 0, "-", "factory"], [471, 0, 0, "-", "graph_optimizer"], [474, 0, 0, "-", "mixed_precision"], [477, 0, 0, "-", "neural_coder_optimization"], [479, 0, 0, "-", "optimization"], [480, 0, 0, "-", "pruning"], [483, 0, 0, "-", "tune"], [486, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[468, 1, 1, "", "check_if_collect_tuning_history"], [468, 1, 1, "", "execute_optimization"], [468, 1, 1, "", "execute_optimization_pytorch_script"], [468, 1, 1, "", "execute_optimization_regular"], [468, 1, 1, "", "parse_logs"], [468, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[469, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[469, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[470, 0, 0, "-", "graph_optimization"], [472, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[470, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[470, 4, 1, "", "configuration_data"], [470, 3, 1, "", "execute"], [470, 3, 1, "", "generate_config"], [470, 4, 1, "", "optimization_script"], [470, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[472, 1, 1, "", "optimize_graph"], [472, 1, 1, "", "optimize_graph_config"], [472, 1, 1, "", "parse_args"], [472, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[475, 0, 0, "-", "mixed_precision"], [476, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[475, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[475, 4, 1, "", "configuration_data"], [475, 3, 1, "", "execute"], [475, 3, 1, "", "generate_config"], [475, 4, 1, "", "optimization_script"], [475, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[476, 1, 1, "", "optimize_graph"], [476, 1, 1, "", "optimize_graph_config"], [476, 1, 1, "", "parse_args"], [476, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[478, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[478, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[479, 2, 1, "", "DataloaderInterface"], [479, 2, 1, "", "Optimization"], [479, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[479, 4, 1, "", "command"], [479, 4, 1, "", "config_filename"], [479, 4, 1, "", "configuration_data"], [479, 3, 1, "", "execute"], [479, 3, 1, "", "generate_config"], [479, 4, 1, "", "optimization_script"], [479, 4, 1, "", "output_model_dir"], [479, 4, 1, "", "output_model_name"], [479, 4, 1, "", "parameters"], [479, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.pruning": [[481, 0, 0, "-", "optimize_model"], [482, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[481, 1, 1, "", "optimize_model"], [481, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[482, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning.Pruning": [[482, 4, 1, "", "configuration_data"], [482, 3, 1, "", "execute"], [482, 3, 1, "", "generate_config"], [482, 4, 1, "", "optimization_script"], [482, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tune": [[484, 0, 0, "-", "tune_model"], [485, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[484, 1, 1, "", "parse_args"], [484, 1, 1, "", "set_eager_execution"], [484, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[485, 2, 1, "", "AccuracyCriterion"], [485, 2, 1, "", "Tuning"], [485, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[485, 4, 1, "", "configuration_data"], [485, 3, 1, "", "execute"], [485, 3, 1, "", "generate_config"], [485, 4, 1, "", "optimization_script"], [485, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[486, 2, 1, "", "TuningHistory"], [486, 2, 1, "", "Watcher"], [486, 1, 1, "", "tuning_history"], [486, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[486, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[486, 3, 1, "", "history_file_modification_time"], [486, 3, 1, "", "stop"], [486, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[487, 0, 0, "-", "execute_profiling"], [488, 0, 0, "-", "factory"], [490, 0, 0, "-", "profile_model"], [491, 0, 0, "-", "profiler"], [492, 0, 0, "-", "profiling"], [494, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[487, 1, 1, "", "execute_profiling"], [487, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[488, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[488, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[490, 1, 1, "", "load_profiling_details"], [490, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[491, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[491, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[492, 2, 1, "", "DataloaderInterface"], [492, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[492, 4, 1, "", "config_filename"], [492, 4, 1, "", "config_path"], [492, 3, 1, "", "execute"], [492, 3, 1, "", "generate_config"], [492, 4, 1, "", "profiling_data"], [492, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[493, 0, 0, "-", "factory"], [495, 0, 0, "-", "profiler"], [496, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[493, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[493, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[495, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[495, 3, 1, "", "build_dataloader"], [495, 3, 1, "", "convert_nodes_to_list"], [495, 3, 1, "", "create_tf_config"], [495, 3, 1, "", "get_node_by_name"], [495, 3, 1, "", "initialize_graph"], [495, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[496, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[497, 1, 1, "", "main"], [497, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[499, 0, 0, "-", "consts"], [500, 0, 0, "-", "environment"], [501, 0, 0, "-", "exceptions"], [502, 0, 0, "-", "executor"], [503, 0, 0, "-", "expiring_dict"], [504, 0, 0, "-", "github_info"], [505, 0, 0, "-", "hw_info"], [507, 0, 0, "-", "json_serializer"], [508, 0, 0, "-", "logger"], [509, 0, 0, "-", "parser"], [510, 0, 0, "-", "proc"], [511, 0, 0, "-", "processes"], [512, 0, 0, "-", "singleton"], [513, 0, 0, "-", "status_updates"], [514, 0, 0, "-", "templates"], [517, 0, 0, "-", "utils"], [522, 0, 0, "-", "workload"], [528, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[499, 2, 1, "", "DomainFlavours"], [499, 2, 1, "", "Domains"], [499, 2, 1, "", "ExecutionStatus"], [499, 2, 1, "", "Frameworks"], [499, 2, 1, "", "OptimizationTypes"], [499, 2, 1, "", "Precisions"], [499, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[500, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[500, 3, 1, "", "clean_workloads_wip_status"], [500, 3, 1, "", "ensure_workdir_exists_and_writeable"], [500, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[501, 7, 1, "", "AccessDeniedException"], [501, 7, 1, "", "ClientErrorException"], [501, 7, 1, "", "InternalException"], [501, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[502, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[502, 4, 1, "", "additional_log_names"], [502, 3, 1, "", "call"], [502, 3, 1, "", "call_one"], [502, 3, 1, "", "is_multi_commands"], [502, 4, 1, "", "log_name"], [502, 4, 1, "", "process_duration"], [502, 3, 1, "", "refresh_workdir"], [502, 4, 1, "", "request_id"], [502, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[503, 2, 1, "", "ExpiringDict"], [503, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[503, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[504, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[504, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[505, 2, 1, "", "HWInfo"], [505, 1, 1, "", "get_bios_version"], [505, 1, 1, "", "get_distribution"], [505, 1, 1, "", "get_framework_dependency_info"], [505, 1, 1, "", "get_framework_info"], [505, 1, 1, "", "get_kernel_version"], [505, 1, 1, "", "get_number_of_sockets"], [505, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[505, 3, 1, "", "initialize"], [505, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[507, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[507, 3, 1, "", "serialize"], [507, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[508, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[509, 2, 1, "", "AccuracyParser"], [509, 2, 1, "", "BenchmarkParserFactory"], [509, 2, 1, "", "OptimizationParser"], [509, 2, 1, "", "Parser"], [509, 2, 1, "", "PerformanceParser"], [509, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[509, 4, 1, "", "patterns"], [509, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[509, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[509, 4, 1, "", "patterns"], [509, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[509, 4, 1, "", "patterns"], [509, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[509, 4, 1, "", "patterns"], [509, 3, 1, "", "process"], [509, 3, 1, "", "summarize_partial"], [509, 3, 1, "", "summarize_value"], [509, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[509, 4, 1, "", "patterns"], [509, 3, 1, "", "process"], [509, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[510, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[510, 4, 1, "", "info"], [510, 4, 1, "", "info_path"], [510, 4, 1, "", "is_ok"], [510, 4, 1, "", "output"], [510, 4, 1, "", "output_path"], [510, 3, 1, "", "remove_logs"], [510, 3, 1, "", "run"], [510, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[511, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[511, 4, 1, "", "is_ok"], [511, 3, 1, "", "remove_successful_logs"], [511, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[512, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[513, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[515, 0, 0, "-", "metric"], [516, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[515, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[515, 4, 1, "", "acc_input_model"], [515, 4, 1, "", "acc_optimized_model"], [515, 4, 1, "", "accuracy"], [515, 3, 1, "", "calculate_throughput"], [515, 3, 1, "", "insert_data"], [515, 4, 1, "", "latency"], [515, 4, 1, "", "optimization_time"], [515, 4, 1, "", "path_optimized_model"], [515, 4, 1, "", "profiling_data"], [515, 4, 1, "", "size_input_model"], [515, 4, 1, "", "size_optimized_model"], [515, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[516, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[516, 3, 1, "", "clean_logs"], [516, 3, 1, "", "clean_status"], [516, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[517, 1, 1, "", "check_module"], [517, 1, 1, "", "deprecated"], [517, 1, 1, "", "determine_ip"], [517, 1, 1, "", "export_to_csv"], [517, 1, 1, "", "filter_transforms"], [517, 1, 1, "", "get_dataset_path"], [517, 1, 1, "", "get_default_pruning_config_path"], [517, 1, 1, "", "get_file_extension"], [517, 1, 1, "", "get_framework_from_path"], [517, 1, 1, "", "get_height_width_from_size"], [517, 1, 1, "", "get_metrics_dict"], [517, 1, 1, "", "get_model_zoo_config_path"], [517, 1, 1, "", "get_model_zoo_model_path"], [517, 1, 1, "", "get_module_version"], [517, 1, 1, "", "get_predefined_config_path"], [517, 1, 1, "", "get_shape_from_transforms"], [517, 1, 1, "", "get_size"], [517, 1, 1, "", "is_dataset_file"], [517, 1, 1, "", "is_development_env"], [517, 1, 1, "", "is_hidden"], [517, 1, 1, "", "load_dataloader_config"], [517, 1, 1, "", "load_help_nc_params"], [517, 1, 1, "", "load_metrics_config"], [517, 1, 1, "", "load_model_config"], [517, 1, 1, "", "load_model_wise_params"], [517, 1, 1, "", "load_precisions_config"], [517, 1, 1, "", "load_pruning_details_config"], [517, 1, 1, "", "load_transforms_config"], [517, 1, 1, "", "load_transforms_filter_config"], [517, 1, 1, "", "normalize_domain"], [517, 1, 1, "", "normalize_framework"], [517, 1, 1, "", "normalize_string"], [517, 1, 1, "", "parse_bool_value"], [517, 1, 1, "", "parse_to_float_list"], [517, 1, 1, "", "parse_to_string_list"], [517, 1, 1, "", "parse_version"], [517, 1, 1, "", "release_tag"], [517, 1, 1, "", "replace_with_values"], [517, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[518, 0, 0, "-", "config"], [519, 0, 0, "-", "dataloader"], [520, 0, 0, "-", "evaluation"], [521, 0, 0, "-", "graph_optimization"], [523, 0, 0, "-", "mixed_precision"], [524, 0, 0, "-", "model"], [525, 0, 0, "-", "pruning"], [526, 0, 0, "-", "quantization"], [527, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[518, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[518, 3, 1, "", "dump"], [518, 3, 1, "", "get_performance_configs"], [518, 3, 1, "", "get_performance_cores_per_instance"], [518, 3, 1, "", "get_performance_num_of_instance"], [518, 3, 1, "", "initialize"], [518, 3, 1, "", "load"], [518, 3, 1, "", "process_transform"], [518, 3, 1, "", "remove_accuracy_metric"], [518, 3, 1, "", "remove_dataloader"], [518, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [518, 3, 1, "", "set_accuracy_goal"], [518, 3, 1, "", "set_accuracy_metric"], [518, 3, 1, "", "set_evaluation_dataloader"], [518, 3, 1, "", "set_evaluation_dataset_path"], [518, 3, 1, "", "set_inputs"], [518, 3, 1, "", "set_optimization_precision"], [518, 3, 1, "", "set_outputs"], [518, 3, 1, "", "set_performance_cores_per_instance"], [518, 3, 1, "", "set_performance_iterations"], [518, 3, 1, "", "set_performance_num_of_instance"], [518, 3, 1, "", "set_performance_warmup"], [518, 3, 1, "", "set_quantization_approach"], [518, 3, 1, "", "set_quantization_batch_size"], [518, 3, 1, "", "set_quantization_dataloader"], [518, 3, 1, "", "set_quantization_dataset_path"], [518, 3, 1, "", "set_quantization_sampling_size"], [518, 3, 1, "", "set_transform"], [518, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[519, 2, 1, "", "Dataloader"], [519, 2, 1, "", "Dataset"], [519, 2, 1, "", "Filter"], [519, 2, 1, "", "LabelBalance"], [519, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[519, 3, 1, "", "serialize"], [519, 3, 1, "", "set_dataset"], [519, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[519, 3, 1, "", "is_dummy"], [519, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[519, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[520, 2, 1, "", "Accuracy"], [520, 2, 1, "", "Configs"], [520, 2, 1, "", "Evaluation"], [520, 2, 1, "", "Metric"], [520, 2, 1, "", "Performance"], [520, 2, 1, "", "Postprocess"], [520, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[520, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[520, 4, 1, "", "name"], [520, 4, 1, "", "param"], [520, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema": [[520, 3, 1, "", "get_label_shift_value"]], "neural_compressor.ux.utils.workload.graph_optimization": [[521, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[521, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[523, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[523, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[524, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[524, 4, 1, "", "inputs"], [524, 4, 1, "", "outputs"], [524, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[525, 2, 1, "", "AdamOptimizer"], [525, 2, 1, "", "AdamWOptimizer"], [525, 2, 1, "", "Approach"], [525, 2, 1, "", "Criterion"], [525, 2, 1, "", "CrossEntropyLossCriterion"], [525, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [525, 2, 1, "", "KnowledgeDistillationLossCriterion"], [525, 2, 1, "", "Optimizer"], [525, 2, 1, "", "Pruning"], [525, 2, 1, "", "SGDOptimizer"], [525, 2, 1, "", "SelfKnowledgeDistillationLoss"], [525, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [525, 2, 1, "", "Train"], [525, 2, 1, "", "WeightCompressionApproach"], [525, 1, 1, "", "parse_dict_value_to_float"], [525, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[525, 3, 1, "", "serialize"], [525, 3, 1, "", "set_postprocess_transforms"]], "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach": [[525, 3, 1, "", "initialize_pruners"], [525, 3, 1, "", "serialize"], [525, 3, 1, "", "serialize_pruner"]], "neural_compressor.ux.utils.workload.quantization": [[526, 2, 1, "", "Advance"], [526, 2, 1, "", "Calibration"], [526, 2, 1, "", "Quantization"], [526, 2, 1, "", "WiseConfig"], [526, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[527, 2, 1, "", "AccCriterion"], [527, 2, 1, "", "Diagnosis"], [527, 2, 1, "", "ExitPolicy"], [527, 2, 1, "", "MultiObjectives"], [527, 2, 1, "", "Strategy"], [527, 2, 1, "", "Tuning"], [527, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[527, 4, 1, "", "objective"], [527, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[527, 3, 1, "", "set_max_trials"], [527, 3, 1, "", "set_performance_only"], [527, 3, 1, "", "set_random_seed"], [527, 3, 1, "", "set_timeout"], [527, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[528, 1, 1, "", "float_representer"], [528, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[529, 0, 0, "-", "communication"], [530, 0, 0, "-", "configuration"], [531, 0, 0, "-", "exceptions"], [533, 0, 0, "-", "router"], [534, 0, 0, "-", "server"], [537, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[529, 2, 1, "", "Message"], [529, 2, 1, "", "MessageQueue"], [529, 2, 1, "", "Request"], [529, 2, 1, "", "Response"], [529, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[529, 4, 1, "", "data"], [529, 4, 1, "", "status"], [529, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[529, 3, 1, "", "get"], [529, 3, 1, "", "post_error"], [529, 3, 1, "", "post_failure"], [529, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[530, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[530, 3, 1, "", "determine_gui_port"], [530, 3, 1, "", "determine_log_level"], [530, 3, 1, "", "determine_server_port"], [530, 3, 1, "", "determine_url_prefix"], [530, 3, 1, "", "determine_values_from_environment"], [530, 3, 1, "", "dump_token_to_file"], [530, 3, 1, "", "get_command_line_args"], [530, 3, 1, "", "get_url"], [530, 4, 1, "", "global_config_directory"], [530, 3, 1, "", "is_port_taken"], [530, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[531, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[533, 2, 1, "", "DeferredRoutingDefinition"], [533, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [533, 2, 1, "", "RealtimeRoutingDefinition"], [533, 2, 1, "", "Router"], [533, 2, 1, "", "RoutingDefinition"], [533, 1, 1, "", "find_pattern_in_graph"], [533, 1, 1, "", "get_model_graph"], [533, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[533, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[534, 1, 1, "", "allow_api_call"], [534, 1, 1, "", "block_iframe"], [534, 1, 1, "", "block_sniffing"], [534, 1, 1, "", "build_parameters"], [534, 1, 1, "", "disable_cache"], [534, 1, 1, "", "get_tls_args"], [534, 1, 1, "", "handle_api_call"], [534, 1, 1, "", "page_not_found"], [534, 1, 1, "", "require_api_token"], [534, 1, 1, "", "root"], [534, 1, 1, "", "run_server"], [534, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[535, 0, 0, "-", "benchmark"], [536, 0, 0, "-", "history_snapshot_parser"], [538, 0, 0, "-", "model"], [539, 0, 0, "-", "optimization"], [540, 0, 0, "-", "profiling"], [541, 0, 0, "-", "request_data_processor"], [542, 0, 0, "-", "response_generator"], [543, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[535, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[536, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[536, 3, 1, "", "extract_accuracy"], [536, 3, 1, "", "extract_performance"], [536, 3, 1, "", "parse_history_item"], [536, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[538, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[538, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[539, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[540, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[540, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[541, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[541, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[542, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[542, 3, 1, "", "add_refresh"], [542, 3, 1, "", "from_exception"], [542, 3, 1, "", "get_status_code_for_exception"], [542, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[543, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[543, 3, 1, "", "get_code_template"], [543, 3, 1, "", "get_config"], [543, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data", "6": "py:attribute", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contributor": [0, 1], "coven": [0, 1], "code": [0, 1, 3], "conduct": [0, 1], "our": 0, "pledg": 0, "standard": 0, "respons": 0, "scope": 0, "enforc": 0, "attribut": [0, 193, 201, 210, 239, 248, 259, 287, 312, 428], "contribut": 1, "guidelin": 1, "pull": 1, "request": [1, 442], "checklist": 1, "templat": [1, 514, 515, 516], "support": [1, 2, 3, 7, 8, 545, 549, 551, 553, 556, 558, 561, 564, 565, 566, 567, 568, 570, 573, 574, 578, 579, 581], "fx": 2, "introduct": [2, 3, 8, 546, 551, 552, 553, 556, 558, 561, 564, 565, 566, 567, 568, 570, 571, 573, 574, 577, 578, 579, 580, 581], "mode": [2, 582], "matrix": [2, 3, 8, 545, 551, 553, 556, 558, 561, 564, 565, 566, 567, 568, 570, 573, 574, 578, 581], "neural": [2, 3, 7, 26, 546, 560, 561, 570, 571, 577], "compressor": [2, 7, 546, 560, 561, 577], "get": [2, 3, 7, 8, 551, 553, 558, 564, 565, 567, 568, 570, 573, 574, 578, 581], "start": [2, 3, 7, 8, 546, 551, 553, 558, 564, 565, 567, 568, 570, 573, 574, 578, 581], "post": [2, 574], "train": [2, 5, 352, 553, 574], "static": [2, 574], "quantiz": [2, 5, 7, 28, 43, 70, 299, 336, 526, 545, 552, 554, 573, 574, 575, 582], "dynam": [2, 3, 554, 574], "awar": [2, 5, 574], "exampl": [2, 3, 4, 5, 8, 388, 547, 551, 552, 553, 555, 556, 565, 566, 567, 568, 570, 571, 574, 578, 582], "note": 2, "detail": [2, 546], "common": [2, 12, 218, 219, 220, 221, 222, 223, 224, 225, 557], "problem": 2, "architectur": [3, 4, 7, 26, 550, 561], "search": [3, 26], "basic": [3, 338, 580], "na": [3, 26, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 573], "api": [3, 7, 8, 11, 23, 551, 553, 559, 564, 565, 567, 568, 570, 573], "usag": [3, 4, 5, 578, 580], "1": [3, 546, 553, 557, 559, 562, 582], "python": [3, 7, 30, 564, 573], "yaml": [3, 547, 548, 552, 553, 558, 581], "2": [3, 23, 546, 553, 557, 559, 562, 582], "onli": 3, "advanc": 3, "custom": [3, 546, 564, 567, 580], "ptq": [4, 582], "design": [4, 5, 550, 580], "pytorch": [4, 72, 361, 450, 451, 545, 549, 553, 564, 575, 578, 579, 582], "mobilenetv2": 4, "model": [4, 7, 21, 222, 311, 312, 313, 314, 315, 316, 317, 318, 319, 392, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 524, 538, 546, 556, 566, 582], "helper": 4, "function": [4, 34, 38, 39, 46, 65, 71, 72, 94, 95, 97, 139, 168, 170, 174, 175, 177, 179, 181, 191, 199, 201, 205, 208, 209, 210, 213, 215, 216, 217, 218, 220, 223, 225, 229, 237, 239, 243, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 260, 261, 263, 264, 265, 266, 267, 275, 279, 280, 284, 289, 294, 295, 296, 298, 302, 303, 305, 306, 307, 308, 309, 314, 318, 320, 321, 324, 330, 331, 333, 334, 335, 336, 339, 347, 352, 355, 361, 362, 364, 365, 375, 376, 377, 379, 384, 386, 387, 389, 391, 394, 395, 400, 403, 404, 405, 416, 426, 443, 447, 449, 460, 461, 462, 465, 468, 472, 476, 478, 481, 484, 486, 487, 490, 496, 497, 505, 508, 513, 517, 525, 528, 529, 533, 534, 553], "secur": [6, 546, 553], "polici": [6, 580], "report": 6, "vulner": 6, "intel": [7, 546, 560, 561, 582], "instal": [7, 546, 562], "prerequisit": [7, 562], "linux": [7, 562], "jupyterlab": 7, "extens": [7, 582], "gui": 7, "system": [7, 546, 569], "requir": 7, "valid": [7, 582], "hardwar": [7, 582], "environ": [7, 500], "cpu": [7, 582], "base": 7, "64": 7, "compat": 7, "processor": 7, "gpu": 7, "built": [7, 549, 559, 564], "": 7, "xe": 7, "onnx": [7, 172, 545, 582], "multipl": [7, 567, 582], "vendor": 7, "through": [7, 582], "runtim": [7, 545, 582], "softwar": 7, "document": [7, 560], "select": 7, "public": [7, 572], "event": [7, 572], "addit": 7, "content": [7, 14, 26, 34, 38, 39, 40, 41, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 136, 138, 139, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 170, 174, 175, 176, 177, 178, 179, 180, 181, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 324, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 355, 356, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 428, 429, 430, 431, 432, 434, 436, 437, 443, 444, 446, 447, 449, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 473, 475, 476, 478, 479, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 546], "hire": 7, "adaptor": [8, 9, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], "work": [8, 574], "flow": [8, 574], "queri": [8, 73], "background": 8, "ad": 8, "new": [8, 546, 580], "backend": 8, "capabl": 8, "implement": 8, "onnxrtadaptor": 8, "class": [8, 14, 26, 39, 41, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 136, 138, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 170, 175, 176, 177, 178, 179, 180, 181, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 294, 296, 297, 298, 299, 300, 301, 302, 305, 308, 309, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 324, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 362, 363, 366, 367, 368, 369, 371, 372, 373, 374, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 421, 422, 423, 425, 428, 429, 430, 431, 432, 434, 436, 437, 444, 446, 449, 451, 452, 453, 454, 456, 457, 458, 459, 463, 467, 469, 470, 473, 475, 479, 482, 485, 486, 488, 491, 492, 493, 495, 499, 500, 502, 503, 504, 505, 507, 509, 510, 511, 512, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 529, 530, 533, 535, 536, 538, 539, 540, 541, 542, 543], "onnxrt": [10, 47, 448, 449, 549, 564, 579], "benchmark": [13, 179, 217, 363, 364, 365, 366, 382, 535, 546, 547, 573], "bleu": [14, 260, 302], "modul": [14, 34, 38, 39, 41, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 136, 138, 139, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 170, 174, 175, 176, 178, 179, 180, 181, 184, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 249, 251, 252, 253, 255, 256, 257, 258, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 279, 280, 281, 283, 284, 285, 286, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 302, 303, 305, 306, 307, 309, 311, 313, 314, 315, 317, 318, 319, 320, 321, 324, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 351, 352, 353, 355, 357, 361, 362, 363, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 421, 422, 423, 425, 426, 428, 429, 430, 431, 432, 434, 436, 437, 443, 444, 446, 447, 449, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 475, 476, 478, 479, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543], "criterion": [15, 218], "data": [16, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252], "dataload": [17, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 219, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 384, 519, 547, 548], "basedataload": 17, "dataset": [18, 199, 200, 201, 202, 203, 204, 205, 206, 237, 238, 239, 240, 241, 242, 243, 244, 385, 546, 549, 559], "transform": [19, 211, 212, 213, 214, 215, 216, 249, 250, 251, 252, 400, 559, 579], "metric": [20, 221, 260, 261, 262, 263, 264, 265, 266, 267, 302, 303, 304, 305, 306, 307, 308, 309, 391, 515, 559, 564], "optim": [22, 223, 393, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 539, 546, 568], "compon": [23, 226, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496], "experiement": 23, "deprec": 23, "0": [23, 582], "distil": [24, 253, 551, 552, 573, 582], "mixedprecis": 25, "packag": [26, 40, 61, 177, 193, 205, 209, 210, 213, 220, 231, 243, 247, 248, 250, 254, 259, 266, 282, 287, 288, 301, 308, 312, 327, 343, 348, 356, 366, 409, 414, 473], "prune": [27, 286, 297, 332, 480, 481, 482, 525, 546, 570, 571, 573, 582], "schedul": [29, 298, 300, 334, 570, 571], "strategi": [31, 32, 186, 187, 188, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 577, 580], "644ec953a7dc_pruning_support": 33, "6ece06672ed3_v1_14": 34, "6f0d0f71d92e_v1_13": 35, "9e89549a08c8_v1_11": 36, "block_mask": 37, "env": 38, "neural_compressor": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], "subpackag": [40, 49, 210, 248, 259, 276, 277, 282, 287, 301, 343, 414, 419, 433, 438, 445, 473, 489, 498, 506, 532], "kera": [41, 456], "keras_util": [42, 43], "mxnet": [44, 545, 549, 564, 579, 582], "mxnet_util": [45, 46], "util": [46, 71, 168, 174, 257, 335, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 416, 460, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528], "ox_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "calibr": 48, "submodul": [49, 61, 177, 193, 205, 209, 213, 220, 231, 243, 247, 250, 254, 259, 266, 276, 278, 282, 288, 292, 308, 322, 343, 348, 356, 366, 370, 378, 390, 409, 414, 419, 420, 424, 427, 433, 435, 438, 439, 445, 448, 450, 455, 464, 466, 471, 473, 474, 477, 480, 483, 489, 494, 498, 506, 514, 522, 532, 537], "oper": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], "activ": 50, "argmax": 51, "attent": 52, "binary_op": 53, "concat": 54, "conv": 55, "direct_q8": 56, "embed_layernorm": 57, "gather": 58, "gavgpool": 59, "gemm": 60, "lstm": 62, "matmul": 63, "maxpool": 64, "op": 65, "pad": 66, "pool": 67, "resiz": 68, "split": 69, "tensorflow": [74, 454, 455, 456, 457, 458, 459, 460, 545, 549, 553, 564, 575, 578, 579, 582], "tf_util": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "graph_convert": 75, "graph_converter_without_calib": 76, "graph_rewrit": [77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], "bf16": [77, 78], "bf16_convert": [77, 169], "gener": [79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "convert_add_to_biasadd": 79, "convert_layout": 80, "convert_leakyrelu": 81, "convert_nan_to_random": 82, "convert_placeholder_to_const": 83, "dequantize_cast_optim": 84, "dilated_contract": 85, "dummy_biasadd": 86, "expanddims_optim": 87, "fetch_weight_from_reshap": 88, "fold_batch_norm": 89, "fold_const": 90, "fuse_biasadd_add": 91, "fuse_column_wise_mul": 92, "fuse_conv_with_math": 93, "fuse_decomposed_bn": 94, "fuse_decomposed_in": 95, "fuse_gelu": 96, "fuse_layer_norm": 97, "fuse_pad_with_conv": 98, "fuse_pad_with_fp32_conv": 99, "fuse_reshape_transpos": 100, "graph_cse_optim": 101, "grappler_pass": 102, "insert_print_nod": 104, "move_squeeze_after_relu": 105, "pre_optim": 106, "remove_training_nod": 107, "rename_batch_norm": 108, "split_shared_input": 109, "strip_equivalent_nod": 110, "strip_unused_nod": 111, "switch_optim": 112, "update_ent": 113, "graph_bas": 114, "int8": [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 556, 582], "freeze_fake_qu": 116, "freeze_valu": 117, "freeze_value_without_calib": 118, "fuse_conv_redundant_dequant": 119, "fuse_conv_requant": 120, "fuse_matmul_redundant_dequant": 121, "fuse_matmul_requant": 122, "meta_op_optim": 124, "post_hostconst_convert": 125, "post_quantized_op_cs": 126, "rnn_convert": 127, "scale_propag": 128, "qdq": [129, 130, 131, 132, 146, 147, 148, 149, 150, 151, 152, 153, 154, 582], "insert_qdq_pattern": 130, "merge_duplicated_qdq": 131, "share_qdq_y_pattern": 132, "graph_util": 133, "quantize_graph": [135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161], "qat": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 582], "fake_quant": 136, "quantize_config": 138, "quantize_help": 139, "quantize_lay": [140, 141, 142, 143, 144], "optimize_lay": 141, "quantize_layer_add": 142, "quantize_layer_bas": 143, "quantize_layer_bn": 144, "quantize_wrapp": 145, "fuse_qdq_bn": 146, "fuse_qdq_concatv2": 147, "fuse_qdq_conv": 148, "fuse_qdq_deconv": 149, "fuse_qdq_in": 150, "fuse_qdq_matmul": 151, "fuse_qdq_pool": 152, "optimize_qdq": 154, "quantize_graph_bas": 155, "quantize_graph_bn": 156, "quantize_graph_concatv2": 157, "quantize_graph_conv": 158, "quantize_graph_for_intel_cpu": 159, "quantize_graph_matmul": 160, "quantize_graph_pool": 161, "quantize_graph_common": 162, "transform_graph": [163, 164, 165, 166, 167], "bias_correct": 163, "graph_transform_bas": 164, "insert_log": 166, "rerange_quantized_concat": 167, "torch_util": [169, 170, 171, 172, 173, 174, 225], "hawq_metr": 170, "symbolic_trac": 173, "algorithm": [175, 176, 177, 178], "fast_bias_correct": 176, "weight_correct": 178, "conf": [180, 181, 182, 183], "config": [180, 184, 518, 547, 548, 567], "dotdict": 181, "pythonic_config": 183, "contrib": [185, 186, 187, 188], "sigopt": [187, 577, 580], "tpe": [188, 580], "base_dataload": [189, 227], "default_dataload": [191, 229], "fetcher": [192, 230], "mxnet_dataload": [194, 232], "onnxrt_dataload": [195, 233], "pytorch_dataload": [196, 234], "sampler": [197, 235], "tensorflow_dataload": [198, 236], "bert_dataset": [199, 237], "coco_dataset": [200, 238], "dummy_dataset": [202, 240], "dummy_dataset_v2": [203, 241], "imagenet_dataset": [204, 242], "style_transfer_dataset": [206, 244], "filter": [207, 208, 209, 245, 246, 247], "coco_filt": [207, 245], "coco_transform": 211, "imagenet_transform": [212, 249], "postprocess": [214, 224], "token": [215, 251], "experiment": [217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300], "export": [254, 255, 256, 257, 556], "qlinear2qdq": 255, "torch2onnx": 256, "graph_optim": [258, 470, 471, 472, 521], "bleu_util": [261, 303], "coco_label_map": [262, 304], "coco_tool": [263, 305], "evaluate_squad": [264, 306], "f1": [265, 307], "mixed_precis": [268, 474, 475, 476, 523], "model_convers": 269, "basic_na": 270, "dyna": 271, "dynast": [272, 273, 274, 275, 276, 277, 278, 279, 280, 281], "dynas_manag": 272, "dynas_predictor": 273, "dynas_search": 274, "dynas_util": 275, "supernetwork": [277, 278, 279, 280, 281], "machine_transl": [278, 279, 280, 281], "modules_supernetwork": 279, "transformer_interfac": 280, "transformer_supernetwork": 281, "nas_util": 284, "search_algorithm": 285, "pruning_recip": [287, 288, 289, 290], "pattern": [288, 289, 290, 294, 324, 570, 571], "tile_pattern": 290, "pruning_v2": 291, "pytorch_prun": [292, 293, 294, 295, 296, 297, 298], "logger": [293, 323, 359, 508], "prune_util": 295, "pruner": [296, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "mix_precis": 310, "base_model": 311, "keras_model": 313, "mxnet_model": 315, "nets_factori": 316, "onnx_model": 317, "tensorflow_model": 318, "torch_model": 319, "object": [320, 567], "criteria": [321, 570, 571, 580], "pruner_legaci": [325, 326, 327, 328, 329, 330], "gradient_sensit": 325, "group_lasso": 326, "magnitud": 328, "pattern_lock": 329, "reg": 333, "auto_mixed_precis": 337, "bayesian": [339, 580], "conserv": 340, "exhaust": [341, 580], "hawq_v2": [342, 580], "mse": [344, 580], "mse_v2": [345, 580], "random": [346, 580], "tuning_sampl": 349, "tuning_spac": 350, "tuning_struct": 351, "collect_layer_histogram": 353, "constant": 354, "create_obj_from_config": 355, "kl_diverg": 357, "load_huggingfac": 358, "option": [360, 546, 553, 562], "ux": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543], "benchmark_model": 364, "execute_benchmark": 365, "config_gener": [367, 368, 369, 370, 371, 372, 373, 374], "benchmark_config_gener": 367, "graph_optimization_config_gener": 369, "mixed_precision_config_gener": 371, "profiling_config_gener": 372, "pruning_config_gener": 373, "quantization_config_gener": 374, "configuration_wizard": [375, 376, 377, 378, 379, 380], "configuration_pars": 375, "get_boundary_nod": 376, "get_configur": 377, "params_feed": 379, "pruning_config_pars": 380, "db_manag": [381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416], "db_model": [382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402], "benchmark_result": 383, "domain": [386, 444], "domain_flavour": 387, "framework": [389, 556, 558, 566, 573], "optimization_typ": 394, "precis": [395, 565, 575], "profil": [396, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 540, 546], "profiling_result": 397, "project": [398, 546], "pruning_detail": 399, "tuning_detail": 401, "tuning_histori": [402, 486], "db_oper": [403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413], "benchmark_api_interfac": 403, "dataset_api_interfac": 404, "diagnosis_api_interfac": 406, "dictionaries_api_interfac": 407, "examples_api_interfac": 408, "model_api_interfac": 410, "optimization_api_interfac": 411, "profiling_api_interfac": 412, "project_api_interfac": 413, "params_interfac": 415, "diagnosi": [417, 418, 419, 420, 421, 422, 423, 424, 425, 546], "factori": [418, 469, 488, 493], "onnx_diagnosi": [420, 421], "onnxrt_diagnosi": 421, "op_detail": 422, "op_entri": 423, "tensorflow_diagnosi": [424, 425], "file_brows": [426, 427], "graph": [428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 546], "collaps": 429, "edg": 430, "graph_read": 432, "node": 434, "reader": [435, 436, 437], "onnxrt_read": 436, "tensorflow_read": 437, "jobs_manag": [439, 440, 441, 442], "jobs_control_queu": 440, "manage_workspac": 443, "model_type_gett": 447, "repositori": 452, "shape": 453, "frozen_pb": 454, "meta_graph": 457, "saved_model": 459, "model_zoo": [461, 462, 463, 464, 465], "download_config": 461, "download_model": 462, "download": 463, "list_model": 465, "names_mapp": [466, 467], "execute_optim": 468, "optimize_model": [472, 476, 478, 481], "neural_coder_optim": [477, 478], "tune": [483, 484, 485, 527, 574, 580], "tune_model": 484, "execute_profil": 487, "profile_model": 490, "tensorflow_profil": [493, 494, 495, 496], "inc_bench": 497, "const": 499, "except": [501, 531], "executor": 502, "expiring_dict": 503, "github_info": 504, "hw_info": 505, "json_seri": 507, "parser": 509, "proc": 510, "process": 511, "singleton": 512, "status_upd": 513, "workdir": 516, "workload": [518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 543], "evalu": [520, 547, 553], "yaml_util": 528, "web": [529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543], "commun": 529, "configur": [530, 553, 558, 569, 573, 577, 581], "router": 533, "server": 534, "servic": [535, 536, 537, 538, 539, 540, 541, 542, 543], "history_snapshot_pars": 536, "request_data_processor": 541, "response_gener": 542, "version": 544, "ipex": 545, "refer": [545, 571], "bench": 546, "tabl": 546, "from": [546, 562], "binari": [546, 562], "sourc": [546, 562], "home": 546, "screen": 546, "creat": [546, 548], "predefin": 546, "displai": 546, "list": [546, 549, 579], "remov": 546, "develop": 546, "tab": 546, "wizard": 546, "edit": 546, "entri": 546, "inform": [546, 563], "file": [547, 548, 558, 581], "us": [547, 548], "user": [547, 548, 549, 552, 553, 559, 573, 581], "specif": [547, 548, 549], "run": 547, "how": 548, "workflow": 550, "knowledg": [551, 582], "intermedi": 551, "layer": 551, "self": 551, "defin": [552, 553], "distribut": 553, "infer": 553, "featur": [553, 558, 561, 573, 574, 578, 581], "pure": 553, "horovodrun": 553, "execut": 553, "fp32": 556, "appendix": 556, "frequent": 557, "ask": 557, "question": 557, "build": [557, 564], "issu": [557, 576], "3": [557, 562], "incompat": [559, 576], "chang": [559, 576], "between": 559, "v1": 559, "face": 559, "section": 560, "infrastructur": 561, "ai": 562, "kit": 562, "window": 562, "legal": 563, "licens": 563, "citat": 563, "trademark": 563, "singl": [564, 567], "multi": [564, 568], "mix": [565, 575], "orchestr": 568, "One": 568, "shot": 568, "network": [570, 571], "type": 571, "regular": 571, "full": 572, "49": 572, "2022": 572, "31": 572, "2021": 572, "14": 572, "2018": 572, "2020": 572, "4": 572, "style": 573, "access": 573, "fundament": 574, "approach": 574, "accuraci": [574, 580], "turn": 575, "ON": 575, "auto": 575, "dure": 575, "releas": 576, "known": 576, "prepar": 577, "platform": 577, "perform": 577, "benefit": 577, "comparison": 577, "differ": 577, "tensorboard": 578, "space": 580, "exit": 580, "travers": 580, "logic": 580, "o0": 580, "mlperf": 582, "10": 582, "torch": 582, "12": 582, "11": 582, "7": 582}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributor Covenant Code of Conduct": [[0, "contributor-covenant-code-of-conduct"], [1, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[0, "our-pledge"]], "Our Standards": [[0, "our-standards"]], "Our Responsibilities": [[0, "our-responsibilities"]], "Scope": [[0, "scope"]], "Enforcement": [[0, "enforcement"]], "Attribution": [[0, "attribution"]], "Contribution Guidelines": [[1, "contribution-guidelines"]], "Pull Request Checklist": [[1, "pull-request-checklist"]], "Pull Request Template": [[1, "pull-request-template"]], "Support": [[1, "support"]], "FX": [[2, "fx"]], "Introduction": [[2, "introduction"], [3, "introduction"], [8, "introduction"], [546, "introduction"], [551, "introduction"], [552, "introduction"], [553, "introduction"], [556, "introduction"], [558, "introduction"], [561, "introduction"], [564, "introduction"], [565, "introduction"], [566, "introduction"], [567, "introduction"], [568, "introduction"], [570, "introduction"], [571, "introduction"], [573, "introduction"], [577, "introduction"], [578, "introduction"], [579, "introduction"], [580, "introduction"], [581, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[2, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[2, "get-start"]], "Post Training Static Quantization": [[2, "post-training-static-quantization"], [574, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[2, "post-training-dynamic-quantization"], [574, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[2, "quantization-aware-training"]], "Examples": [[2, "examples"], [3, "examples"], [5, "examples"], [547, "examples"], [551, "examples"], [552, "examples"], [553, "examples"], [555, "examples"], [556, "examples"], [565, "examples"], [566, "examples"], [568, "examples"], [570, "examples"], [574, "examples"], [578, "examples"]], "Note": [[2, "note"]], "Details": [[2, "details"]], "Common Problem": [[2, "common-problem"]], "Dynamic Quantization": [[2, "dynamic-quantization"], [554, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[2, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[3, "neural-architecture-search"]], "Basic NAS": [[3, "basic-nas"]], "Dynamic NAS": [[3, "dynamic-nas"]], "NAS Support Matrix": [[3, "nas-support-matrix"]], "Get Started with NAS API": [[3, "get-started-with-nas-api"]], "Basic Usage": [[3, "basic-usage"]], "1. Python code + YAML": [[3, "python-code-yaml"]], "2. Python code only": [[3, "python-code-only"]], "Advanced Usage (Custom NAS)": [[3, "advanced-usage-custom-nas"]], "PTQ": [[4, "ptq"], [4, "id1"]], "Design": [[4, "design"], [5, "design"], [550, "design"], [580, "design"], [580, "id1"], [580, "id3"], [580, "id5"], [580, "id7"], [580, "id9"], [580, "id11"], [580, "id13"], [580, "id15"], [580, "id17"]], "PyTorch Usage": [[4, "pytorch-usage"]], "MobileNetV2 Model Architecture": [[4, "mobilenetv2-model-architecture"]], "Helper Functions": [[4, "helper-functions"]], "Example": [[4, "example"], [567, "example"]], "Quantization-aware Training": [[5, "quantization-aware-training"]], "Usage": [[5, "usage"], [578, "usage"], [578, "id1"], [580, "usage"], [580, "id2"], [580, "id4"], [580, "id6"], [580, "id8"], [580, "id10"], [580, "id12"], [580, "id14"], [580, "id16"], [580, "id18"]], "Security Policy": [[6, "security-policy"]], "Report a Vulnerability": [[6, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[7, "intel-neural-compressor"]], "Installation": [[7, "installation"], [562, "installation"]], "Prerequisites": [[7, "prerequisites"], [562, "prerequisites"], [562, "id1"]], "Install on Linux": [[7, "install-on-linux"]], "Getting Started": [[7, "getting-started"]], "Quantization with Python API": [[7, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[7, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[7, "quantization-with-gui"]], "System Requirements": [[7, "system-requirements"]], "Validated Hardware Environment": [[7, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[7, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[7, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[7, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[7, "validated-software-environment"]], "Validated Models": [[7, "validated-models"], [582, "validated-models"]], "Documentation": [[7, "documentation"]], "Selected Publications/Events": [[7, "selected-publications-events"]], "Additional Content": [[7, "additional-content"]], "Hiring": [[7, "hiring"]], "Adaptor": [[8, "adaptor"], [9, "adaptor"]], "Adaptor Support Matrix": [[8, "adaptor-support-matrix"]], "Working Flow": [[8, "working-flow"], [574, "working-flow"]], "Get Start with Adaptor API": [[8, "get-start-with-adaptor-api"]], "Query API": [[8, "query-api"]], "Background": [[8, "background"]], "Query API Introduction": [[8, "query-api-introduction"]], "Example of Adding a New Backend Support": [[8, "example-of-adding-a-new-backend-support"]], "Capability": [[8, "capability"]], "Implement ONNXRTAdaptor Class": [[8, "implement-onnxrtadaptor-class"]], "ONNXRT": [[10, "onnxrt"], [549, "onnxrt"], [564, "onnxrt"], [579, "onnxrt"]], "APIs": [[11, "apis"]], "Common": [[12, "common"]], "Benchmark": [[13, "benchmark"], [573, "benchmark"]], "BLEU": [[14, "module-neural_compressor.experimental.metric.bleu"]], "Module Contents": [[14, "module-contents"], [34, "module-contents"], [38, "module-contents"], [39, "module-contents"], [41, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [77, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [136, "module-contents"], [138, "module-contents"], [139, "module-contents"], [142, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [170, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [184, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [211, "module-contents"], [212, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [260, "module-contents"], [261, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [302, "module-contents"], [303, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [309, "module-contents"], [311, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [324, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [355, "module-contents"], [357, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [425, "module-contents"], [426, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [434, "module-contents"], [436, "module-contents"], [437, "module-contents"], [443, "module-contents"], [444, "module-contents"], [446, "module-contents"], [447, "module-contents"], [449, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"], [456, "module-contents"], [457, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [465, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [472, "module-contents"], [475, "module-contents"], [476, "module-contents"], [478, "module-contents"], [479, "module-contents"], [481, "module-contents"], [482, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [523, "module-contents"], [524, "module-contents"], [525, "module-contents"], [526, "module-contents"], [527, "module-contents"], [528, "module-contents"], [529, "module-contents"], [530, "module-contents"], [531, "module-contents"], [533, "module-contents"], [534, "module-contents"], [535, "module-contents"], [536, "module-contents"], [538, "module-contents"], [539, "module-contents"], [540, "module-contents"], [541, "module-contents"], [542, "module-contents"], [543, "module-contents"]], "Classes": [[14, "classes"], [26, "classes"], [39, "classes"], [41, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [77, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [136, "classes"], [138, "classes"], [142, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [166, "classes"], [167, "classes"], [170, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [184, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [226, "classes"], [227, "classes"], [229, "classes"], [230, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [263, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [279, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [294, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [305, "classes"], [308, "classes"], [309, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [324, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [356, "classes"], [357, "classes"], [362, "classes"], [363, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [417, "classes"], [418, "classes"], [421, "classes"], [422, "classes"], [423, "classes"], [425, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [434, "classes"], [436, "classes"], [437, "classes"], [444, "classes"], [446, "classes"], [449, "classes"], [451, "classes"], [452, "classes"], [453, "classes"], [454, "classes"], [456, "classes"], [457, "classes"], [458, "classes"], [459, "classes"], [463, "classes"], [467, "classes"], [469, "classes"], [470, "classes"], [473, "classes"], [475, "classes"], [479, "classes"], [482, "classes"], [485, "classes"], [486, "classes"], [488, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [495, "classes"], [499, "classes"], [500, "classes"], [502, "classes"], [503, "classes"], [504, "classes"], [505, "classes"], [507, "classes"], [509, "classes"], [510, "classes"], [511, "classes"], [512, "classes"], [515, "classes"], [516, "classes"], [518, "classes"], [519, "classes"], [520, "classes"], [521, "classes"], [523, "classes"], [524, "classes"], [525, "classes"], [526, "classes"], [527, "classes"], [529, "classes"], [530, "classes"], [533, "classes"], [535, "classes"], [536, "classes"], [538, "classes"], [539, "classes"], [540, "classes"], [541, "classes"], [542, "classes"], [543, "classes"]], "Criterion": [[15, "criterion"]], "Data": [[16, "data"]], "Dataloader": [[17, "dataloader"]], "BaseDataLoader": [[17, "basedataloader"]], "dataloaders": [[17, "dataloaders"]], "Datasets": [[18, "datasets"]], "Transforms": [[19, "transforms"]], "Metric": [[20, "metric"]], "Model": [[21, "model"], [566, "model"]], "Optimizer": [[22, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[23, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[24, "distillation"], [551, "distillation"], [573, "distillation"]], "MixedPrecision": [[25, "mixedprecision"]], "Neural architecture search (NAS)": [[26, "neural-architecture-search-nas"]], "Package Contents": [[26, "package-contents"], [40, "package-contents"], [61, "package-contents"], [177, "package-contents"], [193, "package-contents"], [205, "package-contents"], [209, "package-contents"], [210, "package-contents"], [213, "package-contents"], [220, "package-contents"], [231, "package-contents"], [243, "package-contents"], [247, "package-contents"], [248, "package-contents"], [250, "package-contents"], [254, "package-contents"], [259, "package-contents"], [266, "package-contents"], [282, "package-contents"], [287, "package-contents"], [288, "package-contents"], [301, "package-contents"], [308, "package-contents"], [312, "package-contents"], [327, "package-contents"], [343, "package-contents"], [348, "package-contents"], [356, "package-contents"], [366, "package-contents"], [409, "package-contents"], [414, "package-contents"], [473, "package-contents"]], "Pruning": [[27, "pruning"], [546, "pruning"], [570, "pruning"], [573, "pruning"]], "Quantization": [[28, "quantization"], [573, "quantization"], [574, "quantization"]], "Scheduler": [[29, "scheduler"]], "Pythonic": [[30, "pythonic"]], "Strategy": [[31, "strategy"]], "Strategies": [[32, "strategies"]], "644ec953a7dc_pruning_support": [[33, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[34, "module-6ece06672ed3_v1_14"]], "Functions": [[34, "functions"], [38, "functions"], [39, "functions"], [46, "functions"], [65, "functions"], [71, "functions"], [72, "functions"], [94, "functions"], [95, "functions"], [97, "functions"], [139, "functions"], [168, "functions"], [170, "functions"], [174, "functions"], [175, "functions"], [177, "functions"], [179, "functions"], [181, "functions"], [191, "functions"], [199, "functions"], [201, "functions"], [205, "functions"], [208, "functions"], [209, "functions"], [210, "functions"], [213, "functions"], [215, "functions"], [216, "functions"], [217, "functions"], [218, "functions"], [220, "functions"], [223, "functions"], [225, "functions"], [229, "functions"], [237, "functions"], [239, "functions"], [243, "functions"], [246, "functions"], [247, "functions"], [248, "functions"], [250, "functions"], [251, "functions"], [252, "functions"], [254, "functions"], [255, "functions"], [256, "functions"], [257, "functions"], [260, "functions"], [261, "functions"], [263, "functions"], [264, "functions"], [265, "functions"], [266, "functions"], [267, "functions"], [275, "functions"], [279, "functions"], [280, "functions"], [284, "functions"], [289, "functions"], [294, "functions"], [295, "functions"], [296, "functions"], [298, "functions"], [302, "functions"], [303, "functions"], [305, "functions"], [306, "functions"], [307, "functions"], [308, "functions"], [309, "functions"], [314, "functions"], [318, "functions"], [320, "functions"], [321, "functions"], [324, "functions"], [330, "functions"], [331, "functions"], [333, "functions"], [334, "functions"], [335, "functions"], [336, "functions"], [339, "functions"], [347, "functions"], [352, "functions"], [355, "functions"], [361, "functions"], [362, "functions"], [364, "functions"], [365, "functions"], [375, "functions"], [376, "functions"], [377, "functions"], [379, "functions"], [384, "functions"], [386, "functions"], [387, "functions"], [389, "functions"], [391, "functions"], [394, "functions"], [395, "functions"], [400, "functions"], [403, "functions"], [404, "functions"], [405, "functions"], [416, "functions"], [426, "functions"], [443, "functions"], [447, "functions"], [449, "functions"], [460, "functions"], [461, "functions"], [462, "functions"], [465, "functions"], [468, "functions"], [472, "functions"], [476, "functions"], [478, "functions"], [481, "functions"], [484, "functions"], [486, "functions"], [487, "functions"], [490, "functions"], [496, "functions"], [497, "functions"], [505, "functions"], [508, "functions"], [513, "functions"], [517, "functions"], [525, "functions"], [528, "functions"], [529, "functions"], [533, "functions"], [534, "functions"]], "6f0d0f71d92e_v1_13": [[35, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[36, "module-9e89549a08c8_v1_11"]], "block_mask": [[37, "module-block_mask"]], "env": [[38, "module-env"]], "neural_compressor.adaptor.adaptor": [[39, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[40, "module-neural_compressor.adaptor"]], "Subpackages": [[40, "subpackages"], [49, "subpackages"], [210, "subpackages"], [248, "subpackages"], [259, "subpackages"], [276, "subpackages"], [277, "subpackages"], [282, "subpackages"], [287, "subpackages"], [301, "subpackages"], [343, "subpackages"], [414, "subpackages"], [419, "subpackages"], [433, "subpackages"], [438, "subpackages"], [445, "subpackages"], [473, "subpackages"], [489, "subpackages"], [498, "subpackages"], [506, "subpackages"], [532, "subpackages"]], "neural_compressor.adaptor.keras": [[41, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils": [[42, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[43, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[44, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[45, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[46, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[47, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[48, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[49, "module-neural_compressor.adaptor.ox_utils"]], "Submodules": [[49, "submodules"], [61, "submodules"], [177, "submodules"], [193, "submodules"], [205, "submodules"], [209, "submodules"], [213, "submodules"], [220, "submodules"], [231, "submodules"], [243, "submodules"], [247, "submodules"], [250, "submodules"], [254, "submodules"], [259, "submodules"], [266, "submodules"], [276, "submodules"], [278, "submodules"], [282, "submodules"], [288, "submodules"], [292, "submodules"], [308, "submodules"], [322, "submodules"], [343, "submodules"], [348, "submodules"], [356, "submodules"], [366, "submodules"], [370, "submodules"], [378, "submodules"], [390, "submodules"], [409, "submodules"], [414, "submodules"], [419, "submodules"], [420, "submodules"], [424, "submodules"], [427, "submodules"], [433, "submodules"], [435, "submodules"], [438, "submodules"], [439, "submodules"], [445, "submodules"], [448, "submodules"], [450, "submodules"], [455, "submodules"], [464, "submodules"], [466, "submodules"], [471, "submodules"], [473, "submodules"], [474, "submodules"], [477, "submodules"], [480, "submodules"], [483, "submodules"], [489, "submodules"], [494, "submodules"], [498, "submodules"], [506, "submodules"], [514, "submodules"], [522, "submodules"], [532, "submodules"], [537, "submodules"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[50, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[51, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[52, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[53, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[54, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[55, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[56, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[57, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[58, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[59, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[60, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[61, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[62, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[63, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[64, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[65, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[66, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[67, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[68, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[69, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[70, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[71, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[72, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[73, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[74, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[75, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[76, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[133, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[134, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[162, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[163, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[164, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[165, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[166, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[167, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[168, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[169, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[170, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[171, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[172, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[173, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[174, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[175, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[176, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[177, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[178, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[179, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[180, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[181, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[182, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[183, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[184, "module-neural_compressor.config"]], "neural_compressor.contrib": [[185, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[186, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[187, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[188, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[189, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[190, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[191, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[192, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[193, "module-neural_compressor.data.dataloaders"]], "Attributes": [[193, "attributes"], [201, "attributes"], [210, "attributes"], [239, "attributes"], [248, "attributes"], [259, "attributes"], [287, "attributes"], [312, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[194, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[195, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[196, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[197, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[198, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[199, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[200, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[201, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[202, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[203, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[204, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[205, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[206, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[207, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[208, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[209, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[210, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[211, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[212, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[213, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[214, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[215, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[216, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[217, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[218, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[219, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[220, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[221, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[222, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[223, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[224, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[225, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[226, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[230, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[231, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[235, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[237, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[238, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[239, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[240, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[241, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[242, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[243, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[244, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[245, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[246, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[247, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[248, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[249, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[250, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[251, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[252, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[253, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[254, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[255, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.torch2onnx": [[256, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[257, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[258, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[259, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[260, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[261, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[262, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[263, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[264, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[265, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[266, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[267, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[268, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[269, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[270, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[271, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[272, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[273, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[274, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[275, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[276, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[277, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[278, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[279, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[280, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[281, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "neural_compressor.experimental.nas": [[282, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[283, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[284, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[285, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[286, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[287, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[290, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[291, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[292, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[293, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[294, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[295, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[296, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[297, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[298, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[299, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[300, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[301, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[302, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[303, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[304, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[305, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[306, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[307, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[308, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[309, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[310, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[311, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[312, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[313, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[314, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[315, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[316, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[317, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[318, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[319, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[320, "module-neural_compressor.objective"]], "neural_compressor.pruner.criteria": [[321, "module-neural_compressor.pruner.criteria"]], "neural_compressor.pruner": [[322, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[323, "module-neural_compressor.pruner.logger"]], "neural_compressor.pruner.patterns": [[324, "module-neural_compressor.pruner.patterns"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[325, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[326, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[327, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[328, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[329, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[330, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "neural_compressor.pruner.pruners": [[331, "module-neural_compressor.pruner.pruners"]], "neural_compressor.pruner.pruning": [[332, "module-neural_compressor.pruner.pruning"]], "neural_compressor.pruner.regs": [[333, "module-neural_compressor.pruner.regs"]], "neural_compressor.pruner.schedulers": [[334, "module-neural_compressor.pruner.schedulers"]], "neural_compressor.pruner.utils": [[335, "module-neural_compressor.pruner.utils"]], "neural_compressor.quantization": [[336, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[337, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[338, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[339, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[340, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[341, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[342, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[343, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[344, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[345, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[346, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[347, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils": [[348, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[349, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[350, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[351, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.training": [[352, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[353, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[354, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[355, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[356, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[357, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[358, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[359, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[360, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[361, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[362, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[363, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[364, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[365, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[366, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[367, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[368, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[369, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[370, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[371, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[372, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[373, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[374, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[375, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[376, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[377, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[378, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[379, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[380, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[381, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[382, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[383, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[384, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[385, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[386, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[387, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[388, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[389, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[390, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[391, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[392, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[393, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[394, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[395, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[396, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[397, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[398, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[399, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[400, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[401, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[402, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[403, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[404, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[405, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[408, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[409, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[412, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[413, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[414, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[415, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[416, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[417, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[418, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[419, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[420, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[421, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[422, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[423, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[424, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[425, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[426, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[427, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[428, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[429, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[430, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[431, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[432, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[433, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[434, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[435, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[436, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[437, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[438, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[439, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[440, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[441, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[442, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[443, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[444, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[445, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[446, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[447, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[448, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[449, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[450, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[451, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[452, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[453, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[454, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[455, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[456, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[457, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[458, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[459, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[460, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[461, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[462, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[463, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[464, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[465, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[466, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[467, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[468, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[469, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[470, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[471, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[472, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[473, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[474, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[475, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[476, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[477, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[478, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[479, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[480, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[481, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[482, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[483, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[484, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[485, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[486, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[487, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[488, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[489, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[490, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[491, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[492, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[493, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[494, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[495, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[496, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[497, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[498, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[499, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[500, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[501, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[502, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[503, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[504, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[505, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[506, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[507, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[508, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[509, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[510, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[511, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[512, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[513, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[514, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[515, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[516, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[517, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[518, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[519, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[520, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[521, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[522, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[523, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[524, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[525, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[526, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[527, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[528, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[529, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[530, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[531, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[532, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[533, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[534, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[535, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[536, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[537, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[538, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[539, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[540, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[541, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[542, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[543, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[544, "module-neural_compressor.version"]], "Quantization Support Matrix": [[545, "quantization-support-matrix"]], "TensorFlow": [[545, "tensorflow"], [549, "tensorflow"], [564, "tensorflow"], [579, "tensorflow"]], "PyTorch": [[545, "pytorch"], [549, "pytorch"], [564, "pytorch"], [575, "pytorch"]], "PyTorch IPEX": [[545, "pytorch-ipex"]], "MXNet": [[545, "mxnet"], [549, "mxnet"], [564, "mxnet"], [579, "mxnet"]], "ONNX Runtime": [[545, "onnx-runtime"]], "Reference": [[545, "reference"], [571, "reference"]], "Intel\u00ae Neural Compressor Bench": [[546, "intel-neural-compressor-bench"]], "Table of Contents": [[546, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[546, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[546, "option-1-install-from-binary"]], "Option 2: Install from Source": [[546, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[546, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[546, "home-screen"]], "Create New Project": [[546, "create-new-project"]], "Predefined Model": [[546, "predefined-model"]], "Custom Model": [[546, "custom-model"]], "Display Model Graph": [[546, "display-model-graph"]], "Project List": [[546, "project-list"]], "Remove Project": [[546, "remove-project"]], "Develop Project": [[546, "develop-project"]], "Optimization Tab": [[546, "optimization-tab"]], "Optimization Table": [[546, "optimization-table"]], "Optimization Wizard": [[546, "optimization-wizard"]], "Editing Optimization Entries": [[546, "editing-optimization-entries"]], "Optimization Details": [[546, "optimization-details"]], "Benchmark Tab": [[546, "benchmark-tab"]], "Benchmark Table": [[546, "benchmark-table"]], "Benchmark Wizard": [[546, "benchmark-wizard"]], "Editing Benchmark Entries": [[546, "editing-benchmark-entries"]], "Benchmark Details": [[546, "benchmark-details"]], "Profiling Tab": [[546, "profiling-tab"]], "Profiling Table": [[546, "profiling-table"]], "Profiling Wizard": [[546, "profiling-wizard"]], "Editing Profiling Entries": [[546, "editing-profiling-entries"]], "Profiling Details": [[546, "profiling-details"]], "Diagnosis Tab": [[546, "diagnosis-tab"]], "Dataset Tab": [[546, "dataset-tab"]], "Dataset List": [[546, "dataset-list"]], "Dataset Wizard": [[546, "dataset-wizard"]], "Dataset Details": [[546, "dataset-details"]], "Custom Dataset": [[546, "custom-dataset"]], "Project Information": [[546, "project-information"]], "System Information": [[546, "system-information"]], "Security": [[546, "security"], [553, "security"]], "Benchmarking": [[547, "benchmarking"]], "Config evaluation filed in a yaml file": [[547, "config-evaluation-filed-in-a-yaml-file"]], "Use a user-specific dataloader to run benchmark": [[547, "use-a-user-specific-dataloader-to-run-benchmark"]], "DataLoader": [[548, "dataloader"]], "How to use it": [[548, "how-to-use-it"]], "Config dataloader in a yaml file": [[548, "config-dataloader-in-a-yaml-file"]], "Create a user-specific dataloader": [[548, "create-a-user-specific-dataloader"]], "Dataset": [[549, "dataset"]], "Built-in dataset support list": [[549, "built-in-dataset-support-list"]], "User-specific dataset": [[549, "user-specific-dataset"]], "Architecture": [[550, "architecture"], [561, "architecture"]], "Workflow": [[550, "workflow"]], "Knowledge Distillation": [[551, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[551, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[551, "self-distillation"]], "Distillation Support Matrix": [[551, "distillation-support-matrix"]], "Get Started with Distillation API": [[551, "get-started-with-distillation-api"]], "Distillation for Quantization": [[552, "distillation-for-quantization"]], "User-defined yaml": [[552, "user-defined-yaml"]], "Distributed Training and Inference (Evaluation)": [[553, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[553, "supported-feature-matrix"], [558, "supported-feature-matrix"], [561, "supported-feature-matrix"], [573, "supported-feature-matrix"], [574, "supported-feature-matrix"], [578, "supported-feature-matrix"], [581, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[553, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[553, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[553, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[553, "horovodrun-execution"]], "PyTorch Examples:": [[553, "pytorch-examples"]], "TensorFlow Examples:": [[553, "tensorflow-examples"]], "Export": [[556, "export"]], "Supported Framework Model Matrix": [[556, "supported-framework-model-matrix"], [566, "supported-framework-model-matrix"]], "FP32 Model Export": [[556, "fp32-model-export"]], "INT8 Model Export": [[556, "int8-model-export"]], "Appendix": [[556, "appendix"]], "Frequently Asked Questions": [[557, "frequently-asked-questions"]], "Common Build Issues": [[557, "common-build-issues"]], "Issue 1:": [[557, "issue-1"]], "Issue 2:": [[557, "issue-2"]], "Issue 3:": [[557, "issue-3"]], "Framework YAML Configuration Files": [[558, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[558, "get-started-with-framework-yaml-files"]], "Incompatible changes between v1.2 and v1.1": [[559, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[559, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[559, "built-in-transform-dataset-metric-apis"]], "Intel\u00ae Neural Compressor Documentation": [[560, "intel-neural-compressor-documentation"]], "Sections": [[560, "sections"]], "Infrastructure of Intel\u00ae Neural Compressor": [[561, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[562, "linux-installation"]], "Option 1 Install from binary": [[562, "option-1-install-from-binary"], [562, "id2"]], "Option 2 Install from source": [[562, "option-2-install-from-source"], [562, "id3"]], "Option 3 Install from AI Kit": [[562, "option-3-install-from-ai-kit"]], "Windows Installation": [[562, "windows-installation"]], "Legal Information": [[563, "legal-information"]], "License": [[563, "license"]], "Citation": [[563, "citation"]], "Trademarks": [[563, "trademarks"]], "Metrics": [[564, "metrics"]], "Supported Built-in Metric Matrix": [[564, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[564, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[564, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[564, "build-custom-metric-with-python-api"]], "Mixed Precision": [[565, "mixed-precision"]], "Mixed Precision Support Matrix": [[565, "mixed-precision-support-matrix"]], "Get start with Mixed Precision API": [[565, "get-start-with-mixed-precision-api"]], "Objective": [[567, "objective"]], "Single Objective": [[567, "single-objective"]], "Multiple Objectives": [[567, "multiple-objectives"]], "Objective Support Matrix": [[567, "objective-support-matrix"]], "Get Start with Objective API": [[567, "get-start-with-objective-api"]], "Config Single Objective": [[567, "config-single-objective"]], "Config Multiple Objectives": [[567, "config-multiple-objectives"]], "Config Custom Objective": [[567, "config-custom-objective"]], "Optimization Orchestration": [[568, "optimization-orchestration"]], "One-shot": [[568, "one-shot"]], "Multi-shot": [[568, "multi-shot"]], "Orchestration Support Matrix": [[568, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[568, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[569, "system-configuration"]], "Neural Network Pruning": [[570, "neural-network-pruning"], [571, "neural-network-pruning"]], "Pruning Patterns": [[570, "pruning-patterns"], [571, "pruning-patterns"]], "Pruning Criteria": [[570, "pruning-criteria"], [571, "pruning-criteria"]], "Pruning Schedule": [[570, "pruning-schedule"], [571, "pruning-schedule"]], "Pruning Support Matrix": [[570, "pruning-support-matrix"]], "Get Started with Pruning API": [[570, "get-started-with-pruning-api"]], "Pruning Type": [[571, "pruning-type"]], "Regularization": [[571, "regularization"]], "Pruning Examples": [[571, "pruning-examples"]], "Full Publications/Events (49)": [[572, "full-publications-events-49"]], "2022 (31)": [[572, "id1"]], "2021 (14)": [[572, "id2"]], "2018 - 2020 (4)": [[572, "id3"]], "Pythonic Style Access for Configurations": [[573, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[573, "pythonic-api-for-user-configurations"], [573, "id1"]], "Pythonic API for Framework Configurations": [[573, "pythonic-api-for-framework-configurations"], [573, "id2"]], "Get Started with Pythonic API for Configurations": [[573, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[573, "nas"]], "Quantization Introduction": [[574, "quantization-introduction"]], "Quantization Fundamentals": [[574, "quantization-fundamentals"]], "Quantization Approaches": [[574, "quantization-approaches"]], "Quantization Aware Training": [[574, "quantization-aware-training"]], "Accuracy Aware Tuning": [[574, "accuracy-aware-tuning"]], "Get Started": [[574, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[575, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[575, "tensorflow"]], "Release": [[576, "release"]], "Known Issues": [[576, "known-issues"]], "Incompatible Changes": [[576, "incompatible-changes"]], "SigOpt Strategy": [[577, "sigopt-strategy"]], "Preparation": [[577, "preparation"]], "SigOpt Platform": [[577, "sigopt-platform"]], "Neural Compressor Configuration": [[577, "neural-compressor-configuration"]], "Performance": [[577, "performance"]], "Benefit of SigOpt Strategy": [[577, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[577, "performance-comparison-of-different-strategies"]], "TensorBoard": [[578, "tensorboard"]], "Get Started with TensorBoard": [[578, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[578, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[578, "tensorflow-tensorboard"]], "PyTorch Examples": [[578, "pytorch-examples"]], "TensorFlow Examples": [[578, "tensorflow-examples"]], "Transform": [[579, "transform"]], "Transform Support List": [[579, "transform-support-list"]], "Pytorch": [[579, "pytorch"]], "Tuning Strategies": [[580, "tuning-strategies"]], "Strategy Design": [[580, "strategy-design"]], "Tuning Space": [[580, "tuning-space"]], "Exit Policy": [[580, "exit-policy"]], "Accuracy Criteria": [[580, "accuracy-criteria"]], "Traverse": [[580, "traverse"]], "Traverse Logic": [[580, "traverse-logic"]], "O0": [[580, "o0"]], "Basic": [[580, "basic"]], "MSE": [[580, "mse"]], "MSE_V2": [[580, "mse-v2"]], "HAWQ_V2": [[580, "hawq-v2"]], "Bayesian": [[580, "bayesian"]], "Exhaustive": [[580, "exhaustive"]], "Random": [[580, "random"]], "SigOpt": [[580, "sigopt"]], "TPE": [[580, "tpe"]], "Customize a New Tuning Strategy": [[580, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[581, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[581, "get-started-with-user-yaml-files"]], "Validated MLPerf Models": [[582, "validated-mlperf-models"]], "Validated Quantization Examples": [[582, "validated-quantization-examples"]], "TensorFlow models with TensorFlow 2.10.0": [[582, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch models with Torch 1.12.1+cpu in PTQ mode": [[582, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch models with Torch 1.12.1+cpu in QAT mode": [[582, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[582, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[582, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet models with MXNet 1.7.0": [[582, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[582, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[582, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 models on multiple hardware through ONNX Runtime": [[582, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"bleu (class in neural_compressor.experimental.metric.bleu)": [[14, "neural_compressor.experimental.metric.bleu.BLEU"], [260, "neural_compressor.experimental.metric.bleu.BLEU"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[14, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [260, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "module": [[14, "module-neural_compressor.experimental.metric.bleu"], [33, "module-644ec953a7dc_pruning_support"], [34, "module-6ece06672ed3_v1_14"], [35, "module-6f0d0f71d92e_v1_13"], [36, "module-9e89549a08c8_v1_11"], [37, "module-block_mask"], [38, "module-env"], [39, "module-neural_compressor.adaptor.adaptor"], [40, "module-neural_compressor.adaptor"], [41, "module-neural_compressor.adaptor.keras"], [42, "module-neural_compressor.adaptor.keras_utils"], [43, "module-neural_compressor.adaptor.keras_utils.quantizer"], [44, "module-neural_compressor.adaptor.mxnet"], [45, "module-neural_compressor.adaptor.mxnet_utils"], [46, "module-neural_compressor.adaptor.mxnet_utils.util"], [47, "module-neural_compressor.adaptor.onnxrt"], [48, "module-neural_compressor.adaptor.ox_utils.calibration"], [49, "module-neural_compressor.adaptor.ox_utils"], [50, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [51, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [52, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [53, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [54, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [55, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [56, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [57, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [58, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [59, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [60, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [61, "module-neural_compressor.adaptor.ox_utils.operators"], [62, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [63, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [64, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [65, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [66, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [67, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [68, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [69, "module-neural_compressor.adaptor.ox_utils.operators.split"], [70, "module-neural_compressor.adaptor.ox_utils.quantizer"], [71, "module-neural_compressor.adaptor.ox_utils.util"], [72, "module-neural_compressor.adaptor.pytorch"], [73, "module-neural_compressor.adaptor.query"], [74, "module-neural_compressor.adaptor.tensorflow"], [75, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [76, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [133, "module-neural_compressor.adaptor.tf_utils.graph_util"], [134, "module-neural_compressor.adaptor.tf_utils"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [162, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [163, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [164, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [165, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [166, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [167, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [168, "module-neural_compressor.adaptor.tf_utils.util"], [169, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [170, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [171, "module-neural_compressor.adaptor.torch_utils"], [172, "module-neural_compressor.adaptor.torch_utils.onnx"], [173, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [174, "module-neural_compressor.adaptor.torch_utils.util"], [175, "module-neural_compressor.algorithm.algorithm"], [176, "module-neural_compressor.algorithm.fast_bias_correction"], [177, "module-neural_compressor.algorithm"], [178, "module-neural_compressor.algorithm.weight_correction"], [179, "module-neural_compressor.benchmark"], [180, "module-neural_compressor.conf.config"], [181, "module-neural_compressor.conf.dotdict"], [182, "module-neural_compressor.conf"], [183, "module-neural_compressor.conf.pythonic_config"], [184, "module-neural_compressor.config"], [185, "module-neural_compressor.contrib"], [186, "module-neural_compressor.contrib.strategy"], [187, "module-neural_compressor.contrib.strategy.sigopt"], [188, "module-neural_compressor.contrib.strategy.tpe"], [189, "module-neural_compressor.data.dataloaders.base_dataloader"], [190, "module-neural_compressor.data.dataloaders.dataloader"], [191, "module-neural_compressor.data.dataloaders.default_dataloader"], [192, "module-neural_compressor.data.dataloaders.fetcher"], [193, "module-neural_compressor.data.dataloaders"], [194, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [195, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [196, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [197, "module-neural_compressor.data.dataloaders.sampler"], [198, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [199, "module-neural_compressor.data.datasets.bert_dataset"], [200, "module-neural_compressor.data.datasets.coco_dataset"], [201, "module-neural_compressor.data.datasets.dataset"], [202, "module-neural_compressor.data.datasets.dummy_dataset"], [203, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [204, "module-neural_compressor.data.datasets.imagenet_dataset"], [205, "module-neural_compressor.data.datasets"], [206, "module-neural_compressor.data.datasets.style_transfer_dataset"], [207, "module-neural_compressor.data.filters.coco_filter"], [208, "module-neural_compressor.data.filters.filter"], [209, "module-neural_compressor.data.filters"], [210, "module-neural_compressor.data"], [211, "module-neural_compressor.data.transforms.coco_transform"], [212, "module-neural_compressor.data.transforms.imagenet_transform"], [213, "module-neural_compressor.data.transforms"], [214, "module-neural_compressor.data.transforms.postprocess"], [215, "module-neural_compressor.data.transforms.tokenization"], [216, "module-neural_compressor.data.transforms.transform"], [217, "module-neural_compressor.experimental.benchmark"], [218, "module-neural_compressor.experimental.common.criterion"], [219, "module-neural_compressor.experimental.common.dataloader"], [220, "module-neural_compressor.experimental.common"], [221, "module-neural_compressor.experimental.common.metric"], [222, "module-neural_compressor.experimental.common.model"], [223, "module-neural_compressor.experimental.common.optimizer"], [224, "module-neural_compressor.experimental.common.postprocess"], [225, "module-neural_compressor.experimental.common.torch_utils"], [226, "module-neural_compressor.experimental.component"], [227, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [228, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [229, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [230, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [231, "module-neural_compressor.experimental.data.dataloaders"], [232, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [233, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [234, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [235, "module-neural_compressor.experimental.data.dataloaders.sampler"], [236, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [237, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [238, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [239, "module-neural_compressor.experimental.data.datasets.dataset"], [240, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [241, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [242, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [243, "module-neural_compressor.experimental.data.datasets"], [244, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [245, "module-neural_compressor.experimental.data.filters.coco_filter"], [246, "module-neural_compressor.experimental.data.filters.filter"], [247, "module-neural_compressor.experimental.data.filters"], [248, "module-neural_compressor.experimental.data"], [249, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [250, "module-neural_compressor.experimental.data.transforms"], [251, "module-neural_compressor.experimental.data.transforms.tokenization"], [252, "module-neural_compressor.experimental.data.transforms.transform"], [253, "module-neural_compressor.experimental.distillation"], [254, "module-neural_compressor.experimental.export"], [255, "module-neural_compressor.experimental.export.qlinear2qdq"], [256, "module-neural_compressor.experimental.export.torch2onnx"], [257, "module-neural_compressor.experimental.export.utils"], [258, "module-neural_compressor.experimental.graph_optimization"], [259, "module-neural_compressor.experimental"], [260, "module-neural_compressor.experimental.metric.bleu"], [261, "module-neural_compressor.experimental.metric.bleu_util"], [262, "module-neural_compressor.experimental.metric.coco_label_map"], [263, "module-neural_compressor.experimental.metric.coco_tools"], [264, "module-neural_compressor.experimental.metric.evaluate_squad"], [265, "module-neural_compressor.experimental.metric.f1"], [266, "module-neural_compressor.experimental.metric"], [267, "module-neural_compressor.experimental.metric.metric"], [268, "module-neural_compressor.experimental.mixed_precision"], [269, "module-neural_compressor.experimental.model_conversion"], [270, "module-neural_compressor.experimental.nas.basic_nas"], [271, "module-neural_compressor.experimental.nas.dynas"], [272, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [273, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [274, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [275, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [276, "module-neural_compressor.experimental.nas.dynast"], [277, "module-neural_compressor.experimental.nas.dynast.supernetwork"], [278, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"], [279, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"], [280, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"], [281, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"], [282, "module-neural_compressor.experimental.nas"], [283, "module-neural_compressor.experimental.nas.nas"], [284, "module-neural_compressor.experimental.nas.nas_utils"], [285, "module-neural_compressor.experimental.nas.search_algorithms"], [286, "module-neural_compressor.experimental.pruning"], [287, "module-neural_compressor.experimental.pruning_recipes"], [288, "module-neural_compressor.experimental.pruning_recipes.patterns"], [289, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [290, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [291, "module-neural_compressor.experimental.pruning_v2"], [292, "module-neural_compressor.experimental.pytorch_pruner"], [293, "module-neural_compressor.experimental.pytorch_pruner.logger"], [294, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [295, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [296, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [297, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [298, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [299, "module-neural_compressor.experimental.quantization"], [300, "module-neural_compressor.experimental.scheduler"], [301, "module-neural_compressor"], [302, "module-neural_compressor.metric.bleu"], [303, "module-neural_compressor.metric.bleu_util"], [304, "module-neural_compressor.metric.coco_label_map"], [305, "module-neural_compressor.metric.coco_tools"], [306, "module-neural_compressor.metric.evaluate_squad"], [307, "module-neural_compressor.metric.f1"], [308, "module-neural_compressor.metric"], [309, "module-neural_compressor.metric.metric"], [310, "module-neural_compressor.mix_precision"], [311, "module-neural_compressor.model.base_model"], [312, "module-neural_compressor.model"], [313, "module-neural_compressor.model.keras_model"], [314, "module-neural_compressor.model.model"], [315, "module-neural_compressor.model.mxnet_model"], [316, "module-neural_compressor.model.nets_factory"], [317, "module-neural_compressor.model.onnx_model"], [318, "module-neural_compressor.model.tensorflow_model"], [319, "module-neural_compressor.model.torch_model"], [320, "module-neural_compressor.objective"], [321, "module-neural_compressor.pruner.criteria"], [322, "module-neural_compressor.pruner"], [323, "module-neural_compressor.pruner.logger"], [324, "module-neural_compressor.pruner.patterns"], [325, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"], [326, "module-neural_compressor.pruner.pruner_legacy.group_lasso"], [327, "module-neural_compressor.pruner.pruner_legacy"], [328, "module-neural_compressor.pruner.pruner_legacy.magnitude"], [329, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"], [330, "module-neural_compressor.pruner.pruner_legacy.pruner"], [331, "module-neural_compressor.pruner.pruners"], [332, "module-neural_compressor.pruner.pruning"], [333, "module-neural_compressor.pruner.regs"], [334, "module-neural_compressor.pruner.schedulers"], [335, "module-neural_compressor.pruner.utils"], [336, "module-neural_compressor.quantization"], [337, "module-neural_compressor.strategy.auto_mixed_precision"], [338, "module-neural_compressor.strategy.basic"], [339, "module-neural_compressor.strategy.bayesian"], [340, "module-neural_compressor.strategy.conservative"], [341, "module-neural_compressor.strategy.exhaustive"], [342, "module-neural_compressor.strategy.hawq_v2"], [343, "module-neural_compressor.strategy"], [344, "module-neural_compressor.strategy.mse"], [345, "module-neural_compressor.strategy.mse_v2"], [346, "module-neural_compressor.strategy.random"], [347, "module-neural_compressor.strategy.strategy"], [348, "module-neural_compressor.strategy.utils"], [349, "module-neural_compressor.strategy.utils.tuning_sampler"], [350, "module-neural_compressor.strategy.utils.tuning_space"], [351, "module-neural_compressor.strategy.utils.tuning_structs"], [352, "module-neural_compressor.training"], [353, "module-neural_compressor.utils.collect_layer_histogram"], [354, "module-neural_compressor.utils.constant"], [355, "module-neural_compressor.utils.create_obj_from_config"], [356, "module-neural_compressor.utils"], [357, "module-neural_compressor.utils.kl_divergence"], [358, "module-neural_compressor.utils.load_huggingface"], [359, "module-neural_compressor.utils.logger"], [360, "module-neural_compressor.utils.options"], [361, "module-neural_compressor.utils.pytorch"], [362, "module-neural_compressor.utils.utility"], [363, "module-neural_compressor.ux.components.benchmark.benchmark"], [364, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [365, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [366, "module-neural_compressor.ux.components.benchmark"], [367, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [368, "module-neural_compressor.ux.components.config_generator.config_generator"], [369, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [370, "module-neural_compressor.ux.components.config_generator"], [371, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [372, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [373, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [374, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [375, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [376, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [377, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [378, "module-neural_compressor.ux.components.configuration_wizard"], [379, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [380, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [381, "module-neural_compressor.ux.components.db_manager.db_manager"], [382, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [383, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [384, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [385, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [386, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [387, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [388, "module-neural_compressor.ux.components.db_manager.db_models.example"], [389, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [390, "module-neural_compressor.ux.components.db_manager.db_models"], [391, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [392, "module-neural_compressor.ux.components.db_manager.db_models.model"], [393, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [394, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [395, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [396, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [397, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [398, "module-neural_compressor.ux.components.db_manager.db_models.project"], [399, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [400, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [401, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [402, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [403, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [404, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [405, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [406, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [407, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [408, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [409, "module-neural_compressor.ux.components.db_manager.db_operations"], [410, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [411, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [412, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [413, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [414, "module-neural_compressor.ux.components.db_manager"], [415, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [416, "module-neural_compressor.ux.components.db_manager.utils"], [417, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [418, "module-neural_compressor.ux.components.diagnosis.factory"], [419, "module-neural_compressor.ux.components.diagnosis"], [420, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [421, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [422, "module-neural_compressor.ux.components.diagnosis.op_details"], [423, "module-neural_compressor.ux.components.diagnosis.op_entry"], [424, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [425, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [426, "module-neural_compressor.ux.components.file_browser.file_browser"], [427, "module-neural_compressor.ux.components.file_browser"], [428, "module-neural_compressor.ux.components.graph.attribute"], [429, "module-neural_compressor.ux.components.graph.collapser"], [430, "module-neural_compressor.ux.components.graph.edge"], [431, "module-neural_compressor.ux.components.graph.graph"], [432, "module-neural_compressor.ux.components.graph.graph_reader"], [433, "module-neural_compressor.ux.components.graph"], [434, "module-neural_compressor.ux.components.graph.node"], [435, "module-neural_compressor.ux.components.graph.reader"], [436, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [437, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [438, "module-neural_compressor.ux.components"], [439, "module-neural_compressor.ux.components.jobs_management"], [440, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [441, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [442, "module-neural_compressor.ux.components.jobs_management.request"], [443, "module-neural_compressor.ux.components.manage_workspace"], [444, "module-neural_compressor.ux.components.model.domain"], [445, "module-neural_compressor.ux.components.model"], [446, "module-neural_compressor.ux.components.model.model"], [447, "module-neural_compressor.ux.components.model.model_type_getter"], [448, "module-neural_compressor.ux.components.model.onnxrt"], [449, "module-neural_compressor.ux.components.model.onnxrt.model"], [450, "module-neural_compressor.ux.components.model.pytorch"], [451, "module-neural_compressor.ux.components.model.pytorch.model"], [452, "module-neural_compressor.ux.components.model.repository"], [453, "module-neural_compressor.ux.components.model.shape"], [454, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [455, "module-neural_compressor.ux.components.model.tensorflow"], [456, "module-neural_compressor.ux.components.model.tensorflow.keras"], [457, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [458, "module-neural_compressor.ux.components.model.tensorflow.model"], [459, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [460, "module-neural_compressor.ux.components.model.tensorflow.utils"], [461, "module-neural_compressor.ux.components.model_zoo.download_config"], [462, "module-neural_compressor.ux.components.model_zoo.download_model"], [463, "module-neural_compressor.ux.components.model_zoo.downloader"], [464, "module-neural_compressor.ux.components.model_zoo"], [465, "module-neural_compressor.ux.components.model_zoo.list_models"], [466, "module-neural_compressor.ux.components.names_mapper"], [467, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [468, "module-neural_compressor.ux.components.optimization.execute_optimization"], [469, "module-neural_compressor.ux.components.optimization.factory"], [470, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [471, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [472, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [473, "module-neural_compressor.ux.components.optimization"], [474, "module-neural_compressor.ux.components.optimization.mixed_precision"], [475, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [476, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [477, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [478, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [479, "module-neural_compressor.ux.components.optimization.optimization"], [480, "module-neural_compressor.ux.components.optimization.pruning"], [481, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [482, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [483, "module-neural_compressor.ux.components.optimization.tune"], [484, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [485, "module-neural_compressor.ux.components.optimization.tune.tuning"], [486, "module-neural_compressor.ux.components.optimization.tuning_history"], [487, "module-neural_compressor.ux.components.profiling.execute_profiling"], [488, "module-neural_compressor.ux.components.profiling.factory"], [489, "module-neural_compressor.ux.components.profiling"], [490, "module-neural_compressor.ux.components.profiling.profile_model"], [491, "module-neural_compressor.ux.components.profiling.profiler"], [492, "module-neural_compressor.ux.components.profiling.profiling"], [493, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [494, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [495, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [496, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [497, "module-neural_compressor.ux.inc_bench"], [498, "module-neural_compressor.ux"], [499, "module-neural_compressor.ux.utils.consts"], [500, "module-neural_compressor.ux.utils.environment"], [501, "module-neural_compressor.ux.utils.exceptions"], [502, "module-neural_compressor.ux.utils.executor"], [503, "module-neural_compressor.ux.utils.expiring_dict"], [504, "module-neural_compressor.ux.utils.github_info"], [505, "module-neural_compressor.ux.utils.hw_info"], [506, "module-neural_compressor.ux.utils"], [507, "module-neural_compressor.ux.utils.json_serializer"], [508, "module-neural_compressor.ux.utils.logger"], [509, "module-neural_compressor.ux.utils.parser"], [510, "module-neural_compressor.ux.utils.proc"], [511, "module-neural_compressor.ux.utils.processes"], [512, "module-neural_compressor.ux.utils.singleton"], [513, "module-neural_compressor.ux.utils.status_updates"], [514, "module-neural_compressor.ux.utils.templates"], [515, "module-neural_compressor.ux.utils.templates.metric"], [516, "module-neural_compressor.ux.utils.templates.workdir"], [517, "module-neural_compressor.ux.utils.utils"], [518, "module-neural_compressor.ux.utils.workload.config"], [519, "module-neural_compressor.ux.utils.workload.dataloader"], [520, "module-neural_compressor.ux.utils.workload.evaluation"], [521, "module-neural_compressor.ux.utils.workload.graph_optimization"], [522, "module-neural_compressor.ux.utils.workload"], [523, "module-neural_compressor.ux.utils.workload.mixed_precision"], [524, "module-neural_compressor.ux.utils.workload.model"], [525, "module-neural_compressor.ux.utils.workload.pruning"], [526, "module-neural_compressor.ux.utils.workload.quantization"], [527, "module-neural_compressor.ux.utils.workload.tuning"], [528, "module-neural_compressor.ux.utils.yaml_utils"], [529, "module-neural_compressor.ux.web.communication"], [530, "module-neural_compressor.ux.web.configuration"], [531, "module-neural_compressor.ux.web.exceptions"], [532, "module-neural_compressor.ux.web"], [533, "module-neural_compressor.ux.web.router"], [534, "module-neural_compressor.ux.web.server"], [535, "module-neural_compressor.ux.web.service.benchmark"], [536, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [537, "module-neural_compressor.ux.web.service"], [538, "module-neural_compressor.ux.web.service.model"], [539, "module-neural_compressor.ux.web.service.optimization"], [540, "module-neural_compressor.ux.web.service.profiling"], [541, "module-neural_compressor.ux.web.service.request_data_processor"], [542, "module-neural_compressor.ux.web.service.response_generator"], [543, "module-neural_compressor.ux.web.service.workload"], [544, "module-neural_compressor.version"]], "neural_compressor.experimental.metric.bleu": [[14, "module-neural_compressor.experimental.metric.bleu"], [260, "module-neural_compressor.experimental.metric.bleu"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[14, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [260, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[14, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [260, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[14, "neural_compressor.experimental.metric.bleu.BLEU.result"], [260, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[14, "neural_compressor.experimental.metric.bleu.BLEU.update"], [260, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "644ec953a7dc_pruning_support": [[33, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[34, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[34, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[34, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[35, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[36, "module-9e89549a08c8_v1_11"]], "block_mask": [[37, "module-block_mask"]], "env": [[38, "module-env"]], "run_migrations_offline() (in module env)": [[38, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[38, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[39, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[39, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[39, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[39, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[39, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[39, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[39, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[39, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[39, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[39, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[39, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[39, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[40, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[41, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[41, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[41, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[41, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[41, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[41, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[41, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[41, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[41, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[41, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[41, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[41, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[41, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[41, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[41, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[41, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[41, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils": [[42, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[43, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[44, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[44, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[44, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "get_fuse_patterns() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[44, "neural_compressor.adaptor.mxnet.MXNetQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[44, "neural_compressor.adaptor.mxnet.MXNetQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[44, "neural_compressor.adaptor.mxnet.MXNetQuery.get_op_types"]], "get_precisions() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[44, "neural_compressor.adaptor.mxnet.MXNetQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[44, "neural_compressor.adaptor.mxnet.MXNetQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[44, "neural_compressor.adaptor.mxnet.MXNetQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[44, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[44, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[44, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[44, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[44, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[44, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[44, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[45, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calc_kl_th_dict() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[46, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.calc_kl_th_dict"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[46, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[46, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.namecollector method)": [[46, "neural_compressor.adaptor.mxnet_utils.util.NameCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[46, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.collect_gluon"]], "collect_module() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[46, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_module"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[46, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "post_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[46, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.post_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[46, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.pre_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[46, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.pre_batch"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[46, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[47, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[47, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[48, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[48, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[48, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[48, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[48, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "dump_minmax() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[48, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_minmax"]], "dump_tensor() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[48, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_tensor"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[48, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[48, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[49, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[50, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[50, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[50, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[50, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.qactivationoperator method)": [[50, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[50, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[50, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[50, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[50, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[50, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize_check"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[50, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize_check"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[51, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[51, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[51, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[51, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[51, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[52, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[52, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[52, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.qattentionoperator method)": [[52, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[52, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[52, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[52, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.quantize"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[53, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[53, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[53, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.qbinaryoperator method)": [[53, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[53, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[53, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[53, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[53, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize_check"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[54, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[54, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[54, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[54, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.qconcatoperator method)": [[54, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[54, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[54, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[54, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[54, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize_check"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[55, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[55, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[55, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.qconvoperator method)": [[55, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[55, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[55, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[55, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.quantize"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[56, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "directcastoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[56, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[56, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[56, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.cast"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.directcastoperator method)": [[56, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[56, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[56, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[56, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[56, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[56, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize_check"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[57, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[57, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.qembedlayernormalizationoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[57, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.quantize"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[58, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[58, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[58, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[58, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[58, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[58, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[58, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize_check"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[59, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[59, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[59, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.qglobalaveragepooloperator method)": [[59, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[59, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[59, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[60, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[60, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[60, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.qgemmoperator method)": [[60, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[60, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[60, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[60, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[60, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize_check"]], "neural_compressor.adaptor.ox_utils.operators": [[61, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[62, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[62, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[62, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[62, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[62, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.quantize"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[63, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[63, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[63, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.qmatmuloperator method)": [[63, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[63, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[63, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[63, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.quantize"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[64, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[64, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[64, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[64, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[64, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[64, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[64, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize_check"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[65, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[65, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.qoperator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[65, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[65, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[65, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize_check"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[66, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[66, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[66, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize_check"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[67, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[67, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.qpooloperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[67, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize_check"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[68, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[68, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[68, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[68, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize_check"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[69, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[69, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.qsplitoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[69, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.quantize"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "check_opset_version() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.check_opset_version"]], "convert_qdq_to_operator_oriented() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.convert_qdq_to_operator_oriented"]], "dequantize_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dequantize_tensor"]], "dtype_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dtype_cast"]], "get_bias_add_nodes() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.get_bias_add_nodes"]], "insert_qdq() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.insert_qdq"]], "is_valid_quantize_weight() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.is_valid_quantize_weight"]], "merge_dedicated_qdq_pair() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.merge_dedicated_qdq_pair"]], "neural_compressor.adaptor.ox_utils.quantizer": [[70, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantize_bias() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias"]], "quantize_bias_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias_tensor"]], "quantize_inputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_inputs"]], "quantize_model() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_model"]], "quantize_outputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_outputs"]], "quantize_weight_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weight_per_channel"]], "quantize_weights_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weights_per_channel"]], "remove_redundant_pairs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.remove_redundant_pairs"]], "should_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_cast"]], "should_convert() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_convert"]], "should_quantize() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_quantize"]], "tensor_proto_to_array() (neural_compressor.adaptor.ox_utils.quantizer.quantizer static method)": [[70, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.tensor_proto_to_array"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[71, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[71, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[72, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[72, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[72, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[72, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[72, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[72, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[72, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[72, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[73, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[73, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[73, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[73, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[73, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[73, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[73, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[73, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[73, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[74, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[74, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[74, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[74, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[74, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[74, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[74, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[74, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[74, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[74, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[74, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[74, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "tuning_cfg_to_fw() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[74, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.tuning_cfg_to_fw"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[75, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[76, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[110, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[122, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[130, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[130, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[131, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[132, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[132, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[133, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[134, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[140, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[141, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[142, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[144, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[147, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[160, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[162, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[163, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[163, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[163, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[164, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[165, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[166, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[166, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[166, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[167, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[167, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[167, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[168, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[168, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[168, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[168, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[168, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[168, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[168, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[168, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[168, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[168, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[168, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[169, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[170, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[170, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[170, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[170, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[170, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[170, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[170, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[171, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[172, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[173, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[174, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[174, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[174, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[174, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[174, "module-neural_compressor.adaptor.torch_utils.util"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[175, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[175, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[175, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[175, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[175, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[175, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[175, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm.algorithm": [[175, "module-neural_compressor.algorithm.algorithm"]], "origin_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[175, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[175, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithm.algorithms class method)": [[175, "neural_compressor.algorithm.algorithm.ALGORITHMS.support_algorithms"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[176, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[176, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithms (class in neural_compressor.algorithm)": [[177, "neural_compressor.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm)": [[177, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[177, "neural_compressor.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithmscheduler property)": [[177, "neural_compressor.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[177, "neural_compressor.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithmscheduler property)": [[177, "neural_compressor.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithmscheduler property)": [[177, "neural_compressor.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm": [[177, "module-neural_compressor.algorithm"]], "origin_model (neural_compressor.algorithm.algorithmscheduler property)": [[177, "neural_compressor.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithmscheduler property)": [[177, "neural_compressor.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithms class method)": [[177, "neural_compressor.algorithm.ALGORITHMS.support_algorithms"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[178, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[178, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[179, "neural_compressor.benchmark.Benchmark"]], "fit() (in module neural_compressor.benchmark)": [[179, "neural_compressor.benchmark.fit"]], "neural_compressor.benchmark": [[179, "module-neural_compressor.benchmark"]], "benchmark_conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[180, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[181, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[181, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[181, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[181, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[182, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[183, "module-neural_compressor.conf.pythonic_config"]], "distillationconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.DistillationConfig"]], "weightpruningconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[184, "module-neural_compressor.config"]], "neural_compressor.contrib": [[185, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[186, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[187, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[187, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[187, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[187, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[188, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[188, "module-neural_compressor.contrib.strategy.tpe"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[188, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[188, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[189, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[189, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[189, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[189, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[190, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[190, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[191, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[191, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[191, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[191, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[191, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[192, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[192, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[192, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[192, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[193, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[193, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[194, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[194, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[195, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[195, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[195, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[196, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[196, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[197, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[197, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[197, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[197, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[197, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[198, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[198, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[198, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[198, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[198, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[198, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[199, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[199, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[200, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[200, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[200, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[200, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[200, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[201, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[201, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[201, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[201, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[201, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[201, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[201, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[202, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[202, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[203, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[203, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[203, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[204, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[204, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[204, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[204, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[204, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[204, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[204, "module-neural_compressor.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.data.datasets)": [[205, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[205, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[205, "neural_compressor.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[205, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[205, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[206, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[206, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[207, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[207, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[207, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[208, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[209, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[209, "neural_compressor.data.filters.Filter"]], "filter_registry() (in module neural_compressor.data.filters)": [[209, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[209, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[210, "neural_compressor.data.BaseTransform"]], "dataloader (class in neural_compressor.data)": [[210, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[210, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[210, "neural_compressor.data.Datasets"]], "filters (class in neural_compressor.data)": [[210, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[210, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[210, "neural_compressor.data.IterableDataset"]], "postprocess (class in neural_compressor.data)": [[210, "neural_compressor.data.Postprocess"]], "transforms (class in neural_compressor.data)": [[210, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[210, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[210, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[210, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[210, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[210, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[211, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[211, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[212, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[213, "neural_compressor.data.transforms.BaseTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[213, "neural_compressor.data.transforms.Postprocess"]], "transforms (class in neural_compressor.data.transforms)": [[213, "neural_compressor.data.transforms.TRANSFORMS"]], "neural_compressor.data.transforms": [[213, "module-neural_compressor.data.transforms"]], "register() (neural_compressor.data.transforms.transforms method)": [[213, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[213, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[214, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[214, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[215, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[215, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[215, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[215, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[215, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[215, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TRANSFORMS"], [216, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[216, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[216, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[216, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[216, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[217, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[217, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[217, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[217, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[217, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[217, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[217, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[217, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[217, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[217, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[217, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[218, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[218, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[218, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[218, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[219, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[219, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[220, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[220, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[220, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[220, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[220, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[221, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[221, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[222, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[222, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[223, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[223, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[224, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[224, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[225, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[225, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[225, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[226, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[226, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[226, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[226, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[226, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[226, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[226, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[226, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[227, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[227, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[227, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[229, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[229, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[230, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[230, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[230, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[230, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[231, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[235, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[235, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[235, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[235, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[235, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[236, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[237, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[238, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[238, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[238, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[238, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[238, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[239, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[239, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[239, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[239, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[239, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[239, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[239, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[240, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[240, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[241, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[241, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[241, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[242, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[243, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[243, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[243, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[243, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[243, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[244, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[244, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[245, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[245, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[245, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[246, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[247, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[247, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[247, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[247, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[248, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[248, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[248, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[248, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[248, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[248, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[248, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[248, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[248, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[248, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[248, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[248, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[249, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[250, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[250, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[250, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[250, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[250, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[251, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[251, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[251, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[251, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[251, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[251, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [252, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[252, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[252, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[252, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[252, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[253, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[253, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[253, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[253, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[253, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[253, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[253, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[253, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[253, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[253, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[253, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[253, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[253, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[253, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[253, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[253, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[253, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[253, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[253, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[253, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[253, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[254, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[254, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[254, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[254, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[255, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[255, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[255, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[256, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[256, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[257, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[257, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[257, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[257, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[258, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[258, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[258, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[258, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[258, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[258, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[258, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[258, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[258, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[258, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[258, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[258, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[259, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[259, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[259, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[259, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[259, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[259, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[259, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[259, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[259, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[259, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[259, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[259, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[259, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[259, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[259, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[259, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[259, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[259, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[259, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[259, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[259, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[259, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[259, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[259, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[259, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[259, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[259, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[259, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[259, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[259, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[259, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[259, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[259, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[259, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[259, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[259, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[259, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[259, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[259, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[259, "neural_compressor.experimental.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning method)": [[259, "neural_compressor.experimental.Pruning.get_sparsity_ratio"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[259, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[259, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[259, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[259, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[259, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[259, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[259, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[259, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[259, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[259, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[259, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[259, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[259, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[259, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[259, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[259, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[259, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[259, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[259, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[259, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[259, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[259, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[259, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[259, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[259, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[259, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[259, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[259, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[259, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[259, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[259, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[259, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[259, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[259, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[259, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[259, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[259, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[259, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[259, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[259, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[259, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[259, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[259, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[259, "neural_compressor.experimental.Component.train_func"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning method)": [[259, "neural_compressor.experimental.Pruning.update_items_for_all_pruners"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[260, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[260, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[260, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[260, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[260, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[260, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[261, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[261, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[262, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[263, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[263, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[263, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[263, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[264, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[264, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[264, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[264, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[264, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[265, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[265, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[265, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[265, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[265, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[266, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[266, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[266, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[266, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[266, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[266, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[266, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[266, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[266, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[266, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[266, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[267, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[267, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[267, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[267, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[267, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[267, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[267, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[267, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[267, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[267, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[267, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[267, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[267, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[267, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[267, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[267, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[267, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[267, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[267, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[267, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[267, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[267, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[267, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[267, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[267, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[267, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[267, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[267, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[267, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[267, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[267, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[267, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[267, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[267, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[267, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[267, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[267, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[267, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[267, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[267, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[267, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[267, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[267, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[267, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[267, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[267, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[267, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[267, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[267, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[267, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[267, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[267, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[267, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[267, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[267, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[267, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[267, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[267, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[267, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[267, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[267, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[267, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[267, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[267, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[267, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[267, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[267, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[267, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[267, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[267, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[267, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[267, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[267, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[267, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[267, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[267, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[267, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[267, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[267, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[267, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[267, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[267, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[267, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[267, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[267, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[268, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[268, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[268, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[268, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[269, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[269, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[269, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[269, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[269, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[269, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[269, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[269, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[269, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[269, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[270, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[270, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[270, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[270, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[270, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[270, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[271, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[271, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[271, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[271, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[271, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[271, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[271, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[271, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[271, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[271, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[272, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "transformerltencoding (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[272, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[272, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[272, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[273, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[273, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[273, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[274, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[274, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[274, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[274, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "evaluationinterfacetransformerlt (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "transformerltrunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[275, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[275, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[276, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[277, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[278, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "multiheadattentionsuper (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.forward"]], "get_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.get_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[279, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "reorder_incremental_state() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.reorder_incremental_state"]], "set_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[279, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.set_incremental_state"]], "compute_bleu() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_bleu"]], "compute_latency() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_latency"]], "compute_macs() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[280, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[280, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "transformerdecoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder"]], "transformerdecoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer"]], "transformerencoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder"]], "transformerencoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer"]], "transformersupernetwork (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerSuperNetwork"]], "extract_features() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.extract_features"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoderlayer method)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.forward"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.max_positions"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.max_positions"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[281, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "output_layer() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.output_layer"]], "reorder_encoder_out() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.reorder_encoder_out"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[281, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.upgrade_state_dict_named"]], "basicnas (class in neural_compressor.experimental.nas)": [[282, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[282, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[282, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[282, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[282, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[282, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[282, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[282, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[282, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[282, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[282, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[282, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[282, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[282, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[282, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[282, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[283, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[283, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[283, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[283, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[283, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[283, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[283, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[283, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[283, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[283, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[283, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[283, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[283, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[283, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[283, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[283, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[284, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[284, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[284, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[284, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[285, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[285, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[285, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[285, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[285, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[285, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[285, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[285, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[285, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[285, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[285, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[285, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[285, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[286, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[286, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[286, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[286, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[286, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[286, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[286, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning.pruning method)": [[286, "neural_compressor.experimental.pruning.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning": [[286, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[286, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[286, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[286, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[286, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[286, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[286, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[286, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[286, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[286, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[286, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[286, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[286, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[286, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[286, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[286, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[286, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning.pruning method)": [[286, "neural_compressor.experimental.pruning.Pruning.update_items_for_all_pruners"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[287, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[287, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[287, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[287, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[290, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[290, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[291, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[291, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[291, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[291, "neural_compressor.experimental.pruning_v2.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning_v2.pruning method)": [[291, "neural_compressor.experimental.pruning_v2.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning_v2.pruning method)": [[291, "neural_compressor.experimental.pruning_v2.Pruning.generate_hooks"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning_v2.pruning method)": [[291, "neural_compressor.experimental.pruning_v2.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning_v2": [[291, "module-neural_compressor.experimental.pruning_v2"]], "on_after_compute_loss() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[291, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[291, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[291, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[291, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[291, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[291, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[291, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[291, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[291, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[291, "neural_compressor.experimental.pruning_v2.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[291, "neural_compressor.experimental.pruning_v2.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning_v2.pruning method)": [[291, "neural_compressor.experimental.pruning_v2.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning_v2.pruning method)": [[291, "neural_compressor.experimental.pruning_v2.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[291, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning_v2.pruning property)": [[291, "neural_compressor.experimental.pruning_v2.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[291, "neural_compressor.experimental.pruning_v2.Pruning.train_distributed"]], "update_config() (neural_compressor.experimental.pruning_v2.pruning method)": [[291, "neural_compressor.experimental.pruning_v2.Pruning.update_config"]], "neural_compressor.experimental.pytorch_pruner": [[292, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[293, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[294, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[294, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[295, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[295, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[295, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[295, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[295, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[295, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[295, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[296, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[296, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[297, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "prepare() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.prepare"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[297, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[298, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[298, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[299, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[299, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[299, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[299, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[299, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[299, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[299, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[299, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[299, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[299, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[299, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[300, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[300, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[300, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[300, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[300, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[300, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[300, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[301, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[301, "neural_compressor.DistillationConfig"]], "weightpruningconfig (class in neural_compressor)": [[301, "neural_compressor.WeightPruningConfig"]], "neural_compressor": [[301, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[302, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[302, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[302, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[302, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[302, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[302, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[302, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[302, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[302, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[302, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[302, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[302, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[302, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[303, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[303, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[304, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[305, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[305, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[305, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[305, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[305, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[305, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[305, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[305, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[305, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[305, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[305, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[305, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[305, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[305, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[306, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[306, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[306, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[306, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[306, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[307, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[307, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[307, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[307, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[307, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[308, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[308, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[308, "neural_compressor.metric.Metric"]], "hvd (neural_compressor.metric.basemetric property)": [[308, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[308, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[308, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[308, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[308, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[308, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[308, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[308, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[308, "neural_compressor.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[309, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[309, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[309, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[309, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[309, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[309, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[309, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[309, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[309, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[309, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[309, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[309, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[309, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[309, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[309, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[309, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[309, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[309, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[309, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[309, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[309, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[309, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[309, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[309, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[309, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[309, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[309, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[309, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[309, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[309, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[309, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[309, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[309, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[309, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[309, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[309, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[309, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[309, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[309, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[309, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[309, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[309, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[309, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[309, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[309, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[309, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[309, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[309, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[309, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[309, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[309, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[309, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[309, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[309, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[309, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[309, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[309, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[309, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[309, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[309, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[309, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[309, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[309, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[309, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[309, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[309, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[309, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[309, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[309, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[309, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[309, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[309, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[309, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[309, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[309, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[309, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[309, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[309, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[309, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[309, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[309, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[309, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[309, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[309, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[309, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[309, "neural_compressor.metric.metric.mIOU.update"]], "neural_compressor.mix_precision": [[310, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[311, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[311, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[311, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[311, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[311, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[311, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[311, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[312, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[312, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[312, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[312, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[312, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[312, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[312, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[312, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[313, "neural_compressor.model.keras_model.KerasModel"]], "export() (neural_compressor.model.keras_model.kerasmodel method)": [[313, "neural_compressor.model.keras_model.KerasModel.export"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[313, "neural_compressor.model.keras_model.KerasModel.framework"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[313, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[313, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[313, "module-neural_compressor.model.keras_model"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[313, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[314, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[314, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[314, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[315, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[315, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[315, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[315, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[315, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "neural_compressor.model.nets_factory": [[316, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[317, "neural_compressor.model.onnx_model.ONNXModel"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[317, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[317, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[317, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[317, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[317, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[317, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[317, "neural_compressor.model.onnx_model.ONNXModel.model"]], "neural_compressor.model.onnx_model": [[317, "module-neural_compressor.model.onnx_model"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[317, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[317, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.estimator_session"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[318, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[318, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[318, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[318, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[318, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "neural_compressor.model.tensorflow_model": [[318, "module-neural_compressor.model.tensorflow_model"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[318, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[318, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[318, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[318, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[318, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[318, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[319, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[319, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[319, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[319, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[319, "neural_compressor.model.torch_model.PyTorchModel.export"]], "fp32_model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[319, "neural_compressor.model.torch_model.PyTorchBaseModel.fp32_model"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[319, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[319, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[319, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[319, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[319, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.ipexmodel property)": [[319, "neural_compressor.model.torch_model.IPEXModel.graph_info"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[319, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[319, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[319, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[319, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[319, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[319, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[319, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[319, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[319, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "accuracy (class in neural_compressor.objective)": [[320, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[320, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[320, "neural_compressor.objective.ModelSize"]], "objective (class in neural_compressor.objective)": [[320, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[320, "neural_compressor.objective.Performance"]], "end() (neural_compressor.objective.accuracy method)": [[320, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[320, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[320, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.objective method)": [[320, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[320, "neural_compressor.objective.Performance.end"]], "neural_compressor.objective": [[320, "module-neural_compressor.objective"]], "objective_registry() (in module neural_compressor.objective)": [[320, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.objective method)": [[320, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.objective method)": [[320, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[320, "neural_compressor.objective.Objective.result_list"]], "start() (neural_compressor.objective.accuracy method)": [[320, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[320, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[320, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.objective method)": [[320, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[320, "neural_compressor.objective.Performance.start"]], "gradientcriterion (class in neural_compressor.pruner.criteria)": [[321, "neural_compressor.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.pruner.criteria)": [[321, "neural_compressor.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.pruner.criteria)": [[321, "neural_compressor.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.pruner.criteria)": [[321, "neural_compressor.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.pruner.criteria)": [[321, "neural_compressor.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.pruner.criteria)": [[321, "neural_compressor.pruner.criteria.get_criterion"]], "neural_compressor.pruner.criteria": [[321, "module-neural_compressor.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.gradientcriterion method)": [[321, "neural_compressor.pruner.criteria.GradientCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[321, "neural_compressor.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipcriterion method)": [[321, "neural_compressor.pruner.criteria.SnipCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipmomentumcriterion method)": [[321, "neural_compressor.pruner.criteria.SnipMomentumCriterion.on_after_optimizer_step"]], "on_step_begin() (neural_compressor.pruner.criteria.magnitudecriterion method)": [[321, "neural_compressor.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.criteria.pruningcriterion method)": [[321, "neural_compressor.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.pruner.criteria)": [[321, "neural_compressor.pruner.criteria.register_criterion"]], "scores (neural_compressor.pruner.criteria.gradientcriterion attribute)": [[321, "neural_compressor.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.pruner.criteria.magnitudecriterion attribute)": [[321, "neural_compressor.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.pruner.criteria.pruningcriterion attribute)": [[321, "neural_compressor.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipcriterion attribute)": [[321, "neural_compressor.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipmomentumcriterion attribute)": [[321, "neural_compressor.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.pruner": [[322, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[323, "module-neural_compressor.pruner.logger"]], "basepattern (class in neural_compressor.pruner.patterns)": [[324, "neural_compressor.pruner.patterns.BasePattern"]], "m (neural_compressor.pruner.patterns.patternninm attribute)": [[324, "neural_compressor.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.pruner.patterns.patternninm attribute)": [[324, "neural_compressor.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.pruner.patterns)": [[324, "neural_compressor.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.pruner.patterns)": [[324, "neural_compressor.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[324, "neural_compressor.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.pruner.patterns.patternnxm attribute)": [[324, "neural_compressor.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.pruner.patterns.basepattern method)": [[324, "neural_compressor.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternninm method)": [[324, "neural_compressor.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.pruner.patterns.basepattern attribute)": [[324, "neural_compressor.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.pruner.patterns.basepattern method)": [[324, "neural_compressor.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.pruner.patterns.patternninm method)": [[324, "neural_compressor.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[324, "neural_compressor.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.pruner.patterns.basepattern method)": [[324, "neural_compressor.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.pruner.patterns.basepattern method)": [[324, "neural_compressor.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternninm method)": [[324, "neural_compressor.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.pruner.patterns.basepattern method)": [[324, "neural_compressor.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.pruner.patterns)": [[324, "neural_compressor.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.basepattern method)": [[324, "neural_compressor.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternninm method)": [[324, "neural_compressor.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.basepattern method)": [[324, "neural_compressor.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[324, "neural_compressor.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[324, "neural_compressor.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[324, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternninm method)": [[324, "neural_compressor.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.pruner.patterns.basepattern method)": [[324, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[324, "neural_compressor.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.pruner.patterns.basepattern attribute)": [[324, "neural_compressor.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[324, "neural_compressor.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[324, "neural_compressor.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[324, "neural_compressor.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.patterns.basepattern attribute)": [[324, "neural_compressor.pruner.patterns.BasePattern.modules"]], "neural_compressor.pruner.patterns": [[324, "module-neural_compressor.pruner.patterns"]], "pattern (neural_compressor.pruner.patterns.basepattern attribute)": [[324, "neural_compressor.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.pruner.patterns.patternninm method)": [[324, "neural_compressor.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.pruner.patterns.basepattern method)": [[324, "neural_compressor.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.pruner.patterns)": [[324, "neural_compressor.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternninm method)": [[324, "neural_compressor.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternninm method)": [[324, "neural_compressor.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.pruner.patterns.basepattern attribute)": [[324, "neural_compressor.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[324, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.pruner.patterns.basepattern method)": [[324, "neural_compressor.pruner.patterns.BasePattern.update_residual_cnt"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[325, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[326, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[327, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[328, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[329, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[330, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.pruner.pruner_legacy.pruner)": [[330, "neural_compressor.pruner.pruner_legacy.pruner.pruner_registry"]], "basepruner (class in neural_compressor.pruner.pruners)": [[331, "neural_compressor.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.pruner.pruners)": [[331, "neural_compressor.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.pruner.pruners)": [[331, "neural_compressor.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.pruner.pruners)": [[331, "neural_compressor.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[331, "neural_compressor.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.pruner.pruners.progressivepruner method)": [[331, "neural_compressor.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.pruner.pruners.basepruner attribute)": [[331, "neural_compressor.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.pruner.pruners.basicpruner attribute)": [[331, "neural_compressor.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[331, "neural_compressor.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.pruner.pruners.basepruner attribute)": [[331, "neural_compressor.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.pruner.pruners)": [[331, "neural_compressor.pruner.pruners.get_pruner"]], "global_step (neural_compressor.pruner.pruners.basepruner attribute)": [[331, "neural_compressor.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.pruner.pruners.basepruner attribute)": [[331, "neural_compressor.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.pruners.basepruner attribute)": [[331, "neural_compressor.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.pruners.basepruner attribute)": [[331, "neural_compressor.pruner.pruners.BasePruner.modules"]], "neural_compressor.pruner.pruners": [[331, "module-neural_compressor.pruner.pruners"]], "on_after_eval() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[331, "neural_compressor.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.patternlockpruner method)": [[331, "neural_compressor.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[331, "neural_compressor.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[331, "neural_compressor.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[331, "neural_compressor.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.pruners.progressivepruner method)": [[331, "neural_compressor.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.on_train_end"]], "parse_valid_pruner_types() (in module neural_compressor.pruner.pruners)": [[331, "neural_compressor.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.pruner.pruners.basepruner attribute)": [[331, "neural_compressor.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.pruner.pruners.basicpruner attribute)": [[331, "neural_compressor.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.pruner.pruners.progressivepruner method)": [[331, "neural_compressor.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.pruner.pruners.basepruner attribute)": [[331, "neural_compressor.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.pruner.pruners.basicpruner attribute)": [[331, "neural_compressor.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.pruner.pruners)": [[331, "neural_compressor.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.pruner.pruners.basepruner attribute)": [[331, "neural_compressor.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.pruner.pruners.basicpruner attribute)": [[331, "neural_compressor.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.pruner.pruners.basepruner attribute)": [[331, "neural_compressor.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.pruner.pruners.basicpruner method)": [[331, "neural_compressor.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.pruner.pruners.basepruner attribute)": [[331, "neural_compressor.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[331, "neural_compressor.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.pruner.pruners.basepruner method)": [[331, "neural_compressor.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.basicpruner method)": [[331, "neural_compressor.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.patternlockpruner method)": [[331, "neural_compressor.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.pruner.pruners.progressivepruner method)": [[331, "neural_compressor.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "pruning (class in neural_compressor.pruner.pruning)": [[332, "neural_compressor.pruner.pruning.Pruning"]], "config_file_path (neural_compressor.pruner.pruning.pruning attribute)": [[332, "neural_compressor.pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.pruner.pruning.pruning method)": [[332, "neural_compressor.pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.pruner.pruning.pruning attribute)": [[332, "neural_compressor.pruner.pruning.Pruning.model"]], "model (neural_compressor.pruner.pruning.pruning property)": [[332, "id0"]], "neural_compressor.pruner.pruning": [[332, "module-neural_compressor.pruner.pruning"]], "on_after_eval() (neural_compressor.pruner.pruning.pruning method)": [[332, "neural_compressor.pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[332, "neural_compressor.pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruning.pruning method)": [[332, "neural_compressor.pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[332, "neural_compressor.pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruning.pruning method)": [[332, "neural_compressor.pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruning.pruning method)": [[332, "neural_compressor.pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruning.pruning method)": [[332, "neural_compressor.pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruning.pruning method)": [[332, "neural_compressor.pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruning.pruning method)": [[332, "neural_compressor.pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruning.pruning method)": [[332, "neural_compressor.pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.pruner.pruning.pruning attribute)": [[332, "neural_compressor.pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.pruner.pruning.pruning attribute)": [[332, "neural_compressor.pruner.pruning.Pruning.pruners"]], "update_config() (neural_compressor.pruner.pruning.pruning method)": [[332, "neural_compressor.pruner.pruning.Pruning.update_config"]], "basereg (class in neural_compressor.pruner.regs)": [[333, "neural_compressor.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.pruner.regs)": [[333, "neural_compressor.pruner.regs.GroupLasso"]], "alpha (neural_compressor.pruner.regs.grouplasso attribute)": [[333, "neural_compressor.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.pruner.regs)": [[333, "neural_compressor.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.pruner.regs)": [[333, "neural_compressor.pruner.regs.get_reg_type"]], "neural_compressor.pruner.regs": [[333, "module-neural_compressor.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[333, "neural_compressor.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[333, "neural_compressor.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[333, "neural_compressor.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[333, "neural_compressor.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.pruner.regs.grouplasso attribute)": [[333, "neural_compressor.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.pruner.regs)": [[333, "neural_compressor.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.pruner.schedulers)": [[334, "neural_compressor.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.pruner.schedulers)": [[334, "neural_compressor.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.pruner.schedulers)": [[334, "neural_compressor.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.pruner.schedulers.pruningscheduler attribute)": [[334, "neural_compressor.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.pruner.schedulers)": [[334, "neural_compressor.pruner.schedulers.get_scheduler"]], "neural_compressor.pruner.schedulers": [[334, "module-neural_compressor.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.pruner.schedulers)": [[334, "neural_compressor.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.iterativescheduler method)": [[334, "neural_compressor.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.oneshotscheduler method)": [[334, "neural_compressor.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.pruningscheduler method)": [[334, "neural_compressor.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "check_config() (in module neural_compressor.pruner.utils)": [[335, "neural_compressor.pruner.utils.check_config"]], "neural_compressor.pruner.utils": [[335, "module-neural_compressor.pruner.utils"]], "parse_to_prune() (in module neural_compressor.pruner.utils)": [[335, "neural_compressor.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.pruner.utils)": [[335, "neural_compressor.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.pruner.utils)": [[335, "neural_compressor.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.pruner.utils)": [[335, "neural_compressor.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.pruner.utils)": [[335, "neural_compressor.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.pruner.utils)": [[335, "neural_compressor.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.pruner.utils)": [[335, "neural_compressor.pruner.utils.update_params"]], "fit() (in module neural_compressor.quantization)": [[336, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[336, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[337, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[337, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[337, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[337, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[338, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[338, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[338, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[339, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[339, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[339, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[339, "neural_compressor.strategy.bayesian.acq_max"]], "array_to_params() (neural_compressor.strategy.bayesian.targetspace method)": [[339, "neural_compressor.strategy.bayesian.TargetSpace.array_to_params"]], "bounds (neural_compressor.strategy.bayesian.targetspace property)": [[339, "neural_compressor.strategy.bayesian.TargetSpace.bounds"]], "dim (neural_compressor.strategy.bayesian.targetspace property)": [[339, "neural_compressor.strategy.bayesian.TargetSpace.dim"]], "empty (neural_compressor.strategy.bayesian.targetspace property)": [[339, "neural_compressor.strategy.bayesian.TargetSpace.empty"]], "gen_next_params() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[339, "neural_compressor.strategy.bayesian.BayesianOptimization.gen_next_params"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[339, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "keys (neural_compressor.strategy.bayesian.targetspace property)": [[339, "neural_compressor.strategy.bayesian.TargetSpace.keys"]], "max (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[339, "neural_compressor.strategy.bayesian.BayesianOptimization.max"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[339, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[339, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[339, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "params (neural_compressor.strategy.bayesian.targetspace property)": [[339, "neural_compressor.strategy.bayesian.TargetSpace.params"]], "params_to_array() (neural_compressor.strategy.bayesian.targetspace method)": [[339, "neural_compressor.strategy.bayesian.TargetSpace.params_to_array"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[339, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[339, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[339, "neural_compressor.strategy.bayesian.BayesianOptimization.res"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[339, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "space (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[339, "neural_compressor.strategy.bayesian.BayesianOptimization.space"]], "suggest() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[339, "neural_compressor.strategy.bayesian.BayesianOptimization.suggest"]], "target (neural_compressor.strategy.bayesian.targetspace property)": [[339, "neural_compressor.strategy.bayesian.TargetSpace.target"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[340, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[340, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[340, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[340, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[340, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[341, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[341, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[341, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[342, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[342, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[342, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[343, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[344, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[344, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "neural_compressor.strategy.mse": [[344, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[344, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[345, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[345, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[345, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[346, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[346, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[346, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[347, "neural_compressor.strategy.strategy.TuneStrategy"]], "deploy_config() (neural_compressor.strategy.strategy.tunestrategy method)": [[347, "neural_compressor.strategy.strategy.TuneStrategy.deploy_config"]], "evaluation_result (neural_compressor.strategy.strategy.tunestrategy property)": [[347, "neural_compressor.strategy.strategy.TuneStrategy.evaluation_result"]], "initial_best_acc() (neural_compressor.strategy.strategy.tunestrategy method)": [[347, "neural_compressor.strategy.strategy.TuneStrategy.initial_best_acc"]], "initial_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[347, "neural_compressor.strategy.strategy.TuneStrategy.initial_tuning_cfg"]], "neural_compressor.strategy.strategy": [[347, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[347, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "set_q_func() (neural_compressor.strategy.strategy.tunestrategy method)": [[347, "neural_compressor.strategy.strategy.TuneStrategy.set_q_func"]], "set_tuning_space() (neural_compressor.strategy.strategy.tunestrategy method)": [[347, "neural_compressor.strategy.strategy.TuneStrategy.set_tuning_space"]], "setup_resume() (neural_compressor.strategy.strategy.tunestrategy method)": [[347, "neural_compressor.strategy.strategy.TuneStrategy.setup_resume"]], "show_baseline_info() (neural_compressor.strategy.strategy.tunestrategy method)": [[347, "neural_compressor.strategy.strategy.TuneStrategy.show_baseline_info"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[347, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[347, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[347, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "update_best_op_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[347, "neural_compressor.strategy.strategy.TuneStrategy.update_best_op_tuning_cfg"]], "optuningconfig (class in neural_compressor.strategy.utils)": [[348, "neural_compressor.strategy.utils.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.optuningconfig class method)": [[348, "neural_compressor.strategy.utils.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.optuningconfig method)": [[348, "neural_compressor.strategy.utils.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils": [[348, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[349, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[350, "module-neural_compressor.strategy.utils.tuning_space"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[351, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig class method)": [[351, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig method)": [[351, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[351, "module-neural_compressor.strategy.utils.tuning_structs"]], "compressionmanager (class in neural_compressor.training)": [[352, "neural_compressor.training.CompressionManager"]], "export() (neural_compressor.training.compressionmanager method)": [[352, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[352, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[352, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[352, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[353, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[353, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[353, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[354, "module-neural_compressor.utils.constant"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[355, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[355, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "neural_compressor.utils.create_obj_from_config": [[355, "module-neural_compressor.utils.create_obj_from_config"]], "kl_divergence (class in neural_compressor.utils)": [[356, "neural_compressor.utils.KL_Divergence"]], "layerhistogramcollector (class in neural_compressor.utils)": [[356, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[356, "neural_compressor.utils.LayerHistogramCollector.collect"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence method)": [[356, "neural_compressor.utils.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence method)": [[356, "neural_compressor.utils.KL_Divergence.get_threshold"]], "neural_compressor.utils": [[356, "module-neural_compressor.utils"]], "safe_entropy() (neural_compressor.utils.kl_divergence method)": [[356, "neural_compressor.utils.KL_Divergence.safe_entropy"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[357, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[357, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[357, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[357, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[357, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "neural_compressor.utils.load_huggingface": [[358, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[359, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[360, "module-neural_compressor.utils.options"]], "load() (in module neural_compressor.utils.pytorch)": [[361, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[361, "module-neural_compressor.utils.pytorch"]], "lazyimport (class in neural_compressor.utils.utility)": [[362, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[362, "neural_compressor.utils.utility.MODE"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[362, "neural_compressor.utils.utility.combine_histogram"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[362, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[362, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[362, "neural_compressor.utils.utility.equal_dicts"]], "get_size() (in module neural_compressor.utils.utility)": [[362, "neural_compressor.utils.utility.get_size"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[362, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[362, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[362, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[362, "neural_compressor.utils.utility.recover"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[363, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[363, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[363, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[363, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[363, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[363, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[363, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[363, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[364, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[364, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[364, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[364, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[365, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[365, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[365, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[365, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[365, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[365, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[365, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[366, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[366, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[367, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[367, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[367, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[367, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[367, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[367, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[368, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[368, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[368, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[368, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[368, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[368, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[369, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[369, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[369, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[369, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[369, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[370, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[371, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[371, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[371, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[371, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[371, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[372, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[372, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[372, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[373, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[373, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[373, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_evaluation_config"]], "generate_pruning_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[373, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_pruning_config"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[373, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[374, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[374, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[374, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[374, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[374, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[374, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[375, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[375, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[375, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[375, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[375, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[375, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[375, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[375, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[375, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[375, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[375, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[375, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[376, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[376, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[377, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[377, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[377, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[378, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[379, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[379, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[379, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[379, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[379, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[379, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[379, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[379, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[379, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[379, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[379, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[379, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[379, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[379, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[380, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "generate_tree() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[380, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.generate_tree"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[380, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "parse() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[380, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse"]], "parse_entry() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[380, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse_entry"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[381, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[381, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[381, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[381, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[381, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[381, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[382, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[383, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[384, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[384, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[384, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[385, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[385, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[385, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[386, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[386, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[386, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[386, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[386, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[387, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[387, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[387, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[387, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[387, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[388, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[388, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[389, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[389, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[389, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[390, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[391, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[391, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[391, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[392, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[392, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[393, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_pruning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_pruning_details"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[394, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[395, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[395, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[395, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[395, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[396, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[397, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[397, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[398, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[398, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[399, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.build_info"]], "delete_pruning_details() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.delete_pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[399, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.update"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[400, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[400, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[400, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[401, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[401, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[402, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[402, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[403, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[403, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[404, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[404, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[405, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[405, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[405, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[405, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[405, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[405, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[406, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[406, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[408, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[408, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[408, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_tuning_details"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_pruning_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.load_pruning_details_config"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[409, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[409, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[410, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_tuning_details"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_pruning_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.load_pruning_details_config"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[412, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[412, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[413, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[413, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[414, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[414, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[414, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[414, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[414, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[414, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[415, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[415, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[416, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[416, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[416, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[416, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[417, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[417, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[417, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[417, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[417, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[417, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[417, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[417, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[417, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[418, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[418, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[418, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[419, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[420, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[421, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[421, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[421, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[422, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[422, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[422, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[422, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[422, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[422, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[423, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[423, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[423, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[424, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[425, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[425, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[425, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[426, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[426, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[427, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[428, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[428, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[429, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[429, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[429, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[430, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[430, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[430, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[430, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[431, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[431, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[431, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[431, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[431, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[431, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[431, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[431, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[431, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[432, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[432, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[432, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[432, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[433, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[434, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[434, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[434, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[435, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[436, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[436, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[436, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[437, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[437, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[437, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[438, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[439, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[440, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[441, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[442, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[443, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[443, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[444, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[444, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[445, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[446, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[446, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[446, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[446, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[446, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[446, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[446, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[446, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[446, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[446, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[446, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[446, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[446, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[446, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[446, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "supports_pruning (neural_compressor.ux.components.model.model.model property)": [[446, "neural_compressor.ux.components.model.model.Model.supports_pruning"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[447, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[447, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[448, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[449, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[449, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[449, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[449, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[449, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[449, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[449, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[449, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[449, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[449, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[449, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[449, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[450, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[451, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[451, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[451, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[451, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[451, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[452, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[452, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[452, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[452, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[452, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[452, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[452, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[453, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[453, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[453, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[454, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[454, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[454, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[454, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[455, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[456, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[456, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[456, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[456, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[456, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[457, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[457, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[457, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[457, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[457, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[457, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[458, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[458, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[458, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[458, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[458, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[458, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[458, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[458, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[458, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[458, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "supports_pruning (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[458, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.supports_pruning"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[459, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[459, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[459, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[460, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[460, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[461, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[461, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[462, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[462, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[463, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[463, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[463, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[463, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[463, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[463, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[463, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[463, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[463, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[464, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[465, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[465, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[465, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[465, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[465, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[465, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[465, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[466, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[467, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[467, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[467, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[467, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[467, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[467, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[467, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[467, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[468, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[468, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[468, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[468, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[468, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[468, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[468, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[469, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[469, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[469, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[470, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[470, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[470, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[470, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[470, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[470, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[470, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[471, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[472, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[472, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[472, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[472, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[472, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[473, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[473, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[474, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[475, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[475, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[475, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[475, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[475, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[475, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[475, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[476, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[476, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[476, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[476, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[476, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[477, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[478, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[478, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[479, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[479, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[479, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[479, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[479, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[479, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[479, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[479, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[479, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[479, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[479, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[479, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[479, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[479, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.pruning": [[480, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[481, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[481, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[481, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[482, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "configuration_data (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[482, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[482, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[482, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.generate_config"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[482, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "optimization_script (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[482, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[482, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.parameters"]], "neural_compressor.ux.components.optimization.tune": [[483, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[484, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[484, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[484, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[484, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[485, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[485, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[485, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[485, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[485, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[485, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[485, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[485, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[485, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[486, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[486, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[486, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[486, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[486, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[486, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[486, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[486, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[486, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[487, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[487, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[487, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[488, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[488, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[488, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[489, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[490, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[490, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[490, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[491, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[491, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[491, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[492, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[492, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[492, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[492, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[492, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[492, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[492, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[492, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[492, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[493, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[493, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[493, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[494, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[495, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[495, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[495, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[495, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[495, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[495, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[495, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[495, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[496, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[496, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[497, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[497, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[497, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[498, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[499, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[499, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[499, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[499, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[499, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[499, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[499, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[499, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[500, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[500, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[500, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[500, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[500, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[501, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[501, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[501, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[501, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[501, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[502, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[502, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[502, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[502, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[502, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[502, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[502, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[502, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[502, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[502, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[502, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[503, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[503, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[503, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[503, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[504, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[504, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[504, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[505, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[505, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[505, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[505, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[505, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[505, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[505, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[505, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[505, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[505, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[505, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[506, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[507, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[507, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[507, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[507, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[508, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[508, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[509, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[509, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[509, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[509, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[509, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[509, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[509, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[509, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[509, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[509, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[509, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[509, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[509, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[509, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[509, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[509, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[509, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[509, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[509, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[509, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[509, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[509, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[510, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[510, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[510, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[510, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[510, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[510, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[510, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[510, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[510, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[510, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[511, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[511, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[511, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[511, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[511, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[512, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[512, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[513, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[513, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[514, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[515, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[515, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[515, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[515, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[515, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[515, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[515, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[515, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[515, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[515, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[515, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[515, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[515, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[515, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[516, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[516, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[516, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[516, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[516, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[517, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[517, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[518, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[518, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[518, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[518, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[519, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[519, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[519, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[519, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[519, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[519, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[519, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[519, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[519, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[519, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[519, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[519, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[520, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[520, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[520, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[520, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[520, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[520, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[520, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "get_label_shift_value() (neural_compressor.ux.utils.workload.evaluation.postprocessschema static method)": [[520, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema.get_label_shift_value"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[520, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[520, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[520, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[520, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[520, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[521, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[521, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[521, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[522, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[523, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[523, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[523, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[524, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[524, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[524, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[524, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[524, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "initialize_pruners() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[525, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.initialize_pruners"]], "neural_compressor.ux.utils.workload.pruning": [[525, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[525, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[525, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "serialize() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach method)": [[525, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize"]], "serialize_pruner() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[525, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize_pruner"]], "set_postprocess_transforms() (neural_compressor.ux.utils.workload.pruning.train method)": [[525, "neural_compressor.ux.utils.workload.pruning.Train.set_postprocess_transforms"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[526, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[526, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[526, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[526, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[526, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[526, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[527, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[527, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[527, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[527, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[527, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[527, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[527, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[527, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[527, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[527, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[527, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[527, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[527, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[527, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[527, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[528, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[528, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[528, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[529, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[529, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[529, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[529, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[529, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[529, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[529, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[529, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[529, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[529, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[529, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[529, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[529, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[530, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[530, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[530, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[530, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[530, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[530, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[530, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[530, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[530, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[530, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[530, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[530, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[530, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[531, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[531, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[532, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[533, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[533, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[533, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[533, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[533, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[533, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[533, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[533, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[533, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[533, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[534, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[534, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[534, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[534, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[534, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[534, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[534, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[534, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[534, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[534, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[534, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[534, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[534, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[535, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[535, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[536, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[536, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[536, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[536, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[536, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[536, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[537, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[538, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[538, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[538, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[539, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[539, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[540, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[540, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[540, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[541, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[541, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[541, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[542, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[542, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[542, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[542, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[542, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[542, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[543, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[543, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[543, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[543, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[543, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[544, "module-neural_compressor.version"]]}})