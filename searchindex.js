Search.setIndex({"docnames": ["CODE_OF_CONDUCT", "CONTRIBUTING", "FX", "NAS", "SECURITY", "Welcome", "adaptor", "api-documentation/adaptor", "api-documentation/adaptor/onnxrt", "api-documentation/algorithm", "api-documentation/apis", "api-documentation/common", "api-documentation/common/benchmark", "api-documentation/common/bleu", "api-documentation/common/criterion", "api-documentation/common/data", "api-documentation/common/data/dataloader", "api-documentation/common/data/datasets", "api-documentation/common/data/transforms", "api-documentation/common/metric", "api-documentation/common/model", "api-documentation/common/optimizer", "api-documentation/component", "api-documentation/component/Distillation", "api-documentation/component/MixedPrecision", "api-documentation/component/Nas", "api-documentation/component/Pruning", "api-documentation/component/Quantization", "api-documentation/component/Scheduler", "api-documentation/contrib", "api-documentation/model", "api-documentation/newAPI", "api-documentation/newAPI/benchmark", "api-documentation/newAPI/objective", "api-documentation/newAPI/quantization", "api-documentation/newAPI/training", "api-documentation/pythonic", "api-documentation/strategy", "api-documentation/strategy/strategy", "api-documentation/utils", "autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruner/criteria/index", "autoapi/neural_compressor/pruner/index", "autoapi/neural_compressor/pruner/logger/index", "autoapi/neural_compressor/pruner/patterns/index", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/pruner/pruner_legacy/index", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index", "autoapi/neural_compressor/pruner/pruners/index", "autoapi/neural_compressor/pruner/pruning/index", "autoapi/neural_compressor/pruner/regs/index", "autoapi/neural_compressor/pruner/schedulers/index", "autoapi/neural_compressor/pruner/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "bench", "benchmark", "dataloader", "dataset", "design", "distillation", "distillation_quantization", "distributed", "examples_readme", "export", "faq", "framework_yaml", "incompatible_changes", "index", "infrastructure", "installation_guide", "legal_information", "metric", "mixed_precision", "model", "objective", "orchestration", "platform_configuration", "pruning", "pruning_details", "publication_list", "pythonic_style", "quantization", "quantization_mixed_precision", "releases_info", "sigopt_strategy", "tensorboard", "transform", "tuning_strategies", "user_yaml", "validated_model_list"], "filenames": ["CODE_OF_CONDUCT.md", "CONTRIBUTING.md", "FX.md", "NAS.md", "SECURITY.md", "Welcome.md", "adaptor.md", "api-documentation/adaptor.rst", "api-documentation/adaptor/onnxrt.rst", "api-documentation/algorithm.rst", "api-documentation/apis.rst", "api-documentation/common.rst", "api-documentation/common/benchmark.rst", "api-documentation/common/bleu.rst", "api-documentation/common/criterion.rst", "api-documentation/common/data.rst", "api-documentation/common/data/dataloader.rst", "api-documentation/common/data/datasets.rst", "api-documentation/common/data/transforms.rst", "api-documentation/common/metric.rst", "api-documentation/common/model.rst", "api-documentation/common/optimizer.rst", "api-documentation/component.rst", "api-documentation/component/Distillation.rst", "api-documentation/component/MixedPrecision.rst", "api-documentation/component/Nas.rst", "api-documentation/component/Pruning.rst", "api-documentation/component/Quantization.rst", "api-documentation/component/Scheduler.rst", "api-documentation/contrib.rst", "api-documentation/model.rst", "api-documentation/newAPI.rst", "api-documentation/newAPI/benchmark.rst", "api-documentation/newAPI/objective.rst", "api-documentation/newAPI/quantization.rst", "api-documentation/newAPI/training.rst", "api-documentation/pythonic.rst", "api-documentation/strategy.rst", "api-documentation/strategy/strategy.rst", "api-documentation/utils.rst", "autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/update_enter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruner/criteria/index.rst", "autoapi/neural_compressor/pruner/index.rst", "autoapi/neural_compressor/pruner/logger/index.rst", "autoapi/neural_compressor/pruner/patterns/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/pruner/pruners/index.rst", "autoapi/neural_compressor/pruner/pruning/index.rst", "autoapi/neural_compressor/pruner/regs/index.rst", "autoapi/neural_compressor/pruner/schedulers/index.rst", "autoapi/neural_compressor/pruner/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "bench.md", "benchmark.md", "dataloader.md", "dataset.md", "design.md", "distillation.md", "distillation_quantization.md", "distributed.md", "examples_readme.md", "export.md", "faq.md", "framework_yaml.md", "incompatible_changes.md", "index.rst", "infrastructure.md", "installation_guide.md", "legal_information.md", "metric.md", "mixed_precision.md", "model.md", "objective.md", "orchestration.md", "platform_configuration.md", "pruning.md", "pruning_details.md", "publication_list.md", "pythonic_style.md", "quantization.md", "quantization_mixed_precision.md", "releases_info.md", "sigopt_strategy.md", "tensorboard.md", "transform.md", "tuning_strategies.md", "user_yaml.md", "validated_model_list.md"], "titles": ["Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNXRT", "Algorithm", "APIs", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Contrib", "Model", "newAPI", "Benchmark", "Objective", "Quantization", "Training", "Pythonic", "Strategy", "Strategies", "Utils", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Bench", "Benchmark", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Incompatible changes between v1.2 and v1.1", "Intel\u00ae Neural Compressor Documentation", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Introduction", "Full Publications/Events (52)", "Pythonic Style Access for Configurations", "Quantization", "Turn ON Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User YAML Configuration Files", "Validated Models"], "terms": {"In": [0, 2, 3, 6, 45, 90, 101, 102, 145, 205, 233, 243, 266, 270, 288, 301, 303, 312, 331, 338, 340, 352, 552, 554, 555, 557, 559, 569, 572, 573, 575, 576, 579, 580, 582, 583, 584, 585], "interest": [0, 5, 583], "foster": 0, "an": [0, 2, 3, 5, 6, 13, 45, 53, 77, 96, 101, 102, 104, 145, 169, 170, 185, 186, 199, 204, 208, 212, 217, 223, 227, 232, 233, 237, 242, 246, 250, 255, 259, 266, 267, 270, 271, 272, 279, 286, 289, 290, 291, 307, 308, 309, 312, 313, 314, 324, 331, 338, 341, 346, 433, 438, 514, 554, 555, 556, 561, 569, 570, 572, 576, 577, 582, 583, 584, 585], "open": [0, 5, 227, 266, 517, 552, 561, 562, 577], "welcom": [0, 1, 565], "environ": [0, 224, 308, 472, 504, 505, 513, 537, 552, 553, 567, 585], "we": [0, 2, 5, 6, 13, 45, 78, 101, 102, 104, 108, 121, 140, 169, 170, 185, 205, 224, 226, 227, 243, 267, 270, 277, 288, 289, 309, 312, 349, 365, 554, 559, 561, 563, 569, 572, 573, 575, 576, 578, 579, 582, 583, 585], "maintain": [0, 1, 5, 274, 316, 571, 575, 581], "make": [0, 1, 6, 78, 102, 169, 170, 185, 204, 242, 301, 303, 305, 331, 338, 341, 369, 388, 421, 453, 552, 553, 554, 563, 569, 579, 580, 582, 585], "particip": 0, "project": [0, 1, 223, 259, 288, 389, 392, 397, 399, 400, 403, 410, 411, 415, 416, 417, 418, 419, 420, 421, 445, 565, 577, 582, 585], "commun": [0, 308, 505, 539, 540, 541, 552], "harass": 0, "free": [0, 194, 195, 343, 569, 572, 582], "experi": [0, 194, 582, 585], "everyon": 0, "regardless": [0, 270, 312], "ag": [0, 281], "bodi": 0, "size": [0, 133, 140, 196, 198, 199, 205, 208, 212, 214, 217, 219, 223, 234, 236, 237, 243, 246, 250, 252, 255, 256, 259, 270, 279, 282, 288, 301, 312, 324, 327, 331, 369, 389, 399, 400, 522, 524, 525, 552, 554, 555, 559, 562, 572, 575, 576, 584, 586, 587], "disabl": [0, 175, 512, 541], "ethnic": 0, "sex": [0, 188], "characterist": 0, "gender": 0, "ident": [0, 108, 113, 114, 140, 169, 301, 331, 557], "express": [0, 81, 267, 309], "level": [0, 51, 54, 347, 354, 363, 366, 515, 537, 585], "educ": 0, "socio": 0, "econom": 0, "statu": [0, 140, 389, 400, 403, 408, 410, 416, 418, 419, 507, 520, 536, 549, 554, 572], "nation": [0, 208, 246], "person": [0, 188, 577], "appear": [0, 552], "race": 0, "religion": 0, "sexual": 0, "orient": 0, "exampl": [0, 1, 5, 53, 145, 177, 206, 207, 208, 219, 222, 223, 244, 245, 246, 256, 258, 259, 270, 271, 272, 274, 280, 304, 312, 313, 314, 316, 326, 339, 359, 397, 415, 421, 445, 469, 470, 471, 472, 517, 524, 552, 564, 565, 566, 580, 581, 584, 585], "behavior": [0, 1, 6, 270, 312, 563, 571, 583, 586], "contribut": [0, 5], "creat": [0, 3, 6, 40, 41, 42, 43, 45, 53, 81, 140, 152, 169, 196, 206, 208, 226, 227, 234, 244, 246, 260, 266, 270, 278, 279, 289, 290, 291, 307, 312, 346, 354, 355, 358, 362, 388, 405, 415, 416, 420, 421, 502, 523, 536, 549, 555, 571, 579, 582, 583, 585], "posit": [0, 113, 140, 223, 259, 288, 331, 552, 569], "includ": [0, 1, 5, 6, 51, 82, 83, 206, 208, 212, 215, 216, 217, 220, 223, 225, 244, 246, 250, 253, 254, 255, 257, 259, 265, 266, 270, 275, 288, 301, 305, 306, 312, 328, 331, 340, 341, 354, 355, 358, 552, 555, 567, 568, 569, 575, 576, 579, 580, 583, 585], "us": [0, 1, 2, 3, 5, 6, 13, 46, 48, 51, 53, 54, 72, 78, 79, 81, 82, 83, 101, 102, 104, 143, 145, 146, 152, 177, 186, 187, 188, 194, 195, 204, 205, 206, 207, 208, 209, 210, 213, 217, 220, 222, 223, 224, 225, 230, 242, 243, 244, 245, 246, 247, 248, 251, 255, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268, 270, 274, 275, 276, 277, 280, 282, 288, 289, 291, 293, 296, 298, 301, 303, 304, 305, 306, 307, 308, 309, 310, 312, 316, 327, 328, 331, 337, 338, 341, 346, 348, 349, 351, 352, 353, 354, 360, 361, 362, 363, 364, 365, 369, 416, 421, 426, 427, 431, 433, 445, 452, 454, 479, 483, 507, 524, 526, 536, 537, 552, 553, 554, 555, 557, 558, 559, 561, 563, 564, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "inclus": 0, "languag": [0, 13, 267, 288, 309, 577], "Being": 0, "respect": [0, 558, 563, 575, 576, 586], "differ": [0, 2, 3, 5, 13, 170, 182, 184, 185, 199, 208, 223, 225, 237, 246, 259, 265, 266, 267, 273, 274, 281, 289, 290, 292, 295, 301, 306, 307, 309, 315, 316, 331, 364, 552, 554, 555, 557, 559, 560, 561, 564, 566, 569, 571, 572, 575, 579, 583, 584, 585], "viewpoint": 0, "gracefulli": 0, "accept": [0, 45, 327, 552, 553], "construct": [0, 206, 209, 210, 213, 217, 220, 221, 226, 227, 228, 229, 231, 244, 247, 248, 251, 315, 316, 319, 321, 325, 362, 555, 559, 585], "critic": [0, 5], "focus": [0, 6], "what": [0, 186, 204, 242, 308, 338, 359, 552], "i": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 15, 22, 29, 30, 31, 36, 37, 39, 45, 46, 48, 51, 53, 54, 55, 78, 79, 81, 82, 83, 87, 88, 91, 94, 96, 98, 101, 102, 104, 115, 116, 119, 120, 126, 127, 128, 137, 139, 140, 145, 152, 162, 169, 170, 171, 175, 177, 181, 185, 186, 194, 195, 196, 197, 200, 204, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 219, 223, 224, 226, 227, 230, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 251, 253, 254, 255, 256, 259, 266, 267, 270, 272, 273, 274, 276, 279, 282, 286, 288, 291, 293, 298, 302, 303, 304, 307, 309, 312, 314, 315, 316, 324, 327, 328, 331, 332, 338, 339, 340, 342, 343, 346, 347, 352, 353, 354, 359, 368, 369, 388, 421, 433, 453, 456, 458, 459, 461, 463, 464, 465, 466, 472, 510, 512, 514, 516, 517, 522, 524, 526, 532, 537, 539, 552, 553, 554, 555, 557, 559, 561, 563, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586], "best": [0, 3, 5, 79, 195, 223, 259, 260, 265, 266, 277, 278, 289, 290, 306, 327, 351, 354, 567, 572, 579, 584, 585], "show": [0, 338, 552, 557, 559, 575, 585], "empathi": 0, "toward": [0, 557], "other": [0, 1, 2, 79, 101, 102, 104, 169, 205, 243, 272, 307, 314, 325, 365, 514, 518, 541, 552, 563, 566, 567, 568, 571, 572, 574, 575, 579, 584, 585, 587], "member": [0, 6, 266, 275], "unaccept": 0, "The": [0, 2, 3, 6, 7, 9, 10, 11, 13, 15, 22, 29, 30, 31, 36, 37, 39, 46, 48, 51, 54, 72, 79, 81, 87, 102, 104, 108, 113, 126, 127, 128, 140, 143, 145, 149, 151, 175, 177, 181, 182, 184, 186, 187, 188, 194, 195, 196, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 220, 223, 225, 227, 228, 230, 233, 234, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 257, 259, 260, 265, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 288, 289, 290, 291, 292, 293, 296, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 325, 327, 328, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 358, 359, 360, 362, 363, 364, 365, 368, 369, 389, 390, 392, 395, 399, 400, 403, 404, 406, 408, 409, 416, 421, 424, 426, 427, 428, 429, 430, 431, 432, 445, 452, 453, 505, 552, 553, 554, 555, 557, 558, 559, 561, 563, 564, 566, 567, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586], "imageri": 0, "unwelcom": 0, "attent": [0, 47, 56, 68, 206, 244, 286, 288, 557], "advanc": [0, 5, 177, 533, 579, 586], "troll": 0, "insult": 0, "derogatori": 0, "comment": [0, 555, 569, 584], "polit": 0, "attack": 0, "public": [0, 140], "privat": [0, 266, 275], "publish": [0, 568, 570], "inform": [0, 1, 4, 5, 6, 7, 9, 10, 11, 15, 22, 29, 30, 31, 36, 37, 39, 53, 81, 143, 177, 194, 195, 226, 227, 228, 229, 270, 301, 303, 304, 305, 307, 312, 315, 316, 324, 328, 331, 338, 339, 340, 341, 354, 386, 424, 453, 511, 512, 517, 518, 557, 561, 563, 565, 571, 575, 576, 580, 581, 583, 586, 587], "physic": [0, 224, 553], "electron": 0, "address": [0, 208, 246, 541, 552, 570, 577], "without": [0, 82, 83, 125, 140, 175, 223, 259, 270, 303, 312, 338, 524, 552, 554, 557, 559, 569, 575, 577, 578, 579, 585], "explicit": [0, 169], "permiss": 0, "which": [0, 2, 3, 5, 6, 13, 48, 53, 54, 79, 81, 89, 101, 102, 114, 117, 139, 140, 145, 169, 186, 194, 206, 207, 208, 219, 224, 244, 245, 246, 256, 266, 267, 270, 272, 280, 282, 290, 291, 293, 294, 295, 296, 301, 302, 303, 304, 305, 308, 309, 312, 314, 321, 324, 327, 328, 331, 332, 333, 335, 336, 337, 338, 341, 344, 346, 354, 365, 369, 522, 552, 554, 555, 557, 559, 563, 566, 569, 570, 571, 573, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586], "could": [0, 2, 81, 101, 102, 194, 195, 208, 246, 307, 331, 339, 343, 354, 558, 573, 575, 576, 579], "reason": [0, 115, 226, 227, 554, 583, 585], "consid": [0, 175, 274, 316, 557, 585], "inappropri": 0, "profession": 0, "set": [0, 3, 5, 46, 48, 51, 53, 54, 55, 79, 80, 91, 101, 102, 131, 140, 145, 169, 175, 182, 184, 186, 188, 194, 195, 196, 198, 206, 208, 211, 223, 224, 230, 234, 236, 244, 246, 249, 259, 260, 263, 265, 266, 270, 275, 276, 277, 279, 286, 288, 289, 293, 298, 302, 307, 308, 312, 325, 327, 331, 338, 342, 343, 354, 369, 371, 411, 412, 413, 416, 433, 479, 483, 491, 512, 516, 522, 523, 525, 526, 527, 532, 536, 537, 541, 552, 553, 555, 559, 563, 564, 566, 569, 570, 575, 578, 579, 582, 585, 586], "ar": [0, 1, 2, 3, 5, 6, 13, 46, 48, 55, 79, 96, 101, 102, 108, 152, 162, 191, 206, 223, 233, 244, 259, 266, 267, 270, 274, 280, 282, 286, 288, 291, 293, 298, 301, 302, 303, 304, 307, 308, 309, 312, 316, 331, 338, 339, 344, 346, 362, 368, 369, 453, 456, 458, 465, 509, 518, 552, 554, 555, 557, 558, 559, 560, 561, 563, 564, 566, 568, 569, 570, 572, 573, 574, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586], "clarifi": 0, "expect": [0, 1, 81, 152, 208, 246, 346, 372, 494, 517, 562, 579, 585], "take": [0, 2, 3, 46, 48, 81, 186, 194, 195, 199, 223, 227, 228, 237, 259, 301, 308, 315, 316, 331, 343, 346, 554, 557, 563, 575, 579, 580, 584, 585, 586], "appropri": 0, "fair": 0, "correct": [0, 170, 185, 270, 271, 272, 274, 302, 312, 313, 314, 316, 342, 474, 552], "action": 0, "ani": [0, 1, 102, 104, 152, 169, 177, 260, 266, 270, 272, 288, 312, 314, 365, 371, 372, 374, 376, 378, 379, 380, 381, 382, 383, 384, 386, 387, 389, 390, 392, 399, 400, 401, 402, 403, 404, 406, 409, 411, 412, 422, 424, 429, 430, 433, 435, 441, 450, 453, 456, 460, 463, 464, 465, 467, 470, 472, 475, 479, 483, 485, 488, 491, 494, 497, 502, 503, 509, 510, 512, 514, 516, 517, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 540, 541, 548, 549, 552, 554, 559, 582], "instanc": [0, 2, 6, 102, 143, 145, 146, 152, 194, 195, 206, 224, 244, 266, 271, 272, 274, 277, 289, 290, 313, 314, 316, 332, 333, 335, 336, 337, 343, 346, 354, 359, 389, 428, 432, 456, 465, 532, 552, 553, 586, 587], "have": [0, 1, 13, 108, 117, 140, 175, 186, 204, 222, 226, 227, 242, 258, 267, 270, 274, 281, 301, 303, 308, 309, 312, 316, 331, 338, 552, 554, 555, 559, 563, 568, 569, 570, 572, 575, 576, 579, 585], "right": [0, 2, 219, 256, 270, 312, 522, 552, 584], "remov": [0, 1, 57, 77, 78, 81, 90, 91, 94, 96, 108, 113, 114, 117, 118, 119, 131, 133, 140, 145, 162, 169, 225, 263, 272, 314, 324, 326, 389, 392, 399, 400, 403, 405, 406, 408, 410, 456, 517, 518, 525, 575, 576, 583], "edit": [0, 410, 416, 418, 419, 422], "reject": 0, "commit": [0, 1, 365], "wiki": 0, "issu": [0, 1, 4, 552, 567, 579, 583], "align": [0, 223, 259, 304, 584], "thi": [0, 1, 2, 3, 5, 6, 13, 45, 48, 77, 79, 81, 90, 96, 101, 102, 115, 120, 121, 137, 140, 145, 152, 162, 169, 170, 174, 177, 181, 185, 186, 194, 195, 205, 206, 207, 208, 209, 210, 211, 213, 222, 223, 226, 227, 232, 233, 243, 244, 245, 246, 247, 248, 249, 251, 258, 259, 266, 267, 270, 271, 272, 274, 279, 284, 285, 292, 293, 298, 301, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 316, 327, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 343, 346, 351, 368, 369, 552, 554, 555, 557, 559, 563, 566, 568, 569, 570, 571, 575, 576, 579, 580, 581, 582, 583, 584, 585], "ban": 0, "temporarili": 0, "perman": 0, "thei": [0, 152, 186, 224, 266, 288, 308, 331, 365, 557, 563, 569, 572, 575, 576], "deem": 0, "threaten": 0, "offens": 0, "harm": 0, "appli": [0, 101, 109, 124, 125, 129, 131, 133, 134, 135, 143, 153, 154, 155, 156, 157, 158, 161, 163, 164, 165, 166, 167, 170, 174, 233, 266, 268, 301, 303, 310, 326, 331, 335, 338, 552, 573, 575, 576, 579, 580, 582, 585, 586], "both": [0, 3, 6, 55, 175, 288, 290, 292, 558, 567, 578, 579, 585], "within": [0, 2, 265, 266, 270, 306, 312, 325, 338, 346, 570, 577], "space": [0, 1, 3, 6, 186, 194, 195, 265, 266, 272, 277, 279, 281, 289, 290, 291, 292, 306, 308, 314, 327, 338, 343, 344, 346, 347, 348, 349, 351, 353, 354, 357, 524, 575, 579, 586], "when": [0, 3, 13, 78, 87, 98, 101, 104, 152, 175, 186, 206, 207, 215, 216, 217, 223, 244, 245, 253, 254, 255, 259, 267, 268, 280, 288, 301, 302, 303, 308, 309, 310, 331, 332, 338, 342, 343, 522, 524, 537, 541, 552, 554, 555, 575, 576, 579, 584, 585], "individu": [0, 101, 102, 104, 278, 279, 289, 301, 331], "repres": [0, 78, 208, 213, 246, 251, 270, 272, 274, 312, 314, 316, 331, 338, 339, 340, 341, 342, 391, 393, 394, 396, 398, 401, 402, 405, 407, 522, 555, 561, 579, 585], "its": [0, 78, 81, 94, 131, 140, 143, 152, 177, 202, 208, 222, 223, 240, 246, 258, 259, 261, 262, 268, 269, 273, 274, 303, 307, 310, 311, 315, 316, 331, 338, 346, 347, 351, 552, 555, 557, 568, 569, 570, 574, 575, 576, 582, 584, 585], "offici": [0, 175, 267, 271, 272, 309, 313, 314, 552, 569], "e": [0, 51, 54, 80, 104, 279, 281, 307, 331, 514, 516, 541, 557, 575, 585], "mail": 0, "post": [0, 6, 46, 51, 54, 132, 133, 194, 195, 223, 233, 259, 263, 266, 307, 343, 536, 558, 559, 561, 566, 567, 583, 585], "via": [0, 101, 102, 152, 265, 266, 293, 298, 306, 541, 559, 566], "social": 0, "media": 0, "account": [0, 279, 582, 585], "act": [0, 204, 242], "appoint": 0, "onlin": [0, 5, 45, 582], "offlin": [0, 45, 369, 579], "event": [0, 583], "represent": [0, 2, 78, 90, 279, 389, 390, 392, 395, 399, 400, 403, 404, 406, 408, 409, 535, 558, 576, 579], "mai": [0, 1, 140, 169, 175, 327, 332, 333, 335, 336, 337, 554, 562, 568, 570, 574, 577, 579, 585], "further": [0, 101, 102, 104, 570, 571], "defin": [0, 3, 6, 48, 51, 54, 79, 80, 81, 121, 127, 140, 169, 186, 194, 195, 225, 266, 277, 278, 281, 289, 290, 291, 292, 293, 298, 301, 302, 303, 304, 305, 308, 325, 331, 338, 339, 340, 341, 343, 346, 359, 368, 447, 448, 449, 536, 552, 554, 555, 557, 563, 566, 569, 573, 575, 576, 579, 582, 583, 585, 586], "abus": 0, "otherwis": [0, 195, 208, 223, 246, 259, 354, 555, 578, 584], "report": [0, 1, 552, 582], "contact": [0, 581, 582], "inc": [0, 5, 79, 223, 259, 365, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 532, 577, 578, 581], "intel": [0, 1, 3, 4, 6, 79, 227, 230, 261, 266, 273, 274, 301, 304, 315, 316, 331, 339, 350, 355, 365, 504, 517, 554, 555, 556, 557, 558, 560, 561, 563, 567, 568, 570, 571, 572, 573, 574, 575, 577, 579, 580, 581, 583, 585, 586], "com": [0, 5, 177, 206, 244, 267, 268, 271, 272, 301, 304, 309, 310, 313, 314, 331, 339, 517, 552, 555, 567, 568, 581, 582, 587], "all": [0, 5, 6, 46, 48, 53, 54, 55, 72, 79, 81, 94, 97, 119, 120, 132, 152, 161, 166, 182, 184, 196, 197, 200, 204, 208, 212, 215, 216, 217, 220, 223, 224, 225, 230, 233, 234, 242, 246, 250, 253, 254, 255, 257, 259, 263, 266, 267, 270, 272, 273, 274, 284, 285, 286, 288, 291, 293, 294, 295, 296, 297, 298, 301, 304, 307, 309, 312, 314, 315, 316, 318, 319, 324, 327, 331, 337, 338, 339, 344, 346, 347, 348, 354, 369, 373, 385, 388, 397, 414, 416, 421, 426, 427, 440, 442, 445, 446, 452, 453, 456, 458, 465, 471, 478, 480, 484, 485, 487, 490, 496, 501, 505, 514, 518, 541, 552, 554, 555, 559, 563, 567, 573, 574, 575, 576, 577, 579, 580, 584, 585], "complaint": 0, "review": [0, 1], "investig": 0, "result": [0, 3, 13, 46, 48, 51, 54, 78, 79, 81, 175, 194, 219, 223, 224, 225, 256, 259, 266, 267, 270, 271, 272, 273, 274, 279, 281, 290, 309, 312, 313, 314, 315, 316, 327, 349, 354, 370, 372, 389, 390, 403, 404, 406, 410, 416, 419, 422, 499, 540, 543, 552, 554, 557, 559, 566, 568, 569, 572, 575, 576, 577, 579, 582, 583, 584, 585, 587], "necessari": [0, 3, 78, 260, 266, 571, 582, 585], "circumst": [0, 578], "team": [0, 272, 314, 580], "oblig": 0, "confidenti": [0, 552], "regard": [0, 580], "incid": 0, "detail": [0, 1, 5, 48, 81, 223, 259, 286, 389, 392, 399, 400, 403, 405, 406, 408, 410, 411, 413, 416, 417, 418, 419, 420, 424, 429, 492, 497, 511, 524, 563, 564, 569, 570, 575, 576, 581, 582, 583, 585, 587], "specif": [0, 3, 6, 48, 51, 54, 79, 80, 145, 146, 186, 197, 200, 206, 207, 208, 209, 213, 215, 216, 217, 224, 230, 244, 245, 246, 247, 251, 253, 254, 255, 266, 267, 270, 276, 277, 288, 289, 290, 308, 309, 312, 326, 332, 333, 335, 336, 337, 342, 365, 400, 411, 412, 413, 416, 424, 439, 552, 557, 563, 564, 569, 570, 571, 572, 575, 578, 585, 586], "polici": [0, 5, 351, 574, 586], "separ": [0, 222, 258, 540, 552, 564, 568, 573, 578], "who": [0, 347, 585], "do": [0, 13, 46, 48, 51, 54, 57, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 79, 82, 83, 111, 113, 137, 205, 206, 243, 244, 260, 261, 263, 266, 267, 270, 304, 307, 309, 312, 327, 339, 347, 368, 552, 555, 559, 563, 566, 567, 569, 575, 580, 581, 585], "follow": [0, 1, 2, 3, 6, 10, 55, 102, 104, 113, 120, 123, 126, 127, 128, 129, 140, 208, 246, 266, 267, 270, 288, 293, 298, 309, 312, 344, 552, 554, 555, 557, 559, 561, 563, 567, 568, 569, 570, 571, 573, 575, 576, 578, 579, 583, 585], "good": [0, 579, 585], "faith": 0, "face": [0, 5, 365, 577, 581], "temporari": [0, 369], "repercuss": 0, "determin": [0, 2, 328, 331, 338, 364, 537, 576], "": [0, 3, 51, 78, 80, 81, 90, 96, 104, 113, 140, 152, 169, 170, 171, 175, 185, 187, 188, 191, 196, 205, 208, 222, 223, 224, 226, 227, 228, 234, 243, 246, 258, 259, 266, 272, 280, 282, 288, 301, 303, 304, 308, 314, 315, 316, 321, 331, 338, 343, 347, 354, 369, 422, 453, 509, 510, 557, 559, 563, 566, 567, 570, 573, 574, 575, 576, 577, 578, 579, 581, 582, 586], "leadership": 0, "adapt": [0, 48, 51, 54, 79, 80, 555], "from": [0, 2, 3, 5, 6, 13, 46, 48, 51, 53, 55, 78, 79, 81, 95, 101, 102, 103, 104, 140, 143, 145, 152, 162, 169, 171, 175, 194, 195, 196, 199, 203, 206, 207, 208, 209, 210, 211, 213, 218, 219, 225, 226, 227, 233, 234, 237, 241, 244, 245, 246, 247, 248, 249, 251, 256, 260, 262, 263, 264, 266, 267, 270, 271, 272, 276, 279, 280, 281, 282, 286, 288, 291, 293, 298, 301, 302, 303, 304, 305, 307, 309, 312, 313, 314, 323, 324, 325, 327, 328, 331, 338, 339, 340, 341, 342, 346, 353, 354, 355, 358, 362, 365, 368, 369, 387, 389, 392, 393, 394, 396, 399, 400, 401, 402, 403, 405, 406, 408, 410, 411, 413, 416, 417, 418, 419, 420, 422, 433, 438, 456, 459, 468, 469, 470, 472, 497, 502, 516, 517, 522, 524, 525, 526, 532, 541, 543, 548, 549, 553, 554, 555, 557, 558, 559, 560, 561, 562, 566, 569, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585], "version": [0, 2, 5, 6, 48, 51, 53, 54, 77, 80, 81, 87, 194, 261, 263, 288, 326, 346, 365, 472, 507, 512, 524, 552, 563, 567, 568, 574, 577, 585], "1": [0, 2, 5, 6, 46, 48, 51, 54, 77, 78, 79, 81, 82, 88, 101, 108, 113, 124, 139, 143, 145, 173, 175, 183, 185, 186, 191, 196, 198, 201, 202, 203, 205, 206, 207, 209, 210, 213, 214, 219, 223, 224, 225, 226, 227, 234, 236, 239, 240, 241, 243, 244, 245, 247, 248, 251, 252, 256, 259, 265, 266, 270, 271, 272, 274, 279, 282, 286, 288, 293, 298, 301, 303, 306, 307, 308, 312, 313, 314, 316, 326, 331, 338, 343, 344, 352, 362, 372, 494, 502, 554, 555, 557, 561, 563, 569, 570, 572, 573, 574, 575, 576, 578, 579, 581, 582, 583, 584, 585, 586], "4": [0, 5, 6, 13, 81, 87, 113, 215, 216, 217, 218, 219, 220, 223, 253, 254, 255, 256, 257, 259, 267, 268, 270, 309, 310, 312, 331, 347, 514, 552, 553, 559, 562, 563, 566, 567, 569, 574, 575, 584, 585, 587], "For": [0, 2, 4, 6, 145, 208, 222, 223, 233, 246, 258, 259, 266, 270, 271, 272, 274, 279, 301, 304, 312, 313, 314, 316, 331, 339, 343, 347, 514, 552, 558, 559, 561, 563, 566, 575, 580, 583, 585, 586, 587], "answer": [0, 223, 259, 271, 272, 313, 314, 584, 587], "common": [0, 113, 169, 221, 266, 276, 282, 290, 291, 292, 301, 307, 308, 331, 362, 517, 518, 524, 555, 559, 561, 564, 567, 579], "question": [0, 1, 6, 223, 259, 271, 272, 313, 314, 567, 584, 587], "about": [0, 324, 328, 424, 453, 509, 511, 512, 517, 518, 552, 554, 580, 587], "see": [0, 2, 4, 223, 259, 267, 270, 286, 309, 312, 552, 568, 583, 585, 587], "faq": [0, 5], "page": [0, 1], "If": [1, 2, 96, 101, 102, 104, 108, 115, 140, 194, 195, 208, 223, 246, 259, 270, 282, 301, 302, 303, 312, 343, 344, 552, 553, 555, 559, 561, 567, 568, 569, 570, 572, 579, 582, 583, 584, 585], "you": [1, 2, 5, 204, 206, 242, 244, 270, 286, 288, 303, 312, 552, 555, 559, 561, 567, 568, 569, 575, 581, 582, 583], "improv": [1, 338, 346, 575, 576, 579, 580, 585, 587], "neural": [1, 6, 22, 53, 79, 177, 186, 218, 219, 220, 223, 224, 227, 230, 233, 256, 257, 259, 261, 266, 273, 274, 276, 293, 298, 301, 304, 306, 307, 308, 315, 316, 319, 321, 331, 339, 343, 349, 350, 355, 365, 428, 432, 456, 465, 504, 511, 524, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 577, 579, 581, 583, 584, 585, 586], "compressor": [1, 3, 6, 53, 79, 186, 218, 219, 220, 223, 224, 227, 230, 233, 256, 257, 259, 261, 266, 273, 274, 276, 301, 304, 306, 307, 308, 315, 316, 319, 321, 331, 339, 343, 350, 355, 365, 428, 432, 456, 465, 504, 511, 524, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 575, 577, 579, 581, 583, 584, 585, 586], "send": [1, 5, 493, 536, 541], "your": [1, 5, 204, 206, 242, 244, 270, 312, 552, 555, 559, 561, 567, 568, 575, 582, 583, 585], "new": [1, 53, 90, 137, 140, 162, 175, 196, 208, 217, 220, 223, 224, 234, 246, 255, 257, 259, 288, 301, 302, 305, 307, 327, 331, 341, 415, 416, 420, 536, 559, 570, 577, 579, 581, 582, 584, 586], "github": [1, 5, 177, 206, 244, 267, 268, 271, 272, 301, 304, 309, 310, 313, 314, 331, 339, 468, 470, 511, 552, 555, 560, 567, 568, 581], "view": [1, 5, 552, 560, 581], "how": [1, 2, 4, 6, 223, 259, 260, 266, 281, 282, 301, 328, 331, 338, 552, 554, 555, 557, 559, 564, 575, 576, 579, 584, 585, 586], "To": [1, 78, 270, 296, 301, 305, 312, 327, 331, 341, 514, 552, 555, 559, 561, 570, 578, 580, 581, 585, 586], "befor": [1, 137, 139, 152, 206, 233, 244, 260, 261, 263, 266, 293, 298, 301, 303, 304, 305, 331, 337, 338, 339, 340, 341, 351, 359, 410, 552, 555, 557, 559, 562, 563, 575, 579, 582, 583, 585], "below": [1, 2, 6, 88, 100, 101, 102, 108, 113, 307, 345, 347, 352, 554, 557, 559, 564, 569, 572, 573, 575, 578, 579, 582, 583, 585], "chang": [1, 115, 131, 170, 185, 303, 305, 338, 341, 346, 349, 369, 384, 390, 493, 515, 522, 554, 559, 562, 568, 569, 576, 583, 584, 585], "consist": [1, 2, 89, 97, 288, 552, 561, 585], "python": [1, 2, 10, 109, 152, 175, 208, 227, 246, 266, 270, 312, 369, 472, 552, 555, 559, 567, 577, 580, 584], "style": [1, 96, 199, 213, 237, 251, 555, 564], "pylint": 1, "check": [1, 5, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 96, 97, 101, 102, 113, 140, 145, 152, 175, 181, 195, 208, 246, 262, 266, 276, 302, 307, 331, 338, 342, 346, 347, 354, 369, 411, 416, 453, 456, 458, 459, 461, 463, 464, 465, 466, 472, 475, 493, 509, 510, 512, 517, 524, 526, 552, 559, 567, 581], "flake8": 1, "autopep8": 1, "clean": [1, 222, 225, 258, 389, 400, 403, 410, 411, 416, 418, 419, 420, 507, 523], "add": [1, 2, 13, 55, 77, 78, 86, 93, 98, 101, 102, 139, 140, 145, 149, 155, 158, 175, 206, 208, 230, 244, 246, 266, 267, 274, 288, 293, 298, 302, 304, 307, 309, 316, 324, 339, 342, 347, 382, 389, 390, 392, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 411, 415, 416, 417, 418, 419, 420, 422, 438, 524, 549, 552, 554, 555, 559, 561, 563, 569, 582, 583, 585], "unit": [1, 301, 331, 516, 524], "test": [1, 5, 55, 223, 259, 279, 552, 567, 587], "cover": [1, 564, 577], "would": [1, 140, 331, 570, 575, 576, 579], "like": [1, 2, 3, 6, 46, 48, 51, 54, 79, 108, 113, 131, 133, 140, 169, 175, 194, 195, 196, 208, 212, 217, 234, 246, 250, 255, 265, 266, 274, 280, 303, 306, 307, 316, 325, 331, 343, 359, 552, 557, 566, 573, 575, 579, 581, 585], "run": [1, 5, 6, 45, 46, 48, 51, 53, 55, 79, 140, 175, 194, 195, 205, 222, 224, 243, 258, 266, 279, 282, 302, 303, 338, 342, 343, 346, 347, 471, 517, 539, 540, 541, 552, 553, 559, 562, 563, 570, 575, 577, 579, 581, 582, 583, 585, 586], "ha": [1, 3, 6, 13, 46, 48, 51, 54, 79, 96, 97, 101, 102, 104, 108, 113, 114, 127, 140, 152, 169, 186, 224, 266, 267, 281, 301, 303, 308, 309, 331, 338, 552, 554, 561, 566, 570, 576, 578, 579, 580, 582, 585], "adopt": 1, "develop": [1, 2, 177, 327, 524, 567, 570, 577, 579, 580, 582], "certif": [1, 552], "origin": [1, 78, 79, 171, 181, 182, 184, 206, 223, 224, 244, 259, 266, 279, 288, 293, 298, 301, 302, 303, 304, 331, 332, 333, 335, 336, 337, 338, 339, 342, 347, 351, 369, 372, 555, 575, 576, 579, 584, 585, 586], "must": [1, 2, 223, 259, 270, 274, 312, 316, 553, 554, 567, 584], "agre": 1, "term": [1, 260, 266, 338, 340, 557, 568, 569, 572, 573, 585], "sign": [1, 552, 579, 582], "off": [1, 101, 102, 104, 580], "each": [1, 6, 48, 51, 54, 55, 79, 80, 81, 121, 140, 145, 171, 177, 204, 208, 211, 219, 223, 242, 246, 249, 256, 259, 268, 270, 271, 272, 281, 282, 288, 303, 310, 312, 313, 314, 325, 326, 327, 331, 338, 351, 552, 555, 557, 563, 572, 575, 576, 582, 583, 584, 585], "random": [1, 3, 89, 169, 175, 219, 223, 256, 259, 279, 292, 308, 346, 350, 369, 534, 578, 584, 586], "j": [1, 541], "org": [1, 2, 5, 270, 288, 303, 312, 328, 552, 567], "type": [1, 6, 13, 46, 48, 51, 53, 54, 55, 78, 79, 80, 81, 91, 94, 95, 96, 97, 102, 104, 108, 113, 119, 120, 126, 127, 128, 129, 131, 140, 143, 145, 146, 152, 162, 169, 175, 177, 181, 182, 184, 188, 195, 196, 204, 206, 208, 212, 215, 216, 217, 220, 223, 225, 230, 234, 242, 244, 246, 250, 253, 254, 255, 257, 259, 261, 263, 264, 266, 267, 268, 270, 273, 274, 276, 279, 281, 288, 291, 294, 295, 296, 301, 303, 305, 307, 309, 310, 312, 315, 316, 318, 319, 325, 326, 327, 331, 337, 338, 340, 341, 342, 344, 345, 346, 347, 351, 354, 355, 358, 359, 365, 368, 382, 387, 401, 402, 411, 412, 414, 416, 454, 509, 512, 514, 516, 519, 520, 552, 555, 559, 563, 566, 570, 575, 579, 582, 584, 585, 586], "featur": [1, 140, 191, 206, 207, 219, 223, 225, 244, 245, 256, 259, 288, 308, 553, 554, 556, 557, 570, 571, 577, 581, 584], "bug": 1, "fix": [1, 175, 206, 244, 303, 338, 555, 576, 585], "document": [1, 223, 259, 559, 570, 581, 584], "valid": [1, 3, 6, 46, 48, 51, 79, 80, 81, 88, 93, 101, 102, 140, 169, 208, 246, 270, 282, 302, 303, 312, 325, 331, 338, 342, 472, 541, 555, 557, 563, 566, 568, 575, 576, 579, 581], "api": [1, 2, 7, 9, 11, 15, 29, 30, 36, 37, 39, 53, 54, 79, 81, 104, 109, 137, 140, 152, 162, 186, 265, 266, 270, 304, 306, 308, 312, 343, 369, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 540, 541, 561, 565, 566, 581, 582, 585], "descript": [1, 2, 53, 140, 162, 169, 263, 264, 270, 290, 312, 326], "jira": 1, "ticket": 1, "xxx": [1, 208, 246, 555], "potenti": [1, 3], "risk": 1, "trigger": [1, 224, 266, 303, 338], "pr": [1, 569, 581], "been": [1, 3, 13, 97, 222, 258, 267, 281, 301, 303, 309, 331, 338, 552, 557, 570], "reproduc": 1, "hardwar": [1, 6, 51, 80, 512, 557, 566, 570, 574, 575, 576, 577, 578], "depend": [1, 46, 48, 53, 81, 96, 113, 194, 195, 224, 266, 277, 289, 290, 343, 562, 563, 578, 585], "librari": [1, 5, 227, 266, 567, 577, 579], "introduc": [1, 6, 108, 561, 563, 575, 576, 579, 581, 585], "submit": 1, "also": [1, 3, 5, 6, 13, 101, 102, 205, 208, 212, 217, 223, 243, 246, 250, 255, 259, 267, 309, 331, 343, 352, 552, 554, 566, 569, 572, 575, 579, 580, 585], "reach": [1, 195, 301, 305, 327, 331, 341, 354, 554, 575, 576, 585], "out": [1, 2, 5, 169, 206, 207, 208, 244, 245, 246, 265, 266, 288, 301, 306, 324, 331, 555, 578, 579], "intend": 1, "safe": [1, 152, 364], "collabor": 1, "adher": 1, "3": [2, 3, 5, 80, 104, 113, 145, 175, 208, 212, 217, 220, 223, 246, 250, 255, 257, 259, 270, 282, 312, 514, 552, 554, 555, 557, 559, 561, 563, 569, 570, 572, 575, 578, 579, 582, 584, 585, 587], "2": [2, 5, 6, 78, 80, 81, 82, 87, 108, 113, 139, 183, 207, 224, 245, 270, 272, 274, 282, 296, 297, 303, 312, 314, 316, 331, 338, 344, 346, 352, 555, 557, 563, 566, 568, 569, 570, 572, 574, 575, 579, 581, 582, 584, 585], "pytorch": [2, 3, 5, 6, 205, 206, 208, 211, 212, 215, 216, 217, 220, 223, 225, 230, 232, 243, 244, 246, 249, 250, 253, 254, 255, 257, 259, 261, 263, 264, 265, 266, 273, 274, 275, 299, 301, 304, 306, 308, 315, 316, 326, 331, 339, 343, 352, 363, 365, 369, 372, 445, 452, 475, 485, 505, 554, 557, 560, 561, 563, 566, 567, 570, 571, 575, 577, 578, 581, 585, 586], "toolkit": [2, 5, 567, 577], "transform": [2, 3, 5, 15, 41, 54, 78, 84, 96, 101, 102, 124, 125, 127, 161, 162, 166, 170, 171, 172, 173, 174, 186, 206, 207, 208, 209, 210, 211, 213, 215, 216, 217, 244, 245, 246, 247, 248, 249, 251, 253, 254, 255, 266, 285, 287, 288, 308, 382, 386, 392, 397, 411, 414, 416, 421, 423, 445, 524, 525, 526, 527, 532, 554, 555, 557, 558, 559, 577, 580, 583, 586], "nn": [2, 181, 225, 261, 263, 282, 286, 288, 326, 343, 365, 557, 561, 571, 583], "modul": [2, 261, 266, 283, 284, 285, 289, 299, 300, 330, 334, 513, 521, 529, 552, 554, 557, 561, 566, 569, 571, 575, 578, 580, 583], "three": [2, 6, 108, 206, 244, 266, 293, 298, 304, 339, 552, 554, 561, 567, 570, 573, 579, 580, 582, 583, 585], "main": [2, 5, 194, 230, 304, 339, 354, 504, 541, 559, 579], "compon": [2, 5, 260, 266, 277, 289, 293, 298, 306, 307, 308, 359, 505, 540, 543, 559, 567, 568, 573, 574], "symbol": [2, 53, 181, 267, 309, 343, 571], "tracer": 2, "intermedi": [2, 55, 78, 225, 566, 575, 579], "code": [2, 5, 6, 194, 195, 224, 266, 276, 284, 285, 288, 304, 307, 343, 411, 416, 434, 452, 517, 518, 549, 550, 554, 555, 557, 559, 564, 566, 568, 569, 572, 573, 575, 577, 578, 579, 582, 583, 584], "gener": [2, 5, 6, 46, 47, 48, 53, 81, 82, 83, 122, 124, 125, 137, 140, 141, 152, 169, 171, 175, 194, 195, 196, 205, 208, 209, 210, 211, 217, 220, 223, 224, 234, 243, 246, 247, 248, 249, 255, 257, 259, 263, 264, 266, 267, 275, 279, 286, 293, 301, 304, 307, 309, 326, 331, 339, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 387, 411, 416, 422, 477, 482, 486, 489, 491, 492, 497, 498, 499, 508, 517, 549, 552, 554, 557, 569, 570, 572, 574, 575, 576, 577, 579, 580, 583, 584, 585], "With": [2, 6, 131, 186, 308, 554, 572, 575, 577, 579, 582, 585, 587], "convert": [2, 46, 48, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 100, 108, 115, 121, 132, 134, 135, 161, 166, 206, 219, 222, 223, 244, 256, 258, 259, 266, 270, 274, 276, 290, 292, 302, 312, 316, 318, 319, 344, 359, 391, 398, 407, 502, 514, 570, 579, 580, 584], "torch": [2, 79, 177, 181, 187, 191, 225, 261, 263, 274, 282, 286, 288, 308, 316, 326, 331, 343, 365, 557, 559, 561, 570, 571, 579, 583], "graphmodul": [2, 79, 181, 580], "can": [2, 3, 5, 6, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 170, 177, 185, 186, 194, 195, 205, 208, 223, 224, 226, 227, 243, 246, 259, 266, 270, 272, 274, 286, 288, 293, 298, 301, 303, 304, 305, 308, 312, 314, 316, 327, 331, 338, 339, 341, 343, 365, 475, 507, 514, 524, 552, 553, 554, 555, 557, 559, 563, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 582, 583, 584, 585, 586], "resolv": [2, 4], "automat": [2, 5, 208, 211, 218, 219, 246, 249, 256, 265, 266, 275, 282, 306, 552, 553, 555, 566, 570, 573, 576, 584, 585], "insert": [2, 77, 81, 82, 111, 137, 139, 140, 143, 162, 173, 261, 263, 566, 575, 579, 580, 583], "quant": [2, 81, 181, 579], "dequant": [2, 77, 78, 91, 123, 126, 127, 128, 129, 131, 155, 156, 158, 177, 181, 369, 424, 583], "oper": [2, 47, 56, 78, 140, 175, 219, 256, 288, 301, 331, 347, 536, 540, 552, 553, 554, 561, 579, 584, 585], "floatfunct": 2, "wrap": [2, 53, 146, 152, 225, 270, 312, 382, 559], "tensor": [2, 46, 48, 51, 53, 54, 55, 77, 78, 79, 81, 104, 140, 152, 162, 169, 175, 177, 223, 225, 259, 261, 262, 263, 288, 296, 297, 301, 303, 305, 323, 324, 325, 326, 328, 331, 332, 338, 340, 341, 351, 369, 413, 416, 424, 453, 555, 575, 576, 579, 581, 583, 584, 585], "requir": [2, 6, 143, 152, 233, 266, 270, 282, 307, 312, 325, 344, 347, 371, 373, 382, 385, 440, 446, 453, 456, 458, 465, 471, 478, 479, 480, 481, 483, 484, 485, 487, 490, 491, 496, 501, 505, 552, 553, 554, 558, 559, 563, 567, 570, 571, 574, 575, 576, 579, 581, 582, 583, 585, 586], "special": [2, 146, 554, 569, 572], "handl": [2, 4, 77, 94, 95, 96, 175, 266, 279, 280, 281, 306, 366, 514, 540, 541, 554], "cat": 2, "output": [2, 6, 13, 45, 55, 77, 78, 79, 81, 87, 91, 93, 94, 102, 104, 108, 119, 120, 126, 128, 133, 139, 140, 143, 152, 169, 175, 186, 188, 194, 195, 222, 225, 227, 228, 232, 258, 260, 261, 263, 265, 266, 267, 270, 274, 279, 280, 288, 301, 308, 309, 312, 315, 316, 324, 325, 326, 331, 338, 343, 359, 360, 363, 365, 366, 389, 400, 403, 410, 416, 418, 419, 453, 463, 464, 465, 479, 483, 486, 509, 517, 525, 531, 552, 557, 559, 561, 563, 564, 569, 571, 573, 575, 578, 579, 583, 584, 585, 586], "paramet": [2, 13, 46, 48, 51, 53, 54, 55, 77, 78, 79, 81, 90, 91, 94, 95, 96, 97, 101, 102, 104, 108, 113, 119, 120, 121, 124, 125, 140, 143, 145, 146, 152, 162, 169, 171, 175, 177, 181, 182, 184, 186, 187, 188, 191, 194, 195, 196, 205, 206, 208, 212, 215, 216, 217, 219, 220, 222, 223, 224, 225, 230, 234, 243, 244, 246, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 288, 289, 290, 291, 292, 293, 296, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 321, 323, 325, 326, 327, 328, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 351, 354, 355, 358, 359, 362, 363, 365, 366, 368, 369, 382, 386, 391, 392, 411, 412, 413, 416, 422, 424, 433, 459, 477, 482, 486, 489, 492, 504, 509, 514, 516, 517, 523, 524, 526, 536, 537, 552, 554, 555, 557, 559, 566, 569, 575, 576, 579, 582, 584, 585, 586], "fuse": [2, 46, 53, 79, 81, 82, 83, 88, 92, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 126, 127, 128, 129, 131, 161, 165, 166, 177, 181, 583], "combin": [2, 6, 51, 53, 80, 194, 195, 219, 233, 256, 266, 307, 343, 369, 566, 573, 577, 580, 584, 585], "singl": [2, 101, 102, 155, 156, 162, 164, 165, 199, 206, 222, 223, 237, 244, 258, 259, 270, 279, 281, 303, 305, 312, 328, 341, 346, 405, 422, 441, 509, 543, 555, 567, 575, 576], "obtain": [2, 301, 302, 305, 331, 339, 340, 341, 342, 561, 582, 585], "higher": [2, 194, 195, 291, 343, 344, 557, 561, 569, 575, 576, 579, 582, 585], "accuraci": [2, 5, 79, 186, 194, 195, 224, 260, 265, 266, 274, 278, 279, 280, 282, 289, 293, 298, 306, 308, 316, 327, 343, 344, 347, 352, 354, 374, 390, 400, 410, 416, 418, 492, 516, 522, 525, 527, 543, 552, 554, 555, 558, 559, 561, 569, 570, 572, 573, 575, 576, 577, 578, 581, 582, 583, 586, 587], "perform": [2, 3, 5, 6, 96, 101, 102, 131, 186, 206, 218, 219, 222, 224, 244, 256, 258, 265, 266, 277, 278, 280, 282, 289, 290, 293, 298, 306, 308, 327, 338, 340, 347, 351, 374, 390, 400, 410, 416, 418, 507, 516, 525, 527, 534, 543, 552, 553, 554, 555, 556, 558, 561, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 585, 586, 587], "done": [2, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 557, 575, 579], "_": [2, 3, 6, 53, 194, 195, 343, 557, 559, 563, 569, 570, 571, 572, 575, 576, 579, 580, 581, 582, 583, 585, 586], "list": [2, 5, 6, 13, 46, 48, 51, 53, 54, 78, 79, 81, 87, 90, 113, 140, 145, 152, 169, 175, 181, 194, 195, 199, 206, 219, 222, 223, 224, 225, 237, 244, 256, 258, 259, 261, 263, 266, 267, 268, 270, 271, 272, 274, 279, 281, 282, 291, 293, 298, 301, 304, 309, 310, 312, 313, 314, 316, 325, 326, 327, 331, 339, 343, 347, 351, 354, 359, 360, 363, 382, 384, 386, 387, 389, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 422, 423, 424, 433, 436, 438, 439, 441, 453, 456, 459, 460, 463, 464, 465, 467, 472, 475, 477, 479, 482, 483, 486, 489, 492, 502, 509, 514, 516, 517, 518, 522, 524, 525, 526, 527, 528, 530, 531, 532, 534, 536, 543, 555, 563, 572, 575, 578, 580, 583, 585], "current": [2, 3, 6, 48, 51, 53, 54, 77, 80, 81, 96, 101, 102, 104, 108, 140, 145, 266, 276, 282, 293, 298, 301, 303, 304, 305, 328, 331, 332, 333, 335, 336, 337, 338, 339, 341, 346, 347, 351, 352, 354, 552, 559, 563, 567, 569, 572, 575, 576, 579, 585], "fusion": [2, 6, 51, 80, 92, 93, 95, 98, 101, 102, 103, 104, 107, 112, 129, 131, 139, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 563], "conv": [2, 46, 47, 55, 56, 68, 77, 82, 83, 92, 96, 100, 105, 106, 107, 127, 139, 140, 155, 165, 191, 308, 331, 575, 578], "relu": [2, 46, 108, 112, 113, 139, 153, 155, 157, 158, 163, 165, 167, 563, 583], "batchnorm": [2, 96, 101, 151], "linear": [2, 78, 191, 261, 263, 301, 308, 331, 557, 561, 575], "pleas": [2, 3, 4, 5, 6, 140, 177, 206, 207, 208, 211, 244, 245, 246, 249, 266, 293, 298, 301, 303, 304, 328, 331, 339, 552, 553, 555, 558, 559, 567, 569, 570, 575, 576, 580, 581, 582], "refer": [2, 5, 6, 13, 177, 206, 244, 266, 267, 268, 273, 274, 293, 298, 301, 303, 304, 309, 310, 315, 316, 328, 331, 339, 553, 554, 555, 558, 559, 564, 568, 569, 570, 572, 575, 578, 581, 584, 585], "graph": [2, 6, 54, 55, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 147, 160, 162, 166, 169, 170, 172, 173, 174, 175, 205, 243, 263, 265, 308, 318, 319, 320, 324, 325, 326, 376, 378, 380, 445, 453, 456, 464, 465, 467, 477, 478, 479, 484, 485, 489, 502, 503, 505, 525, 528, 540, 555, 557, 559, 564, 569, 571, 579, 580, 583], "10004": [2, 3, 6, 554, 557, 561, 563, 566, 570, 573, 578, 586], "backend": [2, 48, 51, 54, 55, 79, 80, 81, 192, 193, 197, 198, 202, 206, 207, 209, 210, 211, 212, 213, 217, 220, 223, 230, 235, 236, 238, 240, 244, 245, 247, 248, 249, 250, 251, 255, 257, 259, 275, 318, 319, 321, 324, 352, 559, 564, 566, 578, 579, 584, 586], "field": [2, 6, 140, 169, 208, 246, 270, 307, 312, 552, 559, 582, 585, 586], "indic": [2, 77, 199, 204, 206, 237, 242, 244, 260, 266, 270, 286, 288, 291, 292, 312, 331, 552, 562, 583], "user": [2, 3, 5, 6, 51, 80, 140, 186, 194, 195, 197, 200, 208, 211, 215, 216, 217, 223, 224, 230, 233, 246, 249, 253, 254, 255, 259, 265, 266, 279, 281, 293, 298, 304, 306, 307, 308, 338, 339, 343, 347, 354, 359, 369, 508, 553, 557, 563, 566, 569, 570, 571, 572, 573, 575, 577, 579, 580, 581, 583, 584, 585], "configur": [2, 3, 6, 45, 46, 48, 51, 53, 54, 79, 80, 81, 140, 148, 181, 186, 187, 191, 194, 195, 197, 200, 208, 211, 217, 224, 246, 249, 260, 261, 263, 265, 266, 270, 276, 277, 278, 279, 281, 289, 290, 293, 298, 302, 304, 306, 307, 308, 312, 326, 327, 331, 339, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 358, 359, 361, 362, 365, 367, 368, 370, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 389, 400, 411, 413, 416, 475, 477, 482, 486, 489, 492, 505, 507, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 539, 541, 552, 555, 558, 569, 572, 575, 581, 584, 585, 587], "And": [2, 104, 233, 266, 553], "default": [2, 5, 6, 13, 46, 48, 55, 79, 81, 132, 140, 169, 175, 186, 188, 191, 194, 195, 196, 198, 206, 207, 208, 219, 223, 225, 233, 234, 236, 244, 245, 246, 256, 259, 261, 263, 266, 267, 270, 273, 274, 276, 288, 302, 308, 309, 312, 315, 316, 325, 326, 342, 365, 369, 391, 393, 394, 396, 398, 401, 402, 407, 429, 430, 433, 450, 460, 512, 514, 524, 526, 527, 531, 532, 552, 555, 561, 563, 566, 569, 572, 575, 578, 580, 582, 584, 585, 586], "valu": [2, 46, 48, 51, 54, 55, 78, 79, 81, 89, 90, 96, 101, 102, 104, 124, 125, 140, 145, 169, 170, 171, 175, 185, 187, 188, 194, 195, 206, 209, 210, 219, 223, 224, 225, 244, 247, 248, 256, 259, 266, 270, 274, 280, 281, 286, 293, 298, 301, 302, 304, 312, 316, 326, 327, 328, 331, 332, 335, 339, 342, 343, 346, 351, 354, 360, 362, 363, 369, 382, 384, 386, 391, 393, 394, 396, 398, 401, 402, 407, 411, 412, 433, 435, 474, 506, 509, 510, 514, 516, 522, 524, 527, 532, 534, 535, 537, 548, 552, 555, 563, 569, 572, 575, 576, 578, 579, 584, 585, 586], "mean": [2, 96, 101, 102, 104, 196, 219, 223, 234, 256, 259, 270, 272, 274, 280, 282, 288, 301, 312, 314, 316, 327, 331, 351, 554, 559, 563, 569, 575, 576, 579, 584, 585, 586], "model": [2, 3, 6, 10, 11, 46, 48, 51, 53, 54, 55, 68, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 146, 148, 169, 175, 177, 181, 182, 184, 186, 191, 194, 195, 202, 205, 206, 208, 223, 224, 225, 227, 228, 233, 240, 243, 244, 246, 259, 260, 261, 262, 263, 264, 265, 266, 274, 275, 276, 277, 278, 280, 282, 287, 288, 289, 290, 292, 293, 298, 301, 302, 303, 304, 305, 306, 307, 308, 315, 316, 327, 331, 332, 333, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 359, 365, 368, 369, 371, 372, 373, 375, 386, 389, 397, 400, 403, 405, 413, 414, 415, 416, 417, 418, 420, 421, 422, 424, 428, 432, 433, 438, 439, 440, 443, 444, 445, 469, 470, 472, 475, 478, 479, 480, 481, 483, 484, 485, 486, 490, 491, 496, 498, 501, 502, 505, 506, 513, 522, 524, 529, 539, 540, 544, 553, 554, 555, 557, 558, 559, 564, 566, 568, 569, 570, 572, 573, 574, 575, 576, 577, 579, 581, 582, 583, 584, 585, 586], "neural_compressor": [2, 3, 5, 13, 553, 554, 555, 557, 559, 561, 564, 569, 570, 571, 572, 573, 575, 578, 579, 580, 581, 582, 584, 585, 586], "import": [2, 3, 5, 175, 266, 276, 279, 332, 359, 369, 553, 554, 555, 557, 559, 561, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585], "posttrainingquantconfig": [2, 5, 554, 571, 579, 582, 585], "conf": [2, 3, 5, 182, 184, 194, 195, 224, 266, 275, 276, 293, 298, 307, 318, 319, 324, 326, 332, 333, 335, 336, 337, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 359, 532, 535, 553, 557, 564, 570, 571, 573, 579, 582, 585], "eval": [2, 54, 233, 266, 270, 276, 312, 554, 583], "q_model": [2, 79, 177, 182, 184, 266, 276, 365, 554, 555, 559, 561, 564, 569, 571, 579], "fit": [2, 5, 186, 331, 343, 346, 553, 554, 555, 559, 564, 569, 570, 571, 575, 576, 579], "calib_dataload": [2, 5, 226, 227, 266, 306, 307, 326, 343, 554, 555, 564, 569, 579], "dataload": [2, 5, 6, 15, 41, 46, 48, 51, 53, 54, 55, 79, 81, 177, 181, 182, 184, 186, 194, 195, 206, 217, 224, 227, 233, 244, 255, 260, 266, 276, 293, 298, 303, 306, 307, 308, 326, 337, 343, 359, 362, 370, 375, 382, 386, 397, 411, 414, 416, 421, 423, 445, 486, 499, 502, 505, 513, 524, 525, 529, 552, 557, 559, 564, 569, 570, 573, 579, 583, 584, 586], "eval_func": [2, 194, 195, 233, 265, 266, 276, 307, 327, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 554, 555, 557, 559, 585, 586], "save": [2, 6, 46, 48, 51, 54, 79, 81, 140, 208, 212, 217, 246, 250, 255, 261, 263, 280, 290, 307, 318, 319, 320, 322, 324, 325, 326, 327, 347, 354, 359, 360, 363, 365, 369, 554, 564, 570, 571, 573, 575, 576, 579], "path": [2, 3, 6, 46, 48, 51, 54, 79, 81, 140, 169, 175, 186, 187, 206, 207, 208, 223, 244, 245, 246, 259, 260, 261, 263, 265, 266, 276, 277, 278, 279, 282, 289, 290, 293, 298, 302, 304, 306, 307, 308, 324, 325, 326, 339, 342, 343, 359, 365, 369, 370, 375, 389, 392, 399, 400, 403, 410, 411, 416, 418, 419, 433, 439, 450, 453, 456, 458, 459, 461, 463, 464, 465, 466, 470, 477, 482, 486, 489, 492, 493, 499, 509, 517, 522, 524, 525, 534, 549, 552, 554, 555, 559, 564, 569, 570, 571, 573, 584, 586], "approach": [2, 3, 5, 79, 187, 266, 277, 278, 279, 288, 289, 290, 354, 386, 525, 532, 554, 555, 557, 566, 577, 578, 585, 586], "quantizationawaretrainingconfig": [2, 579, 585], "prepare_compress": [2, 359, 557, 573, 575, 579], "compression_manag": [2, 359, 557, 573, 575, 579], "callback": [2, 81, 293, 298, 359, 360, 362, 363, 540, 573, 575, 579], "on_train_begin": [2, 233, 266, 293, 298, 303, 304, 337, 338, 339, 359, 557, 573, 575, 579], "loop": [2, 3, 327, 359, 563, 582, 585], "now": [2, 3, 223, 259, 522, 555, 559, 578, 584, 585], "auto": [2, 344, 369], "method": [2, 3, 5, 79, 140, 152, 169, 170, 181, 199, 204, 205, 206, 208, 212, 215, 216, 217, 220, 223, 226, 227, 237, 242, 243, 244, 246, 250, 253, 254, 255, 257, 259, 266, 273, 274, 279, 282, 288, 290, 291, 292, 296, 306, 315, 316, 318, 319, 340, 362, 363, 365, 366, 509, 514, 518, 536, 555, 557, 558, 569, 573, 575, 576, 579, 580, 584, 585], "avoid": [2, 206, 244, 583], "log": [2, 140, 173, 293, 298, 363, 366, 372, 389, 400, 403, 410, 416, 418, 419, 475, 509, 515, 516, 517, 518, 523, 537, 552, 582, 583, 585], "fail": [2, 140, 518], "trace": [2, 79, 177, 181, 261, 263, 343, 349, 585], "info": [2, 46, 48, 51, 54, 78, 79, 82, 140, 217, 220, 221, 226, 227, 231, 263, 301, 307, 320, 321, 324, 325, 326, 331, 342, 363, 366, 369, 389, 390, 392, 399, 400, 403, 404, 406, 409, 509, 512, 517, 524, 540, 552, 561, 571], "entir": [2, 343, 575, 576], "conduct": 2, "imper": 2, "control": [2, 46, 48, 51, 81, 114, 120, 182, 184, 282, 416, 421, 552, 575, 585], "flow": [2, 3, 266, 271, 272, 293, 298, 313, 314], "therefor": [2, 576, 579, 581], "int8": [2, 6, 46, 47, 48, 51, 54, 57, 58, 78, 79, 80, 81, 82, 83, 122, 141, 153, 154, 155, 161, 163, 164, 165, 166, 170, 175, 177, 185, 219, 256, 261, 262, 263, 326, 347, 424, 552, 553, 555, 558, 563, 578, 579, 580, 581, 582, 583, 584, 586], "lot": 2, "9": [2, 5, 191, 281, 308, 567, 575, 576, 578, 585, 586, 587], "between": [2, 6, 81, 170, 177, 185, 223, 225, 259, 271, 273, 274, 279, 281, 282, 313, 315, 316, 338, 424, 536, 540, 557, 561, 566, 569, 579, 581, 582, 584, 585], "don": [2, 45, 170, 185, 331, 514, 552, 585], "t": [2, 6, 45, 101, 102, 104, 140, 169, 170, 185, 223, 226, 227, 259, 272, 281, 282, 286, 307, 314, 331, 514, 523, 552, 557, 559, 570, 585, 586], "need": [2, 6, 45, 46, 48, 51, 53, 54, 79, 96, 115, 121, 139, 140, 162, 169, 186, 194, 195, 196, 204, 205, 208, 215, 216, 217, 223, 226, 227, 228, 229, 234, 242, 243, 246, 253, 254, 255, 259, 260, 266, 273, 274, 279, 286, 288, 293, 298, 307, 315, 316, 323, 324, 327, 331, 343, 347, 351, 354, 368, 369, 543, 552, 554, 555, 557, 559, 566, 570, 575, 578, 579, 580, 581, 584, 585, 586], "becaus": [2, 223, 259, 270, 301, 312, 331, 575, 579, 584, 585], "modifi": [2, 90, 96, 101, 102, 104, 115, 208, 246, 266, 293, 298, 304, 339, 503, 552, 559, 563, 586], "sourc": [2, 5, 46, 48, 55, 81, 227, 266, 268, 276, 288, 310, 362, 437, 568, 577], "8": [2, 5, 143, 222, 258, 514, 563, 567, 575, 577, 585, 587], "As": [2, 115, 270, 312, 552, 554, 557, 575, 576, 585], "cannot": [2, 270, 312, 512, 561, 562, 583], "iter": [2, 3, 6, 46, 48, 51, 53, 54, 55, 79, 81, 175, 182, 184, 194, 195, 199, 204, 208, 209, 212, 217, 226, 227, 237, 242, 246, 247, 250, 255, 290, 303, 305, 325, 338, 341, 343, 362, 389, 517, 525, 553, 555, 575, 576, 578, 583, 585, 586], "so": [2, 6, 82, 83, 152, 223, 259, 303, 359, 365, 562, 566, 569, 579, 580, 583, 584], "might": [2, 552, 585], "meet": [2, 307, 344, 347, 352, 561, 572, 577, 578, 579, 583, 585], "failur": [2, 536], "sometim": [2, 140, 169, 575, 579], "order": [2, 13, 181, 267, 268, 288, 307, 309, 310, 326, 345, 346, 347, 351, 352, 453, 456, 465, 526, 569, 575, 578, 583, 585], "successfulli": [2, 559, 577], "suggest": [2, 288, 292, 346, 582], "two": [2, 3, 127, 140, 177, 208, 212, 213, 217, 224, 246, 250, 251, 255, 270, 301, 305, 307, 312, 331, 338, 341, 369, 552, 555, 557, 559, 563, 569, 570, 575, 579, 580, 582, 585, 586], "first": [2, 3, 6, 55, 81, 127, 137, 170, 185, 188, 206, 222, 244, 258, 260, 266, 270, 312, 344, 347, 433, 552, 555, 561, 567, 570, 578, 579, 580, 582, 583, 585, 586], "pass": [2, 6, 111, 113, 115, 175, 186, 222, 258, 266, 286, 288, 293, 298, 304, 307, 339, 369, 467, 523, 536, 537, 553, 555, 557, 559, 561, 564, 569, 575, 578, 579, 580, 586], "non": [2, 113, 152, 230, 302, 369, 574, 575, 585], "traceabl": [2, 79], "class": [2, 3, 146, 291, 343, 447, 448, 554, 555, 557, 569, 572, 573, 581, 583, 585, 586], "name": [2, 5, 46, 48, 53, 54, 77, 78, 79, 81, 87, 96, 97, 101, 102, 104, 113, 140, 145, 146, 162, 169, 171, 175, 177, 182, 184, 186, 188, 206, 207, 208, 211, 212, 215, 216, 217, 220, 221, 223, 224, 225, 227, 228, 230, 231, 232, 244, 245, 246, 249, 250, 253, 254, 255, 257, 259, 261, 262, 263, 269, 270, 273, 274, 279, 280, 282, 288, 293, 296, 298, 301, 303, 305, 307, 308, 311, 312, 315, 316, 321, 323, 324, 325, 326, 327, 328, 331, 332, 338, 340, 341, 360, 363, 365, 369, 389, 393, 394, 396, 399, 400, 401, 402, 403, 405, 424, 433, 435, 453, 456, 458, 459, 465, 472, 473, 474, 475, 486, 502, 509, 512, 524, 526, 527, 548, 552, 555, 559, 563, 568, 569, 571, 574, 581, 582, 583, 585, 586, 587], "select": [2, 3, 206, 244, 278, 282, 289, 340, 352, 552, 566, 567, 576, 579, 583, 585], "proxi": 2, "object": [2, 3, 5, 13, 46, 48, 51, 53, 54, 72, 78, 79, 81, 91, 94, 95, 96, 97, 108, 113, 119, 120, 121, 126, 127, 128, 129, 140, 143, 146, 162, 169, 171, 177, 181, 182, 184, 186, 187, 188, 194, 195, 196, 197, 199, 200, 204, 206, 207, 208, 212, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 237, 242, 244, 245, 246, 250, 253, 254, 255, 257, 258, 259, 260, 263, 265, 266, 267, 270, 273, 274, 275, 278, 279, 281, 289, 290, 292, 293, 294, 295, 296, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 315, 316, 319, 321, 323, 324, 325, 326, 328, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 354, 360, 362, 363, 364, 366, 368, 369, 386, 401, 402, 405, 408, 449, 514, 517, 524, 534, 536, 537, 541, 552, 553, 554, 555, 562, 569, 571, 573, 575, 578, 579, 584, 585], "them": [2, 93, 96, 140, 206, 244, 554, 563, 564, 573, 575, 585], "prepar": [2, 5, 53, 79, 233, 260, 266, 293, 298, 304, 306, 411, 416, 504, 555, 559, 579], "dict": [2, 46, 48, 51, 53, 54, 55, 79, 81, 143, 145, 146, 152, 171, 175, 177, 181, 182, 184, 187, 188, 194, 195, 205, 208, 224, 225, 230, 243, 246, 261, 262, 263, 266, 269, 270, 271, 272, 274, 277, 279, 282, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 301, 302, 303, 304, 305, 311, 312, 313, 314, 316, 318, 319, 325, 326, 328, 331, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 358, 360, 362, 363, 368, 369, 370, 372, 375, 382, 383, 384, 386, 387, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 429, 430, 433, 441, 450, 453, 460, 468, 469, 470, 472, 474, 475, 476, 477, 482, 486, 489, 492, 493, 494, 495, 497, 499, 500, 502, 509, 510, 512, 514, 516, 517, 520, 522, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 536, 537, 540, 541, 543, 545, 547, 548, 550, 569, 575, 578, 583, 585], "http": [2, 5, 177, 206, 208, 244, 246, 267, 268, 270, 271, 272, 288, 301, 303, 304, 309, 310, 312, 313, 314, 328, 331, 339, 549, 552, 555, 567, 568, 581], "tutori": [2, 577], "prototyp": 2, "guid": [2, 5, 206, 244, 555, 557, 567], "html": 2, "highlight": [2, 438, 441, 552], "decor": [2, 3, 6, 46, 72, 101, 102, 104, 175, 182, 184, 217, 220, 223, 230, 255, 257, 259, 273, 274, 291, 296, 301, 303, 305, 315, 316, 327, 331, 337, 338, 341, 354, 369, 519, 585], "untrac": 2, "part": [2, 55, 260, 266, 270, 301, 303, 312, 338, 567, 570], "global": [2, 145, 191, 301, 308, 331, 332, 333, 335, 336, 337, 338, 369, 537, 575, 578, 585], "function": [2, 3, 6, 48, 51, 54, 77, 81, 96, 140, 169, 194, 195, 207, 233, 245, 265, 266, 277, 288, 289, 290, 293, 298, 304, 307, 324, 339, 360, 552, 553, 554, 557, 564, 566, 567, 569, 570, 575, 576, 579, 582, 583, 585], "call": [2, 3, 6, 45, 53, 152, 233, 266, 270, 281, 282, 293, 298, 301, 303, 304, 312, 332, 336, 337, 338, 359, 388, 421, 509, 517, 518, 552, 554, 564, 575, 579, 583, 584], "want": [2, 6, 101, 102, 104, 140, 204, 206, 242, 244, 303, 347, 359, 552, 555, 559, 567, 569, 572, 582, 583, 585], "move": [2, 81, 112, 578, 581], "keep": [2, 6, 301, 302, 342, 347, 581, 585], "should": [2, 3, 6, 48, 51, 54, 55, 77, 79, 80, 81, 88, 108, 113, 145, 146, 171, 186, 194, 195, 204, 206, 208, 212, 217, 222, 223, 227, 228, 242, 244, 246, 250, 255, 258, 259, 263, 268, 273, 274, 303, 307, 308, 310, 315, 316, 331, 338, 343, 354, 365, 369, 433, 514, 552, 555, 559, 569, 572, 576, 579, 584, 585, 586], "try": [2, 204, 242, 453, 456, 465, 537, 561, 579], "detect": [2, 79, 177, 181, 270, 274, 312, 316, 321, 453, 456, 465, 524, 552], "ssd": [2, 587], "resnet34": [2, 587], "ptq": [2, 559, 566, 579, 583, 585], "r34": 2, "py": [2, 6, 140, 175, 177, 268, 270, 271, 272, 303, 310, 312, 313, 314, 338, 540, 552, 559, 567, 579, 581, 583], "def": [2, 6, 101, 102, 104, 162, 194, 195, 343, 554, 555, 557, 559, 569, 579, 583, 585], "bboxes_labels_scor": 2, "bbox": [2, 270, 312, 569], "prob": 2, "criteria": [2, 265, 266, 293, 298, 301, 303, 306, 308, 329, 352], "0": [2, 5, 46, 48, 51, 77, 78, 79, 80, 87, 125, 140, 169, 175, 183, 186, 191, 196, 198, 201, 202, 203, 205, 206, 209, 210, 213, 219, 223, 225, 226, 227, 234, 236, 239, 240, 241, 243, 244, 247, 248, 251, 256, 259, 261, 263, 265, 266, 274, 279, 281, 282, 286, 288, 291, 293, 298, 301, 306, 308, 316, 326, 331, 341, 347, 509, 517, 552, 555, 557, 559, 561, 563, 568, 569, 570, 574, 575, 576, 578, 579, 581, 582, 583, 584, 585, 586], "45": [2, 281, 587], "max_output": 2, "200": [2, 222, 258, 585, 587], "box": [2, 223, 259, 270, 274, 312, 316, 346, 552, 569, 583, 584, 585], "label": [2, 13, 46, 48, 81, 186, 194, 195, 206, 208, 209, 210, 211, 214, 219, 223, 225, 227, 228, 244, 246, 247, 248, 249, 252, 256, 259, 267, 269, 273, 274, 279, 280, 308, 309, 311, 315, 316, 343, 441, 554, 555, 569, 584], "score": [2, 13, 267, 268, 270, 271, 272, 274, 287, 301, 303, 309, 310, 312, 313, 314, 316, 328, 331, 338, 340, 349, 352, 362, 569, 572, 575, 576, 582, 585], "zip": 2, "split": [2, 47, 56, 68, 78, 113, 116, 169, 222, 223, 258, 259, 279, 584], "squeez": [2, 112], "dbox": 2, "dlabel": 2, "dscore": 2, "decode_singl": 2, "append": [2, 181, 307, 346, 573], "return": [2, 3, 13, 46, 48, 51, 53, 54, 55, 79, 81, 82, 83, 84, 87, 90, 91, 94, 95, 96, 97, 101, 102, 104, 108, 113, 115, 119, 120, 124, 125, 126, 127, 128, 129, 140, 143, 145, 146, 152, 162, 169, 171, 173, 175, 177, 181, 182, 184, 188, 194, 195, 196, 198, 205, 208, 212, 215, 216, 217, 219, 220, 222, 223, 224, 225, 230, 234, 236, 243, 246, 250, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 288, 289, 290, 291, 292, 293, 296, 298, 301, 302, 303, 304, 305, 307, 309, 310, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 331, 337, 338, 339, 340, 341, 342, 343, 346, 347, 351, 354, 355, 358, 359, 362, 365, 368, 369, 389, 390, 392, 399, 400, 401, 402, 403, 405, 406, 408, 409, 433, 436, 437, 438, 439, 470, 509, 512, 514, 516, 517, 518, 524, 527, 536, 537, 540, 555, 559, 569, 571, 572, 579, 583, 585], "process": [3, 6, 46, 48, 51, 54, 79, 81, 146, 177, 194, 195, 206, 207, 208, 217, 219, 220, 223, 224, 233, 244, 245, 246, 255, 256, 257, 259, 260, 261, 263, 266, 277, 278, 281, 287, 289, 290, 293, 298, 301, 303, 304, 305, 307, 308, 331, 337, 338, 339, 341, 342, 343, 346, 368, 385, 468, 469, 472, 505, 509, 513, 516, 517, 525, 552, 554, 555, 557, 558, 559, 561, 573, 575, 576, 579, 583, 584, 585, 586], "autom": 3, "design": [3, 152, 205, 227, 228, 233, 243, 266, 281, 306, 315, 316, 347, 575, 576, 579], "artifici": 3, "network": [3, 5, 177, 279, 282, 303, 328, 331, 349, 552, 557, 558, 561, 574, 577, 579, 585], "ann": 3, "par": 3, "outperform": 3, "hand": [3, 270, 312, 552], "our": [3, 5, 170, 561, 582], "leverag": [3, 109, 557, 573, 579], "algorithm": [3, 5, 6, 10, 13, 53, 187, 222, 258, 267, 274, 277, 281, 289, 290, 292, 308, 309, 316, 346, 362, 364, 557, 563, 566, 575, 576, 579, 583, 585, 586], "built": [3, 6, 109, 152, 186, 192, 193, 197, 202, 206, 207, 212, 214, 216, 217, 219, 220, 223, 227, 228, 230, 235, 238, 240, 244, 245, 250, 252, 254, 255, 256, 257, 259, 307, 308, 315, 316, 319, 323, 555, 559, 572, 584, 585, 586], "grid": [3, 292], "bayesian": [3, 292, 308, 350, 578], "optim": [3, 5, 11, 54, 79, 81, 82, 83, 87, 91, 94, 95, 97, 108, 109, 113, 114, 119, 120, 123, 126, 127, 128, 129, 133, 146, 148, 169, 187, 191, 227, 233, 260, 265, 266, 280, 292, 303, 304, 306, 308, 326, 328, 337, 338, 339, 340, 346, 359, 360, 363, 370, 372, 376, 378, 380, 397, 401, 402, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 421, 422, 424, 425, 426, 427, 428, 431, 432, 445, 499, 505, 506, 516, 522, 525, 528, 532, 539, 544, 553, 557, 559, 563, 566, 567, 571, 574, 575, 577, 578, 579, 580, 582, 583, 585, 586], "propos": [3, 6, 290, 331, 557, 570, 575], "base": [3, 6, 13, 46, 48, 51, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 143, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 182, 183, 184, 185, 186, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 266, 267, 270, 273, 274, 275, 277, 278, 279, 281, 282, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 303, 305, 306, 307, 308, 309, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 335, 336, 337, 338, 340, 341, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 360, 363, 364, 365, 366, 369, 374, 375, 376, 378, 379, 380, 381, 384, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 428, 429, 430, 432, 435, 437, 438, 441, 451, 453, 456, 458, 460, 461, 463, 464, 465, 466, 474, 477, 482, 486, 489, 492, 502, 506, 508, 510, 512, 516, 517, 518, 519, 522, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 537, 538, 540, 542, 546, 547, 555, 558, 559, 563, 574, 576, 582, 583, 585, 587], "given": [3, 45, 53, 54, 55, 77, 81, 101, 102, 104, 145, 146, 175, 222, 223, 258, 259, 270, 312, 324, 325, 326, 331, 338, 343, 354, 365, 433, 439, 453, 456, 458, 459, 461, 463, 464, 466, 510, 524, 537, 575, 576, 584], "train": [3, 5, 6, 46, 48, 51, 54, 79, 81, 90, 96, 113, 114, 152, 194, 195, 206, 208, 223, 233, 244, 246, 259, 260, 266, 276, 277, 279, 280, 287, 289, 293, 298, 303, 304, 306, 307, 308, 337, 338, 339, 343, 354, 362, 532, 555, 557, 558, 561, 566, 570, 573, 575, 576, 577, 582, 585, 586, 587], "evalu": [3, 6, 13, 46, 48, 51, 54, 79, 81, 186, 194, 195, 206, 224, 233, 244, 260, 265, 266, 267, 270, 271, 272, 273, 274, 276, 277, 278, 281, 282, 289, 290, 293, 298, 303, 304, 307, 308, 309, 312, 313, 314, 315, 316, 327, 331, 338, 339, 343, 354, 362, 374, 376, 378, 380, 381, 382, 505, 513, 525, 529, 554, 555, 557, 564, 566, 569, 570, 572, 575, 579, 582, 583, 585, 586], "after": [3, 53, 55, 79, 91, 112, 181, 206, 219, 223, 226, 227, 233, 244, 256, 259, 260, 261, 263, 266, 279, 301, 303, 304, 305, 328, 331, 338, 339, 340, 341, 347, 359, 510, 552, 554, 555, 557, 561, 566, 569, 572, 573, 575, 576, 579, 580, 582, 583, 584, 585], "sever": [3, 169, 223, 259, 305, 341, 552, 557, 566, 570, 575, 576, 578, 584, 585, 586], "procedur": [3, 187, 331, 347], "lie": [3, 290], "pareto": [3, 290, 291], "front": [3, 290, 291], "dyna": [3, 266, 279, 280, 281, 282, 283, 289, 308, 566, 578], "super": [3, 272, 279, 282, 314], "metric": [3, 5, 6, 11, 13, 46, 48, 51, 54, 79, 81, 186, 194, 195, 224, 227, 260, 265, 266, 276, 277, 278, 280, 282, 289, 290, 291, 292, 293, 298, 306, 307, 308, 327, 343, 362, 382, 386, 392, 397, 411, 414, 416, 421, 445, 505, 513, 516, 521, 524, 525, 527, 543, 552, 554, 555, 559, 570, 582, 583, 585, 586, 587], "predictor": [3, 278, 279, 280, 282, 289], "predict": [3, 13, 175, 186, 223, 227, 228, 259, 267, 271, 272, 273, 274, 280, 282, 308, 309, 313, 314, 315, 316, 557, 569, 583, 584], "4x": [3, 579], "more": [3, 4, 5, 96, 169, 175, 194, 223, 259, 270, 286, 288, 301, 312, 331, 354, 552, 555, 557, 559, 566, 567, 569, 570, 572, 573, 575, 576, 580, 585, 587], "sampl": [3, 5, 111, 140, 196, 199, 204, 206, 207, 208, 212, 217, 219, 223, 234, 237, 242, 244, 245, 246, 250, 255, 256, 259, 273, 274, 291, 315, 316, 346, 400, 456, 525, 555, 566, 579, 584, 585, 586, 587], "effici": [3, 5, 554, 557, 573, 577], "than": [3, 88, 96, 175, 206, 223, 244, 259, 270, 312, 327, 369, 553, 555, 564, 569, 572, 573, 575, 579, 582, 584, 585], "typic": [3, 96, 145, 152, 266, 276, 307, 558, 575, 576], "one": [3, 5, 6, 13, 81, 139, 140, 145, 162, 197, 200, 217, 223, 233, 259, 266, 267, 270, 273, 274, 276, 279, 301, 304, 305, 309, 312, 315, 316, 331, 339, 341, 359, 518, 552, 557, 558, 559, 563, 566, 567, 569, 570, 572, 573, 575, 576, 578, 579, 581, 584, 585], "shot": [3, 233, 266, 303, 305, 328, 341, 566, 575, 576, 577], "shown": [3, 433, 552, 554, 557, 569, 572, 573, 585], "figur": [3, 575], "phase": [3, 182, 184, 307, 338, 339, 575, 576, 579, 580, 585], "small": [3, 88, 101, 102, 103, 270, 312, 349, 552, 585], "popul": [3, 281], "sub": [3, 79, 100, 101, 102, 121, 140, 224, 263, 266, 282, 354, 585], "randomli": [3, 223, 259, 292, 346, 353, 584, 585], "measur": [3, 6, 46, 48, 51, 54, 79, 81, 175, 224, 281, 282, 287, 327, 364, 543, 553, 557, 569, 583, 585], "provid": [3, 6, 101, 102, 140, 152, 194, 195, 217, 220, 223, 233, 255, 257, 259, 265, 266, 270, 279, 288, 293, 298, 306, 307, 312, 343, 363, 365, 433, 453, 459, 509, 518, 543, 552, 553, 554, 558, 559, 560, 561, 566, 567, 570, 571, 575, 578, 579, 583, 585, 586, 587], "initi": [3, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 146, 175, 186, 194, 195, 203, 206, 225, 233, 241, 244, 260, 266, 277, 278, 289, 290, 302, 303, 307, 308, 324, 338, 343, 354, 388, 411, 412, 421, 470, 502, 504, 512, 525, 532, 554, 555, 569, 575, 576, 585], "inner": 3, "multi": [3, 108, 113, 224, 266, 270, 281, 286, 288, 312, 327, 352, 382, 554, 555, 566, 572, 585], "evolutionari": 3, "extens": [3, 6, 79, 307, 459, 524, 563, 566, 570, 571, 577, 585, 586], "next": [3, 94, 199, 237, 264, 290, 305, 341, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 552, 578, 585], "cycl": 3, "continu": [3, 270, 301, 312, 331, 347, 575], "until": [3, 352, 585], "conclud": 3, "count": [3, 53, 290, 331, 347, 555], "met": [3, 195, 354, 563, 570, 579, 583], "tensorflow": [3, 5, 6, 47, 85, 87, 109, 110, 111, 115, 122, 130, 136, 140, 141, 142, 144, 147, 152, 160, 172, 175, 205, 206, 207, 208, 211, 212, 213, 215, 216, 217, 220, 223, 225, 230, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 257, 259, 263, 264, 265, 266, 268, 270, 273, 274, 275, 276, 306, 310, 312, 315, 316, 325, 343, 352, 369, 431, 432, 444, 445, 452, 501, 502, 503, 505, 552, 554, 557, 560, 561, 563, 566, 567, 570, 571, 575, 577, 578, 582, 585, 586], "Not": [3, 224, 233, 266, 293, 298, 369, 508], "yet": [3, 51, 54, 81, 331, 552], "simplest": 3, "launcher": [3, 557, 575], "experiment": [3, 13, 218, 308, 502, 555, 559, 561, 578, 580, 581, 584], "agent": 3, "nasconfig": [3, 187, 266, 278, 289, 290], "argument": [3, 266, 286, 288, 293, 298, 304, 307, 339, 371, 479, 483, 488, 491, 497, 509, 517, 537], "config": [3, 5, 51, 53, 54, 55, 79, 80, 81, 143, 145, 146, 148, 152, 186, 194, 195, 206, 224, 233, 244, 265, 266, 279, 287, 290, 293, 298, 301, 302, 303, 304, 305, 308, 328, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 358, 359, 362, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 384, 410, 416, 418, 419, 423, 424, 468, 470, 477, 479, 482, 483, 486, 488, 489, 491, 492, 499, 502, 505, 513, 524, 527, 528, 529, 530, 532, 534, 535, 537, 545, 547, 550, 552, 553, 557, 559, 561, 566, 570, 571, 573, 575, 578, 579, 580, 582, 583, 585], "search_algorithm": [3, 187, 266, 289, 290, 308], "nsga2": [3, 281], "supernet": [3, 281, 282, 284, 285], "ofa_mbv3_d234_e346_k357_w1": 3, "acc": [3, 51, 54, 274, 282, 316, 327, 583, 587], "mac": [3, 278, 280, 282, 287, 289], "50": [3, 270, 272, 281, 312, 314, 587], "num_ev": [3, 281], "250": 3, "results_csv_path": 3, "search_result": 3, "csv": [3, 279, 282, 524, 552], "batch_siz": [3, 186, 196, 198, 201, 202, 203, 204, 205, 206, 207, 226, 227, 234, 236, 239, 240, 241, 242, 243, 244, 245, 261, 263, 282, 287, 308, 326, 375, 389, 400, 502, 525, 554, 555, 559, 561, 564, 579], "64": [3, 223, 259, 584, 587], "dataset_path": [3, 282, 287, 525], "dataset": [3, 5, 6, 15, 46, 48, 51, 54, 79, 81, 186, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 217, 226, 227, 234, 236, 237, 239, 240, 241, 242, 243, 255, 265, 266, 270, 271, 272, 274, 276, 282, 306, 307, 308, 312, 313, 314, 316, 343, 362, 389, 397, 400, 403, 411, 416, 420, 421, 422, 433, 445, 522, 524, 525, 526, 554, 559, 569, 575, 576, 579, 581, 585, 586, 587], "imagenet": [3, 208, 211, 219, 246, 249, 256, 282, 583, 584, 586, 587], "ilsvrc2012": [3, 282], "under": [3, 140, 152, 208, 246, 368, 552, 555, 568, 569, 573, 575, 576, 579, 583, 585], "file": [3, 6, 79, 140, 169, 175, 184, 186, 187, 194, 195, 206, 207, 208, 211, 222, 223, 232, 244, 245, 246, 249, 258, 259, 260, 263, 265, 266, 270, 276, 277, 278, 279, 280, 282, 289, 290, 293, 298, 302, 304, 306, 307, 308, 312, 326, 327, 339, 342, 343, 365, 368, 369, 374, 375, 376, 377, 378, 379, 380, 381, 433, 470, 479, 483, 493, 509, 516, 517, 523, 524, 525, 537, 541, 545, 547, 549, 550, 552, 559, 562, 564, 568, 569, 571, 572, 575, 578, 583, 584], "input": [3, 6, 46, 48, 53, 55, 77, 78, 79, 81, 87, 94, 96, 97, 98, 101, 102, 104, 105, 106, 108, 113, 114, 116, 117, 119, 121, 139, 140, 145, 146, 152, 162, 169, 171, 175, 177, 181, 186, 194, 195, 206, 207, 208, 210, 219, 222, 223, 225, 227, 228, 233, 244, 245, 246, 248, 256, 258, 259, 260, 261, 262, 263, 265, 266, 270, 275, 282, 286, 288, 293, 298, 307, 308, 312, 315, 316, 321, 323, 324, 325, 326, 331, 338, 343, 359, 369, 371, 382, 405, 410, 411, 413, 416, 417, 418, 419, 420, 453, 456, 463, 464, 465, 467, 479, 483, 488, 491, 497, 522, 525, 531, 552, 553, 554, 555, 557, 559, 561, 563, 564, 569, 571, 575, 578, 579, 583, 584, 586], "aim": [3, 576, 585], "accord": [3, 6, 53, 81, 152, 194, 206, 207, 208, 217, 220, 223, 244, 245, 246, 255, 257, 259, 266, 288, 305, 306, 326, 331, 332, 335, 336, 337, 341, 344, 346, 347, 349, 351, 354, 362, 523, 555, 559, 575, 576, 580, 584, 585], "note": [3, 5, 46, 48, 51, 54, 79, 88, 266, 270, 293, 298, 304, 312, 331, 339, 352, 405, 416, 420, 552, 559, 563, 567, 575, 579, 583, 585, 586], "regist": [3, 6, 46, 72, 162, 182, 184, 208, 212, 215, 216, 217, 220, 223, 225, 230, 233, 246, 250, 253, 254, 255, 257, 259, 260, 266, 273, 274, 291, 292, 293, 294, 295, 296, 298, 301, 303, 305, 315, 316, 323, 326, 327, 328, 331, 337, 338, 340, 341, 346, 354, 555, 559, 569, 572, 585], "inherit": [3, 6, 48, 51, 54, 79, 80, 203, 223, 225, 233, 241, 259, 266, 303, 305, 338, 341, 555], "nasbas": [3, 277, 278, 289, 290], "own": [3, 48, 51, 54, 79, 80, 108, 204, 223, 242, 259, 552, 554, 555, 566, 569, 572, 582], "just": [3, 45, 132, 196, 217, 220, 221, 223, 226, 227, 228, 229, 231, 234, 259, 327, 573, 579, 584, 585], "registri": [3, 301, 303, 305, 328, 331, 338, 340, 341], "well": [3, 45, 194, 195, 343, 555, 579, 581, 586], "wai": [3, 207, 208, 211, 245, 246, 249, 552, 554, 555, 569, 573, 575, 576, 579, 585, 586], "mobilenetv3": [3, 281, 282], "lt": [3, 285, 555, 574], "wmt": 3, "en": 3, "de": 3, "center": [4, 5, 223, 259, 584, 585], "work": [4, 265, 266, 293, 298, 306, 554, 557, 575, 576, 580, 581, 583], "guidelin": [4, 5], "popular": [5, 6, 266, 557, 561, 575, 579, 585], "compress": [5, 233, 266, 293, 298, 359, 557, 566, 572, 573, 575, 576, 577, 579], "techniqu": [5, 266, 566, 573, 575, 576, 578, 579, 586], "mainstream": 5, "deep": [5, 6, 188, 554, 566, 567, 570, 577, 579, 585], "learn": [5, 6, 288, 554, 555, 561, 564, 566, 567, 570, 576, 577, 579, 583, 585], "framework": [5, 6, 46, 48, 51, 53, 54, 79, 186, 192, 193, 197, 198, 200, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 220, 223, 225, 226, 227, 230, 235, 236, 238, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 257, 259, 265, 266, 273, 274, 275, 282, 306, 307, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 352, 354, 362, 371, 386, 397, 414, 416, 421, 423, 425, 445, 453, 456, 458, 459, 465, 472, 474, 479, 483, 488, 491, 495, 506, 512, 524, 525, 552, 559, 560, 564, 566, 567, 569, 570, 575, 577, 579, 583, 584, 585, 586], "mxnet": [5, 6, 53, 201, 205, 208, 211, 212, 215, 216, 217, 220, 223, 239, 243, 246, 249, 250, 253, 254, 255, 257, 259, 265, 266, 273, 274, 306, 315, 316, 322, 343, 554, 560, 563, 566, 570, 571, 578, 585, 586], "formerli": 5, "known": [5, 226, 227, 346, 561, 575, 583, 585], "low": [5, 6, 51, 78, 80, 81, 194, 195, 209, 210, 247, 248, 265, 266, 275, 306, 553, 555, 559, 570, 577, 579, 585], "precis": [5, 6, 46, 48, 51, 54, 79, 80, 81, 82, 83, 113, 194, 195, 265, 266, 270, 272, 274, 275, 306, 312, 314, 316, 327, 344, 347, 354, 386, 397, 400, 401, 411, 412, 413, 414, 415, 416, 421, 445, 474, 479, 481, 482, 483, 506, 525, 528, 530, 552, 553, 558, 559, 563, 566, 577, 578, 579, 585], "tool": [5, 6, 175, 369, 577, 579], "deliv": [5, 577], "unifi": [5, 6, 197, 200, 217, 265, 266, 306, 516, 554, 564, 566, 571], "interfac": [5, 48, 51, 54, 79, 80, 121, 140, 143, 162, 171, 187, 191, 197, 200, 217, 265, 266, 281, 282, 293, 298, 306, 307, 308, 327, 354, 362, 364, 370, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 486, 492, 499, 511, 566, 574, 579, 581], "across": [5, 55, 265, 266, 275, 306, 556, 575, 576], "technologi": [5, 208, 246, 574], "prune": [5, 22, 169, 233, 266, 294, 295, 296, 298, 299, 301, 302, 303, 305, 307, 308, 326, 328, 329, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 359, 369, 380, 387, 400, 406, 416, 418, 445, 453, 465, 480, 505, 513, 524, 529, 559, 563, 566, 573, 577, 579, 586], "knowledg": [5, 225, 260, 266, 558, 566, 571, 586], "distil": [5, 22, 191, 225, 232, 233, 266, 308, 359, 566, 573, 586], "driven": [5, 327, 570, 572, 583], "tune": [5, 6, 46, 48, 51, 53, 54, 79, 81, 186, 194, 195, 206, 208, 244, 246, 265, 266, 306, 308, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 369, 381, 400, 408, 409, 416, 418, 422, 445, 475, 480, 493, 505, 513, 525, 529, 552, 554, 555, 559, 566, 568, 570, 572, 577, 580, 581, 582, 583, 586], "strategi": [5, 6, 10, 46, 48, 51, 53, 54, 79, 181, 192, 208, 246, 266, 306, 308, 386, 408, 506, 524, 534, 559, 566, 577, 578, 579, 580, 581, 586], "help": [5, 90, 232, 276, 324, 386, 524, 571, 585], "quickli": [5, 585], "find": [5, 6, 78, 101, 102, 104, 175, 195, 274, 290, 291, 316, 324, 346, 369, 470, 540, 552, 575, 582, 583, 585], "It": [5, 6, 79, 87, 96, 113, 194, 195, 232, 266, 272, 274, 279, 280, 291, 301, 306, 307, 314, 316, 331, 343, 346, 347, 348, 351, 354, 365, 552, 557, 575, 576, 579, 582, 585, 586], "implement": [5, 13, 48, 51, 54, 79, 80, 81, 121, 140, 162, 170, 171, 174, 194, 195, 201, 204, 205, 206, 208, 212, 217, 239, 242, 243, 244, 246, 250, 255, 267, 273, 274, 296, 301, 305, 309, 315, 316, 327, 331, 338, 339, 340, 341, 343, 349, 354, 554, 555, 576, 581, 583, 585, 586], "weight": [5, 6, 46, 48, 55, 77, 78, 79, 81, 94, 95, 96, 113, 140, 152, 169, 170, 177, 185, 261, 263, 273, 274, 288, 297, 301, 303, 305, 315, 316, 325, 326, 328, 331, 332, 333, 335, 336, 338, 340, 341, 349, 369, 429, 534, 552, 558, 561, 563, 564, 569, 572, 575, 576, 578, 579, 583, 585, 586], "predefin": [5, 375, 411, 415, 416, 524], "sparsiti": [5, 266, 293, 297, 298, 301, 303, 304, 305, 325, 326, 331, 335, 336, 337, 338, 339, 341, 369, 555, 566, 575, 576, 587], "goal": [5, 186, 195, 260, 265, 266, 293, 298, 306, 308, 327, 337, 343, 354, 525, 554, 573, 579, 585], "teacher": [5, 191, 225, 260, 266, 288, 308, 557, 558, 587], "student": [5, 206, 225, 232, 244, 260, 266, 555, 557, 558, 587], "ai": [5, 577, 580], "oneapi": [5, 567, 577], "analyt": [5, 567, 577], "visit": [5, 587], "websit": [5, 567], "io": [5, 53], "7": [5, 113, 169, 553, 562, 563, 567, 579, 581, 585], "10": [5, 208, 246, 270, 312, 346, 502, 552, 553, 555, 567, 575, 578, 584, 585], "releas": [5, 511, 524, 565, 567], "binari": [5, 60, 175, 274, 286, 288, 316, 562, 569], "stabl": [5, 552, 567, 577], "basic": [5, 222, 258, 277, 289, 301, 308, 331, 350, 354, 359, 566, 567, 578, 582], "pypi": [5, 552, 567], "pip": [5, 552, 559, 562, 567, 581], "full": [5, 78, 81, 206, 207, 208, 224, 244, 245, 246, 266, 552, 555, 562, 567, 568], "nightli": [5, 552, 567], "git": [5, 365, 552, 567], "clone": [5, 552, 567], "cd": [5, 552, 559, 567], "r": [5, 78, 104, 170, 185, 282, 552, 567, 574, 579, 587], "txt": [5, 211, 249, 517, 552, 555, 567], "simpl": [5, 223, 259, 552, 567, 582, 585], "found": [5, 260, 266, 277, 278, 289, 290, 346, 352, 508, 524, 541, 552, 570, 585], "A": [5, 48, 54, 79, 81, 88, 90, 101, 102, 104, 108, 109, 140, 143, 145, 146, 152, 169, 175, 181, 182, 184, 208, 212, 217, 222, 223, 226, 227, 228, 229, 246, 250, 255, 258, 259, 260, 266, 267, 270, 271, 272, 274, 277, 289, 290, 291, 292, 293, 294, 295, 296, 298, 301, 302, 303, 304, 305, 309, 312, 313, 314, 315, 316, 319, 321, 325, 328, 331, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 351, 352, 353, 355, 358, 555, 560, 563, 569, 571, 575, 577, 584, 585, 586], "fp32": [5, 6, 46, 48, 51, 77, 79, 80, 81, 82, 83, 113, 126, 128, 161, 166, 170, 177, 185, 194, 195, 261, 263, 274, 316, 326, 327, 347, 351, 362, 368, 369, 424, 552, 563, 569, 570, 578, 579, 580, 581, 582, 583, 585, 586, 587], "wget": 5, "storag": [5, 270, 312, 569], "googleapi": 5, "v1_6": 5, "mobilenet_v1_1": 5, "0_224_frozen": 5, "pb": [5, 81, 325, 343, 461, 464, 475, 553, 559, 571, 583, 587], "data": [5, 6, 11, 46, 48, 51, 53, 54, 55, 78, 79, 81, 89, 113, 140, 169, 175, 177, 181, 186, 194, 195, 224, 225, 226, 227, 261, 263, 264, 266, 282, 287, 301, 307, 308, 324, 331, 343, 346, 352, 362, 369, 370, 372, 375, 382, 383, 384, 386, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 433, 449, 450, 453, 456, 460, 465, 468, 469, 470, 472, 475, 477, 482, 486, 489, 492, 494, 499, 502, 509, 522, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 536, 540, 545, 547, 548, 550, 552, 554, 555, 559, 563, 567, 569, 570, 579, 580, 581, 582, 583, 584, 585], "dummi": [5, 93, 209, 210, 247, 248, 264, 274, 316, 416, 420, 526, 552, 555, 569], "shape": [5, 140, 152, 169, 175, 209, 210, 219, 223, 247, 248, 256, 259, 270, 286, 288, 301, 312, 323, 331, 445, 452, 453, 456, 465, 467, 505, 552, 555, 563, 584], "224": [5, 219, 256, 282, 554, 555, 559, 561, 584, 586], "eval_dataload": [5, 194, 195, 233, 265, 266, 276, 307, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 553, 564, 585], "search": [5, 13, 22, 102, 104, 113, 187, 194, 195, 265, 266, 267, 277, 278, 279, 281, 282, 289, 290, 291, 292, 306, 309, 346, 348, 349, 353, 411, 412, 439, 566, 569, 577, 583, 585], "jupyt": 5, "lab": 5, "manag": [5, 279, 280, 281, 282, 388, 421, 423, 446, 507, 523], "click": [5, 552, 566, 577, 583], "12": [5, 40, 552], "onnxruntim": [5, 6, 54, 202, 240, 266, 275, 428, 432, 566, 578], "raw": [5, 207, 211, 214, 245, 249, 252, 351, 569, 585], "vision": 5, "classif": [5, 206, 223, 244, 259, 274, 304, 316, 339, 557, 569, 577], "resnet": [5, 559, 587], "resnet50": [5, 282, 559, 579, 582, 587], "v1": [5, 41, 42, 43, 81, 175, 218, 219, 256, 271, 272, 274, 313, 314, 316, 325, 559, 569, 571, 581, 582, 587], "inc_bench": [5, 308, 505, 552], "xeon": [5, 568, 570, 574, 577, 579, 580, 587], "scalabl": [5, 570, 574, 577, 579, 580, 587], "skylak": 5, "cascad": 5, "lake": [5, 570, 577], "cooper": [5, 570, 577], "icelak": 5, "futur": [5, 96, 194, 195, 226, 227, 566, 570], "sapphir": 5, "rapid": 5, "flex": 5, "seri": [5, 219, 256, 584], "amd": [5, 566, 587], "arm": [5, 566, 587], "nvidia": [5, 566, 575, 579, 587], "o": [5, 53, 104, 433, 574], "cento": [5, 517], "ubuntu": [5, 574], "20": [5, 223, 259, 281, 282, 574, 584, 586, 587], "04": [5, 514, 574, 587], "11": [5, 43, 514, 552, 569, 570], "6": [5, 51, 113, 552, 563, 579, 585, 587], "variabl": [5, 152, 208, 224, 246, 266, 275, 281, 325, 340, 346, 512, 537, 552, 576, 585], "tf_enable_onednn_opt": [5, 552], "enabl": [5, 79, 81, 139, 288, 303, 338, 512, 552, 559, 570, 574, 575, 576, 577, 580, 585], "onednn": [5, 579], "v2": [5, 177, 349, 559, 581, 585, 587], "420": [5, 566], "speedup": [5, 566, 579], "geomean": [5, 566], "2x": [5, 566, 574], "up": [5, 53, 101, 102, 104, 135, 223, 259, 266, 282, 293, 298, 302, 327, 410, 552, 559, 563, 566, 577, 578, 579, 582, 584, 586], "vnni": [5, 369, 566, 578, 579], "while": [5, 6, 48, 81, 171, 288, 303, 338, 346, 552, 555, 566, 570, 578, 579], "minim": [5, 170, 185, 346, 557, 569, 575, 576, 579, 585], "loss": [5, 79, 152, 191, 195, 225, 233, 265, 266, 274, 293, 298, 306, 308, 316, 327, 359, 557, 558, 559, 569, 570, 573, 575, 576, 579, 585, 586], "over": [5, 208, 212, 217, 246, 250, 255, 270, 274, 312, 316, 346, 566, 569, 578, 585], "30": [5, 223, 259, 566, 584, 587], "avail": [5, 7, 9, 10, 11, 15, 22, 29, 30, 31, 36, 37, 39, 45, 321, 386, 391, 393, 394, 398, 401, 402, 407, 472, 552, 566, 574, 585], "here": [5, 45, 102, 104, 152, 270, 277, 288, 289, 312, 552, 555, 559, 561, 563, 569, 575, 579, 581, 582], "overview": 5, "dive": [5, 563], "mix": [5, 6, 81, 82, 83, 344, 481, 482, 483, 530, 566], "orchestr": [5, 359, 566], "benchmark": [5, 11, 46, 48, 51, 81, 226, 227, 266, 307, 308, 327, 369, 390, 397, 400, 410, 416, 418, 421, 422, 445, 505, 506, 516, 522, 539, 544, 571, 585, 586, 587], "distribut": [5, 53, 170, 185, 186, 196, 198, 199, 201, 202, 203, 204, 205, 226, 227, 234, 236, 237, 239, 240, 241, 242, 243, 260, 266, 293, 298, 308, 346, 364, 512, 557, 567, 579, 581, 585, 587], "tensorboard": [5, 6, 46, 48, 51, 54, 79, 81, 308, 359, 362, 369], "coder": [5, 566, 577], "topic": 5, "adaptor": [5, 10, 182, 184, 233, 266, 362, 566, 580, 581, 583], "mleffici": [5, 577], "dec": [5, 577], "2022": [5, 40, 41, 42, 43, 568, 587], "One": [5, 345, 552, 555, 559, 566, 575, 576, 577, 585], "acceler": [5, 557, 575, 576, 577, 580, 585], "hug": [5, 365, 577], "diffus": [5, 577], "togeth": [5, 223, 259, 301, 307, 331, 557, 567, 577, 583, 584], "tencent": [5, 577], "deepen": [5, 577], "build": [5, 6, 53, 145, 152, 162, 182, 183, 184, 185, 263, 264, 277, 279, 289, 290, 320, 322, 324, 325, 326, 389, 390, 392, 403, 404, 406, 409, 433, 493, 502, 524, 541, 552, 567, 571, 577, 582, 585], "cloud": [5, 577], "foundat": [5, 577], "digit": [5, 267, 309, 577], "intellig": [5, 577], "industri": [5, 569, 577], "fast": [5, 577], "achiev": [5, 265, 266, 306, 561, 569, 573, 575, 576, 577, 579, 583, 585], "signific": [5, 577, 579], "speed": [5, 576, 577, 579], "sota": [5, 577], "nov": [5, 577], "legal": [5, 565], "secur": [5, 574, 577], "activ": [5, 6, 46, 47, 48, 51, 54, 55, 56, 68, 79, 81, 140, 158, 177, 232, 261, 263, 326, 429, 552, 558, 563, 574, 578, 579, 583, 586], "resum": [5, 194, 195, 344, 345, 348, 349, 352, 353, 354, 359, 365], "5": [6, 113, 210, 219, 225, 248, 256, 270, 274, 312, 316, 347, 552, 555, 563, 569, 574, 575, 578, 584, 585, 586, 587], "infer": [6, 53, 55, 101, 102, 162, 169, 265, 266, 306, 325, 343, 557, 570, 572, 575, 576, 577, 579, 583, 585], "solut": [6, 170, 185, 279, 562, 577, 585], "onnx": [6, 54, 55, 68, 77, 78, 202, 240, 261, 262, 263, 264, 318, 319, 324, 326, 359, 367, 372, 475, 554, 560, 561, 563, 566, 570, 571, 577, 578, 585], "runtim": [6, 517, 554, 560, 563, 566, 578], "layer": [6, 46, 48, 51, 54, 79, 80, 81, 102, 104, 145, 146, 147, 148, 149, 151, 152, 225, 232, 266, 288, 293, 298, 301, 302, 304, 331, 339, 342, 360, 362, 363, 369, 536, 558, 566, 575, 576, 581], "bridg": [6, 566], "vanilla": [6, 566], "quantiz": [6, 22, 46, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 123, 127, 129, 131, 134, 137, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 174, 177, 181, 182, 184, 186, 194, 195, 219, 226, 227, 233, 256, 261, 263, 264, 265, 266, 276, 307, 308, 326, 345, 346, 347, 348, 349, 351, 352, 353, 354, 359, 360, 363, 364, 365, 368, 369, 381, 386, 416, 418, 424, 505, 513, 525, 529, 552, 554, 555, 559, 561, 563, 564, 566, 569, 570, 571, 573, 577, 581, 583, 584, 585, 586], "onli": [6, 48, 51, 54, 55, 79, 81, 82, 83, 87, 96, 97, 101, 102, 104, 108, 121, 139, 145, 164, 168, 170, 185, 206, 224, 226, 227, 230, 244, 266, 276, 288, 301, 303, 331, 332, 338, 352, 524, 534, 536, 537, 553, 554, 559, 561, 563, 570, 575, 576, 578, 583, 585, 586], "complet": [6, 97, 552, 585, 586, 587], "subclass": [6, 46, 72, 182, 184, 201, 205, 208, 212, 215, 216, 217, 220, 223, 230, 239, 243, 246, 250, 253, 254, 255, 257, 259, 273, 274, 291, 294, 295, 296, 301, 303, 305, 315, 316, 327, 331, 337, 338, 341, 354], "packag": [6, 346, 377, 385, 391, 393, 394, 396, 397, 398, 401, 402, 405, 407, 426, 427, 431, 434, 440, 442, 445, 446, 452, 471, 473, 478, 481, 484, 485, 487, 490, 496, 501, 505, 539, 552, 562, 567, 577, 581, 585], "adaptor_registri": [6, 46], "abc": [6, 143, 272, 314, 453, 516, 583, 585], "abcadaptor": 6, "__init__": [6, 554, 555, 569, 585], "self": [6, 82, 97, 127, 266, 270, 293, 303, 312, 346, 537, 552, 554, 555, 566, 569, 582, 583, 585], "framework_specific_info": [6, 46, 48, 51, 54, 79, 81], "tune_cfg": [6, 46, 48, 51, 53, 54, 79, 81, 175, 181, 195, 347, 585], "q_func": [6, 46, 48, 51, 54, 79, 81, 194, 195, 266, 306, 307, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 585], "none": [6, 13, 46, 48, 51, 53, 54, 55, 77, 78, 79, 81, 82, 83, 97, 124, 140, 146, 152, 169, 175, 177, 181, 186, 187, 188, 191, 194, 195, 196, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 219, 223, 224, 225, 226, 227, 233, 234, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 256, 259, 260, 261, 263, 265, 266, 267, 270, 273, 274, 275, 276, 277, 279, 281, 282, 286, 288, 289, 290, 293, 297, 298, 302, 303, 306, 307, 308, 309, 312, 315, 316, 322, 324, 325, 326, 327, 337, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 359, 360, 362, 363, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 390, 391, 392, 393, 394, 396, 398, 400, 401, 402, 404, 407, 410, 411, 412, 415, 416, 419, 421, 422, 423, 438, 453, 456, 458, 465, 470, 472, 477, 479, 482, 483, 486, 488, 489, 491, 492, 493, 494, 498, 499, 502, 504, 507, 509, 510, 512, 515, 517, 518, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 534, 536, 537, 541, 549, 555, 569, 579, 583, 584, 585], "postprocess": [6, 46, 48, 51, 54, 79, 81, 186, 217, 220, 223, 224, 227, 255, 257, 259, 265, 266, 276, 288, 306, 307, 308, 362, 527, 532, 583, 584], "fals": [6, 46, 48, 51, 53, 54, 55, 77, 79, 81, 82, 83, 97, 105, 106, 113, 124, 127, 134, 140, 143, 154, 161, 166, 170, 173, 174, 175, 186, 195, 196, 198, 201, 202, 203, 205, 206, 208, 219, 223, 224, 225, 226, 227, 232, 234, 236, 239, 240, 241, 243, 244, 246, 256, 259, 270, 273, 274, 279, 280, 281, 282, 286, 287, 288, 301, 308, 312, 315, 316, 324, 327, 331, 354, 362, 365, 441, 460, 509, 512, 517, 518, 524, 543, 549, 555, 563, 569, 578, 579, 583, 584, 586], "query_fw_cap": [6, 46, 48, 51, 54, 79, 81], "query_fused_pattern": [6, 46], "awar": [6, 46, 48, 51, 54, 79, 81, 177, 197, 200, 217, 233, 266, 276, 301, 306, 307, 349, 354, 558, 559, 561, 566, 570, 573, 585, 587], "calibr": [6, 46, 47, 48, 51, 53, 54, 56, 79, 82, 83, 111, 124, 125, 181, 182, 184, 186, 194, 195, 265, 266, 306, 307, 308, 326, 343, 364, 533, 554, 555, 564, 566, 579, 585, 586], "convers": [6, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 88, 115, 266, 276, 570, 579, 580], "he": 6, "intersect": [6, 274, 316, 569], "yaml": [6, 79, 80, 81, 186, 187, 188, 194, 195, 206, 208, 224, 233, 244, 246, 260, 265, 266, 276, 277, 278, 289, 290, 293, 298, 306, 307, 308, 342, 343, 368, 369, 370, 374, 375, 376, 377, 378, 380, 381, 383, 384, 468, 470, 477, 482, 486, 489, 492, 524, 535, 564, 569, 572, 575, 578, 583, 584], "decid": [6, 81, 145, 146, 268, 303, 310, 433, 581, 585], "besid": [6, 557], "describ": [6, 48, 54, 79, 81, 101, 102, 282, 552, 563, 583], "easili": [6, 572, 575, 576], "op": [6, 46, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 86, 88, 90, 91, 93, 94, 96, 99, 100, 101, 102, 103, 104, 105, 106, 108, 112, 113, 115, 119, 120, 123, 126, 127, 128, 129, 131, 137, 139, 140, 153, 154, 155, 161, 163, 164, 165, 166, 168, 169, 170, 173, 175, 261, 263, 325, 344, 345, 347, 349, 351, 352, 355, 358, 364, 413, 416, 424, 429, 430, 438, 540, 552, 563, 570, 575, 579, 580, 581, 583, 585, 586], "sequenc": [6, 13, 81, 97, 113, 206, 222, 223, 244, 258, 259, 267, 268, 272, 301, 309, 310, 314, 331, 555, 563, 576, 584], "past": 6, "abov": [6, 87, 270, 312, 575], "wa": [6, 169, 195, 493, 552, 577, 585], "hidden": [6, 301, 331, 524, 575], "everi": [6, 51, 80, 101, 102, 104, 301, 303, 304, 331, 338, 339, 575, 585], "corner": [6, 223, 259, 584], "made": [6, 101, 102, 104, 280, 282, 349, 579, 581, 585], "effect": [6, 575, 576], "mainten": 6, "difficult": 6, "correspond": [6, 13, 81, 152, 177, 206, 244, 267, 270, 274, 301, 303, 307, 309, 312, 316, 338, 346, 354, 362, 563, 575, 578, 579, 582, 585], "abil": [6, 555, 563], "recommend": [6, 227, 228, 315, 316, 555, 561, 563, 575, 578, 585], "end": [6, 101, 140, 175, 206, 222, 223, 233, 244, 258, 259, 266, 279, 303, 304, 327, 332, 336, 337, 338, 339, 359, 557, 563, 567, 572, 575, 576, 583, 584, 585], "modif": [6, 493, 554, 563], "clear": [6, 13, 145, 204, 242, 267, 273, 274, 282, 309, 315, 316, 563, 569], "fragment": 6, "enumer": [6, 291, 359, 373, 474, 480, 506, 557, 559, 573, 575, 583], "scenario": [6, 45, 386, 552, 553, 557, 575, 576], "doesn": [6, 140, 223, 259, 307, 523, 559, 586], "bf16": [6, 47, 51, 80, 81, 82, 83, 91, 115, 122, 126, 128, 141, 326, 347, 369, 563, 570, 580, 585], "granular": [6, 51, 80, 563, 566, 575, 586], "scheme": [6, 51, 55, 77, 78, 80, 541, 554, 563, 585, 586], "assum": [6, 222, 258, 270, 291, 312, 563], "same": [6, 81, 90, 101, 117, 175, 206, 223, 244, 259, 270, 293, 298, 312, 331, 347, 351, 369, 553, 554, 555, 557, 559, 563, 574, 578, 579, 583, 584, 585], "semant": [6, 563], "pattern": [6, 46, 51, 80, 81, 92, 93, 95, 96, 98, 101, 102, 104, 112, 113, 127, 131, 137, 138, 139, 140, 153, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 167, 168, 187, 191, 208, 246, 266, 294, 299, 303, 308, 329, 336, 337, 338, 340, 413, 416, 429, 438, 439, 516, 540, 555, 563, 566, 573, 578, 587], "abstract": [6, 46, 51, 53, 80, 121, 143, 152, 223, 225, 259, 260, 265, 266, 273, 274, 290, 292, 296, 301, 305, 306, 315, 316, 318, 319, 320, 327, 331, 337, 341, 354, 375, 387, 453, 464, 465, 486, 498, 516, 540, 564], "querybackendcap": [6, 48, 51, 54, 79, 80, 81], "tensorflowqueri": [6, 81], "look": [6, 563, 569, 586], "microsoft": 6, "mla": [6, 579], "kernel": [6, 512, 574, 575, 585], "alreadi": [6, 208, 222, 224, 246, 258, 510, 537, 552, 555, 566, 585], "becom": [6, 96, 561, 576], "integr": [6, 175, 225, 552], "explor": 6, "attribut": [6, 78, 96, 117, 140, 152, 169, 181, 187, 188, 233, 306, 440, 441, 445, 505, 522, 554, 563, 564, 578, 586], "whether": [6, 53, 54, 55, 79, 81, 145, 146, 175, 196, 204, 206, 219, 223, 234, 242, 244, 256, 259, 260, 266, 268, 270, 274, 288, 293, 298, 301, 303, 310, 312, 316, 331, 347, 362, 365, 369, 475, 555, 569, 584], "per": [6, 48, 51, 54, 77, 78, 79, 80, 81, 196, 205, 224, 234, 243, 270, 282, 312, 331, 364, 369, 389, 552, 574, 580, 587], "channel": [6, 77, 78, 140, 170, 185, 219, 223, 256, 259, 282, 286, 301, 331, 453, 456, 465, 566, 567, 575, 576, 584, 587], "reduc": [6, 96, 101, 102, 296, 331, 558, 570, 576, 577, 579, 580, 585, 586], "rang": [6, 140, 209, 210, 223, 247, 248, 259, 270, 279, 312, 359, 555, 557, 559, 573, 575, 579, 584], "qlinear": [6, 208, 215, 246, 253, 274, 316, 324, 561, 587], "mode": [6, 45, 46, 48, 51, 54, 59, 77, 78, 79, 81, 140, 215, 224, 253, 266, 270, 312, 325, 338, 354, 369, 389, 516, 552, 566, 567, 579, 580, 585], "qdq": [6, 47, 57, 59, 60, 61, 62, 64, 66, 67, 70, 72, 74, 76, 77, 82, 122, 141, 142, 143, 181, 261, 262, 263, 324, 326, 561, 566, 579], "integ": [6, 152, 260, 266, 270, 274, 291, 301, 303, 305, 312, 316, 331, 338, 341, 579, 585], "seen": [6, 101, 102, 369], "static": [6, 77, 79, 140, 169, 264, 279, 307, 324, 343, 382, 386, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 425, 453, 456, 458, 459, 461, 463, 464, 465, 466, 476, 493, 495, 500, 502, 507, 509, 514, 516, 522, 523, 525, 527, 532, 537, 541, 548, 549, 561, 566, 585, 587], "dynam": [6, 96, 140, 196, 234, 261, 263, 307, 326, 377, 554, 557, 561, 566, 577, 585, 587], "qtype": [6, 55, 78], "choic": [6, 206, 244, 552, 555, 569], "float32": [6, 209, 210, 223, 247, 248, 259, 270, 312, 522, 553, 555, 579, 584], "uint8": [6, 78, 219, 256, 270, 312, 555, 563, 578, 579, 584, 586], "param": [6, 55, 79, 80, 81, 101, 177, 181, 194, 196, 224, 230, 234, 270, 273, 274, 288, 312, 315, 316, 346, 391, 423, 524, 527, 571, 585], "node": [6, 53, 55, 61, 63, 72, 76, 77, 78, 81, 82, 83, 84, 87, 88, 89, 90, 94, 96, 97, 98, 101, 102, 104, 108, 111, 113, 114, 116, 117, 118, 120, 133, 139, 140, 162, 169, 171, 175, 261, 262, 263, 318, 319, 324, 325, 326, 422, 435, 436, 437, 438, 439, 440, 445, 453, 456, 463, 464, 465, 502, 503, 505, 552, 559, 583], "exclud": [6, 113, 120, 286, 288], "onnxrt": [6, 7, 78, 206, 208, 215, 216, 217, 220, 223, 244, 246, 253, 254, 255, 257, 259, 273, 274, 315, 316, 367, 427, 428, 443, 445, 452, 505], "onnxrt_qlinearopsadaptor": [6, 54], "dump_elapsed_tim": [6, 369], "data_load": [6, 54, 81, 82, 83], "recov": [6, 51, 54, 81, 369, 558], "q_config": [6, 51, 54, 55, 77, 80, 81, 261, 263, 320, 324, 325], "inspect_tensor": [6, 46, 48, 51, 54, 79, 81], "op_list": [6, 46, 48, 51, 54, 79, 81, 351, 583], "iteration_list": [6, 46, 48, 51, 54, 79, 81], "inspect_typ": [6, 46, 48, 51, 54, 79, 81, 424], "save_to_disk": [6, 46, 48, 51, 54, 79, 81], "save_path": [6, 51, 54, 81, 175, 261, 263, 318, 319, 324, 326, 359, 571], "quantization_cfg": [6, 51, 54, 81], "set_tensor": [6, 46, 48, 51, 54, 79, 81], "tensor_dict": [6, 46, 48, 51, 54, 79, 81], "input_graph": [6, 54, 161, 162, 166, 169, 170, 371, 479, 483, 488, 491, 498], "fp32_baselin": [6, 48, 51, 54, 79, 81, 362], "diagnosis_help": [6, 81], "fp32_model": [6, 79, 81, 175, 177, 261, 263, 326, 351, 369], "int8_model": [6, 261, 263], "newapi": [10, 82, 129], "contrib": [10, 308], "util": [10, 47, 56, 140, 141, 169, 232, 261, 266, 268, 302, 308, 310, 329, 350, 352, 374, 375, 376, 378, 380, 381, 384, 389, 400, 403, 406, 410, 411, 416, 418, 419, 421, 429, 430, 435, 437, 438, 441, 445, 451, 452, 460, 462, 486, 492, 496, 501, 505, 538, 559, 579, 585], "criterion": [11, 79, 81, 177, 191, 227, 230, 260, 266, 308, 328, 331, 338, 492, 532, 557, 561, 575, 576, 579, 585, 586], "comput": [13, 78, 81, 96, 101, 102, 152, 177, 233, 260, 266, 267, 268, 270, 271, 272, 274, 280, 309, 310, 312, 313, 314, 316, 332, 335, 336, 359, 369, 558, 569, 570, 575, 576, 579, 585], "bilingu": [13, 267, 309], "understudi": [13, 267, 309], "qualiti": [13, 267, 309], "text": [13, 222, 223, 258, 259, 267, 272, 304, 309, 314, 339, 568, 577, 584, 587], "machin": [13, 267, 285, 309, 384, 552, 561, 567, 577, 583], "translat": [13, 81, 267, 268, 279, 282, 285, 287, 309, 310], "natur": [13, 267, 309], "anoth": [13, 46, 48, 81, 139, 140, 223, 259, 266, 267, 276, 309, 359, 369, 557, 584, 585], "approxim": [13, 267, 268, 309, 310, 569], "sinc": [13, 265, 266, 267, 293, 298, 306, 309, 365, 493, 557, 561, 569, 573], "glue": [13, 267, 274, 309, 316, 555, 569], "word": [13, 222, 258, 267, 309, 569, 587], "piec": [13, 222, 258, 267, 309, 561, 569], "decod": [13, 218, 219, 256, 267, 288, 309, 569, 584], "id": [13, 40, 41, 42, 43, 222, 224, 258, 267, 269, 270, 271, 272, 309, 311, 312, 313, 314, 365, 389, 390, 392, 393, 394, 396, 399, 400, 401, 402, 403, 405, 406, 408, 409, 437, 438, 441, 509, 569, 582, 585], "token": [13, 206, 217, 220, 223, 244, 255, 257, 259, 266, 267, 268, 288, 308, 309, 310, 365, 537, 541, 552, 555, 569, 582, 584, 585], "By": [13, 45, 267, 309, 569, 571, 585], "ngram": [13, 267, 309, 569], "breviti": [13, 267, 268, 309, 310, 569], "penalti": [13, 267, 268, 309, 310, 569], "doe": [13, 267, 270, 279, 309, 312, 344, 555, 569, 581, 584], "beam": [13, 267, 309, 569], "reset": [13, 267, 273, 274, 309, 315, 316, 327, 537, 569], "cach": [13, 206, 244, 267, 309, 365, 454, 541, 562, 579], "updat": [13, 41, 82, 96, 108, 120, 140, 145, 152, 186, 263, 267, 273, 274, 282, 301, 303, 308, 309, 315, 316, 324, 325, 326, 328, 331, 332, 333, 335, 336, 337, 338, 341, 342, 354, 372, 389, 390, 391, 392, 400, 403, 405, 406, 408, 410, 416, 418, 419, 420, 423, 493, 516, 520, 525, 528, 530, 534, 552, 561, 569, 574, 575, 576, 585], "str": [13, 46, 48, 53, 54, 55, 79, 140, 169, 177, 182, 184, 186, 196, 206, 207, 208, 212, 215, 216, 217, 219, 220, 223, 225, 230, 234, 244, 245, 246, 250, 253, 254, 255, 256, 257, 259, 261, 263, 264, 267, 268, 270, 272, 273, 274, 279, 281, 282, 291, 296, 308, 309, 310, 312, 314, 315, 316, 318, 319, 323, 325, 326, 331, 343, 351, 359, 362, 365, 369, 370, 371, 372, 375, 382, 383, 384, 386, 388, 389, 392, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 408, 411, 412, 413, 415, 416, 421, 422, 423, 424, 429, 430, 433, 435, 436, 437, 438, 439, 441, 450, 451, 453, 454, 456, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 472, 474, 475, 477, 479, 482, 483, 486, 488, 489, 491, 492, 493, 494, 497, 498, 499, 502, 509, 511, 512, 514, 516, 517, 520, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 536, 537, 540, 541, 548, 549, 555, 569, 578, 583, 584], "rais": [13, 96, 101, 102, 104, 115, 140, 225, 267, 270, 273, 274, 301, 302, 303, 309, 312, 315, 316, 331, 338, 342, 346, 524, 537, 575, 576], "valueerror": [13, 96, 101, 102, 104, 115, 140, 267, 270, 274, 309, 312, 316, 562], "error": [13, 79, 177, 267, 274, 280, 307, 309, 316, 351, 363, 366, 508, 536, 569, 585], "occur": [13, 267, 309], "length": [13, 206, 223, 244, 259, 267, 270, 288, 309, 312, 555, 569, 579, 584], "float": [13, 46, 48, 51, 54, 78, 79, 81, 140, 169, 177, 206, 219, 244, 256, 266, 267, 268, 270, 271, 272, 279, 281, 282, 293, 298, 301, 303, 304, 305, 309, 310, 312, 313, 314, 325, 326, 331, 337, 338, 339, 340, 341, 346, 372, 390, 399, 408, 409, 424, 430, 485, 493, 509, 510, 514, 516, 522, 524, 525, 532, 534, 535, 543, 555, 569, 578, 579, 584], "bleu_scor": [13, 267, 268, 309, 310], "schedul": [22, 266, 299, 303, 308, 329, 335, 338, 340, 359, 573], "mixedprecis": [22, 266, 275, 378, 482, 530], "architectur": [22, 224, 277, 278, 288, 289, 290, 292, 553, 557, 567, 575, 576, 577], "na": [22, 187, 266, 308, 321, 566], "pruning_support": 40, "revis": [40, 41, 42, 43, 365], "644ec953a7dc": 40, "6ece06672ed3": [40, 41], "date": [40, 41, 42, 43, 344, 493], "09": [40, 587], "17": [40, 587], "22": [40, 43, 514, 517, 587], "310141": 40, "14": [41, 42, 261, 263, 326, 561, 587], "6f0d0f71d92e": [41, 42], "08": [41, 223, 259, 584, 587], "31": [41, 587], "07": [41, 42, 586, 587], "16": [41, 554, 555, 575, 587], "24": [41, 585, 587], "229939": 41, "update_dataload": 41, "db_session": [41, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 415, 416, 418, 420, 423], "sqlalchemi": [41, 388, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 415, 416, 418, 420, 421, 423, 562, 567], "orm": [41, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 415, 416, 418, 420, 423], "session": [41, 175, 205, 243, 325, 388, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 415, 416, 418, 420, 421, 423, 583, 585], "exist": [41, 87, 169, 188, 224, 225, 270, 290, 312, 325, 365, 390, 410, 416, 418, 419, 456, 507, 523, 524, 569, 575, 585], "databas": [41, 208, 246, 388, 389, 390, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 493, 507, 523], "update_transform": 41, "13": [42, 43, 343, 552, 587], "9e89549a08c8": [42, 43], "29": [42, 587], "41": [42, 587], "291905": 42, "03": [43, 514, 587], "34": [43, 587], "52": [43, 587], "916541": 43, "block": [44, 101, 266, 279, 288, 293, 298, 301, 304, 331, 339, 541, 566, 572, 575, 576], "mask": [44, 206, 244, 270, 286, 288, 297, 301, 303, 305, 312, 326, 331, 332, 335, 336, 338, 341, 575, 576, 587], "run_migrations_offlin": 45, "migrat": [45, 507], "context": [45, 53, 369, 578], "url": [45, 208, 246, 470, 537, 568], "engin": [45, 281, 388, 400, 421], "though": [45, 288], "skip": [45, 101, 327, 583, 585], "creation": [45, 385], "even": [45, 96, 552, 575], "dbapi": 45, "execut": [45, 48, 51, 54, 79, 81, 84, 86, 87, 89, 103, 107, 113, 116, 118, 123, 138, 173, 233, 260, 266, 277, 278, 289, 293, 298, 303, 306, 307, 338, 343, 362, 368, 369, 370, 371, 372, 389, 400, 403, 410, 416, 418, 419, 475, 477, 479, 482, 483, 486, 487, 488, 489, 491, 492, 494, 499, 502, 506, 509, 517, 518, 540, 552, 557, 570, 573, 575, 576, 579, 582, 585, 587], "emit": 45, "string": [45, 46, 48, 51, 54, 77, 78, 79, 80, 81, 90, 97, 113, 140, 145, 146, 169, 171, 175, 186, 187, 206, 208, 225, 230, 244, 246, 260, 263, 265, 266, 267, 270, 276, 277, 278, 281, 289, 290, 291, 293, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 321, 325, 326, 331, 338, 339, 340, 341, 342, 343, 362, 369, 382, 502, 524, 548, 569, 584], "script": [45, 267, 268, 271, 272, 309, 310, 313, 314, 371, 372, 458, 475, 477, 479, 482, 483, 485, 486, 488, 489, 491, 492, 497, 559, 566, 577], "run_migrations_onlin": 45, "associ": [45, 270, 312, 411, 412], "connect": [45, 303, 328, 400, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 552, 574, 575, 576, 582], "cl": [46, 79, 182, 184, 186, 208, 212, 215, 216, 217, 220, 223, 225, 230, 246, 250, 253, 254, 255, 257, 259, 291, 296, 301, 303, 305, 308, 327, 331, 337, 338, 340, 341, 354, 369], "quanit": [46, 51, 54], "chosen": [46, 48, 552], "load": [46, 48, 206, 208, 222, 223, 244, 246, 258, 259, 270, 280, 282, 290, 312, 325, 326, 343, 368, 369, 416, 418, 497, 524, 525, 554, 578, 579], "option": [46, 48, 51, 54, 55, 79, 81, 140, 169, 186, 191, 194, 195, 196, 206, 223, 225, 234, 244, 259, 261, 263, 266, 270, 276, 281, 282, 288, 301, 307, 308, 312, 325, 326, 331, 343, 359, 363, 365, 369, 375, 388, 389, 390, 392, 399, 400, 403, 405, 406, 408, 409, 411, 416, 421, 424, 453, 460, 463, 464, 465, 470, 479, 483, 492, 493, 495, 500, 509, 510, 514, 517, 522, 524, 525, 527, 530, 532, 533, 534, 543, 549, 555, 563, 582, 584, 585, 586], "categori": [46, 48, 81, 208, 246, 269, 270, 311, 312, 553, 555], "int": [46, 48, 51, 53, 54, 78, 79, 81, 140, 169, 175, 196, 205, 206, 207, 219, 223, 234, 243, 244, 245, 256, 259, 261, 263, 268, 270, 274, 279, 281, 282, 291, 308, 310, 312, 316, 326, 327, 331, 337, 347, 369, 375, 388, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 415, 416, 417, 418, 419, 420, 421, 423, 467, 502, 509, 510, 512, 514, 515, 516, 517, 518, 524, 525, 527, 532, 534, 537, 549, 555, 569, 578, 584], "step": [46, 48, 51, 81, 82, 101, 102, 127, 137, 233, 266, 301, 303, 304, 305, 327, 328, 331, 336, 337, 338, 339, 340, 341, 359, 552, 557, 558, 559, 573, 575, 576, 578, 580, 582, 583, 585], "mini": [46, 48, 51, 81, 587], "batch": [46, 48, 51, 53, 81, 96, 101, 145, 196, 198, 199, 204, 205, 226, 227, 233, 234, 236, 237, 242, 243, 266, 282, 286, 288, 293, 298, 352, 359, 389, 400, 522, 552, 554, 557, 573, 575, 584, 585, 587], "boolean": [46, 48, 51, 53, 81, 90, 281, 338, 524], "inspect": [46, 48, 51, 54, 79, 81, 552, 581, 583], "capabl": [46, 48, 51, 53, 54, 79, 80, 81, 354, 553, 563, 570, 578, 579, 585, 586], "queri": [46, 48, 51, 53, 54, 79, 81, 140, 145, 152, 175, 286, 288, 347, 391, 398, 407, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 579], "bn": [46, 96, 113, 115, 153, 587], "dump": [46, 48, 51, 54, 55, 79, 81, 140, 261, 263, 369, 379, 493, 514, 525, 537, 579, 583], "feed": [46, 48, 79, 175, 205, 243, 386, 557], "contain": [46, 48, 51, 53, 54, 79, 90, 101, 102, 104, 108, 113, 140, 143, 169, 175, 177, 186, 194, 195, 206, 207, 208, 244, 245, 246, 260, 261, 263, 265, 266, 270, 271, 272, 276, 279, 284, 285, 293, 294, 295, 296, 298, 301, 302, 303, 304, 305, 306, 308, 312, 313, 314, 331, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 368, 373, 377, 385, 391, 393, 394, 396, 397, 398, 401, 402, 405, 407, 411, 416, 421, 426, 427, 431, 434, 440, 445, 446, 452, 471, 478, 480, 481, 484, 485, 487, 490, 496, 501, 505, 509, 517, 555, 557, 566, 569, 575, 576, 583, 585], "bool": [46, 48, 53, 54, 55, 79, 96, 97, 113, 140, 145, 169, 175, 177, 181, 195, 206, 208, 219, 223, 244, 246, 256, 259, 261, 263, 268, 270, 274, 279, 281, 282, 288, 301, 308, 310, 312, 316, 326, 331, 347, 354, 365, 369, 399, 433, 438, 441, 453, 456, 458, 459, 460, 461, 463, 464, 465, 466, 470, 472, 475, 493, 509, 510, 512, 517, 518, 524, 526, 527, 537, 543, 549, 555, 569, 578, 584], "disk": [46, 48, 79, 81], "memori": [46, 48, 79, 108, 265, 266, 293, 298, 306, 554, 558, 570, 572, 575, 576, 579, 585], "numpi": [46, 48, 51, 54, 78, 79, 81, 101, 102, 104, 140, 175, 223, 259, 264, 270, 274, 279, 281, 291, 312, 316, 562, 584], "arrai": [46, 48, 51, 54, 77, 78, 79, 81, 140, 169, 175, 223, 259, 270, 274, 279, 281, 291, 312, 316, 324, 326, 346, 369, 584], "node0_nam": [46, 48, 79, 81], "weight0_nam": [46, 48, 51, 54, 79, 81], "bias0_nam": [46, 48, 51, 54, 79, 81], "node1_nam": [46, 48, 79, 81], "weight1_nam": [46, 48, 79, 81], "bias1_nam": [46, 48, 79, 81], "output0_nam": [46, 48, 79, 81], "output1_nam": [46, 48, 79, 81], "back": [46, 48, 51, 54, 79, 81, 152, 223, 259, 279, 333], "usual": [46, 48, 51, 54, 79, 206, 244, 266, 293, 298, 557, 573, 579], "respons": [46, 48, 51, 54, 79, 512, 516, 523, 536, 540, 541, 545, 547, 549, 550, 579], "int32": [46, 48, 51, 54, 79, 140, 261, 263, 555], "format": [46, 48, 51, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 87, 101, 102, 175, 206, 207, 208, 212, 217, 244, 245, 246, 250, 255, 261, 263, 266, 270, 276, 279, 290, 312, 326, 351, 475, 514, 532, 555, 559, 561, 569, 570, 571, 579], "someth": [46, 48, 51, 54, 79, 194, 195, 208, 246, 343], "quantize_input": [46, 48, 77, 81], "abl": [46, 48, 81, 115, 194, 195, 222, 258, 343, 575, 579], "scale": [46, 48, 55, 77, 78, 81, 96, 101, 135, 170, 185, 219, 223, 256, 259, 263, 324, 561, 579, 582, 584], "where": [46, 48, 51, 55, 78, 79, 101, 152, 270, 274, 286, 288, 290, 292, 301, 312, 316, 331, 557, 575, 583], "destinatin": [46, 48], "destin": [46, 48, 55, 81, 261, 262, 266, 276], "ox_util": 47, "argmax": [47, 56, 68], "binary_op": [47, 56, 68], "concat": [47, 56, 68, 174, 509], "direct_q8": [47, 56, 68], "embed_layernorm": [47, 56, 68], "gather": [47, 53, 55, 56, 68, 301, 331, 512], "gavgpool": [47, 56, 68], "gemm": [47, 56, 68, 575], "lstm": [47, 56, 68], "matmul": [47, 55, 56, 68, 80, 86, 93, 99, 107, 113, 119, 120, 129, 139, 140, 158, 167, 263, 301, 331, 561, 563], "maxpool": [47, 56, 68, 159, 168, 563], "pad": [47, 56, 68, 105, 106, 206, 223, 244, 259, 286, 288, 555, 584], "pool": [47, 56, 68, 168], "resiz": [47, 56, 68, 206, 207, 219, 223, 244, 245, 256, 259, 554, 555, 584], "tf_util": 47, "graph_rewrit": [47, 141], "graph_bas": [47, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 141], "quantize_graph": [47, 141], "qat": [47, 79, 141, 142, 263, 266, 276, 325, 558, 559, 561, 566, 579], "quantize_graph_bas": [47, 141, 142, 153, 154, 155, 156, 157, 158, 159, 161, 163, 164, 165, 166, 167, 168], "quantize_graph_bn": [47, 141, 142], "quantize_graph_concatv2": [47, 141, 142], "quantize_graph_conv": [47, 141, 142], "quantize_graph_for_intel_cpu": [47, 141, 142], "quantize_graph_matmul": [47, 141, 142], "quantize_graph_pool": [47, 141, 142], "transform_graph": [47, 141], "bias_correct": [47, 141, 172], "graph_transform_bas": [47, 141, 170, 172, 173, 174], "insert_log": [47, 141, 172], "rerange_quantized_concat": [47, 141, 172], "graph_convert": [47, 141], "graph_converter_without_calib": [47, 141], "graph_util": [47, 141], "quantize_graph_common": [47, 141], "kerasadaptor": 48, "specifi": [48, 51, 54, 55, 79, 80, 81, 113, 140, 169, 194, 195, 223, 224, 259, 265, 266, 270, 273, 274, 277, 280, 282, 289, 290, 293, 298, 306, 307, 312, 315, 316, 326, 332, 343, 368, 369, 386, 389, 392, 399, 400, 401, 403, 404, 405, 410, 411, 413, 414, 416, 418, 419, 423, 424, 425, 438, 470, 474, 475, 476, 495, 500, 516, 520, 524, 537, 541, 552, 558, 559, 563, 569, 572, 578, 579, 584, 585, 586], "boolen": [48, 54, 79, 81], "compare_label": [48, 51, 54, 79, 81, 274, 316, 569], "pipelin": [48, 51, 54, 79, 81, 260, 266, 277, 278, 289, 304, 307, 558, 573], "get_optype_wise_": [48, 81], "quantizable_op_detail": 48, "get": [48, 51, 53, 54, 55, 79, 80, 81, 101, 102, 104, 113, 140, 145, 152, 153, 154, 155, 156, 157, 158, 159, 161, 163, 165, 167, 169, 171, 175, 181, 182, 184, 186, 188, 194, 196, 199, 217, 220, 223, 224, 230, 232, 233, 234, 237, 255, 257, 259, 263, 264, 265, 266, 275, 282, 286, 292, 293, 298, 301, 303, 305, 306, 307, 308, 324, 325, 326, 327, 328, 331, 338, 340, 341, 346, 351, 362, 364, 366, 369, 370, 375, 382, 383, 384, 386, 389, 392, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 410, 411, 413, 415, 416, 417, 418, 419, 420, 423, 424, 425, 428, 432, 433, 438, 450, 453, 454, 456, 458, 459, 463, 464, 465, 467, 470, 472, 474, 475, 476, 477, 482, 486, 489, 492, 493, 495, 499, 500, 502, 504, 511, 512, 516, 520, 522, 524, 525, 527, 531, 534, 536, 537, 540, 541, 545, 547, 548, 549, 550, 552, 566, 567, 585], "wise": [48, 55, 81, 170, 185, 301, 331, 345, 346, 347, 351, 413, 416, 524, 552, 566, 575, 576, 583, 585, 586], "union": [48, 81, 268, 270, 274, 310, 312, 316, 359, 382, 384, 400, 422, 460, 509, 512, 514, 516, 517, 524, 527, 528, 530, 532, 536, 569], "kei": [48, 54, 79, 81, 140, 145, 169, 171, 175, 177, 188, 266, 270, 286, 288, 291, 293, 298, 302, 304, 312, 325, 331, 339, 342, 346, 354, 360, 362, 363, 369, 516, 532, 552, 561, 583], "kerasqueri": 48, "local_config_fil": [48, 51, 54, 79, 81], "get_vers": [48, 51, 54, 80, 81], "infom": [48, 54, 81, 226, 227, 263], "get_precis": [48, 51, 54, 80, 81, 386], "support": [48, 51, 53, 54, 78, 79, 80, 81, 108, 115, 132, 194, 195, 196, 205, 206, 208, 212, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 230, 233, 234, 243, 244, 246, 250, 253, 254, 255, 256, 257, 259, 266, 273, 274, 276, 281, 282, 288, 291, 293, 294, 295, 296, 298, 301, 303, 307, 315, 316, 321, 327, 331, 338, 343, 352, 362, 364, 386, 453, 456, 458, 459, 461, 463, 464, 465, 466, 472, 506, 514, 524, 552, 576, 577, 580, 582, 585], "get_op_typ": [48, 51, 54, 79, 80, 81], "compos": [48, 54, 79, 81, 169, 223, 259, 362, 584], "dictionari": [48, 54, 55, 79, 81, 101, 102, 104, 152, 177, 181, 187, 188, 191, 222, 258, 270, 277, 279, 282, 288, 289, 290, 292, 308, 312, 391, 393, 394, 396, 398, 401, 402, 407, 411, 412, 414], "get_quantization_cap": [48, 51, 54, 79, 80, 81], "get_op_types_by_precis": [48, 54, 79, 81], "mxnetadaptor": 51, "nc_model": [51, 53, 293, 298], "unimpl": [51, 54], "mxnetmodel": [51, 322], "data_x": [51, 53], "loader": [51, 53, 194, 195, 307, 343, 365], "modelwis": 51, "opwis": 51, "recover_tuned_model": [51, 81], "mxnetqueri": 51, "g": [51, 54, 80, 279, 281, 307, 331, 516, 557, 575, 576, 581, 585], "conv2d": [51, 80, 93, 94, 95, 99, 100, 105, 106, 113, 155, 165, 170, 563, 583, 585], "fully_connect": 51, "get_fuse_pattern": [51, 80, 81], "etc": [51, 80, 186, 222, 233, 258, 260, 265, 266, 272, 280, 281, 293, 298, 306, 308, 314, 343, 368, 557, 566, 582, 585], "get_mixed_precision_combin": [51, 80, 81], "optyp": [53, 262], "enum": [53, 78, 369, 474, 506], "isiter": 53, "obj": [53, 186, 205, 243, 260, 265, 266, 276, 277, 278, 289, 290, 293, 298, 302, 306, 307, 308, 342, 343, 362, 369], "true": [53, 55, 77, 79, 81, 96, 97, 113, 119, 140, 143, 145, 173, 175, 177, 195, 196, 204, 206, 208, 209, 222, 223, 224, 234, 242, 244, 246, 247, 258, 259, 261, 263, 268, 270, 274, 279, 286, 288, 296, 301, 310, 312, 316, 326, 327, 331, 332, 354, 362, 470, 509, 512, 517, 518, 524, 555, 559, 563, 569, 578, 579, 580, 583, 584, 585, 586], "els": [53, 96, 97, 175, 204, 242, 347, 509, 524, 583], "ensure_list": 53, "x": [53, 88, 101, 102, 104, 108, 205, 223, 243, 259, 282, 286, 288, 346, 559, 571, 575, 579, 583, 584], "ensur": [53, 55, 223, 259, 304, 339, 346, 388, 421, 453, 456, 458, 465, 507, 552, 559, 561, 579, 584], "check_mx_vers": 53, "mx": 53, "__version__": 53, "combine_cap": 53, "make_nc_model": 53, "target": [53, 78, 79, 124, 125, 140, 169, 194, 225, 279, 302, 305, 327, 331, 335, 337, 341, 342, 344, 346, 437, 438, 555, 559, 575, 576, 583, 584, 585, 586], "sym_model": 53, "ctx": 53, "input_desc": 53, "tupl": [53, 79, 81, 140, 152, 194, 195, 219, 223, 225, 256, 259, 261, 263, 270, 279, 282, 288, 312, 327, 331, 343, 351, 439, 470, 524, 543, 555, 569, 584], "symnet": 53, "arg": [53, 79, 87, 186, 206, 207, 208, 244, 245, 246, 265, 266, 276, 288, 298, 301, 306, 307, 308, 318, 319, 320, 323, 326, 339, 346, 363, 365, 366, 374, 376, 378, 379, 380, 381, 391, 393, 394, 396, 398, 401, 402, 407, 509, 517, 537, 554, 555, 559, 579, 583, 584], "aux": 53, "ncmodel": 53, "suppli": [53, 286], "get_framework_nam": [53, 453, 456, 458, 465], "prepare_model_data": 53, "dataloaderwrap": 53, "prepare_model": 53, "create_data_exampl": 53, "prepare_dataload": 53, "ndarray_to_devic": 53, "ndarrai": [53, 101, 102, 104, 140, 223, 259, 279, 281, 326, 346, 360, 363, 562, 584], "devic": [53, 113, 124, 125, 126, 127, 128, 129, 132, 137, 140, 161, 166, 169, 174, 225, 282, 557, 575, 578], "is_model_quant": 53, "query_quantizable_nod": 53, "map": [53, 78, 81, 162, 171, 223, 259, 261, 262, 263, 265, 266, 269, 270, 271, 272, 274, 279, 293, 298, 301, 303, 306, 311, 312, 313, 314, 316, 331, 340, 474, 555, 559, 569, 575, 576, 579], "quantize_sym_model": 53, "qconfig": [53, 583], "run_forward": 53, "b_filter": 53, "collector": [53, 360, 363], "pre_batch": 53, "post_batch": 53, "forward": [53, 225, 286, 288, 326, 578, 579, 583], "propag": [53, 135, 152, 333], "filter": [53, 206, 207, 208, 209, 210, 211, 213, 217, 244, 245, 246, 247, 248, 249, 251, 255, 266, 308, 369, 392, 433, 456, 526, 554, 555, 566, 575, 576, 583], "collect": [53, 78, 81, 217, 220, 221, 223, 226, 227, 228, 229, 231, 255, 257, 259, 267, 272, 273, 274, 309, 314, 315, 316, 360, 363, 369, 370, 475, 499, 510, 512, 524, 525, 561, 579, 583, 585], "dure": [53, 81, 96, 101, 102, 152, 279, 282, 288, 301, 305, 307, 331, 341, 518, 570, 571, 572, 573, 575, 576, 579, 583, 586], "prior": [53, 123, 346, 585], "make_symbol_block": 53, "gluon": [53, 343, 571], "symbolblock": 53, "make_modul": 53, "parse_tune_config": 53, "quantizable_nod": 53, "distribute_calib_tensor": 53, "calib_tensor": 53, "calib_cfg": 53, "tensor_to_nod": 53, "kl": [53, 360, 363, 364, 563, 585, 586], "minmax": [53, 563, 586], "calib_model": 53, "qsym_model": 53, "calib_data": 53, "calibdata": 53, "threshold": [53, 55, 183, 270, 301, 312, 331, 360, 363, 364, 569], "amp_convert": 53, "amp_cfg": 53, "amp": [53, 574], "dataiterload": 53, "data_it": 53, "collectorbas": 53, "collect_gluon": 53, "arr": [53, 78, 369], "collect_modul": 53, "m": [53, 78, 104, 301, 331, 557, 587], "b": [53, 78, 104, 108, 206, 244, 263, 555, 569, 585], "calibcollector": 53, "include_tensors_kl": 53, "include_tensors_minmax": 53, "num_bin": [53, 360, 363, 364], "8001": [53, 360, 363], "calc_kl_th_dict": 53, "quantized_dtyp": 53, "calcul": [53, 55, 78, 79, 81, 94, 177, 195, 209, 210, 225, 247, 248, 266, 271, 272, 282, 287, 288, 293, 297, 298, 301, 303, 304, 313, 314, 327, 328, 331, 339, 340, 351, 360, 363, 424, 516, 522, 555, 569, 572, 575, 579, 582, 585, 586], "tensorcollector": 53, "include_nod": 53, "qtensor_to_tensor": 53, "preprocess": [53, 206, 217, 220, 223, 244, 255, 257, 259, 260, 266, 288, 362, 559, 584], "namecollector": 53, "onnxruntimeadaptor": 54, "rt": 54, "todo": [54, 206, 209, 244, 247, 270, 312, 522], "replac": [54, 101, 102, 119, 120, 140, 272, 314, 324, 347, 524, 559, 581], "func": [54, 225, 307, 326, 524, 541, 586], "onnxdataload": 54, "evalut": 54, "onnxtransform": 54, "onnxmetr": 54, "max": [54, 55, 78, 81, 140, 170, 185, 223, 259, 271, 272, 313, 314, 346, 369, 534, 552, 579, 584, 585], "evaluaton": 54, "visualizaton": 54, "f1": [54, 266, 271, 273, 274, 308, 313, 315, 316, 559, 569, 582, 587], "modelproto": [54, 261, 262, 263, 571], "onnxrt_integeropsadaptor": 54, "onnxrt_qdqadaptor": 54, "onnxrtqueri": 54, "get_graph_optim": 54, "onnxrtaug": 55, "model_wrapp": 55, "dump_op_typ": 55, "black_nod": 55, "white_nod": 55, "cpuexecutionprovid": 55, "reduce_rang": [55, 77, 578], "augment": 55, "augment_graph": 55, "activation_onli": 55, "weight_onli": 55, "quantization_candid": 55, "store": [55, 208, 246, 270, 288, 294, 295, 296, 301, 303, 312, 328, 331, 338, 340, 341, 346, 365, 564], "get_intermediate_output": 55, "calib_mod": 55, "dump_minmax": 55, "naiv": 55, "min": [55, 81, 140, 170, 185, 369, 552, 579, 584, 585], "dump_calibr": 55, "give": [55, 585], "pair": [55, 77, 82, 137, 145, 554, 570], "element": [55, 204, 242, 266, 270, 286, 288, 293, 298, 301, 304, 312, 331, 339, 369, 387, 555, 566, 569, 575], "minimum": [55, 331, 346, 575, 585], "second": [55, 98, 206, 244, 347, 369, 433, 516, 552, 585, 586], "maximum": [55, 88, 206, 223, 244, 259, 268, 288, 301, 303, 310, 331, 338, 346, 555, 575, 579, 584], "calculate_quantization_param": 55, "quantization_threshold": 55, "param_nam": [55, 382], "dump_tensor": 55, "calculate_scale_zeropoint": 55, "last_nod": 55, "next_nod": 55, "rmin": [55, 78, 579], "rmax": [55, 78, 579], "quantize_rang": [55, 78], "zero": [55, 77, 78, 223, 259, 266, 274, 293, 298, 301, 303, 304, 316, 331, 338, 339, 369, 575, 576, 579, 584, 585], "point": [55, 77, 78, 219, 256, 271, 272, 291, 313, 314, 327, 346, 569, 579, 584, 585], "init": [56, 184, 225, 329, 354, 555, 569], "activationoper": 57, "onnx_quant": [57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76], "onnx_nod": [57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76], "quantize_check": [57, 60, 61, 63, 65, 67, 71, 72, 73, 74, 75], "quantizaion": [57, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76], "convert_check": [57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76], "convert_format": [57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76], "qoper": [57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77], "removableactivationoper": 57, "qactivationoper": 57, "children": [57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 324], "argmaxoper": 58, "qargmaxoper": 58, "attentionoper": 59, "qattentionoper": 59, "qattent": 59, "binaryoper": 60, "qbinaryoper": 60, "qbinari": 60, "concatoper": 61, "cast": [61, 63, 72, 76, 77, 78, 91, 561, 580, 584], "qconcatoper": 61, "qconcat": 61, "convoper": 62, "qconvoper": 62, "qlinearconv": 62, "direct8bit": 63, "direct8bitoper": 63, "directcastoper": 63, "qdirectoper": 63, "qdirect": 63, "embedlayernorm": 64, "embedlayernormalizationoper": 64, "qembedlayernormalizationoper": 64, "qembedlayernorm": 64, "gatheroper": 65, "qgatheroper": 65, "qgather": 65, "globalaveragepool": 66, "globalaveragepooloper": 66, "qglobalaveragepooloper": 66, "qlinearglobalaveragepool": 66, "gemmoper": 67, "qgemmoper": 67, "qgemm": 67, "lstmoper": 69, "matmuloper": 70, "qmatmuloper": 70, "qlinearmatmul": 70, "maxpooloper": 71, "qmaxpooloper": 71, "qmaxpool": 71, "op_registri": 72, "op_typ": [72, 79, 347, 351, 354, 355, 358], "qop_registri": 72, "padoper": 73, "qpadoper": 73, "qpad": 73, "averagepool": 74, "pooloper": 74, "qpooloper": 74, "qlinearaveragepool": 74, "resizeoper": 75, "qresizeoper": 75, "qresiz": 75, "splitoper": 76, "qsplitoper": 76, "qsplit": 76, "quantization_param": 77, "op_types_to_quant": 77, "fallback_list": 77, "check_opset_vers": 77, "opset": [77, 261, 263, 326], "should_quant": 77, "quantize_model": 77, "merge_dedicated_qdq_pair": 77, "merg": [77, 138, 198, 236, 583, 585], "dedic": 77, "q": [77, 78, 82, 137, 139, 161], "dq": [77, 82, 137, 139, 161], "should_cast": 77, "insert_qdq": 77, "should_convert": 77, "convert_qdq_to_operator_ori": 77, "remove_redundant_pair": 77, "redud": 77, "dtype_cast": 77, "cfg": [77, 81, 105, 106, 187, 362], "keep_io_typ": 77, "dtype": [77, 78, 82, 83, 140, 169, 209, 210, 219, 223, 247, 248, 256, 259, 261, 263, 264, 326, 555, 561, 563, 578, 583, 584, 586], "quantize_output": 77, "initializer_use_weight_qtyp": 77, "direct_int8": 77, "quantize_bias_tensor": 77, "bia": [77, 81, 140, 169, 170, 261, 263, 286, 583], "quantize_bia": 77, "bias_nam": [77, 263], "input_nam": [77, 101, 102, 261, 263, 326, 561], "weight_nam": [77, 332], "beta": [77, 101, 102, 104, 328], "input_scal": 77, "weight_scal": 77, "quantize_weights_per_channel": 77, "weight_qtyp": 77, "axi": [77, 78, 331], "quantize_weight_per_channel": 77, "channel_axi": [77, 143, 183, 185], "tensor_proto_to_arrai": 77, "tensorproto": [77, 78], "get_bias_add_nod": 77, "last_output": 77, "quantized_bias_nam": 77, "ad": [77, 152, 206, 244, 267, 309, 331, 338, 346, 389, 390, 392, 399, 400, 401, 402, 403, 406, 408, 409, 552, 570, 583], "reshap": [77, 95, 101, 102, 104, 107, 112, 296, 331], "nodeproto": [77, 263], "_type_": [77, 263, 323], "previou": [77, 81, 101, 113, 288, 290, 327, 331, 352, 552, 581, 583, 585], "is_valid_quantize_weight": 77, "dequantize_tensor": [77, 177, 424], "value_nam": 77, "helper": [78, 79, 81, 140, 146, 175, 177, 181, 206, 207, 208, 222, 244, 245, 246, 258, 262, 263, 286, 325, 367, 518], "dtype_to_nam": 78, "dtype_map": 78, "quanttyp": 78, "make_quant_nod": 78, "quantizelinear": [78, 561], "make_dquant_nod": 78, "dequantizelinear": [78, 561], "is_b_transpos": 78, "wheter": 78, "inuput": 78, "transpos": [78, 107, 223, 259, 301, 331, 584], "split_shared_bia": 78, "share": [78, 113, 116, 133, 139, 169, 562, 563, 585], "cast_tensor": 78, "remove_init_from_model_input": 78, "collate_pr": 78, "quantize_data_with_scale_zero": 78, "zero_point": [78, 263, 324, 331], "pack": [78, 95], "ab": [78, 288, 303, 328, 579], "np": [78, 140, 169, 223, 259, 346, 559, 584], "sym": [78, 563, 586], "asym": [78, 563, 586], "calculate_scale_zp": 78, "quantize_data": 78, "trasnform": 78, "equat": [78, 272, 274, 314, 316, 579], "z": [78, 557], "real": [78, 79, 209, 226, 227, 247, 559, 577, 579], "quantize_data_per_channel": 78, "tensor_valu": 78, "scale_valu": 78, "zo_valu": 78, "dequantize_data_with_scale_zero": 78, "sacal": 78, "dequantize_data": 78, "valueinfo": 78, "tensor_nam": [78, 175, 325, 326], "new_dtyp": 78, "quantizedvalu": 78, "new_quantized_nam": 78, "scale_nam": 78, "zero_point_nam": 78, "quantized_value_typ": 78, "quint8": 78, "linearli": 78, "intial": 78, "quantizediniti": 78, "quantized_data": 78, "quantizationmod": 78, "quantizedvaluetyp": 78, "quantformat": [78, 263], "quantize_nparrai": 78, "high": [78, 209, 210, 247, 248, 555, 567, 577, 585], "attribute_to_kwarg": 78, "kwarg": [78, 79, 81, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 167, 168, 186, 191, 208, 217, 220, 221, 223, 227, 228, 231, 246, 259, 265, 266, 276, 282, 288, 293, 298, 304, 306, 307, 308, 315, 316, 318, 319, 320, 322, 323, 324, 325, 326, 339, 343, 355, 358, 359, 363, 365, 366, 368, 369, 374, 376, 378, 379, 380, 381, 391, 393, 394, 396, 398, 401, 402, 407, 554], "make_nod": 78, "find_by_nam": 78, "item_list": 78, "item": [78, 188, 222, 258, 302, 342, 354, 422, 510, 543, 559, 585], "get_ops_recurs": 79, "prefix": [79, 175, 224, 266, 267, 309, 537, 583], "graph_info": [79, 81, 318, 319, 320, 324, 325, 326], "templateadaptor": 79, "tampl": 79, "is_fused_modul": [79, 177, 181], "_propagate_qconfig_help": [79, 177, 181], "calculate_hessian_trac": 79, "enable_act": [79, 177], "hessian": [79, 177, 349, 585], "gradient": [79, 152, 303, 326, 328, 332, 333, 566, 575, 576, 587], "amap": 79, "op_nam": [79, 187, 191, 308, 347, 351, 354, 355, 358, 424, 429, 430, 438, 439, 575, 583], "hessian_trac": [79, 177], "pytorchadaptor": 79, "objext": 79, "number": [79, 101, 102, 182, 184, 196, 204, 207, 219, 223, 234, 242, 245, 256, 259, 271, 272, 274, 281, 290, 301, 313, 314, 316, 331, 332, 337, 338, 341, 346, 362, 369, 456, 512, 522, 525, 552, 553, 555, 559, 569, 575, 579, 582, 584, 585], "summari": [79, 224, 266, 335, 359, 552, 574, 583], "optimizer_tupl": [79, 81], "criterion_tupl": [79, 81], "hook": [79, 81, 194, 225, 232, 233, 260, 266, 293, 298, 326, 354, 362, 557, 575, 583], "is_fused_child": 79, "_post_eval_hook": [79, 583], "is_fused_op": 79, "is_last_fused_child": 79, "last": [79, 81, 127, 181, 194, 196, 234, 288, 301, 327, 328, 331, 354, 493, 552, 570, 579], "q_capabl": 79, "get_non_quant_modul": 79, "model_kwarg": 79, "non_quant_modul": 79, "custom": [79, 145, 186, 279, 307, 327, 368, 411, 416, 553, 557, 575, 582], "keyword": 79, "custom_non_quant_dict": 79, "pytorch_ipexadaptor": 79, "ipex": [79, 326, 566, 587], "unspport": 79, "No": [79, 562, 574, 577], "pytorch_fxadaptor": 79, "fx": [79, 181, 343, 352, 566, 577, 579, 580, 587], "prepare_sub_graph": 79, "sub_module_list": 79, "fx_op_cfg": 79, "is_qat": 79, "example_input": [79, 261, 263, 326, 561], "recurs": [79, 369], "qconfigmap": 79, "prepare_fx": 79, "dir": [79, 181, 206, 244, 368, 555, 562, 564], "convert_sub_graph": 79, "fuse_fx_model": 79, "fused_model": 79, "calculate_op_sensit": [79, 81], "output_op_nam": [79, 81], "confidence_batch": [79, 81, 585], "fallback": [79, 81, 181, 344, 345, 349, 351, 352, 570, 580, 585], "requantize_cfg": [79, 81], "switch": [79, 119, 583], "stage": [79, 81, 127, 344, 352, 517, 557, 583, 585], "re": [79, 81, 346, 365, 567], "sort": [79, 81, 169, 324, 351, 433, 585], "sensit": [79, 81, 303, 328, 332, 566, 575, 576], "ops_lst": 79, "pytorchqueri": 79, "set_quantization_config": 80, "organ": [80, 552, 586], "unsupported_precis": 80, "tensorflowadaptor": 81, "stock": 81, "spr": 81, "graphdef": [81, 90, 91, 94, 95, 97, 101, 102, 104, 108, 113, 119, 120, 126, 127, 128, 129, 140, 162, 169, 175, 325, 502, 571], "graph_def": [81, 87, 140, 175, 325, 343, 467, 502, 503], "frozen": [81, 90, 325, 343, 461, 464, 552, 571], "ckpt": [81, 175, 325, 343, 587], "savedmodel": [81, 325, 343, 587], "folder": [81, 175, 208, 213, 246, 251, 343, 368, 555, 583], "on_epoch_begin": [81, 233, 266, 293, 298, 303, 304, 332, 335, 336, 337, 338, 339, 359, 362, 557, 573, 575], "on_epoch_end": [81, 233, 266, 293, 298, 303, 304, 332, 335, 336, 337, 338, 339, 359, 362, 557, 573, 575], "larger": [81, 331], "better": [81, 131, 194, 195, 291, 327, 343, 558, 569, 570, 575, 576, 577, 579, 582, 585], "tf": [81, 146, 152, 175, 205, 206, 207, 208, 223, 243, 244, 245, 246, 259, 323, 325, 372, 552, 559, 571, 577, 580, 584], "compat": [81, 115, 175, 270, 279, 312, 325, 559, 571, 581], "definit": [81, 140, 199, 204, 237, 242, 438, 451, 460, 509, 540], "inspect_weight_and_bia": 81, "node_list": 81, "graph_node_name_map": [81, 175], "bias": 81, "fused_node_map": 81, "pattern_map": 81, "val": [81, 175, 208, 211, 246, 249, 302, 342], "seq": 81, "fused_mapping_revers": 81, "fused_map": 81, "inspect_activ": 81, "local": [81, 301, 331, 338, 354, 365, 369, 384, 416, 421, 434, 454, 552, 582], "actual": [81, 274, 316, 327, 559], "tensorflowbasemodel": [81, 325, 465], "start": [81, 223, 259, 267, 270, 281, 309, 312, 324, 327, 338, 344, 347, 517, 537, 567, 584, 585], "quantizedv2": 81, "quantizedconv2d": 81, "qat_convert": 81, "quantize_recip": [81, 145, 146], "kera": [81, 104, 146, 152, 230, 320, 325, 445, 452, 462, 559, 571], "sequenti": [81, 204, 242, 307, 348, 585], "fake": [81, 143, 579], "converted_model": [81, 570], "quan_model": [81, 175], "diagnosi": [81, 175, 308, 413, 416, 422, 445, 505, 534, 540], "get_output_op_nam": 81, "qmodel": [81, 177], "oupur": 81, "mse": [81, 181, 274, 308, 316, 350, 424, 430, 552, 569, 578, 581], "backup": 81, "fallen": 81, "denot": 81, "tensorflow_itexadaptor": 81, "itex": [81, 139], "performance_onli": [81, 82, 83, 137, 161, 166, 174, 534], "get_grappler_optimization_cfg": 81, "grappler": [81, 109, 563], "get_bf16_pattern": 81, "patter": [81, 155], "get_eightbit_pattern": 81, "qdq_enabl": [81, 82], "eightbit": [81, 583], "generate_internal_pattern": 81, "intern": [81, 140, 177, 286, 508, 554, 555, 576], "graphconvert": 82, "qt_config": 82, "recip": [82, 145, 261, 263, 265, 266, 306, 561, 585], "int8_sequ": 82, "fp32_op": [82, 84, 137, 140], "bf16_op": [82, 84, 137, 140, 580], "fake_qu": [82, 123, 137, 161, 166], "itex_mod": [82, 113, 124, 137, 161, 166], "new_api": [82, 83, 105, 106, 111, 113, 127, 134, 161, 166, 170], "use_bf16": [82, 83, 578, 580], "fp32_frozen_graph": 82, "requantizeop": [82, 83], "empti": [82, 145, 270, 312, 346], "bf16_convert": [82, 83, 85, 122, 141], "bf16_node": [82, 83], "quantize_with_qdq_pattern": 82, "graphconverterwithoutcalib": 83, "recover_config": 83, "convert_without_calib": 83, "quantize_without_calib": 83, "rewrit": [84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139], "bf16convert": [84, 580], "graphrewriterbas": [84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139], "do_transform": [84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 154, 161, 162, 166, 170, 171, 173, 174], "biasadd": [86, 93, 98, 100, 113, 139, 155, 156, 158, 165, 167, 563], "convertaddtobiasaddoptim": 86, "addv2": [86, 102, 103, 104, 155, 158, 563], "layout": 87, "convertlayoutoptim": 87, "nchw": 87, "nhwc": [87, 101, 102], "leakyrelu": [88, 153, 155, 157, 158, 163], "convertleakyreluoptim": 88, "subgraph": [88, 96, 100, 101, 102, 104, 561], "mul": [88, 99, 100, 101, 103, 104, 113, 155, 158, 561], "coeffici": [88, 280], "less": [88, 113, 175, 369, 553, 557, 575], "nan": 89, "convertnantorandom": 89, "const": [89, 90, 97, 98, 101, 102, 104, 116, 119, 120, 132, 133, 140, 308, 389, 400, 403, 410, 416, 418, 419, 423, 505, 513, 523], "placehold": [90, 204, 242], "convertplaceholdertoconst": 90, "renam": [90, 115, 288, 581], "placeholderwithdefault": 90, "constant": [90, 96, 113, 140, 169, 261, 263, 308, 324, 326, 346, 363, 506, 554, 563, 584], "simplifi": 90, "input_graph_def": [90, 91, 94, 95, 97, 101, 102, 104, 108, 119, 120, 140, 169], "nodes_to_convert": 90, "strtobool": 90, "val_str": 90, "equival": [90, 117, 279], "rerewrit": 91, "dequantizecastoptim": 91, "b16": 91, "redund": [91, 126, 128, 162], "dilat": 92, "contract": 92, "dilatedcontract": 92, "spacetobatchnd": 92, "batchtospacend": 92, "inject": 93, "injectdummybiasaddoptim": 93, "miss": [93, 382, 575, 579], "behind": 93, "expanddim": 94, "expanddimsoptim": 94, "whose": [94, 119, 120, 302, 331, 564, 575, 585], "featch": 95, "fetchweightfromreshapeoptim": 95, "fetch": [95, 184, 199, 237, 270, 312, 555], "fold": [96, 97, 101, 102, 113, 261, 263, 326, 563], "foldbatchnormnodesoptim": 96, "scale_after_norm": 96, "batchnormwithglobalnorm": 96, "nodedef": [96, 101, 102, 104, 140, 169, 171, 502], "normal": [96, 101, 102, 104, 223, 259, 272, 314, 524, 572, 584], "convolut": [96, 101, 102, 557, 575, 577], "multipl": [96, 101, 102, 145, 192, 193, 197, 198, 206, 207, 209, 210, 211, 212, 213, 217, 220, 223, 230, 235, 236, 238, 244, 245, 247, 248, 249, 250, 251, 255, 257, 259, 275, 303, 318, 319, 321, 327, 332, 338, 345, 509, 553, 555, 561, 573, 575, 582, 585], "onc": [96, 140, 175, 230, 305, 341, 552, 554, 575, 576, 577, 585, 587], "final": [96, 303, 331, 338, 516, 572, 575, 576, 579, 581, 585], "That": [96, 552], "opportun": [96, 101, 102], "down": 96, "addit": [96, 102, 104, 181, 194, 359, 509, 552, 557, 581], "rather": [96, 564], "expens": [96, 557, 585], "bake": 96, "identifi": [96, 101, 102, 104, 270, 312, 325, 365], "simpler": 96, "form": [96, 101, 102, 104, 115, 270, 272, 312, 314, 416, 418, 517, 552, 557], "spot": 96, "fusedbatchnorm": [96, 101, 115], "fusedbatchnormv3": [96, 153, 163], "_fusedbatchnormex": 96, "extend": [96, 101, 102], "newer": [96, 101, 102], "badli": [96, 101, 102, 104, 115], "duplic": [96, 101, 102, 104, 133, 138, 346], "graphfoldconstantoptim": 97, "supported_op_typ": 97, "check_all_fold": 97, "check_const_input": 97, "node_nam": [97, 101, 102, 104, 113, 140, 162, 169, 171, 175, 263, 324, 325, 404, 502], "fusebiasaddandaddoptim": 98, "columnwis": 99, "fusecolumnwisemuloptim": 99, "depthwiseconv2dn": [99, 105, 106, 155, 165, 563], "math": [100, 579], "fuseconvwithmathoptim": 100, "elimin": 100, "realdiv": [100, 103], "decompos": [101, 102], "fusedecomposedbnoptim": 101, "some": [101, 102, 145, 194, 206, 233, 244, 266, 302, 354, 524, 552, 555, 567, 569, 572, 575, 576, 579, 580, 583, 585], "normalizatin": [101, 102], "group": [101, 102, 333, 340, 441, 566, 575, 576, 583, 584, 585, 587], "instead": [101, 102, 187, 188, 205, 243, 369], "those": [101, 102, 108, 351, 369, 557, 564, 573, 575, 576, 579, 585], "recogn": [101, 102, 267, 309], "attempt": [101, 102, 365], "multipli": 101, "rsqrt": [101, 102], "varianc": [101, 170, 185], "epsilon": [101, 586], "gamma": [101, 102, 104], "OR": 101, "mul_0": 101, "mul_1": 101, "insid": [101, 270, 312, 557, 575, 585], "mul_3": 101, "batchnorma": 101, "node_name_from_input": [101, 102, 104, 140, 169, 171], "strip": [101, 102, 104, 113, 117, 118, 175, 583], "port": [101, 102, 104, 169, 537, 541, 552], "underli": [101, 102, 104, 280], "node_from_map": [101, 102, 104], "node_map": [101, 102, 104], "pull": [101, 102, 104, 517], "entri": [101, 102, 104, 162, 177, 230, 265, 307, 387, 430, 433, 516, 524, 568], "index": [101, 102, 104, 145, 152, 199, 204, 208, 212, 217, 224, 237, 242, 246, 250, 255, 266, 291, 327, 369, 541, 555, 569], "isn": [101, 102, 104, 140], "present": [101, 102, 104, 552, 577], "values_from_const": [101, 102, 104, 140], "node_def": [101, 102, 104, 140], "extract": [101, 102, 104, 140, 208, 246, 543, 555], "access": [101, 102, 104, 140, 152, 187, 188, 365, 369, 508, 524, 537, 541, 552], "valid_reshape_input": [101, 102], "reshape_in0_ndef": [101, 102], "reshape_in1_ndef": [101, 102], "bypass_reshap": [101, 102], "input_node_map": [101, 102], "get_const_dim_count": [101, 102], "dimens": [101, 102, 198, 223, 236, 259, 282, 297, 331, 346, 555, 557, 575, 584], "instancenorm": 102, "fusedecomposedinoptim": 102, "contraint": [102, 104], "clang": 102, "x____________": 102, "mean1": 102, "fusedop": [102, 104], "_mklfusedinstancenorm": 102, "_mkllayernorm": [102, 104], "squareddiff": 102, "mean0": 102, "mul1": 102, "constx": 102, "mul2": 102, "mul0": 102, "gelu": [103, 158], "fusegeluoptim": 103, "sqrt": 103, "erf": 103, "samll": 104, "layernorm": [104, 288], "fuselayernormoptim": 104, "remap": 104, "smaller": [104, 223, 259, 557, 575, 576, 584], "case": [104, 108, 205, 222, 223, 224, 243, 258, 259, 265, 266, 274, 293, 298, 306, 307, 316, 327, 514, 518, 524, 552, 554, 557, 559, 563, 564, 569, 572, 575, 577, 579, 581, 584, 586], "fusedbatcnormv3": 104, "restrict": [104, 575, 576, 582], "2d": 104, "3d": [104, 577], "fill": [104, 391, 393, 394, 396, 398, 401, 402, 407, 552, 582, 584], "f": [104, 557, 559, 579], "u": [104, 170, 185], "d": [104, 108, 279, 557, 564], "c": [104, 108, 208, 246, 552, 555, 562, 567, 585], "h": [104, 223, 259, 559, 584], "n": [104, 207, 223, 245, 259, 268, 301, 310, 331, 512, 555, 557, 575, 576, 584], "v": [104, 586], "fusepadwithconv2doptim": 105, "excluded_op_nam": [105, 106, 187, 191, 308, 575], "itex_qdq_mod": [105, 106], "conv3d": [105, 106, 155], "fusepadwithfp32conv2doptim": 106, "fusetransposereshapeoptim": 107, "cse": [108, 133], "graphcseoptim": 108, "child": [108, 583], "b1": 108, "c1c2": 108, "d1": [108, 369], "c1": 108, "c2": 108, "bound": [108, 223, 224, 259, 266, 270, 279, 312, 346, 569, 584], "relu6": [108, 155, 158, 563], "elim": [108, 113], "grappleroptim": 109, "input_output_nam": 109, "opt_cfg": 109, "wrapper": [109, 152, 205, 217, 220, 223, 225, 226, 227, 228, 229, 243, 255, 257, 259, 270, 274, 312, 315, 316, 319, 321, 325, 541, 549, 580], "convert_add_to_biasadd": [110, 122, 141], "convert_layout": [110, 122, 141], "convert_leakyrelu": [110, 122, 141], "convert_nan_to_random": [110, 122, 141], "convert_placeholder_to_const": [110, 122, 141], "dequantize_cast_optim": [110, 122, 141], "dilated_contract": [110, 122, 141], "dummy_biasadd": [110, 122, 141], "expanddims_optim": [110, 122, 141], "fetch_weight_from_reshap": [110, 122, 141], "fold_batch_norm": [110, 122, 141], "fold_const": [110, 122, 141], "fuse_biasadd_add": [110, 122, 141], "fuse_column_wise_mul": [110, 122, 141], "fuse_conv_with_math": [110, 122, 141], "fuse_decomposed_bn": [110, 122, 141], "fuse_decomposed_in": [110, 122, 141], "fuse_gelu": [110, 122, 141], "fuse_layer_norm": [110, 122, 141], "fuse_pad_with_conv": [110, 122, 141], "fuse_pad_with_fp32_conv": [110, 122, 141], "fuse_reshape_transpos": [110, 122, 141], "graph_cse_optim": [110, 122, 141], "grappler_pass": [110, 122, 141], "insert_print_nod": [110, 122, 141], "move_squeeze_after_relu": [110, 122, 141], "pre_optim": [110, 122, 141], "remove_training_nod": [110, 122, 141, 169], "rename_batch_norm": [110, 122, 141], "split_shared_input": [110, 122, 141, 169], "strip_equivalent_nod": [110, 122, 141, 175], "strip_unused_nod": [110, 122, 141, 175], "switch_optim": [110, 122, 141], "update_ent": [110, 122, 141], "print": [111, 177, 274, 316, 326, 369, 552, 559, 569, 575, 585], "insertprintminmaxnod": 111, "pre_node_nam": 111, "post_node_nam": 111, "movesqueezeafterreluoptim": 112, "match": [112, 113, 140, 152, 222, 258, 270, 271, 312, 313, 557], "pre": [113, 146, 194, 195, 206, 244, 287, 326, 343, 555, 557, 570, 575, 577, 579, 583, 585], "entranc": [113, 197, 200, 217], "preoptim": 113, "get_excluded_node_nam": 113, "get_optimized_model": 113, "possibl": [113, 224, 266, 279, 344, 348, 386, 453, 552, 573, 580, 585], "useless": 113, "get_matched_nod": 113, "illustr": 113, "matched_node_a_nam": 113, "has_positive_input": [113, 140], "neg": [113, 140], "removetrainingnodesoptim": 114, "protected_nod": [114, 169], "types_to_splic": [114, 169], "checknumer": [114, 169], "stopgradi": 114, "tranin": 114, "edg": [114, 438, 440, 445, 505, 584], "fusedbatchnormv2": 115, "renamebatchnormoptim": 115, "due": [115, 575, 576, 579, 583], "histor": 115, "latter": [115, 145], "former": 115, "platform": [115, 369, 512, 566, 577, 579, 587], "vnni_bf16": 115, "amx": 115, "instruct": [115, 552, 557, 567, 570, 577, 578, 579], "splitsharedinputoptim": 116, "stripequivalentnodesoptim": 117, "output_node_nam": [117, 118, 161, 162, 166, 169, 175, 325], "unus": [118, 175, 279, 288, 324], "stripunusednodesoptim": 118, "input_node_nam": [118, 161, 166, 169, 175, 325], "switchoptim": 119, "condit": [119, 206, 207, 208, 223, 244, 245, 246, 259, 555, 568, 584, 585], "enter": [119, 120], "updateenteroptim": 120, "workaround": 120, "freeze_fake_qu": [122, 130, 141], "freeze_valu": [122, 130, 141], "freeze_value_without_calib": [122, 130, 141], "fuse_conv_redundant_dequant": [122, 130, 141], "fuse_conv_requant": [122, 130, 141], "fuse_matmul_redundant_dequant": [122, 130, 141], "fuse_matmul_requant": [122, 130, 141], "meta_op_optim": [122, 130, 141], "post_hostconst_convert": [122, 130, 141], "post_quantized_op_cs": [122, 130, 141], "rnn_convert": [122, 130, 141], "scale_propag": [122, 130, 141], "insert_qdq_pattern": [122, 136, 141], "merge_duplicated_qdq": [122, 136, 141], "share_qdq_y_pattern": [122, 136, 141], "freez": [123, 124, 125, 575, 576], "fakequ": 123, "freezefakequantopoptim": 123, "freezevaluetransform": 124, "max_min_data": [124, 125], "postfix": [124, 125], "tensor_data": [124, 369], "th": [124, 125], "gpu": [124, 125, 132, 140, 169, 553, 566, 578, 579], "generate_output_graph": [124, 125], "max_name_valu": [124, 125], "freeze_max": [124, 125], "freeze_min": [124, 125], "generate_output_graph_rang": [124, 125], "freezevaluewithoutcalibtransform": 125, "95": [125, 270, 274, 312, 316, 569, 587], "do_transformation_without_calib": 125, "quantizedconv": [126, 127], "quantizeddeconv": 126, "fuseconvredundantdequantizetransform": 126, "cpu": [126, 127, 128, 129, 140, 169, 282, 369, 553, 566, 570, 574, 577, 578, 580, 583], "_quantizedconv": 126, "_quantizeddeconv": 126, "successor": [126, 127, 128, 129], "requant": [127, 129, 583], "fuseconvrequantizetransform": 127, "fuse_pattern": 127, "sum_pattern": 127, "quantizedmatmul": [128, 129], "fusematmulredundantdequantizetransform": 128, "_quantizedmatmul": [128, 129], "fusematmulrequantizedequantizetransform": 129, "quantizedmatmulwithbiasanddequant": 129, "fusematmulrequantizetransform": 129, "fusematmulrequantizedequantizenewapitransform": 129, "fusematmulrequantizenewapitransform": 129, "meta": [131, 208, 246], "metainfochangingmemopoptim": 131, "metaop": 131, "quantizev2": [131, 133, 155, 156, 158, 162], "hostconst": 132, "posthostconstconvert": 132, "postcseoptim": 133, "decreas": 133, "rnn": [134, 140], "quantizedrnnconvert": 134, "calibration_data": [134, 137], "rnn_detail": 134, "scalepropagationtransform": 135, "direct": [135, 301, 331, 474], "algrothim": 135, "generategraphwithqdqpattern": 137, "op_wise_config": [137, 161, 166], "quantized_nod": 137, "quantizaiton": 137, "mergeduplicatedqdqoptim": 138, "y": [139, 223, 259, 346, 584], "shareqdqforitexypatternoptim": 139, "break": [139, 559], "graphanalyz": 140, "extend_engin": 140, "analyz": [140, 169, 325, 575, 576, 582, 583], "singleton": [140, 308, 369, 505, 513], "properti": [140, 152, 182, 184, 196, 198, 206, 208, 224, 225, 233, 234, 236, 244, 246, 260, 265, 266, 273, 274, 275, 276, 290, 293, 298, 306, 307, 315, 316, 318, 319, 320, 322, 324, 325, 326, 327, 339, 346, 354, 369, 370, 388, 421, 428, 432, 437, 438, 441, 453, 456, 461, 465, 474, 477, 482, 486, 489, 492, 499, 509, 516, 517, 518, 522, 527, 531, 534, 536, 537, 568, 574], "getter": [140, 233, 260, 266, 290, 293, 298, 306, 307, 326, 454], "_graph": 140, "retrun": 140, "get_graph_input_output": 140, "know": [140, 226, 227, 260, 266, 293, 298, 510, 559, 581], "clearli": 140, "similar": [140, 288, 578, 585, 586], "summarize_graph": 140, "writtern": 140, "googl": [140, 570, 577], "query_fusion_pattern_nod": 140, "aggreg": [140, 518], "_search_pattern": 140, "remove_node_with_single_input_output": 140, "rebuild": 140, "structur": [140, 303, 338, 358, 449, 566, 575, 576, 579, 583, 587], "except": [140, 308, 369, 505, 513, 514, 524, 539, 549], "remove_nod": [140, 324], "replace_const_nod": 140, "new_const_nod": 140, "target_nod": 140, "old_constant_node_nam": 140, "replace_al": 140, "outdat": 140, "replace_constant_graph_with_constant_nod": 140, "new_nod": 140, "old_end_node_nam": 140, "replace_single_nod": 140, "old_output_node_nam": 140, "old_output_nam": [140, 324], "old_input_node_nam": 140, "old_input_nam": [140, 324], "top": [140, 223, 259, 265, 266, 274, 293, 298, 306, 316, 569, 584, 587], "bottom": [140, 552], "replace_nod": 140, "old_node_nam": 140, "output_nodes_nam": 140, "node_name_detail": 140, "parent": [140, 297, 303, 305, 324, 338, 341, 583], "add_nod": [140, 324, 438], "start_node_nam": 140, "end_node_nam": 140, "dump_graph": 140, "get_frame_info": 140, "frame": 140, "ordereddict": [140, 354, 411, 416, 525], "parent_frame_detail": 140, "parse_graph": 140, "outputnod": 140, "graphrewriterhelp": 140, "encapsul": [140, 194, 195, 343, 571], "compare_node_attr": 140, "node_a": 140, "node_b": 140, "compar": [140, 177, 274, 316, 327, 552, 558, 569, 576, 579, 582, 583, 585], "create_nod": [140, 169], "create_constant_nod": [140, 169], "datatyp": [140, 169, 580, 585], "set_attr_dtyp": [140, 169], "set_attr_tensor": [140, 169], "set_attr_type_list": [140, 169], "attr": [140, 169, 175], "set_attr_string_list": [140, 169], "set_attr_str": [140, 169], "set_attr_int_list": 140, "set_attr_int": [140, 169], "set_attr_float": [140, 169], "set_attr_bool": [140, 169], "generate_int32_bias_for_conv": 140, "bias_tensor": 140, "channel_s": 140, "max_input": 140, "min_input": 140, "max_filter_tensor": [140, 369], "min_filter_tensor": [140, 369], "activation_rang": 140, "weights_rang": 140, "127": [140, 209, 210, 247, 248, 555, 579, 587], "int32_bia": 140, "generate_int32_bias_for_matmul": 140, "weights_tensor": 140, "input_rang": 140, "max_filter_valu": 140, "min_filter_valu": 140, "gen_valid_sampling_log": 140, "log_path": 140, "analysis_rnn_model": 140, "quantize_lay": [141, 142, 144], "fake_quant": [141, 142, 144], "quantize_config": [141, 142, 144], "quantize_help": [141, 142, 144], "quantize_wrapp": [141, 142, 144], "fuse_qdq_bn": [141, 142, 160], "fuse_qdq_concatv2": [141, 142, 160], "fuse_qdq_conv": [141, 142, 160], "fuse_qdq_deconv": [141, 142, 160], "fuse_qdq_in": [141, 142, 160], "fuse_qdq_matmul": [141, 142, 160], "fuse_qdq_pool": [141, 142, 160], "optimize_qdq": [141, 142, 160], "optimize_lay": [142, 144, 147], "quantize_layer_add": [142, 144, 147], "quantize_layer_bas": [142, 144, 147, 149, 151], "quantize_layer_bn": [142, 144, 147], "fakequantizebas": 143, "get_config": [143, 152, 550], "serial": [143, 206, 244, 422, 429, 430, 460, 512, 514, 526, 527, 531, 532], "fakequant": 143, "classmethod": [143, 152, 182, 184, 294, 295, 296, 355, 358, 365, 511, 545, 547, 550], "from_config": [143, 152], "instanti": [143, 365, 573], "per_channel": [143, 169, 563, 586], "num_bit": 143, "symmetr": [143, 579, 584, 585], "narrow_rang": 143, "quantizeconfig": [145, 146, 152], "There": [145, 274, 307, 316, 552, 557, 563, 566, 569, 570, 585, 586], "add_quantize_recip": 145, "layer_nam": [145, 301, 331], "conv5_block3_3_conv": 145, "flase": 145, "conv5_block3_3_add": 145, "query_lay": 145, "layer_recip": 145, "remove_lay": 145, "get_quantize_recip": 145, "is_empti": 145, "clear_quantize_recip": 145, "init_quantize_config": 146, "begin": [146, 233, 266, 293, 298, 303, 304, 328, 332, 336, 337, 338, 339, 359, 557, 575, 585], "model_nam": [146, 282, 399, 405, 524], "qat_clone_funct": 146, "leav": 146, "quantizewrapp": [146, 152], "wrapped_lay": 146, "config_quantizable_lay": 148, "quantizelayeradd": 149, "quantizelayerbas": [149, 150, 151], "quantizelay": 150, "quantizelayerbatchnorm": 151, "quantizewrapperbas": 152, "trainabl": 152, "sublay": 152, "trainable_weight": 152, "track": [152, 354, 582], "descent": 152, "non_trainable_weight": 152, "manual": [152, 208, 246, 555], "add_loss": 152, "regular": [152, 267, 302, 309, 340, 575], "eager": [152, 304, 339, 371, 479, 483, 491, 559, 566, 579, 580, 583, 587], "gradienttap": 152, "input_shap": [152, 210, 248, 323, 453, 456, 465, 554, 555], "tensorshap": 152, "compute_output_shap": 152, "caus": [152, 575, 576], "state": [152, 177, 273, 274, 286, 288, 315, 316, 326, 355, 358, 575, 576], "happen": 152, "later": [152, 583], "output_shap": 152, "query_input_index": 152, "logic": [152, 194, 195, 354, 536, 586], "live": 152, "output_obj": 152, "fusenodestartwithfusedbatchnormv3": [153, 163], "quantizenodebas": [153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 167, 168], "_quantizedfusedbatchnorm": 153, "apply_newly_bn_relu_fus": [153, 163], "match_node_nam": [153, 155, 156, 157, 158, 163, 165, 167], "apply_newly_bn_leakyrelu_fus": [153, 163], "get_longest_fus": [153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 167, 168], "longest": [153, 154, 155, 156, 157, 158, 159, 163, 165, 167, 222, 223, 258, 259, 584], "apply_the_transform": [153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 167, 168], "concatv2": [154, 164, 174, 563], "fusenodestartwithconcatv2": [154, 164], "quantizedconcatv2": [154, 164], "fusenodestartwithconv2d": [155, 165], "apply_conv3d_add_addn_relu_fus": 155, "addn": [155, 165, 563], "apply_conv3d_add_addn_fus": 155, "apply_conv3d_add_relu_fus": 155, "apply_conv3d_add_fus": 155, "apply_conv3d_single_fus": 155, "apply_newly_conv_biasadd_relu_fus": 155, "elu": [155, 158], "sigmoid": [155, 158], "apply_newly_conv_biasadd_fus": 155, "apply_newly_conv_single_fus": 155, "apply_newly_conv_biasadd_addn_relu_fus": 155, "apply_conv_biasadd_hardswish_fus": 155, "hardswish": 155, "apply_newly_conv_biasadd_swishf32_fus": 155, "swishf32": 155, "swish_f32": 155, "apply_newly_conv_biasadd_addn_fus": 155, "conv2dbackpropinput": 156, "conv3dbackpropinputv2": 156, "fusenodestartwithdeconv2d": 156, "apply_single_deconv2d_fus": 156, "apply_deconv2d_biasadd_fus": 156, "apply_single_deconv3d_fus": 156, "apply_deconv3d_biasadd_fus": 156, "fusedinstancenorm": 157, "fusenodestartwithfusedinstancenorm": 157, "apply_newly_in_relu_fus": 157, "batchmatmul": 158, "batchmatmulv2": 158, "fusenodestartwithmatmul": [158, 167], "apply_matmul_biasadd_relu_fus": [158, 167], "tanh": 158, "apply_matmul_biasadd_fus": [158, 167], "apply_batchmatmulv2_fus": 158, "apply_batchmatmulv2_mul_add_fus": 158, "avgpool": [159, 168, 563], "fusenodestartwithpool": [159, 168], "optimizeqdqgraph": 161, "op_wise_sequ": [161, 166], "quantizegraphbas": [161, 162, 166], "get_quantized_nod": 161, "quantizegraph": 162, "register_transform": 162, "virtual": [162, 171, 577], "deriv": [162, 233, 260, 266, 301, 303, 305, 328, 331, 338, 340, 341], "remove_dead_nod": 162, "output_nam": [162, 261, 263, 326, 561], "longer": [162, 206, 223, 244, 259, 555, 584], "eightbitize_single_input_tensor_nod": 162, "original_nod": 162, "add_op_funct": 162, "add_output_graph_nod": 162, "output_nod": [162, 399], "remove_redundant_quant": 162, "old_graph": 162, "create_nodes_map": 162, "apply_conv_single_fus": 165, "apply_conv_biasadd_relu_fus": 165, "apply_conv_biasadd_fus": 165, "apply_conv_biasadd_addn_relu_fus": 165, "quantizegraphforintel": 166, "itself": [168, 318, 319, 320, 322, 324, 325], "herlper": 169, "quantizegraphhelp": 169, "staticmethod": 169, "get_sorted_graph": 169, "reorder": [169, 286, 288], "pars": [169, 171, 206, 207, 219, 223, 244, 245, 256, 259, 288, 332, 371, 382, 387, 410, 411, 413, 416, 417, 418, 419, 422, 475, 479, 483, 488, 491, 497, 516, 524, 532, 543, 584], "easier": [169, 552, 577], "in_graph": [169, 175], "ouput": 169, "aren": 169, "uncondition": 169, "copy_attr": 169, "attr_valu": 169, "copi": [169, 302, 369], "unique_node_name_from_input": 169, "ensure_tensor_name_has_port": 169, "sure": [169, 301, 303, 305, 331, 338, 341, 453, 552, 553], "generate_quantized_weight_nod": 169, "host_op_typ": 169, "input_nod": [169, 399], "weight_bit": 169, "enter_nod": 169, "biascorrect": 170, "fp32_graph": 170, "weight_empir": 170, "graphtransformbas": [170, 171, 173, 174], "Will": [170, 197, 200, 217, 537, 557, 566], "task": [170, 206, 213, 244, 251, 274, 288, 316, 555, 557, 566, 569, 575, 576], "close": [170, 185], "w_int8": [170, 185], "w_fp32": [170, 185], "ratio": [170, 185, 219, 223, 256, 259, 266, 293, 298, 301, 303, 304, 305, 331, 335, 338, 339, 341, 555, 575, 576, 584, 587], "equal": [170, 175, 185, 369, 569], "round": [170, 185, 579], "scale_c": [170, 185], "shift": [170, 185, 219, 256, 584], "notic": [170, 185, 224, 266, 568, 581], "empir": [170, 185], "graphtransform": 171, "input_pb": [171, 173, 174], "parse_input_pb": 171, "pbdef": 171, "generate_input_map": 171, "get_node_name_from_input": 171, "insertlog": 173, "node_name_list": 173, "show_nam": 173, "show_op": 173, "first_n": 173, "summar": [173, 557], "1024": [173, 208, 246], "messag": [173, 524, 536, 541, 585], "dump_fp32": 173, "rerang": 174, "rerangequantizedconcat": 174, "rerange_quant": 174, "version1_lt_version2": [175, 369], "version1": [175, 369], "version2": [175, 369], "version1_gt_version2": [175, 369], "greater": [175, 369], "version1_eq_version2": [175, 369], "version1_gte_version2": [175, 369], "version1_lte_version2": [175, 369], "disable_random": 175, "seed": [175, 279, 281, 292, 308, 369, 534, 586], "read_graph": 175, "in_graph_is_binari": 175, "read": [175, 208, 211, 223, 246, 249, 259, 266, 293, 298, 302, 304, 339, 439, 443, 444, 555, 580, 582], "write_graph": 175, "out_graph_def": 175, "out_graph_fil": 175, "write": [175, 215, 216, 217, 253, 254, 255, 270, 312, 369, 559, 564, 583], "is_ckpt_format": 175, "model_path": [175, 324, 439, 454, 459, 524], "is_saved_model_format": 175, "saved_model": [175, 266, 276, 325, 445, 452, 462], "get_estimator_graph": 175, "estim": [175, 177, 274, 277, 278, 282, 289, 290, 316, 325, 585], "input_fn": [175, 325], "get_tensor_by_nam": 175, "try_cnt": 175, "scope": [175, 233, 266, 323, 575], "suffix": 175, "time": [175, 223, 259, 274, 286, 316, 327, 346, 369, 510, 516, 517, 522, 537, 559, 562, 572, 575, 576, 577, 579, 582, 583, 584, 585], "got": [175, 562, 583], "iterator_sess_run": 175, "sess": [175, 325], "iter_op": [175, 325], "feed_dict": [175, 205, 243], "output_tensor": [175, 325], "makeiter": 175, "pred": [175, 273, 274, 315, 316, 569], "collate_tf_pr": 175, "collat": 175, "tbe": 175, "get_input_output_node_nam": 175, "fix_ref_type_of_graph_def": 175, "ref": 175, "strip_unused_lib": 175, "r1": 175, "15": [175, 281, 563, 587], "branch": [175, 365], "get_graph_def": 175, "auto_input_output": 175, "get_model_input_shap": 175, "inout": 175, "get_tensor_val_from_graph_nod": 175, "tensor_v": 175, "int8_node_name_revers": 175, "revers": [175, 552], "tf_diagnosis_help": 175, "generate_feed_dict": 175, "input_tensor": [175, 325, 326], "hessiantrac": 177, "yao": 177, "zhewei": 177, "et": [177, 288], "al": [177, 288], "pyhessian": 177, "through": [177, 186, 194, 195, 222, 258, 308, 343, 347, 553, 563, 564, 566, 567, 569, 572, 573, 575, 578], "len": [177, 223, 259, 346, 555, 559, 584], "2020": 177, "ieee": [177, 570], "confer": [177, 576], "big": 177, "dong": 177, "zhen": 177, "hawq": [177, 349, 585], "system": [177, 224, 365, 369, 512, 539, 540, 553, 575], "33": [177, 279, 587], "18518": 177, "18529": 177, "openvinotoolkit": 177, "nncf": 177, "blob": [177, 267, 268, 271, 272, 301, 309, 310, 313, 314, 331], "mse_metric_gap": [177, 424], "fp32_tensor": [177, 424], "euclidean": [177, 424, 557], "distanc": [177, 424, 557], "get_act_gap": 177, "gap": [177, 561, 571], "get_avg_trac": 177, "num_sampl": [177, 274, 316], "32": [177, 270, 312, 559, 564, 574, 575, 587], "averag": [177, 270, 271, 272, 274, 312, 313, 314, 316, 569, 585], "compare_weight": 177, "float_dict": 177, "quantized_dict": 177, "being": [177, 270, 282, 307, 312, 326, 441], "usag": [177, 205, 243, 266, 270, 276, 307, 312, 327, 524, 552, 555, 559, 560, 569, 572, 578, 584], "wt_compare_dict": 177, "float_model": 177, "state_dict": [177, 288, 559, 583], "compute_error": 177, "weight_dict": 177, "get_embedding_contigu": 181, "embed": [181, 288], "contigu": [181, 575], "append_attr": 181, "fx_model": 181, "get_mse_order_per_fp32": 181, "example_inp": 181, "influenc": 181, "fallback_ord": 181, "algorithm_registri": [182, 184], "algorithm_typ": [182, 184], "registr": [182, 184, 208, 212, 215, 216, 217, 220, 223, 230, 246, 250, 253, 254, 255, 257, 259, 296], "support_algorithm": [182, 184], "algorithmschedul": [182, 184], "origin_model": [182, 184], "calib_it": [182, 184], "fastbiascorrect": [183, 185], "fast_bias_correct": [184, 308], "weight_correct": [184, 308], "weightcorrect": 185, "ep": 185, "1e": [185, 586], "05": [185, 270, 274, 312, 316, 517, 569, 587], "conf_fname_or_obj": [186, 224, 233, 260, 265, 266, 275, 276, 277, 278, 289, 290, 293, 298, 306, 307, 308], "benchmark_conf": [186, 187, 308], "prefer": [186, 265, 266, 306, 308, 343], "collate_fn": [186, 196, 198, 199, 201, 202, 203, 205, 226, 227, 234, 236, 237, 239, 240, 241, 243, 308, 555], "last_batch": [186, 196, 198, 201, 202, 203, 205, 226, 227, 234, 236, 239, 240, 241, 243, 308], "rollov": [186, 196, 198, 201, 202, 203, 205, 226, 227, 234, 236, 239, 240, 241, 243, 308], "sampler": [186, 196, 198, 200, 201, 202, 203, 205, 226, 227, 234, 236, 238, 239, 240, 241, 243, 255, 266, 308, 356, 559], "batch_sampl": [186, 196, 198, 201, 202, 203, 205, 226, 227, 234, 236, 239, 240, 241, 243, 308], "num_work": [186, 196, 198, 201, 202, 203, 205, 226, 227, 234, 236, 239, 240, 241, 243, 282, 308, 579], "pin_memori": [186, 196, 198, 201, 202, 203, 205, 226, 227, 234, 236, 239, 240, 241, 243, 308], "shuffl": [186, 196, 198, 201, 202, 203, 205, 226, 227, 234, 236, 239, 240, 241, 243, 308, 579], "metric_cl": [186, 227, 228, 273, 274, 308, 315, 316], "mani": [186, 281, 282, 308, 327, 344, 567, 585, 586], "alwai": [186, 227, 228, 270, 308, 312, 315, 316, 569], "user_metr": [186, 227, 228, 308, 315, 316], "sub_class": [186, 308], "basemetr": [186, 273, 274, 308, 315, 316], "postprocess_cl": [186, 217, 220, 221, 227, 231, 308], "b_dataload": [186, 224, 266, 553], "b_func": [186, 224, 266, 553], "benchmarkconfig": [186, 553], "prunerv2": 187, "target_spars": [187, 191, 308, 331, 575, 578, 586], "pruning_typ": [187, 191, 308, 575], "start_step": [187, 191, 303, 308, 338, 575, 578], "end_step": [187, 191, 303, 308, 338, 575, 578], "pruning_scop": [187, 191, 308, 575], "pruning_frequ": [187, 191, 308, 338, 575], "min_sparsity_ratio_per_op": [187, 191, 308, 331, 575], "max_sparsity_ratio_per_op": [187, 191, 308, 331, 338, 575], "sparsity_decay_typ": [187, 191, 308, 575], "pruning_op_typ": [187, 191, 308, 575], "reg_typ": 187, "criterion_reduce_typ": 187, "resume_from_pruned_checkpoint": 187, "similiar": [187, 191, 308], "cfg_fname": 187, "parser": [187, 308, 382, 387, 505, 509, 513, 543], "quantization_conf": 187, "dotdict": 187, "pruning_conf": 187, "graph_optimization_conf": [187, 265, 266], "mixedprecision_conf": 187, "distillation_conf": [187, 260, 266], "search_spac": [187, 277, 289, 290, 291, 292], "defaultconf": 187, "notat": [187, 188], "deep_get": 188, "dot": [188, 524, 570, 579], "nest": 188, "eg": [188, 208, 212, 217, 246, 250, 255, 555, 578], "john": 188, "deep_set": 188, "male": 188, "weightpruningconfig": [191, 308, 573, 575], "pruning_config": [191, 308, 575], "snip_momentum": [191, 308, 328, 575], "4x1": [191, 297, 308, 331, 575, 587], "98": [191, 308, 575, 578, 587], "exp": [191, 308, 575], "distillationconfig": [191, 308, 557, 573], "teacher_model": [191, 225, 260, 266, 308, 557], "sgd": [191, 230, 308, 557, 578, 586], "learning_r": [191, 308, 578, 586], "0001": [191, 308, 557, 578], "callabl": [191, 272, 308, 314, 359, 520, 524, 540, 541], "altern": [191, 308], "sigopt": [192, 193, 308, 577], "tpe": [192, 193, 308], "sigopttunestrategi": 194, "q_dataload": [194, 195, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 564, 585], "q_hook": [194, 195, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354], "tunestrategi": [194, 195, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 585], "hpo": 194, "mandatori": [194, 195, 343, 586], "yield": [194, 195, 204, 226, 227, 242, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 554, 579, 585], "taken": [194, 195, 343], "reserv": [194, 195, 233, 266, 307, 332], "tuner": [194, 195, 265, 266, 306, 343], "scalar": [194, 195, 343, 569, 579], "pseudo": [194, 195, 343, 583], "params_to_tune_config": 194, "next_tune_cfg": [194, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 585], "travers": [194, 195, 344, 347, 348, 354], "concret": [194, 354, 585], "get_acc_target": 194, "base_acc": 194, "ceiterion": 194, "overrid": [194, 233, 266, 306, 354, 365, 369, 514], "constraint": [194, 265, 266, 306, 582, 585, 586], "create_exp": 194, "acc_target": 194, "fefin": 195, "tpetunestrategi": 195, "add_loss_to_tuned_history_and_find_best": 195, "tuning_history_list": 195, "histori": [195, 346, 354, 368, 369, 409, 416, 418, 422, 475, 493, 543, 585], "object_evalu": 195, "alredi": 195, "calculate_loss": 195, "acc_diff": 195, "lat_diff": 195, "stop": [195, 324, 347, 354, 493, 517, 585, 586], "timeout": [195, 354, 534, 578, 585, 586], "trials_count": [195, 347, 354], "either": [195, 270, 312, 354, 570, 573, 578, 579], "basedatalod": [196, 234], "basedataload": [196, 198, 201, 202, 203, 205, 234, 236, 239, 240, 241, 243], "_generate_dataload": [196, 234], "drop": [196, 234, 270, 302, 312, 570, 575, 576, 587], "incomplet": [196, 234, 365], "discard": [196, 234], "dispatch": [197, 200, 217, 566], "default_col": [198, 236], "outer": [198, 236], "defaultdataload": [198, 202, 205, 236, 240, 243], "base_dataload": [198, 200, 201, 202, 203, 205, 236, 238, 239, 240, 241, 243, 255, 266], "drop_last": [199, 204, 237, 242], "iterablefetch": [199, 237], "indexfetch": [199, 237], "default_dataload": [200, 202, 205, 238, 240, 243, 255, 266], "fetcher": [200, 238, 255, 266], "mxnet_dataload": [200, 238, 255, 266], "onnxrt_dataload": [200, 238, 255, 266], "pytorch_dataload": [200, 238, 255, 266], "tensorflow_dataload": [200, 238, 255, 266, 502], "mxnetdataload": [201, 239], "onnxrtbertdataload": [202, 240], "bert": [202, 205, 206, 223, 240, 243, 244, 259, 555, 557, 569, 584, 587], "varient": [202, 240], "onnxrtdataload": [202, 240], "pytorchdataload": [203, 241], "data_sourc": [204, 242, 362], "__iter__": [204, 208, 212, 217, 242, 246, 250, 255, 554, 555], "matter": [204, 242, 580], "iterablesampl": [204, 242], "squential": [204, 242], "iterabledataset": [204, 207, 208, 210, 211, 212, 217, 242, 245, 246, 248, 249, 250, 255], "indexdataset": [204, 242], "__getitem__": [204, 208, 212, 217, 220, 223, 242, 246, 250, 255, 257, 259, 555], "__len__": [204, 208, 212, 217, 242, 246, 250, 255, 555], "inter": [204, 208, 212, 217, 242, 246, 250, 255], "retriev": [204, 242, 518], "sequentialsampl": [204, 242], "batchsampl": [204, 242], "tfdatadataload": [205, 243], "tensorflow1": [205, 243], "coupl": [205, 243], "satisfi": [205, 243, 567], "tf1": [205, 243, 571], "although": [205, 243, 582], "tensorflowbertdataload": [205, 243], "tensorflowmodelzoobertdataload": [205, 243], "zoo": [205, 223, 243, 259, 587], "tensorflowdataload": [205, 243, 502], "directli": [205, 243, 270, 274, 302, 312, 316, 561, 569, 578, 579, 583], "pytorchbertdataset": [206, 244], "model_typ": [206, 244, 325, 424, 454, 555], "tensordataset": [206, 244, 555], "repo": [206, 244, 555, 560], "link": [206, 244, 552, 555], "huggingfac": [206, 244, 365, 555], "easi": [206, 244, 266, 306, 552, 554, 561, 577, 579, 582], "classifi": [206, 244, 274, 316, 347, 555, 557, 575], "squad": [206, 223, 244, 259, 271, 272, 274, 313, 314, 316, 555, 569, 584, 587], "distilbert": [206, 244, 555, 577, 587], "xlnet": [206, 244, 555], "xlm": [206, 244, 555, 587], "101": [206, 244, 274, 316, 569, 587], "2043": [206, 244], "2001": [206, 244], "onnxrtbertdataset": [206, 244], "data_dir": [206, 244, 555], "model_name_or_path": [206, 244, 365, 555], "max_seq_length": [206, 223, 244, 259, 555, 584], "128": [206, 209, 210, 223, 244, 247, 248, 259, 555, 579, 584, 587], "do_lower_cas": [206, 222, 223, 244, 258, 259, 555, 584], "mrpc": [206, 244, 274, 316, 555, 569, 587], "dynamic_length": [206, 244, 555], "shortcut": [206, 244, 555], "truncat": [206, 223, 244, 259, 555, 584], "shorter": [206, 223, 244, 259, 555, 584], "lowercas": [206, 244, 555], "fine": [206, 244, 338, 555, 577, 579], "qqp": [206, 244, 555, 569, 587], "qnli": [206, 244, 555, 569, 587], "rte": [206, 244, 555, 569, 587], "st": [206, 244, 555, 569], "cola": [206, 244, 555, 569, 587], "mnli": [206, 244, 555, 569, 587], "wnli": [206, 244, 555, 569, 587], "mobilebert": [206, 244, 555, 557, 587], "roberta": [206, 244, 555, 587], "uncas": [206, 223, 244, 259, 555, 584, 587], "load_and_cache_exampl": [206, 244], "convert_examples_to_featur": [206, 223, 244, 259], "max_length": [206, 244], "label_list": [206, 244, 274, 316], "output_mod": [206, 244], "pad_token": [206, 244], "pad_token_segment_id": [206, 244], "mask_padding_with_zero": [206, 244], "inputfeatur": [206, 223, 244, 259], "input_id": [206, 223, 244, 259], "vocabulari": [206, 222, 223, 244, 258, 259, 288, 584], "attention_mask": [206, 244], "NOT": [206, 244, 563, 567], "token_type_id": [206, 244], "segment": [206, 244, 268, 270, 310, 312], "portion": [206, 244], "problem": [206, 244, 274, 281, 316, 569, 570], "regress": [206, 244], "seq_length": [206, 244], "to_json_str": [206, 244], "json": [206, 207, 223, 244, 245, 259, 379, 497, 499, 507, 514, 524, 555, 571, 584], "tensorflowbertdataset": [206, 244], "root": [206, 207, 208, 211, 244, 245, 246, 249, 274, 280, 316, 318, 319, 320, 322, 324, 325, 326, 359, 541, 554, 555, 559, 569, 586], "label_fil": [206, 223, 244, 259, 555, 584], "tfrecord": [206, 207, 208, 212, 217, 244, 245, 246, 250, 255, 555], "parsedecodebert": [206, 244], "tensorflowmodelzoobertdataset": [206, 207, 244, 245], "num_cor": [206, 207, 211, 244, 245, 249, 555], "28": [206, 207, 211, 244, 245, 249, 555, 587], "record": [206, 207, 208, 214, 225, 232, 244, 245, 246, 252, 327, 555, 582, 583, 585], "coco": [207, 214, 218, 245, 252, 270, 274, 312, 316, 569], "parsedecodecoco": [207, 245], "cocorecorddataset": [207, 245], "directori": [207, 208, 245, 246, 325, 365, 368, 369, 433, 486, 507, 524, 537, 555, 559, 562, 583], "interleav": [207, 245, 555], "parallel": [207, 245, 555], "cocoraw": [207, 245, 554, 555], "img_dir": [207, 245, 555], "val2017": [207, 245, 555], "anno_dir": [207, 245, 555], "annot": [207, 245, 270, 312, 555, 569], "instances_val2017": [207, 245, 555], "arrang": [207, 208, 211, 245, 246, 249, 338, 555, 575], "jpg": [207, 211, 213, 245, 249, 251, 555], "imag": [207, 208, 211, 213, 219, 223, 245, 246, 249, 251, 256, 259, 270, 282, 312, 522, 552, 555, 559, 578, 583, 584, 587], "coconpi": [207, 245, 555], "npy_dir": [207, 245, 555], "npy": [207, 245, 555], "tensorflowdataset": [208, 246], "pytorchdataset": [208, 246], "mxnetdataset": [208, 246], "onnxrtqldataset": [208, 246], "onnxrtitdataset": [208, 246], "IT": [208, 215, 246, 253], "pytorchmxnetwrapdataset": [208, 246], "datafunc": [208, 246], "pytorchmxnetwrapfunct": [208, 223, 246, 259], "framework_dataset": [208, 246], "convent": [208, 246, 270, 312, 557], "imageclassifi": [208, 246], "choos": [208, 246, 353, 552, 566, 567, 581, 585, 586], "tensorflow_itex": [208, 211, 212, 213, 215, 216, 217, 246, 249, 250, 251, 253, 254, 255, 578], "onnxrt_qdq": [208, 212, 215, 216, 217, 246, 250, 253, 254, 255, 578], "onnxrt_qlinearop": [208, 212, 215, 216, 217, 223, 246, 250, 253, 254, 255, 259, 578], "onnxrt_integerop": [208, 212, 215, 216, 217, 223, 246, 250, 253, 254, 255, 259, 578], "pytorch_ipex": [208, 212, 215, 216, 217, 246, 250, 253, 254, 255, 578, 586], "pytorch_fx": [208, 212, 215, 216, 217, 246, 250, 253, 254, 255, 578], "onnxrt_qoper": [208, 212, 215, 216, 217, 246, 250, 253, 254, 255, 578], "dataset_registri": [208, 212, 217, 246, 250, 255], "dataset_typ": [208, 212, 217, 246, 250, 255, 265, 266, 276, 306, 392], "dataset_format": [208, 212, 217, 246, 250, 255], "data_format": [208, 212, 217, 219, 246, 250, 255, 256], "raw_imag": [208, 212, 217, 246, 250, 255], "overwrit": [208, 212, 217, 246, 250, 255], "download_url": [208, 246], "filenam": [208, 246, 280, 369, 370, 470, 486, 493, 499, 509, 517, 555], "md5": [208, 246], "download": [208, 246, 365, 445, 468, 469, 471, 472, 505, 552, 555, 567, 581], "gen_bar_updat": [208, 246], "progress": [208, 246, 305, 331, 338, 341, 576], "bar": [208, 246, 552], "check_integr": [208, 246], "fpath": [208, 246], "checksum": [208, 246], "calculate_md5": [208, 246], "chunk_siz": [208, 246], "cifar10": [208, 246, 555], "cifar100": [208, 246, 555], "www": [208, 246, 555, 587], "toronto": [208, 246, 555], "edu": [208, 246, 555], "kriz": [208, 246, 555], "cifar": [208, 246, 555, 587], "tar": [208, 246, 555], "gz": [208, 246, 555], "100": [208, 246, 270, 279, 312, 553, 555, 559, 564, 578, 579, 584, 585, 586, 587], "subset": [208, 211, 246, 249, 555], "internet": [208, 246, 552, 555], "put": [208, 246, 555, 557, 575], "again": [208, 246, 555, 580], "load_meta": [208, 246], "pytorchcifar10": [208, 246], "mxnetcifar10": [208, 246], "tensorflowcifar10": [208, 246], "pytorchcifar100": [208, 246], "mxnetcifar100": [208, 246], "tensorflowcifar100": [208, 246], "mnist": [208, 246, 555, 559], "institut": [208, 246], "standard": [208, 223, 246, 259, 365, 561, 569, 584, 585], "fashionmnist": [208, 246, 555], "npz": [208, 246, 555], "idx1": [208, 246, 555], "ubyt": [208, 246, 555], "idx3": [208, 246, 555], "t10k": [208, 246, 555], "class_to_idx": [208, 246], "read_data": [208, 246], "pytorchmnist": [208, 246], "mxnetmnist": [208, 246], "tensorflowmnist": [208, 246], "pytorchfashionmnist": [208, 246], "mxnetfashionmnist": [208, 246], "tensorflowfashionmnist": [208, 246], "imagefold": [208, 246, 555, 559], "subfold": [208, 246], "belong": [208, 246, 263, 321, 579], "class_1": [208, 246, 555], "png": [208, 246, 555], "xxy": [208, 246, 555], "xxz": [208, 246, 555], "class_n": [208, 246, 555], "123": [208, 246, 555, 584], "nsdf3": [208, 246, 555], "asd932_": [208, 246, 555], "mxnetimagefold": [208, 246], "tensorflowimagefold": [208, 246], "tensorflowtfrecorddataset": [208, 246], "tensorflowimagerecord": [208, 246], "000": [208, 246, 555], "001": [208, 246, 555, 559, 586], "099": [208, 246, 555], "tensorflowvocrecord": [208, 246], "pascal": [208, 246], "voc": [208, 246, 274, 316], "2012": [208, 246], "00000": [208, 246], "00004": [208, 246], "00001": [208, 246], "00003": [208, 246], "dummydataset": [209, 210, 247, 248], "stand_norm": [209, 210, 247, 248, 555], "dummy_v2": [210, 248, 554, 555], "sparse_dummy_v2": [210, 248, 555], "label_shap": [210, 248, 555], "sparsedummydataset": [210, 248], "dense_shap": [210, 248, 555], "sparse_ratio": [210, 248, 555], "imagenetraw": [211, 249, 555], "data_path": [211, 249, 555], "image_list": [211, 249, 555], "img1": [211, 249, 555], "img2": [211, 249, 555], "imgx": [211, 249, 555], "val_map": [211, 249, 555], "pytorchimagenetraw": [211, 249], "mxnetimagenetraw": [211, 249], "tensorflowimagenetraw": [211, 249], "inteltensorflow": [211, 213, 249, 251], "tensorflowimagenetdataset": [211, 249], "onnxrtimagenetdataset": [211, 249], "bert_dataset": [212, 217, 250, 255, 266, 308], "coco_dataset": [212, 217, 250, 255, 266, 308], "dummy_dataset": [212, 217, 250, 255, 266, 308], "dummy_dataset_v2": [212, 217, 250, 255, 266, 308], "imagenet_dataset": [212, 217, 250, 255, 266, 308], "style_transfer_dataset": [212, 217, 250, 255, 266, 308], "transfer": [213, 251, 260, 266, 555, 557, 558], "styletransferdataset": [213, 251], "content_fold": [213, 251, 555], "style_fold": [213, 251, 555], "crop_ratio": [213, 251, 555], "resize_shap": [213, 251, 555], "256": [213, 219, 251, 256, 555, 559, 584, 587], "image_format": [213, 251, 555], "holder": [213, 251, 555], "labelbalancecocorecordfilt": [214, 252], "balanc": [214, 252, 574], "labelbalancecocorawfilt": [214, 252], "tensorflowfilt": [215, 253], "onnxrtqlfilt": [215, 253], "onnxrtitfilt": [215, 253], "pytorchfilt": [215, 253], "mxnetfilt": [215, 253], "filter_registri": [215, 216, 217, 253, 254, 255], "filter_typ": [215, 216, 217, 253, 254, 255], "__call__": [215, 216, 217, 253, 254, 255], "coco_filt": [216, 217, 254, 255, 266, 308], "imagenet_transform": [217, 220, 255, 257, 266, 308], "transform_cl": [217, 220, 223, 255, 257, 259], "basetransform": [217, 218, 219, 220, 223, 255, 256, 257, 259], "transform_registri": [217, 220, 223, 255, 257, 259], "transform_typ": [217, 220, 223, 255, 257, 259], "user_postprocess": [217, 220, 221, 227, 231], "parsedecodecocotransform": 218, "quantizedinput": [219, 256, 584], "desir": [219, 223, 256, 259, 288, 584], "labelshift": [219, 256, 527, 584], "label_shift": [219, 256, 584], "parsedecodeimagenet": [219, 256, 584], "proto": [219, 223, 256, 259, 584], "parsedecodeimagenettransform": [219, 256], "tensorflowresizecropimagenettransform": [219, 256], "height": [219, 223, 256, 259, 282, 301, 331, 559, 575, 584, 586], "width": [219, 223, 256, 259, 282, 301, 331, 559, 579, 584, 586], "random_crop": [219, 256, 584], "resize_sid": [219, 256, 584], "resize_method": [219, 256], "bilinear": [219, 223, 256, 259, 584], "random_flip_left_right": [219, 256, 584], "mean_valu": [219, 256, 584], "channels_last": [219, 256], "subpixel": [219, 256], "rgb": [219, 256], "applic": [219, 256, 508, 537, 539, 541, 552, 561, 577, 583, 584], "crop": [219, 223, 256, 259, 555, 584], "flip": [219, 223, 256, 259, 584], "left": [219, 223, 256, 259, 331, 552, 584], "std": [219, 223, 256, 259, 282, 584], "bilinearimagenettransform": [219, 256], "central_fract": [219, 256, 584], "875": [219, 256, 584], "fraction": [219, 256, 584], "onnxbilinearimagenettransform": [219, 256], "onnxresizecropimagenettransform": [219, 256], "std_valu": [219, 256], "229": [219, 256], "225": [219, 256], "resizewithaspectratio": [219, 256], "87": [219, 256, 587], "inter_pol": [219, 256], "cv2": [219, 256], "inter_area": [219, 256], "aspect": [219, 223, 256, 259, 584], "convert_to_unicod": [222, 258], "unicod": [222, 258, 267, 309], "utf": [222, 258], "load_vocab": [222, 258], "vocab_fil": [222, 223, 258, 259, 584], "convert_by_vocab": [222, 258], "vocab": [222, 258, 288], "whitespace_token": [222, 258], "whitespac": [222, 258, 272, 314], "fulltoken": [222, 258], "tokenzi": [222, 258], "convert_tokens_to_id": [222, 258], "convert_ids_to_token": [222, 258], "basictoken": [222, 258], "punctuat": [222, 258, 267, 272, 309, 314], "lower": [222, 223, 258, 259, 272, 314, 347, 524, 558, 575, 576, 577, 579, 584, 585], "wordpiecetoken": [222, 258], "unk_token": [222, 258], "unk": [222, 258], "max_input_chars_per_word": [222, 258], "wordpiec": [222, 223, 258, 259, 584], "greedi": [222, 258], "unaff": [222, 258], "un": [222, 258], "aff": [222, 258], "concat_gener": [223, 259], "tensorflowtransform": [223, 259], "mxnettransform": [223, 259], "pytorchtransform": [223, 259], "onnxrtqltransform": [223, 259], "onnxrtittransform": [223, 259], "tensorflowwrapfunct": [223, 259], "transform_func": [223, 259], "pytorchmxnettransform": [223, 259], "get_torchvision_map": [223, 259], "interpol": [223, 259, 338, 569, 576, 584], "torchvis": [223, 259, 282], "composetransform": [223, 259], "transform_list": [223, 259, 584], "croptoboundingbox": [223, 259, 584], "offset_height": [223, 259, 584], "offset_width": [223, 259, 584], "target_height": [223, 259, 584], "target_width": [223, 259, 584], "vertic": [223, 259, 301, 331, 584], "coordin": [223, 259, 346, 584], "horizont": [223, 259, 584], "mxnetcroptoboundingbox": [223, 259], "onnxrtcroptoboundingbox": [223, 259], "tensorflowcroptoboundingbox": [223, 259], "resizewithratio": [223, 259, 584], "min_dim": [223, 259, 584], "800": [223, 259, 584], "max_dim": [223, 259, 584], "1365": [223, 259, 584], "constant_valu": [223, 259], "side": [223, 259, 288, 552, 555, 584], "exce": [223, 259, 584], "tensorflowresizewithratio": [223, 259], "perm": [223, 259, 584], "permut": [223, 259, 331, 584], "tensorflowtranspos": [223, 259], "mxnettranspos": [223, 259], "pytorchtranspos": [223, 259], "randomverticalflip": [223, 259, 584], "tensorflowrandomverticalflip": [223, 259], "randomhorizontalflip": [223, 259, 584], "tensorflowrandomhorizontalflip": [223, 259], "toarrai": [223, 259, 584], "pil": [223, 259, 584], "casttftransform": [223, 259], "castonnxtransform": [223, 259], "castpytorchtransform": [223, 259], "centercroptftransform": [223, 259], "paddedcentercroptransform": [223, 259], "crop_pad": [223, 259], "resizetftransform": [223, 259], "nearest": [223, 259, 584], "bicub": [223, 259, 584], "resizepytorchtransform": [223, 259], "randomcroptftransform": [223, 259], "locat": [223, 259, 559, 579, 581, 584, 586], "randomresizedcroppytorchtransform": [223, 259], "randomresizedcropmxnettransform": [223, 259], "randomresizedcroptftransform": [223, 259], "get_param": [223, 259], "pramet": [223, 259], "normalizetftransform": [223, 259], "rescal": [223, 259, 584], "deviat": [223, 259, 584], "broadcast": [223, 259, 559, 584], "rescalekeraspretraintransform": [223, 259], "rescaletftransform": [223, 259], "rescaletransform": [223, 259], "alignimagechanneltransform": [223, 259], "dim": [223, 259, 296, 331, 346, 584], "w": [223, 259, 282, 575, 576, 584], "pytorchalignimagechannel": [223, 259], "tondarraytransform": [223, 259], "resizemxnettransform": [223, 259], "resizetransform": [223, 259], "cropresizetftransform": [223, 259], "boundari": [223, 259, 422, 584], "area": [223, 259, 270, 312, 569, 584], "pytorchcropresizetransform": [223, 259], "mxnetcropresizetransform": [223, 259], "cropresizetransform": [223, 259], "centercroptransform": [223, 259], "mxnetnormalizetransform": [223, 259], "pytorchnormalizetransform": [223, 259], "normalizetransform": [223, 259], "randomcroptransform": [223, 259], "randomresizedcroptransform": [223, 259], "get_final_text": [223, 259], "pred_text": [223, 259], "orig_text": [223, 259], "squadexampl": [223, 259], "qas_id": [223, 259], "question_text": [223, 259], "doc_token": [223, 259], "orig_answer_text": [223, 259], "start_posit": [223, 259], "end_posit": [223, 259], "is_imposs": [223, 259], "unique_id": [223, 259], "example_index": [223, 259], "doc_span_index": [223, 259], "token_to_orig_map": [223, 259], "token_is_max_context": [223, 259], "input_mask": [223, 259, 338], "segment_id": [223, 259], "read_squad_exampl": [223, 259], "input_fil": [223, 259], "doc_strid": [223, 259, 584], "max_query_length": [223, 259, 584], "output_fn": [223, 259], "inputbatch": [223, 259], "collecttransform": [223, 259], "10833": [223, 259], "tfsquadv1posttransform": [223, 259], "n_best_siz": [223, 259, 584], "384": [223, 259, 584], "max_answer_length": [223, 259, 584], "total": [223, 259, 274, 303, 305, 316, 325, 326, 327, 331, 338, 341, 347, 555, 584], "nbest_predict": [223, 259, 584], "long": [223, 259, 562, 584], "chunk": [223, 259, 584], "much": [223, 259, 260, 266, 328, 557, 575, 576, 584], "stride": [223, 259, 332, 584], "process_result": [223, 259], "get_postprocess_result": [223, 259], "tfmodelzoocollecttransform": [223, 259], "tfsquadv1modelzooposttransform": [223, 259], "squadv1": [223, 259, 584], "parsedecodevoctransform": [223, 259], "set_env_var": 224, "env_var": 224, "overwrite_exist": 224, "env": [224, 509, 517], "set_all_env_var": 224, "core": [224, 266, 281, 369, 389, 552, 553, 568, 574, 587], "get_architectur": 224, "get_threads_per_cor": 224, "thread": [224, 540, 552, 554, 574], "get_thread": 224, "get_physical_id": 224, "socket": [224, 369, 512, 541, 574, 587], "get_core_id": 224, "get_bounded_thread": 224, "core_id": 224, "bind": 224, "command": [224, 266, 288, 359, 389, 400, 403, 410, 416, 418, 419, 486, 509, 517, 537, 552, 559], "unnecessari": [224, 266], "summary_benchmark": [224, 266], "config_inst": [224, 266], "generate_prefix": [224, 266], "core_list": [224, 266], "numactl": [224, 266], "run_inst": [224, 266], "critet": 225, "tensorflowcrossentropyloss": 225, "pytorchcrossentropyloss": 225, "tensorflowknowledgedistillationloss": 225, "pytorchknowledgedistillationloss": 225, "pytorchintermediatelayersknowledgedistillationloss": 225, "tensorflowcriterion": 225, "pytorchcriterion": 225, "criterion_cl": 225, "criterion_registri": 225, "criterion_typ": 225, "registry_criterion": 225, "param_dict": [225, 230, 279], "crossentropyloss": [225, 557], "tensorflowsparsecategoricalcrossentropi": 225, "sparsecategoricalcrossentropyloss": 225, "knowledgedistillationframework": 225, "student_model": [225, 260, 266], "knowledgedistillationloss": [225, 586], "temperatur": [225, 586], "loss_typ": [225, 586], "ce": [225, 586], "loss_weight": [225, 586], "teacher_model_forward": 225, "notimplementederror": [225, 273, 274, 315, 316], "teacher_student_loss_c": 225, "student_output": [225, 233, 266, 359, 557], "teacher_output": [225, 233, 260, 266, 359], "student_targets_loss_c": 225, "groud": 225, "truth": [225, 271, 272, 313, 314], "loss_cal": 225, "loss_cal_sloss": 225, "student_loss": [225, 233, 266, 359, 557], "softcrossentropi": 225, "logit": [225, 557], "ground": [225, 271, 272, 313, 314], "kullbackleiblerdiverg": 225, "pytorchknowledgedistillationlosswrapp": 225, "tensorflowknowledgedistillationlosswrapp": 225, "tensorflowknowledgedistillationlossextern": 225, "intermediatelayersknowledgedistillationloss": [225, 532], "layer_map": 225, "add_origin_loss": 225, "init_loss_func": 225, "init_feature_match": 225, "student_featur": 225, "teacher_featur": 225, "matcher": 225, "clear_featur": 225, "register_hooks_for_model": 225, "attributeerror": 225, "remove_all_hook": 225, "pytorch_linear_feature_match": 225, "pytorchintermediatelayersknowledgedistillationlosswrapp": 225, "selfknowledgedistillationloss": [225, 532], "selfknowledg": 225, "pytorchselfknowledgedistillationloss": 225, "l2diverg": 225, "feature1": 225, "feature2": 225, "pytorchselfknowledgedistillationlosswrapp": 225, "setter": [226, 227], "torch_util": [227, 266, 308], "tensorflowoptim": 230, "pytorchoptim": 230, "optimizer_cl": 230, "allow": [230, 346, 365, 541, 552, 557, 559, 569, 570, 578, 586], "optimizer_registri": 230, "optimizer_typ": 230, "cross": [230, 273, 274, 315, 316, 564, 585], "tensorflowsgd": 230, "tensorflowadamw": 230, "tensorflow_addon": 230, "adamw": 230, "tensorflowadam": 230, "adam": [230, 586], "pytorchsgd": 230, "record_output": 232, "output_process": 232, "get_activ": 232, "mainli": [233, 266, 305, 331, 341, 576, 579], "train_func": [233, 266, 307, 559, 579], "train_dataload": [233, 266, 575], "prepare_qat": [233, 266], "pre_process": [233, 260, 266, 277, 289, 293, 298, 306, 559], "post_process": [233, 266], "Be": [233, 266, 270, 312, 332, 336, 337], "epoch": [233, 260, 266, 293, 298, 303, 304, 332, 335, 336, 337, 338, 339, 359, 557, 559, 573, 575, 586], "on_train_end": [233, 266, 293, 298, 303, 304, 337, 338, 339, 359, 557, 573, 575, 579], "pre_epoch_begin": [233, 266, 293, 298], "post_epoch_end": [233, 266, 293, 298], "on_step_begin": [233, 266, 293, 298, 303, 304, 328, 332, 335, 336, 337, 338, 339, 359, 362, 557, 573, 575], "batch_id": [233, 266, 332, 335, 336, 337, 359], "on_batch_begin": [233, 266, 293, 298], "on_after_compute_loss": [233, 266, 293, 298, 359, 557, 573], "on_before_optimizer_step": [233, 266, 303, 304, 333, 337, 338, 339, 340, 359, 557, 573, 575], "on_after_optimizer_step": [233, 266, 303, 304, 328, 338, 339, 340, 359, 575], "on_before_ev": [233, 266, 303, 304, 338, 339], "on_after_ev": [233, 266, 303, 304, 338, 339], "on_post_grad": [233, 266], "on_step_end": [233, 266, 293, 298, 303, 304, 332, 335, 336, 337, 338, 339, 359, 362, 557, 573, 575], "on_batch_end": [233, 266, 293, 298], "register_hook": [233, 266], "input_arg": [233, 266], "input_kwarg": [233, 266], "relat": [260, 266, 270, 284, 285, 293, 298, 301, 312, 340, 362, 452, 455, 457, 462, 542, 545, 546, 547, 550, 586], "_epoch_ran": [260, 266], "ran": [260, 266], "eval_frequ": [260, 266], "frequenc": [260, 266, 303, 338, 574, 575, 586], "best_scor": [260, 266], "best_model": [260, 266], "train_cfg": [260, 266, 362], "evaluation_distribut": [260, 266, 293, 298], "train_distribut": [260, 266, 293, 298], "on_post_forward": [260, 266], "deprec": [260, 266, 524, 584], "init_train_cfg": [260, 266], "create_criterion": [260, 266], "create_optim": [260, 266], "disil": [260, 266], "generate_hook": [260, 266, 293, 298], "qlinear2qdq": [261, 266, 308], "torch2onnx": [261, 266, 308], "torch_to_fp32_onnx": [261, 263], "opset_vers": [261, 263, 326, 561], "dynamic_ax": [261, 263, 326, 561], "do_constant_fold": [261, 263, 326], "verbos": [261, 263, 279, 280, 281, 326, 346], "ax": [261, 263, 326], "torch_to_int8_onnx": [261, 263], "quant_format": [261, 263, 326, 561], "u8s8": [261, 263], "qdq_op_fp32_bia": [261, 263, 561], "optionl": [261, 263], "qdq_op_int32_bia": [261, 263, 561], "qdq_op_fp32_bias_qdq": [261, 263, 561], "onnx_qlinear_to_qdq": [261, 262], "input_name_to_nod": [261, 262, 324], "qlinearop": [261, 262, 566, 579], "check_model": 262, "update_weight_bia": 263, "fp32_onnx_path": [263, 264], "wegiht": 263, "set_data_typ": 263, "weight_typ": 263, "activation_typ": 263, "get_node_map": 263, "module_node_map": 263, "get_quantizable_onnx_op": 263, "quantize_nod": 263, "build_scale_map": 263, "int8_scale_info": 263, "scale_zp_dict": 263, "set_scale_info": 263, "int8_onnx_model": 263, "int8_onnx_path": 263, "recalculate_bia": 263, "recalcul": [263, 331], "remove_nodes_by_nam": 263, "sub_graph_with_int32_bia": 263, "a_info": 263, "b_info": 263, "qdq_fp32_bia": 263, "excut": 263, "qdq_int32_bia": 263, "qdq_fp32_bias_qdq": 263, "onnx2numpy_dtyp": 264, "onnx_node_typ": 264, "dummydataread": 264, "ortq": 264, "dataread": 264, "get_next": 264, "variou": [265, 266, 275, 306, 566, 576, 578], "dl": [265, 266, 275, 293, 298, 306, 564, 577], "bring": [265, 266, 306, 579], "vari": [265, 266, 293, 298, 306, 574, 587], "roc": [265, 266, 274, 293, 298, 306, 316], "footprint": [265, 266, 293, 298, 306, 327, 558, 572, 575, 576, 578], "flexibl": [265, 266, 293, 298, 306, 557, 575, 576], "set_config_by_model": [265, 266, 275], "model_obj": [265, 266, 275], "export": [266, 270, 308, 312, 318, 319, 324, 326, 359, 524, 583], "bleu": [266, 268, 273, 287, 308, 310, 315, 569], "bleu_util": [266, 273, 308, 315], "coco_label_map": [266, 273, 308, 315], "coco_tool": [266, 273, 308, 315], "evaluate_squad": [266, 273, 308, 315], "dynast": [266, 289, 308], "supernetwork": [266, 279, 282, 283, 289], "dynas_manag": [266, 282, 283, 289], "dynas_predictor": [266, 282, 283, 289], "dynas_search": [266, 283, 289], "dynas_util": [266, 281, 283, 289], "basic_na": [266, 289, 308], "nas_util": [266, 289, 308], "pruning_recip": [266, 308], "tile_pattern": [266, 294, 295], "pytorch_prun": [266, 308, 339], "logger": [266, 299, 308, 329, 360, 363, 369, 505, 509, 513], "prune_util": [266, 299, 308], "pruner": [266, 293, 298, 299, 301, 304, 308, 532, 535, 575, 586], "graph_optim": [266, 275, 308, 376, 445, 480, 484, 485, 505, 513, 529], "mixed_precis": [266, 308, 378, 445, 480, 505, 513, 529], "model_convers": [266, 308], "pruning_v2": [266, 308], "quantconf": [266, 306, 343], "qfunc": [266, 306], "routinu": [266, 306], "pruningconf": [266, 293, 298], "pruning_func": [266, 293, 298], "update_items_for_all_prun": [266, 293, 304], "howev": [266, 293, 298, 304, 339, 561, 575], "still": [266, 293, 298, 304, 339, 579, 580], "analys": [266, 293, 298, 304], "generate_prun": [266, 293, 298], "dens": [266, 293, 298, 305, 341, 575, 576, 587], "spars": [266, 293, 298, 303, 338, 555, 575, 576, 577], "get_sparsity_ratio": [266, 293, 298, 301, 304, 331, 339], "elementwise_over_matmul_gemm_conv": [266, 293, 298, 304, 339], "elementwise_over_al": [266, 293, 298, 304, 339], "blockwise_over_matmul_gemm_conv": [266, 293, 298, 304, 339], "graphoptim": [266, 275, 376, 477, 528], "modelconvers": [266, 276], "unicoderegex": [267, 309], "hoc": [267, 309], "hack": [267, 309], "nondigit_punct_r": [267, 309], "compil": [267, 309, 574], "preced": [267, 309], "punct_nondigit_r": [267, 309], "symbol_r": [267, 309], "property_char": [267, 309], "join": [267, 309], "bleu_token": [267, 309], "mose": [267, 309], "smt": [267, 309], "mosesdecod": [267, 309], "master": [267, 268, 271, 272, 301, 304, 309, 310, 313, 314, 331, 339], "mteval": [267, 309], "v14": [267, 309], "pl": [267, 309], "l954": [267, 309], "l983": [267, 309], "tensor2tensor": [268, 288, 310], "bleu_hook": [268, 310], "compute_bleu": [268, 287, 310], "reference_corpu": [268, 310], "translation_corpu": [268, 310], "max_ord": [268, 310], "use_bp": [268, 310], "against": [268, 310], "gram": [268, 310], "flag": [268, 310, 359, 534], "third": [270, 312, 568], "parti": [270, 312, 568, 579], "pycocotool": [270, 312, 562, 567], "object_detect": [270, 312], "noth": [270, 312, 517, 585], "thu": [270, 312, 579], "slim": [270, 312, 323, 325, 571], "jonathanhuang": [270, 312], "image_id": [270, 312, 569], "encod": [270, 279, 288, 312, 584], "groundtruth": [270, 312], "invok": [270, 312], "groundtruth_dict": [270, 312], "exportgroundtruthtococo": [270, 312], "groundtruth_boxes_list": [270, 312], "groundtruth_classes_list": [270, 312], "max_num_class": [270, 312], "output_path": [270, 312, 324, 517], "detections_list": [270, 312], "exportdetectionstococo": [270, 312], "detection_boxes_list": [270, 312], "detection_scores_list": [270, 312], "detection_classes_list": [270, 312], "cocowrapp": [270, 312], "loadannot": [270, 312], "cocoevalwrapp": [270, 312], "agnostic_mod": [270, 312], "computemetr": [270, 312], "detection_typ": [270, 312], "hold": [270, 312, 324, 346, 555], "datastructur": [270, 312], "mscoco": [270, 312], "replic": [270, 312], "extern": [270, 312, 324, 552], "category_id": [270, 312], "iou_typ": [270, 312], "iou_thr": [270, 274, 312, 316, 569], "map_point": [270, 274, 312, 316, 569], "cocoev": [270, 312], "Then": [270, 312, 552, 585], "getcategori": [270, 312], "getagnosticmod": [270, 312], "agnost": [270, 312, 557], "getcategoryidlist": [270, 312], "accumul": [270, 312, 345, 585], "p": [270, 312, 552], "include_metrics_per_categori": [270, 312], "all_metrics_per_categori": [270, 312], "summeri": [270, 312], "per_category_ap": [270, 312], "care": [270, 312], "pollut": [270, 312], "mldash": [270, 312], "summary_metr": [270, 312], "iou": [270, 274, 312, 316], "increment": [270, 286, 288, 312, 585], "50iou": [270, 312], "75iou": [270, 312], "75": [270, 312, 587], "pixel": [270, 312, 584], "medium": [270, 312], "96": [270, 312, 587], "larg": [270, 312, 324, 554, 557, 575, 576, 587], "10000": [270, 312, 346], "recal": [270, 272, 274, 312, 314, 316], "bycategori": [270, 312], "supercategori": [270, 312], "backward": [270, 312, 359, 557, 559, 573, 575, 579, 581], "performancebycategori": [270, 312], "category_stat": [270, 312], "exportsingleimagegroundtruthtococo": [270, 312], "next_annotation_id": [270, 312], "category_id_set": [270, 312], "groundtruth_box": [270, 312], "groundtruth_class": [270, 312], "groundtruth_mask": [270, 312], "groundtruth_is_crowd": [270, 312], "ingest": [270, 312], "ones": [270, 312, 576], "exportsingleimagedetectionstococo": [270, 312], "uniqu": [270, 282, 307, 312, 346, 411, 412, 579], "assign": [270, 312, 326, 369, 410, 411, 416, 417, 418, 419, 552, 559, 578], "num_gt_box": [270, 312], "num_detect": [270, 274, 312, 316, 569, 586], "image_height": [270, 312], "image_width": [270, 312], "detection_mask": [270, 312], "crowd": [270, 312], "exportsingleimagedetectionboxestococo": [270, 312], "detection_box": [270, 312, 586], "detection_scor": [270, 312, 586], "detection_class": [270, 312, 586], "exporsingleimagedetectionboxestococo": [270, 312], "exportsingleimagedetectionmaskstococo": [270, 312], "allenai": [271, 272, 313, 314], "bi": [271, 272, 313, 314], "att": [271, 272, 313, 314], "f1_score": [271, 272, 313, 314], "ground_truth": [271, 272, 313, 314], "metric_max_over_ground_truth": [271, 272, 313, 314], "metric_fn": [271, 272, 313, 314], "exact_match_scor": [271, 313], "exact": [271, 313], "articl": [271, 272, 313, 314], "paragraph": [271, 272, 313, 314], "qa": [271, 272, 313, 314], "cantain": [271, 272, 313, 314], "normalize_answ": [272, 314], "extra": [272, 314], "newlin": [272, 314], "tab": [272, 314, 413, 416, 422, 540, 583], "harmon": [272, 274, 314, 316], "answer_start": [272, 314], "177": [272, 314], "denver": [272, 314], "bronco": [272, 314], "nfl": [272, 314], "afc": [272, 314], "bowl": [272, 314], "56be4db0acb8001400a502ec": [272, 314], "percentag": [272, 280, 314, 586], "single_output": [273, 274, 315, 316], "hvd": [273, 274, 315, 316, 559], "sample_weight": [273, 274, 315, 316], "metric_registri": [273, 274, 315, 316], "metric_typ": [273, 274, 315, 316], "decorator_metr": [273, 274, 315, 316], "tensorflowmetr": [274, 316], "pytorchmetr": [274, 316], "mxnetmetr": [274, 316], "onnxrtqlmetr": [274, 316], "onnxrtitmetr": [274, 316], "wrappytorchmetr": [274, 316], "wrapmxnetmetr": [274, 316], "wraponnxrtmetr": [274, 316], "proport": [274, 316], "were": [274, 316], "pred_list": [274, 316], "pytorchloss": [274, 316], "least": [274, 304, 316, 331, 339, 518, 575, 576, 585], "sum": [274, 316, 557], "mae": [274, 316, 569], "absolut": [274, 280, 316, 328, 332, 335, 517, 569, 574, 575, 576, 579, 585], "magnitud": [274, 308, 316, 328, 329, 333, 334, 566, 575, 576, 587], "numer": [274, 316, 570, 577, 579], "rmse": [274, 280, 316, 569, 585], "squar": [274, 280, 316, 351, 569, 585], "tensorflowtopk": [274, 316], "k": [274, 316, 569, 575], "among": [274, 316], "most": [274, 316, 346, 552, 570, 575, 579, 585], "outcom": [274, 316], "num_correct": [274, 316], "generaltopk": [274, 316], "cocomapv2": [274, 316, 569], "anno_path": [274, 316, 569], "map_kei": [274, 316], "detectionboxes_precis": [274, 316], "output_index_map": [274, 316, 569], "tensorflowmap": [274, 316], "tensorflowcocomap": [274, 316], "tensorflowvocmap": [274, 316], "squadf1": [274, 316, 569], "miou": [274, 316], "num_class": [274, 316], "21": [274, 316, 587], "hist": [274, 316, 364], "onnxrtglu": [274, 316], "dlrm": [274, 316], "basicna": [277, 289], "model_build": [277, 289, 290], "conf_fnam": [277, 289], "init_by_cfg": [277, 289], "init_for_search": [278, 289], "select_model_arch": [278, 289, 290], "create_acc_predictor": [278, 289], "create_macs_predictor": [278, 289], "create_latency_predictor": [278, 289], "latenc": [278, 279, 280, 282, 287, 289, 522, 582, 585], "init_cfg": [278, 289], "parametermanag": [279, 282], "hot": 279, "pymoo": [279, 281, 282], "process_param_dict": 279, "upper": [279, 281], "vector": [279, 290, 292], "onehot_gener": 279, "in_arrai": 279, "onehot": 279, "depth": [279, 557, 580], "input_arrai": 279, "elast": 279, "mapper": [279, 410, 473, 474], "random_sampl": [279, 346], "subnetwork": [279, 282], "trial_limit": 279, "100000": 279, "translate2param": 279, "pymoo_vector": 279, "translate2pymoo": 279, "import_csv": 279, "filepath": 279, "column_nam": 279, "drop_dupl": 279, "panda": 279, "datafram": [279, 325, 326], "purpos": [279, 563, 570, 578], "subnet": [279, 282], "column": [279, 552, 575, 576], "df": [279, 325, 326], "set_se": 279, "create_training_set": 279, "train_with_al": 279, "sklearn": 279, "transformerltencod": 279, "alpha": [280, 328, 340], "default_alpha": 280, "cost_factor": 280, "default_cost_factor": 280, "max_iter": 280, "default_max_iter": 280, "regressor": 280, "get_paramet": 280, "get_metr": [280, 362, 386], "mape": 280, "kendal": 280, "rank": [280, 559], "correl": 280, "spearman": 280, "searcher": [280, 292], "searchalgomanag": 281, "optuna": 281, "configure_nsga2": 281, "1000": [281, 522, 586], "warm_pop": 281, "crossover_prob": 281, "crossover_eta": 281, "mutation_prob": 281, "02": [281, 587], "mutation_eta": 281, "configure_ag": 281, "run_search": 281, "save_histori": 281, "previous": [281, 554], "problemmultiobject": 281, "evaluation_interfac": 281, "evaluationinterfac": [281, 282], "param_count": 281, "param_upperbound": 281, "ofa": [281, 282], "get_mac": 282, "input_s": 282, "measure_lat": 282, "warmup_step": 282, "measure_step": 282, "resolut": 282, "warm": [282, 327], "adjust": [282, 331, 579], "runner": 282, "ofarunn": 282, "acc_predictor": 282, "macs_predictor": 282, "latency_predictor": 282, "datasetpath": 282, "w1": 282, "estimate_accuracy_top1": 282, "subnet_cfg": 282, "top1": [282, 579], "estimate_mac": 282, "estimate_lat": 282, "validate_top1": 282, "validate_mac": 282, "flop": 282, "fvcore": 282, "get_subnet": 282, "transformerltrunn": 282, "checkpoint_path": [282, 287], "predictor_mod": 282, "csv_path": 282, "written": 282, "eval_subnet": 282, "clear_csv": 282, "evaluationinterfaceresnet50": 282, "evaluationinterfacemobilenetv3": 282, "evaluationinterfacetransformerlt": 282, "get_torchvision_model": 282, "torchvisionrefer": 282, "baselin": [282, 327, 354, 362, 582, 583], "subprocess": [282, 517, 540], "machine_transl": [283, 284, 289], "transformer_interfac": [283, 284, 285], "get_incremental_st": 286, "incremental_st": [286, 288], "set_incremental_st": 286, "multiheadattentionsup": 286, "super_embed_dim": 286, "num_head": 286, "is_encod": 286, "super_kdim": 286, "super_vdim": 286, "dropout": [286, 288], "add_bias_kv": [286, 288], "add_zero_attn": [286, 288], "self_attent": 286, "encoder_decoder_attent": 286, "out_dim": 286, "qkv_dim": 286, "head": [286, 288, 575], "key_padding_mask": 286, "need_weight": 286, "static_kv": 286, "attn_mask": [286, 288], "timestep": 286, "bytetensor": [286, 288], "src_len": [286, 288], "reorder_incremental_st": 286, "new_ord": [286, 288], "buffer": [286, 325], "compute_lat": 287, "get_model_paramet": 287, "compute_mac": 287, "transformersupernetwork": 288, "fairseq": 288, "vaswani": 288, "2017": 288, "arxiv": [288, 303, 328], "1706": 288, "03762": 288, "transformerencod": 288, "transformerdecod": 288, "line": [288, 516, 517, 537, 552, 559, 566, 575, 583], "encoder_config": 288, "embed_token": 288, "encoder_lay": 288, "transformerencoderlay": 288, "argpars": 288, "namespac": 288, "src_token": 288, "src_length": 288, "longtensor": 288, "sentenc": 288, "encoder_out": 288, "embed_dim": 288, "encoder_padding_mask": 288, "reorder_encoder_out": 288, "rearrang": 288, "max_posit": 288, "upgrade_state_dict_nam": 288, "upgrad": 288, "possibli": 288, "old": [288, 304, 369, 581], "decoder_config": 288, "no_encoder_attn": 288, "decoder_lay": 288, "transformerdecoderlay": 288, "attend": 288, "prev_output_token": 288, "tgt_len": 288, "forc": [288, 365, 570, 580], "extract_featur": 288, "output_lay": 288, "layer_idx": 288, "paper": [288, 557, 575, 576], "ffn": 288, "residu": 288, "robust": 288, "encoder_normalize_befor": 288, "norm": 288, "layer_norm": 288, "self_attn_layer_norm": 288, "final_layer_norm": 288, "seq_len": 288, "t_tgt": 288, "t_src": 288, "decoder_normalize_befor": 288, "prev_self_attn_st": 288, "prev_attn_st": 288, "self_attn_mask": 288, "self_attn_padding_mask": 288, "builder": [290, 325], "res_save_path": 290, "count_model_paramet": 290, "load_search_result": 290, "dump_search_result": 290, "params_vec2params_dict": [290, 292], "paras_vec": 290, "find_best_model_arch": 290, "metrics_convers": 290, "init_search_cfg": 290, "nas_registri": 291, "nas_method": 291, "create_search_space_pool": 291, "idx": [291, 324, 555], "find_pareto_front": 291, "n_point": 291, "n_metric": 291, "n_pareto_point": 291, "get_feedback": 292, "feedback": 292, "para_vec": 292, "gridsearch": 292, "whole": [292, 539, 552, 579, 587], "exhaust": [292, 308, 350, 578], "randomsearch": 292, "42": [292, 574, 587], "bayesianoptimizationsearch": 292, "indices2params_vec": 292, "tfpruningcallback": [293, 298], "input_model": [293, 298, 571, 583], "pure": [293, 298], "s_output": [293, 298], "s_loss": [293, 298], "t_output": [293, 298], "support_pattern": [294, 295, 296], "pattern_registri": 296, "pattern_typ": 296, "patternbas": [296, 297], "mask_shap": [296, 297], "is_contigu": 296, "compute_spars": [296, 297, 369], "abs_sum": 296, "abs_max": 296, "tile": 297, "tilepatternbas": 297, "nxm": [297, 301, 331, 338, 576], "matrix": [297, 576], "repeat_mask": 297, "ori_shap": 297, "repeat": [297, 585], "tilepattern_1x1": 297, "1x1": [297, 557, 575], "unstructur": [297, 566, 575, 576, 587], "tilepattern_2x2": 297, "2x2": 297, "tilepattern_1x16": 297, "1x16": 297, "tilepattern_4x1": 297, "tilepattern_1x2": 297, "1x2": 297, "update_config": [298, 339], "register_pattern": [301, 331], "get_pattern": [301, 331], "assertionerror": [301, 302, 303, 331, 338, 342], "is_glob": [301, 331], "contrast": [301, 331, 584], "get_mask": [301, 331], "target_sparsity_ratio": [301, 303, 331, 338], "pre_mask": [301, 331], "max_sparsity_ratio_per_lay": [301, 303, 578], "get_masks_glob": [301, 331], "get_mask_singl": 301, "exact_sparsity_ratio": [301, 331], "get_block_size_dict": [301, 331], "get_masks_loc": [301, 331], "calul": [301, 331], "ration": [301, 331], "get_pattern_lock_mask": [301, 331], "lock": [301, 331, 336, 337, 566, 573, 575, 576], "patternnxm": [301, 331], "kept": [301, 331], "block_siz": [301, 331], "block_size_1": [301, 331], "block_size_2": [301, 331], "keep_pre_mask": [301, 331], "unchang": [301, 331], "patternninm": [301, 331], "doc": [301, 331, 369, 569], "md": [301, 331, 559], "check_config": [302, 342], "prune_config": [302, 342], "everyth": [302, 342], "reset_non_value_to_default": 302, "undefin": [302, 342], "process_and_check_config": [302, 342], "obejct": 302, "process_config": [302, 342], "parse_to_prun": [302, 342], "parse_not_to_prun": 302, "register_prun": [303, 338], "get_prun": [303, 338], "module_nam": [303, 305, 328, 338, 340, 341, 369, 524], "cuurent": [303, 338], "current_sparsity_ratio": [303, 338], "global_step": [303, 338], "update_frequency_on_step": [303, 578], "mask_weight": [303, 338], "formal": [303, 338], "local_step": [303, 304, 338, 339], "judg": 303, "Or": 303, "simpli": [303, 559, 571], "check_is_pruned_step": [303, 338], "update_scor": 303, "magnitudeprun": 303, "snipprun": 303, "snip": [303, 328, 566, 575, 576, 587], "1810": [303, 328], "02340": [303, 328], "snipmomentumprun": 303, "moreoev": 303, "momentum": [303, 328, 566, 575, 576, 586], "patternlockprun": [303, 336, 338], "templat": [304, 308, 339, 392, 411, 416, 505, 513, 550, 552, 575], "tree": [304, 339, 387, 416, 418], "nlp": [304, 339, 575, 576, 579], "huggingface_model": [304, 339], "config_file_path": [304, 339], "pruner_info": [304, 339], "register_schedul": [305, 341], "get_schedul": [305, 341], "gradual": [305, 341, 575, 576], "update_sparsity_ratio": [305, 341], "aggressive_ratio": 305, "current_prune_step": [305, 341], "total_prune_step": [305, 341], "oneshotschedul": [305, 341], "aggress": 305, "iterativeschedul": [305, 341], "target_ratio": [305, 341], "server": [307, 308, 445, 452, 504, 505, 512, 513, 521, 524, 535, 537, 539, 552], "seper": 307, "opt_model": 307, "fulli": [307, 579], "saniti": 307, "illeg": 307, "sync": 307, "accordingli": [307, 335], "base_model": [308, 319, 320, 322, 324, 325, 326], "keras_model": [308, 319], "mxnet_model": [308, 319], "nets_factori": [308, 319], "onnx_model": [308, 319, 456], "tensorflow_model": [308, 319], "torch_model": [308, 319], "pruner_legaci": [308, 329], "gradient_sensit": [308, 329, 334], "group_lasso": [308, 329, 334], "pattern_lock": [308, 329, 334], "reg": [308, 329, 338], "tuning_sampl": [308, 350, 355], "tuning_spac": [308, 350, 355, 358], "tuning_struct": [308, 350, 355], "auto_mixed_precis": [308, 350], "conserv": [308, 350], "hawq_v2": [308, 350], "mse_v2": [308, 350], "collect_layer_histogram": [308, 363], "create_obj_from_config": [308, 363], "kl_diverg": [308, 363], "load_huggingfac": [308, 363], "ux": 308, "config_gener": [308, 445, 505], "configuration_wizard": [308, 445, 505], "db_manag": [308, 445, 505, 543], "file_brows": [308, 445, 505], "jobs_manag": [308, 445, 505], "model_zoo": [308, 445, 505], "names_mapp": [308, 445, 505], "profil": [308, 379, 397, 404, 406, 416, 419, 421, 422, 445, 453, 461, 505, 506, 516, 522, 539, 544], "manage_workspac": [308, 445, 505], "workload": [308, 374, 375, 376, 378, 380, 381, 384, 406, 411, 416, 476, 493, 500, 505, 507, 513, 523, 524, 539, 542, 544, 545, 546, 547, 577], "executor": [308, 372, 505, 513], "expiring_dict": [308, 505, 513], "github_info": [308, 505, 513], "hw_info": [308, 505, 513], "json_seri": [308, 375, 429, 430, 435, 437, 438, 441, 451, 460, 486, 492, 505, 512, 513, 522, 525, 526, 527, 528, 530, 531, 532, 533, 534], "proc": [308, 505, 513], "status_upd": [308, 505, 513], "yaml_util": [308, 505, 513], "web": [308, 504, 505, 552, 583], "servic": [308, 505, 538, 539, 574], "router": [308, 505, 539], "set_random_se": [308, 369, 534], "set_tensorboard": [308, 369], "set_workspac": [308, 369, 525, 534], "workspac": [308, 325, 326, 359, 368, 369, 410, 411, 416, 418, 419, 420, 450, 523, 525, 534, 571], "basemodel": [318, 319, 320, 322, 324, 325, 326], "plai": [318, 319, 575, 577], "role": [318, 319, 575], "node_typ": [318, 319], "kerasmodel": [320, 463], "get_model_fwk_nam": 321, "fwk": 321, "net": 323, "factori": [323, 426, 445, 480, 496, 501, 505, 516, 520], "tfslimnetsfactori": 323, "model_func": 323, "arg_scop": 323, "onnxmodel": [324, 456], "large_s": 324, "ort": 324, "output_name_to_nod": 324, "ir_vers": 324, "opset_import": 324, "nodes_to_remov": 324, "nodes_to_add": 324, "add_initi": 324, "get_initi": 324, "remove_initi": 324, "init_to_remov": 324, "set_initi": 324, "get_children": 324, "get_par": 324, "find_node_by_nam": 324, "new_nodes_list": 324, "find_nodes_by_initi": 324, "get_scale_zero": 324, "save_model_to_fil": 324, "use_external_data_format": 324, "2gb": 324, "replace_node_input": 324, "new_input_nam": 324, "replace_input_of_all_nod": 324, "white_optyp": 324, "black_optyp": 324, "replace_node_output": 324, "new_output_nam": 324, "replace_output_of_all_nod": 324, "remove_unused_const": 324, "topological_sort": 324, "enable_subgraph": 324, "topolog": 324, "get_nodes_chain": 324, "start_nod": 324, "stop_nod": 324, "result_chain": 324, "chain": 324, "get_model_typ": [325, 454], "validate_graph_nod": 325, "validate_and_inference_input_output": 325, "input_tensor_nam": 325, "output_tensor_nam": 325, "graph_sess": 325, "graph_def_sess": 325, "frozen_pb_sess": 325, "load_saved_model": 325, "saved_model_tag": 325, "serv": [325, 541, 549], "signatur": 325, "saved_model_dir": 325, "tag": [325, 365, 511, 524, 583], "metagraphdef": 325, "keras_sess": 325, "slim_sess": 325, "checkpoint_sess": 325, "estimator_sess": 325, "saved_model_sess": 325, "renturn": 325, "workspace_path": [325, 326, 509, 524], "tensorflowsavedmodelmodel": 325, "get_all_weight_nam": [325, 326], "update_weight": [325, 326, 336], "new_tensor": [325, 326], "get_weight": [325, 326], "wight": 325, "report_spars": [325, 326], "total_spars": [325, 326], "build_saved_model": 325, "savedmodelbuild": 325, "protocol": 325, "asset": 325, "tensorflowqatmodel": 325, "tensorflowcheckpointmodel": 325, "checkpoint": [325, 368, 571], "tensorflowmodel": [325, 432, 461, 463, 464, 465, 466], "pytorchbasemodel": 326, "register_forward_pre_hook": 326, "remove_hook": 326, "generate_forward_pre_hook": 326, "update_gradi": 326, "grad_nam": 326, "new_grad": 326, "grad": 326, "prune_weights_": 326, "place": [326, 567, 575, 583], "get_input": 326, "get_gradi": 326, "pytorchmodel": [326, 332, 333, 335, 336, 337], "quantized_state_dict": 326, "load_quantized_state_dict": 326, "stat_dict": 326, "export_to_jit": 326, "jit": [326, 583], "export_to_fp32_onnx": 326, "rand": 326, "stdout": 326, "export_to_bf16_onnx": 326, "export_to_int8_onnx": 326, "s8s8": 326, "pytorchfxmodel": 326, "ipexmodel": 326, "objective_registri": 327, "objective_custom_registri": 327, "obj_cl": 327, "sart": 327, "result_list": 327, "durat": [327, 354, 389, 400, 403, 410, 416, 418, 419, 509, 582], "alloc": 327, "models": [327, 572, 578], "multiobject": [327, 534], "accuracy_criterion": [327, 572, 578, 585, 586], "metric_criterion": 327, "metric_weight": 327, "obj_criterion": 327, "obj_weight": 327, "is_measur": 327, "accuracy_target": 327, "accuracy_meet": 327, "verifi": 327, "set_model": 327, "best_result": 327, "tune_data": 327, "acc1": 327, "obj1": 327, "obj2": 327, "acc2": 327, "register_criterion": 328, "get_criterion": 328, "pruningcriterion": 328, "magnitudecriterion": 328, "criterion_class": 328, "magtinud": 328, "gradientcriterion": 328, "snipcriterion": 328, "product": [328, 566, 570, 574, 577, 579, 582, 585], "snipmomentumcriterion": 328, "mechan": [328, 582], "preserv": 328, "basepattern": [331, 340], "keep_mask_lay": 331, "invalid_lay": 331, "reduce_tensor": 331, "along": [331, 517, 567], "unprun": 331, "get_single_mask_per_target_ratio": 331, "return_dict": 331, "zero_cnt": 331, "total_cnt": 331, "check_layer_valid": 331, "get_reduced_masks_from_data": 331, "update_residual_cnt": 331, "get_sparsity_ratio_each_lay": 331, "sparsity_ratio": 331, "cnt": 331, "sparsityinfo": 331, "adjust_ratio": 331, "key_new_spars": 331, "max_sparsity_ratio": 331, "min_sparsity_ratio": 331, "final_target_sparsity_ratio": 331, "examin": [331, 575], "adjust_sparsity_ratio": 331, "block_wis": 331, "get_sparsity_ratio_progress": 331, "reshape_orig_to_pattern": 331, "s1": 331, "s2": 331, "reshape_reduced_to_orig": 331, "orig_shap": 331, "reduce_scor": 331, "get_mask_per_threshold": 331, "cur_target_sparsity_ratio": 331, "keep_exact_sparsity_ratio": 331, "remain": 331, "count_new_masked_cnt": 331, "new_added_mask": 331, "update_new_added_mask": 331, "cur_mask": 331, "bacaus": 331, "update_progressive_mask": 331, "progressive_step": 331, "progressive_config": 331, "update_progressive_masks_linear": 331, "update_progressive_masks_scor": 331, "update_progressive_masks_loc": 331, "domain": [331, 386, 394, 397, 414, 416, 421, 445, 452, 453, 456, 474, 505, 506, 508, 524, 536, 541, 552, 575, 576, 585], "update_progressive_masks_glob": 331, "get_least_ninm_mask_from_data": 331, "elementwis": [331, 332], "sparisti": 331, "get_ele_mask_per_threshold": 331, "least_ninm_mask": 331, "least_m_in_m_mask": 331, "gradientsensitivityprun": 332, "local_config": [332, 333, 335, 336, 337, 342], "global_config": [332, 333, 335, 336, 337, 342], "overwritten": [332, 333, 335, 336, 337], "elementwise_prun": 332, "parse_weight_nam": 332, "weight_name_pattern": 332, "compute_mask": [332, 335, 336], "prune_weight": 332, "update_importance_elementwis": 332, "update_importance_ab": 332, "update_importance_weight": 332, "prune_by_import": 332, "num_inst": 332, "lasso": [333, 340, 566, 575, 576], "grouplassoprun": 333, "basicmagnitudeprun": [333, 335], "legaci": 334, "pruner_registri": 337, "clase": 337, "update_spars": 337, "parse_valid_pruner_typ": 338, "baseprun": 338, "mask_weights_gener": 338, "update_mask": 338, "basicprun": 338, "proce": 338, "regul": 338, "set_global_step": 338, "progressiveprun": 338, "grain": [338, 577], "interv": [338, 576], "check_progressive_valid": 338, "check_is_pruned_progressive_step": 338, "update_masks_progress": 338, "print_progressive_spars": 338, "register_reg": 340, "regulariz": 340, "get_reg_typ": 340, "get_reg": 340, "basereg": 340, "grouplasso": 340, "coeff": 340, "reg_term": 340, "coeffient": 340, "pruningschedul": 341, "init_ratio": 341, "init_sparsity_ratio": 341, "reset_none_to_default": 342, "update_param": [342, 391], "process_weight_config": 342, "default_config": 342, "pruners_info": 342, "process_yaml_config": 342, "calib_func": 343, "eval_metr": 343, "hybirdblock": 343, "paramt": 343, "automixedprecisiontunestrategi": 344, "rule": [344, 575], "tri": [344, 537, 585], "tune_config": [344, 345, 346, 347, 348, 349, 351, 352, 353, 354], "basictunestrategi": 345, "bayesiantunestrategi": 346, "come": [346, 585], "discret": [346, 585], "gaussian": [346, 585], "posterior": [346, 585], "black": [346, 585], "maxim": [346, 575, 576, 585], "acq_max": 346, "ac": 346, "gp": 346, "y_max": 346, "random_se": [346, 359, 408, 534, 586], "n_warmup": 346, "n_iter": 346, "acquisit": 346, "relev": 346, "limit": [346, 369, 557, 575, 583], "acq": 346, "randomst": 346, "scipi": 346, "x_max": 346, "targetspac": 346, "pbound": 346, "9527": [346, 586], "params_to_arrai": 346, "array_to_param": 346, "amort": 346, "keyerror": 346, "get_target": 346, "num": [346, 369, 569], "_kei": 346, "bayesianoptim": 346, "promis": [346, 558, 575, 576], "gen_next_param": 346, "conservativetunestrategi": 347, "o0": 347, "quantifi": 347, "quant_queu": 347, "prioriti": [347, 585], "go": [347, 563, 578, 584], "fp16": [347, 570, 579], "trail": 347, "exhaustivetunestrategi": 348, "hawq_v2tunestrategi": 349, "impact": [349, 351, 352, 581, 585], "msetunestrategi": 351, "mse_impact_lst": 351, "best_qmodel": 351, "current_best_model": 351, "ordered_op_name_typ": 351, "mse_v2tunestrategi": 352, "highest": [352, 585], "revert": [352, 585], "lowest": [352, 575, 576, 585], "randomtunestrategi": 353, "strategy_registri": [354, 585], "evaluation_result": [354, 559], "initial_tuning_cfg": 354, "quant_mode_wise_item": 354, "quant_mod": 354, "initial_op_tuning_cfg": 354, "op_item_dtype_dict": 354, "show_baseline_info": 354, "displai": [354, 369, 440, 453], "initial_best_acc": 354, "set_tuning_spac": 354, "setup_resum": 354, "set_q_func": 354, "update_best_op_tuning_cfg": 354, "op_tuning_cfg": 354, "deploy_config": 354, "deploy": [354, 556], "optuningconfig": [355, 358], "op_quant_mod": [355, 358], "get_stat": [355, 358], "from_stat": [355, 358], "compressionmanag": 359, "uesd": 359, "deal": 359, "commpon": 359, "train_loop": [359, 573], "path_to_sav": 359, "layerhistogramcollector": [360, 363], "histogram": [360, 363, 369, 413, 416, 424, 583], "layer_tensor": [360, 363], "include_lay": [360, 363], "diverg": [360, 363, 364, 557, 585], "get_func_from_config": 362, "func_dict": 362, "get_preprocess": 362, "get_postprocess": 362, "get_algorithm": 362, "create_dataset": 362, "cfg_preprocess": 362, "cfg_filter": 362, "create_dataload": 362, "dataloader_cfg": 362, "create_eval_func": 362, "postprocess_cfg": 362, "create_train_func": 362, "Their": 362, "auxiliari": 363, "msg": [363, 366], "debug": [363, 366, 426, 427, 431, 552, 585], "warn": [363, 366, 552], "warin": [363, 366], "alia": [363, 366], "fatal": [363, 366], "probabl": 364, "expand_quantized_bin": 364, "quantized_bin": 364, "reference_bin": 364, "expand": 364, "bin": [364, 369], "safe_entropi": 364, "reference_distr_p": 364, "p_sum": 364, "candidate_distr_q": 364, "q_sum": 364, "entropi": [364, 585], "get_threshold": 364, "hist_edg": 364, "min_val": 364, "max_val": 364, "quantized_typ": 364, "num_quantized_bin": 364, "255": [364, 579], "pretrain": 365, "optimizedmodel": 365, "from_pretrain": 365, "repositori": [365, 445, 450, 452, 505, 511, 565], "hub": [365, 517], "host": [365, 559], "cache_dir": 365, "force_download": 365, "resume_download": 365, "delet": [365, 404, 410, 411, 416, 417, 418, 419, 420, 575, 576], "receiv": [365, 582], "artifact": 365, "co": 365, "save_for_huggingface_upstream": 365, "output_dir": [365, 517], "get_logg": 366, "checkpoint_dir": 368, "history_cfg": 368, "best_configur": 368, "best_model_weight": 368, "pt": [368, 571, 577, 580], "snapshot": [368, 422, 543], "cfg_from_fil": 369, "yaml_fil": [369, 555, 559, 569], "lazyimport": 369, "lazi": 369, "till": [369, 585], "decorat": 369, "time_limit": 369, "get_siz": [369, 524], "fault_tolerant_fil": 369, "equal_dict": 369, "d2": 369, "compare_kei": 369, "ignore_kei": 369, "ignor": [369, 555], "cpuinfo": 369, "cores_per_socket": 369, "get_number_of_socket": [369, 512], "customized_msg": 369, "elaps": 369, "combine_histogram": 369, "old_hist": 369, "get_tensor_histogram": 369, "2048": 369, "get_all_fp32_data": 369, "get_tuning_histori": 369, "tuning_history_path": [369, 493], "str2arrai": 369, "dequantizeweight": 369, "weight_tensor": 369, "scale_info": 369, "statist": 369, "header": [369, 470, 549, 562], "field_nam": 369, "output_handl": 369, "printer": 369, "print_stat": 369, "global_st": 369, "load_data_from_pkl": 369, "pkl": 369, "dump_data_to_loc": 369, "set_resume_from": 369, "resume_from": 369, "project_data": [370, 476, 477, 482, 486, 489, 492, 499], "benchmark_data": 370, "workdir": [370, 486, 499, 505, 509, 513, 521], "config_filenam": [370, 486, 499], "configuration_data": [370, 477, 482, 486, 489, 492], "generate_config": [370, 477, 482, 486, 489, 492, 499], "dataloaderinterfac": [370, 486, 499], "dataloader_data": [370, 382, 411, 416, 486, 499], "parse_arg": [371, 479, 483, 488, 491, 497], "benchmark_mod": [371, 516], "set_eager_execut": [371, 479, 483, 491], "request_id": [372, 475, 493, 494, 509, 517], "asd": [372, 494], "benchmark_id": [372, 389, 390, 400], "benchmark_result_upd": 372, "benchmark_result_update_pytorch_script": 372, "neural_coder_perform": 372, "neural_coder_tim": 372, "pytorch_script_bench_optim": 372, "command_line_of_script": 372, "pytorch_script_bench_original_model": 372, "execute_real_benchmark": 372, "project_detail": [372, 405, 475, 494], "benchmark_detail": 372, "benchmark_model": [373, 445, 505], "execute_benchmark": [373, 445, 505], "benchmarkconfiggener": 374, "configgener": [374, 375, 376, 378, 379, 380, 381], "generate_evaluation_config": [374, 376, 378, 380, 381], "generate_accuracy_config": 374, "generate_performance_config": 374, "workload_directori": 375, "configuration_path": 375, "jsonseri": [375, 429, 430, 435, 437, 438, 441, 451, 460, 486, 492, 512, 514, 522, 525, 526, 527, 528, 530, 531, 532, 533, 534], "get_predefined_config_path": [375, 524], "generate_model_config": 375, "generate_dataloader_config": 375, "graphoptimizationconfiggener": 376, "generate_graph_optimization_config": 376, "benchmark_config_gener": [377, 445, 505], "graph_optimization_config_gener": [377, 445, 505], "mixed_precision_config_gener": [377, 445, 505], "profiling_config_gener": [377, 445, 505], "pruning_config_gener": [377, 445, 505], "quantization_config_gener": [377, 445, 505], "mixedprecisionconfiggener": 378, "generate_mixed_precision_config": 378, "profilingconfiggener": 379, "pruningconfiggener": 380, "generate_pruning_config": 380, "quantizationconfiggener": 381, "generate_tuning_config": 381, "generate_quantization_config": 381, "configurationpars": 382, "input_data": [382, 387, 554], "parse_evaluation_data": 382, "evaluation_data": 382, "parse_transform": 382, "transforms_data": [382, 411, 416], "parse_dataload": 382, "parse_metr": 382, "metric_data": 382, "get_param_typ": 382, "param_group": 382, "parse_valu": 382, "required_typ": 382, "parse_list_valu": 382, "parse_multidim_list": 382, "dimension": 382, "normalize_string_list": 382, "string_list": 382, "bracket": 382, "get_predefined_configur": 384, "update_config_to_machine_specif": 384, "configuration_pars": [385, 445, 505], "get_boundary_nod": [385, 445, 505], "get_configur": [385, 445, 505], "params_feed": [385, 445, 505], "pruning_config_pars": [385, 445, 505], "feeder": 386, "get_framework": [386, 459], "get_domain": 386, "get_model": [386, 459, 545], "get_dataload": 386, "get_transform": 386, "get_object": 386, "get_strategi": 386, "get_quantization_approach": 386, "get_possible_valu": 386, "pruningconfigpars": 387, "generate_tre": 387, "parse_entri": 387, "bench": [388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 475, 504], "dbmanag": [388, 421], "database_loc": [388, 421], "log_level": [388, 421, 515], "initialize_databas": [388, 421], "create_sqlalchemy_engin": [388, 421], "create_al": [388, 421], "tabl": [388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 421], "project_id": [389, 392, 399, 400, 403, 405, 411, 415, 416], "model_id": [389, 399, 400, 403], "dataset_id": [389, 392, 400, 403, 411, 415, 416], "warmup_iter": 389, "number_of_inst": 389, "cores_per_inst": [389, 525, 553, 578], "execution_command": [389, 400, 403], "benchark": 389, "delete_benchmark": [389, 410, 416], "benchmark_nam": 389, "update_statu": [389, 400, 403], "execution_statu": [389, 400, 403], "executionstatu": [389, 400, 403, 410, 416, 418, 419, 506, 523], "update_dur": [389, 400, 403], "update_execution_command": [389, 400, 403, 410, 416, 418, 419], "update_log_path": [389, 400, 403, 416, 419], "update_config_path": [389, 400], "update_dataset": [389, 400, 403], "update_batch_s": [389, 400], "update_mod": 389, "update_cores_per_inst": 389, "update_number_of_inst": 389, "clean_statu": [389, 400, 403, 410, 416, 418, 419, 523], "status_to_clean": [389, 400, 403, 410, 416, 418, 419, 523], "build_info": [389, 390, 392, 399, 400, 403, 404, 406, 409], "benchmark_result": [389, 397, 421, 445], "benchmarkresult": [389, 390], "update_accuraci": 390, "update_perform": 390, "list_by_framework": [391, 398, 407], "framework_id": [391, 398, 399, 407, 423], "query_to_list": [391, 398, 407], "dataloaders_queri": 391, "dataloader_id": 391, "fill_dictionari": [391, 393, 394, 396, 398, 401, 402, 407], "dataset_nam": [392, 411, 416], "template_path": 392, "delete_dataset": [392, 411, 416], "update_template_path": 392, "get_domain_id": 393, "domain_nam": 393, "domainflavour": [394, 506], "db": [394, 401, 402, 422, 423], "get_domain_flavour_id": 394, "domain_flavour_nam": 394, "flavour": [394, 414, 416, 474, 506], "get_framework_id": 396, "framework_nam": [396, 472, 512], "domain_flavour": [397, 421, 445, 451, 524], "optimization_typ": [397, 400, 421, 445], "profiling_result": [397, 403, 421, 445], "pruning_detail": [397, 400, 421, 445], "tuning_detail": [397, 400, 421, 445], "tuning_histori": [397, 400, 416, 418, 421, 445, 480, 505], "metrics_queri": 398, "precision_id": [399, 400, 401, 402], "domain_id": [399, 407], "domain_flavour_id": 399, "supports_profil": [399, 453, 461], "supports_graph": [399, 453], "supports_prun": [399, 453, 465], "delete_model": [399, 416, 417], "optimization_type_id": 400, "sampling_s": [400, 525, 586], "tuning_details_id": [400, 408], "pruning_details_id": [400, 406], "diagnosis_config": 400, "delete_optim": [400, 416, 418], "optimization_id": [400, 401, 416, 418, 475], "optimization_nam": [400, 401, 415, 416], "update_optimized_model": [400, 416, 418], "optimized_model_id": 400, "update_sampling_s": 400, "update_precis": 400, "update_tuning_detail": 400, "update_pruning_detail": 400, "pin_accuracy_benchmark": [400, 416, 418], "pin": [400, 416, 418], "pin_performance_benchmark": [400, 416, 418], "get_optimization_by_project_and_model": 400, "unpin_benchmark": 400, "db_connect": 400, "unpin": 400, "optimizationtyp": [400, 401, 506], "tuningdetail": [400, 408, 492], "tuninghistori": [400, 409, 493], "pruningdetail": [400, 406], "optimized_model": 400, "get_pinned_benchmark": 400, "list_for_precis": 401, "precision_nam": [401, 402], "get_optimization_type_for_precis": 401, "get_optimization_type_id": 401, "get_optimization_type_by_nam": 401, "get_optimization_type_by_id": 401, "get_precision_id": 402, "get_precision_by_nam": 402, "get_precision_by_id": 402, "num_thread": 403, "delete_profil": [403, 416, 419], "profiling_id": [403, 404, 416, 419, 494], "profiling_nam": 403, "update_num_thread": 403, "profilingresult": [403, 404], "total_execution_tim": 404, "accelerator_execution_tim": 404, "cpu_execution_tim": 404, "op_run": 404, "op_defin": 404, "get_result": 404, "bulk_add": 404, "params_interfac": [404, 410, 411, 413, 415, 416, 417, 418, 419, 421, 445, 505, 543], "profilingresultaddparamsinterfac": [404, 416, 419, 422], "bulk": [404, 416, 419], "delete_result": 404, "create_project": [405, 415, 416, 420], "delete_project": [405, 416, 420], "project_nam": [405, 411, 416], "get_model_by_nam": 405, "list_project": [405, 416, 420], "update_not": 405, "pruning_details_data": 406, "delete_pruning_detail": 406, "list_by_domain": 407, "transforms_queri": 407, "accuracy_criterion_typ": 408, "accuracy_criterion_threshold": 408, "exit_polici": [408, 586], "tuning_details_data": 408, "delete_tuning_detail": 408, "update_tuning_histori": 408, "tuning_history_id": 408, "minimal_accuraci": 409, "baseline_accuraci": 409, "baseline_perform": 409, "last_tune_accuraci": 409, "last_tune_perform": 409, "best_tune_accuraci": 409, "best_tune_perform": 409, "benchmarkapiinterfac": [410, 416], "get_benchmark_detail": [410, 416], "list_benchmark": [410, 416], "update_benchmark_accuraci": [410, 416], "update_benchmark_perform": [410, 416], "update_benchmark_statu": [410, 416], "update_benchmark_dur": [410, 416], "update_path": [410, 416, 418], "add_benchmark": [410, 416], "add_result": [410, 416, 419], "edit_benchmark": [410, 416], "parse_benchmark_data": [410, 416], "benchmarkaddparamsinterfac": [410, 416, 422], "parse_benchmark_edit_data": [410, 416], "benchmarkeditparamsinterfac": [410, 416, 422], "before_delete_benchmark_entri": 410, "sqlite3": 410, "db_model": [410, 421, 445, 505], "datasetapiinterfac": [411, 416], "get_dataset_detail": [411, 416], "list_dataset": [411, 416], "add_dataset": [411, 416], "set_template_path": [411, 416], "parsed_dataset_data": [411, 416], "datasetaddparamsinterfac": [411, 416, 422], "check_if_custom_metric_or_dataload": [411, 416], "dataset_data": [411, 416, 476, 477, 482, 486, 489, 492, 526], "generate_custom_templ": [411, 416], "dataloader_path": [411, 416], "generate_templ": [411, 416], "template_typ": [411, 416], "parse_dataset_data": [411, 416], "get_predefined_dataset": [411, 416], "prepare_predefined_dataload": [411, 416], "prepare_predefined_transform": [411, 416], "set_database_vers": [411, 412], "version_num": [411, 412], "alembic_vers": [411, 412], "initialize_associ": [411, 412], "initialize_precision_optimization_types_associ": [411, 412], "search_in_list_of_dict_for_unique_valu": [411, 412], "list_of_dict": [411, 412], "search_in_list_of_dict": [411, 412], "diagnosisapiinterfac": [413, 416], "get_op_list": [413, 416, 424], "get_op_detail": [413, 416, 424], "generate_optim": [413, 416], "model_wise_param": [413, 416], "parse_optimization_data": [413, 416, 418], "diagnosisoptimizationparamsinterfac": [413, 416, 422], "parse_op_wise_config": [413, 416], "op_wise_param": [413, 416], "parse_wise_paramet": [413, 416], "params_per_typ": [413, 416], "set_op_wise_pattern_precis": [413, 416], "parse_model_wise_config": [413, 416], "dictionariesapiinterfac": [414, 416], "dictonari": [414, 416], "list_domain": [414, 416], "list_domain_flavour": [414, 416], "list_optimization_typ": [414, 416], "list_optimization_types_for_precis": [414, 416], "list_precis": [414, 416], "list_dataload": [414, 416], "list_dataloaders_by_framework": [414, 416], "list_transform": [414, 416], "list_transforms_by_framework": [414, 416], "list_transforms_by_domain": [414, 416], "list_metr": [414, 416], "list_metrics_by_framework": [414, 416], "examplesapiinterfac": [415, 416], "get_optimization_data": [415, 416], "optimizationaddparamsinterfac": [415, 416, 418, 422], "benchmark_api_interfac": [416, 421, 445], "dataset_api_interfac": [416, 421, 445], "diagnosis_api_interfac": [416, 421, 445], "dictionaries_api_interfac": [416, 421, 445], "examples_api_interfac": [416, 421, 445], "model_api_interfac": [416, 421, 445], "optimization_api_interfac": [416, 421, 445], "profiling_api_interfac": [416, 421, 445], "project_api_interfac": [416, 421, 445], "modelapiinterfac": [416, 417], "add_model": [416, 417, 420], "get_model_detail": [416, 417], "list_model": [416, 417, 445, 471, 505], "parse_model_data": [416, 417], "modeladdparamsinterfac": [416, 417, 422], "optimizationapiinterfac": [416, 418], "get_optimization_detail": [416, 418], "list_optim": [416, 418], "update_optimization_statu": [416, 418], "update_optimization_dur": [416, 418], "add_optim": [416, 418], "add_quantization_optim": [416, 418], "optimization_data": [416, 418, 476, 477, 482, 486, 489, 492], "add_pruning_optim": [416, 418], "add_standard_optim": [416, 418], "edit_optim": [416, 418], "get_pruning_detail": [416, 418], "gat": [416, 418], "edit_tuning_detail": [416, 418], "parsed_optimization_data": [416, 418], "optimizationeditparamsinterfac": [416, 418, 422], "edit_pruning_detail": [416, 418], "pruning_data": [416, 418], "add_tuning_histori": [416, 418], "parse_tuning_histori": [416, 418], "tuninghistoryinterfac": [416, 418, 422, 543], "parse_optimization_edit_data": [416, 418], "load_pruning_details_config": [416, 418, 524], "profilingapiinterfac": [416, 419], "get_profiling_detail": [416, 419], "list_profil": [416, 419], "update_profiling_statu": [416, 419], "update_profiling_dur": [416, 419], "add_profil": [416, 419], "edit_profil": [416, 419], "bulk_add_result": [416, 419], "parse_profiling_data": [416, 419], "profilingaddparamsinterfac": [416, 419, 422], "parse_profiling_result_data": [416, 419], "parse_profiling_edit_data": [416, 419], "profilingeditparamsinterfac": [416, 419, 422], "projectapiinterfac": [416, 420], "get_project_detail": [416, 420], "add_dummy_dataset": [416, 420], "update_project_not": [416, 420], "db_oper": [421, 445, 505], "parse_nod": 422, "tuninghistoryiteminterfac": [422, 543], "update_dataloaders_param": 423, "dataloaders_to_upd": 423, "framework_dataloaders_config": 423, "get_framework_dataloaders_config": 423, "get_framework_transforms_config": 423, "get_tensors_info": [424, 453], "load_quantization_config": 424, "calculate_ms": 424, "input_model_tensor": 424, "optimized_model_tensor": 424, "op_detail": [424, 426, 445, 505], "opdetail": [424, 429], "get_histogram_data": 424, "draw": [424, 582, 585], "diagnosisfactori": 425, "get_diagnosi": 425, "onnx_diagnosi": [426, 445, 505], "onnxrt_diagnosi": [426, 427, 445], "tensorflow_diagnosi": [426, 445, 505], "op_entri": [426, 445, 505], "onnxrtdiagnosi": 428, "onnxrtmodel": [428, 456], "serialization_typ": [429, 430, 460, 512, 514, 526, 527, 531, 532], "oppattern": 429, "pattern_data": 429, "opweight": 429, "weights_data": 429, "opactiv": 429, "op_activ": 429, "opentri": 430, "activation_min": 430, "activation_max": 430, "tensorflowdiagnosi": 432, "browser": [433, 552], "get_directory_entri": 433, "get_requested_path": 433, "request": [433, 445, 446, 447, 468, 469, 472, 493, 505, 509, 536, 538, 540, 541, 545, 547, 548, 550, 552, 579], "get_non_hidden_directory_entri": 433, "create_dir_entri": 433, "direntri": 433, "create_file_entri": 433, "create_entri": 433, "is_directori": 433, "sort_entri": 433, "should_show_fil": 433, "should_show_only_model_fil": 433, "get_setting_valu": 433, "get_filter_valu": 433, "filter_requested_entri": 433, "filter_nam": 433, "is_directory_entri": 433, "is_model_or_directory_entri": 433, "is_dataset_or_directory_entri": 433, "brows": 434, "filesystem": [434, 524, 549], "attribute_typ": 435, "expanded_group": [436, 439], "add_edg": 438, "source_id": 438, "target_id": 438, "get_nod": 438, "highlight_pattern": 438, "get_target_nod": 438, "reader": [439, 440, 445, 505], "graphread": 439, "find_pattern_in_graph": [439, 540], "onnxrt_read": [440, 442, 445], "tensorflow_read": [440, 442, 445], "collaps": [440, 445, 505, 552], "graph_read": [440, 445, 505], "groupnod": 441, "group_nam": 441, "onnxrtread": 443, "tensorflowread": 444, "jobs_control_queu": [445, 446, 505], "frozen_pb": [445, 452, 462], "meta_graph": [445, 452, 462], "model_type_gett": [445, 452, 505], "download_config": [445, 470, 471, 505], "download_model": [445, 470, 471, 505], "optimize_model": [445, 478, 480, 481, 484, 487], "neural_coder_optim": [445, 480, 505], "tune_model": [445, 480, 490], "execute_optim": [445, 480, 505], "tensorflow_profil": [445, 496, 505], "execute_profil": [445, 496, 505], "profile_model": [445, 496, 498, 502, 505], "job": [446, 520], "_jobscontrolqueu": 447, "queu": 447, "jobsmanag": 447, "_jobsmmanag": 448, "_job": 448, "get_default_path": 450, "shape_elements_ord": [453, 456, 465, 524], "get_input_nod": [453, 463, 464, 465], "get_output_nod": [453, 463, 464, 465], "ensure_supported_path": 453, "get_model_graph": [453, 456, 464, 465, 540], "supports_path": [453, 456, 458, 461, 463, 464, 466], "guard_requirements_instal": [453, 456, 458, 465], "instal": [453, 456, 458, 465, 472, 559, 562, 574], "nc_model_inst": [456, 465], "filtered_input_nod": 456, "remove_number_of_samples_from_shap": 456, "pytorchscriptmodel": 458, "modelrepositori": 459, "get_framework_from_path": [459, 524], "get_supported_framework": 459, "is_model_path": 459, "trust": [460, 552], "frozenpbmodel": 461, "metagraphmodel": 464, "metagraph": 464, "savedmodelmodel": 466, "get_input_shap": 467, "fix_dynamic_shap": 467, "resourc": [470, 557, 575], "download_yaml_config": 470, "model_info": 470, "download_fil": 470, "download_path": 470, "report_progress": 470, "unpack_arch": 470, "archive_path": 470, "unpack": 470, "archiv": 470, "get_yaml_url": 470, "model_src_dir": 470, "yaml_relative_loc": 470, "get_available_model": 472, "check_vers": 472, "framework_vers": 472, "supported_vers": 472, "validate_model_list": 472, "model_list": 472, "get_framework_module_nam": 472, "get_installed_framework": 472, "mappingdirect": 474, "namesmapp": 474, "framework_map": 474, "domain_map": 474, "domain_flavour_map": 474, "precision_map": 474, "map_nam": 474, "parameter_typ": 474, "execute_optimization_pytorch_script": 475, "execute_optimization_regular": 475, "parse_model_data_to_bench_nam": 475, "parse_log": 475, "optimization_detail": 475, "check_if_collect_tuning_histori": 475, "optimizationfactori": 476, "get_optim": 476, "optimization_script": [477, 482, 486, 489, 492], "optimize_graph": [479, 483], "output_graph": [479, 483, 488, 491], "optimize_graph_config": [479, 483], "optimize_pt_script": 485, "output_model_nam": 486, "output_model_dir": 486, "optimizationinterfac": 486, "accuracycriterion": [492, 585], "optimization_workdir": 493, "watcher": 493, "process_succeed": 493, "signal": [493, 524], "was_history_file_chang": 493, "history_file_modification_tim": 493, "send_history_snapshot": 493, "execute_real_profil": 494, "profiling_detail": 494, "profilerfactori": [495, 500], "get_profil": [495, 500], "profiling_data": [495, 499, 500, 502, 522], "load_profiling_detail": 497, "json_path": 497, "config_path": 499, "initialize_graph": 502, "tf_modul": 502, "create_tf_config": 502, "num_warmup": 502, "get_node_by_nam": 502, "convert_nodes_to_list": 502, "build_dataload": 502, "delete_assign": 503, "wsgi": 504, "prepare_environ": 504, "app": [505, 539], "history_snapshot_pars": [505, 539, 544], "request_data_processor": [505, 539, 544], "response_gener": [505, 539, 544, 545, 547, 550], "status": [506, 518, 523], "ensure_workdir_exists_and_writ": 507, "clean_workloads_wip_statu": 507, "wip": [507, 587], "workloads_list": 507, "migrate_databas": 507, "latest": [507, 517, 567, 577, 581], "alemb": [507, 562, 567], "notfoundexcept": [508, 537, 538], "accessdeniedexcept": 508, "deni": 508, "clienterrorexcept": 508, "internalexcept": 508, "subject": [509, 536, 568], "send_respons": 509, "log_nam": 509, "additional_log_nam": [509, 517], "shell": [509, 517, 583], "process_dur": 509, "call_on": 509, "cwd": [509, 517], "universal_newlin": [509, 517], "startupinfo": [509, 517], "creationflag": [509, 517], "ignore_exit_cod": [509, 517], "pid": [509, 517], "env_arg": 509, "ncprocess": [509, 518], "refresh_workdir": 509, "is_multi_command": 509, "expir": 510, "expiringdictitem": 510, "expires_at": 510, "is_expir": 510, "expiringdict": 510, "initial_valu": 510, "ttl": 510, "120": 510, "userdict": 510, "githubinfo": 511, "hw": 512, "hwinfo": 512, "get_distribut": 512, "distibut": 512, "get_bios_vers": 512, "bio": [512, 574], "is_turbo_boost_en": 512, "turbo": [512, 574], "boost": [512, 570, 577], "get_kernel_vers": 512, "get_framework_info": 512, "get_framework_dependency_info": 512, "subdepend": 512, "serializ": 514, "serialize_item": 514, "datetim": 514, "throw": 514, "typeerror": 514, "2016": 514, "84913": 514, "08t11": 514, "084913": 514, "change_log_level": 515, "optimizationpars": 516, "performancepars": 516, "update_parti": 516, "partial": [516, 579], "parsed_result": 516, "summarize_parti": 516, "summarize_valu": 516, "accuracypars": 516, "benchmarkparserfactori": 516, "get_pars": 516, "profilingpars": 516, "unify_tim": 516, "string_valu": 516, "micro": 516, "125": [516, 587], "6m": 516, "microsecond": 516, "cmd": 517, "docker": 517, "aibt_tensorflow": 517, "7_3_mkldnn_tensorflow": 517, "111224": 517, "pull_imag": 517, "0c750a01": 517, "90e0": 517, "4aa8": 517, "99fe": 517, "a194d55a2046": 517, "time_start": 517, "2018": 517, "17t14": 517, "47": [517, 587], "352502": 517, "time_stop": 517, "25": [517, 587], "110410": 517, "info_path": 517, "tail": 517, "is_ok": [517, 518], "popen": 517, "remove_log": 517, "properli": 518, "rtype": 518, "return_code_al": 518, "remove_successful_log": 518, "success": [518, 536, 567], "get_status_update_funct": 520, "job_typ": 520, "sent": 522, "throughput": 522, "acc_input_model": 522, "acc_optimized_model": 522, "size_input_model": 522, "size_optimized_model": 522, "path_optimized_model": 522, "optimization_tim": 522, "insert_data": 522, "calculate_throughput": 522, "readi": 522, "ensure_working_path_exist": 523, "clean_log": 523, "workdir_path": 523, "is_hidden": 524, "get_dataset_path": 524, "get_file_extens": 524, "lead": [524, 557, 570, 575, 576], "is_dataset_fil": 524, "normalize_domain": 524, "underscor": 524, "normalize_framework": 524, "normalize_str": 524, "string_to_norm": 524, "get_model_zoo_config_path": 524, "model_dict": 524, "get_model_zoo_model_path": 524, "check_modul": 524, "get_module_vers": 524, "mb": 524, "add_unit": 524, "load_model_config": 524, "load_dataloader_config": 524, "load_transforms_config": 524, "load_transforms_filter_config": 524, "meaning": [524, 573], "load_precisions_config": 524, "get_default_pruning_config_path": 524, "load_model_wise_param": 524, "load_metrics_config": 524, "get_metrics_dict": 524, "load_help_nc_param": 524, "replace_with_valu": 524, "file_path": 524, "verify_file_path": 524, "determine_ip": 524, "ip": 524, "is_development_env": 524, "nc_mode": 524, "filter_transform": 524, "parse_bool_valu": 524, "release_tag": 524, "get_shape_from_transform": 524, "get_height_width_from_s": 524, "parse_to_string_list": 524, "parse_to_float_list": 524, "export_to_csv": 524, "parse_vers": 524, "string_vers": 524, "remove_dataload": 525, "datalad": 525, "remove_accuracy_metr": 525, "set_evaluation_dataload": 525, "udpat": 525, "set_evaluation_dataset_path": 525, "get_performance_config": 525, "set_performance_cores_per_inst": 525, "get_performance_cores_per_inst": 525, "set_performance_num_of_inst": 525, "num_of_inst": [525, 553, 578], "get_performance_num_of_inst": 525, "set_accuracy_and_performance_batch_s": 525, "set_quantization_dataload": 525, "set_quantization_dataset_path": 525, "set_quantization_batch_s": 525, "set_accuracy_go": 525, "accuracy_go": 525, "set_accuracy_metr": 525, "set_transform": 525, "process_transform": 525, "set_quantization_approach": 525, "set_input": 525, "set_output": 525, "set_quantization_sampling_s": 525, "set_performance_warmup": 525, "warmup": [525, 553, 578], "set_performance_iter": 525, "set_optimization_precis": 525, "yaml_path": 525, "is_dummi": 526, "labelbal": [526, 554, 555], "set_transforms_from_list": 526, "transforms_list": 526, "set_dataset": 526, "postprocessschema": 527, "get_label_shift_valu": 527, "set_accuracy_postprocess_transform": 527, "set_precis": [528, 530], "sgdoptim": 532, "adamwoptim": 532, "adamoptim": 532, "crossentropylosscriterion": 532, "sparsecategoricalcrossentropycriterion": 532, "knowledgedistillationlosscriterion": 532, "set_postprocess_transform": 532, "weightcompressionapproach": 532, "initialize_prun": 532, "pruner_dict_list": 532, "serialize_prun": 532, "parse_dict_value_to_float": 532, "parse_dict_value_to_int": 532, "wiseconfigdetail": 533, "wiseconfig": 533, "acccriterion": 534, "exitpolici": 534, "set_timeout": 534, "set_max_tri": 534, "max_trial": [534, 585], "trial": [534, 585], "set_performance_onli": 534, "float_represent": 535, "dumper": 535, "pruner_represent": 535, "outsid": 536, "create_simple_respons": 536, "gui": [536, 537, 541, 552, 566, 567], "messagequeu": 536, "queue": [536, 541], "post_failur": 536, "post_success": 536, "post_error": 536, "wait": 536, "global_config_directori": 537, "set_up": 537, "determine_values_from_environ": 537, "get_command_line_arg": 537, "determine_server_port": 537, "max_ports_tri": 537, "port_default": 537, "determine_gui_port": 537, "client": [537, 552], "server_port": 537, "unless": [537, 563], "is_port_taken": 537, "determine_log_level": 537, "determine_url_prefix": 537, "get_url": 537, "dump_token_to_fil": 537, "servicenotfoundexcept": 538, "unknown": 538, "connector": 540, "routingdefinit": 540, "rout": 540, "realtimeroutingdefinit": 540, "realtim": 540, "deferredroutingdefinit": 540, "deferredsubprocessroutingdefinit": 540, "spawn": 540, "get_system_info": 540, "endpoint": 541, "run_serv": 541, "webserv": 541, "get_tls_arg": 541, "tl": [541, 552], "block_ifram": 541, "werkzeug": [541, 549], "ifram": 541, "csp": 541, "block_snif": 541, "mime": 541, "snif": 541, "require_api_token": 541, "author": [541, 568], "handle_api_cal": 541, "subpath": 541, "allow_api_cal": 541, "page_not_found": 541, "disable_cach": 541, "build_paramet": 541, "flask": [541, 552], "web_socket_publish": 541, "web_socket": 541, "flask_socketio": 541, "socketio": [541, 552], "benchmarkservic": 542, "workloadservic": [542, 546, 547, 550], "historysnapshotpars": 543, "history_snapshot": 543, "provide_perform": 543, "parse_history_snapshot": 543, "parse_history_item": 543, "history_item": 543, "extract_accuraci": 543, "extract_perform": 543, "modelservic": 545, "optimizationservic": 546, "profilingservic": 547, "generate_csv": 547, "processor": [548, 570, 574, 577, 579, 580, 587], "requestdataprocessor": 548, "get_string_valu": 548, "responsegener": 549, "serve_from_filesystem": 549, "mimetyp": 549, "as_attach": 549, "add_refresh": 549, "refresh_tim": 549, "refresh": 549, "from_except": 549, "get_status_code_for_except": 549, "get_code_templ": 550, "get_output": 550, "conda": [552, 562, 567, 581], "forg": [552, 562, 567], "setup": [552, 563, 567, 575], "ui": 552, "5000": 552, "338174d13706855fc6924cec7b3a8ae8": 552, "listen": 552, "firewal": 552, "8080": 552, "cert": 552, "path_to_cert": 552, "crt": 552, "path_to_private_kei": 552, "encrypt": 552, "insecur": 552, "expos": 552, "forfeit": 552, "threat": 552, "button": [552, 566], "pop": 552, "recognit": [552, 559, 583], "few": [552, 577, 585], "finish": 552, "synthet": 552, "plu": 552, "icon": 552, "section": [552, 557, 575, 578, 586], "unfold": 552, "On": [552, 579], "panel": 552, "navig": 552, "trash": 552, "visibl": 552, "cursor": 552, "prompt": [552, 559], "confirm": 552, "exit": [552, 570, 586], "pencil": 552, "light": [552, 558], "blue": 552, "color": 552, "row": [552, 575, 576], "arrow": 552, "checkbox": 552, "chart": [552, 579, 582, 583], "offer": [552, 555], "conveni": 552, "variat": 552, "yellow": 552, "remind": 552, "dialog": 552, "cryptographi": 552, "linux": 553, "window": 553, "x86_64": 553, "aarch64": 553, "often": [554, 557, 573, 575, 576], "encount": 554, "consum": 554, "lack": 554, "faster": [554, 556, 577, 587], "hard": 554, "treat": 554, "manner": [554, 557, 571], "post_training_static_qu": [554, 555, 578, 585], "300": [554, 555], "output_model": [554, 583], "customis": [554, 555], "ensp": [555, 569, 584], "imagerecord": [555, 559, 586], "image_nam": 555, "cocorecord": 555, "gt": [555, 561, 584], "float16": 555, "int64": 555, "style_transf": 555, "content": 555, "tfrecorddataset": 555, "helloworld": [555, 584], "aid": 556, "increas": [556, 566, 585], "infrastructur": 556, "deploi": [557, 585], "power": [557, 574], "mobil": [557, 587], "workflow": [557, 567, 570, 583], "produc": 557, "softmax": 557, "l": [557, 583, 585], "kd": 557, "kullback": 557, "leibler": 557, "patient": 557, "compact": [557, 575, 576], "ia": 557, "attach": 557, "shallow": 557, "deepest": 557, "deeper": 557, "10006": 557, "training_func_for_nc": 557, "selfknowledgedistillationlossconfig": 557, "distil_loss": 557, "lr": [557, 559], "huge": [558, 576], "bit": [558, 570, 577, 579], "heavi": 558, "booster": 558, "degrad": 558, "retrain": [558, 575, 576], "incorpor": [558, 585], "novel": 558, "horovod": 559, "builtin": 559, "program": [559, 568, 570], "addition": [559, 585], "enable_eager_execut": 559, "yaml_file_path": 559, "evaluation_time_cost": 559, "partit": 559, "distributedsampl": 559, "train_sampl": 559, "train_dataset": 559, "num_replica": 559, "train_load": 559, "train_kwarg": 559, "adadelta": 559, "distributedoptim": 559, "named_paramet": 559, "broadcast_paramet": 559, "root_rank": 559, "broadcast_optimizer_st": 559, "set_epoch": 559, "batch_idx": 559, "zero_grad": [559, 575], "nll_loss": 559, "log_interv": 559, "0f": 559, "tloss": 559, "6f": 559, "dry_run": 559, "test_func": 559, "num_of_process": 559, "002": 559, "ssh": 559, "readm": 559, "exactli": 559, "resnet50_v1": 559, "topk": [559, 569], "resizecropimagenet": [559, 584], "realiz": [559, 569, 572, 580, 582], "tow": 559, "situat": 559, "node1": 559, "node2": 559, "TO": 559, "your_node1_nam": 559, "your_node2_nam": 559, "resnet50_fp32_pretrained_model": 559, "nc_resnet50_v1": 559, "wide": [560, 570, 576, 579], "varieti": [560, 578, 585], "demonstr": [560, 575, 583], "exchang": 561, "hope": 561, "briefli": [561, 575], "matur": 561, "major": [561, 564, 579], "reus": 561, "torch2onnxconfig": 561, "inc_model": [561, 571], "fp32_onnx_config": 561, "randn": 561, "int8_onnx_config": 561, "matmulintegertofloat": 561, "matmulinteg": 561, "incompat": 562, "88": [562, 582, 587], "80": [562, 583, 587], "pyobject": 562, "reinstal": 562, "importerror": 562, "libgl": 562, "apt": [562, 567], "yum": [562, 567], "opencv": 562, "conflict": 562, "pend": 562, "27": [562, 567, 587], "quick": [563, 586], "friendli": [563, 586], "let": [563, 578, 586], "syntax": 563, "up1": 563, "up2": 563, "valid_mixed_precis": 563, "per_tensor": [563, 586], "grappler_optim": 563, "constfold": 563, "arithmet": 563, "debug_stripp": 563, "concept": [564, 582], "custom_metr": 564, "explicitli": 564, "refin": 564, "These": 566, "broad": 566, "snippet": 566, "upload": 566, "qintegerop": [566, 579], "plan": [566, 570], "uninstal": 567, "frequent": 567, "ask": 567, "consolid": 567, "eas": [567, 577], "streamlin": 567, "scienc": 567, "anaconda": 567, "suit": [567, 583], "esri": 567, "apach": 568, "softwar": [568, 570, 574, 577, 581], "copyright": 568, "accompani": 568, "research": 568, "wish": 568, "bibtex": 568, "misc": 568, "feng": 568, "tian": 568, "hanwen": 568, "haihao": 568, "shen": 568, "suyu": 568, "chen": 568, "titl": 568, "howpublish": 568, "year": 568, "logo": [568, 574], "atom": 568, "phi": 568, "pentium": 568, "vtune": 568, "corpor": [568, 574], "subsidiari": [568, 574], "brand": [568, 574], "claim": [568, 574], "popularli": 569, "label_map": 569, "decis": 569, "ap": 569, "curv": 569, "turn": 569, "target_boxes_num": 569, "str_label": 569, "int_label": 569, "inturn": 569, "cocomap": 569, "vocmap": 569, "categor": 569, "multiclass": 569, "multilabel": 569, "multi_metr": 569, "higher_is_bett": [569, 585, 586], "newmetr": 569, "reflect": [569, 574, 584], "recent": 570, "growth": 570, "complex": [570, 576], "significantli": [570, 575, 576], "bfloat16": [570, 580], "half": 570, "sixteen": 570, "bandwidth": 570, "launch": 570, "3rd": [570, 577, 579, 580], "gen": [570, 577, 580], "codenam": 570, "x86": 570, "avx512": [570, 579], "vcvtne2ps2bf16": 570, "vcvtneps2bf16": 570, "vdpbf16p": 570, "mix_precis": 570, "mixedprecisionconfig": 570, "avx512_bf16": 570, "consequ": 570, "persist": 571, "brought": [571, 579], "tf2": 571, "h5": 571, "onnx_ml_pb2": 571, "hybridblock": 571, "0000": 571, "saved_result": 571, "multi_object": 572, "peak": 572, "tuningcriterion": [572, 582, 585], "tuning_criterion": [572, 582, 585], "simultan": [573, 578], "arbitrari": 573, "gain": [573, 577], "benefit": [573, 575], "knowledgedistillationlossconfig": 573, "distillation_criterion": 573, "d_conf": 573, "p_conf": 573, "platinum": [574, 587], "8358": 574, "manufactur": 574, "m50cyp2sbstd": 574, "se5c620": 574, "86b": 574, "01": [574, 578, 585, 586, 587], "0005": 574, "2202160810": 574, "microcod": 574, "0xd000332": 574, "irq": 574, "60ghz": 574, "6chz": 574, "perf": 574, "512gb": 574, "16x32gb": 574, "ddr4": 574, "3200": 574, "mt": 574, "nic": 574, "1x": 574, "ethernet": 574, "100mb": 574, "i350": 574, "gigabit": 574, "drive": 574, "intel_ssdsckkb48": 574, "447": 574, "1g": 574, "factor": [574, 587], "publicli": 574, "degre": 574, "mark": 574, "trademark": 574, "art": [575, 576], "increasingli": [575, 576], "crucial": [575, 576], "salient": [575, 576], "nonzero": [575, 576], "irregular": [575, 576], "anywher": [575, 576], "2in4": 575, "amper": 575, "ic": [575, 577], "oc": 575, "kh": 575, "kw": 575, "fastform": 575, "finetun": [575, 576, 587], "downstream": [575, 576], "formula": [575, 576], "exemplifi": 575, "complement": 575, "pruner1": 575, "layer1": 575, "layer3": 575, "rate": [575, 579], "pruner2": 575, "snip_momentum_progress": 575, "layer2": 575, "num_train_epoch": 575, "lr_schedul": 575, "mention": 575, "cv": [575, 576], "grown": 576, "unpreced": 576, "smooth": 576, "discourag": 576, "namhoon": 576, "lee": 576, "thalaiyasingam": 576, "ajanthan": 576, "philip": 576, "torr": 576, "2019": 576, "applianc": 577, "bitnami": 577, "oct": 577, "innov": 577, "plug": 577, "twitter": 577, "linkedin": 577, "zone": 577, "land": 577, "gcp": 577, "aw": [577, 587], "azur": 577, "marketplac": 577, "pat": 577, "keynot": 577, "intelon": 577, "sep": 577, "alibaba": 577, "chines": 577, "aug": 577, "purif": 577, "sacrif": 577, "jun": 577, "partner": 577, "democrat": 577, "apr": 577, "ecosystem": 577, "mar": 577, "feb": 577, "jan": 577, "bilibili": 577, "ml": 577, "doubl": 577, "mlperf": [577, 587], "reconstruct": 577, "abound": 577, "lpot": [577, 581], "cern": 577, "gan": 577, "3dgan": 577, "4th": 577, "iml": 577, "workshop": 577, "highli": 577, "intelcaff": 577, "aris": 578, "advantag": 578, "tell": 578, "henc": 578, "post_training_dynamic_qu": [578, 585], "quant_aware_train": 578, "op_type_list": [578, 585], "rel": [578, 585, 586, 587], "weight_compress": [578, 586], "initial_spars": [578, 586], "prune_typ": [578, 586], "basic_magnitud": [578, 586], "start_epoch": [578, 586], "end_epoch": [578, 586], "update_frequ": 578, "prune_domain": 578, "tile_pattern_1x1": 578, "inter_num_of_thread": 578, "intra_num_of_thread": 578, "graph_optimization_level": 578, "disable_al": 578, "veri": [579, 585], "invent": 579, "int4": 579, "cost": 579, "theoret": 579, "affin": 579, "zeropoint": 579, "asymmetr": [579, 585], "earli": [579, 585, 586], "overflow": 579, "solv": [579, 581], "fbgemm": 579, "unseen": 579, "enough": 579, "peopl": 579, "emul": 579, "mimic": 579, "fact": 579, "ultim": 579, "pain": 579, "lossi": 579, "understand": [579, 583], "philosophi": 579, "val_dataset": 579, "val_dataload": 579, "worker": 579, "ping_memori": 579, "val_load": 579, "avg": 579, "enhanc": 580, "bf16wrapper": 580, "retrac": 580, "site": 581, "assist": 581, "comparison": [581, 583], "sed": 581, "your_script": 581, "visual": [582, 583, 585], "hyperparamet": [582, 585], "backbon": 582, "interact": 582, "sigopt_api_token": [582, 585], "sigopt_project_id": [582, 585], "sigopt_experiment_id": 582, "nc": [582, 585], "login": 582, "certain": 582, "suffici": 582, "ordinari": 582, "capac": 582, "sigopt_experiment_nam": [582, 585], "observ": [582, 583, 585], "strategy_kwarg": [582, 585], "analysi": 582, "mobilenet": [582, 587], "8266": 582, "8372": 582, "2132": 582, "83": [582, 587], "7495": 582, "8299": 582, "8294": 582, "85": [582, 587], "0837": 582, "8291": 582, "4469": 582, "discov": 583, "why": 583, "valuabl": 583, "instrument": 583, "writer": 583, "_pre_eval_hook": 583, "submodul": 583, "whitelist": 583, "_recordingobserv": 583, "output_tensors_dict": 583, "current_it": 583, "get_tensor_valu": 583, "_observer_forward_hook": 583, "activation_post_process": 583, "_add_observer_": 583, "named_children": 583, "leaf": 583, "add_modul": 583, "register_forward_hook": 583, "dump_tim": 583, "summarywrit": 583, "_acc": 583, "tune_": 583, "add_graph": 583, "get_observer_dict": 583, "observer_dict": 583, "is_quant": 583, "add_histogram": 583, "bind_al": 583, "logdir_spec": 583, "tune_0_acc0": 583, "tune_1": 583, "tune_1_acc0": 583, "79": [583, 587], "four": 583, "baseline_acc_0": 583, "776": 583, "tune_1_acc_0": 583, "095": 583, "runs_v3": 583, "image_recognit": 583, "run_tuning_dump_tensor": 583, "sh": 583, "inceptionv3": 583, "v0": 583, "cg": 583, "conv0": 583, "op_wis": [583, 586], "bash": 583, "run_tun": 583, "topologi": 583, "inception_v3": 583, "dataset_loc": 583, "inceptionv3_fp32_pretrained_model": 583, "nc_inceptionv3": 583, "inceptionv3_dump_tensor": 583, "poor": 583, "disappear": 583, "centercrop": 584, "randomresizedcrop": 584, "randomcrop": 584, "cropres": 584, "decodeimag": 584, "jpeg": 584, "encodejp": 584, "alignimagechannel": 584, "68": [584, 587], "116": 584, "78": [584, 587], "103": 584, "94": [584, 587], "017": 584, "bilinearimagenet": [584, 586], "totensor": 584, "topilimag": 584, "padding_mod": 584, "border": 584, "colorjitt": 584, "bright": 584, "satur": 584, "hue": 584, "jitter": 584, "tondarrai": 584, "human": 585, "op_name_list": 585, "tolerable_loss": 585, "quant_level": 585, "post_training_auto_qu": 585, "ii": 585, "iii": 585, "classic": 585, "idea": 585, "primari": 585, "spent": 585, "hawq_v2_loss": 585, "model_loss": 585, "compli": 585, "focu": 585, "short": 585, "never": 585, "loglevel": 585, "endlessli": 585, "perspect": 585, "smbo": 585, "appl": 585, "surrog": 585, "divid": 585, "quantil": 585, "x1": 585, "x2": 585, "densiti": 585, "parzen": 585, "greatest": 585, "hour": 585, "dai": 585, "abctunestrategi": 585, "overridden": 585, "mobilenet_v1": 586, "onnxrt_integ": 586, "onnxrt_qlinear": 586, "image_tensor": 586, "subsect": 586, "model_wis": 586, "conv1": 586, "hyper": 586, "40": [586, 587], "06": [586, 587], "beta_1": 586, "beta_2": 586, "999": 586, "sparsecategoricalcrossentropi": 586, "reduct": 586, "sum_over_batch_s": 586, "from_logit": 586, "54": [586, 587], "19": [586, 587], "90": [586, 587], "nesterov": 586, "weight_decai": 586, "overal": 586, "8380": 587, "performancethroughput": 587, "sec": 587, "efficientnet": 587, "76": 587, "74": 587, "91": 587, "43": 587, "69": 587, "32x": 587, "cnn": 587, "incept": 587, "37": 587, "65": 587, "38": 587, "77": 587, "53": 587, "62": 587, "57x": 587, "46": 587, "61": 587, "58x": 587, "resnet101": 587, "39": 587, "63": 587, "11x": 587, "71": 587, "51x": 587, "26": 587, "59": 587, "23": 587, "06x": 587, "25x": 587, "70": 587, "44": 587, "00": 587, "163": 587, "133": 587, "22x": 587, "73": 587, "97": 587, "49": 587, "111": 587, "20x": 587, "v3": 587, "67": 587, "43x": 587, "v4": 587, "18": 587, "56": 587, "53x": 587, "36": 587, "33x": 587, "44x": 587, "374": 587, "226": 587, "66x": 587, "92": 587, "41x": 587, "fashion": 587, "359": 587, "244": 587, "47x": 587, "172": 587, "66": 587, "98x": 587, "153": 587, "76x": 587, "151": 587, "112": 587, "35x": 587, "26x": 587, "72": 587, "99": 587, "56x": 587, "82": 587, "93x": 587, "vgg16": 587, "89": 587, "178": 587, "14x": 587, "vgg19": 587, "156": 587, "18x": 587, "albert": 587, "23x": 587, "barthez": 587, "81": 587, "86": 587, "82x": 587, "203": 587, "01x": 587, "216": 587, "102": 587, "10x": 587, "sst2": 587, "218": 587, "stsb": 587, "57": 587, "48": 587, "49x": 587, "93": 587, "70x": 587, "50x": 587, "40x": 587, "blendcnn": 587, "3878": 587, "3717": 587, "04x": 587, "camembert": 587, "188": 587, "91x": 587, "ctrl": 587, "deberta": 587, "124": 587, "81x": 587, "347": 587, "73x": 587, "382": 587, "198": 587, "flaubert": 587, "561": 587, "35": 587, "370": 587, "52x": 587, "hubert": 587, "84": 587, "36x": 587, "409": 587, "181": 587, "longform": 587, "28x": 587, "mbart": 587, "16x": 587, "639": 587, "490": 587, "31x": 587, "lvwerra": 587, "pegasu": 587, "samsum": 587, "19x": 587, "peleenet": 587, "419": 587, "316": 587, "resnet18": 587, "686": 587, "332": 587, "07x": 587, "611": 587, "333": 587, "83x": 587, "327": 587, "162": 587, "resnext101_32x8d": 587, "175": 587, "88x": 587, "197": 587, "99x": 587, "se_resnext50_32x4d": 587, "308": 587, "144": 587, "13x": 587, "squeezebert": 587, "186": 587, "155": 587, "78x": 587, "transfo": 587, "xl": 587, "37x": 587, "wave2vec2": 587, "60": 587, "58": 587, "21x": 587, "114": 587, "15x": 587, "yolo": 587, "29x": 587, "690": 587, "330": 587, "09x": 587, "614": 587, "334": 587, "84x": 587, "54x": 587, "410": 587, "168": 587, "resnext101_32x16d_wsl": 587, "1189": 587, "680": 587, "75x": 587, "677": 587, "381": 587, "59x": 587, "alexnet": 587, "960": 587, "469": 587, "05x": 587, "962": 587, "466": 587, "arcfac": 587, "235": 587, "130": 587, "294": 587, "34x": 587, "604": 587, "51": 587, "80x": 587, "caffenet": 587, "1501": 587, "536": 587, "1493": 587, "533": 587, "1372": 587, "485": 587, "541": 587, "480": 587, "1250": 587, "753": 587, "1130": 587, "748": 587, "emot": 587, "ferplu": 587, "336": 587, "65x": 587, "fcn": 587, "googlenet": 587, "740": 587, "587": 587, "770": 587, "567": 587, "824": 587, "601": 587, "819": 587, "597": 587, "45x": 587, "613": 587, "506": 587, "2454": 587, "1543": 587, "2164": 587, "1564": 587, "38x": 587, "2147": 587, "1046": 587, "1877": 587, "1054": 587, "mobilenetv2": 587, "2751": 587, "1797": 587, "2656": 587, "1835": 587, "7615": 587, "7646": 587, "764": 587, "901": 587, "434": 587, "141": 587, "7614": 587, "575": 587, "952": 587, "433": 587, "7226": 587, "7229": 587, "761": 587, "432": 587, "615": 587, "722": 587, "032": 587, "894": 587, "885": 587, "454": 587, "95x": 587, "603": 587, "455": 587, "644": 587, "636": 587, "254": 587, "791": 587, "shufflenet": 587, "2298": 587, "55": 587, "1480": 587, "55x": 587, "1951": 587, "1490": 587, "squeezenet": 587, "2588": 587, "1605": 587, "61x": 587, "2566": 587, "1936": 587, "725": 587, "570": 587, "27x": 587, "666": 587, "539": 587, "641": 587, "519": 587, "633": 587, "492": 587, "542": 587, "401": 587, "68x": 587, "tini": 587, "yolov3": 587, "648": 587, "518": 587, "221": 587, "319": 587, "307": 587, "30x": 587, "yolov4": 587, "zfnet": 587, "459": 587, "261": 587, "460": 587, "264": 587, "74x": 587, "441": 587, "337": 587, "272": 587, "211": 587, "152": 587, "423": 587, "180": 587, "311": 587, "69x": 587, "taskdataset": 587, "accuracyspars": 587, "ratiospars": 587, "commentsbalanc": 587, "unbalanc": 587, "classificationimagenet": 587, "76top": 587, "13top": 587, "magnitudepost": 587, "magnitudequant": 587, "answeringsquad": 587, "34f1": 587, "2x1": 587, "lassounbalanc": 587, "classificationmnli": 587, "mm": 587, "allbalanc": 587, "classificationsst": 587, "32accuraci": 587, "sensitivitybalanc": 587, "classificationqqp": 587, "classificationqnli": 587, "54accuraci": 587, "em": 587, "87f1": 587, "momentumunbalanc": 587, "momentumbalanc": 587, "classificationmrpc": 587, "52f1": 587, "61accuraci": 587, "7965": 587, "wideresnet40": 587, "9522": 587, "8178": 587, "0213": 587, "8235": 587, "027": 587, "5494": 587, "7153": 587, "5540": 587, "0046": 587, "5523": 587, "0029": 587, "vgg": 587, "7022": 587, "7415": 587, "7025": 587, "0003": 587, "6739": 587, "7399": 587, "6845": 587, "0106": 587, "7034": 587, "8382": 587, "bilstm": 587, "sst": 587, "8314": 587, "9403": 587, "9048": 587, "0734": 587, "7323": 587, "8256": 587, "8084": 587, "8814": 587, "7442": 587, "8371": 587, "0119": 587, "0115": 587, "tinybert": 587, "8018": 587, "8044": 587, "8363": 587, "8411": 587, "8025": 587, "8074": 587, "0007": 587, "0030": 587, "8626": 587, "8213": 587, "9091": 587, "8782": 587, "8684": 587, "8259": 587, "0058": 587, "distilroberta": 587, "6057": 587, "6455": 587, "6187": 587, "0130": 587, "c6i": 587, "2xlarg": 587, "c6a": 587, "c6g": 587, "a100cuda": 587}, "objects": {"": [[40, 0, 0, "-", "644ec953a7dc_pruning_support"], [41, 0, 0, "-", "6ece06672ed3_v1_14"], [42, 0, 0, "-", "6f0d0f71d92e_v1_13"], [43, 0, 0, "-", "9e89549a08c8_v1_11"], [44, 0, 0, "-", "block_mask"], [45, 0, 0, "-", "env"], [308, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[41, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [41, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[45, 1, 1, "", "run_migrations_offline"], [45, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[308, 2, 1, "", "Benchmark"], [308, 2, 1, "", "DistillationConfig"], [308, 2, 1, "", "WeightPruningConfig"], [47, 0, 0, "-", "adaptor"], [184, 0, 0, "-", "algorithm"], [186, 0, 0, "-", "benchmark"], [189, 0, 0, "-", "conf"], [191, 0, 0, "-", "config"], [192, 0, 0, "-", "contrib"], [217, 0, 0, "-", "data"], [266, 0, 0, "-", "experimental"], [315, 0, 0, "-", "metric"], [317, 0, 0, "-", "mix_precision"], [319, 0, 0, "-", "model"], [327, 0, 0, "-", "objective"], [329, 0, 0, "-", "pruner"], [343, 0, 0, "-", "quantization"], [308, 1, 1, "", "set_random_seed"], [308, 1, 1, "", "set_tensorboard"], [308, 1, 1, "", "set_workspace"], [350, 0, 0, "-", "strategy"], [359, 0, 0, "-", "training"], [363, 0, 0, "-", "utils"], [505, 0, 0, "-", "ux"], [551, 0, 0, "-", "version"]], "neural_compressor.Benchmark": [[308, 3, 1, "", "dataloader"], [308, 3, 1, "", "metric"], [308, 3, 1, "", "postprocess"]], "neural_compressor.adaptor": [[46, 0, 0, "-", "adaptor"], [48, 0, 0, "-", "keras"], [49, 0, 0, "-", "keras_utils"], [51, 0, 0, "-", "mxnet"], [52, 0, 0, "-", "mxnet_utils"], [54, 0, 0, "-", "onnxrt"], [56, 0, 0, "-", "ox_utils"], [79, 0, 0, "-", "pytorch"], [80, 0, 0, "-", "query"], [81, 0, 0, "-", "tensorflow"], [141, 0, 0, "-", "tf_utils"], [178, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[46, 2, 1, "", "Adaptor"], [46, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[46, 3, 1, "", "convert"], [46, 3, 1, "", "evaluate"], [46, 3, 1, "", "inspect_tensor"], [46, 3, 1, "", "quantize"], [46, 3, 1, "", "quantize_input"], [46, 3, 1, "", "query_fused_patterns"], [46, 3, 1, "", "query_fw_capability"], [46, 3, 1, "", "save"], [46, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[48, 2, 1, "", "KerasAdaptor"], [48, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[48, 3, 1, "", "convert"], [48, 3, 1, "", "evaluate"], [48, 3, 1, "", "get_optype_wise_ability"], [48, 3, 1, "", "inspect_tensor"], [48, 3, 1, "", "quantize"], [48, 3, 1, "", "quantize_input"], [48, 3, 1, "", "query_fw_capability"], [48, 3, 1, "", "save"], [48, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[48, 3, 1, "", "get_op_types"], [48, 3, 1, "", "get_op_types_by_precision"], [48, 3, 1, "", "get_precisions"], [48, 3, 1, "", "get_quantization_capability"], [48, 3, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[50, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[51, 2, 1, "", "MXNetQuery"], [51, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MXNetQuery": [[51, 3, 1, "", "get_fuse_patterns"], [51, 3, 1, "", "get_mixed_precision_combination"], [51, 3, 1, "", "get_op_types"], [51, 3, 1, "", "get_precisions"], [51, 3, 1, "", "get_quantization_capability"], [51, 3, 1, "", "get_version"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[51, 3, 1, "", "evaluate"], [51, 3, 1, "", "inspect_tensor"], [51, 3, 1, "", "quantize"], [51, 3, 1, "", "query_fw_capability"], [51, 3, 1, "", "recover_tuned_model"], [51, 3, 1, "", "save"], [51, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[53, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[53, 2, 1, "", "CalibCollector"], [53, 2, 1, "", "CollectorBase"], [53, 2, 1, "", "DataIterLoader"], [53, 2, 1, "", "DataLoaderWrap"], [53, 2, 1, "", "NameCollector"], [53, 2, 1, "", "OpType"], [53, 2, 1, "", "TensorCollector"], [53, 1, 1, "", "amp_convert"], [53, 1, 1, "", "calib_model"], [53, 1, 1, "", "check_mx_version"], [53, 1, 1, "", "combine_capabilities"], [53, 1, 1, "", "create_data_example"], [53, 1, 1, "", "distribute_calib_tensors"], [53, 1, 1, "", "ensure_list"], [53, 1, 1, "", "fuse"], [53, 1, 1, "", "get_framework_name"], [53, 1, 1, "", "is_model_quantized"], [53, 1, 1, "", "isiterable"], [53, 1, 1, "", "make_module"], [53, 1, 1, "", "make_nc_model"], [53, 1, 1, "", "make_symbol_block"], [53, 1, 1, "", "ndarray_to_device"], [53, 1, 1, "", "parse_tune_config"], [53, 1, 1, "", "prepare_dataloader"], [53, 1, 1, "", "prepare_model"], [53, 1, 1, "", "prepare_model_data"], [53, 1, 1, "", "quantize_sym_model"], [53, 1, 1, "", "query_quantizable_nodes"], [53, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.mxnet_utils.util.CalibCollector": [[53, 3, 1, "", "calc_kl_th_dict"], [53, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.CollectorBase": [[53, 3, 1, "", "collect_gluon"], [53, 3, 1, "", "collect_module"], [53, 3, 1, "", "post_batch"], [53, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.mxnet_utils.util.NameCollector": [[53, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.TensorCollector": [[53, 3, 1, "", "collect_gluon"], [53, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.onnxrt": [[54, 2, 1, "", "ONNXRTQuery"], [54, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [54, 2, 1, "", "ONNXRT_QDQAdaptor"], [54, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [54, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRTQuery": [[54, 3, 1, "", "get_graph_optimization"], [54, 3, 1, "", "get_op_types"], [54, 3, 1, "", "get_op_types_by_precision"], [54, 3, 1, "", "get_precisions"], [54, 3, 1, "", "get_quantization_capability"], [54, 3, 1, "", "get_version"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[54, 3, 1, "", "evaluate"], [54, 3, 1, "", "inspect_tensor"], [54, 3, 1, "", "quantize"], [54, 3, 1, "", "query_fw_capability"], [54, 3, 1, "", "recover"], [54, 3, 1, "", "save"], [54, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.ox_utils": [[55, 0, 0, "-", "calibration"], [68, 0, 0, "-", "operators"], [77, 0, 0, "-", "quantizer"], [78, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[55, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[55, 3, 1, "", "augment_graph"], [55, 3, 1, "", "calculate_quantization_params"], [55, 3, 1, "", "calculate_scale_zeropoint"], [55, 3, 1, "", "dump_calibration"], [55, 3, 1, "", "dump_minmax"], [55, 3, 1, "", "dump_tensor"], [55, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[57, 0, 0, "-", "activation"], [58, 0, 0, "-", "argmax"], [59, 0, 0, "-", "attention"], [60, 0, 0, "-", "binary_op"], [61, 0, 0, "-", "concat"], [62, 0, 0, "-", "conv"], [63, 0, 0, "-", "direct_q8"], [64, 0, 0, "-", "embed_layernorm"], [65, 0, 0, "-", "gather"], [66, 0, 0, "-", "gavgpool"], [67, 0, 0, "-", "gemm"], [69, 0, 0, "-", "lstm"], [70, 0, 0, "-", "matmul"], [71, 0, 0, "-", "maxpool"], [72, 0, 0, "-", "ops"], [73, 0, 0, "-", "pad"], [74, 0, 0, "-", "pooling"], [75, 0, 0, "-", "resize"], [76, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[57, 2, 1, "", "ActivationOperator"], [57, 2, 1, "", "QActivationOperator"], [57, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator": [[57, 3, 1, "", "convert"], [57, 3, 1, "", "convert_check"], [57, 3, 1, "", "quantize"], [57, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator": [[57, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator": [[57, 3, 1, "", "quantize"], [57, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[58, 2, 1, "", "ArgMaxOperator"], [58, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator": [[58, 3, 1, "", "convert"], [58, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[59, 2, 1, "", "AttentionOperator"], [59, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator": [[59, 3, 1, "", "convert"], [59, 3, 1, "", "convert_check"], [59, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator": [[59, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[60, 2, 1, "", "BinaryOperator"], [60, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator": [[60, 3, 1, "", "convert"], [60, 3, 1, "", "convert_check"], [60, 3, 1, "", "quantize"], [60, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator": [[60, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[61, 2, 1, "", "ConcatOperator"], [61, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator": [[61, 3, 1, "", "cast"], [61, 3, 1, "", "convert"], [61, 3, 1, "", "convert_check"], [61, 3, 1, "", "quantize"], [61, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator": [[61, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[62, 2, 1, "", "ConvOperator"], [62, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator": [[62, 3, 1, "", "convert"], [62, 3, 1, "", "convert_check"], [62, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator": [[62, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[63, 2, 1, "", "Direct8BitOperator"], [63, 2, 1, "", "DirectCastOperator"], [63, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator": [[63, 3, 1, "", "cast"], [63, 3, 1, "", "convert"], [63, 3, 1, "", "convert_check"], [63, 3, 1, "", "quantize"], [63, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator": [[63, 3, 1, "", "cast"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[64, 2, 1, "", "EmbedLayerNormalizationOperator"], [64, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator": [[64, 3, 1, "", "convert"], [64, 3, 1, "", "convert_check"], [64, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator": [[64, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[65, 2, 1, "", "GatherOperator"], [65, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator": [[65, 3, 1, "", "convert"], [65, 3, 1, "", "convert_check"], [65, 3, 1, "", "quantize"], [65, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[66, 2, 1, "", "GlobalAveragePoolOperator"], [66, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator": [[66, 3, 1, "", "convert"], [66, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator": [[66, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[67, 2, 1, "", "GemmOperator"], [67, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator": [[67, 3, 1, "", "convert"], [67, 3, 1, "", "convert_check"], [67, 3, 1, "", "quantize"], [67, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator": [[67, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[69, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator": [[69, 3, 1, "", "convert"], [69, 3, 1, "", "convert_check"], [69, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[70, 2, 1, "", "MatMulOperator"], [70, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator": [[70, 3, 1, "", "convert"], [70, 3, 1, "", "convert_check"], [70, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator": [[70, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[71, 2, 1, "", "MaxPoolOperator"], [71, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator": [[71, 3, 1, "", "convert"], [71, 3, 1, "", "convert_check"], [71, 3, 1, "", "quantize"], [71, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[72, 2, 1, "", "Operator"], [72, 2, 1, "", "QOperator"], [72, 1, 1, "", "op_registry"], [72, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.ops.Operator": [[72, 3, 1, "", "cast"], [72, 3, 1, "", "convert"], [72, 3, 1, "", "convert_check"], [72, 3, 1, "", "quantize"], [72, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops.QOperator": [[72, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[73, 2, 1, "", "PadOperator"], [73, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator": [[73, 3, 1, "", "convert"], [73, 3, 1, "", "convert_check"], [73, 3, 1, "", "quantize"], [73, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[74, 2, 1, "", "PoolOperator"], [74, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator": [[74, 3, 1, "", "convert"], [74, 3, 1, "", "convert_check"], [74, 3, 1, "", "quantize"], [74, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator": [[74, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[75, 2, 1, "", "QResizeOperator"], [75, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator": [[75, 3, 1, "", "convert"], [75, 3, 1, "", "convert_check"], [75, 3, 1, "", "quantize"], [75, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[76, 2, 1, "", "QSplitOperator"], [76, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator": [[76, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator": [[76, 3, 1, "", "cast"], [76, 3, 1, "", "convert"], [76, 3, 1, "", "convert_check"], [76, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.quantizer": [[77, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer.Quantizer": [[77, 3, 1, "", "check_opset_version"], [77, 3, 1, "", "convert_qdq_to_operator_oriented"], [77, 3, 1, "", "dequantize_tensor"], [77, 3, 1, "", "dtype_cast"], [77, 3, 1, "", "get_bias_add_nodes"], [77, 3, 1, "", "insert_qdq"], [77, 3, 1, "", "is_valid_quantize_weight"], [77, 3, 1, "", "merge_dedicated_qdq_pair"], [77, 3, 1, "", "quantize_bias"], [77, 3, 1, "", "quantize_bias_tensor"], [77, 3, 1, "", "quantize_inputs"], [77, 3, 1, "", "quantize_model"], [77, 3, 1, "", "quantize_outputs"], [77, 3, 1, "", "quantize_weight_per_channel"], [77, 3, 1, "", "quantize_weights_per_channel"], [77, 3, 1, "", "remove_redundant_pairs"], [77, 3, 1, "", "should_cast"], [77, 3, 1, "", "should_convert"], [77, 3, 1, "", "should_quantize"], [77, 3, 1, "", "tensor_proto_to_array"]], "neural_compressor.adaptor.ox_utils.util": [[78, 2, 1, "", "QuantFormat"], [78, 2, 1, "", "QuantType"], [78, 2, 1, "", "QuantizationMode"], [78, 2, 1, "", "QuantizedInitializer"], [78, 2, 1, "", "QuantizedValue"], [78, 2, 1, "", "QuantizedValueType"], [78, 2, 1, "", "ValueInfo"], [78, 1, 1, "", "attribute_to_kwarg"], [78, 1, 1, "", "calculate_scale_zp"], [78, 1, 1, "", "cast_tensor"], [78, 1, 1, "", "collate_preds"], [78, 1, 1, "", "dequantize_data"], [78, 1, 1, "", "dequantize_data_with_scale_zero"], [78, 1, 1, "", "dtype_to_name"], [78, 1, 1, "", "find_by_name"], [78, 1, 1, "", "is_B_transposed"], [78, 1, 1, "", "make_dquant_node"], [78, 1, 1, "", "make_quant_node"], [78, 1, 1, "", "quantize_data"], [78, 1, 1, "", "quantize_data_per_channel"], [78, 1, 1, "", "quantize_data_with_scale_zero"], [78, 1, 1, "", "quantize_nparray"], [78, 1, 1, "", "remove_init_from_model_input"], [78, 1, 1, "", "split_shared_bias"]], "neural_compressor.adaptor.pytorch": [[79, 2, 1, "", "PyTorchAdaptor"], [79, 2, 1, "", "PyTorchQuery"], [79, 2, 1, "", "PyTorch_FXAdaptor"], [79, 2, 1, "", "PyTorch_IPEXAdaptor"], [79, 2, 1, "", "TemplateAdaptor"], [79, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[79, 3, 1, "", "evaluate"], [79, 3, 1, "", "get_non_quant_modules"], [79, 3, 1, "", "inspect_tensor"], [79, 3, 1, "", "is_fused_child"], [79, 3, 1, "", "is_fused_op"], [79, 3, 1, "", "is_last_fused_child"], [79, 3, 1, "", "quantize"], [79, 3, 1, "", "query_fw_capability"], [79, 3, 1, "", "save"], [79, 3, 1, "", "set_tensor"], [79, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[79, 3, 1, "", "get_op_types"], [79, 3, 1, "", "get_op_types_by_precision"], [79, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[79, 3, 1, "", "calculate_op_sensitivity"], [79, 3, 1, "", "convert_sub_graph"], [79, 3, 1, "", "evaluate"], [79, 3, 1, "", "fuse_fx_model"], [79, 3, 1, "", "prepare_sub_graph"], [79, 3, 1, "", "quantize"], [79, 3, 1, "", "query_fw_capability"], [79, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[79, 3, 1, "", "evaluate"], [79, 3, 1, "", "inspect_tensor"], [79, 3, 1, "", "quantize"], [79, 3, 1, "", "query_fw_capability"], [79, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[79, 3, 1, "", "calculate_hessian_trace"], [79, 3, 1, "", "is_fused_module"]], "neural_compressor.adaptor.query": [[80, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[80, 3, 1, "", "get_fuse_patterns"], [80, 3, 1, "", "get_mixed_precision_combination"], [80, 3, 1, "", "get_op_types"], [80, 3, 1, "", "get_precisions"], [80, 3, 1, "", "get_quantization_capability"], [80, 3, 1, "", "get_version"], [80, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[81, 2, 1, "", "TensorFlowAdaptor"], [81, 2, 1, "", "TensorflowQuery"], [81, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[81, 3, 1, "", "calculate_op_sensitivity"], [81, 3, 1, "", "convert"], [81, 3, 1, "", "diagnosis_helper"], [81, 3, 1, "", "evaluate"], [81, 3, 1, "", "fused_node_mapping"], [81, 3, 1, "", "get_optype_wise_ability"], [81, 3, 1, "", "get_output_op_names"], [81, 3, 1, "", "inspect_activation"], [81, 3, 1, "", "inspect_tensor"], [81, 3, 1, "", "inspect_weight_and_bias"], [81, 3, 1, "", "qat_convert"], [81, 3, 1, "", "quantize"], [81, 3, 1, "", "quantize_input"], [81, 3, 1, "", "query_fw_capability"], [81, 3, 1, "", "recover_tuned_model"], [81, 3, 1, "", "save"], [81, 3, 1, "", "set_tensor"], [81, 3, 1, "", "train"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[81, 3, 1, "", "generate_internal_patterns"], [81, 3, 1, "", "get_bf16_patterns"], [81, 3, 1, "", "get_eightbit_patterns"], [81, 3, 1, "", "get_fuse_patterns"], [81, 3, 1, "", "get_grappler_optimization_cfg"], [81, 3, 1, "", "get_mixed_precision_combination"], [81, 3, 1, "", "get_op_types"], [81, 3, 1, "", "get_op_types_by_precision"], [81, 3, 1, "", "get_precisions"], [81, 3, 1, "", "get_quantization_capability"], [81, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[81, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[82, 0, 0, "-", "graph_converter"], [83, 0, 0, "-", "graph_converter_without_calib"], [122, 0, 0, "-", "graph_rewriter"], [140, 0, 0, "-", "graph_util"], [142, 0, 0, "-", "quantize_graph"], [169, 0, 0, "-", "quantize_graph_common"], [172, 0, 0, "-", "transform_graph"], [175, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[82, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter": [[82, 3, 1, "", "bf16_convert"], [82, 3, 1, "", "convert"], [82, 3, 1, "", "quantize"], [82, 3, 1, "", "quantize_with_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[83, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib": [[83, 3, 1, "", "bf16_convert"], [83, 3, 1, "", "convert_without_calib"], [83, 3, 1, "", "quantize_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[85, 0, 0, "-", "bf16"], [110, 0, 0, "-", "generic"], [121, 0, 0, "-", "graph_base"], [130, 0, 0, "-", "int8"], [136, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[84, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[84, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[84, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[86, 0, 0, "-", "convert_add_to_biasadd"], [87, 0, 0, "-", "convert_layout"], [88, 0, 0, "-", "convert_leakyrelu"], [89, 0, 0, "-", "convert_nan_to_random"], [90, 0, 0, "-", "convert_placeholder_to_const"], [91, 0, 0, "-", "dequantize_cast_optimizer"], [92, 0, 0, "-", "dilated_contraction"], [93, 0, 0, "-", "dummy_biasadd"], [94, 0, 0, "-", "expanddims_optimizer"], [95, 0, 0, "-", "fetch_weight_from_reshape"], [96, 0, 0, "-", "fold_batch_norm"], [97, 0, 0, "-", "fold_constant"], [98, 0, 0, "-", "fuse_biasadd_add"], [99, 0, 0, "-", "fuse_column_wise_mul"], [100, 0, 0, "-", "fuse_conv_with_math"], [101, 0, 0, "-", "fuse_decomposed_bn"], [102, 0, 0, "-", "fuse_decomposed_in"], [103, 0, 0, "-", "fuse_gelu"], [104, 0, 0, "-", "fuse_layer_norm"], [105, 0, 0, "-", "fuse_pad_with_conv"], [106, 0, 0, "-", "fuse_pad_with_fp32_conv"], [107, 0, 0, "-", "fuse_reshape_transpose"], [108, 0, 0, "-", "graph_cse_optimizer"], [109, 0, 0, "-", "grappler_pass"], [111, 0, 0, "-", "insert_print_node"], [112, 0, 0, "-", "move_squeeze_after_relu"], [113, 0, 0, "-", "pre_optimize"], [114, 0, 0, "-", "remove_training_nodes"], [115, 0, 0, "-", "rename_batch_norm"], [116, 0, 0, "-", "split_shared_input"], [117, 0, 0, "-", "strip_equivalent_nodes"], [118, 0, 0, "-", "strip_unused_nodes"], [119, 0, 0, "-", "switch_optimizer"], [120, 0, 0, "-", "update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[86, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[86, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[87, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[87, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[88, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[89, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[89, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[90, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[90, 3, 1, "", "do_transformation"], [90, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[91, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[91, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[92, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[92, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[93, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[93, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[94, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[94, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[95, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[95, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[96, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[96, 3, 1, "", "do_transformation"], [96, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[97, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[97, 3, 1, "", "check_all_folded"], [97, 3, 1, "", "check_const_inputs"], [97, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[98, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[98, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[99, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[99, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[100, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[100, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[101, 2, 1, "", "FuseDecomposedBNOptimizer"], [101, 1, 1, "", "bypass_reshape"], [101, 1, 1, "", "get_const_dim_count"], [101, 1, 1, "", "node_from_map"], [101, 1, 1, "", "node_name_from_input"], [101, 1, 1, "", "valid_reshape_inputs"], [101, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer": [[101, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[102, 2, 1, "", "FuseDecomposedINOptimizer"], [102, 1, 1, "", "bypass_reshape"], [102, 1, 1, "", "get_const_dim_count"], [102, 1, 1, "", "node_from_map"], [102, 1, 1, "", "node_name_from_input"], [102, 1, 1, "", "valid_reshape_inputs"], [102, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer": [[102, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[103, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[103, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[104, 2, 1, "", "FuseLayerNormOptimizer"], [104, 1, 1, "", "node_from_map"], [104, 1, 1, "", "node_name_from_input"], [104, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[104, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[105, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[105, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[106, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[106, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[107, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[107, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[108, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[108, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[109, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[109, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[111, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[111, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[112, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[112, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[113, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization": [[113, 3, 1, "", "get_excluded_node_names"], [113, 3, 1, "", "get_matched_nodes"], [113, 3, 1, "", "get_optimized_model"], [113, 3, 1, "", "has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[114, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[114, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[115, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[115, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[116, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[116, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[117, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[117, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[118, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[118, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[119, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[119, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[120, 2, 1, "", "UpdateEnterOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer": [[120, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[121, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[121, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[123, 0, 0, "-", "freeze_fake_quant"], [124, 0, 0, "-", "freeze_value"], [125, 0, 0, "-", "freeze_value_without_calib"], [126, 0, 0, "-", "fuse_conv_redundant_dequantize"], [127, 0, 0, "-", "fuse_conv_requantize"], [128, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [129, 0, 0, "-", "fuse_matmul_requantize"], [131, 0, 0, "-", "meta_op_optimizer"], [132, 0, 0, "-", "post_hostconst_converter"], [133, 0, 0, "-", "post_quantized_op_cse"], [134, 0, 0, "-", "rnn_convert"], [135, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[123, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[123, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[124, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[124, 3, 1, "", "do_transformation"], [124, 3, 1, "", "generate_output_graph"], [124, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[125, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[125, 3, 1, "", "do_transformation_without_calib"], [125, 3, 1, "", "generate_output_graph"], [125, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[126, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[126, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[127, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[127, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[128, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[128, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[129, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [129, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [129, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [129, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[129, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[129, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[129, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[129, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[131, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[131, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[132, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[132, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[133, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[133, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[134, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[134, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[135, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[135, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[137, 0, 0, "-", "insert_qdq_pattern"], [138, 0, 0, "-", "merge_duplicated_qdq"], [139, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[137, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[137, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[138, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[138, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[139, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[139, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[140, 2, 1, "", "GraphAnalyzer"], [140, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[140, 3, 1, "", "add_node"], [140, 3, 1, "", "dump_graph"], [140, 3, 1, "", "get_frame_info"], [140, 3, 1, "", "get_graph_input_output"], [140, 4, 1, "", "graph"], [140, 3, 1, "", "has_positive_input"], [140, 3, 1, "", "parse_graph"], [140, 3, 1, "", "query_fusion_pattern_nodes"], [140, 3, 1, "", "remove_node"], [140, 3, 1, "", "remove_node_with_single_input_output"], [140, 3, 1, "", "replace_const_node"], [140, 3, 1, "", "replace_constant_graph_with_constant_node"], [140, 3, 1, "", "replace_node"], [140, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[140, 3, 1, "", "analysis_rnn_model"], [140, 3, 1, "", "compare_node_attr"], [140, 3, 1, "", "create_constant_node"], [140, 3, 1, "", "create_node"], [140, 3, 1, "", "gen_valid_sampling_log"], [140, 3, 1, "", "generate_int32_bias_for_conv"], [140, 3, 1, "", "generate_int32_bias_for_matmul"], [140, 3, 1, "", "node_name_from_input"], [140, 3, 1, "", "set_attr_bool"], [140, 3, 1, "", "set_attr_dtype"], [140, 3, 1, "", "set_attr_float"], [140, 3, 1, "", "set_attr_int"], [140, 3, 1, "", "set_attr_int_list"], [140, 3, 1, "", "set_attr_string"], [140, 3, 1, "", "set_attr_string_list"], [140, 3, 1, "", "set_attr_tensor"], [140, 3, 1, "", "set_attr_type_list"], [140, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[144, 0, 0, "-", "qat"], [160, 0, 0, "-", "qdq"], [162, 0, 0, "-", "quantize_graph_base"], [163, 0, 0, "-", "quantize_graph_bn"], [164, 0, 0, "-", "quantize_graph_concatv2"], [165, 0, 0, "-", "quantize_graph_conv"], [166, 0, 0, "-", "quantize_graph_for_intel_cpu"], [167, 0, 0, "-", "quantize_graph_matmul"], [168, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[143, 0, 0, "-", "fake_quantize"], [145, 0, 0, "-", "quantize_config"], [146, 0, 0, "-", "quantize_helper"], [147, 0, 0, "-", "quantize_layers"], [152, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[143, 2, 1, "", "FakeQuantize"], [143, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[143, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[143, 3, 1, "", "from_config"], [143, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[145, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[145, 3, 1, "", "add_quantize_recipe"], [145, 3, 1, "", "clear_quantize_recipe"], [145, 3, 1, "", "get_quantize_recipe"], [145, 3, 1, "", "is_empty"], [145, 3, 1, "", "query_layer"], [145, 3, 1, "", "remove_layer"], [145, 3, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[146, 1, 1, "", "init_quantize_config"], [146, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[148, 0, 0, "-", "optimize_layer"], [149, 0, 0, "-", "quantize_layer_add"], [150, 0, 0, "-", "quantize_layer_base"], [151, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[148, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[149, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[150, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[151, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[152, 2, 1, "", "QuantizeWrapper"], [152, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[152, 3, 1, "", "build"], [152, 3, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[152, 3, 1, "", "build"], [152, 3, 1, "", "call"], [152, 3, 1, "", "compute_output_shape"], [152, 3, 1, "", "from_config"], [152, 3, 1, "", "get_config"], [152, 4, 1, "", "losses"], [152, 4, 1, "", "non_trainable_weights"], [152, 3, 1, "", "query_input_index"], [152, 4, 1, "", "trainable"], [152, 4, 1, "", "trainable_weights"], [152, 4, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[153, 0, 0, "-", "fuse_qdq_bn"], [154, 0, 0, "-", "fuse_qdq_concatv2"], [155, 0, 0, "-", "fuse_qdq_conv"], [156, 0, 0, "-", "fuse_qdq_deconv"], [157, 0, 0, "-", "fuse_qdq_in"], [158, 0, 0, "-", "fuse_qdq_matmul"], [159, 0, 0, "-", "fuse_qdq_pooling"], [161, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[153, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[153, 3, 1, "", "apply_newly_bn_leakyrelu_fusion"], [153, 3, 1, "", "apply_newly_bn_relu_fusion"], [153, 3, 1, "", "apply_the_transform"], [153, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[154, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[154, 3, 1, "", "apply_the_transform"], [154, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[155, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[155, 3, 1, "", "apply_conv3d_add_addn_fusion"], [155, 3, 1, "", "apply_conv3d_add_addn_relu_fusion"], [155, 3, 1, "", "apply_conv3d_add_fusion"], [155, 3, 1, "", "apply_conv3d_add_relu_fusion"], [155, 3, 1, "", "apply_conv3d_single_fusion"], [155, 3, 1, "", "apply_conv_biasadd_hardswish_fusion"], [155, 3, 1, "", "apply_newly_conv_biasadd_addn_fusion"], [155, 3, 1, "", "apply_newly_conv_biasadd_addn_relu_fusion"], [155, 3, 1, "", "apply_newly_conv_biasadd_fusion"], [155, 3, 1, "", "apply_newly_conv_biasadd_relu_fusion"], [155, 3, 1, "", "apply_newly_conv_biasadd_swishf32_fusion"], [155, 3, 1, "", "apply_newly_conv_single_fusion"], [155, 3, 1, "", "apply_the_transform"], [155, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[156, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[156, 3, 1, "", "apply_deconv2d_biasadd_fusion"], [156, 3, 1, "", "apply_deconv3d_biasadd_fusion"], [156, 3, 1, "", "apply_single_deconv2d_fusion"], [156, 3, 1, "", "apply_single_deconv3d_fusion"], [156, 3, 1, "", "apply_the_transform"], [156, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[157, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[157, 3, 1, "", "apply_newly_in_relu_fusion"], [157, 3, 1, "", "apply_the_transform"], [157, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[158, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[158, 3, 1, "", "apply_batchmatmulv2_fusion"], [158, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [158, 3, 1, "", "apply_matmul_biasadd_fusion"], [158, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [158, 3, 1, "", "apply_the_transform"], [158, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[159, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[159, 3, 1, "", "apply_the_transform"], [159, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[161, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[161, 3, 1, "", "do_transform"], [161, 3, 1, "", "get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[162, 2, 1, "", "QuantizeGraphBase"], [162, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[162, 3, 1, "", "do_transform"], [162, 3, 1, "", "register_transformer"], [162, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[162, 3, 1, "", "add_output_graph_node"], [162, 3, 1, "", "apply_the_transform"], [162, 3, 1, "", "create_nodes_map"], [162, 3, 1, "", "eightbitize_single_input_tensor_node"], [162, 3, 1, "", "get_longest_fuse"], [162, 3, 1, "", "remove_redundant_quantization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[163, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[163, 3, 1, "", "apply_newly_bn_leakyrelu_fusion"], [163, 3, 1, "", "apply_newly_bn_relu_fusion"], [163, 3, 1, "", "apply_the_transform"], [163, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[164, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[164, 3, 1, "", "apply_the_transform"], [164, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[165, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[165, 3, 1, "", "apply_conv_biasadd_addn_relu_fusion"], [165, 3, 1, "", "apply_conv_biasadd_fusion"], [165, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [165, 3, 1, "", "apply_conv_single_fusion"], [165, 3, 1, "", "apply_the_transform"], [165, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[166, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[166, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[167, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[167, 3, 1, "", "apply_matmul_biasadd_fusion"], [167, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [167, 3, 1, "", "apply_the_transform"], [167, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[168, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[168, 3, 1, "", "apply_the_transform"], [168, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[169, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[169, 3, 1, "", "copy_attr"], [169, 3, 1, "", "create_constant_node"], [169, 3, 1, "", "create_node"], [169, 3, 1, "", "ensure_tensor_name_has_port"], [169, 3, 1, "", "generate_quantized_weight_node"], [169, 3, 1, "", "get_sorted_graph"], [169, 3, 1, "", "node_name_from_input"], [169, 3, 1, "", "remove_training_nodes"], [169, 3, 1, "", "set_attr_bool"], [169, 3, 1, "", "set_attr_dtype"], [169, 3, 1, "", "set_attr_float"], [169, 3, 1, "", "set_attr_int"], [169, 3, 1, "", "set_attr_string"], [169, 3, 1, "", "set_attr_string_list"], [169, 3, 1, "", "set_attr_tensor"], [169, 3, 1, "", "set_attr_type_list"], [169, 3, 1, "", "split_shared_inputs"], [169, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[170, 0, 0, "-", "bias_correction"], [171, 0, 0, "-", "graph_transform_base"], [173, 0, 0, "-", "insert_logging"], [174, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[170, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[170, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[171, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase": [[171, 3, 1, "", "do_transformation"], [171, 3, 1, "", "generate_input_map"], [171, 3, 1, "", "get_node_name_from_input"], [171, 3, 1, "", "node_name_from_input"], [171, 3, 1, "", "parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[173, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[173, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[174, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[174, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[175, 1, 1, "", "collate_tf_preds"], [175, 1, 1, "", "disable_random"], [175, 1, 1, "", "fix_ref_type_of_graph_def"], [175, 1, 1, "", "generate_feed_dict"], [175, 1, 1, "", "get_estimator_graph"], [175, 1, 1, "", "get_graph_def"], [175, 1, 1, "", "get_input_output_node_names"], [175, 1, 1, "", "get_model_input_shape"], [175, 1, 1, "", "get_tensor_by_name"], [175, 1, 1, "", "get_tensor_val_from_graph_node"], [175, 1, 1, "", "int8_node_name_reverse"], [175, 1, 1, "", "is_ckpt_format"], [175, 1, 1, "", "is_saved_model_format"], [175, 1, 1, "", "iterator_sess_run"], [175, 1, 1, "", "read_graph"], [175, 1, 1, "", "strip_equivalent_nodes"], [175, 1, 1, "", "strip_unused_nodes"], [175, 1, 1, "", "tf_diagnosis_helper"], [175, 1, 1, "", "version1_eq_version2"], [175, 1, 1, "", "version1_gt_version2"], [175, 1, 1, "", "version1_gte_version2"], [175, 1, 1, "", "version1_lt_version2"], [175, 1, 1, "", "version1_lte_version2"], [175, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[176, 0, 0, "-", "bf16_convert"], [177, 0, 0, "-", "hawq_metric"], [179, 0, 0, "-", "onnx"], [180, 0, 0, "-", "symbolic_trace"], [181, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[177, 2, 1, "", "HessianTrace"], [177, 1, 1, "", "compare_weights"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[177, 3, 1, "", "get_act_gap"], [177, 3, 1, "", "get_avg_traces"], [177, 3, 1, "", "is_fused_module"], [177, 3, 1, "", "mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.util": [[181, 1, 1, "", "append_attr"], [181, 1, 1, "", "get_embedding_contiguous"], [181, 1, 1, "", "get_mse_order_per_fp32"], [181, 1, 1, "", "is_fused_module"]], "neural_compressor.algorithm": [[184, 2, 1, "", "ALGORITHMS"], [184, 2, 1, "", "Algorithm"], [184, 2, 1, "", "AlgorithmScheduler"], [182, 0, 0, "-", "algorithm"], [184, 1, 1, "", "algorithm_registry"], [183, 0, 0, "-", "fast_bias_correction"], [185, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.ALGORITHMS": [[184, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.AlgorithmScheduler": [[184, 4, 1, "", "adaptor"], [184, 4, 1, "", "calib_iter"], [184, 4, 1, "", "dataloader"], [184, 4, 1, "", "origin_model"], [184, 4, 1, "", "q_model"]], "neural_compressor.algorithm.algorithm": [[182, 2, 1, "", "ALGORITHMS"], [182, 2, 1, "", "Algorithm"], [182, 2, 1, "", "AlgorithmScheduler"], [182, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.algorithm.ALGORITHMS": [[182, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.algorithm.AlgorithmScheduler": [[182, 4, 1, "", "adaptor"], [182, 4, 1, "", "calib_iter"], [182, 4, 1, "", "dataloader"], [182, 4, 1, "", "origin_model"], [182, 4, 1, "", "q_model"]], "neural_compressor.algorithm.fast_bias_correction": [[183, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.weight_correction": [[185, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[186, 2, 1, "", "Benchmark"], [186, 1, 1, "", "fit"]], "neural_compressor.benchmark.Benchmark": [[186, 3, 1, "", "dataloader"], [186, 3, 1, "", "metric"], [186, 3, 1, "", "postprocess"]], "neural_compressor.conf": [[187, 0, 0, "-", "config"], [188, 0, 0, "-", "dotdict"], [190, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[187, 2, 1, "", "Benchmark_Conf"], [187, 2, 1, "", "Conf"], [187, 2, 1, "", "DefaultConf"], [187, 2, 1, "", "Distillation_Conf"], [187, 2, 1, "", "Graph_Optimization_Conf"], [187, 2, 1, "", "MixedPrecision_Conf"], [187, 2, 1, "", "NASConfig"], [187, 2, 1, "", "PrunerV2"], [187, 2, 1, "", "Pruning_Conf"], [187, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[188, 2, 1, "", "DotDict"], [188, 1, 1, "", "deep_get"], [188, 1, 1, "", "deep_set"]], "neural_compressor.config": [[191, 2, 1, "", "DistillationConfig"], [191, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[193, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[194, 0, 0, "-", "sigopt"], [195, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[194, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[194, 3, 1, "", "create_exp"], [194, 3, 1, "", "get_acc_target"], [194, 3, 1, "", "next_tune_cfg"], [194, 3, 1, "", "params_to_tune_configs"], [194, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[195, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[195, 3, 1, "", "add_loss_to_tuned_history_and_find_best"], [195, 3, 1, "", "calculate_loss"], [195, 3, 1, "", "object_evaluation"], [195, 3, 1, "", "stop"], [195, 3, 1, "", "traverse"]], "neural_compressor.data": [[217, 2, 1, "", "BaseTransform"], [217, 2, 1, "", "DataLoader"], [217, 2, 1, "", "Dataset"], [217, 2, 1, "", "Datasets"], [217, 2, 1, "", "FILTERS"], [217, 2, 1, "", "Filter"], [217, 2, 1, "", "IterableDataset"], [217, 2, 1, "", "Postprocess"], [217, 2, 1, "", "TRANSFORMS"], [200, 0, 0, "-", "dataloaders"], [217, 1, 1, "", "dataset_registry"], [212, 0, 0, "-", "datasets"], [217, 1, 1, "", "filter_registry"], [216, 0, 0, "-", "filters"], [217, 1, 1, "", "transform_registry"], [220, 0, 0, "-", "transforms"]], "neural_compressor.data.TRANSFORMS": [[217, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[200, 2, 1, "", "DataLoader"], [196, 0, 0, "-", "base_dataloader"], [197, 0, 0, "-", "dataloader"], [198, 0, 0, "-", "default_dataloader"], [199, 0, 0, "-", "fetcher"], [201, 0, 0, "-", "mxnet_dataloader"], [202, 0, 0, "-", "onnxrt_dataloader"], [203, 0, 0, "-", "pytorch_dataloader"], [204, 0, 0, "-", "sampler"], [205, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[196, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[196, 3, 1, "", "batch"], [196, 4, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[197, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[198, 2, 1, "", "DefaultDataLoader"], [198, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[198, 3, 1, "", "batch"], [198, 4, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[199, 2, 1, "", "Fetcher"], [199, 2, 1, "", "IndexFetcher"], [199, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[201, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[202, 2, 1, "", "ONNXRTBertDataLoader"], [202, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[203, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[204, 2, 1, "", "BatchSampler"], [204, 2, 1, "", "IterableSampler"], [204, 2, 1, "", "Sampler"], [204, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[205, 2, 1, "", "TFDataDataLoader"], [205, 2, 1, "", "TensorflowBertDataLoader"], [205, 2, 1, "", "TensorflowDataLoader"], [205, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[205, 3, 1, "", "batch"]], "neural_compressor.data.datasets": [[212, 2, 1, "", "Dataset"], [212, 2, 1, "", "Datasets"], [212, 2, 1, "", "IterableDataset"], [206, 0, 0, "-", "bert_dataset"], [207, 0, 0, "-", "coco_dataset"], [208, 0, 0, "-", "dataset"], [212, 1, 1, "", "dataset_registry"], [209, 0, 0, "-", "dummy_dataset"], [210, 0, 0, "-", "dummy_dataset_v2"], [211, 0, 0, "-", "imagenet_dataset"], [213, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[206, 2, 1, "", "InputFeatures"], [206, 2, 1, "", "ONNXRTBertDataset"], [206, 2, 1, "", "ParseDecodeBert"], [206, 2, 1, "", "PytorchBertDataset"], [206, 2, 1, "", "TensorflowBertDataset"], [206, 2, 1, "", "TensorflowModelZooBertDataset"], [206, 1, 1, "", "convert_examples_to_features"], [206, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[206, 3, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[207, 2, 1, "", "COCONpy"], [207, 2, 1, "", "COCORaw"], [207, 2, 1, "", "COCORecordDataset"], [207, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[208, 2, 1, "", "CIFAR10"], [208, 2, 1, "", "CIFAR100"], [208, 2, 1, "", "Dataset"], [208, 2, 1, "", "Datasets"], [208, 2, 1, "", "FashionMNIST"], [208, 2, 1, "", "ImageFolder"], [208, 2, 1, "", "IterableDataset"], [208, 2, 1, "", "MNIST"], [208, 2, 1, "", "MXNetCIFAR10"], [208, 2, 1, "", "MXNetCIFAR100"], [208, 2, 1, "", "MXNetDatasets"], [208, 2, 1, "", "MXNetFashionMNIST"], [208, 2, 1, "", "MXNetImageFolder"], [208, 2, 1, "", "MXNetMNIST"], [208, 2, 1, "", "ONNXRTITDatasets"], [208, 2, 1, "", "ONNXRTQLDatasets"], [208, 2, 1, "", "PyTorchDatasets"], [208, 2, 1, "", "PytorchCIFAR10"], [208, 2, 1, "", "PytorchCIFAR100"], [208, 2, 1, "", "PytorchFashionMNIST"], [208, 2, 1, "", "PytorchMNIST"], [208, 2, 1, "", "PytorchMxnetWrapDataset"], [208, 2, 1, "", "PytorchMxnetWrapFunction"], [208, 2, 1, "", "TensorflowCIFAR10"], [208, 2, 1, "", "TensorflowCIFAR100"], [208, 2, 1, "", "TensorflowDatasets"], [208, 2, 1, "", "TensorflowFashionMNIST"], [208, 2, 1, "", "TensorflowImageFolder"], [208, 2, 1, "", "TensorflowImageRecord"], [208, 2, 1, "", "TensorflowMNIST"], [208, 2, 1, "", "TensorflowTFRecordDataset"], [208, 2, 1, "", "TensorflowVOCRecord"], [208, 1, 1, "", "calculate_md5"], [208, 1, 1, "", "check_integrity"], [208, 1, 1, "", "dataset_registry"], [208, 1, 1, "", "download_url"], [208, 5, 1, "", "framework_datasets"], [208, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[208, 3, 1, "", "download"], [208, 3, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[208, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[208, 4, 1, "", "class_to_idx"], [208, 3, 1, "", "download"], [208, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[209, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[210, 2, 1, "", "DummyDataset"], [210, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[211, 2, 1, "", "ImagenetRaw"], [211, 2, 1, "", "MXNetImagenetRaw"], [211, 2, 1, "", "ONNXRTImagenetDataset"], [211, 2, 1, "", "PytorchImagenetRaw"], [211, 2, 1, "", "TensorflowImagenetDataset"], [211, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[213, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[216, 2, 1, "", "FILTERS"], [216, 2, 1, "", "Filter"], [214, 0, 0, "-", "coco_filter"], [215, 0, 0, "-", "filter"], [216, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[214, 2, 1, "", "LabelBalanceCOCORawFilter"], [214, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[215, 2, 1, "", "FILTERS"], [215, 2, 1, "", "Filter"], [215, 2, 1, "", "MXNetFilters"], [215, 2, 1, "", "ONNXRTITFilters"], [215, 2, 1, "", "ONNXRTQLFilters"], [215, 2, 1, "", "PyTorchFilters"], [215, 2, 1, "", "TensorflowFilters"], [215, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[220, 2, 1, "", "BaseTransform"], [220, 2, 1, "", "Postprocess"], [220, 2, 1, "", "TRANSFORMS"], [218, 0, 0, "-", "coco_transform"], [219, 0, 0, "-", "imagenet_transform"], [221, 0, 0, "-", "postprocess"], [222, 0, 0, "-", "tokenization"], [223, 0, 0, "-", "transform"], [220, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TRANSFORMS": [[220, 3, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[218, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[219, 2, 1, "", "BilinearImagenetTransform"], [219, 2, 1, "", "LabelShift"], [219, 2, 1, "", "ONNXResizeCropImagenetTransform"], [219, 2, 1, "", "OnnxBilinearImagenetTransform"], [219, 2, 1, "", "ParseDecodeImagenet"], [219, 2, 1, "", "ParseDecodeImagenetTransform"], [219, 2, 1, "", "QuantizedInput"], [219, 2, 1, "", "ResizeWithAspectRatio"], [219, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[221, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[222, 2, 1, "", "BasicTokenizer"], [222, 2, 1, "", "FullTokenizer"], [222, 2, 1, "", "WordpieceTokenizer"], [222, 1, 1, "", "convert_by_vocab"], [222, 1, 1, "", "convert_to_unicode"], [222, 1, 1, "", "load_vocab"], [222, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[222, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[222, 3, 1, "", "convert_ids_to_tokens"], [222, 3, 1, "", "convert_tokens_to_ids"], [222, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[222, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[223, 2, 1, "", "AlignImageChannelTransform"], [223, 2, 1, "", "BaseTransform"], [223, 2, 1, "", "CastONNXTransform"], [223, 2, 1, "", "CastPyTorchTransform"], [223, 2, 1, "", "CastTFTransform"], [223, 2, 1, "", "CenterCropTFTransform"], [223, 2, 1, "", "CenterCropTransform"], [223, 2, 1, "", "CollectTransform"], [223, 2, 1, "", "ComposeTransform"], [223, 2, 1, "", "CropResizeTFTransform"], [223, 2, 1, "", "CropResizeTransform"], [223, 2, 1, "", "CropToBoundingBox"], [223, 2, 1, "", "InputFeatures"], [223, 2, 1, "", "MXNetCropResizeTransform"], [223, 2, 1, "", "MXNetCropToBoundingBox"], [223, 2, 1, "", "MXNetNormalizeTransform"], [223, 2, 1, "", "MXNetTransforms"], [223, 2, 1, "", "MXNetTranspose"], [223, 2, 1, "", "NormalizeTFTransform"], [223, 2, 1, "", "NormalizeTransform"], [223, 2, 1, "", "ONNXRTCropToBoundingBox"], [223, 2, 1, "", "ONNXRTITTransforms"], [223, 2, 1, "", "ONNXRTQLTransforms"], [223, 2, 1, "", "PaddedCenterCropTransform"], [223, 2, 1, "", "ParseDecodeVocTransform"], [223, 2, 1, "", "PyTorchAlignImageChannel"], [223, 2, 1, "", "PyTorchCropResizeTransform"], [223, 2, 1, "", "PyTorchNormalizeTransform"], [223, 2, 1, "", "PyTorchTransforms"], [223, 2, 1, "", "PyTorchTranspose"], [223, 2, 1, "", "PytorchMxnetTransform"], [223, 2, 1, "", "PytorchMxnetWrapFunction"], [223, 2, 1, "", "RandomCropTFTransform"], [223, 2, 1, "", "RandomCropTransform"], [223, 2, 1, "", "RandomHorizontalFlip"], [223, 2, 1, "", "RandomResizedCropMXNetTransform"], [223, 2, 1, "", "RandomResizedCropPytorchTransform"], [223, 2, 1, "", "RandomResizedCropTFTransform"], [223, 2, 1, "", "RandomResizedCropTransform"], [223, 2, 1, "", "RandomVerticalFlip"], [223, 2, 1, "", "RescaleKerasPretrainTransform"], [223, 2, 1, "", "RescaleTFTransform"], [223, 2, 1, "", "RescaleTransform"], [223, 2, 1, "", "ResizeMXNetTransform"], [223, 2, 1, "", "ResizePytorchTransform"], [223, 2, 1, "", "ResizeTFTransform"], [223, 2, 1, "", "ResizeTransform"], [223, 2, 1, "", "ResizeWithRatio"], [223, 2, 1, "", "SquadExample"], [223, 2, 1, "", "TFModelZooCollectTransform"], [223, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [223, 2, 1, "", "TFSquadV1PostTransform"], [223, 2, 1, "", "TRANSFORMS"], [223, 2, 1, "", "TensorflowCropToBoundingBox"], [223, 2, 1, "", "TensorflowRandomHorizontalFlip"], [223, 2, 1, "", "TensorflowRandomVerticalFlip"], [223, 2, 1, "", "TensorflowResizeWithRatio"], [223, 2, 1, "", "TensorflowTransform"], [223, 2, 1, "", "TensorflowTransforms"], [223, 2, 1, "", "TensorflowTranspose"], [223, 2, 1, "", "TensorflowWrapFunction"], [223, 2, 1, "", "ToArray"], [223, 2, 1, "", "ToNDArrayTransform"], [223, 2, 1, "", "Transforms"], [223, 2, 1, "", "Transpose"], [223, 1, 1, "", "convert_examples_to_features"], [223, 1, 1, "", "get_final_text"], [223, 1, 1, "", "get_torchvision_map"], [223, 1, 1, "", "read_squad_examples"], [223, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[223, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[223, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[223, 3, 1, "", "get_postprocess_result"], [223, 3, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[223, 3, 1, "", "register"]], "neural_compressor.experimental": [[266, 2, 1, "", "Benchmark"], [266, 2, 1, "", "Component"], [266, 2, 1, "", "Distillation"], [266, 2, 1, "", "Graph_Optimization"], [266, 2, 1, "", "MixedPrecision"], [266, 2, 1, "", "ModelConversion"], [266, 2, 1, "", "NAS"], [266, 2, 1, "", "Pruning"], [266, 2, 1, "", "Quantization"], [224, 0, 0, "-", "benchmark"], [227, 0, 0, "-", "common"], [233, 0, 0, "-", "component"], [255, 0, 0, "-", "data"], [260, 0, 0, "-", "distillation"], [261, 0, 0, "-", "export"], [265, 0, 0, "-", "graph_optimization"], [273, 0, 0, "-", "metric"], [275, 0, 0, "-", "mixed_precision"], [276, 0, 0, "-", "model_conversion"], [289, 0, 0, "-", "nas"], [293, 0, 0, "-", "pruning"], [294, 0, 0, "-", "pruning_recipes"], [298, 0, 0, "-", "pruning_v2"], [299, 0, 0, "-", "pytorch_pruner"], [306, 0, 0, "-", "quantization"], [307, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[266, 4, 1, "", "b_dataloader"], [266, 4, 1, "", "b_func"], [266, 3, 1, "", "config_instance"], [266, 3, 1, "", "generate_prefix"], [266, 4, 1, "", "metric"], [266, 4, 1, "", "model"], [266, 4, 1, "", "postprocess"], [266, 4, 1, "", "results"], [266, 3, 1, "", "run_instance"], [266, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[266, 4, 1, "", "eval_dataloader"], [266, 4, 1, "", "eval_func"], [266, 3, 1, "", "execute"], [266, 4, 1, "", "model"], [266, 3, 1, "", "on_after_compute_loss"], [266, 3, 1, "", "on_after_eval"], [266, 3, 1, "", "on_after_optimizer_step"], [266, 3, 1, "", "on_batch_begin"], [266, 3, 1, "", "on_batch_end"], [266, 3, 1, "", "on_before_eval"], [266, 3, 1, "", "on_before_optimizer_step"], [266, 3, 1, "", "on_epoch_begin"], [266, 3, 1, "", "on_epoch_end"], [266, 3, 1, "", "on_post_grad"], [266, 3, 1, "", "on_step_begin"], [266, 3, 1, "", "on_step_end"], [266, 3, 1, "", "on_train_begin"], [266, 3, 1, "", "on_train_end"], [266, 3, 1, "", "post_epoch_end"], [266, 3, 1, "", "post_process"], [266, 3, 1, "", "pre_epoch_begin"], [266, 3, 1, "", "pre_process"], [266, 3, 1, "", "prepare"], [266, 3, 1, "", "prepare_qat"], [266, 3, 1, "", "register_hook"], [266, 4, 1, "", "train_dataloader"], [266, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[266, 6, 1, "", "_epoch_ran"], [266, 6, 1, "", "best_model"], [266, 6, 1, "", "best_score"], [266, 3, 1, "", "create_criterion"], [266, 3, 1, "", "create_optimizer"], [266, 4, 1, "", "criterion"], [266, 6, 1, "", "eval_frequency"], [266, 4, 1, "", "evaluation_distributed"], [266, 3, 1, "", "execute"], [266, 3, 1, "", "generate_hooks"], [266, 3, 1, "", "init_train_cfg"], [266, 3, 1, "", "on_post_forward"], [266, 4, 1, "", "optimizer"], [266, 3, 1, "", "pre_process"], [266, 3, 1, "", "prepare"], [266, 4, 1, "", "student_model"], [266, 4, 1, "", "teacher_model"], [266, 4, 1, "", "train_cfg"], [266, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[266, 3, 1, "", "dataset"], [266, 4, 1, "", "eval_dataloader"], [266, 4, 1, "", "eval_func"], [266, 4, 1, "", "input"], [266, 4, 1, "", "metric"], [266, 4, 1, "", "model"], [266, 4, 1, "", "output"], [266, 4, 1, "", "postprocess"], [266, 4, 1, "", "precisions"], [266, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[266, 4, 1, "", "precisions"], [266, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[266, 3, 1, "", "dataset"], [266, 4, 1, "", "destination"], [266, 4, 1, "", "eval_dataloader"], [266, 4, 1, "", "eval_func"], [266, 4, 1, "", "metric"], [266, 4, 1, "", "model"], [266, 4, 1, "", "postprocess"], [266, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[266, 6, 1, "", "conf"], [266, 4, 1, "", "evaluation_distributed"], [266, 3, 1, "", "execute"], [266, 3, 1, "", "generate_hooks"], [266, 3, 1, "", "generate_pruners"], [266, 3, 1, "", "get_sparsity_ratio"], [266, 3, 1, "", "pre_process"], [266, 3, 1, "", "prepare"], [266, 6, 1, "", "pruners"], [266, 4, 1, "", "pruning_func"], [266, 4, 1, "", "train_distributed"], [266, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.Quantization": [[266, 4, 1, "", "calib_dataloader"], [266, 3, 1, "", "dataset"], [266, 3, 1, "", "execute"], [266, 4, 1, "", "metric"], [266, 4, 1, "", "model"], [266, 4, 1, "", "objective"], [266, 4, 1, "", "postprocess"], [266, 3, 1, "", "pre_process"], [266, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[224, 2, 1, "", "Benchmark"], [224, 1, 1, "", "get_architecture"], [224, 1, 1, "", "get_bounded_threads"], [224, 1, 1, "", "get_core_ids"], [224, 1, 1, "", "get_physical_ids"], [224, 1, 1, "", "get_threads"], [224, 1, 1, "", "get_threads_per_core"], [224, 1, 1, "", "set_all_env_var"], [224, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[224, 4, 1, "", "b_dataloader"], [224, 4, 1, "", "b_func"], [224, 3, 1, "", "config_instance"], [224, 3, 1, "", "generate_prefix"], [224, 4, 1, "", "metric"], [224, 4, 1, "", "model"], [224, 4, 1, "", "postprocess"], [224, 4, 1, "", "results"], [224, 3, 1, "", "run_instance"], [224, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[227, 2, 1, "", "DataLoader"], [227, 2, 1, "", "Metric"], [227, 2, 1, "", "Model"], [227, 2, 1, "", "Postprocess"], [225, 0, 0, "-", "criterion"], [226, 0, 0, "-", "dataloader"], [228, 0, 0, "-", "metric"], [229, 0, 0, "-", "model"], [230, 0, 0, "-", "optimizer"], [231, 0, 0, "-", "postprocess"], [232, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[225, 2, 1, "", "Criterions"], [225, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [225, 2, 1, "", "KnowledgeDistillationFramework"], [225, 2, 1, "", "KnowledgeDistillationLoss"], [225, 2, 1, "", "PyTorchCriterions"], [225, 2, 1, "", "PyTorchCrossEntropyLoss"], [225, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [225, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [225, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [225, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [225, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [225, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [225, 2, 1, "", "SelfKnowledgeDistillationLoss"], [225, 2, 1, "", "TensorFlowCrossEntropyLoss"], [225, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [225, 2, 1, "", "TensorflowCriterions"], [225, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [225, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [225, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [225, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[225, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[225, 3, 1, "", "clear_features"], [225, 3, 1, "", "init_feature_matcher"], [225, 3, 1, "", "init_loss_funcs"], [225, 3, 1, "", "loss_cal"], [225, 3, 1, "", "loss_cal_sloss"], [225, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[225, 4, 1, "", "student_model"], [225, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[225, 3, 1, "", "loss_cal"], [225, 3, 1, "", "loss_cal_sloss"], [225, 3, 1, "", "student_targets_loss_cal"], [225, 3, 1, "", "teacher_model_forward"], [225, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[225, 3, 1, "", "init_feature_matcher"], [225, 3, 1, "", "init_loss_funcs"], [225, 3, 1, "", "loss_cal"], [225, 3, 1, "", "loss_cal_sloss"], [225, 3, 1, "", "register_hooks_for_models"], [225, 3, 1, "", "remove_all_hooks"], [225, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[225, 3, 1, "", "KullbackLeiblerDivergence"], [225, 3, 1, "", "SoftCrossEntropy"], [225, 3, 1, "", "student_targets_loss_cal"], [225, 3, 1, "", "teacher_model_forward"], [225, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[225, 3, 1, "", "KullbackLeiblerDivergence"], [225, 3, 1, "", "L2Divergence"], [225, 3, 1, "", "SoftCrossEntropy"], [225, 3, 1, "", "init_loss_funcs"], [225, 3, 1, "", "loss_cal"], [225, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[225, 3, 1, "", "init_loss_funcs"], [225, 3, 1, "", "loss_cal"], [225, 3, 1, "", "loss_cal_sloss"], [225, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[225, 3, 1, "", "SoftCrossEntropy"], [225, 3, 1, "", "student_targets_loss_cal"], [225, 3, 1, "", "teacher_model_forward"], [225, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[225, 3, 1, "", "student_targets_loss_cal"], [225, 3, 1, "", "teacher_model_forward"], [225, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[226, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[228, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[229, 2, 1, "", "Model"]], "neural_compressor.experimental.common.optimizer": [[230, 2, 1, "", "Optimizers"], [230, 2, 1, "", "PyTorchOptimizers"], [230, 2, 1, "", "PyTorchSGD"], [230, 2, 1, "", "TensorFlowAdam"], [230, 2, 1, "", "TensorFlowAdamW"], [230, 2, 1, "", "TensorFlowSGD"], [230, 2, 1, "", "TensorflowOptimizers"], [230, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[230, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[231, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[232, 1, 1, "", "get_activation"], [232, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[233, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[233, 4, 1, "", "eval_dataloader"], [233, 4, 1, "", "eval_func"], [233, 3, 1, "", "execute"], [233, 4, 1, "", "model"], [233, 3, 1, "", "on_after_compute_loss"], [233, 3, 1, "", "on_after_eval"], [233, 3, 1, "", "on_after_optimizer_step"], [233, 3, 1, "", "on_batch_begin"], [233, 3, 1, "", "on_batch_end"], [233, 3, 1, "", "on_before_eval"], [233, 3, 1, "", "on_before_optimizer_step"], [233, 3, 1, "", "on_epoch_begin"], [233, 3, 1, "", "on_epoch_end"], [233, 3, 1, "", "on_post_grad"], [233, 3, 1, "", "on_step_begin"], [233, 3, 1, "", "on_step_end"], [233, 3, 1, "", "on_train_begin"], [233, 3, 1, "", "on_train_end"], [233, 3, 1, "", "post_epoch_end"], [233, 3, 1, "", "post_process"], [233, 3, 1, "", "pre_epoch_begin"], [233, 3, 1, "", "pre_process"], [233, 3, 1, "", "prepare"], [233, 3, 1, "", "prepare_qat"], [233, 3, 1, "", "register_hook"], [233, 4, 1, "", "train_dataloader"], [233, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[255, 2, 1, "", "BaseTransform"], [255, 2, 1, "", "Dataset"], [255, 2, 1, "", "Datasets"], [255, 2, 1, "", "FILTERS"], [255, 2, 1, "", "Filter"], [255, 2, 1, "", "IterableDataset"], [255, 2, 1, "", "TRANSFORMS"], [238, 0, 0, "-", "dataloaders"], [255, 1, 1, "", "dataset_registry"], [250, 0, 0, "-", "datasets"], [255, 1, 1, "", "filter_registry"], [254, 0, 0, "-", "filters"], [255, 1, 1, "", "transform_registry"], [257, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[255, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[234, 0, 0, "-", "base_dataloader"], [235, 0, 0, "-", "dataloader"], [236, 0, 0, "-", "default_dataloader"], [237, 0, 0, "-", "fetcher"], [239, 0, 0, "-", "mxnet_dataloader"], [240, 0, 0, "-", "onnxrt_dataloader"], [241, 0, 0, "-", "pytorch_dataloader"], [242, 0, 0, "-", "sampler"], [243, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[234, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[234, 3, 1, "", "batch"], [234, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[236, 2, 1, "", "DefaultDataLoader"], [236, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[236, 3, 1, "", "batch"], [236, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[237, 2, 1, "", "Fetcher"], [237, 2, 1, "", "IndexFetcher"], [237, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[239, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[240, 2, 1, "", "ONNXRTBertDataLoader"], [240, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[241, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[242, 2, 1, "", "BatchSampler"], [242, 2, 1, "", "IterableSampler"], [242, 2, 1, "", "Sampler"], [242, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[243, 2, 1, "", "TFDataDataLoader"], [243, 2, 1, "", "TensorflowBertDataLoader"], [243, 2, 1, "", "TensorflowDataLoader"], [243, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[243, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[250, 2, 1, "", "Dataset"], [250, 2, 1, "", "Datasets"], [250, 2, 1, "", "IterableDataset"], [244, 0, 0, "-", "bert_dataset"], [245, 0, 0, "-", "coco_dataset"], [246, 0, 0, "-", "dataset"], [250, 1, 1, "", "dataset_registry"], [247, 0, 0, "-", "dummy_dataset"], [248, 0, 0, "-", "dummy_dataset_v2"], [249, 0, 0, "-", "imagenet_dataset"], [251, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[244, 2, 1, "", "InputFeatures"], [244, 2, 1, "", "ONNXRTBertDataset"], [244, 2, 1, "", "ParseDecodeBert"], [244, 2, 1, "", "PytorchBertDataset"], [244, 2, 1, "", "TensorflowBertDataset"], [244, 2, 1, "", "TensorflowModelZooBertDataset"], [244, 1, 1, "", "convert_examples_to_features"], [244, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[244, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[245, 2, 1, "", "COCONpy"], [245, 2, 1, "", "COCORaw"], [245, 2, 1, "", "COCORecordDataset"], [245, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[246, 2, 1, "", "CIFAR10"], [246, 2, 1, "", "CIFAR100"], [246, 2, 1, "", "Dataset"], [246, 2, 1, "", "Datasets"], [246, 2, 1, "", "FashionMNIST"], [246, 2, 1, "", "ImageFolder"], [246, 2, 1, "", "IterableDataset"], [246, 2, 1, "", "MNIST"], [246, 2, 1, "", "MXNetCIFAR10"], [246, 2, 1, "", "MXNetCIFAR100"], [246, 2, 1, "", "MXNetDatasets"], [246, 2, 1, "", "MXNetFashionMNIST"], [246, 2, 1, "", "MXNetImageFolder"], [246, 2, 1, "", "MXNetMNIST"], [246, 2, 1, "", "ONNXRTITDatasets"], [246, 2, 1, "", "ONNXRTQLDatasets"], [246, 2, 1, "", "PyTorchDatasets"], [246, 2, 1, "", "PytorchCIFAR10"], [246, 2, 1, "", "PytorchCIFAR100"], [246, 2, 1, "", "PytorchFashionMNIST"], [246, 2, 1, "", "PytorchMNIST"], [246, 2, 1, "", "PytorchMxnetWrapDataset"], [246, 2, 1, "", "PytorchMxnetWrapFunction"], [246, 2, 1, "", "TensorflowCIFAR10"], [246, 2, 1, "", "TensorflowCIFAR100"], [246, 2, 1, "", "TensorflowDatasets"], [246, 2, 1, "", "TensorflowFashionMNIST"], [246, 2, 1, "", "TensorflowImageFolder"], [246, 2, 1, "", "TensorflowImageRecord"], [246, 2, 1, "", "TensorflowMNIST"], [246, 2, 1, "", "TensorflowTFRecordDataset"], [246, 2, 1, "", "TensorflowVOCRecord"], [246, 1, 1, "", "calculate_md5"], [246, 1, 1, "", "check_integrity"], [246, 1, 1, "", "dataset_registry"], [246, 1, 1, "", "download_url"], [246, 5, 1, "", "framework_datasets"], [246, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[246, 3, 1, "", "download"], [246, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[246, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[246, 4, 1, "", "class_to_idx"], [246, 3, 1, "", "download"], [246, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[247, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[248, 2, 1, "", "DummyDataset"], [248, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[249, 2, 1, "", "ImagenetRaw"], [249, 2, 1, "", "MXNetImagenetRaw"], [249, 2, 1, "", "ONNXRTImagenetDataset"], [249, 2, 1, "", "PytorchImagenetRaw"], [249, 2, 1, "", "TensorflowImagenetDataset"], [249, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[251, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[254, 2, 1, "", "FILTERS"], [254, 2, 1, "", "Filter"], [252, 0, 0, "-", "coco_filter"], [253, 0, 0, "-", "filter"], [254, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[252, 2, 1, "", "LabelBalanceCOCORawFilter"], [252, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[253, 2, 1, "", "FILTERS"], [253, 2, 1, "", "Filter"], [253, 2, 1, "", "MXNetFilters"], [253, 2, 1, "", "ONNXRTITFilters"], [253, 2, 1, "", "ONNXRTQLFilters"], [253, 2, 1, "", "PyTorchFilters"], [253, 2, 1, "", "TensorflowFilters"], [253, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[257, 2, 1, "", "BaseTransform"], [257, 2, 1, "", "TRANSFORMS"], [256, 0, 0, "-", "imagenet_transform"], [258, 0, 0, "-", "tokenization"], [259, 0, 0, "-", "transform"], [257, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[257, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[256, 2, 1, "", "BilinearImagenetTransform"], [256, 2, 1, "", "LabelShift"], [256, 2, 1, "", "ONNXResizeCropImagenetTransform"], [256, 2, 1, "", "OnnxBilinearImagenetTransform"], [256, 2, 1, "", "ParseDecodeImagenet"], [256, 2, 1, "", "ParseDecodeImagenetTransform"], [256, 2, 1, "", "QuantizedInput"], [256, 2, 1, "", "ResizeWithAspectRatio"], [256, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[258, 2, 1, "", "BasicTokenizer"], [258, 2, 1, "", "FullTokenizer"], [258, 2, 1, "", "WordpieceTokenizer"], [258, 1, 1, "", "convert_by_vocab"], [258, 1, 1, "", "convert_to_unicode"], [258, 1, 1, "", "load_vocab"], [258, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[258, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[258, 3, 1, "", "convert_ids_to_tokens"], [258, 3, 1, "", "convert_tokens_to_ids"], [258, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[258, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[259, 2, 1, "", "AlignImageChannelTransform"], [259, 2, 1, "", "BaseTransform"], [259, 2, 1, "", "CastONNXTransform"], [259, 2, 1, "", "CastPyTorchTransform"], [259, 2, 1, "", "CastTFTransform"], [259, 2, 1, "", "CenterCropTFTransform"], [259, 2, 1, "", "CenterCropTransform"], [259, 2, 1, "", "CollectTransform"], [259, 2, 1, "", "ComposeTransform"], [259, 2, 1, "", "CropResizeTFTransform"], [259, 2, 1, "", "CropResizeTransform"], [259, 2, 1, "", "CropToBoundingBox"], [259, 2, 1, "", "InputFeatures"], [259, 2, 1, "", "MXNetCropResizeTransform"], [259, 2, 1, "", "MXNetCropToBoundingBox"], [259, 2, 1, "", "MXNetNormalizeTransform"], [259, 2, 1, "", "MXNetTransforms"], [259, 2, 1, "", "MXNetTranspose"], [259, 2, 1, "", "NormalizeTFTransform"], [259, 2, 1, "", "NormalizeTransform"], [259, 2, 1, "", "ONNXRTCropToBoundingBox"], [259, 2, 1, "", "ONNXRTITTransforms"], [259, 2, 1, "", "ONNXRTQLTransforms"], [259, 2, 1, "", "PaddedCenterCropTransform"], [259, 2, 1, "", "ParseDecodeVocTransform"], [259, 2, 1, "", "PyTorchAlignImageChannel"], [259, 2, 1, "", "PyTorchCropResizeTransform"], [259, 2, 1, "", "PyTorchNormalizeTransform"], [259, 2, 1, "", "PyTorchTransforms"], [259, 2, 1, "", "PyTorchTranspose"], [259, 2, 1, "", "PytorchMxnetTransform"], [259, 2, 1, "", "PytorchMxnetWrapFunction"], [259, 2, 1, "", "RandomCropTFTransform"], [259, 2, 1, "", "RandomCropTransform"], [259, 2, 1, "", "RandomHorizontalFlip"], [259, 2, 1, "", "RandomResizedCropMXNetTransform"], [259, 2, 1, "", "RandomResizedCropPytorchTransform"], [259, 2, 1, "", "RandomResizedCropTFTransform"], [259, 2, 1, "", "RandomResizedCropTransform"], [259, 2, 1, "", "RandomVerticalFlip"], [259, 2, 1, "", "RescaleKerasPretrainTransform"], [259, 2, 1, "", "RescaleTFTransform"], [259, 2, 1, "", "RescaleTransform"], [259, 2, 1, "", "ResizeMXNetTransform"], [259, 2, 1, "", "ResizePytorchTransform"], [259, 2, 1, "", "ResizeTFTransform"], [259, 2, 1, "", "ResizeTransform"], [259, 2, 1, "", "ResizeWithRatio"], [259, 2, 1, "", "SquadExample"], [259, 2, 1, "", "TFModelZooCollectTransform"], [259, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [259, 2, 1, "", "TFSquadV1PostTransform"], [259, 2, 1, "", "TRANSFORMS"], [259, 2, 1, "", "TensorflowCropToBoundingBox"], [259, 2, 1, "", "TensorflowRandomHorizontalFlip"], [259, 2, 1, "", "TensorflowRandomVerticalFlip"], [259, 2, 1, "", "TensorflowResizeWithRatio"], [259, 2, 1, "", "TensorflowTransform"], [259, 2, 1, "", "TensorflowTransforms"], [259, 2, 1, "", "TensorflowTranspose"], [259, 2, 1, "", "TensorflowWrapFunction"], [259, 2, 1, "", "ToArray"], [259, 2, 1, "", "ToNDArrayTransform"], [259, 2, 1, "", "Transforms"], [259, 2, 1, "", "Transpose"], [259, 1, 1, "", "convert_examples_to_features"], [259, 1, 1, "", "get_final_text"], [259, 1, 1, "", "get_torchvision_map"], [259, 1, 1, "", "read_squad_examples"], [259, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[259, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[259, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[259, 3, 1, "", "get_postprocess_result"], [259, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[259, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[260, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[260, 6, 1, "", "_epoch_ran"], [260, 6, 1, "", "best_model"], [260, 6, 1, "", "best_score"], [260, 3, 1, "", "create_criterion"], [260, 3, 1, "", "create_optimizer"], [260, 4, 1, "", "criterion"], [260, 6, 1, "", "eval_frequency"], [260, 4, 1, "", "evaluation_distributed"], [260, 3, 1, "", "execute"], [260, 3, 1, "", "generate_hooks"], [260, 3, 1, "", "init_train_cfg"], [260, 3, 1, "", "on_post_forward"], [260, 4, 1, "", "optimizer"], [260, 3, 1, "", "pre_process"], [260, 3, 1, "", "prepare"], [260, 4, 1, "", "student_model"], [260, 4, 1, "", "teacher_model"], [260, 4, 1, "", "train_cfg"], [260, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[261, 1, 1, "", "onnx_qlinear_to_qdq"], [262, 0, 0, "-", "qlinear2qdq"], [263, 0, 0, "-", "torch2onnx"], [261, 1, 1, "", "torch_to_fp32_onnx"], [261, 1, 1, "", "torch_to_int8_onnx"], [264, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[262, 1, 1, "", "check_model"], [262, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.torch2onnx": [[263, 1, 1, "", "build_scale_mapping"], [263, 1, 1, "", "get_node_mapping"], [263, 1, 1, "", "get_quantizable_onnx_ops"], [263, 1, 1, "", "qdq_fp32_bias"], [263, 1, 1, "", "qdq_fp32_bias_qdq"], [263, 1, 1, "", "qdq_int32_bias"], [263, 1, 1, "", "recalculate_bias"], [263, 1, 1, "", "remove_nodes_by_name"], [263, 1, 1, "", "set_data_type"], [263, 1, 1, "", "set_scale_info"], [263, 1, 1, "", "sub_graph_with_int32_bias"], [263, 1, 1, "", "torch_to_fp32_onnx"], [263, 1, 1, "", "torch_to_int8_onnx"], [263, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[264, 2, 1, "", "DummyDataReader"], [264, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[264, 3, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[265, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[265, 3, 1, "", "dataset"], [265, 4, 1, "", "eval_dataloader"], [265, 4, 1, "", "eval_func"], [265, 4, 1, "", "input"], [265, 4, 1, "", "metric"], [265, 4, 1, "", "model"], [265, 4, 1, "", "output"], [265, 4, 1, "", "postprocess"], [265, 4, 1, "", "precisions"], [265, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[273, 2, 1, "", "BaseMetric"], [273, 2, 1, "", "METRICS"], [267, 0, 0, "-", "bleu"], [268, 0, 0, "-", "bleu_util"], [269, 0, 0, "-", "coco_label_map"], [270, 0, 0, "-", "coco_tools"], [271, 0, 0, "-", "evaluate_squad"], [272, 0, 0, "-", "f1"], [274, 0, 0, "-", "metric"], [273, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[273, 4, 1, "", "hvd"], [273, 4, 1, "", "metric"], [273, 3, 1, "", "reset"], [273, 3, 1, "", "result"], [273, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[273, 6, 1, "", "metrics"], [273, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[267, 2, 1, "", "BLEU"], [267, 2, 1, "", "UnicodeRegex"], [267, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[267, 6, 1, "", "labels"], [267, 6, 1, "", "predictions"], [267, 3, 1, "", "reset"], [267, 3, 1, "", "result"], [267, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[267, 6, 1, "", "nondigit_punct_re"], [267, 3, 1, "", "property_chars"], [267, 6, 1, "", "punct_nondigit_re"], [267, 6, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[268, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[270, 2, 1, "", "COCOEvalWrapper"], [270, 2, 1, "", "COCOWrapper"], [270, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [270, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [270, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[270, 3, 1, "", "ComputeMetrics"], [270, 3, 1, "", "GetAgnosticMode"], [270, 3, 1, "", "GetCategory"], [270, 3, 1, "", "GetCategoryIdList"], [270, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[270, 3, 1, "", "LoadAnnotations"], [270, 6, 1, "", "dataset"], [270, 6, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[271, 1, 1, "", "evaluate"], [271, 1, 1, "", "exact_match_score"], [271, 1, 1, "", "f1_score"], [271, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[272, 1, 1, "", "evaluate"], [272, 1, 1, "", "f1_score"], [272, 1, 1, "", "metric_max_over_ground_truths"], [272, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[274, 2, 1, "", "Accuracy"], [274, 2, 1, "", "BaseMetric"], [274, 2, 1, "", "COCOmAPv2"], [274, 2, 1, "", "F1"], [274, 2, 1, "", "GeneralTopK"], [274, 2, 1, "", "Loss"], [274, 2, 1, "", "MAE"], [274, 2, 1, "", "METRICS"], [274, 2, 1, "", "MSE"], [274, 2, 1, "", "MXNetMetrics"], [274, 2, 1, "", "ONNXRTGLUE"], [274, 2, 1, "", "ONNXRTITMetrics"], [274, 2, 1, "", "ONNXRTQLMetrics"], [274, 2, 1, "", "PyTorchLoss"], [274, 2, 1, "", "PyTorchMetrics"], [274, 2, 1, "", "RMSE"], [274, 2, 1, "", "ROC"], [274, 2, 1, "", "SquadF1"], [274, 2, 1, "", "TensorflowCOCOMAP"], [274, 2, 1, "", "TensorflowMAP"], [274, 2, 1, "", "TensorflowMetrics"], [274, 2, 1, "", "TensorflowTopK"], [274, 2, 1, "", "TensorflowVOCMAP"], [274, 2, 1, "", "WrapMXNetMetric"], [274, 2, 1, "", "WrapONNXRTMetric"], [274, 2, 1, "", "WrapPyTorchMetric"], [274, 2, 1, "", "mIOU"], [274, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[274, 6, 1, "", "label_list"], [274, 6, 1, "", "pred_list"], [274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 6, 1, "", "sample"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[274, 4, 1, "", "hvd"], [274, 4, 1, "", "metric"], [274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[274, 6, 1, "", "k"], [274, 6, 1, "", "num_correct"], [274, 6, 1, "", "num_sample"], [274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 6, 1, "", "sample"], [274, 6, 1, "", "sum"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[274, 6, 1, "", "compare_label"], [274, 6, 1, "", "label_list"], [274, 6, 1, "", "pred_list"], [274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[274, 6, 1, "", "metrics"], [274, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[274, 6, 1, "", "compare_label"], [274, 6, 1, "", "label_list"], [274, 6, 1, "", "pred_list"], [274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[274, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[274, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[274, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[274, 3, 1, "", "compute"], [274, 3, 1, "", "reset"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[274, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[274, 6, 1, "", "mse"], [274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[274, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[274, 6, 1, "", "k"], [274, 6, 1, "", "num_correct"], [274, 6, 1, "", "num_sample"], [274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[274, 3, 1, "", "reset"], [274, 3, 1, "", "result"], [274, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[275, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[275, 4, 1, "", "precisions"], [275, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[276, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[276, 3, 1, "", "dataset"], [276, 4, 1, "", "destination"], [276, 4, 1, "", "eval_dataloader"], [276, 4, 1, "", "eval_func"], [276, 4, 1, "", "metric"], [276, 4, 1, "", "model"], [276, 4, 1, "", "postprocess"], [276, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[289, 2, 1, "", "BasicNAS"], [289, 2, 1, "", "DyNAS"], [289, 2, 1, "", "NAS"], [277, 0, 0, "-", "basic_nas"], [278, 0, 0, "-", "dynas"], [283, 0, 0, "-", "dynast"], [290, 0, 0, "-", "nas"], [291, 0, 0, "-", "nas_utils"], [292, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[289, 3, 1, "", "estimate"], [289, 3, 1, "", "execute"], [289, 3, 1, "", "init_by_cfg"], [289, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[289, 3, 1, "", "create_acc_predictor"], [289, 3, 1, "", "create_latency_predictor"], [289, 3, 1, "", "create_macs_predictor"], [289, 3, 1, "", "estimate"], [289, 3, 1, "", "init_cfg"], [289, 3, 1, "", "init_for_search"], [289, 3, 1, "", "search"], [289, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[277, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[277, 3, 1, "", "estimate"], [277, 3, 1, "", "execute"], [277, 3, 1, "", "init_by_cfg"], [277, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[278, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[278, 3, 1, "", "create_acc_predictor"], [278, 3, 1, "", "create_latency_predictor"], [278, 3, 1, "", "create_macs_predictor"], [278, 3, 1, "", "estimate"], [278, 3, 1, "", "init_cfg"], [278, 3, 1, "", "init_for_search"], [278, 3, 1, "", "search"], [278, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[279, 0, 0, "-", "dynas_manager"], [280, 0, 0, "-", "dynas_predictor"], [281, 0, 0, "-", "dynas_search"], [282, 0, 0, "-", "dynas_utils"], [284, 0, 0, "-", "supernetwork"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[279, 2, 1, "", "ParameterManager"], [279, 2, 1, "", "TransformerLTEncoding"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[279, 3, 1, "", "create_training_set"], [279, 3, 1, "", "import_csv"], [279, 3, 1, "", "onehot_generic"], [279, 3, 1, "", "process_param_dict"], [279, 3, 1, "", "random_sample"], [279, 3, 1, "", "random_samples"], [279, 3, 1, "", "set_seed"], [279, 3, 1, "", "translate2param"], [279, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding": [[279, 3, 1, "", "create_training_set"], [279, 3, 1, "", "import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[280, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[280, 3, 1, "", "get_metrics"], [280, 3, 1, "", "get_parameters"], [280, 3, 1, "", "load"], [280, 3, 1, "", "predict"], [280, 3, 1, "", "save"], [280, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[281, 2, 1, "", "ProblemMultiObjective"], [281, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[281, 3, 1, "", "configure_age"], [281, 3, 1, "", "configure_nsga2"], [281, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[282, 2, 1, "", "EvaluationInterface"], [282, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [282, 2, 1, "", "EvaluationInterfaceResNet50"], [282, 2, 1, "", "EvaluationInterfaceTransformerLT"], [282, 2, 1, "", "OFARunner"], [282, 2, 1, "", "Runner"], [282, 2, 1, "", "TorchVisionReference"], [282, 2, 1, "", "TransformerLTRunner"], [282, 1, 1, "", "get_macs"], [282, 1, 1, "", "get_torchvision_model"], [282, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[282, 3, 1, "", "clear_csv"], [282, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[282, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[282, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT": [[282, 3, 1, "", "clear_csv"], [282, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[282, 3, 1, "", "estimate_accuracy_top1"], [282, 3, 1, "", "estimate_latency"], [282, 3, 1, "", "estimate_macs"], [282, 3, 1, "", "get_subnet"], [282, 3, 1, "", "measure_latency"], [282, 3, 1, "", "validate_macs"], [282, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[282, 3, 1, "", "measure_latency"], [282, 3, 1, "", "validate_macs"], [282, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner": [[282, 3, 1, "", "measure_latency"], [282, 3, 1, "", "validate_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[285, 0, 0, "-", "machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[286, 0, 0, "-", "modules_supernetwork"], [287, 0, 0, "-", "transformer_interface"], [288, 0, 0, "-", "transformer_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[286, 2, 1, "", "MultiheadAttentionSuper"], [286, 1, 1, "", "get_incremental_state"], [286, 1, 1, "", "set_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper": [[286, 3, 1, "", "forward"], [286, 3, 1, "", "reorder_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[287, 1, 1, "", "compute_bleu"], [287, 1, 1, "", "compute_latency"], [287, 1, 1, "", "compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[288, 2, 1, "", "TransformerDecoder"], [288, 2, 1, "", "TransformerDecoderLayer"], [288, 2, 1, "", "TransformerEncoder"], [288, 2, 1, "", "TransformerEncoderLayer"], [288, 2, 1, "", "TransformerSuperNetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder": [[288, 3, 1, "", "extract_features"], [288, 3, 1, "", "forward"], [288, 3, 1, "", "max_positions"], [288, 3, 1, "", "output_layer"], [288, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer": [[288, 3, 1, "", "forward"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder": [[288, 3, 1, "", "forward"], [288, 3, 1, "", "max_positions"], [288, 3, 1, "", "reorder_encoder_out"], [288, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer": [[288, 3, 1, "", "forward"], [288, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.nas": [[290, 2, 1, "", "NAS"], [290, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[290, 3, 1, "", "count_model_parameters"], [290, 3, 1, "", "dump_search_results"], [290, 3, 1, "", "estimate"], [290, 3, 1, "", "find_best_model_archs"], [290, 3, 1, "", "init_search_cfg"], [290, 3, 1, "", "load_search_results"], [290, 3, 1, "", "metrics_conversion"], [290, 4, 1, "", "model_builder"], [290, 3, 1, "", "params_vec2params_dict"], [290, 3, 1, "", "search"], [290, 4, 1, "", "search_algorithm"], [290, 4, 1, "", "search_space"], [290, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[291, 1, 1, "", "create_search_space_pool"], [291, 1, 1, "", "find_pareto_front"], [291, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[292, 2, 1, "", "BayesianOptimizationSearcher"], [292, 2, 1, "", "GridSearcher"], [292, 2, 1, "", "RandomSearcher"], [292, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[292, 3, 1, "", "get_feedback"], [292, 3, 1, "", "indices2params_vec"], [292, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[292, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[292, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[292, 3, 1, "", "get_feedback"], [292, 3, 1, "", "params_vec2params_dict"], [292, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[293, 2, 1, "", "Pruning"], [293, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[293, 6, 1, "", "conf"], [293, 4, 1, "", "evaluation_distributed"], [293, 3, 1, "", "execute"], [293, 3, 1, "", "generate_hooks"], [293, 3, 1, "", "generate_pruners"], [293, 3, 1, "", "get_sparsity_ratio"], [293, 3, 1, "", "pre_process"], [293, 3, 1, "", "prepare"], [293, 6, 1, "", "pruners"], [293, 4, 1, "", "pruning_func"], [293, 4, 1, "", "train_distributed"], [293, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[293, 3, 1, "", "on_after_compute_loss"], [293, 3, 1, "", "on_batch_begin"], [293, 3, 1, "", "on_batch_end"], [293, 3, 1, "", "on_epoch_begin"], [293, 3, 1, "", "on_epoch_end"], [293, 3, 1, "", "on_step_begin"], [293, 3, 1, "", "on_step_end"], [293, 3, 1, "", "on_train_begin"], [293, 3, 1, "", "on_train_end"], [293, 3, 1, "", "post_epoch_end"], [293, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[294, 2, 1, "", "PATTERNS"], [295, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[294, 6, 1, "", "patterns"], [294, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[295, 2, 1, "", "PATTERNS"], [296, 0, 0, "-", "pattern"], [297, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[295, 6, 1, "", "patterns"], [295, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[296, 2, 1, "", "PATTERNS"], [296, 2, 1, "", "PatternBase"], [296, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[296, 6, 1, "", "patterns"], [296, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[296, 3, 1, "", "compute_sparsity"], [296, 3, 1, "", "reduce"], [296, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[297, 2, 1, "", "TilePatternBase"], [297, 2, 1, "", "TilePattern_1x1"], [297, 2, 1, "", "TilePattern_1x16"], [297, 2, 1, "", "TilePattern_1x2"], [297, 2, 1, "", "TilePattern_2x2"], [297, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[297, 3, 1, "", "compute_sparsity"], [297, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pruning_v2": [[298, 2, 1, "", "Pruning"], [298, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[298, 6, 1, "", "conf"], [298, 4, 1, "", "evaluation_distributed"], [298, 3, 1, "", "execute"], [298, 3, 1, "", "generate_hooks"], [298, 3, 1, "", "get_sparsity_ratio"], [298, 3, 1, "", "pre_process"], [298, 3, 1, "", "prepare"], [298, 6, 1, "", "pruners"], [298, 4, 1, "", "pruning_func"], [298, 4, 1, "", "train_distributed"], [298, 3, 1, "", "update_config"]], "neural_compressor.experimental.pruning_v2.TfPruningCallback": [[298, 3, 1, "", "on_after_compute_loss"], [298, 3, 1, "", "on_batch_begin"], [298, 3, 1, "", "on_batch_end"], [298, 3, 1, "", "on_epoch_begin"], [298, 3, 1, "", "on_epoch_end"], [298, 3, 1, "", "on_step_begin"], [298, 3, 1, "", "on_step_end"], [298, 3, 1, "", "on_train_begin"], [298, 3, 1, "", "on_train_end"], [298, 3, 1, "", "post_epoch_end"], [298, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pytorch_pruner": [[300, 0, 0, "-", "logger"], [301, 0, 0, "-", "patterns"], [302, 0, 0, "-", "prune_utils"], [303, 0, 0, "-", "pruner"], [304, 0, 0, "-", "pruning"], [305, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[301, 2, 1, "", "Pattern"], [301, 2, 1, "", "PatternNInM"], [301, 2, 1, "", "PatternNxM"], [301, 1, 1, "", "get_pattern"], [301, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[301, 3, 1, "", "get_block_size_dict"], [301, 3, 1, "", "get_mask_single"], [301, 3, 1, "", "get_masks"], [301, 3, 1, "", "get_masks_global"], [301, 3, 1, "", "get_masks_local"], [301, 3, 1, "", "get_pattern_lock_masks"], [301, 3, 1, "", "get_sparsity_ratio"], [301, 6, 1, "", "is_global"], [301, 6, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[301, 6, 1, "", "M"], [301, 6, 1, "", "N"], [301, 3, 1, "", "get_masks_global"], [301, 3, 1, "", "get_pattern_lock_masks"], [301, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[301, 6, 1, "", "block_size"], [301, 3, 1, "", "get_block_size_dict"], [301, 3, 1, "", "get_masks_global"], [301, 3, 1, "", "get_pattern_lock_masks"], [301, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[302, 1, 1, "", "check_config"], [302, 1, 1, "", "parse_not_to_prune"], [302, 1, 1, "", "parse_to_prune"], [302, 1, 1, "", "process_and_check_config"], [302, 1, 1, "", "process_config"], [302, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[303, 2, 1, "", "MagnitudePruner"], [303, 2, 1, "", "PatternLockPruner"], [303, 2, 1, "", "Pruner"], [303, 2, 1, "", "SnipMomentumPruner"], [303, 2, 1, "", "SnipPruner"], [303, 1, 1, "", "get_pruner"], [303, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[303, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[303, 3, 1, "", "on_after_optimizer_step"], [303, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[303, 3, 1, "", "check_is_pruned_step"], [303, 6, 1, "", "config"], [303, 6, 1, "", "current_sparsity_ratio"], [303, 6, 1, "", "end_step"], [303, 6, 1, "", "global_step"], [303, 3, 1, "", "mask_weights"], [303, 6, 1, "", "masks"], [303, 6, 1, "", "max_sparsity_ratio_per_layer"], [303, 6, 1, "", "modules"], [303, 3, 1, "", "on_after_eval"], [303, 3, 1, "", "on_after_optimizer_step"], [303, 3, 1, "", "on_before_eval"], [303, 3, 1, "", "on_before_optimizer_step"], [303, 3, 1, "", "on_epoch_begin"], [303, 3, 1, "", "on_epoch_end"], [303, 3, 1, "", "on_step_begin"], [303, 3, 1, "", "on_step_end"], [303, 3, 1, "", "on_train_begin"], [303, 3, 1, "", "on_train_end"], [303, 6, 1, "", "pattern"], [303, 6, 1, "", "scheduler"], [303, 6, 1, "", "scores"], [303, 6, 1, "", "start_step"], [303, 6, 1, "", "target_sparsity_ratio"], [303, 6, 1, "", "update_frequency_on_step"], [303, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[303, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[303, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[304, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[304, 6, 1, "", "config_file_path"], [304, 3, 1, "", "get_sparsity_ratio"], [304, 6, 1, "", "model"], [304, 3, 1, "", "on_after_eval"], [304, 3, 1, "", "on_after_optimizer_step"], [304, 3, 1, "", "on_before_eval"], [304, 3, 1, "", "on_before_optimizer_step"], [304, 3, 1, "", "on_epoch_begin"], [304, 3, 1, "", "on_epoch_end"], [304, 3, 1, "", "on_step_begin"], [304, 3, 1, "", "on_step_end"], [304, 3, 1, "", "on_train_begin"], [304, 3, 1, "", "on_train_end"], [304, 3, 1, "", "prepare"], [304, 6, 1, "", "pruner_info"], [304, 6, 1, "", "pruners"], [304, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[305, 2, 1, "", "IterativeScheduler"], [305, 2, 1, "", "OneshotScheduler"], [305, 2, 1, "", "Scheduler"], [305, 1, 1, "", "get_scheduler"], [305, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[305, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[305, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[305, 6, 1, "", "config"], [305, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[306, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[306, 4, 1, "", "calib_dataloader"], [306, 3, 1, "", "dataset"], [306, 3, 1, "", "execute"], [306, 4, 1, "", "metric"], [306, 4, 1, "", "model"], [306, 4, 1, "", "objective"], [306, 4, 1, "", "postprocess"], [306, 3, 1, "", "pre_process"], [306, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[307, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[307, 3, 1, "", "append"], [307, 3, 1, "", "combine"], [307, 4, 1, "", "eval_func"], [307, 4, 1, "", "model"], [307, 4, 1, "", "train_func"]], "neural_compressor.metric": [[315, 2, 1, "", "BaseMetric"], [315, 2, 1, "", "METRICS"], [315, 2, 1, "", "Metric"], [309, 0, 0, "-", "bleu"], [310, 0, 0, "-", "bleu_util"], [311, 0, 0, "-", "coco_label_map"], [312, 0, 0, "-", "coco_tools"], [313, 0, 0, "-", "evaluate_squad"], [314, 0, 0, "-", "f1"], [316, 0, 0, "-", "metric"], [315, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[315, 4, 1, "", "hvd"], [315, 4, 1, "", "metric"], [315, 3, 1, "", "reset"], [315, 3, 1, "", "result"], [315, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[315, 6, 1, "", "metrics"], [315, 3, 1, "", "register"]], "neural_compressor.metric.bleu": [[309, 2, 1, "", "BLEU"], [309, 2, 1, "", "UnicodeRegex"], [309, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[309, 6, 1, "", "labels"], [309, 6, 1, "", "predictions"], [309, 3, 1, "", "reset"], [309, 3, 1, "", "result"], [309, 3, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[309, 6, 1, "", "nondigit_punct_re"], [309, 3, 1, "", "property_chars"], [309, 6, 1, "", "punct_nondigit_re"], [309, 6, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[310, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[312, 2, 1, "", "COCOEvalWrapper"], [312, 2, 1, "", "COCOWrapper"], [312, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [312, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [312, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[312, 3, 1, "", "ComputeMetrics"], [312, 3, 1, "", "GetAgnosticMode"], [312, 3, 1, "", "GetCategory"], [312, 3, 1, "", "GetCategoryIdList"], [312, 3, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[312, 3, 1, "", "LoadAnnotations"], [312, 6, 1, "", "dataset"], [312, 6, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[313, 1, 1, "", "evaluate"], [313, 1, 1, "", "exact_match_score"], [313, 1, 1, "", "f1_score"], [313, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[314, 1, 1, "", "evaluate"], [314, 1, 1, "", "f1_score"], [314, 1, 1, "", "metric_max_over_ground_truths"], [314, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[316, 2, 1, "", "Accuracy"], [316, 2, 1, "", "BaseMetric"], [316, 2, 1, "", "COCOmAPv2"], [316, 2, 1, "", "F1"], [316, 2, 1, "", "GeneralTopK"], [316, 2, 1, "", "Loss"], [316, 2, 1, "", "MAE"], [316, 2, 1, "", "METRICS"], [316, 2, 1, "", "MSE"], [316, 2, 1, "", "MXNetMetrics"], [316, 2, 1, "", "Metric"], [316, 2, 1, "", "ONNXRTGLUE"], [316, 2, 1, "", "ONNXRTITMetrics"], [316, 2, 1, "", "ONNXRTQLMetrics"], [316, 2, 1, "", "PyTorchLoss"], [316, 2, 1, "", "PyTorchMetrics"], [316, 2, 1, "", "RMSE"], [316, 2, 1, "", "ROC"], [316, 2, 1, "", "SquadF1"], [316, 2, 1, "", "TensorflowCOCOMAP"], [316, 2, 1, "", "TensorflowMAP"], [316, 2, 1, "", "TensorflowMetrics"], [316, 2, 1, "", "TensorflowTopK"], [316, 2, 1, "", "TensorflowVOCMAP"], [316, 2, 1, "", "WrapMXNetMetric"], [316, 2, 1, "", "WrapONNXRTMetric"], [316, 2, 1, "", "WrapPyTorchMetric"], [316, 2, 1, "", "mIOU"], [316, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[316, 6, 1, "", "label_list"], [316, 6, 1, "", "pred_list"], [316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 6, 1, "", "sample"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[316, 4, 1, "", "hvd"], [316, 4, 1, "", "metric"], [316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[316, 6, 1, "", "k"], [316, 6, 1, "", "num_correct"], [316, 6, 1, "", "num_sample"], [316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 6, 1, "", "sample"], [316, 6, 1, "", "sum"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[316, 6, 1, "", "compare_label"], [316, 6, 1, "", "label_list"], [316, 6, 1, "", "pred_list"], [316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[316, 6, 1, "", "metrics"], [316, 3, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[316, 6, 1, "", "compare_label"], [316, 6, 1, "", "label_list"], [316, 6, 1, "", "pred_list"], [316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[316, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[316, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[316, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[316, 3, 1, "", "compute"], [316, 3, 1, "", "reset"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[316, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[316, 6, 1, "", "mse"], [316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[316, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[316, 6, 1, "", "k"], [316, 6, 1, "", "num_correct"], [316, 6, 1, "", "num_sample"], [316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[316, 3, 1, "", "reset"], [316, 3, 1, "", "result"], [316, 3, 1, "", "update"]], "neural_compressor.model": [[319, 2, 1, "", "BaseModel"], [319, 2, 1, "", "Model"], [318, 0, 0, "-", "base_model"], [320, 0, 0, "-", "keras_model"], [321, 0, 0, "-", "model"], [322, 0, 0, "-", "mxnet_model"], [323, 0, 0, "-", "nets_factory"], [324, 0, 0, "-", "onnx_model"], [325, 0, 0, "-", "tensorflow_model"], [326, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[319, 3, 1, "", "export"], [319, 3, 1, "", "framework"], [319, 4, 1, "", "graph_info"], [319, 4, 1, "", "model"], [319, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[318, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[318, 3, 1, "", "export"], [318, 3, 1, "", "framework"], [318, 4, 1, "", "graph_info"], [318, 4, 1, "", "model"], [318, 3, 1, "", "save"]], "neural_compressor.model.keras_model": [[320, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[320, 3, 1, "", "framework"], [320, 4, 1, "", "graph_info"], [320, 4, 1, "", "model"], [320, 4, 1, "", "q_config"], [320, 3, 1, "", "save"]], "neural_compressor.model.model": [[321, 2, 1, "", "Model"], [321, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[322, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[322, 3, 1, "", "framework"], [322, 4, 1, "", "model"], [322, 3, 1, "", "save"]], "neural_compressor.model.nets_factory": [[323, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.nets_factory.TFSlimNetsFactory": [[323, 3, 1, "", "register"]], "neural_compressor.model.onnx_model": [[324, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[324, 3, 1, "", "add_initializer"], [324, 3, 1, "", "add_initializers"], [324, 3, 1, "", "add_node"], [324, 3, 1, "", "add_nodes"], [324, 3, 1, "", "export"], [324, 3, 1, "", "find_node_by_name"], [324, 3, 1, "", "find_nodes_by_initializer"], [324, 3, 1, "", "framework"], [324, 3, 1, "", "get_children"], [324, 3, 1, "", "get_initializer"], [324, 3, 1, "", "get_nodes_chain"], [324, 3, 1, "", "get_parent"], [324, 3, 1, "", "get_parents"], [324, 3, 1, "", "get_scale_zero"], [324, 3, 1, "", "graph"], [324, 4, 1, "", "graph_info"], [324, 3, 1, "", "initializer"], [324, 3, 1, "", "input"], [324, 4, 1, "", "input_name_to_nodes"], [324, 3, 1, "", "ir_version"], [324, 4, 1, "", "large_size"], [324, 4, 1, "", "model"], [324, 4, 1, "", "model_path"], [324, 3, 1, "", "nodes"], [324, 3, 1, "", "opset_import"], [324, 3, 1, "", "output"], [324, 4, 1, "", "output_name_to_node"], [324, 4, 1, "", "q_config"], [324, 3, 1, "", "remove_initializer"], [324, 3, 1, "", "remove_initializers"], [324, 3, 1, "", "remove_node"], [324, 3, 1, "", "remove_nodes"], [324, 3, 1, "", "remove_unused_constant"], [324, 3, 1, "", "replace_input_of_all_nodes"], [324, 3, 1, "", "replace_node_input"], [324, 3, 1, "", "replace_node_output"], [324, 3, 1, "", "replace_output_of_all_nodes"], [324, 3, 1, "", "save"], [324, 3, 1, "", "save_model_to_file"], [324, 3, 1, "", "set_initializer"], [324, 3, 1, "", "topological_sort"], [324, 3, 1, "", "update"]], "neural_compressor.model.tensorflow_model": [[325, 2, 1, "", "TensorflowBaseModel"], [325, 2, 1, "", "TensorflowCheckpointModel"], [325, 2, 1, "", "TensorflowModel"], [325, 2, 1, "", "TensorflowQATModel"], [325, 2, 1, "", "TensorflowSavedModelModel"], [325, 1, 1, "", "checkpoint_session"], [325, 1, 1, "", "estimator_session"], [325, 1, 1, "", "frozen_pb_session"], [325, 1, 1, "", "get_model_type"], [325, 1, 1, "", "graph_def_session"], [325, 1, 1, "", "graph_session"], [325, 1, 1, "", "keras_session"], [325, 1, 1, "", "load_saved_model"], [325, 1, 1, "", "saved_model_session"], [325, 1, 1, "", "slim_session"], [325, 1, 1, "", "validate_and_inference_input_output"], [325, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[325, 3, 1, "", "framework"], [325, 4, 1, "", "graph"], [325, 4, 1, "", "graph_def"], [325, 4, 1, "", "graph_info"], [325, 4, 1, "", "input_node_names"], [325, 4, 1, "", "input_tensor"], [325, 4, 1, "", "input_tensor_names"], [325, 4, 1, "", "iter_op"], [325, 4, 1, "", "model"], [325, 4, 1, "", "model_type"], [325, 4, 1, "", "name"], [325, 4, 1, "", "output_node_names"], [325, 4, 1, "", "output_tensor"], [325, 4, 1, "", "output_tensor_names"], [325, 4, 1, "", "q_config"], [325, 3, 1, "", "save"], [325, 4, 1, "", "sess"], [325, 4, 1, "", "weights"], [325, 4, 1, "", "workspace_path"]], "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel": [[325, 4, 1, "", "graph_def"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[325, 4, 1, "", "model"], [325, 3, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[325, 3, 1, "", "build_saved_model"], [325, 3, 1, "", "get_all_weight_names"], [325, 3, 1, "", "get_weight"], [325, 4, 1, "", "model"], [325, 3, 1, "", "report_sparsity"], [325, 3, 1, "", "save"], [325, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model": [[326, 2, 1, "", "IPEXModel"], [326, 2, 1, "", "PyTorchBaseModel"], [326, 2, 1, "", "PyTorchFXModel"], [326, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[326, 3, 1, "", "save"], [326, 4, 1, "", "workspace_path"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[326, 3, 1, "", "forward"], [326, 4, 1, "", "fp32_model"], [326, 3, 1, "", "framework"], [326, 3, 1, "", "generate_forward_pre_hook"], [326, 3, 1, "", "get_all_weight_names"], [326, 3, 1, "", "get_gradient"], [326, 3, 1, "", "get_inputs"], [326, 3, 1, "", "get_weight"], [326, 4, 1, "", "model"], [326, 3, 1, "", "prune_weights_"], [326, 3, 1, "", "register_forward_pre_hook"], [326, 3, 1, "", "remove_hooks"], [326, 3, 1, "", "report_sparsity"], [326, 3, 1, "", "update_gradient"], [326, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[326, 3, 1, "", "export"], [326, 3, 1, "", "export_to_bf16_onnx"], [326, 3, 1, "", "export_to_fp32_onnx"], [326, 3, 1, "", "export_to_int8_onnx"], [326, 3, 1, "", "export_to_jit"], [326, 4, 1, "", "graph_info"], [326, 3, 1, "", "load_quantized_state_dict"], [326, 3, 1, "", "quantized_state_dict"], [326, 3, 1, "", "save"], [326, 4, 1, "", "workspace_path"]], "neural_compressor.objective": [[327, 2, 1, "", "Accuracy"], [327, 2, 1, "", "Footprint"], [327, 2, 1, "", "ModelSize"], [327, 2, 1, "", "MultiObjective"], [327, 2, 1, "", "Objective"], [327, 2, 1, "", "Performance"], [327, 1, 1, "", "objective_custom_registry"], [327, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[327, 3, 1, "", "end"], [327, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[327, 3, 1, "", "end"], [327, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[327, 3, 1, "", "end"], [327, 3, 1, "", "start"]], "neural_compressor.objective.MultiObjective": [[327, 3, 1, "", "accuracy_meets"], [327, 4, 1, "", "accuracy_target"], [327, 4, 1, "", "baseline"], [327, 3, 1, "", "best_result"], [327, 3, 1, "", "compare"], [327, 3, 1, "", "end"], [327, 3, 1, "", "evaluate"], [327, 3, 1, "", "reset"], [327, 3, 1, "", "result"], [327, 3, 1, "", "set_model"], [327, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[327, 3, 1, "", "end"], [327, 4, 1, "", "model"], [327, 3, 1, "", "reset"], [327, 3, 1, "", "result"], [327, 3, 1, "", "result_list"], [327, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[327, 3, 1, "", "end"], [327, 3, 1, "", "start"]], "neural_compressor.pruner": [[328, 0, 0, "-", "criteria"], [330, 0, 0, "-", "logger"], [331, 0, 0, "-", "patterns"], [334, 0, 0, "-", "pruner_legacy"], [338, 0, 0, "-", "pruners"], [339, 0, 0, "-", "pruning"], [340, 0, 0, "-", "regs"], [341, 0, 0, "-", "schedulers"], [342, 0, 0, "-", "utils"]], "neural_compressor.pruner.criteria": [[328, 2, 1, "", "GradientCriterion"], [328, 2, 1, "", "MagnitudeCriterion"], [328, 2, 1, "", "PruningCriterion"], [328, 2, 1, "", "SnipCriterion"], [328, 2, 1, "", "SnipMomentumCriterion"], [328, 1, 1, "", "get_criterion"], [328, 1, 1, "", "register_criterion"]], "neural_compressor.pruner.criteria.GradientCriterion": [[328, 3, 1, "", "on_after_optimizer_step"], [328, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.MagnitudeCriterion": [[328, 3, 1, "", "on_step_begin"], [328, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.PruningCriterion": [[328, 3, 1, "", "on_after_optimizer_step"], [328, 3, 1, "", "on_step_begin"], [328, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipCriterion": [[328, 3, 1, "", "on_after_optimizer_step"], [328, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipMomentumCriterion": [[328, 3, 1, "", "on_after_optimizer_step"], [328, 6, 1, "", "scores"]], "neural_compressor.pruner.patterns": [[331, 2, 1, "", "BasePattern"], [331, 2, 1, "", "PatternNInM"], [331, 2, 1, "", "PatternNxM"], [331, 1, 1, "", "get_pattern"], [331, 1, 1, "", "register_pattern"]], "neural_compressor.pruner.patterns.BasePattern": [[331, 3, 1, "", "adjust_ratio"], [331, 3, 1, "", "check_layer_validity"], [331, 6, 1, "", "config"], [331, 3, 1, "", "get_block_size_dict"], [331, 3, 1, "", "get_masks"], [331, 3, 1, "", "get_masks_global"], [331, 3, 1, "", "get_masks_local"], [331, 3, 1, "", "get_pattern_lock_masks"], [331, 3, 1, "", "get_reduced_masks_from_data"], [331, 3, 1, "", "get_single_mask_per_target_ratio"], [331, 3, 1, "", "get_sparsity_ratio"], [331, 3, 1, "", "get_sparsity_ratio_each_layer"], [331, 6, 1, "", "invalid_layers"], [331, 6, 1, "", "is_global"], [331, 6, 1, "", "keep_mask_layers"], [331, 6, 1, "", "max_sparsity_ratio_per_op"], [331, 6, 1, "", "min_sparsity_ratio_per_op"], [331, 6, 1, "", "modules"], [331, 6, 1, "", "pattern"], [331, 3, 1, "", "reduce_tensor"], [331, 6, 1, "", "target_sparsity"], [331, 3, 1, "", "update_residual_cnt"]], "neural_compressor.pruner.patterns.PatternNInM": [[331, 6, 1, "", "M"], [331, 6, 1, "", "N"], [331, 3, 1, "", "check_layer_validity"], [331, 3, 1, "", "get_ele_mask_per_threshold"], [331, 3, 1, "", "get_least_ninm_mask_from_data"], [331, 3, 1, "", "get_masks_global"], [331, 3, 1, "", "get_pattern_lock_masks"], [331, 3, 1, "", "get_reduced_masks_from_data"], [331, 3, 1, "", "get_sparsity_ratio"], [331, 3, 1, "", "reduce_scores"], [331, 3, 1, "", "reshape_orig_to_pattern"], [331, 3, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.pruner.patterns.PatternNxM": [[331, 6, 1, "", "block_size"], [331, 3, 1, "", "check_layer_validity"], [331, 3, 1, "", "count_new_masked_cnts"], [331, 3, 1, "", "get_block_size_dict"], [331, 3, 1, "", "get_mask_per_threshold"], [331, 3, 1, "", "get_masks_global"], [331, 3, 1, "", "get_pattern_lock_masks"], [331, 3, 1, "", "get_reduced_masks_from_data"], [331, 3, 1, "", "get_sparsity_ratio"], [331, 3, 1, "", "get_sparsity_ratio_progressive"], [331, 3, 1, "", "reduce_scores"], [331, 3, 1, "", "reshape_orig_to_pattern"], [331, 3, 1, "", "reshape_reduced_to_orig"], [331, 3, 1, "", "update_new_added_masks"], [331, 3, 1, "", "update_progressive_masks"], [331, 3, 1, "", "update_progressive_masks_global"], [331, 3, 1, "", "update_progressive_masks_linear"], [331, 3, 1, "", "update_progressive_masks_local"], [331, 3, 1, "", "update_progressive_masks_scores"]], "neural_compressor.pruner.pruner_legacy": [[332, 0, 0, "-", "gradient_sensitivity"], [333, 0, 0, "-", "group_lasso"], [335, 0, 0, "-", "magnitude"], [336, 0, 0, "-", "pattern_lock"], [337, 0, 0, "-", "pruner"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[332, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner": [[332, 3, 1, "", "compute_mask"], [332, 3, 1, "", "on_epoch_begin"], [332, 3, 1, "", "on_epoch_end"], [332, 3, 1, "", "on_step_begin"], [332, 3, 1, "", "on_step_end"], [332, 3, 1, "", "parse_weight_name"], [332, 3, 1, "", "prune_by_importance"], [332, 3, 1, "", "prune_weight"], [332, 3, 1, "", "update_importance_abs"], [332, 3, 1, "", "update_importance_elementwise"], [332, 3, 1, "", "update_importance_weighted"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[333, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner": [[333, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[335, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner": [[335, 3, 1, "", "compute_mask"], [335, 3, 1, "", "on_epoch_begin"], [335, 3, 1, "", "on_epoch_end"], [335, 3, 1, "", "on_step_begin"], [335, 3, 1, "", "on_step_end"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[336, 2, 1, "", "PatternLockPruner"]], "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner": [[336, 3, 1, "", "compute_mask"], [336, 3, 1, "", "on_epoch_begin"], [336, 3, 1, "", "on_epoch_end"], [336, 3, 1, "", "on_step_begin"], [336, 3, 1, "", "on_step_end"], [336, 3, 1, "", "update_weights"]], "neural_compressor.pruner.pruner_legacy.pruner": [[337, 2, 1, "", "Pruner"], [337, 1, 1, "", "pruner_registry"]], "neural_compressor.pruner.pruner_legacy.pruner.Pruner": [[337, 3, 1, "", "on_before_optimizer_step"], [337, 3, 1, "", "on_epoch_begin"], [337, 3, 1, "", "on_epoch_end"], [337, 3, 1, "", "on_step_begin"], [337, 3, 1, "", "on_step_end"], [337, 3, 1, "", "on_train_begin"], [337, 3, 1, "", "on_train_end"], [337, 3, 1, "", "update_sparsity"]], "neural_compressor.pruner.pruners": [[338, 2, 1, "", "BasePruner"], [338, 2, 1, "", "BasicPruner"], [338, 2, 1, "", "PatternLockPruner"], [338, 2, 1, "", "ProgressivePruner"], [338, 1, 1, "", "get_pruner"], [338, 1, 1, "", "parse_valid_pruner_types"], [338, 1, 1, "", "register_pruner"]], "neural_compressor.pruner.pruners.BasePruner": [[338, 3, 1, "", "check_is_pruned_step"], [338, 6, 1, "", "config"], [338, 6, 1, "", "current_sparsity_ratio"], [338, 6, 1, "", "end_step"], [338, 6, 1, "", "global_step"], [338, 3, 1, "", "mask_weights"], [338, 3, 1, "", "mask_weights_general"], [338, 6, 1, "", "masks"], [338, 6, 1, "", "max_sparsity_ratio_per_op"], [338, 6, 1, "", "modules"], [338, 3, 1, "", "on_after_eval"], [338, 3, 1, "", "on_after_optimizer_step"], [338, 3, 1, "", "on_before_eval"], [338, 3, 1, "", "on_before_optimizer_step"], [338, 3, 1, "", "on_epoch_begin"], [338, 3, 1, "", "on_epoch_end"], [338, 3, 1, "", "on_step_begin"], [338, 3, 1, "", "on_step_end"], [338, 3, 1, "", "on_train_begin"], [338, 3, 1, "", "on_train_end"], [338, 6, 1, "", "pattern"], [338, 6, 1, "", "pruning_frequency"], [338, 6, 1, "", "scheduler"], [338, 6, 1, "", "scores"], [338, 6, 1, "", "start_step"], [338, 6, 1, "", "target_sparsity_ratio"], [338, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.BasicPruner": [[338, 6, 1, "", "criterion"], [338, 3, 1, "", "on_after_optimizer_step"], [338, 3, 1, "", "on_before_optimizer_step"], [338, 6, 1, "", "pattern"], [338, 6, 1, "", "reg"], [338, 6, 1, "", "scheduler"], [338, 3, 1, "", "set_global_step"], [338, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.PatternLockPruner": [[338, 3, 1, "", "on_after_optimizer_step"], [338, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.ProgressivePruner": [[338, 3, 1, "", "check_is_pruned_progressive_step"], [338, 3, 1, "", "check_progressive_validity"], [338, 3, 1, "", "on_after_optimizer_step"], [338, 3, 1, "", "on_before_optimizer_step"], [338, 3, 1, "", "on_step_begin"], [338, 3, 1, "", "print_progressive_sparsity"], [338, 3, 1, "", "update_masks_progressive"]], "neural_compressor.pruner.pruning": [[339, 2, 1, "", "Pruning"]], "neural_compressor.pruner.pruning.Pruning": [[339, 6, 1, "", "config_file_path"], [339, 3, 1, "", "get_sparsity_ratio"], [339, 4, 1, "id0", "model"], [339, 3, 1, "", "on_after_eval"], [339, 3, 1, "", "on_after_optimizer_step"], [339, 3, 1, "", "on_before_eval"], [339, 3, 1, "", "on_before_optimizer_step"], [339, 3, 1, "", "on_epoch_begin"], [339, 3, 1, "", "on_epoch_end"], [339, 3, 1, "", "on_step_begin"], [339, 3, 1, "", "on_step_end"], [339, 3, 1, "", "on_train_begin"], [339, 3, 1, "", "on_train_end"], [339, 6, 1, "", "pruner_info"], [339, 6, 1, "", "pruners"], [339, 3, 1, "", "update_config"]], "neural_compressor.pruner.regs": [[340, 2, 1, "", "BaseReg"], [340, 2, 1, "", "GroupLasso"], [340, 1, 1, "", "get_reg"], [340, 1, 1, "", "get_reg_type"], [340, 1, 1, "", "register_reg"]], "neural_compressor.pruner.regs.BaseReg": [[340, 3, 1, "", "on_after_optimizer_step"], [340, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.regs.GroupLasso": [[340, 6, 1, "", "alpha"], [340, 3, 1, "", "on_after_optimizer_step"], [340, 3, 1, "", "on_before_optimizer_step"], [340, 6, 1, "", "reg_terms"]], "neural_compressor.pruner.schedulers": [[341, 2, 1, "", "IterativeScheduler"], [341, 2, 1, "", "OneshotScheduler"], [341, 2, 1, "", "PruningScheduler"], [341, 1, 1, "", "get_scheduler"], [341, 1, 1, "", "register_scheduler"]], "neural_compressor.pruner.schedulers.IterativeScheduler": [[341, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.OneshotScheduler": [[341, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.PruningScheduler": [[341, 6, 1, "", "config"], [341, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.utils": [[342, 1, 1, "", "check_config"], [342, 1, 1, "", "parse_to_prune"], [342, 1, 1, "", "process_and_check_config"], [342, 1, 1, "", "process_config"], [342, 1, 1, "", "process_weight_config"], [342, 1, 1, "", "process_yaml_config"], [342, 1, 1, "", "reset_none_to_default"], [342, 1, 1, "", "update_params"]], "neural_compressor.quantization": [[343, 1, 1, "", "fit"]], "neural_compressor.strategy": [[344, 0, 0, "-", "auto_mixed_precision"], [345, 0, 0, "-", "basic"], [346, 0, 0, "-", "bayesian"], [347, 0, 0, "-", "conservative"], [348, 0, 0, "-", "exhaustive"], [349, 0, 0, "-", "hawq_v2"], [351, 0, 0, "-", "mse"], [352, 0, 0, "-", "mse_v2"], [353, 0, 0, "-", "random"], [354, 0, 0, "-", "strategy"], [355, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[344, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[344, 3, 1, "", "next_tune_cfg"], [344, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[345, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[345, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[346, 2, 1, "", "BayesianOptimization"], [346, 2, 1, "", "BayesianTuneStrategy"], [346, 2, 1, "", "TargetSpace"], [346, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianOptimization": [[346, 3, 1, "", "gen_next_params"], [346, 4, 1, "", "max"], [346, 4, 1, "", "res"], [346, 4, 1, "", "space"], [346, 3, 1, "", "suggest"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[346, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[346, 3, 1, "", "array_to_params"], [346, 4, 1, "", "bounds"], [346, 4, 1, "", "dim"], [346, 4, 1, "", "empty"], [346, 3, 1, "", "get_target"], [346, 4, 1, "", "keys"], [346, 3, 1, "", "max"], [346, 4, 1, "", "params"], [346, 3, 1, "", "params_to_array"], [346, 3, 1, "", "random_sample"], [346, 3, 1, "", "register"], [346, 3, 1, "", "res"], [346, 4, 1, "", "target"]], "neural_compressor.strategy.conservative": [[347, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[347, 3, 1, "", "next_tune_cfg"], [347, 3, 1, "", "stop"], [347, 3, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[348, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[348, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[349, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[349, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[351, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[351, 3, 1, "", "mse_impact_lst"], [351, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[352, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[352, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[353, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[353, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[354, 2, 1, "", "TuneStrategy"], [354, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[354, 3, 1, "", "deploy_config"], [354, 4, 1, "", "evaluation_result"], [354, 3, 1, "", "initial_best_acc"], [354, 3, 1, "", "initial_tuning_cfg"], [354, 3, 1, "", "next_tune_cfg"], [354, 3, 1, "", "set_q_func"], [354, 3, 1, "", "set_tuning_space"], [354, 3, 1, "", "setup_resume"], [354, 3, 1, "", "show_baseline_info"], [354, 3, 1, "", "stop"], [354, 3, 1, "", "traverse"], [354, 3, 1, "", "update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils": [[355, 2, 1, "", "OpTuningConfig"], [356, 0, 0, "-", "tuning_sampler"], [357, 0, 0, "-", "tuning_space"], [358, 0, 0, "-", "tuning_structs"]], "neural_compressor.strategy.utils.OpTuningConfig": [[355, 3, 1, "", "from_state"], [355, 3, 1, "", "get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[358, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig": [[358, 3, 1, "", "from_state"], [358, 3, 1, "", "get_state"]], "neural_compressor.training": [[359, 2, 1, "", "CompressionManager"], [359, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[359, 2, 1, "", "CallBacks"], [359, 3, 1, "", "export"], [359, 3, 1, "", "save"]], "neural_compressor.training.CompressionManager.CallBacks": [[359, 3, 1, "", "on_after_compute_loss"], [359, 3, 1, "", "on_after_optimizer_step"], [359, 3, 1, "", "on_before_optimizer_step"], [359, 3, 1, "", "on_epoch_begin"], [359, 3, 1, "", "on_epoch_end"], [359, 3, 1, "", "on_step_begin"], [359, 3, 1, "", "on_step_end"], [359, 3, 1, "", "on_train_begin"], [359, 3, 1, "", "on_train_end"]], "neural_compressor.utils": [[363, 2, 1, "", "LayerHistogramCollector"], [360, 0, 0, "-", "collect_layer_histogram"], [361, 0, 0, "-", "constant"], [362, 0, 0, "-", "create_obj_from_config"], [363, 1, 1, "", "debug"], [363, 1, 1, "", "error"], [363, 1, 1, "", "fatal"], [363, 1, 1, "", "info"], [364, 0, 0, "-", "kl_divergence"], [365, 0, 0, "-", "load_huggingface"], [363, 1, 1, "", "log"], [366, 0, 0, "-", "logger"], [367, 0, 0, "-", "options"], [368, 0, 0, "-", "pytorch"], [369, 0, 0, "-", "utility"], [363, 1, 1, "", "warn"], [363, 1, 1, "", "warning"]], "neural_compressor.utils.LayerHistogramCollector": [[363, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[360, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[360, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[362, 1, 1, "", "create_dataloader"], [362, 1, 1, "", "create_dataset"], [362, 1, 1, "", "create_eval_func"], [362, 1, 1, "", "create_train_func"], [362, 1, 1, "", "get_algorithm"], [362, 1, 1, "", "get_func_from_config"], [362, 1, 1, "", "get_metrics"], [362, 1, 1, "", "get_postprocess"], [362, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[364, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[364, 3, 1, "", "expand_quantized_bins"], [364, 3, 1, "", "get_threshold"], [364, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.load_huggingface": [[365, 2, 1, "", "OptimizedModel"], [365, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.load_huggingface.OptimizedModel": [[365, 3, 1, "", "from_pretrained"]], "neural_compressor.utils.logger": [[366, 2, 1, "", "Logger"], [366, 1, 1, "", "debug"], [366, 1, 1, "", "error"], [366, 1, 1, "", "fatal"], [366, 1, 1, "", "info"], [366, 1, 1, "", "log"], [366, 1, 1, "", "warn"], [366, 1, 1, "", "warning"]], "neural_compressor.utils.logger.Logger": [[366, 3, 1, "", "get_logger"]], "neural_compressor.utils.options": [[367, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[368, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[369, 2, 1, "", "CpuInfo"], [369, 1, 1, "", "Dequantize"], [369, 1, 1, "", "DequantizeWeight"], [369, 2, 1, "", "GLOBAL_STATE"], [369, 2, 1, "", "LazyImport"], [369, 2, 1, "", "MODE"], [369, 2, 1, "", "Statistics"], [369, 1, 1, "", "combine_histogram"], [369, 1, 1, "", "compute_sparsity"], [369, 1, 1, "", "dump_data_to_local"], [369, 1, 1, "", "dump_elapsed_time"], [369, 1, 1, "", "equal_dicts"], [369, 1, 1, "", "fault_tolerant_file"], [369, 1, 1, "", "get_all_fp32_data"], [369, 1, 1, "", "get_size"], [369, 1, 1, "", "get_tensor_histogram"], [369, 1, 1, "", "get_tuning_history"], [369, 1, 1, "", "load_data_from_pkl"], [369, 1, 1, "", "recover"], [369, 1, 1, "", "set_random_seed"], [369, 1, 1, "", "set_resume_from"], [369, 1, 1, "", "set_tensorboard"], [369, 1, 1, "", "set_workspace"], [369, 1, 1, "", "singleton"], [369, 1, 1, "", "str2array"], [369, 1, 1, "", "time_limit"], [369, 1, 1, "", "version1_eq_version2"], [369, 1, 1, "", "version1_gt_version2"], [369, 1, 1, "", "version1_gte_version2"], [369, 1, 1, "", "version1_lt_version2"], [369, 1, 1, "", "version1_lte_version2"]], "neural_compressor.utils.utility.CpuInfo": [[369, 4, 1, "", "bf16"], [369, 4, 1, "", "cores_per_socket"], [369, 3, 1, "", "get_number_of_sockets"], [369, 4, 1, "", "vnni"]], "neural_compressor.utils.utility.Statistics": [[369, 3, 1, "", "print_stat"]], "neural_compressor.ux": [[445, 0, 0, "-", "components"], [504, 0, 0, "-", "inc_bench"], [513, 0, 0, "-", "utils"], [539, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[373, 0, 0, "-", "benchmark"], [377, 0, 0, "-", "config_generator"], [385, 0, 0, "-", "configuration_wizard"], [421, 0, 0, "-", "db_manager"], [426, 0, 0, "-", "diagnosis"], [434, 0, 0, "-", "file_browser"], [440, 0, 0, "-", "graph"], [446, 0, 0, "-", "jobs_management"], [450, 0, 0, "-", "manage_workspace"], [452, 0, 0, "-", "model"], [471, 0, 0, "-", "model_zoo"], [473, 0, 0, "-", "names_mapper"], [480, 0, 0, "-", "optimization"], [496, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[373, 2, 1, "", "Benchmarks"], [370, 0, 0, "-", "benchmark"], [371, 0, 0, "-", "benchmark_model"], [372, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[370, 2, 1, "", "Benchmark"], [370, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[370, 4, 1, "", "config_filename"], [370, 4, 1, "", "configuration_data"], [370, 3, 1, "", "execute"], [370, 3, 1, "", "generate_config"], [370, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[371, 1, 1, "", "benchmark_model"], [371, 1, 1, "", "parse_args"], [371, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[372, 1, 1, "", "benchmark_result_update"], [372, 1, 1, "", "benchmark_result_update_pytorch_script"], [372, 1, 1, "", "execute_benchmark"], [372, 1, 1, "", "execute_real_benchmark"], [372, 1, 1, "", "pytorch_script_bench_optimizations"], [372, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[374, 0, 0, "-", "benchmark_config_generator"], [375, 0, 0, "-", "config_generator"], [376, 0, 0, "-", "graph_optimization_config_generator"], [378, 0, 0, "-", "mixed_precision_config_generator"], [379, 0, 0, "-", "profiling_config_generator"], [380, 0, 0, "-", "pruning_config_generator"], [381, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[374, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[374, 3, 1, "", "generate"], [374, 3, 1, "", "generate_accuracy_config"], [374, 3, 1, "", "generate_evaluation_config"], [374, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[375, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[375, 3, 1, "", "generate"], [375, 3, 1, "", "generate_dataloader_config"], [375, 3, 1, "", "generate_model_config"], [375, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[376, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[376, 3, 1, "", "generate"], [376, 3, 1, "", "generate_evaluation_config"], [376, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[378, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[378, 3, 1, "", "generate"], [378, 3, 1, "", "generate_evaluation_config"], [378, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[379, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[379, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[380, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator": [[380, 3, 1, "", "generate"], [380, 3, 1, "", "generate_evaluation_config"], [380, 3, 1, "", "generate_pruning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[381, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[381, 3, 1, "", "generate"], [381, 3, 1, "", "generate_evaluation_config"], [381, 3, 1, "", "generate_quantization_config"], [381, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[382, 0, 0, "-", "configuration_parser"], [383, 0, 0, "-", "get_boundary_nodes"], [384, 0, 0, "-", "get_configuration"], [386, 0, 0, "-", "params_feeder"], [387, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[382, 2, 1, "", "ConfigurationParser"], [382, 1, 1, "", "normalize_string_list"], [382, 1, 1, "", "parse_list_value"], [382, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[382, 3, 1, "", "get_param_type"], [382, 3, 1, "", "parse"], [382, 3, 1, "", "parse_dataloader"], [382, 3, 1, "", "parse_evaluation_data"], [382, 3, 1, "", "parse_metric"], [382, 3, 1, "", "parse_transforms"], [382, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[383, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[384, 1, 1, "", "get_predefined_configuration"], [384, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[386, 2, 1, "", "Feeder"], [386, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[386, 3, 1, "", "feed"], [386, 3, 1, "", "get_dataloaders"], [386, 3, 1, "", "get_domains"], [386, 3, 1, "", "get_frameworks"], [386, 3, 1, "", "get_metrics"], [386, 3, 1, "", "get_models"], [386, 3, 1, "", "get_objectives"], [386, 3, 1, "", "get_precisions"], [386, 3, 1, "", "get_quantization_approaches"], [386, 3, 1, "", "get_strategies"], [386, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[387, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser": [[387, 3, 1, "", "generate_tree"], [387, 3, 1, "", "parse"], [387, 3, 1, "", "parse_entry"]], "neural_compressor.ux.components.db_manager": [[421, 2, 1, "", "DBManager"], [388, 0, 0, "-", "db_manager"], [397, 0, 0, "-", "db_models"], [416, 0, 0, "-", "db_operations"], [422, 0, 0, "-", "params_interfaces"], [423, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[421, 3, 1, "", "create_all"], [421, 3, 1, "", "create_sqlalchemy_engine"], [421, 4, 1, "", "engine"], [421, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[388, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[388, 3, 1, "", "create_all"], [388, 3, 1, "", "create_sqlalchemy_engine"], [388, 4, 1, "", "engine"], [388, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[389, 0, 0, "-", "benchmark"], [390, 0, 0, "-", "benchmark_result"], [391, 0, 0, "-", "dataloader"], [392, 0, 0, "-", "dataset"], [393, 0, 0, "-", "domain"], [394, 0, 0, "-", "domain_flavour"], [395, 0, 0, "-", "example"], [396, 0, 0, "-", "framework"], [398, 0, 0, "-", "metric"], [399, 0, 0, "-", "model"], [400, 0, 0, "-", "optimization"], [401, 0, 0, "-", "optimization_type"], [402, 0, 0, "-", "precision"], [403, 0, 0, "-", "profiling"], [404, 0, 0, "-", "profiling_result"], [405, 0, 0, "-", "project"], [406, 0, 0, "-", "pruning_details"], [407, 0, 0, "-", "transform"], [408, 0, 0, "-", "tuning_details"], [409, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[389, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[389, 3, 1, "", "add"], [389, 3, 1, "", "build_info"], [389, 3, 1, "", "clean_status"], [389, 3, 1, "", "delete_benchmark"], [389, 3, 1, "", "details"], [389, 3, 1, "", "list"], [389, 3, 1, "", "update_batch_size"], [389, 3, 1, "", "update_config_path"], [389, 3, 1, "", "update_cores_per_instance"], [389, 3, 1, "", "update_dataset"], [389, 3, 1, "", "update_duration"], [389, 3, 1, "", "update_execution_command"], [389, 3, 1, "", "update_log_path"], [389, 3, 1, "", "update_mode"], [389, 3, 1, "", "update_number_of_instance"], [389, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[390, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[390, 3, 1, "", "add"], [390, 3, 1, "", "build_info"], [390, 3, 1, "", "update_accuracy"], [390, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[391, 2, 1, "", "Dataloader"], [391, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[391, 3, 1, "", "list"], [391, 3, 1, "", "list_by_framework"], [391, 3, 1, "", "query_to_list"], [391, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[392, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[392, 3, 1, "", "add"], [392, 3, 1, "", "build_info"], [392, 3, 1, "", "delete_dataset"], [392, 3, 1, "", "details"], [392, 3, 1, "", "list"], [392, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[393, 2, 1, "", "Domain"], [393, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[393, 3, 1, "", "get_domain_id"], [393, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[394, 2, 1, "", "DomainFlavour"], [394, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[394, 3, 1, "", "get_domain_flavour_id"], [394, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[395, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[396, 2, 1, "", "Framework"], [396, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[396, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[398, 2, 1, "", "Metric"], [398, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[398, 3, 1, "", "list"], [398, 3, 1, "", "list_by_framework"], [398, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[399, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[399, 3, 1, "", "add"], [399, 3, 1, "", "build_info"], [399, 3, 1, "", "delete_model"], [399, 3, 1, "", "details"], [399, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[400, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[400, 3, 1, "", "add"], [400, 3, 1, "", "build_info"], [400, 3, 1, "", "clean_status"], [400, 3, 1, "", "delete_optimization"], [400, 3, 1, "", "details"], [400, 3, 1, "", "get_optimization_by_project_and_model"], [400, 3, 1, "", "get_pinned_benchmarks"], [400, 3, 1, "", "list"], [400, 3, 1, "", "pin_accuracy_benchmark"], [400, 3, 1, "", "pin_performance_benchmark"], [400, 3, 1, "", "unpin_benchmark"], [400, 3, 1, "", "update_batch_size"], [400, 3, 1, "", "update_config_path"], [400, 3, 1, "", "update_dataset"], [400, 3, 1, "", "update_duration"], [400, 3, 1, "", "update_execution_command"], [400, 3, 1, "", "update_log_path"], [400, 3, 1, "", "update_optimized_model"], [400, 3, 1, "", "update_precision"], [400, 3, 1, "", "update_pruning_details"], [400, 3, 1, "", "update_sampling_size"], [400, 3, 1, "", "update_status"], [400, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[401, 2, 1, "", "OptimizationType"], [401, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[401, 3, 1, "", "add"], [401, 3, 1, "", "get_optimization_type_by_id"], [401, 3, 1, "", "get_optimization_type_by_name"], [401, 3, 1, "", "get_optimization_type_for_precision"], [401, 3, 1, "", "get_optimization_type_id"], [401, 3, 1, "", "list"], [401, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[402, 2, 1, "", "Precision"], [402, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[402, 3, 1, "", "add"], [402, 3, 1, "", "get_precision_by_id"], [402, 3, 1, "", "get_precision_by_name"], [402, 3, 1, "", "get_precision_id"], [402, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[403, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[403, 3, 1, "", "add"], [403, 3, 1, "", "build_info"], [403, 3, 1, "", "clean_status"], [403, 3, 1, "", "delete_profiling"], [403, 3, 1, "", "details"], [403, 3, 1, "", "list"], [403, 3, 1, "", "update_dataset"], [403, 3, 1, "", "update_duration"], [403, 3, 1, "", "update_execution_command"], [403, 3, 1, "", "update_log_path"], [403, 3, 1, "", "update_num_threads"], [403, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[404, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[404, 3, 1, "", "add"], [404, 3, 1, "", "build_info"], [404, 3, 1, "", "bulk_add"], [404, 3, 1, "", "delete_results"], [404, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[405, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[405, 3, 1, "", "create_project"], [405, 3, 1, "", "delete_project"], [405, 3, 1, "", "get_model_by_name"], [405, 3, 1, "", "list_projects"], [405, 3, 1, "", "project_details"], [405, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[406, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails": [[406, 3, 1, "", "add"], [406, 3, 1, "", "build_info"], [406, 3, 1, "", "delete_pruning_details"], [406, 3, 1, "", "update"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[407, 2, 1, "", "Transform"], [407, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[407, 3, 1, "", "list"], [407, 3, 1, "", "list_by_domain"], [407, 3, 1, "", "list_by_framework"], [407, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[408, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[408, 3, 1, "", "add"], [408, 3, 1, "", "delete_tuning_details"], [408, 3, 1, "", "update"], [408, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[409, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[409, 3, 1, "", "add"], [409, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[416, 2, 1, "", "BenchmarkAPIInterface"], [416, 2, 1, "", "DatasetAPIInterface"], [416, 2, 1, "", "DiagnosisAPIInterface"], [416, 2, 1, "", "DictionariesAPIInterface"], [416, 2, 1, "", "ExamplesAPIInterface"], [416, 2, 1, "", "ModelAPIInterface"], [416, 2, 1, "", "OptimizationAPIInterface"], [416, 2, 1, "", "ProfilingAPIInterface"], [416, 2, 1, "", "ProjectAPIInterface"], [410, 0, 0, "-", "benchmark_api_interface"], [411, 0, 0, "-", "dataset_api_interface"], [412, 0, 0, "-", "db_operations"], [413, 0, 0, "-", "diagnosis_api_interface"], [414, 0, 0, "-", "dictionaries_api_interface"], [415, 0, 0, "-", "examples_api_interface"], [417, 0, 0, "-", "model_api_interface"], [418, 0, 0, "-", "optimization_api_interface"], [419, 0, 0, "-", "profiling_api_interface"], [420, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[416, 3, 1, "", "add_benchmark"], [416, 3, 1, "", "add_result"], [416, 3, 1, "", "clean_status"], [416, 3, 1, "", "delete_benchmark"], [416, 3, 1, "", "edit_benchmark"], [416, 3, 1, "", "get_benchmark_details"], [416, 3, 1, "", "list_benchmarks"], [416, 3, 1, "", "parse_benchmark_data"], [416, 3, 1, "", "parse_benchmark_edit_data"], [416, 3, 1, "", "update_benchmark_accuracy"], [416, 3, 1, "", "update_benchmark_duration"], [416, 3, 1, "", "update_benchmark_performance"], [416, 3, 1, "", "update_benchmark_status"], [416, 3, 1, "", "update_execution_command"], [416, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[416, 3, 1, "", "add_dataset"], [416, 3, 1, "", "check_if_custom_metric_or_dataloader"], [416, 3, 1, "", "dataloader_path"], [416, 3, 1, "", "delete_dataset"], [416, 3, 1, "", "generate_custom_template"], [416, 3, 1, "", "generate_template"], [416, 3, 1, "", "get_dataset_details"], [416, 3, 1, "", "get_predefined_dataset"], [416, 3, 1, "", "list_datasets"], [416, 3, 1, "", "parse_dataset_data"], [416, 3, 1, "", "prepare_predefined_dataloader"], [416, 3, 1, "", "prepare_predefined_transform"], [416, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[416, 3, 1, "", "generate_optimization"], [416, 3, 1, "", "get_op_details"], [416, 3, 1, "", "get_op_list"], [416, 3, 1, "", "histogram"], [416, 3, 1, "", "model_wise_params"], [416, 3, 1, "", "parse_model_wise_config"], [416, 3, 1, "", "parse_op_wise_config"], [416, 3, 1, "", "parse_optimization_data"], [416, 3, 1, "", "parse_wise_parameters"], [416, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[416, 3, 1, "", "list_dataloaders"], [416, 3, 1, "", "list_dataloaders_by_framework"], [416, 3, 1, "", "list_domain_flavours"], [416, 3, 1, "", "list_domains"], [416, 3, 1, "", "list_metrics"], [416, 3, 1, "", "list_metrics_by_framework"], [416, 3, 1, "", "list_optimization_types"], [416, 3, 1, "", "list_optimization_types_for_precision"], [416, 3, 1, "", "list_precisions"], [416, 3, 1, "", "list_transforms"], [416, 3, 1, "", "list_transforms_by_domain"], [416, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[416, 3, 1, "", "create_project"], [416, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[416, 3, 1, "", "add_model"], [416, 3, 1, "", "delete_model"], [416, 3, 1, "", "get_model_details"], [416, 3, 1, "", "list_models"], [416, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[416, 3, 1, "", "add_optimization"], [416, 3, 1, "", "add_pruning_optimization"], [416, 3, 1, "", "add_quantization_optimization"], [416, 3, 1, "", "add_standard_optimization"], [416, 3, 1, "", "add_tuning_history"], [416, 3, 1, "", "clean_status"], [416, 3, 1, "", "delete_optimization"], [416, 3, 1, "", "edit_optimization"], [416, 3, 1, "", "edit_pruning_details"], [416, 3, 1, "", "edit_tuning_details"], [416, 3, 1, "", "get_optimization_details"], [416, 3, 1, "", "get_pruning_details"], [416, 3, 1, "", "list_optimizations"], [416, 3, 1, "", "load_pruning_details_config"], [416, 3, 1, "", "parse_optimization_data"], [416, 3, 1, "", "parse_optimization_edit_data"], [416, 3, 1, "", "parse_tuning_history"], [416, 3, 1, "", "pin_accuracy_benchmark"], [416, 3, 1, "", "pin_performance_benchmark"], [416, 3, 1, "", "update_execution_command"], [416, 3, 1, "", "update_optimization_duration"], [416, 3, 1, "", "update_optimization_status"], [416, 3, 1, "", "update_optimized_model"], [416, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[416, 3, 1, "", "add_profiling"], [416, 3, 1, "", "add_result"], [416, 3, 1, "", "bulk_add_results"], [416, 3, 1, "", "clean_status"], [416, 3, 1, "", "delete_profiling"], [416, 3, 1, "", "edit_profiling"], [416, 3, 1, "", "get_profiling_details"], [416, 3, 1, "", "list_profilings"], [416, 3, 1, "", "parse_profiling_data"], [416, 3, 1, "", "parse_profiling_edit_data"], [416, 3, 1, "", "parse_profiling_result_data"], [416, 3, 1, "", "update_execution_command"], [416, 3, 1, "", "update_log_path"], [416, 3, 1, "", "update_profiling_duration"], [416, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[416, 3, 1, "", "add_dummy_dataset"], [416, 3, 1, "", "add_model"], [416, 3, 1, "", "create_project"], [416, 3, 1, "", "delete_project"], [416, 3, 1, "", "get_project_details"], [416, 3, 1, "", "list_projects"], [416, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[410, 2, 1, "", "BenchmarkAPIInterface"], [410, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[410, 3, 1, "", "add_benchmark"], [410, 3, 1, "", "add_result"], [410, 3, 1, "", "clean_status"], [410, 3, 1, "", "delete_benchmark"], [410, 3, 1, "", "edit_benchmark"], [410, 3, 1, "", "get_benchmark_details"], [410, 3, 1, "", "list_benchmarks"], [410, 3, 1, "", "parse_benchmark_data"], [410, 3, 1, "", "parse_benchmark_edit_data"], [410, 3, 1, "", "update_benchmark_accuracy"], [410, 3, 1, "", "update_benchmark_duration"], [410, 3, 1, "", "update_benchmark_performance"], [410, 3, 1, "", "update_benchmark_status"], [410, 3, 1, "", "update_execution_command"], [410, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[411, 2, 1, "", "DatasetAPIInterface"], [411, 1, 1, "", "initialize_associations"], [411, 1, 1, "", "initialize_precision_optimization_types_association"], [411, 1, 1, "", "search_in_list_of_dict"], [411, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [411, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[411, 3, 1, "", "add_dataset"], [411, 3, 1, "", "check_if_custom_metric_or_dataloader"], [411, 3, 1, "", "dataloader_path"], [411, 3, 1, "", "delete_dataset"], [411, 3, 1, "", "generate_custom_template"], [411, 3, 1, "", "generate_template"], [411, 3, 1, "", "get_dataset_details"], [411, 3, 1, "", "get_predefined_dataset"], [411, 3, 1, "", "list_datasets"], [411, 3, 1, "", "parse_dataset_data"], [411, 3, 1, "", "prepare_predefined_dataloader"], [411, 3, 1, "", "prepare_predefined_transform"], [411, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[412, 1, 1, "", "initialize_associations"], [412, 1, 1, "", "initialize_precision_optimization_types_association"], [412, 1, 1, "", "search_in_list_of_dict"], [412, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [412, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[413, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[413, 3, 1, "", "generate_optimization"], [413, 3, 1, "", "get_op_details"], [413, 3, 1, "", "get_op_list"], [413, 3, 1, "", "histogram"], [413, 3, 1, "", "model_wise_params"], [413, 3, 1, "", "parse_model_wise_config"], [413, 3, 1, "", "parse_op_wise_config"], [413, 3, 1, "", "parse_optimization_data"], [413, 3, 1, "", "parse_wise_parameters"], [413, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[414, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[414, 3, 1, "", "list_dataloaders"], [414, 3, 1, "", "list_dataloaders_by_framework"], [414, 3, 1, "", "list_domain_flavours"], [414, 3, 1, "", "list_domains"], [414, 3, 1, "", "list_metrics"], [414, 3, 1, "", "list_metrics_by_framework"], [414, 3, 1, "", "list_optimization_types"], [414, 3, 1, "", "list_optimization_types_for_precision"], [414, 3, 1, "", "list_precisions"], [414, 3, 1, "", "list_transforms"], [414, 3, 1, "", "list_transforms_by_domain"], [414, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[415, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[415, 3, 1, "", "create_project"], [415, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[417, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[417, 3, 1, "", "add_model"], [417, 3, 1, "", "delete_model"], [417, 3, 1, "", "get_model_details"], [417, 3, 1, "", "list_models"], [417, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[418, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[418, 3, 1, "", "add_optimization"], [418, 3, 1, "", "add_pruning_optimization"], [418, 3, 1, "", "add_quantization_optimization"], [418, 3, 1, "", "add_standard_optimization"], [418, 3, 1, "", "add_tuning_history"], [418, 3, 1, "", "clean_status"], [418, 3, 1, "", "delete_optimization"], [418, 3, 1, "", "edit_optimization"], [418, 3, 1, "", "edit_pruning_details"], [418, 3, 1, "", "edit_tuning_details"], [418, 3, 1, "", "get_optimization_details"], [418, 3, 1, "", "get_pruning_details"], [418, 3, 1, "", "list_optimizations"], [418, 3, 1, "", "load_pruning_details_config"], [418, 3, 1, "", "parse_optimization_data"], [418, 3, 1, "", "parse_optimization_edit_data"], [418, 3, 1, "", "parse_tuning_history"], [418, 3, 1, "", "pin_accuracy_benchmark"], [418, 3, 1, "", "pin_performance_benchmark"], [418, 3, 1, "", "update_execution_command"], [418, 3, 1, "", "update_optimization_duration"], [418, 3, 1, "", "update_optimization_status"], [418, 3, 1, "", "update_optimized_model"], [418, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[419, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[419, 3, 1, "", "add_profiling"], [419, 3, 1, "", "add_result"], [419, 3, 1, "", "bulk_add_results"], [419, 3, 1, "", "clean_status"], [419, 3, 1, "", "delete_profiling"], [419, 3, 1, "", "edit_profiling"], [419, 3, 1, "", "get_profiling_details"], [419, 3, 1, "", "list_profilings"], [419, 3, 1, "", "parse_profiling_data"], [419, 3, 1, "", "parse_profiling_edit_data"], [419, 3, 1, "", "parse_profiling_result_data"], [419, 3, 1, "", "update_execution_command"], [419, 3, 1, "", "update_log_path"], [419, 3, 1, "", "update_profiling_duration"], [419, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[420, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[420, 3, 1, "", "add_dummy_dataset"], [420, 3, 1, "", "add_model"], [420, 3, 1, "", "create_project"], [420, 3, 1, "", "delete_project"], [420, 3, 1, "", "get_project_details"], [420, 3, 1, "", "list_projects"], [420, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[422, 2, 1, "", "BenchmarkAddParamsInterface"], [422, 2, 1, "", "BenchmarkEditParamsInterface"], [422, 2, 1, "", "DatasetAddParamsInterface"], [422, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [422, 2, 1, "", "ModelAddParamsInterface"], [422, 2, 1, "", "OptimizationAddParamsInterface"], [422, 2, 1, "", "OptimizationEditParamsInterface"], [422, 2, 1, "", "ProfilingAddParamsInterface"], [422, 2, 1, "", "ProfilingEditParamsInterface"], [422, 2, 1, "", "ProfilingResultAddParamsInterface"], [422, 2, 1, "", "TuningHistoryInterface"], [422, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[422, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[422, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[422, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[423, 1, 1, "", "get_framework_dataloaders_config"], [423, 1, 1, "", "get_framework_transforms_config"], [423, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[424, 0, 0, "-", "diagnosis"], [425, 0, 0, "-", "factory"], [427, 0, 0, "-", "onnx_diagnosis"], [429, 0, 0, "-", "op_details"], [430, 0, 0, "-", "op_entry"], [431, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[424, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[424, 3, 1, "", "calculate_mse"], [424, 3, 1, "", "get_histogram_data"], [424, 3, 1, "", "get_op_details"], [424, 3, 1, "", "get_op_list"], [424, 3, 1, "", "get_tensors_info"], [424, 3, 1, "", "load_quantization_config"], [424, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[425, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[425, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[428, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[428, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[428, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[429, 2, 1, "", "OpActivation"], [429, 2, 1, "", "OpDetails"], [429, 2, 1, "", "OpPattern"], [429, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[429, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[430, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[430, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[432, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[432, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[432, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[433, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[433, 1, 1, "", "create_dir_entry"], [433, 1, 1, "", "create_entry"], [433, 1, 1, "", "create_file_entry"], [433, 1, 1, "", "filter_requested_entries"], [433, 1, 1, "", "get_directory_entries"], [433, 1, 1, "", "get_filter_value"], [433, 1, 1, "", "get_non_hidden_directory_entries"], [433, 1, 1, "", "get_requested_path"], [433, 1, 1, "", "get_setting_value"], [433, 1, 1, "", "is_dataset_or_directory_entry"], [433, 1, 1, "", "is_directory_entry"], [433, 1, 1, "", "is_model_or_directory_entry"], [433, 1, 1, "", "should_show_files"], [433, 1, 1, "", "should_show_only_model_files"], [433, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[435, 0, 0, "-", "attribute"], [436, 0, 0, "-", "collapser"], [437, 0, 0, "-", "edge"], [438, 0, 0, "-", "graph"], [439, 0, 0, "-", "graph_reader"], [441, 0, 0, "-", "node"], [442, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[435, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[436, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[436, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[437, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[437, 4, 1, "", "source"], [437, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[438, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[438, 3, 1, "", "add_edge"], [438, 3, 1, "", "add_node"], [438, 4, 1, "", "edges"], [438, 3, 1, "", "get_node"], [438, 3, 1, "", "get_target_nodes"], [438, 3, 1, "", "highlight_pattern"], [438, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[439, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[439, 3, 1, "", "find_pattern_in_graph"], [439, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[441, 2, 1, "", "GroupNode"], [441, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[443, 0, 0, "-", "onnxrt_reader"], [444, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[443, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[443, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[444, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[444, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[447, 0, 0, "-", "jobs_control_queue"], [448, 0, 0, "-", "jobs_manager"], [449, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[450, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[451, 0, 0, "-", "domain"], [453, 0, 0, "-", "model"], [454, 0, 0, "-", "model_type_getter"], [455, 0, 0, "-", "onnxrt"], [457, 0, 0, "-", "pytorch"], [459, 0, 0, "-", "repository"], [460, 0, 0, "-", "shape"], [462, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[451, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[453, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[453, 4, 1, "", "domain"], [453, 3, 1, "", "ensure_supported_path"], [453, 3, 1, "", "get_framework_name"], [453, 3, 1, "", "get_input_nodes"], [453, 3, 1, "", "get_model_graph"], [453, 3, 1, "", "get_output_nodes"], [453, 3, 1, "", "get_tensors_info"], [453, 3, 1, "", "guard_requirements_installed"], [453, 4, 1, "", "input_shape"], [453, 4, 1, "", "shape_elements_order"], [453, 4, 1, "", "supports_graph"], [453, 3, 1, "", "supports_path"], [453, 4, 1, "", "supports_profiling"], [453, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.model_type_getter": [[454, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[456, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[456, 2, 1, "", "OnnxrtModel"], [456, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[456, 4, 1, "", "domain"], [456, 4, 1, "", "filtered_input_nodes"], [456, 3, 1, "", "get_framework_name"], [456, 3, 1, "", "get_model_graph"], [456, 3, 1, "", "guard_requirements_installed"], [456, 4, 1, "", "input_shape"], [456, 4, 1, "", "nc_model_instance"], [456, 4, 1, "", "shape_elements_order"], [456, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[458, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[458, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[458, 3, 1, "", "get_framework_name"], [458, 3, 1, "", "guard_requirements_installed"], [458, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[459, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[459, 3, 1, "", "get_framework_from_path"], [459, 3, 1, "", "get_frameworks"], [459, 3, 1, "", "get_model"], [459, 3, 1, "", "get_supported_frameworks"], [459, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[460, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[460, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[461, 0, 0, "-", "frozen_pb"], [463, 0, 0, "-", "keras"], [464, 0, 0, "-", "meta_graph"], [465, 0, 0, "-", "model"], [466, 0, 0, "-", "saved_model"], [467, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[461, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[461, 3, 1, "", "supports_path"], [461, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[463, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[463, 3, 1, "", "get_input_nodes"], [463, 3, 1, "", "get_output_nodes"], [463, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[464, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[464, 3, 1, "", "get_input_nodes"], [464, 3, 1, "", "get_model_graph"], [464, 3, 1, "", "get_output_nodes"], [464, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[465, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[465, 3, 1, "", "get_framework_name"], [465, 3, 1, "", "get_input_nodes"], [465, 3, 1, "", "get_model_graph"], [465, 3, 1, "", "get_output_nodes"], [465, 3, 1, "", "guard_requirements_installed"], [465, 4, 1, "", "input_shape"], [465, 4, 1, "", "nc_model_instance"], [465, 4, 1, "", "shape_elements_order"], [465, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[466, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[466, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[467, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[468, 0, 0, "-", "download_config"], [469, 0, 0, "-", "download_model"], [470, 0, 0, "-", "downloader"], [472, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[468, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[469, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[470, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[470, 3, 1, "", "download"], [470, 3, 1, "", "download_config"], [470, 3, 1, "", "download_file"], [470, 3, 1, "", "download_model"], [470, 3, 1, "", "download_yaml_config"], [470, 3, 1, "", "get_yaml_url"], [470, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[472, 1, 1, "", "check_version"], [472, 1, 1, "", "get_available_models"], [472, 1, 1, "", "get_framework_module_name"], [472, 1, 1, "", "get_installed_frameworks"], [472, 1, 1, "", "list_models"], [472, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[474, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[474, 2, 1, "", "MappingDirection"], [474, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[474, 4, 1, "", "domain_flavour_mappings"], [474, 4, 1, "", "domain_mappings"], [474, 4, 1, "", "framework_mappings"], [474, 3, 1, "", "map_name"], [474, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[480, 2, 1, "", "Optimizations"], [475, 0, 0, "-", "execute_optimization"], [476, 0, 0, "-", "factory"], [478, 0, 0, "-", "graph_optimizer"], [481, 0, 0, "-", "mixed_precision"], [484, 0, 0, "-", "neural_coder_optimization"], [486, 0, 0, "-", "optimization"], [487, 0, 0, "-", "pruning"], [490, 0, 0, "-", "tune"], [493, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[475, 1, 1, "", "check_if_collect_tuning_history"], [475, 1, 1, "", "execute_optimization"], [475, 1, 1, "", "execute_optimization_pytorch_script"], [475, 1, 1, "", "execute_optimization_regular"], [475, 1, 1, "", "parse_logs"], [475, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[476, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[476, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[477, 0, 0, "-", "graph_optimization"], [479, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[477, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[477, 4, 1, "", "configuration_data"], [477, 3, 1, "", "execute"], [477, 3, 1, "", "generate_config"], [477, 4, 1, "", "optimization_script"], [477, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[479, 1, 1, "", "optimize_graph"], [479, 1, 1, "", "optimize_graph_config"], [479, 1, 1, "", "parse_args"], [479, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[482, 0, 0, "-", "mixed_precision"], [483, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[482, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[482, 4, 1, "", "configuration_data"], [482, 3, 1, "", "execute"], [482, 3, 1, "", "generate_config"], [482, 4, 1, "", "optimization_script"], [482, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[483, 1, 1, "", "optimize_graph"], [483, 1, 1, "", "optimize_graph_config"], [483, 1, 1, "", "parse_args"], [483, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[485, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[485, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[486, 2, 1, "", "DataloaderInterface"], [486, 2, 1, "", "Optimization"], [486, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[486, 4, 1, "", "command"], [486, 4, 1, "", "config_filename"], [486, 4, 1, "", "configuration_data"], [486, 3, 1, "", "execute"], [486, 3, 1, "", "generate_config"], [486, 4, 1, "", "optimization_script"], [486, 4, 1, "", "output_model_dir"], [486, 4, 1, "", "output_model_name"], [486, 4, 1, "", "parameters"], [486, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.pruning": [[488, 0, 0, "-", "optimize_model"], [489, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[488, 1, 1, "", "optimize_model"], [488, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[489, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning.Pruning": [[489, 4, 1, "", "configuration_data"], [489, 3, 1, "", "execute"], [489, 3, 1, "", "generate_config"], [489, 4, 1, "", "optimization_script"], [489, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tune": [[491, 0, 0, "-", "tune_model"], [492, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[491, 1, 1, "", "parse_args"], [491, 1, 1, "", "set_eager_execution"], [491, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[492, 2, 1, "", "AccuracyCriterion"], [492, 2, 1, "", "Tuning"], [492, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[492, 4, 1, "", "configuration_data"], [492, 3, 1, "", "execute"], [492, 3, 1, "", "generate_config"], [492, 4, 1, "", "optimization_script"], [492, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[493, 2, 1, "", "TuningHistory"], [493, 2, 1, "", "Watcher"], [493, 1, 1, "", "tuning_history"], [493, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[493, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[493, 3, 1, "", "history_file_modification_time"], [493, 3, 1, "", "stop"], [493, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[494, 0, 0, "-", "execute_profiling"], [495, 0, 0, "-", "factory"], [497, 0, 0, "-", "profile_model"], [498, 0, 0, "-", "profiler"], [499, 0, 0, "-", "profiling"], [501, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[494, 1, 1, "", "execute_profiling"], [494, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[495, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[495, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[497, 1, 1, "", "load_profiling_details"], [497, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[498, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[498, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[499, 2, 1, "", "DataloaderInterface"], [499, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[499, 4, 1, "", "config_filename"], [499, 4, 1, "", "config_path"], [499, 3, 1, "", "execute"], [499, 3, 1, "", "generate_config"], [499, 4, 1, "", "profiling_data"], [499, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[500, 0, 0, "-", "factory"], [502, 0, 0, "-", "profiler"], [503, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[500, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[500, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[502, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[502, 3, 1, "", "build_dataloader"], [502, 3, 1, "", "convert_nodes_to_list"], [502, 3, 1, "", "create_tf_config"], [502, 3, 1, "", "get_node_by_name"], [502, 3, 1, "", "initialize_graph"], [502, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[503, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[504, 1, 1, "", "main"], [504, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[506, 0, 0, "-", "consts"], [507, 0, 0, "-", "environment"], [508, 0, 0, "-", "exceptions"], [509, 0, 0, "-", "executor"], [510, 0, 0, "-", "expiring_dict"], [511, 0, 0, "-", "github_info"], [512, 0, 0, "-", "hw_info"], [514, 0, 0, "-", "json_serializer"], [515, 0, 0, "-", "logger"], [516, 0, 0, "-", "parser"], [517, 0, 0, "-", "proc"], [518, 0, 0, "-", "processes"], [519, 0, 0, "-", "singleton"], [520, 0, 0, "-", "status_updates"], [521, 0, 0, "-", "templates"], [524, 0, 0, "-", "utils"], [529, 0, 0, "-", "workload"], [535, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[506, 2, 1, "", "DomainFlavours"], [506, 2, 1, "", "Domains"], [506, 2, 1, "", "ExecutionStatus"], [506, 2, 1, "", "Frameworks"], [506, 2, 1, "", "OptimizationTypes"], [506, 2, 1, "", "Precisions"], [506, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[507, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[507, 3, 1, "", "clean_workloads_wip_status"], [507, 3, 1, "", "ensure_workdir_exists_and_writeable"], [507, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[508, 7, 1, "", "AccessDeniedException"], [508, 7, 1, "", "ClientErrorException"], [508, 7, 1, "", "InternalException"], [508, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[509, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[509, 4, 1, "", "additional_log_names"], [509, 3, 1, "", "call"], [509, 3, 1, "", "call_one"], [509, 3, 1, "", "is_multi_commands"], [509, 4, 1, "", "log_name"], [509, 4, 1, "", "process_duration"], [509, 3, 1, "", "refresh_workdir"], [509, 4, 1, "", "request_id"], [509, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[510, 2, 1, "", "ExpiringDict"], [510, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[510, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[511, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[511, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[512, 2, 1, "", "HWInfo"], [512, 1, 1, "", "get_bios_version"], [512, 1, 1, "", "get_distribution"], [512, 1, 1, "", "get_framework_dependency_info"], [512, 1, 1, "", "get_framework_info"], [512, 1, 1, "", "get_kernel_version"], [512, 1, 1, "", "get_number_of_sockets"], [512, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[512, 3, 1, "", "initialize"], [512, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[514, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[514, 3, 1, "", "serialize"], [514, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[515, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[516, 2, 1, "", "AccuracyParser"], [516, 2, 1, "", "BenchmarkParserFactory"], [516, 2, 1, "", "OptimizationParser"], [516, 2, 1, "", "Parser"], [516, 2, 1, "", "PerformanceParser"], [516, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[516, 4, 1, "", "patterns"], [516, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[516, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[516, 4, 1, "", "patterns"], [516, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[516, 4, 1, "", "patterns"], [516, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[516, 4, 1, "", "patterns"], [516, 3, 1, "", "process"], [516, 3, 1, "", "summarize_partial"], [516, 3, 1, "", "summarize_value"], [516, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[516, 4, 1, "", "patterns"], [516, 3, 1, "", "process"], [516, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[517, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[517, 4, 1, "", "info"], [517, 4, 1, "", "info_path"], [517, 4, 1, "", "is_ok"], [517, 4, 1, "", "output"], [517, 4, 1, "", "output_path"], [517, 3, 1, "", "remove_logs"], [517, 3, 1, "", "run"], [517, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[518, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[518, 4, 1, "", "is_ok"], [518, 3, 1, "", "remove_successful_logs"], [518, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[519, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[520, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[522, 0, 0, "-", "metric"], [523, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[522, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[522, 4, 1, "", "acc_input_model"], [522, 4, 1, "", "acc_optimized_model"], [522, 4, 1, "", "accuracy"], [522, 3, 1, "", "calculate_throughput"], [522, 3, 1, "", "insert_data"], [522, 4, 1, "", "latency"], [522, 4, 1, "", "optimization_time"], [522, 4, 1, "", "path_optimized_model"], [522, 4, 1, "", "profiling_data"], [522, 4, 1, "", "size_input_model"], [522, 4, 1, "", "size_optimized_model"], [522, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[523, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[523, 3, 1, "", "clean_logs"], [523, 3, 1, "", "clean_status"], [523, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[524, 1, 1, "", "check_module"], [524, 1, 1, "", "deprecated"], [524, 1, 1, "", "determine_ip"], [524, 1, 1, "", "export_to_csv"], [524, 1, 1, "", "filter_transforms"], [524, 1, 1, "", "get_dataset_path"], [524, 1, 1, "", "get_default_pruning_config_path"], [524, 1, 1, "", "get_file_extension"], [524, 1, 1, "", "get_framework_from_path"], [524, 1, 1, "", "get_height_width_from_size"], [524, 1, 1, "", "get_metrics_dict"], [524, 1, 1, "", "get_model_zoo_config_path"], [524, 1, 1, "", "get_model_zoo_model_path"], [524, 1, 1, "", "get_module_version"], [524, 1, 1, "", "get_predefined_config_path"], [524, 1, 1, "", "get_shape_from_transforms"], [524, 1, 1, "", "get_size"], [524, 1, 1, "", "is_dataset_file"], [524, 1, 1, "", "is_development_env"], [524, 1, 1, "", "is_hidden"], [524, 1, 1, "", "load_dataloader_config"], [524, 1, 1, "", "load_help_nc_params"], [524, 1, 1, "", "load_metrics_config"], [524, 1, 1, "", "load_model_config"], [524, 1, 1, "", "load_model_wise_params"], [524, 1, 1, "", "load_precisions_config"], [524, 1, 1, "", "load_pruning_details_config"], [524, 1, 1, "", "load_transforms_config"], [524, 1, 1, "", "load_transforms_filter_config"], [524, 1, 1, "", "normalize_domain"], [524, 1, 1, "", "normalize_framework"], [524, 1, 1, "", "normalize_string"], [524, 1, 1, "", "parse_bool_value"], [524, 1, 1, "", "parse_to_float_list"], [524, 1, 1, "", "parse_to_string_list"], [524, 1, 1, "", "parse_version"], [524, 1, 1, "", "release_tag"], [524, 1, 1, "", "replace_with_values"], [524, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[525, 0, 0, "-", "config"], [526, 0, 0, "-", "dataloader"], [527, 0, 0, "-", "evaluation"], [528, 0, 0, "-", "graph_optimization"], [530, 0, 0, "-", "mixed_precision"], [531, 0, 0, "-", "model"], [532, 0, 0, "-", "pruning"], [533, 0, 0, "-", "quantization"], [534, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[525, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[525, 3, 1, "", "dump"], [525, 3, 1, "", "get_performance_configs"], [525, 3, 1, "", "get_performance_cores_per_instance"], [525, 3, 1, "", "get_performance_num_of_instance"], [525, 3, 1, "", "initialize"], [525, 3, 1, "", "load"], [525, 3, 1, "", "process_transform"], [525, 3, 1, "", "remove_accuracy_metric"], [525, 3, 1, "", "remove_dataloader"], [525, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [525, 3, 1, "", "set_accuracy_goal"], [525, 3, 1, "", "set_accuracy_metric"], [525, 3, 1, "", "set_evaluation_dataloader"], [525, 3, 1, "", "set_evaluation_dataset_path"], [525, 3, 1, "", "set_inputs"], [525, 3, 1, "", "set_optimization_precision"], [525, 3, 1, "", "set_outputs"], [525, 3, 1, "", "set_performance_cores_per_instance"], [525, 3, 1, "", "set_performance_iterations"], [525, 3, 1, "", "set_performance_num_of_instance"], [525, 3, 1, "", "set_performance_warmup"], [525, 3, 1, "", "set_quantization_approach"], [525, 3, 1, "", "set_quantization_batch_size"], [525, 3, 1, "", "set_quantization_dataloader"], [525, 3, 1, "", "set_quantization_dataset_path"], [525, 3, 1, "", "set_quantization_sampling_size"], [525, 3, 1, "", "set_transform"], [525, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[526, 2, 1, "", "Dataloader"], [526, 2, 1, "", "Dataset"], [526, 2, 1, "", "Filter"], [526, 2, 1, "", "LabelBalance"], [526, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[526, 3, 1, "", "serialize"], [526, 3, 1, "", "set_dataset"], [526, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[526, 3, 1, "", "is_dummy"], [526, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[526, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[527, 2, 1, "", "Accuracy"], [527, 2, 1, "", "Configs"], [527, 2, 1, "", "Evaluation"], [527, 2, 1, "", "Metric"], [527, 2, 1, "", "Performance"], [527, 2, 1, "", "Postprocess"], [527, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[527, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[527, 4, 1, "", "name"], [527, 4, 1, "", "param"], [527, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema": [[527, 3, 1, "", "get_label_shift_value"]], "neural_compressor.ux.utils.workload.graph_optimization": [[528, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[528, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[530, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[530, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[531, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[531, 4, 1, "", "inputs"], [531, 4, 1, "", "outputs"], [531, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[532, 2, 1, "", "AdamOptimizer"], [532, 2, 1, "", "AdamWOptimizer"], [532, 2, 1, "", "Approach"], [532, 2, 1, "", "Criterion"], [532, 2, 1, "", "CrossEntropyLossCriterion"], [532, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [532, 2, 1, "", "KnowledgeDistillationLossCriterion"], [532, 2, 1, "", "Optimizer"], [532, 2, 1, "", "Pruning"], [532, 2, 1, "", "SGDOptimizer"], [532, 2, 1, "", "SelfKnowledgeDistillationLoss"], [532, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [532, 2, 1, "", "Train"], [532, 2, 1, "", "WeightCompressionApproach"], [532, 1, 1, "", "parse_dict_value_to_float"], [532, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[532, 3, 1, "", "serialize"], [532, 3, 1, "", "set_postprocess_transforms"]], "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach": [[532, 3, 1, "", "initialize_pruners"], [532, 3, 1, "", "serialize"], [532, 3, 1, "", "serialize_pruner"]], "neural_compressor.ux.utils.workload.quantization": [[533, 2, 1, "", "Advance"], [533, 2, 1, "", "Calibration"], [533, 2, 1, "", "Quantization"], [533, 2, 1, "", "WiseConfig"], [533, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[534, 2, 1, "", "AccCriterion"], [534, 2, 1, "", "Diagnosis"], [534, 2, 1, "", "ExitPolicy"], [534, 2, 1, "", "MultiObjectives"], [534, 2, 1, "", "Strategy"], [534, 2, 1, "", "Tuning"], [534, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[534, 4, 1, "", "objective"], [534, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[534, 3, 1, "", "set_max_trials"], [534, 3, 1, "", "set_performance_only"], [534, 3, 1, "", "set_random_seed"], [534, 3, 1, "", "set_timeout"], [534, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[535, 1, 1, "", "float_representer"], [535, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[536, 0, 0, "-", "communication"], [537, 0, 0, "-", "configuration"], [538, 0, 0, "-", "exceptions"], [540, 0, 0, "-", "router"], [541, 0, 0, "-", "server"], [544, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[536, 2, 1, "", "Message"], [536, 2, 1, "", "MessageQueue"], [536, 2, 1, "", "Request"], [536, 2, 1, "", "Response"], [536, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[536, 4, 1, "", "data"], [536, 4, 1, "", "status"], [536, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[536, 3, 1, "", "get"], [536, 3, 1, "", "post_error"], [536, 3, 1, "", "post_failure"], [536, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[537, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[537, 3, 1, "", "determine_gui_port"], [537, 3, 1, "", "determine_log_level"], [537, 3, 1, "", "determine_server_port"], [537, 3, 1, "", "determine_url_prefix"], [537, 3, 1, "", "determine_values_from_environment"], [537, 3, 1, "", "dump_token_to_file"], [537, 3, 1, "", "get_command_line_args"], [537, 3, 1, "", "get_url"], [537, 4, 1, "", "global_config_directory"], [537, 3, 1, "", "is_port_taken"], [537, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[538, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[540, 2, 1, "", "DeferredRoutingDefinition"], [540, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [540, 2, 1, "", "RealtimeRoutingDefinition"], [540, 2, 1, "", "Router"], [540, 2, 1, "", "RoutingDefinition"], [540, 1, 1, "", "find_pattern_in_graph"], [540, 1, 1, "", "get_model_graph"], [540, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[540, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[541, 1, 1, "", "allow_api_call"], [541, 1, 1, "", "block_iframe"], [541, 1, 1, "", "block_sniffing"], [541, 1, 1, "", "build_parameters"], [541, 1, 1, "", "disable_cache"], [541, 1, 1, "", "get_tls_args"], [541, 1, 1, "", "handle_api_call"], [541, 1, 1, "", "page_not_found"], [541, 1, 1, "", "require_api_token"], [541, 1, 1, "", "root"], [541, 1, 1, "", "run_server"], [541, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[542, 0, 0, "-", "benchmark"], [543, 0, 0, "-", "history_snapshot_parser"], [545, 0, 0, "-", "model"], [546, 0, 0, "-", "optimization"], [547, 0, 0, "-", "profiling"], [548, 0, 0, "-", "request_data_processor"], [549, 0, 0, "-", "response_generator"], [550, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[542, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[543, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[543, 3, 1, "", "extract_accuracy"], [543, 3, 1, "", "extract_performance"], [543, 3, 1, "", "parse_history_item"], [543, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[545, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[545, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[546, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[547, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[547, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[548, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[548, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[549, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[549, 3, 1, "", "add_refresh"], [549, 3, 1, "", "from_exception"], [549, 3, 1, "", "get_status_code_for_exception"], [549, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[550, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[550, 3, 1, "", "get_code_template"], [550, 3, 1, "", "get_config"], [550, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data", "6": "py:attribute", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"contributor": [0, 1], "coven": [0, 1], "code": [0, 1, 3], "conduct": [0, 1], "our": 0, "pledg": 0, "standard": 0, "respons": 0, "scope": 0, "enforc": 0, "attribut": [0, 200, 208, 217, 246, 255, 266, 294, 319, 435], "contribut": 1, "guidelin": 1, "pull": 1, "request": [1, 449], "checklist": 1, "templat": [1, 521, 522, 523], "support": [1, 2, 3, 5, 6, 553, 554, 555, 557, 559, 561, 563, 566, 569, 570, 571, 572, 573, 575, 578, 579, 583, 584, 586], "fx": 2, "introduct": [2, 3, 6, 552, 553, 554, 555, 557, 558, 559, 561, 563, 566, 569, 570, 571, 572, 573, 575, 576, 578, 579, 582, 583, 584, 585, 586], "mode": [2, 587], "matrix": [2, 3, 6, 553, 554, 555, 557, 559, 561, 563, 566, 569, 570, 571, 572, 573, 575, 578, 579, 583, 586], "neural": [2, 3, 5, 25, 552, 565, 566, 575, 576, 582], "compressor": [2, 5, 552, 565, 566, 582], "get": [2, 3, 5, 6, 553, 554, 555, 557, 559, 563, 569, 570, 572, 573, 575, 578, 579, 583, 586], "start": [2, 3, 5, 6, 552, 553, 554, 555, 557, 559, 563, 569, 570, 572, 573, 575, 578, 579, 583, 586], "post": [2, 579], "train": [2, 35, 359, 559, 579], "static": [2, 579], "quantiz": [2, 5, 27, 34, 50, 77, 306, 343, 533, 558, 578, 579, 580, 587], "dynam": [2, 3, 579], "awar": [2, 579], "exampl": [2, 3, 6, 395, 553, 554, 555, 557, 558, 559, 560, 561, 570, 571, 572, 573, 575, 576, 579, 583, 587], "note": [2, 581], "detail": [2, 552], "common": [2, 11, 225, 226, 227, 228, 229, 230, 231, 232, 562], "problem": 2, "architectur": [3, 5, 25, 556, 566], "search": [3, 25], "basic": [3, 345, 585], "na": [3, 25, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 578], "api": [3, 5, 6, 10, 22, 553, 554, 555, 557, 559, 564, 569, 570, 572, 573, 575, 578], "usag": [3, 583, 585], "1": [3, 552, 559, 562, 564, 567, 587], "python": [3, 5, 36, 569, 578], "yaml": [3, 554, 555, 558, 559, 563, 586], "2": [3, 22, 552, 559, 562, 564, 567, 587], "onli": 3, "advanc": 3, "custom": [3, 552, 569, 585], "secur": [4, 552, 559], "polici": [4, 585], "report": 4, "vulner": 4, "intel": [5, 552, 565, 566, 587], "instal": [5, 552, 567], "prerequisit": [5, 567], "linux": [5, 567], "jupyterlab": 5, "extens": [5, 587], "gui": 5, "system": [5, 552, 574], "requir": 5, "valid": [5, 587], "hardwar": [5, 587], "environ": [5, 507], "cpu": [5, 587], "base": 5, "64": 5, "compat": 5, "processor": 5, "gpu": 5, "built": [5, 564, 569], "": 5, "xe": 5, "onnx": [5, 179, 579, 587], "model": [5, 20, 30, 229, 318, 319, 320, 321, 322, 323, 324, 325, 326, 399, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 531, 545, 552, 561, 571, 587], "multipl": [5, 572, 587], "vendor": 5, "through": [5, 587], "runtim": [5, 579, 587], "softwar": 5, "document": [5, 565], "select": 5, "public": [5, 577], "event": [5, 577], "addit": 5, "content": [5, 13, 25, 41, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 181, 182, 183, 184, 185, 186, 187, 188, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 441, 443, 444, 450, 451, 453, 454, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 479, 480, 482, 483, 485, 486, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552], "hire": 5, "adaptor": [6, 7, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "work": [6, 579], "flow": [6, 579], "queri": [6, 80], "background": 6, "ad": 6, "new": [6, 552, 585], "backend": 6, "capabl": 6, "implement": 6, "onnxrtadaptor": 6, "class": [6, 13, 25, 46, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 143, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 177, 182, 183, 184, 185, 186, 187, 188, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 286, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 303, 304, 305, 306, 307, 308, 309, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 358, 359, 360, 363, 364, 365, 366, 367, 369, 370, 373, 374, 375, 376, 378, 379, 380, 381, 382, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 428, 429, 430, 432, 435, 436, 437, 438, 439, 441, 443, 444, 451, 453, 456, 458, 459, 460, 461, 463, 464, 465, 466, 470, 474, 476, 477, 480, 482, 486, 489, 492, 493, 495, 498, 499, 500, 502, 506, 507, 509, 510, 511, 512, 514, 516, 517, 518, 519, 522, 523, 525, 526, 527, 528, 530, 531, 532, 533, 534, 536, 537, 540, 542, 543, 545, 546, 547, 548, 549, 550], "onnxrt": [8, 54, 455, 456, 555, 569, 584], "algorithm": [9, 182, 183, 184, 185], "benchmark": [12, 32, 186, 224, 370, 371, 372, 373, 389, 542, 552, 553, 578], "bleu": [13, 267, 309], "modul": [13, 41, 45, 46, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 140, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 181, 182, 183, 185, 186, 187, 188, 191, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 258, 259, 260, 262, 263, 264, 265, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 286, 287, 288, 290, 291, 292, 293, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 309, 310, 312, 313, 314, 316, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 441, 443, 444, 450, 451, 453, 454, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 479, 482, 483, 485, 486, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550], "criterion": [14, 225], "data": [15, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259], "dataload": [16, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 226, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 391, 526, 554, 555], "basedataload": 16, "dataset": [17, 206, 207, 208, 209, 210, 211, 212, 213, 244, 245, 246, 247, 248, 249, 250, 251, 392, 552, 555, 564], "transform": [18, 218, 219, 220, 221, 222, 223, 256, 257, 258, 259, 407, 564, 584], "metric": [19, 228, 267, 268, 269, 270, 271, 272, 273, 274, 309, 310, 311, 312, 313, 314, 315, 316, 398, 522, 564, 569], "optim": [21, 230, 400, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 546, 552, 573], "compon": [22, 233, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503], "experiement": 22, "deprec": 22, "0": [22, 587], "distil": [23, 260, 557, 558, 578, 587], "mixedprecis": 24, "packag": [25, 47, 68, 184, 200, 212, 216, 217, 220, 227, 238, 250, 254, 255, 257, 261, 266, 273, 289, 294, 295, 308, 315, 319, 334, 350, 355, 363, 373, 416, 421, 480], "prune": [26, 293, 304, 339, 487, 488, 489, 532, 552, 575, 576, 578, 587], "schedul": [28, 305, 307, 341, 575, 576], "contrib": [29, 192, 193, 194, 195], "newapi": 31, "object": [33, 327, 572], "strategi": [37, 38, 193, 194, 195, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 582, 585], "util": [39, 53, 78, 175, 181, 264, 342, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 423, 467, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535], "644ec953a7dc_pruning_support": 40, "6ece06672ed3_v1_14": 41, "function": [41, 45, 46, 53, 72, 78, 79, 101, 102, 104, 146, 148, 175, 177, 181, 182, 184, 186, 188, 198, 206, 208, 212, 215, 216, 217, 220, 222, 223, 224, 225, 227, 230, 232, 236, 244, 246, 250, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 267, 268, 270, 271, 272, 273, 274, 282, 286, 287, 291, 296, 301, 302, 303, 305, 308, 309, 310, 312, 313, 314, 315, 316, 321, 325, 327, 328, 331, 337, 338, 340, 341, 342, 343, 346, 354, 359, 362, 363, 365, 366, 368, 369, 371, 372, 382, 383, 384, 386, 391, 393, 394, 396, 398, 401, 402, 407, 410, 411, 412, 423, 433, 450, 454, 456, 467, 468, 469, 472, 475, 479, 483, 485, 488, 491, 493, 494, 497, 503, 504, 512, 515, 520, 524, 532, 535, 536, 540, 541, 559], "6f0d0f71d92e_v1_13": 42, "9e89549a08c8_v1_11": 43, "block_mask": 44, "env": 45, "neural_compressor": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551], "subpackag": [47, 56, 122, 141, 142, 144, 192, 217, 255, 266, 283, 284, 289, 294, 308, 329, 350, 421, 426, 440, 445, 452, 480, 496, 505, 513, 539], "submodul": [47, 56, 68, 85, 110, 122, 130, 136, 141, 142, 144, 147, 160, 172, 184, 193, 200, 212, 216, 220, 227, 238, 250, 254, 257, 261, 266, 273, 283, 285, 289, 295, 299, 308, 315, 319, 329, 334, 350, 355, 363, 373, 377, 385, 397, 416, 421, 426, 427, 431, 434, 440, 442, 445, 446, 452, 455, 457, 462, 471, 473, 478, 480, 481, 484, 487, 490, 496, 501, 505, 513, 521, 529, 539, 544], "kera": [48, 463], "keras_util": [49, 50], "mxnet": [51, 555, 569, 579, 584, 587], "mxnet_util": [52, 53], "ox_util": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "calibr": 55, "oper": [57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "activ": 57, "argmax": 58, "attent": 59, "binary_op": 60, "concat": 61, "conv": 62, "direct_q8": 63, "embed_layernorm": 64, "gather": 65, "gavgpool": 66, "gemm": 67, "lstm": 69, "matmul": 70, "maxpool": 71, "op": 72, "pad": 73, "pool": 74, "resiz": 75, "split": 76, "pytorch": [79, 368, 457, 458, 555, 559, 569, 579, 580, 583, 584, 587], "tensorflow": [81, 461, 462, 463, 464, 465, 466, 467, 555, 559, 569, 579, 580, 583, 584, 587], "tf_util": [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175], "graph_convert": 82, "graph_converter_without_calib": 83, "graph_rewrit": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139], "bf16": [84, 85], "bf16_convert": [84, 176], "gener": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], "convert_add_to_biasadd": 86, "convert_layout": 87, "convert_leakyrelu": 88, "convert_nan_to_random": 89, "convert_placeholder_to_const": 90, "dequantize_cast_optim": 91, "dilated_contract": 92, "dummy_biasadd": 93, "expanddims_optim": 94, "fetch_weight_from_reshap": 95, "fold_batch_norm": 96, "fold_const": 97, "fuse_biasadd_add": 98, "fuse_column_wise_mul": 99, "fuse_conv_with_math": 100, "fuse_decomposed_bn": 101, "fuse_decomposed_in": 102, "fuse_gelu": 103, "fuse_layer_norm": 104, "fuse_pad_with_conv": 105, "fuse_pad_with_fp32_conv": 106, "fuse_reshape_transpos": 107, "graph_cse_optim": 108, "grappler_pass": 109, "insert_print_nod": 111, "move_squeeze_after_relu": 112, "pre_optim": 113, "remove_training_nod": 114, "rename_batch_norm": 115, "split_shared_input": 116, "strip_equivalent_nod": 117, "strip_unused_nod": 118, "switch_optim": 119, "update_ent": 120, "graph_bas": 121, "int8": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 561, 587], "freeze_fake_qu": 123, "freeze_valu": 124, "freeze_value_without_calib": 125, "fuse_conv_redundant_dequant": 126, "fuse_conv_requant": 127, "fuse_matmul_redundant_dequant": 128, "fuse_matmul_requant": 129, "meta_op_optim": 131, "post_hostconst_convert": 132, "post_quantized_op_cs": 133, "rnn_convert": 134, "scale_propag": 135, "qdq": [136, 137, 138, 139, 153, 154, 155, 156, 157, 158, 159, 160, 161, 587], "insert_qdq_pattern": 137, "merge_duplicated_qdq": 138, "share_qdq_y_pattern": 139, "graph_util": 140, "quantize_graph": [142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168], "qat": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 587], "fake_quant": 143, "quantize_config": 145, "quantize_help": 146, "quantize_lay": [147, 148, 149, 150, 151], "optimize_lay": 148, "quantize_layer_add": 149, "quantize_layer_bas": 150, "quantize_layer_bn": 151, "quantize_wrapp": 152, "fuse_qdq_bn": 153, "fuse_qdq_concatv2": 154, "fuse_qdq_conv": 155, "fuse_qdq_deconv": 156, "fuse_qdq_in": 157, "fuse_qdq_matmul": 158, "fuse_qdq_pool": 159, "optimize_qdq": 161, "quantize_graph_bas": 162, "quantize_graph_bn": 163, "quantize_graph_concatv2": 164, "quantize_graph_conv": 165, "quantize_graph_for_intel_cpu": 166, "quantize_graph_matmul": 167, "quantize_graph_pool": 168, "quantize_graph_common": 169, "transform_graph": [170, 171, 172, 173, 174], "bias_correct": 170, "graph_transform_bas": 171, "insert_log": 173, "rerange_quantized_concat": 174, "torch_util": [176, 177, 178, 179, 180, 181, 232], "hawq_metr": 177, "symbolic_trac": 180, "fast_bias_correct": 183, "weight_correct": 185, "conf": [187, 188, 189, 190], "config": [187, 191, 525, 554, 555, 572], "dotdict": 188, "pythonic_config": 190, "sigopt": [194, 582, 585], "tpe": [195, 585], "base_dataload": [196, 234], "default_dataload": [198, 236], "fetcher": [199, 237], "mxnet_dataload": [201, 239], "onnxrt_dataload": [202, 240], "pytorch_dataload": [203, 241], "sampler": [204, 242], "tensorflow_dataload": [205, 243], "bert_dataset": [206, 244], "coco_dataset": [207, 245], "dummy_dataset": [209, 247], "dummy_dataset_v2": [210, 248], "imagenet_dataset": [211, 249], "style_transfer_dataset": [213, 251], "filter": [214, 215, 216, 252, 253, 254], "coco_filt": [214, 252], "coco_transform": 218, "imagenet_transform": [219, 256], "postprocess": [221, 231], "token": [222, 258], "experiment": [224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307], "export": [261, 262, 263, 264, 561], "qlinear2qdq": 262, "torch2onnx": 263, "graph_optim": [265, 477, 478, 479, 528], "bleu_util": [268, 310], "coco_label_map": [269, 311], "coco_tool": [270, 312], "evaluate_squad": [271, 313], "f1": [272, 314], "mixed_precis": [275, 481, 482, 483, 530], "model_convers": 276, "basic_na": 277, "dyna": 278, "dynast": [279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "dynas_manag": 279, "dynas_predictor": 280, "dynas_search": 281, "dynas_util": 282, "supernetwork": [284, 285, 286, 287, 288], "machine_transl": [285, 286, 287, 288], "modules_supernetwork": 286, "transformer_interfac": 287, "transformer_supernetwork": 288, "nas_util": 291, "search_algorithm": 292, "pruning_recip": [294, 295, 296, 297], "pattern": [295, 296, 297, 301, 331, 575, 576], "tile_pattern": 297, "pruning_v2": 298, "pytorch_prun": [299, 300, 301, 302, 303, 304, 305], "logger": [300, 330, 366, 515], "prune_util": 302, "pruner": [303, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "mix_precis": 317, "base_model": 318, "keras_model": 320, "mxnet_model": 322, "nets_factori": 323, "onnx_model": 324, "tensorflow_model": 325, "torch_model": 326, "criteria": [328, 575, 576, 585], "pruner_legaci": [332, 333, 334, 335, 336, 337], "gradient_sensit": 332, "group_lasso": 333, "magnitud": 335, "pattern_lock": 336, "reg": 340, "auto_mixed_precis": 344, "bayesian": [346, 585], "conserv": 347, "exhaust": [348, 585], "hawq_v2": [349, 585], "mse": [351, 585], "mse_v2": [352, 585], "random": [353, 585], "tuning_sampl": 356, "tuning_spac": 357, "tuning_struct": 358, "collect_layer_histogram": 360, "constant": 361, "create_obj_from_config": 362, "kl_diverg": 364, "load_huggingfac": 365, "option": [367, 552, 559, 567], "ux": [370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550], "benchmark_model": 371, "execute_benchmark": 372, "config_gener": [374, 375, 376, 377, 378, 379, 380, 381], "benchmark_config_gener": 374, "graph_optimization_config_gener": 376, "mixed_precision_config_gener": 378, "profiling_config_gener": 379, "pruning_config_gener": 380, "quantization_config_gener": 381, "configuration_wizard": [382, 383, 384, 385, 386, 387], "configuration_pars": 382, "get_boundary_nod": 383, "get_configur": 384, "params_feed": 386, "pruning_config_pars": 387, "db_manag": [388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423], "db_model": [389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409], "benchmark_result": 390, "domain": [393, 451], "domain_flavour": 394, "framework": [396, 554, 555, 561, 563, 571, 578], "optimization_typ": 401, "precis": [402, 570, 580], "profil": [403, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 547, 552], "profiling_result": 404, "project": [405, 552], "pruning_detail": 406, "tuning_detail": 408, "tuning_histori": [409, 493], "db_oper": [410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420], "benchmark_api_interfac": 410, "dataset_api_interfac": 411, "diagnosis_api_interfac": 413, "dictionaries_api_interfac": 414, "examples_api_interfac": 415, "model_api_interfac": 417, "optimization_api_interfac": 418, "profiling_api_interfac": 419, "project_api_interfac": 420, "params_interfac": 422, "diagnosi": [424, 425, 426, 427, 428, 429, 430, 431, 432, 552], "factori": [425, 476, 495, 500], "onnx_diagnosi": [427, 428], "onnxrt_diagnosi": 428, "op_detail": 429, "op_entri": 430, "tensorflow_diagnosi": [431, 432], "file_brows": [433, 434], "graph": [435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 552], "collaps": 436, "edg": 437, "graph_read": 439, "node": 441, "reader": [442, 443, 444], "onnxrt_read": 443, "tensorflow_read": 444, "jobs_manag": [446, 447, 448, 449], "jobs_control_queu": 447, "manage_workspac": 450, "model_type_gett": 454, "repositori": 459, "shape": 460, "frozen_pb": 461, "meta_graph": 464, "saved_model": 466, "model_zoo": [468, 469, 470, 471, 472], "download_config": 468, "download_model": 469, "download": 470, "list_model": 472, "names_mapp": [473, 474], "execute_optim": 475, "optimize_model": [479, 483, 485, 488], "neural_coder_optim": [484, 485], "tune": [490, 491, 492, 534, 579, 585], "tune_model": 491, "execute_profil": 494, "profile_model": 497, "tensorflow_profil": [500, 501, 502, 503], "inc_bench": 504, "const": 506, "except": [508, 538], "executor": 509, "expiring_dict": 510, "github_info": 511, "hw_info": 512, "json_seri": 514, "parser": 516, "proc": 517, "process": 518, "singleton": 519, "status_upd": 520, "workdir": 523, "workload": [525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 550], "evalu": [527, 559], "yaml_util": 535, "web": [536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550], "commun": 536, "configur": [537, 559, 563, 574, 578, 582, 586], "router": 540, "server": 541, "servic": [542, 543, 544, 545, 546, 547, 548, 549, 550], "history_snapshot_pars": 543, "request_data_processor": 548, "response_gener": 549, "version": 551, "bench": 552, "tabl": 552, "from": [552, 567], "binari": [552, 567], "sourc": [552, 567], "home": 552, "screen": 552, "creat": [552, 554], "predefin": 552, "displai": 552, "list": [552, 584], "remov": 552, "develop": 552, "tab": 552, "wizard": 552, "edit": 552, "entri": 552, "inform": [552, 568], "file": [554, 555, 563, 586], "user": [554, 555, 558, 559, 564, 578, 586], "specif": [554, 555], "design": [556, 585], "workflow": 556, "knowledg": [557, 587], "intermedi": 557, "layer": 557, "self": 557, "defin": [558, 559], "distribut": 559, "infer": 559, "featur": [559, 563, 566, 578, 579, 583, 586], "pure": 559, "horovodrun": 559, "execut": 559, "fp32": 561, "appendix": 561, "frequent": 562, "ask": 562, "question": 562, "build": [562, 569], "issu": [562, 581], "3": [562, 567], "incompat": [564, 581], "chang": [564, 581], "between": 564, "v1": 564, "face": 564, "section": 565, "infrastructur": 566, "ai": 567, "kit": 567, "window": 567, "legal": 568, "licens": 568, "citat": 568, "trademark": 568, "singl": [569, 572], "multi": 569, "mix": [570, 580], "orchestr": 573, "One": 573, "shot": 573, "network": [575, 576], "type": 576, "regular": 576, "refer": [576, 579], "full": 577, "52": 577, "2022": 577, "34": 577, "2021": 577, "14": 577, "2018": 577, "2020": 577, "4": 577, "style": 578, "access": 578, "fundament": 579, "scheme": 579, "ipex": 579, "approach": 579, "accuraci": [579, 585], "turn": 580, "ON": 580, "auto": 580, "dure": 580, "releas": 581, "known": 581, "prepar": 582, "platform": 582, "perform": 582, "benefit": 582, "comparison": 582, "differ": 582, "tensorboard": 583, "space": 585, "exit": 585, "travers": 585, "logic": 585, "o0": 585, "10": 587, "torch": 587, "12": 587, "ptq": 587, "11": 587, "7": 587}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Contributor Covenant Code of Conduct": [[0, "contributor-covenant-code-of-conduct"], [1, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[0, "our-pledge"]], "Our Standards": [[0, "our-standards"]], "Our Responsibilities": [[0, "our-responsibilities"]], "Scope": [[0, "scope"]], "Enforcement": [[0, "enforcement"]], "Attribution": [[0, "attribution"]], "Contribution Guidelines": [[1, "contribution-guidelines"]], "Pull Request Checklist": [[1, "pull-request-checklist"]], "Pull Request Template": [[1, "pull-request-template"]], "Support": [[1, "support"]], "FX": [[2, "fx"]], "Introduction": [[2, "introduction"], [3, "introduction"], [6, "introduction"], [552, "introduction"], [553, "introduction"], [554, "introduction"], [555, "introduction"], [557, "introduction"], [558, "introduction"], [559, "introduction"], [561, "introduction"], [563, "introduction"], [566, "introduction"], [569, "introduction"], [570, "introduction"], [571, "introduction"], [572, "introduction"], [573, "introduction"], [575, "introduction"], [576, "introduction"], [578, "introduction"], [582, "introduction"], [583, "introduction"], [584, "introduction"], [585, "introduction"], [586, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[2, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[2, "get-start"]], "Post Training Static Quantization": [[2, "post-training-static-quantization"], [579, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[2, "post-training-dynamic-quantization"], [579, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[2, "quantization-aware-training"]], "Examples": [[2, "examples"], [3, "examples"], [553, "examples"], [554, "examples"], [555, "examples"], [557, "examples"], [558, "examples"], [559, "examples"], [560, "examples"], [561, "examples"], [570, "examples"], [571, "examples"], [573, "examples"], [575, "examples"], [579, "examples"], [583, "examples"]], "Note": [[2, "note"]], "Details": [[2, "details"]], "Common Problem": [[2, "common-problem"]], "Dynamic Quantization": [[2, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[2, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[3, "neural-architecture-search"]], "Basic NAS": [[3, "basic-nas"]], "Dynamic NAS": [[3, "dynamic-nas"]], "NAS Support Matrix": [[3, "nas-support-matrix"]], "Get Started with NAS API": [[3, "get-started-with-nas-api"]], "Basic Usage": [[3, "basic-usage"]], "1. Python code + YAML": [[3, "python-code-yaml"]], "2. Python code only": [[3, "python-code-only"]], "Advanced Usage (Custom NAS)": [[3, "advanced-usage-custom-nas"]], "Security Policy": [[4, "security-policy"]], "Report a Vulnerability": [[4, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[5, "intel-neural-compressor"]], "Installation": [[5, "installation"], [567, "installation"]], "Prerequisites": [[5, "prerequisites"], [567, "prerequisites"], [567, "id1"]], "Install on Linux": [[5, "install-on-linux"]], "Getting Started": [[5, "getting-started"]], "Quantization with Python API": [[5, "quantization-with-python-api"]], "Quantization with JupyterLab Extension": [[5, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[5, "quantization-with-gui"]], "System Requirements": [[5, "system-requirements"]], "Validated Hardware Environment": [[5, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[5, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[5, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[5, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[5, "validated-software-environment"]], "Validated Models": [[5, "validated-models"], [587, "validated-models"]], "Documentation": [[5, "documentation"]], "Selected Publications/Events": [[5, "selected-publications-events"]], "Additional Content": [[5, "additional-content"]], "Hiring": [[5, "hiring"]], "Adaptor": [[6, "adaptor"], [7, "adaptor"]], "Adaptor Support Matrix": [[6, "adaptor-support-matrix"]], "Working Flow": [[6, "working-flow"], [579, "working-flow"]], "Get Start with Adaptor API": [[6, "get-start-with-adaptor-api"]], "Query API": [[6, "query-api"]], "Background": [[6, "background"]], "Query API Introduction": [[6, "query-api-introduction"]], "Example of Adding a New Backend Support": [[6, "example-of-adding-a-new-backend-support"]], "Capability": [[6, "capability"]], "Implement ONNXRTAdaptor Class": [[6, "implement-onnxrtadaptor-class"]], "ONNXRT": [[8, "onnxrt"], [555, "onnxrt"], [569, "onnxrt"], [584, "onnxrt"]], "Algorithm": [[9, "algorithm"]], "APIs": [[10, "apis"]], "Common": [[11, "common"]], "Benchmark": [[12, "benchmark"], [32, "benchmark"], [553, "benchmark"], [578, "benchmark"]], "BLEU": [[13, "module-neural_compressor.experimental.metric.bleu"]], "Module Contents": [[13, "module-contents"], [41, "module-contents"], [45, "module-contents"], [46, "module-contents"], [48, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [177, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [191, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [218, "module-contents"], [219, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [236, "module-contents"], [237, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [256, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [267, "module-contents"], [268, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [309, "module-contents"], [310, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [316, "module-contents"], [318, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [362, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [432, "module-contents"], [433, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [441, "module-contents"], [443, "module-contents"], [444, "module-contents"], [450, "module-contents"], [451, "module-contents"], [453, "module-contents"], [454, "module-contents"], [456, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [472, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [477, "module-contents"], [479, "module-contents"], [482, "module-contents"], [483, "module-contents"], [485, "module-contents"], [486, "module-contents"], [488, "module-contents"], [489, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [522, "module-contents"], [523, "module-contents"], [524, "module-contents"], [525, "module-contents"], [526, "module-contents"], [527, "module-contents"], [528, "module-contents"], [530, "module-contents"], [531, "module-contents"], [532, "module-contents"], [533, "module-contents"], [534, "module-contents"], [535, "module-contents"], [536, "module-contents"], [537, "module-contents"], [538, "module-contents"], [540, "module-contents"], [541, "module-contents"], [542, "module-contents"], [543, "module-contents"], [545, "module-contents"], [546, "module-contents"], [547, "module-contents"], [548, "module-contents"], [549, "module-contents"], [550, "module-contents"]], "Classes": [[13, "classes"], [25, "classes"], [46, "classes"], [48, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [143, "classes"], [145, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [173, "classes"], [174, "classes"], [177, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [191, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [233, "classes"], [234, "classes"], [236, "classes"], [237, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [270, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [286, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [301, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [312, "classes"], [315, "classes"], [316, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [369, "classes"], [370, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [416, "classes"], [417, "classes"], [418, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [422, "classes"], [424, "classes"], [425, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [432, "classes"], [435, "classes"], [436, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [441, "classes"], [443, "classes"], [444, "classes"], [451, "classes"], [453, "classes"], [456, "classes"], [458, "classes"], [459, "classes"], [460, "classes"], [461, "classes"], [463, "classes"], [464, "classes"], [465, "classes"], [466, "classes"], [470, "classes"], [474, "classes"], [476, "classes"], [477, "classes"], [480, "classes"], [482, "classes"], [486, "classes"], [489, "classes"], [492, "classes"], [493, "classes"], [495, "classes"], [498, "classes"], [499, "classes"], [500, "classes"], [502, "classes"], [506, "classes"], [507, "classes"], [509, "classes"], [510, "classes"], [511, "classes"], [512, "classes"], [514, "classes"], [516, "classes"], [517, "classes"], [518, "classes"], [519, "classes"], [522, "classes"], [523, "classes"], [525, "classes"], [526, "classes"], [527, "classes"], [528, "classes"], [530, "classes"], [531, "classes"], [532, "classes"], [533, "classes"], [534, "classes"], [536, "classes"], [537, "classes"], [540, "classes"], [542, "classes"], [543, "classes"], [545, "classes"], [546, "classes"], [547, "classes"], [548, "classes"], [549, "classes"], [550, "classes"]], "Criterion": [[14, "criterion"]], "Data": [[15, "data"]], "Dataloader": [[16, "dataloader"]], "BaseDataLoader": [[16, "basedataloader"]], "dataloaders": [[16, "dataloaders"]], "Datasets": [[17, "datasets"]], "Transforms": [[18, "transforms"]], "Metric": [[19, "metric"]], "Model": [[20, "model"], [30, "model"], [571, "model"]], "Optimizer": [[21, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[22, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[23, "distillation"], [557, "distillation"], [578, "distillation"]], "MixedPrecision": [[24, "mixedprecision"]], "Neural architecture search (NAS)": [[25, "neural-architecture-search-nas"]], "Package Contents": [[25, "package-contents"], [47, "package-contents"], [68, "package-contents"], [184, "package-contents"], [200, "package-contents"], [212, "package-contents"], [216, "package-contents"], [217, "package-contents"], [220, "package-contents"], [227, "package-contents"], [238, "package-contents"], [250, "package-contents"], [254, "package-contents"], [255, "package-contents"], [257, "package-contents"], [261, "package-contents"], [266, "package-contents"], [273, "package-contents"], [289, "package-contents"], [294, "package-contents"], [295, "package-contents"], [308, "package-contents"], [315, "package-contents"], [319, "package-contents"], [334, "package-contents"], [350, "package-contents"], [355, "package-contents"], [363, "package-contents"], [373, "package-contents"], [416, "package-contents"], [421, "package-contents"], [480, "package-contents"]], "Pruning": [[26, "pruning"], [552, "pruning"], [575, "pruning"], [578, "pruning"]], "Quantization": [[27, "quantization"], [34, "quantization"], [578, "quantization"], [579, "quantization"]], "Scheduler": [[28, "scheduler"]], "Contrib": [[29, "contrib"]], "newAPI": [[31, "newapi"]], "Objective": [[33, "objective"], [572, "objective"]], "Training": [[35, "training"]], "Pythonic": [[36, "pythonic"]], "Strategy": [[37, "strategy"]], "Strategies": [[38, "strategies"]], "Utils": [[39, "utils"]], "644ec953a7dc_pruning_support": [[40, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[41, "module-6ece06672ed3_v1_14"]], "Functions": [[41, "functions"], [45, "functions"], [46, "functions"], [53, "functions"], [72, "functions"], [78, "functions"], [79, "functions"], [101, "functions"], [102, "functions"], [104, "functions"], [146, "functions"], [148, "functions"], [175, "functions"], [177, "functions"], [181, "functions"], [182, "functions"], [184, "functions"], [186, "functions"], [188, "functions"], [198, "functions"], [206, "functions"], [208, "functions"], [212, "functions"], [215, "functions"], [216, "functions"], [217, "functions"], [220, "functions"], [222, "functions"], [223, "functions"], [224, "functions"], [225, "functions"], [227, "functions"], [230, "functions"], [232, "functions"], [236, "functions"], [244, "functions"], [246, "functions"], [250, "functions"], [253, "functions"], [254, "functions"], [255, "functions"], [257, "functions"], [258, "functions"], [259, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [267, "functions"], [268, "functions"], [270, "functions"], [271, "functions"], [272, "functions"], [273, "functions"], [274, "functions"], [282, "functions"], [286, "functions"], [287, "functions"], [291, "functions"], [296, "functions"], [301, "functions"], [302, "functions"], [303, "functions"], [305, "functions"], [308, "functions"], [309, "functions"], [310, "functions"], [312, "functions"], [313, "functions"], [314, "functions"], [315, "functions"], [316, "functions"], [321, "functions"], [325, "functions"], [327, "functions"], [328, "functions"], [331, "functions"], [337, "functions"], [338, "functions"], [340, "functions"], [341, "functions"], [342, "functions"], [343, "functions"], [346, "functions"], [354, "functions"], [359, "functions"], [362, "functions"], [363, "functions"], [365, "functions"], [366, "functions"], [368, "functions"], [369, "functions"], [371, "functions"], [372, "functions"], [382, "functions"], [383, "functions"], [384, "functions"], [386, "functions"], [391, "functions"], [393, "functions"], [394, "functions"], [396, "functions"], [398, "functions"], [401, "functions"], [402, "functions"], [407, "functions"], [410, "functions"], [411, "functions"], [412, "functions"], [423, "functions"], [433, "functions"], [450, "functions"], [454, "functions"], [456, "functions"], [467, "functions"], [468, "functions"], [469, "functions"], [472, "functions"], [475, "functions"], [479, "functions"], [483, "functions"], [485, "functions"], [488, "functions"], [491, "functions"], [493, "functions"], [494, "functions"], [497, "functions"], [503, "functions"], [504, "functions"], [512, "functions"], [515, "functions"], [520, "functions"], [524, "functions"], [532, "functions"], [535, "functions"], [536, "functions"], [540, "functions"], [541, "functions"]], "6f0d0f71d92e_v1_13": [[42, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[43, "module-9e89549a08c8_v1_11"]], "block_mask": [[44, "module-block_mask"]], "env": [[45, "module-env"]], "neural_compressor.adaptor.adaptor": [[46, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[47, "module-neural_compressor.adaptor"]], "Subpackages": [[47, "subpackages"], [56, "subpackages"], [122, "subpackages"], [141, "subpackages"], [142, "subpackages"], [144, "subpackages"], [192, "subpackages"], [217, "subpackages"], [255, "subpackages"], [266, "subpackages"], [283, "subpackages"], [284, "subpackages"], [289, "subpackages"], [294, "subpackages"], [308, "subpackages"], [329, "subpackages"], [350, "subpackages"], [421, "subpackages"], [426, "subpackages"], [440, "subpackages"], [445, "subpackages"], [452, "subpackages"], [480, "subpackages"], [496, "subpackages"], [505, "subpackages"], [513, "subpackages"], [539, "subpackages"]], "Submodules": [[47, "submodules"], [56, "submodules"], [68, "submodules"], [85, "submodules"], [110, "submodules"], [122, "submodules"], [130, "submodules"], [136, "submodules"], [141, "submodules"], [142, "submodules"], [144, "submodules"], [147, "submodules"], [160, "submodules"], [172, "submodules"], [184, "submodules"], [193, "submodules"], [200, "submodules"], [212, "submodules"], [216, "submodules"], [220, "submodules"], [227, "submodules"], [238, "submodules"], [250, "submodules"], [254, "submodules"], [257, "submodules"], [261, "submodules"], [266, "submodules"], [273, "submodules"], [283, "submodules"], [285, "submodules"], [289, "submodules"], [295, "submodules"], [299, "submodules"], [308, "submodules"], [315, "submodules"], [319, "submodules"], [329, "submodules"], [334, "submodules"], [350, "submodules"], [355, "submodules"], [363, "submodules"], [373, "submodules"], [377, "submodules"], [385, "submodules"], [397, "submodules"], [416, "submodules"], [421, "submodules"], [426, "submodules"], [427, "submodules"], [431, "submodules"], [434, "submodules"], [440, "submodules"], [442, "submodules"], [445, "submodules"], [446, "submodules"], [452, "submodules"], [455, "submodules"], [457, "submodules"], [462, "submodules"], [471, "submodules"], [473, "submodules"], [478, "submodules"], [480, "submodules"], [481, "submodules"], [484, "submodules"], [487, "submodules"], [490, "submodules"], [496, "submodules"], [501, "submodules"], [505, "submodules"], [513, "submodules"], [521, "submodules"], [529, "submodules"], [539, "submodules"], [544, "submodules"]], "neural_compressor.adaptor.keras": [[48, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils": [[49, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[50, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[51, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[52, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[53, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[54, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[55, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[56, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[57, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[58, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[59, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[60, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[61, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[62, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[63, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[64, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[65, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[66, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[67, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[68, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[69, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[70, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[71, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[72, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[73, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[74, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[75, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[76, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[77, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[78, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[79, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[80, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[81, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[82, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[83, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[133, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[134, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[135, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[136, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[137, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[138, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[139, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[140, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[141, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[162, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[163, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[164, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[165, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[166, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[167, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[168, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[169, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[170, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[171, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[172, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[173, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[174, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[175, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[176, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[177, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[178, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[179, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[180, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[181, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[182, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[183, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[184, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.weight_correction": [[185, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[186, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[187, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[188, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[189, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[190, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[191, "module-neural_compressor.config"]], "neural_compressor.contrib": [[192, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[193, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[194, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[195, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[196, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[197, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[198, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[199, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[200, "module-neural_compressor.data.dataloaders"]], "Attributes": [[200, "attributes"], [208, "attributes"], [217, "attributes"], [246, "attributes"], [255, "attributes"], [266, "attributes"], [294, "attributes"], [319, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[201, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[202, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[203, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[204, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[205, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[206, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[207, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[208, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[209, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[210, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[211, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[212, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[213, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[214, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[215, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[216, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[217, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[218, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[219, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[220, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[221, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[222, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[223, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[224, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[225, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[226, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[227, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[228, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[229, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[230, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[231, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[232, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[233, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[237, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[238, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[242, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[243, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[244, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[245, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[246, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[247, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[248, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[249, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[250, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[251, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[252, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[253, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[254, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[255, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[256, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[257, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[258, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[259, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[260, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[261, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[262, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.torch2onnx": [[263, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[264, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[265, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[266, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[267, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[268, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[269, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[270, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[271, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[272, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[273, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[274, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[275, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[276, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[277, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[278, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[279, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[280, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[281, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[282, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[283, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[284, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[285, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[286, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[287, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[288, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "neural_compressor.experimental.nas": [[289, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[290, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[291, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[292, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[293, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[294, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[295, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[296, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[297, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[298, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[299, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[300, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[301, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[302, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[303, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[304, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[305, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[306, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[307, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[308, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[309, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[310, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[311, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[312, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[313, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[314, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[315, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[316, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[317, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[318, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[319, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[320, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[321, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[322, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[323, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[324, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[325, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[326, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[327, "module-neural_compressor.objective"]], "neural_compressor.pruner.criteria": [[328, "module-neural_compressor.pruner.criteria"]], "neural_compressor.pruner": [[329, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[330, "module-neural_compressor.pruner.logger"]], "neural_compressor.pruner.patterns": [[331, "module-neural_compressor.pruner.patterns"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[332, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[333, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[334, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[335, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[336, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[337, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "neural_compressor.pruner.pruners": [[338, "module-neural_compressor.pruner.pruners"]], "neural_compressor.pruner.pruning": [[339, "module-neural_compressor.pruner.pruning"]], "neural_compressor.pruner.regs": [[340, "module-neural_compressor.pruner.regs"]], "neural_compressor.pruner.schedulers": [[341, "module-neural_compressor.pruner.schedulers"]], "neural_compressor.pruner.utils": [[342, "module-neural_compressor.pruner.utils"]], "neural_compressor.quantization": [[343, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[344, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[345, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[346, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[347, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[348, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[349, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[350, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[351, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[352, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[353, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[354, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils": [[355, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[356, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[357, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[358, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.training": [[359, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[360, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[361, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[362, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[363, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[364, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[365, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[366, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[367, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[368, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[369, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[370, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[371, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[372, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[373, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[374, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[375, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[376, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[377, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[378, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[379, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[380, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[381, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[382, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[383, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[384, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[385, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[386, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[387, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[388, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[389, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[390, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[391, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[392, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[393, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[394, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[395, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[396, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[397, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[398, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[399, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[400, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[401, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[402, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[403, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[404, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[405, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[406, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[407, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[408, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[409, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[412, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[413, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[414, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[415, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[416, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[417, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[418, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[419, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[420, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[421, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[422, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[423, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[424, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[425, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[426, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[427, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[428, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[429, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[430, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[431, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[432, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[433, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[434, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[435, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[436, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[437, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[438, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[439, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[440, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[441, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[442, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[443, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[444, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[445, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[446, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[447, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[448, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[449, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[450, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[451, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[452, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[453, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[454, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[455, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[456, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[457, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[458, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[459, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[460, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[461, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[462, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[463, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[464, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[465, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[466, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[467, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[468, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[469, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[470, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[471, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[472, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[473, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[474, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[475, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[476, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[477, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[478, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[479, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[480, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[481, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[482, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[483, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[484, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[485, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[486, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[487, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[488, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[489, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[490, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[491, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[492, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[493, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[494, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[495, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[496, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[497, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[498, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[499, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[500, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[501, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[502, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[503, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[504, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[505, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[506, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[507, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[508, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[509, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[510, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[511, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[512, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[513, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[514, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[515, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[516, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[517, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[518, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[519, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[520, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[521, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[522, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[523, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[524, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[525, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[526, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[527, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[528, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[529, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[530, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[531, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[532, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[533, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[534, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[535, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[536, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[537, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[538, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[539, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[540, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[541, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[542, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[543, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[544, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[545, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[546, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[547, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[548, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[549, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[550, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[551, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Bench": [[552, "intel-neural-compressor-bench"]], "Table of Contents": [[552, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[552, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[552, "option-1-install-from-binary"]], "Option 2: Install from Source": [[552, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[552, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[552, "home-screen"]], "Create New Project": [[552, "create-new-project"]], "Predefined Model": [[552, "predefined-model"]], "Custom Model": [[552, "custom-model"]], "Display Model Graph": [[552, "display-model-graph"]], "Project List": [[552, "project-list"]], "Remove Project": [[552, "remove-project"]], "Develop Project": [[552, "develop-project"]], "Optimization Tab": [[552, "optimization-tab"]], "Optimization Table": [[552, "optimization-table"]], "Optimization Wizard": [[552, "optimization-wizard"]], "Editing Optimization Entries": [[552, "editing-optimization-entries"]], "Optimization Details": [[552, "optimization-details"]], "Benchmark Tab": [[552, "benchmark-tab"]], "Benchmark Table": [[552, "benchmark-table"]], "Benchmark Wizard": [[552, "benchmark-wizard"]], "Editing Benchmark Entries": [[552, "editing-benchmark-entries"]], "Benchmark Details": [[552, "benchmark-details"]], "Profiling Tab": [[552, "profiling-tab"]], "Profiling Table": [[552, "profiling-table"]], "Profiling Wizard": [[552, "profiling-wizard"]], "Editing Profiling Entries": [[552, "editing-profiling-entries"]], "Profiling Details": [[552, "profiling-details"]], "Diagnosis Tab": [[552, "diagnosis-tab"]], "Dataset Tab": [[552, "dataset-tab"]], "Dataset List": [[552, "dataset-list"]], "Dataset Wizard": [[552, "dataset-wizard"]], "Dataset Details": [[552, "dataset-details"]], "Custom Dataset": [[552, "custom-dataset"]], "Project Information": [[552, "project-information"]], "System Information": [[552, "system-information"]], "Security": [[552, "security"], [559, "security"]], "Benchmark Support Matrix": [[553, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[553, "get-started-with-benchmark-api"]], "DataLoader": [[554, "dataloader"]], "Supported Framework Dataloader Matrix": [[554, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[554, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[554, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[554, "create-a-user-specific-dataloader"]], "Dataset": [[555, "dataset"]], "Supported Framework Dataset Matrix": [[555, "supported-framework-dataset-matrix"]], "TensorFlow": [[555, "tensorflow"], [569, "tensorflow"], [584, "tensorflow"]], "PyTorch": [[555, "pytorch"], [569, "pytorch"], [580, "pytorch"]], "MXNet": [[555, "mxnet"], [569, "mxnet"], [584, "mxnet"]], "Get start with Dataset API": [[555, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[555, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[555, "user-specific-dataset"]], "Design": [[556, "design"], [585, "design"], [585, "id1"], [585, "id3"], [585, "id5"], [585, "id7"], [585, "id9"], [585, "id11"], [585, "id13"], [585, "id15"], [585, "id17"]], "Architecture": [[556, "architecture"], [566, "architecture"]], "Workflow": [[556, "workflow"]], "Knowledge Distillation": [[557, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[557, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[557, "self-distillation"]], "Distillation Support Matrix": [[557, "distillation-support-matrix"]], "Get Started with Distillation API": [[557, "get-started-with-distillation-api"]], "Distillation for Quantization": [[558, "distillation-for-quantization"]], "User-defined yaml": [[558, "user-defined-yaml"]], "Distributed Training and Inference (Evaluation)": [[559, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[559, "supported-feature-matrix"], [563, "supported-feature-matrix"], [566, "supported-feature-matrix"], [578, "supported-feature-matrix"], [579, "supported-feature-matrix"], [583, "supported-feature-matrix"], [586, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[559, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[559, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[559, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[559, "horovodrun-execution"]], "PyTorch Examples:": [[559, "pytorch-examples"]], "TensorFlow Examples:": [[559, "tensorflow-examples"]], "Export": [[561, "export"]], "Supported Framework Model Matrix": [[561, "supported-framework-model-matrix"], [571, "supported-framework-model-matrix"]], "FP32 Model Export": [[561, "fp32-model-export"]], "INT8 Model Export": [[561, "int8-model-export"]], "Appendix": [[561, "appendix"]], "Frequently Asked Questions": [[562, "frequently-asked-questions"]], "Common Build Issues": [[562, "common-build-issues"]], "Issue 1:": [[562, "issue-1"]], "Issue 2:": [[562, "issue-2"]], "Issue 3:": [[562, "issue-3"]], "Framework YAML Configuration Files": [[563, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[563, "get-started-with-framework-yaml-files"]], "Incompatible changes between v1.2 and v1.1": [[564, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[564, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[564, "built-in-transform-dataset-metric-apis"]], "Intel\u00ae Neural Compressor Documentation": [[565, "intel-neural-compressor-documentation"]], "Sections": [[565, "sections"]], "Infrastructure of Intel\u00ae Neural Compressor": [[566, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[567, "linux-installation"]], "Option 1 Install from Binary": [[567, "option-1-install-from-binary"], [567, "id2"]], "Option 2 Install from Source": [[567, "option-2-install-from-source"], [567, "id3"]], "Option 3 Install from AI Kit": [[567, "option-3-install-from-ai-kit"]], "Windows Installation": [[567, "windows-installation"]], "Legal Information": [[568, "legal-information"]], "License": [[568, "license"]], "Citation": [[568, "citation"]], "Trademarks": [[568, "trademarks"]], "Metrics": [[569, "metrics"]], "Supported Built-in Metric Matrix": [[569, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[569, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[569, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[569, "build-custom-metric-with-python-api"]], "Mixed Precision": [[570, "mixed-precision"]], "Mixed Precision Support Matrix": [[570, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[570, "get-started-with-mixed-precision-api"]], "Single Objective": [[572, "single-objective"]], "Multiple Objectives": [[572, "multiple-objectives"]], "Objective Support Matrix": [[572, "objective-support-matrix"]], "Get Started with Objective API": [[572, "get-started-with-objective-api"]], "Config Single Objective": [[572, "config-single-objective"]], "Config Multiple Objectives": [[572, "config-multiple-objectives"]], "Example": [[572, "example"]], "Optimization Orchestration": [[573, "optimization-orchestration"]], "One-shot": [[573, "one-shot"]], "Orchestration Support Matrix": [[573, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[573, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[574, "system-configuration"]], "Neural Network Pruning": [[575, "neural-network-pruning"], [576, "neural-network-pruning"]], "Pruning Patterns": [[575, "pruning-patterns"], [576, "pruning-patterns"]], "Pruning Criteria": [[575, "pruning-criteria"], [576, "pruning-criteria"]], "Pruning Schedule": [[575, "pruning-schedule"], [576, "pruning-schedule"]], "Pruning Support Matrix": [[575, "pruning-support-matrix"]], "Get Started with Pruning API": [[575, "get-started-with-pruning-api"]], "Pruning Type": [[576, "pruning-type"]], "Regularization": [[576, "regularization"]], "Pruning Examples": [[576, "pruning-examples"]], "Reference": [[576, "reference"], [579, "reference"]], "Full Publications/Events (52)": [[577, "full-publications-events-52"]], "2022 (34)": [[577, "id1"]], "2021 (14)": [[577, "id2"]], "2018 - 2020 (4)": [[577, "id3"]], "Pythonic Style Access for Configurations": [[578, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[578, "pythonic-api-for-user-configurations"], [578, "id1"]], "Pythonic API for Framework Configurations": [[578, "pythonic-api-for-framework-configurations"], [578, "id2"]], "Get Started with Pythonic API for Configurations": [[578, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[578, "nas"]], "Quantization Introduction": [[579, "quantization-introduction"]], "Quantization Fundamentals": [[579, "quantization-fundamentals"]], "Quantization Support Matrix": [[579, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[579, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[579, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[579, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[579, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[579, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[579, "quantization-approaches"]], "Quantization Aware Training": [[579, "quantization-aware-training"]], "Accuracy Aware Tuning": [[579, "accuracy-aware-tuning"]], "Get Started": [[579, "get-started"]], "Turn ON Auto Mixed Precision during Quantization": [[580, "turn-on-auto-mixed-precision-during-quantization"]], "Tensorflow": [[580, "tensorflow"]], "Release": [[581, "release"]], "Release Notes": [[581, "release-notes"]], "Known Issues": [[581, "known-issues"]], "Incompatible Changes": [[581, "incompatible-changes"]], "SigOpt Strategy": [[582, "sigopt-strategy"]], "Preparation": [[582, "preparation"]], "SigOpt Platform": [[582, "sigopt-platform"]], "Neural Compressor Configuration": [[582, "neural-compressor-configuration"]], "Performance": [[582, "performance"]], "Benefit of SigOpt Strategy": [[582, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[582, "performance-comparison-of-different-strategies"]], "TensorBoard": [[583, "tensorboard"]], "Get Started with TensorBoard": [[583, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[583, "pytorch-tensorboard"]], "Usage": [[583, "usage"], [583, "id1"], [585, "usage"], [585, "id2"], [585, "id4"], [585, "id6"], [585, "id8"], [585, "id10"], [585, "id12"], [585, "id14"], [585, "id16"], [585, "id18"]], "TensorFlow Tensorboard": [[583, "tensorflow-tensorboard"]], "PyTorch Examples": [[583, "pytorch-examples"]], "TensorFlow Examples": [[583, "tensorflow-examples"]], "Transform": [[584, "transform"]], "Transform Support List": [[584, "transform-support-list"]], "Pytorch": [[584, "pytorch"]], "Tuning Strategies": [[585, "tuning-strategies"]], "Strategy Design": [[585, "strategy-design"]], "Tuning Space": [[585, "tuning-space"]], "Exit Policy": [[585, "exit-policy"]], "Accuracy Criteria": [[585, "accuracy-criteria"]], "Traverse": [[585, "traverse"]], "Traverse Logic": [[585, "traverse-logic"]], "O0": [[585, "o0"]], "Basic": [[585, "basic"]], "MSE": [[585, "mse"]], "MSE_V2": [[585, "mse-v2"]], "HAWQ_V2": [[585, "hawq-v2"]], "Bayesian": [[585, "bayesian"]], "Exhaustive": [[585, "exhaustive"]], "Random": [[585, "random"]], "SigOpt": [[585, "sigopt"]], "TPE": [[585, "tpe"]], "Customize a New Tuning Strategy": [[585, "customize-a-new-tuning-strategy"]], "User YAML Configuration Files": [[586, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[586, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[587, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.10.0": [[587, "tensorflow-models-with-tensorflow-2-10-0"]], "PyTorch Models with Torch 1.12.1+cpu in PTQ Mode": [[587, "pytorch-models-with-torch-1-12-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.12.1+cpu in QAT Mode": [[587, "pytorch-models-with-torch-1-12-1-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.11.0+cpu": [[587, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-11-0-cpu"]], "ONNX Models with ONNX Runtime 1.12.1": [[587, "onnx-models-with-onnx-runtime-1-12-1"]], "MXNet Models with MXNet 1.7.0": [[587, "mxnet-models-with-mxnet-1-7-0"]], "Validated Pruning Examples": [[587, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[587, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[587, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"bleu (class in neural_compressor.experimental.metric.bleu)": [[13, "neural_compressor.experimental.metric.bleu.BLEU"], [267, "neural_compressor.experimental.metric.bleu.BLEU"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [267, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "module": [[13, "module-neural_compressor.experimental.metric.bleu"], [40, "module-644ec953a7dc_pruning_support"], [41, "module-6ece06672ed3_v1_14"], [42, "module-6f0d0f71d92e_v1_13"], [43, "module-9e89549a08c8_v1_11"], [44, "module-block_mask"], [45, "module-env"], [46, "module-neural_compressor.adaptor.adaptor"], [47, "module-neural_compressor.adaptor"], [48, "module-neural_compressor.adaptor.keras"], [49, "module-neural_compressor.adaptor.keras_utils"], [50, "module-neural_compressor.adaptor.keras_utils.quantizer"], [51, "module-neural_compressor.adaptor.mxnet"], [52, "module-neural_compressor.adaptor.mxnet_utils"], [53, "module-neural_compressor.adaptor.mxnet_utils.util"], [54, "module-neural_compressor.adaptor.onnxrt"], [55, "module-neural_compressor.adaptor.ox_utils.calibration"], [56, "module-neural_compressor.adaptor.ox_utils"], [57, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [58, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [59, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [60, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [61, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [62, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [63, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [64, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [65, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [66, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [67, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [68, "module-neural_compressor.adaptor.ox_utils.operators"], [69, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [70, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [71, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [72, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [73, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [74, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [75, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [76, "module-neural_compressor.adaptor.ox_utils.operators.split"], [77, "module-neural_compressor.adaptor.ox_utils.quantizer"], [78, "module-neural_compressor.adaptor.ox_utils.util"], [79, "module-neural_compressor.adaptor.pytorch"], [80, "module-neural_compressor.adaptor.query"], [81, "module-neural_compressor.adaptor.tensorflow"], [82, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [83, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"], [121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [133, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [134, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [135, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [136, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [137, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [138, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [139, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [140, "module-neural_compressor.adaptor.tf_utils.graph_util"], [141, "module-neural_compressor.adaptor.tf_utils"], [142, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [162, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [163, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [164, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [165, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [166, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [167, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [168, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [169, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [170, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [171, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [172, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [173, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [174, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [175, "module-neural_compressor.adaptor.tf_utils.util"], [176, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [177, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [178, "module-neural_compressor.adaptor.torch_utils"], [179, "module-neural_compressor.adaptor.torch_utils.onnx"], [180, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [181, "module-neural_compressor.adaptor.torch_utils.util"], [182, "module-neural_compressor.algorithm.algorithm"], [183, "module-neural_compressor.algorithm.fast_bias_correction"], [184, "module-neural_compressor.algorithm"], [185, "module-neural_compressor.algorithm.weight_correction"], [186, "module-neural_compressor.benchmark"], [187, "module-neural_compressor.conf.config"], [188, "module-neural_compressor.conf.dotdict"], [189, "module-neural_compressor.conf"], [190, "module-neural_compressor.conf.pythonic_config"], [191, "module-neural_compressor.config"], [192, "module-neural_compressor.contrib"], [193, "module-neural_compressor.contrib.strategy"], [194, "module-neural_compressor.contrib.strategy.sigopt"], [195, "module-neural_compressor.contrib.strategy.tpe"], [196, "module-neural_compressor.data.dataloaders.base_dataloader"], [197, "module-neural_compressor.data.dataloaders.dataloader"], [198, "module-neural_compressor.data.dataloaders.default_dataloader"], [199, "module-neural_compressor.data.dataloaders.fetcher"], [200, "module-neural_compressor.data.dataloaders"], [201, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [202, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [203, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [204, "module-neural_compressor.data.dataloaders.sampler"], [205, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [206, "module-neural_compressor.data.datasets.bert_dataset"], [207, "module-neural_compressor.data.datasets.coco_dataset"], [208, "module-neural_compressor.data.datasets.dataset"], [209, "module-neural_compressor.data.datasets.dummy_dataset"], [210, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [211, "module-neural_compressor.data.datasets.imagenet_dataset"], [212, "module-neural_compressor.data.datasets"], [213, "module-neural_compressor.data.datasets.style_transfer_dataset"], [214, "module-neural_compressor.data.filters.coco_filter"], [215, "module-neural_compressor.data.filters.filter"], [216, "module-neural_compressor.data.filters"], [217, "module-neural_compressor.data"], [218, "module-neural_compressor.data.transforms.coco_transform"], [219, "module-neural_compressor.data.transforms.imagenet_transform"], [220, "module-neural_compressor.data.transforms"], [221, "module-neural_compressor.data.transforms.postprocess"], [222, "module-neural_compressor.data.transforms.tokenization"], [223, "module-neural_compressor.data.transforms.transform"], [224, "module-neural_compressor.experimental.benchmark"], [225, "module-neural_compressor.experimental.common.criterion"], [226, "module-neural_compressor.experimental.common.dataloader"], [227, "module-neural_compressor.experimental.common"], [228, "module-neural_compressor.experimental.common.metric"], [229, "module-neural_compressor.experimental.common.model"], [230, "module-neural_compressor.experimental.common.optimizer"], [231, "module-neural_compressor.experimental.common.postprocess"], [232, "module-neural_compressor.experimental.common.torch_utils"], [233, "module-neural_compressor.experimental.component"], [234, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [235, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [236, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [237, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [238, "module-neural_compressor.experimental.data.dataloaders"], [239, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [240, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [241, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [242, "module-neural_compressor.experimental.data.dataloaders.sampler"], [243, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [244, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [245, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [246, "module-neural_compressor.experimental.data.datasets.dataset"], [247, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [248, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [249, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [250, "module-neural_compressor.experimental.data.datasets"], [251, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [252, "module-neural_compressor.experimental.data.filters.coco_filter"], [253, "module-neural_compressor.experimental.data.filters.filter"], [254, "module-neural_compressor.experimental.data.filters"], [255, "module-neural_compressor.experimental.data"], [256, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [257, "module-neural_compressor.experimental.data.transforms"], [258, "module-neural_compressor.experimental.data.transforms.tokenization"], [259, "module-neural_compressor.experimental.data.transforms.transform"], [260, "module-neural_compressor.experimental.distillation"], [261, "module-neural_compressor.experimental.export"], [262, "module-neural_compressor.experimental.export.qlinear2qdq"], [263, "module-neural_compressor.experimental.export.torch2onnx"], [264, "module-neural_compressor.experimental.export.utils"], [265, "module-neural_compressor.experimental.graph_optimization"], [266, "module-neural_compressor.experimental"], [267, "module-neural_compressor.experimental.metric.bleu"], [268, "module-neural_compressor.experimental.metric.bleu_util"], [269, "module-neural_compressor.experimental.metric.coco_label_map"], [270, "module-neural_compressor.experimental.metric.coco_tools"], [271, "module-neural_compressor.experimental.metric.evaluate_squad"], [272, "module-neural_compressor.experimental.metric.f1"], [273, "module-neural_compressor.experimental.metric"], [274, "module-neural_compressor.experimental.metric.metric"], [275, "module-neural_compressor.experimental.mixed_precision"], [276, "module-neural_compressor.experimental.model_conversion"], [277, "module-neural_compressor.experimental.nas.basic_nas"], [278, "module-neural_compressor.experimental.nas.dynas"], [279, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [280, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [281, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [282, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [283, "module-neural_compressor.experimental.nas.dynast"], [284, "module-neural_compressor.experimental.nas.dynast.supernetwork"], [285, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"], [286, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"], [287, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"], [288, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"], [289, "module-neural_compressor.experimental.nas"], [290, "module-neural_compressor.experimental.nas.nas"], [291, "module-neural_compressor.experimental.nas.nas_utils"], [292, "module-neural_compressor.experimental.nas.search_algorithms"], [293, "module-neural_compressor.experimental.pruning"], [294, "module-neural_compressor.experimental.pruning_recipes"], [295, "module-neural_compressor.experimental.pruning_recipes.patterns"], [296, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [297, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [298, "module-neural_compressor.experimental.pruning_v2"], [299, "module-neural_compressor.experimental.pytorch_pruner"], [300, "module-neural_compressor.experimental.pytorch_pruner.logger"], [301, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [302, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [303, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [304, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [305, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [306, "module-neural_compressor.experimental.quantization"], [307, "module-neural_compressor.experimental.scheduler"], [308, "module-neural_compressor"], [309, "module-neural_compressor.metric.bleu"], [310, "module-neural_compressor.metric.bleu_util"], [311, "module-neural_compressor.metric.coco_label_map"], [312, "module-neural_compressor.metric.coco_tools"], [313, "module-neural_compressor.metric.evaluate_squad"], [314, "module-neural_compressor.metric.f1"], [315, "module-neural_compressor.metric"], [316, "module-neural_compressor.metric.metric"], [317, "module-neural_compressor.mix_precision"], [318, "module-neural_compressor.model.base_model"], [319, "module-neural_compressor.model"], [320, "module-neural_compressor.model.keras_model"], [321, "module-neural_compressor.model.model"], [322, "module-neural_compressor.model.mxnet_model"], [323, "module-neural_compressor.model.nets_factory"], [324, "module-neural_compressor.model.onnx_model"], [325, "module-neural_compressor.model.tensorflow_model"], [326, "module-neural_compressor.model.torch_model"], [327, "module-neural_compressor.objective"], [328, "module-neural_compressor.pruner.criteria"], [329, "module-neural_compressor.pruner"], [330, "module-neural_compressor.pruner.logger"], [331, "module-neural_compressor.pruner.patterns"], [332, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"], [333, "module-neural_compressor.pruner.pruner_legacy.group_lasso"], [334, "module-neural_compressor.pruner.pruner_legacy"], [335, "module-neural_compressor.pruner.pruner_legacy.magnitude"], [336, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"], [337, "module-neural_compressor.pruner.pruner_legacy.pruner"], [338, "module-neural_compressor.pruner.pruners"], [339, "module-neural_compressor.pruner.pruning"], [340, "module-neural_compressor.pruner.regs"], [341, "module-neural_compressor.pruner.schedulers"], [342, "module-neural_compressor.pruner.utils"], [343, "module-neural_compressor.quantization"], [344, "module-neural_compressor.strategy.auto_mixed_precision"], [345, "module-neural_compressor.strategy.basic"], [346, "module-neural_compressor.strategy.bayesian"], [347, "module-neural_compressor.strategy.conservative"], [348, "module-neural_compressor.strategy.exhaustive"], [349, "module-neural_compressor.strategy.hawq_v2"], [350, "module-neural_compressor.strategy"], [351, "module-neural_compressor.strategy.mse"], [352, "module-neural_compressor.strategy.mse_v2"], [353, "module-neural_compressor.strategy.random"], [354, "module-neural_compressor.strategy.strategy"], [355, "module-neural_compressor.strategy.utils"], [356, "module-neural_compressor.strategy.utils.tuning_sampler"], [357, "module-neural_compressor.strategy.utils.tuning_space"], [358, "module-neural_compressor.strategy.utils.tuning_structs"], [359, "module-neural_compressor.training"], [360, "module-neural_compressor.utils.collect_layer_histogram"], [361, "module-neural_compressor.utils.constant"], [362, "module-neural_compressor.utils.create_obj_from_config"], [363, "module-neural_compressor.utils"], [364, "module-neural_compressor.utils.kl_divergence"], [365, "module-neural_compressor.utils.load_huggingface"], [366, "module-neural_compressor.utils.logger"], [367, "module-neural_compressor.utils.options"], [368, "module-neural_compressor.utils.pytorch"], [369, "module-neural_compressor.utils.utility"], [370, "module-neural_compressor.ux.components.benchmark.benchmark"], [371, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [372, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [373, "module-neural_compressor.ux.components.benchmark"], [374, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [375, "module-neural_compressor.ux.components.config_generator.config_generator"], [376, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [377, "module-neural_compressor.ux.components.config_generator"], [378, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [379, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [380, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [381, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [382, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [383, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [384, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [385, "module-neural_compressor.ux.components.configuration_wizard"], [386, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [387, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [388, "module-neural_compressor.ux.components.db_manager.db_manager"], [389, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [390, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [391, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [392, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [393, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [394, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [395, "module-neural_compressor.ux.components.db_manager.db_models.example"], [396, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [397, "module-neural_compressor.ux.components.db_manager.db_models"], [398, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [399, "module-neural_compressor.ux.components.db_manager.db_models.model"], [400, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [401, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [402, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [403, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [404, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [405, "module-neural_compressor.ux.components.db_manager.db_models.project"], [406, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [407, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [408, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [409, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [410, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [411, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [412, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [413, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [414, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [415, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [416, "module-neural_compressor.ux.components.db_manager.db_operations"], [417, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [418, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [419, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [420, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [421, "module-neural_compressor.ux.components.db_manager"], [422, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [423, "module-neural_compressor.ux.components.db_manager.utils"], [424, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [425, "module-neural_compressor.ux.components.diagnosis.factory"], [426, "module-neural_compressor.ux.components.diagnosis"], [427, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [428, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [429, "module-neural_compressor.ux.components.diagnosis.op_details"], [430, "module-neural_compressor.ux.components.diagnosis.op_entry"], [431, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [432, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [433, "module-neural_compressor.ux.components.file_browser.file_browser"], [434, "module-neural_compressor.ux.components.file_browser"], [435, "module-neural_compressor.ux.components.graph.attribute"], [436, "module-neural_compressor.ux.components.graph.collapser"], [437, "module-neural_compressor.ux.components.graph.edge"], [438, "module-neural_compressor.ux.components.graph.graph"], [439, "module-neural_compressor.ux.components.graph.graph_reader"], [440, "module-neural_compressor.ux.components.graph"], [441, "module-neural_compressor.ux.components.graph.node"], [442, "module-neural_compressor.ux.components.graph.reader"], [443, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [444, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [445, "module-neural_compressor.ux.components"], [446, "module-neural_compressor.ux.components.jobs_management"], [447, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [448, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [449, "module-neural_compressor.ux.components.jobs_management.request"], [450, "module-neural_compressor.ux.components.manage_workspace"], [451, "module-neural_compressor.ux.components.model.domain"], [452, "module-neural_compressor.ux.components.model"], [453, "module-neural_compressor.ux.components.model.model"], [454, "module-neural_compressor.ux.components.model.model_type_getter"], [455, "module-neural_compressor.ux.components.model.onnxrt"], [456, "module-neural_compressor.ux.components.model.onnxrt.model"], [457, "module-neural_compressor.ux.components.model.pytorch"], [458, "module-neural_compressor.ux.components.model.pytorch.model"], [459, "module-neural_compressor.ux.components.model.repository"], [460, "module-neural_compressor.ux.components.model.shape"], [461, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [462, "module-neural_compressor.ux.components.model.tensorflow"], [463, "module-neural_compressor.ux.components.model.tensorflow.keras"], [464, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [465, "module-neural_compressor.ux.components.model.tensorflow.model"], [466, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [467, "module-neural_compressor.ux.components.model.tensorflow.utils"], [468, "module-neural_compressor.ux.components.model_zoo.download_config"], [469, "module-neural_compressor.ux.components.model_zoo.download_model"], [470, "module-neural_compressor.ux.components.model_zoo.downloader"], [471, "module-neural_compressor.ux.components.model_zoo"], [472, "module-neural_compressor.ux.components.model_zoo.list_models"], [473, "module-neural_compressor.ux.components.names_mapper"], [474, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [475, "module-neural_compressor.ux.components.optimization.execute_optimization"], [476, "module-neural_compressor.ux.components.optimization.factory"], [477, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [478, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [479, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [480, "module-neural_compressor.ux.components.optimization"], [481, "module-neural_compressor.ux.components.optimization.mixed_precision"], [482, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [483, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [484, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [485, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [486, "module-neural_compressor.ux.components.optimization.optimization"], [487, "module-neural_compressor.ux.components.optimization.pruning"], [488, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [489, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [490, "module-neural_compressor.ux.components.optimization.tune"], [491, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [492, "module-neural_compressor.ux.components.optimization.tune.tuning"], [493, "module-neural_compressor.ux.components.optimization.tuning_history"], [494, "module-neural_compressor.ux.components.profiling.execute_profiling"], [495, "module-neural_compressor.ux.components.profiling.factory"], [496, "module-neural_compressor.ux.components.profiling"], [497, "module-neural_compressor.ux.components.profiling.profile_model"], [498, "module-neural_compressor.ux.components.profiling.profiler"], [499, "module-neural_compressor.ux.components.profiling.profiling"], [500, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [501, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [502, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [503, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [504, "module-neural_compressor.ux.inc_bench"], [505, "module-neural_compressor.ux"], [506, "module-neural_compressor.ux.utils.consts"], [507, "module-neural_compressor.ux.utils.environment"], [508, "module-neural_compressor.ux.utils.exceptions"], [509, "module-neural_compressor.ux.utils.executor"], [510, "module-neural_compressor.ux.utils.expiring_dict"], [511, "module-neural_compressor.ux.utils.github_info"], [512, "module-neural_compressor.ux.utils.hw_info"], [513, "module-neural_compressor.ux.utils"], [514, "module-neural_compressor.ux.utils.json_serializer"], [515, "module-neural_compressor.ux.utils.logger"], [516, "module-neural_compressor.ux.utils.parser"], [517, "module-neural_compressor.ux.utils.proc"], [518, "module-neural_compressor.ux.utils.processes"], [519, "module-neural_compressor.ux.utils.singleton"], [520, "module-neural_compressor.ux.utils.status_updates"], [521, "module-neural_compressor.ux.utils.templates"], [522, "module-neural_compressor.ux.utils.templates.metric"], [523, "module-neural_compressor.ux.utils.templates.workdir"], [524, "module-neural_compressor.ux.utils.utils"], [525, "module-neural_compressor.ux.utils.workload.config"], [526, "module-neural_compressor.ux.utils.workload.dataloader"], [527, "module-neural_compressor.ux.utils.workload.evaluation"], [528, "module-neural_compressor.ux.utils.workload.graph_optimization"], [529, "module-neural_compressor.ux.utils.workload"], [530, "module-neural_compressor.ux.utils.workload.mixed_precision"], [531, "module-neural_compressor.ux.utils.workload.model"], [532, "module-neural_compressor.ux.utils.workload.pruning"], [533, "module-neural_compressor.ux.utils.workload.quantization"], [534, "module-neural_compressor.ux.utils.workload.tuning"], [535, "module-neural_compressor.ux.utils.yaml_utils"], [536, "module-neural_compressor.ux.web.communication"], [537, "module-neural_compressor.ux.web.configuration"], [538, "module-neural_compressor.ux.web.exceptions"], [539, "module-neural_compressor.ux.web"], [540, "module-neural_compressor.ux.web.router"], [541, "module-neural_compressor.ux.web.server"], [542, "module-neural_compressor.ux.web.service.benchmark"], [543, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [544, "module-neural_compressor.ux.web.service"], [545, "module-neural_compressor.ux.web.service.model"], [546, "module-neural_compressor.ux.web.service.optimization"], [547, "module-neural_compressor.ux.web.service.profiling"], [548, "module-neural_compressor.ux.web.service.request_data_processor"], [549, "module-neural_compressor.ux.web.service.response_generator"], [550, "module-neural_compressor.ux.web.service.workload"], [551, "module-neural_compressor.version"]], "neural_compressor.experimental.metric.bleu": [[13, "module-neural_compressor.experimental.metric.bleu"], [267, "module-neural_compressor.experimental.metric.bleu"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [267, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [267, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.result"], [267, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[13, "neural_compressor.experimental.metric.bleu.BLEU.update"], [267, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "644ec953a7dc_pruning_support": [[40, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[41, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[41, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[41, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[42, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[43, "module-9e89549a08c8_v1_11"]], "block_mask": [[44, "module-block_mask"]], "env": [[45, "module-env"]], "run_migrations_offline() (in module env)": [[45, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[45, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[46, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[46, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[46, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[46, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[46, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[46, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[46, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[46, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[46, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[46, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[46, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[46, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[47, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[48, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[48, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[48, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[48, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[48, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[48, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[48, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[48, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[48, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[48, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[48, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[48, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[48, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[48, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[48, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[48, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[48, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils": [[49, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[50, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[51, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[51, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[51, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "get_fuse_patterns() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[51, "neural_compressor.adaptor.mxnet.MXNetQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[51, "neural_compressor.adaptor.mxnet.MXNetQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[51, "neural_compressor.adaptor.mxnet.MXNetQuery.get_op_types"]], "get_precisions() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[51, "neural_compressor.adaptor.mxnet.MXNetQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[51, "neural_compressor.adaptor.mxnet.MXNetQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.mxnet.mxnetquery method)": [[51, "neural_compressor.adaptor.mxnet.MXNetQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[51, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[51, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[51, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[51, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[51, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[51, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[51, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[52, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calc_kl_th_dict() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[53, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.calc_kl_th_dict"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[53, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[53, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.namecollector method)": [[53, "neural_compressor.adaptor.mxnet_utils.util.NameCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[53, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.collect_gluon"]], "collect_module() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[53, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_module"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[53, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "post_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[53, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.post_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[53, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.pre_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[53, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.pre_batch"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[53, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "get_graph_optimization() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_graph_optimization"]], "get_op_types() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_op_types_by_precision"]], "get_precisions() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.onnxrt.onnxrtquery method)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRTQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[54, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[54, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.set_tensor"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[55, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[55, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[55, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[55, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[55, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "dump_minmax() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[55, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_minmax"]], "dump_tensor() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[55, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_tensor"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[55, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[55, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[56, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[57, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[57, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[57, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.qactivationoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[57, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize_check"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[57, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize_check"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[58, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[58, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[58, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[58, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[58, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[59, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[59, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[59, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.qattentionoperator method)": [[59, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[59, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[59, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[59, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.quantize"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[60, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[60, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[60, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.qbinaryoperator method)": [[60, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[60, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[60, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[60, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[60, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize_check"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[61, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[61, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[61, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[61, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.qconcatoperator method)": [[61, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[61, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[61, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[61, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[61, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize_check"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[62, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[62, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[62, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.qconvoperator method)": [[62, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[62, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[62, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[62, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.quantize"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[63, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "directcastoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[63, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[63, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[63, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.cast"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.directcastoperator method)": [[63, "neural_compressor.adaptor.ox_utils.operators.direct_q8.DirectCastOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[63, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[63, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[63, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[63, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[63, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize_check"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[64, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[64, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[64, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.qembedlayernormalizationoperator method)": [[64, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[64, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[64, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[64, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.quantize"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[65, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[65, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[65, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[65, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize_check"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[66, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[66, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.qglobalaveragepooloperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[66, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[66, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[67, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[67, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.qgemmoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[67, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[67, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize_check"]], "neural_compressor.adaptor.ox_utils.operators": [[68, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[69, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[69, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[69, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.quantize"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[70, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[70, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.qmatmuloperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[70, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[70, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.quantize"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[71, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[71, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[71, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[71, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize_check"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[72, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[72, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.qoperator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[72, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[72, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[72, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[72, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize_check"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[73, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[73, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[73, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[73, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize_check"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[74, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[74, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[74, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.qpooloperator method)": [[74, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[74, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[74, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[74, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[74, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize_check"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[75, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[75, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[75, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[75, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[75, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[75, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[75, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize_check"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[76, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[76, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[76, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.qsplitoperator method)": [[76, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[76, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[76, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[76, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[76, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.quantize"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "check_opset_version() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.check_opset_version"]], "convert_qdq_to_operator_oriented() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.convert_qdq_to_operator_oriented"]], "dequantize_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dequantize_tensor"]], "dtype_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dtype_cast"]], "get_bias_add_nodes() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.get_bias_add_nodes"]], "insert_qdq() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.insert_qdq"]], "is_valid_quantize_weight() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.is_valid_quantize_weight"]], "merge_dedicated_qdq_pair() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.merge_dedicated_qdq_pair"]], "neural_compressor.adaptor.ox_utils.quantizer": [[77, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantize_bias() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias"]], "quantize_bias_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias_tensor"]], "quantize_inputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_inputs"]], "quantize_model() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_model"]], "quantize_outputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_outputs"]], "quantize_weight_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weight_per_channel"]], "quantize_weights_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weights_per_channel"]], "remove_redundant_pairs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.remove_redundant_pairs"]], "should_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_cast"]], "should_convert() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_convert"]], "should_quantize() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_quantize"]], "tensor_proto_to_array() (neural_compressor.adaptor.ox_utils.quantizer.quantizer static method)": [[77, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.tensor_proto_to_array"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[78, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[78, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[79, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[79, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[79, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[79, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[79, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.inspect_tensor"]], "inspect_tensor() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.inspect_tensor"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[79, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[79, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.save"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[79, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[80, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[80, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[80, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[80, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[80, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[80, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[80, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[80, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[80, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[81, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[81, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "diagnosis_helper() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.diagnosis_helper"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[81, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_bf16_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[81, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_bf16_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[81, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[81, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_grappler_optimization_cfg() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[81, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_grappler_optimization_cfg"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[81, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[81, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[81, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_output_op_names() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_output_op_names"]], "get_precisions() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[81, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[81, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[81, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[81, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[81, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.train"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[82, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[82, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.bf16_convert"]], "convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[82, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.convert"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[82, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "quantize() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[82, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize"]], "quantize_with_qdq_pattern() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[82, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize_with_qdq_pattern"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[83, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[83, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.bf16_convert"]], "convert_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[83, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.convert_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[83, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "quantize_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[83, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.quantize_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.fusedecomposedbnoptimizer method)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.fusedecomposedinoptimizer method)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[110, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[111, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[111, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[112, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[112, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "get_excluded_node_names() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_excluded_node_names"]], "get_matched_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_matched_nodes"]], "get_optimized_model() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_optimized_model"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[113, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[113, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[114, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[114, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[115, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[115, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[116, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[116, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[117, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[117, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[118, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[118, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[119, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[119, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "updateenteroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.updateenteroptimizer method)": [[120, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter.UpdateEnterOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter": [[120, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.update_enter"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[121, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[121, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[122, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[123, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[123, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[124, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[124, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "do_transformation_without_calib() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.do_transformation_without_calib"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[125, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[125, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[126, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[126, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[127, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[127, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[128, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[128, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[129, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[129, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[130, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[131, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[131, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[131, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[132, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[132, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[132, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[133, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[133, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[133, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[134, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[134, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[134, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[135, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[135, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[135, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[136, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[137, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[137, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[137, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[138, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[138, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[138, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[139, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[139, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[139, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "analysis_rnn_model() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.analysis_rnn_model"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "gen_valid_sampling_log() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.gen_valid_sampling_log"]], "generate_int32_bias_for_conv() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_conv"]], "generate_int32_bias_for_matmul() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_matmul"]], "get_frame_info() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_frame_info"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[140, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[140, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[141, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[142, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[143, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[143, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[144, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[145, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[145, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[146, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[146, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[147, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[148, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[148, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[149, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[149, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[150, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[150, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[151, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[151, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[152, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[152, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[153, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[153, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[154, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[154, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_conv3d_add_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_fusion"]], "apply_conv3d_add_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_relu_fusion"]], "apply_conv3d_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_fusion"]], "apply_conv3d_add_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_relu_fusion"]], "apply_conv3d_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_single_fusion"]], "apply_conv_biasadd_hardswish_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_hardswish_fusion"]], "apply_newly_conv_biasadd_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_fusion"]], "apply_newly_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_relu_fusion"]], "apply_newly_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_fusion"]], "apply_newly_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_relu_fusion"]], "apply_newly_conv_biasadd_swishf32_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_swishf32_fusion"]], "apply_newly_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[155, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[155, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_deconv2d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv2d_biasadd_fusion"]], "apply_deconv3d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv3d_biasadd_fusion"]], "apply_single_deconv2d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv2d_fusion"]], "apply_single_deconv3d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv3d_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[156, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[156, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_newly_in_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_newly_in_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[157, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[157, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[158, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[158, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[159, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[159, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[160, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "get_quantized_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[161, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[161, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "eightbitize_single_input_tensor_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.eightbitize_single_input_tensor_node"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[162, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "register_transformer() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.register_transformer"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "remove_redundant_quantization() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[162, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.remove_redundant_quantization"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[163, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[163, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[164, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[164, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_addn_relu_fusion"]], "apply_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_fusion"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[165, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[165, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[166, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[166, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[166, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[167, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[167, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[168, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[168, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[168, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[168, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "generate_quantized_weight_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.generate_quantized_weight_node"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[169, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[169, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[170, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[170, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[170, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[171, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[171, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.do_transformation"]], "generate_input_map() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[171, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.generate_input_map"]], "get_node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[171, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.get_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[171, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[171, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.node_name_from_input"]], "parse_input_pb() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[171, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[172, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[173, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[173, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[173, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[174, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[174, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[174, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[175, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[175, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[176, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[177, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[177, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[177, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[177, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[177, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[177, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[177, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[178, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[179, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[180, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[181, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[181, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[181, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[181, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[181, "module-neural_compressor.adaptor.torch_utils.util"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[182, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[182, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[182, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[182, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[182, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[182, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[182, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm.algorithm": [[182, "module-neural_compressor.algorithm.algorithm"]], "origin_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[182, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[182, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithm.algorithms class method)": [[182, "neural_compressor.algorithm.algorithm.ALGORITHMS.support_algorithms"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[183, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[183, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithms (class in neural_compressor.algorithm)": [[184, "neural_compressor.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm)": [[184, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[184, "neural_compressor.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithmscheduler property)": [[184, "neural_compressor.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[184, "neural_compressor.algorithm.algorithm_registry"]], "calib_iter (neural_compressor.algorithm.algorithmscheduler property)": [[184, "neural_compressor.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithmscheduler property)": [[184, "neural_compressor.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm": [[184, "module-neural_compressor.algorithm"]], "origin_model (neural_compressor.algorithm.algorithmscheduler property)": [[184, "neural_compressor.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithmscheduler property)": [[184, "neural_compressor.algorithm.AlgorithmScheduler.q_model"]], "support_algorithms() (neural_compressor.algorithm.algorithms class method)": [[184, "neural_compressor.algorithm.ALGORITHMS.support_algorithms"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[185, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[185, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[186, "neural_compressor.benchmark.Benchmark"]], "dataloader() (neural_compressor.benchmark.benchmark method)": [[186, "neural_compressor.benchmark.Benchmark.dataloader"]], "fit() (in module neural_compressor.benchmark)": [[186, "neural_compressor.benchmark.fit"]], "metric() (neural_compressor.benchmark.benchmark method)": [[186, "neural_compressor.benchmark.Benchmark.metric"]], "neural_compressor.benchmark": [[186, "module-neural_compressor.benchmark"]], "postprocess() (neural_compressor.benchmark.benchmark method)": [[186, "neural_compressor.benchmark.Benchmark.postprocess"]], "benchmark_conf (class in neural_compressor.conf.config)": [[187, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[187, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[187, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[187, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[187, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[187, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[187, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[187, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[187, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[187, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[187, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[188, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[188, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[188, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[188, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[189, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[190, "module-neural_compressor.conf.pythonic_config"]], "distillationconfig (class in neural_compressor.config)": [[191, "neural_compressor.config.DistillationConfig"]], "weightpruningconfig (class in neural_compressor.config)": [[191, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[191, "module-neural_compressor.config"]], "neural_compressor.contrib": [[192, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[193, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[194, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "create_exp() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[194, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.create_exp"]], "get_acc_target() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[194, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.get_acc_target"]], "neural_compressor.contrib.strategy.sigopt": [[194, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[194, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "params_to_tune_configs() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[194, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.params_to_tune_configs"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[194, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[195, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "add_loss_to_tuned_history_and_find_best() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[195, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.add_loss_to_tuned_history_and_find_best"]], "calculate_loss() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[195, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.calculate_loss"]], "neural_compressor.contrib.strategy.tpe": [[195, "module-neural_compressor.contrib.strategy.tpe"]], "object_evaluation() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[195, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.object_evaluation"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[195, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[195, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[196, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[196, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[196, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[196, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[197, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[197, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[198, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[198, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[198, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[198, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[198, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[199, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[199, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[199, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[199, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[200, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[200, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[201, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[201, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[202, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[202, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[202, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[203, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[203, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[204, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[204, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[204, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[204, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[204, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[205, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[205, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[205, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[205, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[205, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[205, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[206, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[206, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[206, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[206, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[206, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[206, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[206, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[206, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[206, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[206, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[207, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[207, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[207, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[207, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[207, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[208, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[208, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[208, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[208, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[208, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[208, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[208, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[208, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[209, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[209, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[210, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[210, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[210, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[211, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[211, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[211, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[211, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[211, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[211, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[211, "module-neural_compressor.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.data.datasets)": [[212, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[212, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[212, "neural_compressor.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[212, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[212, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[213, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[213, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[214, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[214, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[214, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[215, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[215, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[215, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[215, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[215, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[215, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[215, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[215, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[215, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[216, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[216, "neural_compressor.data.filters.Filter"]], "filter_registry() (in module neural_compressor.data.filters)": [[216, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[216, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[217, "neural_compressor.data.BaseTransform"]], "dataloader (class in neural_compressor.data)": [[217, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[217, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[217, "neural_compressor.data.Datasets"]], "filters (class in neural_compressor.data)": [[217, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[217, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[217, "neural_compressor.data.IterableDataset"]], "postprocess (class in neural_compressor.data)": [[217, "neural_compressor.data.Postprocess"]], "transforms (class in neural_compressor.data)": [[217, "neural_compressor.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.data)": [[217, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[217, "neural_compressor.data.filter_registry"]], "neural_compressor.data": [[217, "module-neural_compressor.data"]], "register() (neural_compressor.data.transforms method)": [[217, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[217, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[218, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[218, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[219, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[219, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[219, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[219, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[219, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[219, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[219, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[219, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[219, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[219, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[220, "neural_compressor.data.transforms.BaseTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[220, "neural_compressor.data.transforms.Postprocess"]], "transforms (class in neural_compressor.data.transforms)": [[220, "neural_compressor.data.transforms.TRANSFORMS"]], "neural_compressor.data.transforms": [[220, "module-neural_compressor.data.transforms"]], "register() (neural_compressor.data.transforms.transforms method)": [[220, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[220, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[221, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[221, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[222, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[222, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[222, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[222, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[222, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[222, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[222, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[222, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[222, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[222, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[222, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[222, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[222, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.TRANSFORMS"], [223, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[223, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[223, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[223, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[223, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[223, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[223, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[223, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[224, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[224, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[224, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[224, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[224, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[224, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[224, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[224, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[224, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[224, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[224, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[224, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[224, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[224, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[224, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[224, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[224, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[224, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[224, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[224, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[225, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[225, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[225, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[225, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[225, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[225, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[225, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[225, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[225, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[226, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[226, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[227, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[227, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[227, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[227, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[227, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[228, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[228, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[229, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[229, "module-neural_compressor.experimental.common.model"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[230, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[230, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[230, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[230, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[230, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[230, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[230, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[230, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[230, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[230, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[231, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[231, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[232, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[232, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[232, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[233, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[233, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[233, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[233, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[233, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[233, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[233, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[233, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[234, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[234, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[236, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[236, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[237, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[237, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[237, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[237, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[238, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[239, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[242, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[243, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[244, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[245, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[246, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[246, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[246, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[246, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[246, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[246, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[246, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[247, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[247, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[248, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[248, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[248, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[249, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[250, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[250, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[250, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[250, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[250, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[251, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[251, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[252, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[252, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[252, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[253, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[254, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[254, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[254, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[254, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[255, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[255, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[255, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[255, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[255, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[255, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[255, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[255, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[255, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[255, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[255, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[255, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[256, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[257, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[257, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[257, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[257, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[257, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[258, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[258, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[258, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[258, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[258, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[258, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [259, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[259, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[259, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[259, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[259, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[260, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[260, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[260, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[260, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[260, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[260, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[260, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[260, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[260, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[260, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[260, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[260, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[260, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[260, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[260, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[260, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[260, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[261, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[261, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[261, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[261, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[262, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[262, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[262, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[263, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[264, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[264, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[264, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[264, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[265, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[266, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[266, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[266, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[266, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[266, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[266, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[266, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[266, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[266, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[266, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[266, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[266, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[266, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[266, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[266, "neural_compressor.experimental.Quantization.calib_dataloader"]], "conf (neural_compressor.experimental.pruning attribute)": [[266, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[266, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[266, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[266, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[266, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[266, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[266, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[266, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[266, "neural_compressor.experimental.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.component property)": [[266, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[266, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[266, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[266, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[266, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[266, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[266, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[266, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[266, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[266, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[266, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[266, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[266, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[266, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[266, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[266, "neural_compressor.experimental.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning method)": [[266, "neural_compressor.experimental.Pruning.get_sparsity_ratio"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[266, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[266, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[266, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[266, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[266, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[266, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[266, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[266, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[266, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[266, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[266, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[266, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[266, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[266, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[266, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[266, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[266, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[266, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[266, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[266, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[266, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[266, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[266, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[266, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[266, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[266, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[266, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[266, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[266, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[266, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[266, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[266, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[266, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[266, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[266, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[266, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[266, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[266, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[266, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[266, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[266, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[266, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[266, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[266, "neural_compressor.experimental.Component.train_func"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning method)": [[266, "neural_compressor.experimental.Pruning.update_items_for_all_pruners"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[267, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[268, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[268, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[269, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[270, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[271, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[272, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[273, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[273, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[273, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[273, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[273, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[273, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[273, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[273, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[273, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[273, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[273, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[274, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[274, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[274, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[274, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[274, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[274, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[274, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[274, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[274, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[274, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[274, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[274, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[274, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[274, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[274, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[274, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[274, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[274, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[274, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[274, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[274, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[274, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[274, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[274, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[274, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[274, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[274, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[274, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[274, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[274, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[274, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[274, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[274, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[274, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[274, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[274, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[274, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[274, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[274, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[274, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[274, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[274, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[274, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[274, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[274, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[274, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[274, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[274, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[274, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[274, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[274, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[274, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[274, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[274, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[274, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[274, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[275, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[275, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[275, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[275, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[276, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[276, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[276, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[276, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[276, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[276, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[276, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[276, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[276, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[276, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[277, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[277, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[277, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[277, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[277, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[277, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[278, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[278, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[278, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[278, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[278, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[278, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[278, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[278, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[278, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[278, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[279, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "transformerltencoding (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[279, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[279, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[279, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[279, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[279, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[279, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[279, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[279, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[279, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[279, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[279, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[279, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[279, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[280, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[280, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[280, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[280, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[280, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[280, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[280, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[280, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[281, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[281, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[281, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[281, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[281, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[281, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "evaluationinterfacetransformerlt (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "transformerltrunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[282, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[282, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[283, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[284, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[285, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "multiheadattentionsuper (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[286, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[286, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.forward"]], "get_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[286, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.get_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[286, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "reorder_incremental_state() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[286, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.reorder_incremental_state"]], "set_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[286, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.set_incremental_state"]], "compute_bleu() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[287, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_bleu"]], "compute_latency() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[287, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_latency"]], "compute_macs() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[287, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[287, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "transformerdecoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder"]], "transformerdecoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer"]], "transformerencoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder"]], "transformerencoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer"]], "transformersupernetwork (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerSuperNetwork"]], "extract_features() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.extract_features"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoderlayer method)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.forward"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.max_positions"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.max_positions"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[288, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "output_layer() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.output_layer"]], "reorder_encoder_out() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.reorder_encoder_out"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[288, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.upgrade_state_dict_named"]], "basicnas (class in neural_compressor.experimental.nas)": [[289, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[289, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[289, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[289, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[289, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[289, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[289, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[289, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[289, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[289, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[289, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[289, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[289, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[289, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[289, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[289, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[290, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[290, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[290, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[290, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[290, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[290, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[290, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[290, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[290, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[290, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[290, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[290, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[290, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[290, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[290, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[290, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[291, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[291, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[291, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[291, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[292, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[292, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[292, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[292, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[292, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[292, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[292, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[292, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[292, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[292, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[292, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[292, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[292, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[293, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[293, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[293, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[293, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[293, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[293, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[293, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning.pruning method)": [[293, "neural_compressor.experimental.pruning.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning": [[293, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[293, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[293, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[293, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[293, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[293, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[293, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[293, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[293, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[293, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[293, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[293, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[293, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[293, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[293, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[293, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[293, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning.pruning method)": [[293, "neural_compressor.experimental.pruning.Pruning.update_items_for_all_pruners"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[294, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[294, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[294, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[294, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[295, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[295, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[295, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[295, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[296, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[296, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[296, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[296, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[296, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[296, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[296, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[296, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[296, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[297, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[297, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[297, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[297, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[297, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[297, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[297, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[297, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[297, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[298, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[298, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[298, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[298, "neural_compressor.experimental.pruning_v2.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning_v2.pruning method)": [[298, "neural_compressor.experimental.pruning_v2.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning_v2.pruning method)": [[298, "neural_compressor.experimental.pruning_v2.Pruning.generate_hooks"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning_v2.pruning method)": [[298, "neural_compressor.experimental.pruning_v2.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning_v2": [[298, "module-neural_compressor.experimental.pruning_v2"]], "on_after_compute_loss() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[298, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[298, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[298, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[298, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[298, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[298, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[298, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[298, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[298, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[298, "neural_compressor.experimental.pruning_v2.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[298, "neural_compressor.experimental.pruning_v2.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning_v2.pruning method)": [[298, "neural_compressor.experimental.pruning_v2.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning_v2.pruning method)": [[298, "neural_compressor.experimental.pruning_v2.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[298, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning_v2.pruning property)": [[298, "neural_compressor.experimental.pruning_v2.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[298, "neural_compressor.experimental.pruning_v2.Pruning.train_distributed"]], "update_config() (neural_compressor.experimental.pruning_v2.pruning method)": [[298, "neural_compressor.experimental.pruning_v2.Pruning.update_config"]], "neural_compressor.experimental.pytorch_pruner": [[299, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[300, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[301, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[301, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[302, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[302, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[302, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[302, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[302, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[302, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[302, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[303, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[303, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[304, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "prepare() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.prepare"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[304, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[305, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[305, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[305, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[305, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[305, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[305, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[305, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[305, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[305, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[305, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[306, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[306, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[306, "neural_compressor.experimental.quantization.Quantization.dataset"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[306, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[306, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[306, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[306, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[306, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[306, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[306, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[306, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[307, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[307, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[307, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[307, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[307, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[307, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[307, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[308, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[308, "neural_compressor.DistillationConfig"]], "weightpruningconfig (class in neural_compressor)": [[308, "neural_compressor.WeightPruningConfig"]], "dataloader() (neural_compressor.benchmark method)": [[308, "neural_compressor.Benchmark.dataloader"]], "metric() (neural_compressor.benchmark method)": [[308, "neural_compressor.Benchmark.metric"]], "neural_compressor": [[308, "module-neural_compressor"]], "postprocess() (neural_compressor.benchmark method)": [[308, "neural_compressor.Benchmark.postprocess"]], "set_random_seed() (in module neural_compressor)": [[308, "neural_compressor.set_random_seed"]], "set_tensorboard() (in module neural_compressor)": [[308, "neural_compressor.set_tensorboard"]], "set_workspace() (in module neural_compressor)": [[308, "neural_compressor.set_workspace"]], "bleu (class in neural_compressor.metric.bleu)": [[309, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[309, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[309, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[309, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[309, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[309, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[309, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[309, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[309, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[309, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[309, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[309, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[309, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[310, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[310, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[311, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[312, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[312, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[312, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[312, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[312, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[312, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[312, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[312, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[312, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[312, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[312, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[312, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[312, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[312, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[313, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[313, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[313, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[313, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[313, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[314, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[314, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[314, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[314, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[314, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[315, "neural_compressor.metric.BaseMetric"]], "metrics (class in neural_compressor.metric)": [[315, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[315, "neural_compressor.metric.Metric"]], "hvd (neural_compressor.metric.basemetric property)": [[315, "neural_compressor.metric.BaseMetric.hvd"]], "metric (neural_compressor.metric.basemetric property)": [[315, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[315, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[315, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[315, "module-neural_compressor.metric"]], "register() (neural_compressor.metric.metrics method)": [[315, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[315, "neural_compressor.metric.BaseMetric.reset"]], "result() (neural_compressor.metric.basemetric method)": [[315, "neural_compressor.metric.BaseMetric.result"]], "update() (neural_compressor.metric.basemetric method)": [[315, "neural_compressor.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[316, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[316, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[316, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[316, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[316, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[316, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[316, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[316, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[316, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[316, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[316, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[316, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[316, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[316, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[316, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[316, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[316, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[316, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[316, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[316, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[316, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[316, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[316, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[316, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[316, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[316, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[316, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[316, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[316, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[316, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[316, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[316, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[316, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[316, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[316, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[316, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[316, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[316, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[316, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[316, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[316, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[316, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[316, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[316, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[316, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[316, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[316, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[316, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[316, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[316, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[316, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[316, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[316, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[316, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[316, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[316, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[316, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[316, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[316, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[316, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[316, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[316, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[316, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[316, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[316, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[316, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[316, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[316, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[316, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[316, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[316, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[316, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[316, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[316, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[316, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[316, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[316, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[316, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[316, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[316, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[316, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[316, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[316, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[316, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[316, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[316, "neural_compressor.metric.metric.mIOU.update"]], "neural_compressor.mix_precision": [[317, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[318, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[318, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[318, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[318, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[318, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[318, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[318, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[319, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[319, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[319, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[319, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[319, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[319, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[319, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[319, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[320, "neural_compressor.model.keras_model.KerasModel"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[320, "neural_compressor.model.keras_model.KerasModel.framework"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[320, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[320, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[320, "module-neural_compressor.model.keras_model"]], "q_config (neural_compressor.model.keras_model.kerasmodel property)": [[320, "neural_compressor.model.keras_model.KerasModel.q_config"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[320, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[321, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[321, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[321, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[322, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[322, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[322, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[322, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[322, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[323, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[323, "module-neural_compressor.model.nets_factory"]], "register() (neural_compressor.model.nets_factory.tfslimnetsfactory method)": [[323, "neural_compressor.model.nets_factory.TFSlimNetsFactory.register"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[324, "neural_compressor.model.onnx_model.ONNXModel"]], "add_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.add_initializer"]], "add_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.add_initializers"]], "add_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.add_node"]], "add_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.add_nodes"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_children() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.get_children"]], "get_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.get_initializer"]], "get_nodes_chain() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.get_nodes_chain"]], "get_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.get_parent"]], "get_parents() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.get_parents"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.graph"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[324, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.initializer"]], "input() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.input"]], "input_name_to_nodes (neural_compressor.model.onnx_model.onnxmodel property)": [[324, "neural_compressor.model.onnx_model.ONNXModel.input_name_to_nodes"]], "ir_version() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.ir_version"]], "large_size (neural_compressor.model.onnx_model.onnxmodel property)": [[324, "neural_compressor.model.onnx_model.ONNXModel.large_size"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[324, "neural_compressor.model.onnx_model.ONNXModel.model"]], "model_path (neural_compressor.model.onnx_model.onnxmodel property)": [[324, "neural_compressor.model.onnx_model.ONNXModel.model_path"]], "neural_compressor.model.onnx_model": [[324, "module-neural_compressor.model.onnx_model"]], "nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.nodes"]], "opset_import() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.opset_import"]], "output() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.output"]], "output_name_to_node (neural_compressor.model.onnx_model.onnxmodel property)": [[324, "neural_compressor.model.onnx_model.ONNXModel.output_name_to_node"]], "q_config (neural_compressor.model.onnx_model.onnxmodel property)": [[324, "neural_compressor.model.onnx_model.ONNXModel.q_config"]], "remove_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.remove_initializer"]], "remove_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.remove_initializers"]], "remove_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.remove_node"]], "remove_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.remove_nodes"]], "remove_unused_constant() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.remove_unused_constant"]], "replace_input_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.replace_input_of_all_nodes"]], "replace_node_input() (neural_compressor.model.onnx_model.onnxmodel static method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.replace_node_input"]], "replace_node_output() (neural_compressor.model.onnx_model.onnxmodel static method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.replace_node_output"]], "replace_output_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.replace_output_of_all_nodes"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "set_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.set_initializer"]], "topological_sort() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.topological_sort"]], "update() (neural_compressor.model.onnx_model.onnxmodel method)": [[324, "neural_compressor.model.onnx_model.ONNXModel.update"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "build_saved_model() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[325, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.build_saved_model"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.estimator_session"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_all_weight_names() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[325, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_all_weight_names"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.get_model_type"]], "get_weight() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[325, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_weight"]], "graph (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_def"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.graph_def"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.graph_session"]], "input_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_node_names"]], "input_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor"]], "input_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor_names"]], "iter_op (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.iter_op"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "model_type (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model_type"]], "name (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.name"]], "neural_compressor.model.tensorflow_model": [[325, "module-neural_compressor.model.tensorflow_model"]], "output_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_node_names"]], "output_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor"]], "output_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor_names"]], "q_config (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.q_config"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[325, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[325, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[325, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.saved_model_session"]], "sess (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.sess"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.slim_session"]], "update_weights() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[325, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.update_weights"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[325, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "workspace_path (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[325, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.workspace_path"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[326, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[326, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[326, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[326, "neural_compressor.model.torch_model.PyTorchModel.export"]], "export_to_bf16_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[326, "neural_compressor.model.torch_model.PyTorchModel.export_to_bf16_onnx"]], "export_to_fp32_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[326, "neural_compressor.model.torch_model.PyTorchModel.export_to_fp32_onnx"]], "export_to_int8_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[326, "neural_compressor.model.torch_model.PyTorchModel.export_to_int8_onnx"]], "export_to_jit() (neural_compressor.model.torch_model.pytorchmodel method)": [[326, "neural_compressor.model.torch_model.PyTorchModel.export_to_jit"]], "forward() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.forward"]], "fp32_model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.fp32_model"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "generate_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.generate_forward_pre_hook"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[326, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "load_quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[326, "neural_compressor.model.torch_model.PyTorchModel.load_quantized_state_dict"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[326, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[326, "neural_compressor.model.torch_model.PyTorchModel.quantized_state_dict"]], "register_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.register_forward_pre_hook"]], "remove_hooks() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.remove_hooks"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[326, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[326, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[326, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "workspace_path (neural_compressor.model.torch_model.ipexmodel property)": [[326, "neural_compressor.model.torch_model.IPEXModel.workspace_path"]], "workspace_path (neural_compressor.model.torch_model.pytorchmodel property)": [[326, "neural_compressor.model.torch_model.PyTorchModel.workspace_path"]], "accuracy (class in neural_compressor.objective)": [[327, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[327, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[327, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[327, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[327, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[327, "neural_compressor.objective.Performance"]], "accuracy_meets() (neural_compressor.objective.multiobjective method)": [[327, "neural_compressor.objective.MultiObjective.accuracy_meets"]], "accuracy_target (neural_compressor.objective.multiobjective property)": [[327, "neural_compressor.objective.MultiObjective.accuracy_target"]], "baseline (neural_compressor.objective.multiobjective property)": [[327, "neural_compressor.objective.MultiObjective.baseline"]], "best_result() (neural_compressor.objective.multiobjective method)": [[327, "neural_compressor.objective.MultiObjective.best_result"]], "compare() (neural_compressor.objective.multiobjective method)": [[327, "neural_compressor.objective.MultiObjective.compare"]], "end() (neural_compressor.objective.accuracy method)": [[327, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[327, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[327, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.multiobjective method)": [[327, "neural_compressor.objective.MultiObjective.end"]], "end() (neural_compressor.objective.objective method)": [[327, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[327, "neural_compressor.objective.Performance.end"]], "evaluate() (neural_compressor.objective.multiobjective method)": [[327, "neural_compressor.objective.MultiObjective.evaluate"]], "model (neural_compressor.objective.objective property)": [[327, "neural_compressor.objective.Objective.model"]], "neural_compressor.objective": [[327, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[327, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[327, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.multiobjective method)": [[327, "neural_compressor.objective.MultiObjective.reset"]], "reset() (neural_compressor.objective.objective method)": [[327, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.multiobjective method)": [[327, "neural_compressor.objective.MultiObjective.result"]], "result() (neural_compressor.objective.objective method)": [[327, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[327, "neural_compressor.objective.Objective.result_list"]], "set_model() (neural_compressor.objective.multiobjective method)": [[327, "neural_compressor.objective.MultiObjective.set_model"]], "start() (neural_compressor.objective.accuracy method)": [[327, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[327, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[327, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.multiobjective method)": [[327, "neural_compressor.objective.MultiObjective.start"]], "start() (neural_compressor.objective.objective method)": [[327, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[327, "neural_compressor.objective.Performance.start"]], "gradientcriterion (class in neural_compressor.pruner.criteria)": [[328, "neural_compressor.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.pruner.criteria)": [[328, "neural_compressor.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.pruner.criteria)": [[328, "neural_compressor.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.pruner.criteria)": [[328, "neural_compressor.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.pruner.criteria)": [[328, "neural_compressor.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.pruner.criteria)": [[328, "neural_compressor.pruner.criteria.get_criterion"]], "neural_compressor.pruner.criteria": [[328, "module-neural_compressor.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.gradientcriterion method)": [[328, "neural_compressor.pruner.criteria.GradientCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[328, "neural_compressor.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipcriterion method)": [[328, "neural_compressor.pruner.criteria.SnipCriterion.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.snipmomentumcriterion method)": [[328, "neural_compressor.pruner.criteria.SnipMomentumCriterion.on_after_optimizer_step"]], "on_step_begin() (neural_compressor.pruner.criteria.magnitudecriterion method)": [[328, "neural_compressor.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.criteria.pruningcriterion method)": [[328, "neural_compressor.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.pruner.criteria)": [[328, "neural_compressor.pruner.criteria.register_criterion"]], "scores (neural_compressor.pruner.criteria.gradientcriterion attribute)": [[328, "neural_compressor.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.pruner.criteria.magnitudecriterion attribute)": [[328, "neural_compressor.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.pruner.criteria.pruningcriterion attribute)": [[328, "neural_compressor.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipcriterion attribute)": [[328, "neural_compressor.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipmomentumcriterion attribute)": [[328, "neural_compressor.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.pruner": [[329, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[330, "module-neural_compressor.pruner.logger"]], "basepattern (class in neural_compressor.pruner.patterns)": [[331, "neural_compressor.pruner.patterns.BasePattern"]], "m (neural_compressor.pruner.patterns.patternninm attribute)": [[331, "neural_compressor.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.pruner.patterns.patternninm attribute)": [[331, "neural_compressor.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.pruner.patterns)": [[331, "neural_compressor.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.pruner.patterns)": [[331, "neural_compressor.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[331, "neural_compressor.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.pruner.patterns.patternnxm attribute)": [[331, "neural_compressor.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.pruner.patterns.basepattern method)": [[331, "neural_compressor.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternninm method)": [[331, "neural_compressor.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.pruner.patterns.basepattern attribute)": [[331, "neural_compressor.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.pruner.patterns.basepattern method)": [[331, "neural_compressor.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.pruner.patterns.patternninm method)": [[331, "neural_compressor.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[331, "neural_compressor.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.pruner.patterns.basepattern method)": [[331, "neural_compressor.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.pruner.patterns.basepattern method)": [[331, "neural_compressor.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternninm method)": [[331, "neural_compressor.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.pruner.patterns.basepattern method)": [[331, "neural_compressor.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.pruner.patterns)": [[331, "neural_compressor.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.basepattern method)": [[331, "neural_compressor.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternninm method)": [[331, "neural_compressor.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.basepattern method)": [[331, "neural_compressor.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[331, "neural_compressor.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[331, "neural_compressor.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[331, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternninm method)": [[331, "neural_compressor.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.pruner.patterns.basepattern method)": [[331, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[331, "neural_compressor.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.pruner.patterns.basepattern attribute)": [[331, "neural_compressor.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[331, "neural_compressor.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[331, "neural_compressor.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[331, "neural_compressor.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.patterns.basepattern attribute)": [[331, "neural_compressor.pruner.patterns.BasePattern.modules"]], "neural_compressor.pruner.patterns": [[331, "module-neural_compressor.pruner.patterns"]], "pattern (neural_compressor.pruner.patterns.basepattern attribute)": [[331, "neural_compressor.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.pruner.patterns.patternninm method)": [[331, "neural_compressor.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.pruner.patterns.basepattern method)": [[331, "neural_compressor.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.pruner.patterns)": [[331, "neural_compressor.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternninm method)": [[331, "neural_compressor.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternninm method)": [[331, "neural_compressor.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.pruner.patterns.basepattern attribute)": [[331, "neural_compressor.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[331, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.pruner.patterns.basepattern method)": [[331, "neural_compressor.pruner.patterns.BasePattern.update_residual_cnt"]], "gradientsensitivitypruner (class in neural_compressor.pruner.pruner_legacy.gradient_sensitivity)": [[332, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[332, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[332, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[332, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[332, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[332, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[332, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_end"]], "parse_weight_name() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[332, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.parse_weight_name"]], "prune_by_importance() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[332, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_by_importance"]], "prune_weight() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[332, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_weight"]], "update_importance_abs() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[332, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_abs"]], "update_importance_elementwise() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[332, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_elementwise"]], "update_importance_weighted() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[332, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_weighted"]], "grouplassopruner (class in neural_compressor.pruner.pruner_legacy.group_lasso)": [[333, "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[333, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "on_before_optimizer_step() (neural_compressor.pruner.pruner_legacy.group_lasso.grouplassopruner method)": [[333, "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner.on_before_optimizer_step"]], "neural_compressor.pruner.pruner_legacy": [[334, "module-neural_compressor.pruner.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.pruner.pruner_legacy.magnitude)": [[335, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[335, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[335, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[335, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[335, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[335, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[335, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_end"]], "patternlockpruner (class in neural_compressor.pruner.pruner_legacy.pattern_lock)": [[336, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[336, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[336, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[336, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[336, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[336, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[336, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_step_end"]], "update_weights() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[336, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.update_weights"]], "pruner (class in neural_compressor.pruner.pruner_legacy.pruner)": [[337, "neural_compressor.pruner.pruner_legacy.pruner.Pruner"]], "neural_compressor.pruner.pruner_legacy.pruner": [[337, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "on_before_optimizer_step() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[337, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[337, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[337, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[337, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[337, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[337, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[337, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_train_end"]], "pruner_registry() (in module neural_compressor.pruner.pruner_legacy.pruner)": [[337, "neural_compressor.pruner.pruner_legacy.pruner.pruner_registry"]], "update_sparsity() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[337, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.update_sparsity"]], "basepruner (class in neural_compressor.pruner.pruners)": [[338, "neural_compressor.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.pruner.pruners)": [[338, "neural_compressor.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.pruner.pruners)": [[338, "neural_compressor.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.pruner.pruners)": [[338, "neural_compressor.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[338, "neural_compressor.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.pruner.pruners.progressivepruner method)": [[338, "neural_compressor.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.pruner.pruners.basepruner attribute)": [[338, "neural_compressor.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.pruner.pruners.basicpruner attribute)": [[338, "neural_compressor.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[338, "neural_compressor.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.pruner.pruners.basepruner attribute)": [[338, "neural_compressor.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.pruner.pruners)": [[338, "neural_compressor.pruner.pruners.get_pruner"]], "global_step (neural_compressor.pruner.pruners.basepruner attribute)": [[338, "neural_compressor.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.pruner.pruners.basepruner attribute)": [[338, "neural_compressor.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.pruners.basepruner attribute)": [[338, "neural_compressor.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.pruners.basepruner attribute)": [[338, "neural_compressor.pruner.pruners.BasePruner.modules"]], "neural_compressor.pruner.pruners": [[338, "module-neural_compressor.pruner.pruners"]], "on_after_eval() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[338, "neural_compressor.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.patternlockpruner method)": [[338, "neural_compressor.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[338, "neural_compressor.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[338, "neural_compressor.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[338, "neural_compressor.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.pruners.progressivepruner method)": [[338, "neural_compressor.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.on_train_end"]], "parse_valid_pruner_types() (in module neural_compressor.pruner.pruners)": [[338, "neural_compressor.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.pruner.pruners.basepruner attribute)": [[338, "neural_compressor.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.pruner.pruners.basicpruner attribute)": [[338, "neural_compressor.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.pruner.pruners.progressivepruner method)": [[338, "neural_compressor.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.pruner.pruners.basepruner attribute)": [[338, "neural_compressor.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.pruner.pruners.basicpruner attribute)": [[338, "neural_compressor.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.pruner.pruners)": [[338, "neural_compressor.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.pruner.pruners.basepruner attribute)": [[338, "neural_compressor.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.pruner.pruners.basicpruner attribute)": [[338, "neural_compressor.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.pruner.pruners.basepruner attribute)": [[338, "neural_compressor.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.pruner.pruners.basicpruner method)": [[338, "neural_compressor.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.pruner.pruners.basepruner attribute)": [[338, "neural_compressor.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[338, "neural_compressor.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.pruner.pruners.basepruner method)": [[338, "neural_compressor.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.basicpruner method)": [[338, "neural_compressor.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.patternlockpruner method)": [[338, "neural_compressor.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.pruner.pruners.progressivepruner method)": [[338, "neural_compressor.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "pruning (class in neural_compressor.pruner.pruning)": [[339, "neural_compressor.pruner.pruning.Pruning"]], "config_file_path (neural_compressor.pruner.pruning.pruning attribute)": [[339, "neural_compressor.pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.pruner.pruning.pruning method)": [[339, "neural_compressor.pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.pruner.pruning.pruning attribute)": [[339, "neural_compressor.pruner.pruning.Pruning.model"]], "model (neural_compressor.pruner.pruning.pruning property)": [[339, "id0"]], "neural_compressor.pruner.pruning": [[339, "module-neural_compressor.pruner.pruning"]], "on_after_eval() (neural_compressor.pruner.pruning.pruning method)": [[339, "neural_compressor.pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[339, "neural_compressor.pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruning.pruning method)": [[339, "neural_compressor.pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[339, "neural_compressor.pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruning.pruning method)": [[339, "neural_compressor.pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruning.pruning method)": [[339, "neural_compressor.pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruning.pruning method)": [[339, "neural_compressor.pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruning.pruning method)": [[339, "neural_compressor.pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruning.pruning method)": [[339, "neural_compressor.pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruning.pruning method)": [[339, "neural_compressor.pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.pruner.pruning.pruning attribute)": [[339, "neural_compressor.pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.pruner.pruning.pruning attribute)": [[339, "neural_compressor.pruner.pruning.Pruning.pruners"]], "update_config() (neural_compressor.pruner.pruning.pruning method)": [[339, "neural_compressor.pruner.pruning.Pruning.update_config"]], "basereg (class in neural_compressor.pruner.regs)": [[340, "neural_compressor.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.pruner.regs)": [[340, "neural_compressor.pruner.regs.GroupLasso"]], "alpha (neural_compressor.pruner.regs.grouplasso attribute)": [[340, "neural_compressor.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.pruner.regs)": [[340, "neural_compressor.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.pruner.regs)": [[340, "neural_compressor.pruner.regs.get_reg_type"]], "neural_compressor.pruner.regs": [[340, "module-neural_compressor.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[340, "neural_compressor.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[340, "neural_compressor.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[340, "neural_compressor.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[340, "neural_compressor.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.pruner.regs.grouplasso attribute)": [[340, "neural_compressor.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.pruner.regs)": [[340, "neural_compressor.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.pruner.schedulers)": [[341, "neural_compressor.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.pruner.schedulers)": [[341, "neural_compressor.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.pruner.schedulers)": [[341, "neural_compressor.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.pruner.schedulers.pruningscheduler attribute)": [[341, "neural_compressor.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.pruner.schedulers)": [[341, "neural_compressor.pruner.schedulers.get_scheduler"]], "neural_compressor.pruner.schedulers": [[341, "module-neural_compressor.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.pruner.schedulers)": [[341, "neural_compressor.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.iterativescheduler method)": [[341, "neural_compressor.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.oneshotscheduler method)": [[341, "neural_compressor.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.pruningscheduler method)": [[341, "neural_compressor.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "check_config() (in module neural_compressor.pruner.utils)": [[342, "neural_compressor.pruner.utils.check_config"]], "neural_compressor.pruner.utils": [[342, "module-neural_compressor.pruner.utils"]], "parse_to_prune() (in module neural_compressor.pruner.utils)": [[342, "neural_compressor.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.pruner.utils)": [[342, "neural_compressor.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.pruner.utils)": [[342, "neural_compressor.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.pruner.utils)": [[342, "neural_compressor.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.pruner.utils)": [[342, "neural_compressor.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.pruner.utils)": [[342, "neural_compressor.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.pruner.utils)": [[342, "neural_compressor.pruner.utils.update_params"]], "fit() (in module neural_compressor.quantization)": [[343, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[343, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[344, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[344, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[344, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[344, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[345, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[345, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[345, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[346, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[346, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[346, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[346, "neural_compressor.strategy.bayesian.acq_max"]], "array_to_params() (neural_compressor.strategy.bayesian.targetspace method)": [[346, "neural_compressor.strategy.bayesian.TargetSpace.array_to_params"]], "bounds (neural_compressor.strategy.bayesian.targetspace property)": [[346, "neural_compressor.strategy.bayesian.TargetSpace.bounds"]], "dim (neural_compressor.strategy.bayesian.targetspace property)": [[346, "neural_compressor.strategy.bayesian.TargetSpace.dim"]], "empty (neural_compressor.strategy.bayesian.targetspace property)": [[346, "neural_compressor.strategy.bayesian.TargetSpace.empty"]], "gen_next_params() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[346, "neural_compressor.strategy.bayesian.BayesianOptimization.gen_next_params"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[346, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "keys (neural_compressor.strategy.bayesian.targetspace property)": [[346, "neural_compressor.strategy.bayesian.TargetSpace.keys"]], "max (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[346, "neural_compressor.strategy.bayesian.BayesianOptimization.max"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[346, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[346, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[346, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "params (neural_compressor.strategy.bayesian.targetspace property)": [[346, "neural_compressor.strategy.bayesian.TargetSpace.params"]], "params_to_array() (neural_compressor.strategy.bayesian.targetspace method)": [[346, "neural_compressor.strategy.bayesian.TargetSpace.params_to_array"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[346, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[346, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[346, "neural_compressor.strategy.bayesian.BayesianOptimization.res"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[346, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "space (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[346, "neural_compressor.strategy.bayesian.BayesianOptimization.space"]], "suggest() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[346, "neural_compressor.strategy.bayesian.BayesianOptimization.suggest"]], "target (neural_compressor.strategy.bayesian.targetspace property)": [[346, "neural_compressor.strategy.bayesian.TargetSpace.target"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[347, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[347, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[347, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[347, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[347, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[348, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[348, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[348, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[349, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[349, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[349, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[350, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[351, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[351, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "neural_compressor.strategy.mse": [[351, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[351, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[352, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[352, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[352, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[353, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[353, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[353, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[354, "neural_compressor.strategy.strategy.TuneStrategy"]], "deploy_config() (neural_compressor.strategy.strategy.tunestrategy method)": [[354, "neural_compressor.strategy.strategy.TuneStrategy.deploy_config"]], "evaluation_result (neural_compressor.strategy.strategy.tunestrategy property)": [[354, "neural_compressor.strategy.strategy.TuneStrategy.evaluation_result"]], "initial_best_acc() (neural_compressor.strategy.strategy.tunestrategy method)": [[354, "neural_compressor.strategy.strategy.TuneStrategy.initial_best_acc"]], "initial_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[354, "neural_compressor.strategy.strategy.TuneStrategy.initial_tuning_cfg"]], "neural_compressor.strategy.strategy": [[354, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[354, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "set_q_func() (neural_compressor.strategy.strategy.tunestrategy method)": [[354, "neural_compressor.strategy.strategy.TuneStrategy.set_q_func"]], "set_tuning_space() (neural_compressor.strategy.strategy.tunestrategy method)": [[354, "neural_compressor.strategy.strategy.TuneStrategy.set_tuning_space"]], "setup_resume() (neural_compressor.strategy.strategy.tunestrategy method)": [[354, "neural_compressor.strategy.strategy.TuneStrategy.setup_resume"]], "show_baseline_info() (neural_compressor.strategy.strategy.tunestrategy method)": [[354, "neural_compressor.strategy.strategy.TuneStrategy.show_baseline_info"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[354, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[354, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[354, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "update_best_op_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[354, "neural_compressor.strategy.strategy.TuneStrategy.update_best_op_tuning_cfg"]], "optuningconfig (class in neural_compressor.strategy.utils)": [[355, "neural_compressor.strategy.utils.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.optuningconfig class method)": [[355, "neural_compressor.strategy.utils.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.optuningconfig method)": [[355, "neural_compressor.strategy.utils.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils": [[355, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[356, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[357, "module-neural_compressor.strategy.utils.tuning_space"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[358, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig class method)": [[358, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig method)": [[358, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[358, "module-neural_compressor.strategy.utils.tuning_structs"]], "compressionmanager (class in neural_compressor.training)": [[359, "neural_compressor.training.CompressionManager"]], "compressionmanager.callbacks (class in neural_compressor.training)": [[359, "neural_compressor.training.CompressionManager.CallBacks"]], "export() (neural_compressor.training.compressionmanager method)": [[359, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[359, "module-neural_compressor.training"]], "on_after_compute_loss() (neural_compressor.training.compressionmanager.callbacks method)": [[359, "neural_compressor.training.CompressionManager.CallBacks.on_after_compute_loss"]], "on_after_optimizer_step() (neural_compressor.training.compressionmanager.callbacks method)": [[359, "neural_compressor.training.CompressionManager.CallBacks.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.training.compressionmanager.callbacks method)": [[359, "neural_compressor.training.CompressionManager.CallBacks.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[359, "neural_compressor.training.CompressionManager.CallBacks.on_epoch_begin"]], "on_epoch_end() (neural_compressor.training.compressionmanager.callbacks method)": [[359, "neural_compressor.training.CompressionManager.CallBacks.on_epoch_end"]], "on_step_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[359, "neural_compressor.training.CompressionManager.CallBacks.on_step_begin"]], "on_step_end() (neural_compressor.training.compressionmanager.callbacks method)": [[359, "neural_compressor.training.CompressionManager.CallBacks.on_step_end"]], "on_train_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[359, "neural_compressor.training.CompressionManager.CallBacks.on_train_begin"]], "on_train_end() (neural_compressor.training.compressionmanager.callbacks method)": [[359, "neural_compressor.training.CompressionManager.CallBacks.on_train_end"]], "prepare_compression() (in module neural_compressor.training)": [[359, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[359, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[360, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[360, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[360, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[361, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[362, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[362, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[362, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[362, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[362, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[362, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[362, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[362, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[362, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[362, "module-neural_compressor.utils.create_obj_from_config"]], "layerhistogramcollector (class in neural_compressor.utils)": [[363, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[363, "neural_compressor.utils.LayerHistogramCollector.collect"]], "debug() (in module neural_compressor.utils)": [[363, "neural_compressor.utils.debug"]], "error() (in module neural_compressor.utils)": [[363, "neural_compressor.utils.error"]], "fatal() (in module neural_compressor.utils)": [[363, "neural_compressor.utils.fatal"]], "info() (in module neural_compressor.utils)": [[363, "neural_compressor.utils.info"]], "log() (in module neural_compressor.utils)": [[363, "neural_compressor.utils.log"]], "neural_compressor.utils": [[363, "module-neural_compressor.utils"]], "warn() (in module neural_compressor.utils)": [[363, "neural_compressor.utils.warn"]], "warning() (in module neural_compressor.utils)": [[363, "neural_compressor.utils.warning"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[364, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[364, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[364, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[364, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[364, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[365, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "from_pretrained() (neural_compressor.utils.load_huggingface.optimizedmodel class method)": [[365, "neural_compressor.utils.load_huggingface.OptimizedModel.from_pretrained"]], "neural_compressor.utils.load_huggingface": [[365, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[365, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[366, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[366, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[366, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[366, "neural_compressor.utils.logger.fatal"]], "get_logger() (neural_compressor.utils.logger.logger method)": [[366, "neural_compressor.utils.logger.Logger.get_logger"]], "info() (in module neural_compressor.utils.logger)": [[366, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[366, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[366, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[366, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[366, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[367, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[367, "neural_compressor.utils.options.onnxrt"]], "load() (in module neural_compressor.utils.pytorch)": [[368, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[368, "module-neural_compressor.utils.pytorch"]], "cpuinfo (class in neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.Statistics"]], "bf16 (neural_compressor.utils.utility.cpuinfo property)": [[369, "neural_compressor.utils.utility.CpuInfo.bf16"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.compute_sparsity"]], "cores_per_socket (neural_compressor.utils.utility.cpuinfo property)": [[369, "neural_compressor.utils.utility.CpuInfo.cores_per_socket"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (neural_compressor.utils.utility.cpuinfo method)": [[369, "neural_compressor.utils.utility.CpuInfo.get_number_of_sockets"]], "get_size() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[369, "module-neural_compressor.utils.utility"]], "print_stat() (neural_compressor.utils.utility.statistics method)": [[369, "neural_compressor.utils.utility.Statistics.print_stat"]], "recover() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.set_workspace"]], "singleton() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[369, "neural_compressor.utils.utility.version1_lte_version2"]], "vnni (neural_compressor.utils.utility.cpuinfo property)": [[369, "neural_compressor.utils.utility.CpuInfo.vnni"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[370, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[370, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[370, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[370, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[370, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[370, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[370, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[370, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[371, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[371, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[371, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[371, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[372, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[372, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[372, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[372, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[372, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[372, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[372, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[373, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[373, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[374, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[374, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[374, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[374, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[374, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[374, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[375, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[375, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[375, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[375, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[375, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[375, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[376, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[376, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[376, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[376, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[376, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[377, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[378, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[378, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[378, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[378, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[378, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[379, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[379, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[379, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[380, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[380, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[380, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_evaluation_config"]], "generate_pruning_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[380, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_pruning_config"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[380, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[381, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[381, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[381, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[381, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[381, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[381, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[382, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[382, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[382, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[382, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[382, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[382, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[382, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[382, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[382, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[382, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[382, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[382, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[383, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[383, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[384, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[384, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[384, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[385, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[386, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[386, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[386, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[386, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[386, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[386, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[386, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[386, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[386, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[386, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[386, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[386, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[386, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[386, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[387, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "generate_tree() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[387, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.generate_tree"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[387, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "parse() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[387, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse"]], "parse_entry() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[387, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse_entry"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[388, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[388, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[388, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[388, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[388, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[388, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[389, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[389, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[390, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[390, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[390, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[391, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[391, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[391, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[391, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[392, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[392, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[392, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[393, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[393, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[393, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[393, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[394, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[394, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[394, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[394, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[395, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[395, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[396, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[396, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[396, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[396, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[397, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[398, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[398, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[398, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[398, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[399, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[399, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[399, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[400, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_pruning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_pruning_details"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[400, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[401, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[401, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[401, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[401, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[402, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[402, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[402, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[402, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[403, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[403, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[403, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[404, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[404, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[404, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[404, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[404, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[404, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[404, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[405, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[405, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[405, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[405, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[405, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[405, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[405, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[405, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[406, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[406, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[406, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.build_info"]], "delete_pruning_details() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[406, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.delete_pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[406, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[406, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.update"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[407, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[407, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[407, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[407, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[407, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[407, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[407, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[408, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[408, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[408, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[408, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[408, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[408, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[409, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[409, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[409, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[410, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[412, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[412, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[412, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[412, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[412, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[412, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[413, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[413, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[413, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[414, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[414, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[414, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[415, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[415, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[415, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[415, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_tuning_details"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_pruning_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.load_pruning_details_config"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[416, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[416, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[417, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[417, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[417, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[417, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[417, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[417, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[417, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_tuning_details"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_pruning_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.load_pruning_details_config"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[418, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[418, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[419, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[419, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[420, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[420, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[420, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[421, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[421, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[421, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[421, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[421, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[421, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[422, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[422, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[423, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[423, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[423, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[423, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[424, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[424, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[424, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[424, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[424, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[424, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[424, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[424, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[424, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[425, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[425, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[425, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[426, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[427, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[428, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[428, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[428, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[429, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[429, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[429, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[429, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[429, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[429, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[430, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[430, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[430, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[431, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[432, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[432, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[432, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[433, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[433, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[434, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[435, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[435, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[436, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[436, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[436, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[437, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[437, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[437, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[437, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[438, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[438, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[438, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[438, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[438, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[438, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[438, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[438, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[438, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[439, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[439, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[439, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[439, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[440, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[441, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[441, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[441, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[442, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[443, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[443, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[443, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[444, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[444, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[444, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[445, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[446, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[447, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[448, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[449, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[450, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[450, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[451, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[451, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[452, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[453, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[453, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[453, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[453, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[453, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[453, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[453, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[453, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[453, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[453, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[453, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[453, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[453, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[453, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[453, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "supports_pruning (neural_compressor.ux.components.model.model.model property)": [[453, "neural_compressor.ux.components.model.model.Model.supports_pruning"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[454, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[454, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[455, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[456, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[456, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[456, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[456, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[456, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[456, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[456, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[456, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[456, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[456, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[456, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[456, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[457, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[458, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[458, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[458, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[458, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[458, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[459, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[459, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[459, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[459, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[459, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[459, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[459, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[460, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[460, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[460, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[461, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[461, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[461, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[461, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[462, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[463, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[463, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[463, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[463, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[463, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[464, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[464, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[464, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[464, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[464, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[464, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[465, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[465, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[465, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[465, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[465, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[465, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[465, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[465, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[465, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[465, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "supports_pruning (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[465, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.supports_pruning"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[466, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[466, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[466, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[467, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[467, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[468, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[468, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[469, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[469, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[470, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[470, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[470, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[470, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[470, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[470, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[470, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[470, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[470, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[471, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[472, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[472, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[472, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[472, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[472, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[472, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[472, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[473, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[474, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[474, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[474, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[474, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[474, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[474, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[474, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[474, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[475, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[475, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[475, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[475, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[475, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[475, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[475, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[476, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[476, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[476, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[477, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[477, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[477, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[477, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[477, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[477, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[477, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[478, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[479, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[479, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[479, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[479, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[479, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[480, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[480, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[481, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[482, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[482, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[482, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[482, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[482, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[482, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[482, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[483, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[483, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[483, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[483, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[483, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[484, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[485, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[485, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[486, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[486, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[486, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[486, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[486, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[486, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[486, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[486, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[486, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[486, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[486, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[486, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[486, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[486, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.pruning": [[487, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[488, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[488, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[488, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[489, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "configuration_data (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[489, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[489, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[489, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.generate_config"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[489, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "optimization_script (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[489, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[489, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.parameters"]], "neural_compressor.ux.components.optimization.tune": [[490, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[491, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[491, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[491, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[491, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[492, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[492, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[492, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[492, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[492, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[492, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[492, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[492, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[492, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[493, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[493, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[493, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[493, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[493, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[493, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[493, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[493, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[493, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[494, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[494, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[494, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[495, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[495, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[495, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[496, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[497, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[497, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[497, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[498, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[498, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[498, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[499, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[499, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[499, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[499, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[499, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[499, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[499, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[499, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[499, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[500, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[500, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[500, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[501, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[502, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[502, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[502, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[502, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[502, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[502, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[502, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[502, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[503, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[503, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[504, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[504, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[504, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[505, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[506, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[506, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[506, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[506, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[506, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[506, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[506, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[506, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[507, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[507, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[507, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[507, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[507, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[508, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[508, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[508, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[508, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[508, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[509, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[509, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[509, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[509, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[509, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[509, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[509, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[509, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[509, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[509, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[509, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[510, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[510, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[510, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[510, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[511, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[511, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[511, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[512, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[512, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[512, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[512, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[512, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[512, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[512, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[512, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[512, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[512, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[512, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[513, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[514, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[514, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[514, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[514, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[515, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[515, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[516, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[516, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[516, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[516, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[516, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[516, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[516, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[516, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[516, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[516, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[516, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[516, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[516, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[516, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[516, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[516, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[516, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[516, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[516, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[516, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[516, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[516, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[517, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[517, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[517, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[517, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[517, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[517, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[517, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[517, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[517, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[517, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[518, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[518, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[518, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[518, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[518, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[519, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[519, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[520, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[520, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[521, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[522, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[522, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[522, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[522, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[522, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[522, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[522, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[522, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[522, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[522, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[522, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[522, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[522, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[522, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[523, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[523, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[523, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[523, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[523, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[524, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[524, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[525, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[525, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[525, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[525, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[526, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[526, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[526, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[526, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[526, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[526, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[526, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[526, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[526, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[526, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[526, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[526, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[527, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[527, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[527, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[527, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[527, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[527, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[527, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "get_label_shift_value() (neural_compressor.ux.utils.workload.evaluation.postprocessschema static method)": [[527, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema.get_label_shift_value"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[527, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[527, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[527, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[527, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[527, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[528, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[528, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[528, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[529, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[530, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[530, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[530, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[531, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[531, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[531, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[531, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[531, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "initialize_pruners() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[532, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.initialize_pruners"]], "neural_compressor.ux.utils.workload.pruning": [[532, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[532, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[532, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "serialize() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach method)": [[532, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize"]], "serialize_pruner() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[532, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize_pruner"]], "set_postprocess_transforms() (neural_compressor.ux.utils.workload.pruning.train method)": [[532, "neural_compressor.ux.utils.workload.pruning.Train.set_postprocess_transforms"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[533, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[533, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[533, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[533, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[533, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[533, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[534, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[534, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[534, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[534, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[534, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[534, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[534, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[534, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[534, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[534, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[534, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[534, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[534, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[534, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[534, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[535, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[535, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[535, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[536, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[536, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[536, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[536, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[536, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[536, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[536, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[536, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[536, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[536, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[536, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[536, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[536, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[537, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[537, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[537, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[537, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[537, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[537, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[537, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[537, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[537, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[537, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[537, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[537, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[537, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[538, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[538, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[539, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[540, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[540, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[540, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[540, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[540, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[540, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[540, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[540, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[540, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[540, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[541, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[541, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[541, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[541, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[541, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[541, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[541, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[541, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[541, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[541, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[541, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[541, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[541, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[542, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[542, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[543, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[543, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[543, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[543, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[543, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[543, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[544, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[545, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[545, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[545, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[546, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[546, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[547, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[547, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[547, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[548, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[548, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[548, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[549, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[549, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[549, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[549, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[549, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[549, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[550, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[550, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[550, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[550, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[550, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[551, "module-neural_compressor.version"]]}})